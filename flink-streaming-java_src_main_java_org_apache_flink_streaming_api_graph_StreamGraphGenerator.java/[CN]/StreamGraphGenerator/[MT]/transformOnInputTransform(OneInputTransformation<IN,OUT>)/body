{
  Collection<Integer> inputIds=transform(transform.getInput());
  if (alreadyTransformed.containsKey(transform)) {
    return alreadyTransformed.get(transform);
  }
  String slotSharingGroup=determineSlotSharingGroup(transform.getSlotSharingGroup(),inputIds);
  streamGraph.addOperator(transform.getId(),slotSharingGroup,transform.getOperator(),transform.getInputType(),transform.getOutputType(),transform.getName());
  if (transform.getStateKeySelector() != null) {
    TypeSerializer<?> keySerializer=transform.getStateKeyType().createSerializer(env.getConfig());
    streamGraph.setOneInputStateKey(transform.getId(),transform.getStateKeySelector(),keySerializer);
  }
  streamGraph.setParallelism(transform.getId(),transform.getParallelism());
  for (  Integer inputId : inputIds) {
    streamGraph.addEdge(inputId,transform.getId(),0);
  }
  return Collections.singleton(transform.getId());
}
