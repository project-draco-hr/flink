{
  Tuple2<StreamNode,StreamNode> itSourceAndSink=streamGraph.createIterationSourceAndSink(coIterate.getId(),getNewIterationNodeId(),getNewIterationNodeId(),coIterate.getWaitTime(),coIterate.getParallelism());
  StreamNode itSource=itSourceAndSink.f0;
  StreamNode itSink=itSourceAndSink.f1;
  streamGraph.setSerializers(itSource.getId(),null,null,coIterate.getOutputType().createSerializer(env.getConfig()));
  streamGraph.setSerializers(itSink.getId(),coIterate.getOutputType().createSerializer(env.getConfig()),null,null);
  Collection<Integer> resultIds=Collections.singleton(itSource.getId());
  alreadyTransformed.put(coIterate,resultIds);
  for (  StreamTransformation<F> feedbackEdge : coIterate.getFeedbackEdges()) {
    Collection<Integer> feedbackIds=transform(feedbackEdge);
    for (    Integer feedbackId : feedbackIds) {
      streamGraph.addEdge(feedbackId,itSink.getId(),0);
    }
  }
  return Collections.singleton(itSource.getId());
}
