{
  GenericDataSource<EmptyInputFormat> datasource=new GenericDataSource<EmptyInputFormat>(EmptyInputFormat.class,"Source");
  datasource.getParameters().setString(CLASS_TO_INSTANTIATE_KEY,CLASS_TO_INSTANTIATE_NAME);
  GenericDataSink sink=new GenericDataSink(BlackholeOutputFormat.class,datasource,"Sink");
  sink.getParameters().setString(CLASS_TO_INSTANTIATE_KEY,CLASS_TO_INSTANTIATE_NAME);
  Plan plan=new Plan(sink);
  PactCompiler pc=new PactCompiler();
  OptimizedPlan op=pc.compile(plan);
  JobGraphGenerator jgg=new JobGraphGenerator();
  JobGraph jobGraph=jgg.compileJobGraph(op);
{
    final InputStream is=getClass().getClassLoader().getResourceAsStream(EXTERNAL_JAR_RESOURCE);
    final FileOutputStream fos=new FileOutputStream(this.jarTempPath);
    final byte[] buffer=new byte[1024];
    int numRead;
    while ((numRead=is.read(buffer)) != -1) {
      fos.write(buffer,0,numRead);
    }
    is.close();
    fos.close();
  }
  jobGraph.addJar(new Path("file://" + this.jarTempPath));
  return jobGraph;
}
