{
  checkNotNull(config,"config can not be null");
  if (!config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_TYPE)) {
    if (!config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_ACCESSKEYID) || !config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_SECRETKEY)) {
      throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_ACCESSKEYID + "') "+ "and Secret Key ('"+ KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_SECRETKEY+ "') when using the BASIC AWS credential provider type.");
    }
  }
 else {
    String credentialsProviderType=config.getProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_TYPE);
    CredentialProviderType providerType;
    try {
      providerType=CredentialProviderType.valueOf(credentialsProviderType);
    }
 catch (    IllegalArgumentException e) {
      StringBuilder sb=new StringBuilder();
      for (      CredentialProviderType type : CredentialProviderType.values()) {
        sb.append(type.toString()).append(", ");
      }
      throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString());
    }
    if (providerType == CredentialProviderType.BASIC) {
      if (!config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_ACCESSKEYID) || !config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_SECRETKEY)) {
        throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_ACCESSKEYID + "') "+ "and Secret Key ('"+ KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_SECRETKEY+ "') when using the BASIC AWS credential provider type.");
      }
    }
  }
  if (!config.containsKey(KinesisConfigConstants.CONFIG_AWS_REGION)) {
    throw new IllegalArgumentException("The AWS region ('" + KinesisConfigConstants.CONFIG_AWS_REGION + "') must be set in the config.");
  }
 else {
    if (!AWSUtil.isValidRegion(config.getProperty(KinesisConfigConstants.CONFIG_AWS_REGION))) {
      StringBuilder sb=new StringBuilder();
      for (      Regions region : Regions.values()) {
        sb.append(region.getName()).append(", ");
      }
      throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString());
    }
  }
  if (config.containsKey(KinesisConfigConstants.CONFIG_STREAM_INIT_POSITION_TYPE)) {
    String initPosType=config.getProperty(KinesisConfigConstants.CONFIG_STREAM_INIT_POSITION_TYPE);
    try {
      InitialPosition.valueOf(initPosType);
    }
 catch (    IllegalArgumentException e) {
      StringBuilder sb=new StringBuilder();
      for (      InitialPosition pos : InitialPosition.values()) {
        sb.append(pos.toString()).append(", ");
      }
      throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString());
    }
  }
  validateOptionalPositiveIntProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETRECORDS_MAX,"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.");
  validateOptionalPositiveIntProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETRECORDS_RETRIES,"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETRECORDS_BACKOFF_BASE,"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETRECORDS_BACKOFF_MAX,"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value");
  validateOptionalPositiveDoubleProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value");
  validateOptionalPositiveIntProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETITERATOR_RETRIES,"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETITERATOR_BACKOFF_BASE,"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETITERATOR_BACKOFF_MAX,"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value");
  validateOptionalPositiveDoubleProperty(config,KinesisConfigConstants.CONFIG_SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_SHARD_DISCOVERY_INTERVAL_MILLIS,"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_STREAM_DESCRIBE_BACKOFF_BASE,"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_STREAM_DESCRIBE_BACKOFF_MAX,"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value");
  validateOptionalPositiveDoubleProperty(config,KinesisConfigConstants.CONFIG_STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_PRODUCER_COLLECTION_MAX_COUNT,"Invalid value given for maximum number of items to pack into a PutRecords request. Must be a valid non-negative long value.");
  validateOptionalPositiveLongProperty(config,KinesisConfigConstants.CONFIG_PRODUCER_AGGREGATION_MAX_COUNT,"Invalid value given for maximum number of items to pack into an aggregated record. Must be a valid non-negative long value.");
}
