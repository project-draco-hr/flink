{
  final FlatJoinFunction<IT1,IT2,OT> joinFunction=taskContext.getStub();
  final Collector<OT> collector=taskContext.getOutputCollector();
  final MutableObjectIterator<IT1> probeSideInput=taskContext.getInput(0);
  if (objectReuseEnabled) {
    IT1 probeSideRecord=this.probeSideRecord;
    if (hashTable != null) {
      final CompactingHashTable<IT2> join=hashTable;
      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(probeSideComparator,pairComparator);
      IT2 buildSideRecord=this.solutionSideRecord;
      while (this.running && ((probeSideRecord=probeSideInput.next(probeSideRecord)) != null)) {
        IT2 matchedRecord=prober.getMatchFor(probeSideRecord,buildSideRecord);
        joinFunction.join(probeSideRecord,matchedRecord,collector);
      }
    }
 else     if (objectMap != null) {
      final JoinHashMap<IT2> hashTable=this.objectMap;
      final JoinHashMap<IT2>.Prober<IT1> prober=this.objectMap.createProber(probeSideComparator,pairComparator);
      final TypeSerializer<IT2> buildSerializer=hashTable.getBuildSerializer();
      while (this.running && ((probeSideRecord=probeSideInput.next(probeSideRecord)) != null)) {
        IT2 match=prober.lookupMatch(probeSideRecord);
        joinFunction.join(probeSideRecord,buildSerializer.copy(match),collector);
      }
    }
 else {
      throw new RuntimeException();
    }
  }
 else {
    IT1 probeSideRecord;
    if (hashTable != null) {
      final CompactingHashTable<IT2> join=hashTable;
      final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber(probeSideComparator,pairComparator);
      IT2 buildSideRecord;
      while (this.running && ((probeSideRecord=probeSideInput.next()) != null)) {
        buildSideRecord=prober.getMatchFor(probeSideRecord);
        joinFunction.join(probeSideRecord,buildSideRecord,collector);
      }
    }
 else     if (objectMap != null) {
      final JoinHashMap<IT2> hashTable=this.objectMap;
      final JoinHashMap<IT2>.Prober<IT1> prober=this.objectMap.createProber(probeSideComparator,pairComparator);
      final TypeSerializer<IT2> buildSerializer=hashTable.getBuildSerializer();
      while (this.running && ((probeSideRecord=probeSideInput.next()) != null)) {
        IT2 match=prober.lookupMatch(probeSideRecord);
        joinFunction.join(probeSideRecord,buildSerializer.copy(match),collector);
      }
    }
 else {
      throw new RuntimeException();
    }
  }
}
