{
  RecordDeserializer<KeyValuePair<Key,Value>> deserializer1=new KeyValuePairDeserializer(this.matchStub.getFirstInKeyType(),this.matchStub.getFirstInValueType());
  RecordDeserializer<KeyValuePair<Key,Value>> deserializer2=new KeyValuePairDeserializer(this.matchStub.getSecondInKeyType(),this.matchStub.getSecondInValueType());
  DistributionPattern dp1=null;
switch (this.config.getInputShipStrategy(0)) {
case FORWARD:
    dp1=new PointwiseDistributionPattern();
  break;
case PARTITION_HASH:
dp1=new BipartiteDistributionPattern();
break;
case BROADCAST:
dp1=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No input ship strategy provided for first input of MatchTask.");
}
DistributionPattern dp2=null;
switch (this.config.getInputShipStrategy(1)) {
case FORWARD:
dp2=new PointwiseDistributionPattern();
break;
case PARTITION_HASH:
dp2=new BipartiteDistributionPattern();
break;
case BROADCAST:
dp2=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No input ship strategy provided for second input of MatchTask.");
}
final int groupSizeOne=this.config.getGroupSize(1);
if (groupSizeOne == 1) {
this.reader1=new RecordReader<KeyValuePair<Key,Value>>(this,deserializer1,dp1);
}
 else {
RecordReader<KeyValuePair<Key,Value>>[] readers=new RecordReader[groupSizeOne];
for (int i=0; i < groupSizeOne; ++i) {
readers[i]=new RecordReader<KeyValuePair<Key,Value>>(this,deserializer1,dp1);
}
this.reader1=new UnionRecordReader<KeyValuePair<Key,Value>>(readers);
}
final int groupSizeTwo=this.config.getGroupSize(2);
if (groupSizeTwo == 1) {
this.reader2=new RecordReader<KeyValuePair<Key,Value>>(this,deserializer2,dp2);
}
 else {
RecordReader<KeyValuePair<Key,Value>>[] readers=new RecordReader[groupSizeTwo];
for (int i=0; i < groupSizeTwo; ++i) {
readers[i]=new RecordReader<KeyValuePair<Key,Value>>(this,deserializer2,dp2);
}
this.reader2=new UnionRecordReader<KeyValuePair<Key,Value>>(readers);
}
}
