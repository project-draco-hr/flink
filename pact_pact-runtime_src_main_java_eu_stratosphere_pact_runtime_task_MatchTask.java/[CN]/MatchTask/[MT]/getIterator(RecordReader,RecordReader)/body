{
  final MemoryManager memoryManager=getEnvironment().getMemoryManager();
  final IOManager ioManager=getEnvironment().getIOManager();
switch (config.getLocalStrategy()) {
case SORTMERGE:
    return new SortMergeMatchIterator(memoryManager,ioManager,reader1,reader2,matchStub.getFirstInKeyType(),matchStub.getFirstInValueType(),matchStub.getSecondInValueType(),NUM_SORT_BUFFERS,SIZE_SORT_BUFFER,((int)(MEMORY_IO * (1.0 - MEMORY_SHARE_RATIO))),MAX_NUM_FILEHANLDES,this);
case HYBRIDHASH_FIRST:
  return new HybridHashMatchIterator(memoryManager,ioManager,reader1,reader2,matchStub.getFirstInKeyType(),matchStub.getFirstInValueType(),matchStub.getSecondInValueType(),InputRoles.BUILD_PROBE,((int)(MEMORY_IO * (1.0 - MEMORY_SHARE_RATIO))),this);
case HYBRIDHASH_SECOND:
return new HybridHashMatchIterator(memoryManager,ioManager,reader1,reader2,matchStub.getFirstInKeyType(),matchStub.getFirstInValueType(),matchStub.getSecondInValueType(),InputRoles.PROBE_BUILD,((int)(MEMORY_IO * (1.0 - MEMORY_SHARE_RATIO))),this);
case MMHASH_FIRST:
return new InMemoryHashMatchIterator(reader1,reader2);
case MMHASH_SECOND:
return new InMemoryHashMatchIterator(reader2,reader1);
default :
throw new RuntimeException("Unknown local strategy for MatchTask");
}
}
