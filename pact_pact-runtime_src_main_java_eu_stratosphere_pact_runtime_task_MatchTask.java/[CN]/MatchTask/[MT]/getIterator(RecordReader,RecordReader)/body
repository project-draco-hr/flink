{
  final MemoryManager memoryManager=getEnvironment().getMemoryManager();
  final IOManager ioManager=getEnvironment().getIOManager();
switch (config.getLocalStrategy()) {
case SORT_BOTH_MERGE:
case SORT_FIRST_MERGE:
case SORT_SECOND_MERGE:
case MERGE:
    return new SortMergeMatchIterator(memoryManager,ioManager,reader1,reader2,matchStub.getFirstInKeyType(),matchStub.getFirstInValueType(),matchStub.getSecondInValueType(),this.availableMemory,this.maxFileHandles,this.spillThreshold,config.getLocalStrategy(),this);
case HYBRIDHASH_FIRST:
  return new BuildFirstHashMatchIterator(new NepheleReaderIterator<KeyValuePair<Key,Value>>(this.reader1),new NepheleReaderIterator<KeyValuePair<Key,Value>>(this.reader2),matchStub.getFirstInKeyType(),matchStub.getFirstInValueType(),matchStub.getSecondInValueType(),memoryManager,ioManager,this,this.availableMemory);
case HYBRIDHASH_SECOND:
return new BuildSecondHashMatchIterator(new NepheleReaderIterator<KeyValuePair<Key,Value>>(this.reader1),new NepheleReaderIterator<KeyValuePair<Key,Value>>(this.reader2),matchStub.getFirstInKeyType(),matchStub.getFirstInValueType(),matchStub.getSecondInValueType(),memoryManager,ioManager,this,this.availableMemory);
default :
throw new RuntimeException("Unsupported local strategy for MatchTask: " + config.getLocalStrategy());
}
}
