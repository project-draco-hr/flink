{
  final Value firstV1=values1.next();
  final Value firstV2=values2.next();
  if (firstV1 == null || firstV2 == null) {
    return;
  }
  final boolean v1HasNext=values1.hasNext();
  final boolean v2HasNext=values2.hasNext();
  if (!v1HasNext && !v2HasNext) {
    matchStub.match(key,firstV1,firstV2,output);
    return;
  }
  if (!this.taskCanceled && !v1HasNext) {
    ValueIncludingIterator v2Iterator=new ValueIncludingIterator(firstV2,values2);
    cross1withNValues(key,firstV1,v2Iterator,false);
  }
 else   if (!this.taskCanceled && !v2HasNext) {
    ValueIncludingIterator v1Iterator=new ValueIncludingIterator(firstV1,values1);
    cross1withNValues(key,firstV2,v1Iterator,true);
  }
 else {
    IteratorNepheleReader v1Reader=new IteratorNepheleReader(new ValueIncludingIterator(firstV1,values1));
    IteratorNepheleReader v2Reader=new IteratorNepheleReader(new ValueIncludingIterator(firstV2,values2));
    crossMwithNValues(key,v2Reader,v1Reader,true);
  }
}
