{
  final int numElements=20;
  final String outPath=hdfsURI + "/rolling-out";
  TestTimeServiceProvider clock=new TestTimeServiceProvider();
  clock.setCurrentTime(0L);
  BucketingSink<String> sink=new BucketingSink<String>(outPath).setBucketer(new DateTimeBucketer<String>("ss")).setPartPrefix("part").setPendingPrefix("").setPendingSuffix("");
  OneInputStreamOperatorTestHarness<String,Object> testHarness=createTestSink(sink,clock);
  testHarness.setup();
  testHarness.open();
  for (int i=0; i < numElements; i++) {
    if (i % 5 == 0) {
      clock.setCurrentTime(i * 1000L);
    }
    testHarness.processElement(new StreamRecord<>("message #" + Integer.toString(i)));
  }
  testHarness.close();
  RemoteIterator<LocatedFileStatus> files=dfs.listFiles(new Path(outPath),true);
  int numFiles=0;
  while (files.hasNext()) {
    LocatedFileStatus file=files.next();
    numFiles++;
    if (file.getPath().toString().contains("rolling-out/00")) {
      FSDataInputStream inStream=dfs.open(file.getPath());
      BufferedReader br=new BufferedReader(new InputStreamReader(inStream));
      for (int i=0; i < 5; i++) {
        String line=br.readLine();
        Assert.assertEquals("message #" + i,line);
      }
      inStream.close();
    }
 else     if (file.getPath().toString().contains("rolling-out/05")) {
      FSDataInputStream inStream=dfs.open(file.getPath());
      BufferedReader br=new BufferedReader(new InputStreamReader(inStream));
      for (int i=5; i < 10; i++) {
        String line=br.readLine();
        Assert.assertEquals("message #" + i,line);
      }
      inStream.close();
    }
 else     if (file.getPath().toString().contains("rolling-out/10")) {
      FSDataInputStream inStream=dfs.open(file.getPath());
      BufferedReader br=new BufferedReader(new InputStreamReader(inStream));
      for (int i=10; i < 15; i++) {
        String line=br.readLine();
        Assert.assertEquals("message #" + i,line);
      }
      inStream.close();
    }
 else     if (file.getPath().toString().contains("rolling-out/15")) {
      FSDataInputStream inStream=dfs.open(file.getPath());
      BufferedReader br=new BufferedReader(new InputStreamReader(inStream));
      for (int i=15; i < 20; i++) {
        String line=br.readLine();
        Assert.assertEquals("message #" + i,line);
      }
      inStream.close();
    }
 else {
      Assert.fail("File " + file + " does not match any expected roll pattern.");
    }
  }
  Assert.assertEquals(4,numFiles);
}
