{
  final String outPath=hdfsURI + "/avro-kv-no-comp-non-rolling-out";
  final int numElements=20;
  TestTimeServiceProvider clock=new TestTimeServiceProvider();
  clock.setCurrentTime(0L);
  Map<String,String> properties=new HashMap<>();
  Schema keySchema=Schema.create(Schema.Type.INT);
  Schema valueSchema=Schema.create(Schema.Type.STRING);
  properties.put(AvroKeyValueSinkWriter.CONF_OUTPUT_KEY_SCHEMA,keySchema.toString());
  properties.put(AvroKeyValueSinkWriter.CONF_OUTPUT_VALUE_SCHEMA,valueSchema.toString());
  properties.put(AvroKeyValueSinkWriter.CONF_COMPRESS,String.valueOf(true));
  properties.put(AvroKeyValueSinkWriter.CONF_COMPRESS_CODEC,DataFileConstants.SNAPPY_CODEC);
  BucketingSink<Tuple2<Integer,String>> sink=new BucketingSink<Tuple2<Integer,String>>(outPath).setWriter(new AvroKeyValueSinkWriter<Integer,String>(properties)).setBucketer(new BasePathBucketer<Tuple2<Integer,String>>()).setPartPrefix("part").setPendingPrefix("").setPendingSuffix("");
  OneInputStreamOperatorTestHarness<Tuple2<Integer,String>,Object> testHarness=createTestSink(sink,clock);
  testHarness.setup();
  testHarness.open();
  for (int i=0; i < numElements; i++) {
    testHarness.processElement(new StreamRecord<>(Tuple2.of(i,"message #" + Integer.toString(i))));
  }
  testHarness.close();
  GenericData.setStringType(valueSchema,GenericData.StringType.String);
  Schema elementSchema=AvroKeyValueSinkWriter.AvroKeyValue.getSchema(keySchema,valueSchema);
  FSDataInputStream inStream=dfs.open(new Path(outPath + "/part-0-0"));
  SpecificDatumReader<GenericRecord> elementReader=new SpecificDatumReader<>(elementSchema);
  DataFileStream<GenericRecord> dataFileStream=new DataFileStream<>(inStream,elementReader);
  for (int i=0; i < numElements; i++) {
    AvroKeyValueSinkWriter.AvroKeyValue<Integer,String> wrappedEntry=new AvroKeyValueSinkWriter.AvroKeyValue<>(dataFileStream.next());
    int key=wrappedEntry.getKey();
    Assert.assertEquals(i,key);
    String value=wrappedEntry.getValue();
    Assert.assertEquals("message #" + i,value);
  }
  dataFileStream.close();
  inStream.close();
}
