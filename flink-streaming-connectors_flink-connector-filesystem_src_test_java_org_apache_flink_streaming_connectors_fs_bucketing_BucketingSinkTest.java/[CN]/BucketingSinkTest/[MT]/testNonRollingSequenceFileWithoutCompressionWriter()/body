{
  final String outPath=hdfsURI + "/seq-no-comp-non-rolling-out";
  final int numElements=20;
  TestTimeServiceProvider clock=new TestTimeServiceProvider();
  clock.setCurrentTime(0L);
  BucketingSink<Tuple2<IntWritable,Text>> sink=new BucketingSink<Tuple2<IntWritable,Text>>(outPath).setWriter(new SequenceFileWriter<IntWritable,Text>()).setBucketer(new BasePathBucketer<Tuple2<IntWritable,Text>>()).setPartPrefix("part").setPendingPrefix("").setPendingSuffix("");
  sink.setInputType(TypeInformation.of(new TypeHint<Tuple2<IntWritable,Text>>(){
  }
),new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<IntWritable,Text>,Object> testHarness=createTestSink(sink,clock);
  testHarness.setup();
  testHarness.open();
  for (int i=0; i < numElements; i++) {
    testHarness.processElement(new StreamRecord<>(Tuple2.of(new IntWritable(i),new Text("message #" + Integer.toString(i)))));
  }
  testHarness.close();
  FSDataInputStream inStream=dfs.open(new Path(outPath + "/part-0-0"));
  SequenceFile.Reader reader=new SequenceFile.Reader(inStream,1000,0,100000,new Configuration());
  IntWritable intWritable=new IntWritable();
  Text txt=new Text();
  for (int i=0; i < numElements; i++) {
    reader.next(intWritable,txt);
    Assert.assertEquals(i,intWritable.get());
    Assert.assertEquals("message #" + i,txt.toString());
  }
  reader.close();
  inStream.close();
}
