{
  ScopeFormats scopeFormats;
  try {
    scopeFormats=createScopeConfig(config);
  }
 catch (  Exception e) {
    LOG.warn("Failed to parse scope format, using default scope formats",e);
    scopeFormats=new ScopeFormats();
  }
  this.scopeFormats=scopeFormats;
  char delim;
  try {
    delim=config.getString(ConfigConstants.METRICS_SCOPE_DELIMITER,".").charAt(0);
  }
 catch (  Exception e) {
    LOG.warn("Failed to parse delimiter, using default delimiter.",e);
    delim='.';
  }
  this.delimiter=delim;
  this.reporters=new ArrayList<>();
  final String definedReporters=config.getString(ConfigConstants.METRICS_REPORTERS_LIST,null);
  if (definedReporters == null) {
    LOG.info("No metrics reporter configured, no metrics will be exposed/reported.");
    this.executor=null;
  }
 else {
    String[] namedReporters=definedReporters.split("\\s*,\\s*");
    for (    String namedReporter : namedReporters) {
      DelegatingConfiguration reporterConfig=new DelegatingConfiguration(config,ConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + ".");
      final String className=reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,null);
      if (className == null) {
        LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.");
        continue;
      }
      try {
        String configuredPeriod=reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX,null);
        TimeUnit timeunit=TimeUnit.SECONDS;
        long period=10;
        if (configuredPeriod != null) {
          try {
            String[] interval=configuredPeriod.split(" ");
            period=Long.parseLong(interval[0]);
            timeunit=TimeUnit.valueOf(interval[1]);
          }
 catch (          Exception e) {
            LOG.error("Cannot parse report interval from config: " + configuredPeriod + " - please use values like '10 SECONDS' or '500 MILLISECONDS'. "+ "Using default reporting interval.");
          }
        }
        Class<?> reporterClass=Class.forName(className);
        MetricReporter reporterInstance=(MetricReporter)reporterClass.newInstance();
        MetricConfig metricConfig=new MetricConfig();
        reporterConfig.addAllToProperties(metricConfig);
        reporterInstance.open(metricConfig);
        if (reporterInstance instanceof Scheduled) {
          if (this.executor == null) {
            executor=Executors.newSingleThreadScheduledExecutor();
          }
          LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.",period,timeunit.name(),namedReporter,className);
          executor.scheduleWithFixedDelay(new ReporterTask((Scheduled)reporterInstance),period,period,timeunit);
        }
 else {
          LOG.info("Reporting metrics for reporter {} of type {}.",namedReporter,className);
        }
        reporters.add(reporterInstance);
      }
 catch (      Throwable t) {
        shutdownExecutor();
        LOG.error("Could not instantiate metrics reporter" + namedReporter + ". Metrics might not be exposed/reported.",t);
      }
    }
  }
}
