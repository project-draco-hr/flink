{
  purgeObsoleteSamples(config,now);
  float count=0.0f;
  for (  Sample sample : this.samples)   count+=sample.eventCount;
  if (count == 0.0f)   return Double.NaN;
  float sum=0.0f;
  float quant=(float)quantile;
  for (int b=0; b < buckets; b++) {
    for (int s=0; s < this.samples.size(); s++) {
      HistogramSample sample=(HistogramSample)this.samples.get(s);
      float[] hist=sample.histogram.counts();
      sum+=hist[b];
      if (sum / count > quant)       return binScheme.fromBin(b);
    }
  }
  return Double.POSITIVE_INFINITY;
}
