{
  this.keyFields=keyFields;
  this.keyTypes=keyTypes;
  this.keyHolders1=new Key[keyTypes.length];
  this.keyHolders2=new Key[keyTypes.length];
  for (int i=0; i < keyTypes.length; i++) {
    if (keyTypes[i] == null) {
      throw new NullPointerException("Key type " + i + " is null.");
    }
    this.keyHolders1[i]=InstantiationUtil.instantiate(keyTypes[i],Key.class);
    this.keyHolders2[i]=InstantiationUtil.instantiate(keyTypes[i],Key.class);
  }
  this.normalizedKeyLengths=new int[keyFields.length];
  int nKeys=0;
  int nKeyLen=0;
  for (int i=0; i < this.keyHolders1.length; i++) {
    Key k=this.keyHolders1[i];
    if (k instanceof NormalizableKey) {
      nKeys++;
      final int len=((NormalizableKey)k).getMaxNormalizedKeyLen();
      if (len < 0) {
        throw new RuntimeException("Data type " + k.getClass().getName() + " specifies an invalid length for the normalized key: "+ len);
      }
      this.normalizedKeyLengths[i]=len;
      nKeyLen+=this.normalizedKeyLengths[i];
      if (nKeyLen < 0) {
        nKeyLen=Integer.MAX_VALUE;
      }
    }
 else     break;
  }
  this.numLeadingNormalizableKeys=nKeys;
  this.normalizableKeyPrefixLen=nKeyLen;
}
