{
  StreamGroupedReduce<Integer> operator=new StreamGroupedReduce<Integer>(new TestOpenCloseReduceFunction(),new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
);
  OneInputStreamOperatorTestHarness<Integer,Integer> testHarness=new OneInputStreamOperatorTestHarness<Integer,Integer>(operator);
  long initialTime=0L;
  testHarness.open();
  testHarness.processElement(new StreamRecord<Integer>(1,initialTime));
  testHarness.processElement(new StreamRecord<Integer>(2,initialTime));
  testHarness.close();
  Assert.assertTrue("RichFunction methods where not called.",TestOpenCloseReduceFunction.closeCalled);
  Assert.assertTrue("Output contains no elements.",testHarness.getOutput().size() > 0);
}
