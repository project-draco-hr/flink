{
  KeySelector<Integer,Integer> keySelector=new IntegerKeySelector();
  StreamGroupedReduce<Integer> operator=new StreamGroupedReduce<>(new MyReducer(),IntSerializer.INSTANCE);
  OneInputStreamOperatorTestHarness<Integer,Integer> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(1,initialTime + 1));
  testHarness.processElement(new StreamRecord<>(1,initialTime + 2));
  testHarness.processWatermark(new Watermark(initialTime + 2));
  testHarness.processElement(new StreamRecord<>(2,initialTime + 3));
  testHarness.processElement(new StreamRecord<>(2,initialTime + 4));
  testHarness.processElement(new StreamRecord<>(3,initialTime + 5));
  expectedOutput.add(new StreamRecord<>(1,initialTime + 1));
  expectedOutput.add(new StreamRecord<>(2,initialTime + 2));
  expectedOutput.add(new Watermark(initialTime + 2));
  expectedOutput.add(new StreamRecord<>(2,initialTime + 3));
  expectedOutput.add(new StreamRecord<>(4,initialTime + 4));
  expectedOutput.add(new StreamRecord<>(3,initialTime + 5));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
}
