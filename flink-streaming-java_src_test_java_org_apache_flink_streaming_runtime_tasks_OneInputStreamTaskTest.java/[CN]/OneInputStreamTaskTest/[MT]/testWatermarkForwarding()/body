{
  final OneInputStreamTask<String,String> mapTask=new OneInputStreamTask<String,String>();
  final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<String,String>(mapTask,2,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  StreamConfig streamConfig=testHarness.getStreamConfig();
  StreamMap<String,String> mapOperator=new StreamMap<String,String>(new IdentityMap());
  streamConfig.setStreamOperator(mapOperator);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  long initialTime=0L;
  testHarness.invoke();
  testHarness.processElement(new Watermark(initialTime),0,0);
  testHarness.processElement(new Watermark(initialTime),0,1);
  testHarness.processElement(new Watermark(initialTime),1,0);
  testHarness.waitForInputProcessing();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new StreamRecord<String>("Hello",initialTime));
  testHarness.processElement(new StreamRecord<String>("Ciao",initialTime));
  expectedOutput.add(new StreamRecord<String>("Hello",initialTime));
  expectedOutput.add(new StreamRecord<String>("Ciao",initialTime));
  testHarness.processElement(new Watermark(initialTime + 4),0,0);
  testHarness.processElement(new Watermark(initialTime + 3),0,1);
  testHarness.processElement(new Watermark(initialTime + 3),1,0);
  testHarness.processElement(new Watermark(initialTime + 2),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 2));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime + 4),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 3));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime + 4),0,1);
  testHarness.processElement(new Watermark(initialTime + 4),1,0);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 4));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
  List<String> resultElements=TestHarnessUtil.getRawElementsFromOutput(testHarness.getOutput());
  Assert.assertEquals(2,resultElements.size());
}
