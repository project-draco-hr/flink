{
  final Class<? extends Object> type=object.getClass();
  try {
    final Map<Method,Integer> candidateDistances=getCompatibleMethods(type,function,params);
    if (candidateDistances.isEmpty())     throw new IllegalArgumentException(String.format("no suitable method found in %s for name %s and parameters %s",type,function,Arrays.toString(params)));
    if (candidateDistances.size() == 1)     return invoke(candidateDistances.keySet().iterator().next(),object,params);
    final Method bestMethod=pickBest(candidateDistances);
    if (bestMethod == null)     throw new IllegalArgumentException(String.format("more than one suitable method found in %s for name %s and parameters %s",type,function,Arrays.toString(params)));
    return invoke(bestMethod,object,params);
  }
 catch (  final Exception e) {
    throw new IllegalArgumentException(String.format("Could not invoke method %s for type %s with parameters %s",function,type,Arrays.toString(params)),e);
  }
}
