{
  if ((!isTagged(v) && !w.equals(v)) || (isTagged(v) && !v.equals(w))) {
    if (isTagged(v) && !isTagged(w)) {
      return new TaggedValue(w.getType());
    }
 else     if ((!isTagged(v) || tagged(v).canNotContainInput()) && isTagged(w) && tagged(w).canContainInput()) {
      final TaggedValue taggedW=tagged(w);
      if (hasImportantDependencies(taggedW) && rightMergePriority) {
        final TaggedValue returnValue=removeUngroupedInputs(taggedW.copy());
        if (returnValue != null) {
          return returnValue;
        }
 else {
          return new TaggedValue(v.getType());
        }
      }
      return new TaggedValue(v.getType());
    }
 else     if (!isTagged(v) && isTagged(w) && tagged(w).canNotContainInput()) {
      return v;
    }
 else     if (isTagged(v) && isTagged(w) && tagged(v).canContainInput()) {
      final List<TaggedValue> list=Arrays.asList(tagged(v),tagged(w));
      final TaggedValue returnValue=mergeReturnValues(list);
      if (returnValue != null) {
        return returnValue;
      }
    }
 else     if (isTagged(v) && tagged(v).canNotContainInput()) {
      return v;
    }
    return BasicValue.UNINITIALIZED_VALUE;
  }
  return v;
}
