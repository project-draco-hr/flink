{
  int keyCnt=100;
  int valCnt=20;
  final long memorySize=1024 * 1024 * 3;
  final int bufferSize=1014 * 1024;
  final double memoryFraction=1.0;
  try {
    initEnvironment(memorySize,bufferSize);
    addInput(new UniformRecordGenerator(keyCnt,valCnt,false),0);
    addOutput(this.outList);
{
      final TaskConfig combineConfig=new TaskConfig(new Configuration());
      combineConfig.addInputToGroup(0);
      combineConfig.setInputSerializer(serFact,0);
      combineConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
      combineConfig.setOutputSerializer(serFact);
      combineConfig.setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
      combineConfig.setDriverComparator(compFact,0);
      combineConfig.setDriverComparator(compFact,1);
      combineConfig.setRelativeMemoryDriver(memoryFraction);
      combineConfig.setStubWrapper(new UserCodeClassWrapper<MockFailingCombineStub>(MockFailingCombineStub.class));
      getTaskConfig().addChainedTask(SynchronousChainedCombineDriver.class,combineConfig,"combine");
    }
{
      final BatchTask<GenericCollectorMap<Record,Record>,Record> testTask=new BatchTask<GenericCollectorMap<Record,Record>,Record>();
      super.registerTask(testTask,CollectorMapDriver.class,MockMapStub.class);
      boolean stubFailed=false;
      try {
        testTask.invoke();
      }
 catch (      Exception e) {
        stubFailed=true;
      }
      Assert.assertTrue("Function exception was not forwarded.",stubFailed);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
