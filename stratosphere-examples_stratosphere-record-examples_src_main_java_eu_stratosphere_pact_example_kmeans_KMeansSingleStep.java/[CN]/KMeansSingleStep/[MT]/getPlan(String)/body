{
  int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String dataPointInput=(args.length > 1 ? args[1] : "");
  String clusterInput=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  FileDataSource dataPoints=new FileDataSource(new PointInFormat(),dataPointInput,"Data Points");
  dataPoints.getCompilerHints().addUniqueField(0);
  FileDataSource clusterPoints=new FileDataSource(new PointInFormat(),clusterInput,"Centers");
  clusterPoints.setDegreeOfParallelism(1);
  clusterPoints.getCompilerHints().addUniqueField(0);
  CrossContract computeDistance=CrossContract.builder(new ComputeDistance()).input1(dataPoints).input2(clusterPoints).name("Compute Distances").build();
  ReduceContract findNearestClusterCenters=ReduceContract.builder(new FindNearestCenter(),PactInteger.class,0).input(computeDistance).name("Find Nearest Centers").build();
  ReduceContract recomputeClusterCenter=ReduceContract.builder(new RecomputeClusterCenter(),PactInteger.class,0).input(findNearestClusterCenters).name("Recompute Center Positions").build();
  FileDataSink newClusterPoints=new FileDataSink(new PointOutFormat(),output,recomputeClusterCenter,"New Center Positions");
  Plan plan=new Plan(newClusterPoints,"KMeans Iteration");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
