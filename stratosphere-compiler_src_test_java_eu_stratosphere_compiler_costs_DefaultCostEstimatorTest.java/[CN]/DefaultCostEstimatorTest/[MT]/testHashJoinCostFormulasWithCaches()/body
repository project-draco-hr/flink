{
  Costs hashBothUnknown10=new Costs();
  Costs hashBothUnknownCached10=new Costs();
  Costs hashBothSmall10=new Costs();
  Costs hashBothSmallCached10=new Costs();
  Costs hashSmallLarge10=new Costs();
  Costs hashSmallLargeCached10=new Costs();
  Costs hashLargeSmall10=new Costs();
  Costs hashLargeSmallCached10=new Costs();
  Costs hashLargeSmall1=new Costs();
  Costs hashLargeSmallCached1=new Costs();
  costEstimator.addHybridHashCosts(UNKNOWN_ESTIMATES,UNKNOWN_ESTIMATES,hashBothUnknown10,10);
  costEstimator.addCachedHybridHashCosts(UNKNOWN_ESTIMATES,UNKNOWN_ESTIMATES,hashBothUnknownCached10,10);
  costEstimator.addHybridHashCosts(MEDIUM_ESTIMATES,MEDIUM_ESTIMATES,hashBothSmall10,10);
  costEstimator.addCachedHybridHashCosts(MEDIUM_ESTIMATES,MEDIUM_ESTIMATES,hashBothSmallCached10,10);
  costEstimator.addHybridHashCosts(MEDIUM_ESTIMATES,BIG_ESTIMATES,hashSmallLarge10,10);
  costEstimator.addCachedHybridHashCosts(MEDIUM_ESTIMATES,BIG_ESTIMATES,hashSmallLargeCached10,10);
  costEstimator.addHybridHashCosts(BIG_ESTIMATES,MEDIUM_ESTIMATES,hashLargeSmall10,10);
  costEstimator.addCachedHybridHashCosts(BIG_ESTIMATES,MEDIUM_ESTIMATES,hashLargeSmallCached10,10);
  costEstimator.addHybridHashCosts(BIG_ESTIMATES,MEDIUM_ESTIMATES,hashLargeSmall1,1);
  costEstimator.addCachedHybridHashCosts(BIG_ESTIMATES,MEDIUM_ESTIMATES,hashLargeSmallCached1,1);
  assertTrue(hashBothUnknown10.compareTo(hashBothUnknownCached10) > 0);
  assertTrue(hashBothSmall10.compareTo(hashBothSmallCached10) > 0);
  assertTrue(hashSmallLarge10.compareTo(hashSmallLargeCached10) > 0);
  assertTrue(hashLargeSmall10.compareTo(hashLargeSmallCached10) > 0);
  assertTrue(hashLargeSmallCached10.compareTo(hashSmallLargeCached10) < 0);
  assertTrue(hashLargeSmall1.compareTo(hashLargeSmallCached1) == 0);
}
