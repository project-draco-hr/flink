{
  Costs hashBoth=new Costs();
  Costs bcKnown10=new Costs();
  Costs bcUnknown10=new Costs();
  Costs bcKnown1000=new Costs();
  Costs bcUnknown1000=new Costs();
  costEstimator.addHashPartitioningCost(knownEstimates,hashBoth);
  costEstimator.addHashPartitioningCost(UNKNOWN_ESTIMATES,hashBoth);
  costEstimator.addBroadcastCost(knownEstimates,10,bcKnown10);
  costEstimator.addBroadcastCost(UNKNOWN_ESTIMATES,10,bcUnknown10);
  costEstimator.addBroadcastCost(knownEstimates,1000,bcKnown1000);
  costEstimator.addBroadcastCost(UNKNOWN_ESTIMATES,1000,bcUnknown1000);
  assertTrue(hashBoth.compareTo(bcKnown10) < 0);
  assertTrue(hashBoth.compareTo(bcUnknown10) < 0);
  assertTrue(hashBoth.compareTo(bcKnown1000) < 0);
  assertTrue(hashBoth.compareTo(bcUnknown1000) < 0);
  assertTrue(bcKnown10.compareTo(bcUnknown10) == 0);
  assertTrue(bcKnown1000.compareTo(bcUnknown1000) == 0);
  assertTrue(bcKnown10.compareTo(bcKnown1000) < 0);
  assertTrue(bcUnknown10.compareTo(bcUnknown1000) < 0);
}
