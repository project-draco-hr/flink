{
  acquire();
  try {
    if (timeout < 0)     throw new IllegalArgumentException("Timeout must not be negative");
    long remaining=timeout;
    while (remaining >= 0) {
      long start=time.milliseconds();
      Map<TopicPartition,List<ConsumerRecord<K,V>>> records=pollOnce(remaining);
      long end=time.milliseconds();
      if (!records.isEmpty()) {
        fetcher.initFetches(metadata.fetch());
        client.poll(0);
        return new ConsumerRecords<K,V>(records);
      }
      remaining-=end - start;
      if (remaining > 0) {
        Utils.sleep(min(remaining,retryBackoffMs));
        remaining-=time.milliseconds() - end;
      }
    }
    return ConsumerRecords.empty();
  }
  finally {
    release();
  }
}
