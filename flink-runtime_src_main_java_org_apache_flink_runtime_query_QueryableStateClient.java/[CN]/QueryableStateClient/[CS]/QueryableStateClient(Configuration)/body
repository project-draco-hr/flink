{
  Preconditions.checkNotNull(config,"Configuration");
  LeaderRetrievalService leaderRetrievalService=LeaderRetrievalUtils.createLeaderRetrievalService(config);
  String askTimeoutString=config.getString(ConfigConstants.AKKA_ASK_TIMEOUT,ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT);
  Duration timeout=FiniteDuration.apply(askTimeoutString);
  if (!timeout.isFinite()) {
    throw new IllegalConfigurationException(ConfigConstants.AKKA_ASK_TIMEOUT + " is not a finite timeout ('" + askTimeoutString+ "')");
  }
  FiniteDuration askTimeout=(FiniteDuration)timeout;
  int lookupRetries=config.getInteger(ConfigConstants.QUERYABLE_STATE_CLIENT_LOOKUP_RETRIES,ConfigConstants.DEFAULT_QUERYABLE_STATE_CLIENT_LOOKUP_RETRIES);
  int lookupRetryDelayMillis=config.getInteger(ConfigConstants.QUERYABLE_STATE_CLIENT_LOOKUP_RETRY_DELAY,ConfigConstants.DEFAULT_QUERYABLE_STATE_CLIENT_LOOKUP_RETRY_DELAY);
  LookupRetryStrategyFactory retryStrategy=new FixedDelayLookupRetryStrategyFactory(lookupRetries,FiniteDuration.apply(lookupRetryDelayMillis,"ms"));
  @SuppressWarnings("unchecked") Option<Tuple2<String,Object>> remoting=new Some(new Tuple2<>("",0));
  this.actorSystem=AkkaUtils.createActorSystem(config,remoting);
  AkkaKvStateLocationLookupService lookupService=new AkkaKvStateLocationLookupService(leaderRetrievalService,actorSystem,askTimeout,retryStrategy);
  int numEventLoopThreads=config.getInteger(ConfigConstants.QUERYABLE_STATE_CLIENT_NETWORK_THREADS,ConfigConstants.DEFAULT_QUERYABLE_STATE_CLIENT_NETWORK_THREADS);
  if (numEventLoopThreads == 0) {
    numEventLoopThreads=Runtime.getRuntime().availableProcessors();
  }
  KvStateClient networkClient=new KvStateClient(numEventLoopThreads,new DisabledKvStateRequestStats());
  this.lookupService=lookupService;
  this.kvStateClient=networkClient;
  this.executionContext=actorSystem.dispatcher();
  this.lookupService.start();
}
