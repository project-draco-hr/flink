{
  final JobID jobID=listeningContext.getJobID();
  final ActorRef jobClientActor=listeningContext.getJobClientActor();
  final Future<Object> jobSubmissionFuture=listeningContext.getJobResultFuture();
  final FiniteDuration askTimeout=listeningContext.getTimeout();
  final ClassLoader classLoader=listeningContext.getClassLoader();
  while (!jobSubmissionFuture.isCompleted()) {
    try {
      Await.ready(jobSubmissionFuture,askTimeout);
    }
 catch (    InterruptedException e) {
      throw new JobExecutionException(jobID,"Interrupted while waiting for job completion.");
    }
catch (    TimeoutException e) {
      try {
        Await.result(Patterns.ask(jobClientActor,new Identify(true),Timeout.durationToTimeout(askTimeout)),askTimeout);
      }
 catch (      Exception eInner) {
        if (!jobSubmissionFuture.isCompleted()) {
          throw new JobExecutionException(jobID,"JobClientActor seems to have died before the JobExecutionResult could be retrieved.",eInner);
        }
      }
    }
  }
  final Object answer;
  try {
    answer=Await.result(jobSubmissionFuture,Duration.Zero());
  }
 catch (  Throwable throwable) {
    throw new JobExecutionException(jobID,"Couldn't retrieve the JobExecutionResult from the JobManager.",throwable);
  }
 finally {
    jobClientActor.tell(PoisonPill.getInstance(),ActorRef.noSender());
  }
  if (answer instanceof JobManagerMessages.JobResultSuccess) {
    LOG.info("Job execution complete");
    SerializedJobExecutionResult result=((JobManagerMessages.JobResultSuccess)answer).result();
    if (result != null) {
      try {
        return result.toJobExecutionResult(classLoader);
      }
 catch (      Throwable t) {
        throw new JobExecutionException(jobID,"Job was successfully executed but JobExecutionResult could not be deserialized.");
      }
    }
 else {
      throw new JobExecutionException(jobID,"Job was successfully executed but result contained a null JobExecutionResult.");
    }
  }
 else   if (answer instanceof JobManagerMessages.JobResultFailure) {
    LOG.info("Job execution failed");
    SerializedThrowable serThrowable=((JobManagerMessages.JobResultFailure)answer).cause();
    if (serThrowable != null) {
      Throwable cause=serThrowable.deserializeError(classLoader);
      if (cause instanceof JobExecutionException) {
        throw (JobExecutionException)cause;
      }
 else {
        throw new JobExecutionException(jobID,"Job execution failed",cause);
      }
    }
 else {
      throw new JobExecutionException(jobID,"Job execution failed with null as failure cause.");
    }
  }
 else   if (answer instanceof JobManagerMessages.JobNotFound) {
    throw new JobRetrievalException(((JobManagerMessages.JobNotFound)answer).jobID(),"Couldn't retrieve Job " + jobID + " because it was not running.");
  }
 else {
    throw new JobExecutionException(jobID,"Unknown answer from JobManager after submitting the job: " + answer);
  }
}
