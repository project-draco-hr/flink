{
  if (jobGraph.hasUsercodeJarFiles()) {
    Timeout tOut=new Timeout(timeout);
    Future<Object> futureBlobPort=Patterns.ask(jobManager,JobManagerMessages.getRequestBlobManagerPort(),tOut);
    int port;
    try {
      Object result=Await.result(futureBlobPort,timeout);
      if (result instanceof Integer) {
        port=(Integer)result;
      }
 else {
        throw new Exception("Expected port number (int) as answer, received " + result);
      }
    }
 catch (    Exception e) {
      throw new IOException("Could not retrieve the JobManager's blob port.",e);
    }
    Option<String> jmHost=jobManager.path().address().host();
    String jmHostname=jmHost.isDefined() ? jmHost.get() : "localhost";
    InetSocketAddress serverAddress=new InetSocketAddress(jmHostname,port);
    jobGraph.uploadRequiredJarFiles(serverAddress);
  }
}
