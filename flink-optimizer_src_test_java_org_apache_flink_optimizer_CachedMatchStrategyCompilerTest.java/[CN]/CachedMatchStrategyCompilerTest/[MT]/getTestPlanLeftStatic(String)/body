{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(DEFAULT_PARALLELISM);
  @SuppressWarnings("unchecked") DataSet<Tuple3<Long,Long,Long>> bigInput=env.fromElements(new Tuple3<Long,Long,Long>(1L,2L,3L),new Tuple3<Long,Long,Long>(1L,2L,3L),new Tuple3<Long,Long,Long>(1L,2L,3L)).name("Big");
  @SuppressWarnings("unchecked") DataSet<Tuple3<Long,Long,Long>> smallInput=env.fromElements(new Tuple3<Long,Long,Long>(1L,2L,3L)).name("Small");
  IterativeDataSet<Tuple3<Long,Long,Long>> iteration=bigInput.iterate(10);
  Configuration joinStrategy=new Configuration();
  joinStrategy.setString(Optimizer.HINT_LOCAL_STRATEGY,strategy);
  DataSet<Tuple3<Long,Long,Long>> inner=smallInput.join(iteration).where(0).equalTo(0).with(new DummyJoiner()).name("DummyJoiner").withParameters(joinStrategy);
  DataSet<Tuple3<Long,Long,Long>> output=iteration.closeWith(inner);
  output.output(new DiscardingOutputFormat<Tuple3<Long,Long,Long>>());
  return env.createProgramPlan();
}
