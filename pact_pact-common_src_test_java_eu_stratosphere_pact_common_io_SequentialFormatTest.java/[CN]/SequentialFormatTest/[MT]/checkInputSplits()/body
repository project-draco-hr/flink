{
  FileInputSplit[] inputSplits=createInputFormat().createInputSplits(0);
  Arrays.sort(inputSplits,new InputSplitSorter());
  int splitIndex=0;
  for (int fileIndex=0; fileIndex < degreeOfParallelism; fileIndex++) {
    List<FileInputSplit> sameFileSplits=new ArrayList<FileInputSplit>();
    Path lastPath=inputSplits[splitIndex].getPath();
    for (; splitIndex < inputSplits.length; splitIndex++)     if (!inputSplits[splitIndex].getPath().equals(lastPath))     break;
 else     sameFileSplits.add(inputSplits[splitIndex]);
    Assert.assertEquals(getExpectedBlockCount(fileIndex),sameFileSplits.size());
    long lastBlockLength=rawDataSizes[fileIndex] % (blockSize - info.getInfoSize()) + info.getInfoSize();
    for (int index=0; index < sameFileSplits.size(); index++) {
      Assert.assertEquals(blockSize * index,sameFileSplits.get(index).getStart());
      if (index < sameFileSplits.size() - 1)       Assert.assertEquals(blockSize,sameFileSplits.get(index).getLength());
    }
    Assert.assertEquals(lastBlockLength,sameFileSplits.get(sameFileSplits.size() - 1).getLength());
  }
}
