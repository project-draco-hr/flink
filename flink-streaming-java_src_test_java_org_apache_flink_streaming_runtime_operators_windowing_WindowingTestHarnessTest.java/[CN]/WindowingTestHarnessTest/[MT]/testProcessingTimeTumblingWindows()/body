{
  final int WINDOW_SIZE=3000;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  TumblingProcessingTimeWindows windowAssigner=TumblingProcessingTimeWindows.of(Time.milliseconds(WINDOW_SIZE));
  WindowingTestHarness<String,Tuple2<String,Integer>,TimeWindow> testHarness=new WindowingTestHarness<>(new ExecutionConfig(),windowAssigner,BasicTypeInfo.STRING_TYPE_INFO,inputType,new TupleKeySelector(),ProcessingTimeTrigger.create(),0);
  testHarness.setProcessingTime(3);
  testHarness.processElement(new Tuple2<>("key2",1),Long.MAX_VALUE);
  testHarness.processElement(new Tuple2<>("key2",1),7000);
  testHarness.processElement(new Tuple2<>("key2",1),7000);
  testHarness.processElement(new Tuple2<>("key1",1),7000);
  testHarness.processElement(new Tuple2<>("key1",1),7000);
  testHarness.setProcessingTime(5000);
  testHarness.addExpectedElement(new Tuple2<>("key2",1),2999);
  testHarness.addExpectedElement(new Tuple2<>("key2",1),2999);
  testHarness.addExpectedElement(new Tuple2<>("key2",1),2999);
  testHarness.addExpectedElement(new Tuple2<>("key1",1),2999);
  testHarness.addExpectedElement(new Tuple2<>("key1",1),2999);
  testHarness.compareActualToExpectedOutput("Output was not correct.");
  testHarness.processElement(new Tuple2<>("key1",1),7000);
  testHarness.processElement(new Tuple2<>("key1",1),7000);
  testHarness.processElement(new Tuple2<>("key1",1),7000);
  testHarness.setProcessingTime(7000);
  testHarness.addExpectedElement(new Tuple2<>("key1",1),5999);
  testHarness.addExpectedElement(new Tuple2<>("key1",1),5999);
  testHarness.addExpectedElement(new Tuple2<>("key1",1),5999);
  testHarness.compareActualToExpectedOutput("Output was not correct.");
  testHarness.close();
}
