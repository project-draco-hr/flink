{
  try {
    final int keyCnt=100;
    final int valCnt=20;
    StringBuilder bld=new StringBuilder(10 * 1024 * 1024);
    Random rnd=new Random();
    for (int i=0; i < 10000000; i++) {
      bld.append((char)(rnd.nextInt(26) + 'a'));
    }
    String longString=bld.toString();
    bld=null;
    MutableObjectIterator<Tuple2<Integer,Integer>> gen1=new UniformIntTupleGenerator(keyCnt,valCnt,false);
    MutableObjectIterator<Tuple2<Integer,Integer>> gen2=new UniformIntTupleGenerator(keyCnt,valCnt,false);
    @SuppressWarnings("unchecked") MutableObjectIterator<Tuple3<Integer,Integer,String>> input=new UnionIterator<Tuple3<Integer,Integer,String>>(new SingleValueIterator<Tuple3<Integer,Integer,String>>(new Tuple3<Integer,Integer,String>(-1,-1,longString)),new StringIteratorDecorator(gen1),new SingleValueIterator<Tuple3<Integer,Integer,String>>(new Tuple3<Integer,Integer,String>(-1,-1,longString)),new StringIteratorDecorator(gen2),new SingleValueIterator<Tuple3<Integer,Integer,String>>(new Tuple3<Integer,Integer,String>(-1,-1,longString)));
    setInput(input,serializer);
    addDriverComparator(this.comparator);
    addDriverComparator(this.comparator);
    setOutput(this.outList,this.outSerializer);
    getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
    getTaskConfig().setRelativeMemoryDriver(combine_frac);
    getTaskConfig().setFilehandlesDriver(2);
    GroupReduceCombineDriver<Tuple3<Integer,Integer,String>,Tuple3<Integer,Double,String>> testTask=new GroupReduceCombineDriver<Tuple3<Integer,Integer,String>,Tuple3<Integer,Double,String>>();
    testDriver(testTask,TestCombiner.class);
    assertEquals(3,testTask.getOversizedRecordCount());
    assertTrue(keyCnt + 3 == outList.size() || 2 * keyCnt + 3 == outList.size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
