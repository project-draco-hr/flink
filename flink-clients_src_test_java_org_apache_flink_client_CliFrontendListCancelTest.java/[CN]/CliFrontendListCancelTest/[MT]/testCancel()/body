{
  try {
{
      String[] parameters={"-v","-l"};
      CliFrontend testFrontend=new CliFrontendTestUtils.TestingCliFrontend();
      int retCode=testFrontend.cancel(parameters);
      assertTrue(retCode == 2);
    }
{
      String[] parameters={};
      CliFrontend testFrontend=new CliFrontendTestUtils.TestingCliFrontend();
      int retCode=testFrontend.cancel(parameters);
      assertTrue(retCode != 0);
    }
{
      JobID jid=new JobID();
      String jidString=jid.toString();
      final ActorRef jm=actorSystem.actorOf(Props.create(CliJobManager.class,jid));
      String[] parameters={"-i",jidString};
      InfoListTestCliFrontend testFrontend=new InfoListTestCliFrontend(jm);
      int retCode=testFrontend.cancel(parameters);
      assertTrue(retCode == 0);
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Program caused an exception: " + e.getMessage());
  }
}
