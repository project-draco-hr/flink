{
  this.pathConverter.register(PathExpr.class,new PathConverter<PathExpr>(){
    @Override public JsonPath convert(    PathExpr expr,    List<JsonPath> childPath){
      for (int index=0; index < childPath.size() - 1; index++)       childPath.get(index).setSelector(childPath.get(index + 1));
      return childPath.get(0);
    }
  }
);
  this.pathConverter.register(VarExpr.class,new PathConverter<VarExpr>(){
    @Override public JsonPath convert(    VarExpr expr,    List<JsonPath> childPath){
      return new JsonPath.IdentifierAccess(expr.var().taggedName());
    }
  }
);
  this.pathConverter.register(PathFieldValue.class,new PathConverter<PathFieldValue>(){
    @Override public JsonPath convert(    PathFieldValue expr,    List<JsonPath> childPath){
      return new JsonPath.FieldAccess(((ConstExpr)expr.nameExpr()).value.toString());
    }
  }
);
  this.pathConverter.register(ConstExpr.class,new PathConverter<ConstExpr>(){
    @Override public JsonPath convert(    ConstExpr expr,    List<JsonPath> childPath){
      return new JsonPath.Constant(expr.value);
    }
  }
);
  this.pathConverter.register(Expr.class,new PathConverter<Expr>(){
    @Override public JsonPath convert(    Expr expr,    List<JsonPath> childPaths){
      if (!expr.getClass().getSimpleName().endsWith("Fn"))       return null;
      BuiltInFunctionDescriptor d=BuiltInFunction.getDescriptor(expr.getClass());
      return new JsonPath.Function(d.getName(),childPaths.toArray(new JsonPath[childPaths.size()]));
    }
  }
);
  this.pathConverter.register(MathExpr.class,new PathConverter<MathExpr>(){
    private Field OpField;
    private ArithmeticOperator[] OperatorMapping={ArithmeticOperator.PLUS,ArithmeticOperator.MINUS,ArithmeticOperator.MULTIPLY,ArithmeticOperator.DIVIDE};
{
      try {
        this.OpField=MathExpr.class.getDeclaredField("op");
        this.OpField.setAccessible(true);
      }
 catch (      Exception e) {
        throw new IllegalStateException("Cannot find op field",e);
      }
    }
    @Override public JsonPath convert(    MathExpr expr,    List<JsonPath> childConditions){
      try {
        int op=(Integer)this.OpField.get(expr);
        return new JsonPath.Arithmetic(childConditions.get(0),this.OperatorMapping[op],childConditions.get(1));
      }
 catch (      Exception e) {
        throw new IllegalArgumentException("Cannot parse " + expr,e);
      }
    }
  }
);
}
