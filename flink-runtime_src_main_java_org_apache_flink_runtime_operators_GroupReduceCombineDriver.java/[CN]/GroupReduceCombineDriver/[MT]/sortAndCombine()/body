{
  final InMemorySorter<IN> sorter=this.sorter;
  if (objectReuseEnabled) {
    if (!sorter.isEmpty()) {
      this.sortAlgo.sort(sorter);
      final ReusingKeyGroupedIterator<IN> keyIter=new ReusingKeyGroupedIterator<IN>(sorter.getIterator(),this.serializer,this.groupingComparator);
      final GroupCombineFunction<IN,OUT> combiner=this.combiner;
      final Collector<OUT> output=this.output;
      while (this.running && keyIter.nextKey()) {
        combiner.combine(keyIter.getValues(),output);
      }
    }
  }
 else {
    if (!sorter.isEmpty()) {
      this.sortAlgo.sort(sorter);
      final NonReusingKeyGroupedIterator<IN> keyIter=new NonReusingKeyGroupedIterator<IN>(sorter.getIterator(),this.groupingComparator);
      final GroupCombineFunction<IN,OUT> combiner=this.combiner;
      final Collector<OUT> output=this.output;
      while (this.running && keyIter.nextKey()) {
        combiner.combine(keyIter.getValues(),output);
      }
    }
  }
}
