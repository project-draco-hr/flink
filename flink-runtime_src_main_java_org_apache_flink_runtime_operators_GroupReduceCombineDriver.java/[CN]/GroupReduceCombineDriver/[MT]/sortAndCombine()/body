{
  final InMemorySorter<T> sorter=this.sorter;
  if (objectReuseEnabled) {
    if (!sorter.isEmpty()) {
      this.sortAlgo.sort(sorter);
      final ReusingKeyGroupedIterator<T> keyIter=new ReusingKeyGroupedIterator<T>(sorter.getIterator(),this.serializer,this.groupingComparator);
      final FlatCombineFunction<T> combiner=this.combiner;
      final Collector<T> output=this.output;
      while (this.running && keyIter.nextKey()) {
        combiner.combine(keyIter.getValues(),output);
      }
    }
  }
 else {
    if (!sorter.isEmpty()) {
      this.sortAlgo.sort(sorter);
      final NonReusingKeyGroupedIterator<T> keyIter=new NonReusingKeyGroupedIterator<T>(sorter.getIterator(),this.groupingComparator);
      final FlatCombineFunction<T> combiner=this.combiner;
      final Collector<T> output=this.output;
      while (this.running && keyIter.nextKey()) {
        combiner.combine(keyIter.getValues(),output);
      }
    }
  }
}
