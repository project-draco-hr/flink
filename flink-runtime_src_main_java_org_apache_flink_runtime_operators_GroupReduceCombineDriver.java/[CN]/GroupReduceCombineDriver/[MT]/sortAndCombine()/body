{
  if (sorter.isEmpty()) {
    return;
  }
  final InMemorySorter<IN> sorter=this.sorter;
  this.sortAlgo.sort(sorter);
  final GroupCombineFunction<IN,OUT> combiner=this.combiner;
  final Collector<OUT> output=this.output;
  if (objectReuseEnabled) {
    final ReusingKeyGroupedIterator<IN> keyIter=new ReusingKeyGroupedIterator<IN>(sorter.getIterator(),this.serializer,this.groupingComparator);
    while (this.running && keyIter.nextKey()) {
      combiner.combine(keyIter.getValues(),output);
    }
  }
 else {
    final NonReusingKeyGroupedIterator<IN> keyIter=new NonReusingKeyGroupedIterator<IN>(sorter.getIterator(),this.groupingComparator);
    while (this.running && keyIter.nextKey()) {
      combiner.combine(keyIter.getValues(),output);
    }
  }
}
