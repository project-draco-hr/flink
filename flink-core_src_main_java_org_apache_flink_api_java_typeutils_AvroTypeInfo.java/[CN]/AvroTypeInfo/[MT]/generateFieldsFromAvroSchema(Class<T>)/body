{
  PojoTypeExtractor pte=new PojoTypeExtractor();
  ArrayList<Type> typeHierarchy=new ArrayList<>();
  typeHierarchy.add(typeClass);
  TypeInformation ti=pte.analyzePojo(typeClass,typeHierarchy,null,null,null);
  if (!(ti instanceof PojoTypeInfo)) {
    throw new IllegalStateException("Expecting type to be a PojoTypeInfo");
  }
  PojoTypeInfo pti=(PojoTypeInfo)ti;
  List<PojoField> newFields=new ArrayList<>(pti.getTotalFields());
  for (int i=0; i < pti.getArity(); i++) {
    PojoField f=pti.getPojoFieldAt(i);
    TypeInformation newType=f.getTypeInformation();
    if (newType instanceof GenericTypeInfo) {
      if ((newType).getTypeClass().equals(CharSequence.class)) {
        newType=new GenericTypeInfo(org.apache.avro.util.Utf8.class);
      }
    }
    PojoField newField=new PojoField(f.getField(),newType);
    newFields.add(newField);
  }
  return newFields;
}
