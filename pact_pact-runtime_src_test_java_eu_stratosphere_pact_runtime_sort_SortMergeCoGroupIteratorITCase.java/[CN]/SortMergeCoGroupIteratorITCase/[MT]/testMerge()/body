{
  try {
    generator1=new Generator(SEED1,500,4096,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);
    generator2=new Generator(SEED2,500,2048,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);
    reader1=new TestData.GeneratorIterator(generator1,INPUT_1_SIZE);
    reader2=new TestData.GeneratorIterator(generator2,INPUT_2_SIZE);
    Map<TestData.Key,Collection<TestData.Value>> expectedValuesMap1=collectData(generator1,INPUT_1_SIZE);
    Map<TestData.Key,Collection<TestData.Value>> expectedValuesMap2=collectData(generator2,INPUT_2_SIZE);
    Map<TestData.Key,List<Collection<TestData.Value>>> expectedCoGroupsMap=coGroupValues(expectedValuesMap1,expectedValuesMap2);
    generator1.reset();
    generator2.reset();
    @SuppressWarnings("unchecked") SortMergeCoGroupIterator iterator=new SortMergeCoGroupIterator(memoryManager,ioManager,reader1,reader2,new int[]{0},new int[]{0},new Class[]{TestData.Key.class},MEMORY_SIZE,64,0.7f,LocalStrategy.MERGE,parentTask);
    iterator.open();
    final TestData.Key key=new TestData.Key();
    while (iterator.next()) {
      Iterator<PactRecord> iter1=iterator.getValues1();
      Iterator<PactRecord> iter2=iterator.getValues2();
      TestData.Value v1=null;
      TestData.Value v2=null;
      if (iter1.hasNext()) {
        PactRecord rec=iter1.next();
        rec.getFieldInto(0,key);
        v1=rec.getField(1,TestData.Value.class);
      }
 else       if (iter2.hasNext()) {
        PactRecord rec=iter2.next();
        rec.getFieldInto(0,key);
        v2=rec.getField(1,TestData.Value.class);
      }
 else {
        Assert.fail("No input on both sides.");
      }
      Assert.assertTrue("No matches for key " + key,expectedCoGroupsMap.containsKey(key));
      Collection<TestData.Value> expValues1=expectedCoGroupsMap.get(key).get(0);
      Collection<TestData.Value> expValues2=expectedCoGroupsMap.get(key).get(1);
      if (v1 != null) {
        expValues1.remove(v1);
      }
 else {
        expValues2.remove(v2);
      }
      while (iter1.hasNext()) {
        PactRecord rec=iter1.next();
        Assert.assertTrue("Value not in expected set of first input",expValues1.remove(rec.getField(1,TestData.Value.class)));
      }
      Assert.assertTrue("Expected set of first input not empty",expValues1.isEmpty());
      while (iter2.hasNext()) {
        PactRecord rec=iter2.next();
        Assert.assertTrue("Value not in expected set of second input",expValues2.remove(rec.getField(1,TestData.Value.class)));
      }
      Assert.assertTrue("Expected set of second input not empty",expValues2.isEmpty());
      expectedCoGroupsMap.remove(key);
    }
    iterator.close();
    Assert.assertTrue("Expected key set not empty",expectedCoGroupsMap.isEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
