{
  final String jarFile=args[0];
  final String host=args[1];
  final int port=Integer.parseInt(args[2]);
  final int parallelism=Integer.parseInt(args[3]);
  final String checkpointPath=args[4];
  final int checkpointingInterval=Integer.parseInt(args[5]);
  final String outputPath=args[6];
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment(host,port,jarFile);
  env.setParallelism(parallelism);
  env.getConfig().disableSysoutLogging();
  env.enableCheckpointing(checkpointingInterval);
  env.setStateBackend(new FsStateBackend(checkpointPath));
  DataStream<Integer> source=env.addSource(new InfiniteIntegerSource());
  source.map(new MapFunction<Integer,Tuple2<Integer,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<Integer,Integer> map(    Integer value) throws Exception {
      return new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism),value);
    }
  }
).keyBy(new KeySelector<Tuple2<Integer,Integer>,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getKey(    Tuple2<Integer,Integer> value) throws Exception {
      return value.f0;
    }
  }
).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);
  env.execute();
}
