{
  new JavaTestKit(system){
{
      TestingCluster cluster=null;
      try {
        cluster=startTestingCluster(2,1,DEFAULT_AKKA_ASK_TIMEOUT());
        final IntermediateDataSetID rid=new IntermediateDataSetID();
        final JobVertex sender=new JobVertex("Sender");
        sender.setParallelism(1);
        sender.setInvokableClass(Tasks.BlockingNoOpInvokable.class);
        sender.createAndAddResultDataSet(rid,PIPELINED);
        final JobGraph jobGraph=new JobGraph("Blocking test job",sender);
        final JobID jid=jobGraph.getJobID();
        final ActorRef jm=cluster.getJobManager();
        jm.tell(new JobManagerMessages.SubmitJob(jobGraph,false),getTestActor());
        expectMsgClass(Status.Success.class);
        jm.tell(new WaitForAllVerticesToBeRunningOrFinished(jobGraph.getJobID()),getTestActor());
        expectMsgClass(TestingJobManagerMessages.AllVerticesRunning.class);
        final ExecutionAttemptID receiver=new ExecutionAttemptID();
        jm.tell(new RequestExecutionGraph(jid),getTestActor());
        final ExecutionGraph eg=expectMsgClass(ExecutionGraphFound.class).executionGraph();
        final ExecutionVertex vertex=eg.getJobVertex(sender.getID()).getTaskVertices()[0];
        final IntermediateResultPartition partition=vertex.getProducedPartitions().values().iterator().next();
        final ResultPartitionID partitionId=new ResultPartitionID(partition.getPartitionId(),vertex.getCurrentExecutionAttempt().getAttemptId());
        RequestPartitionState request=new RequestPartitionState(jid,partitionId,receiver,rid);
        for (        ExecutionState state : ExecutionState.values()) {
          ExecutionGraphTestUtils.setVertexState(vertex,state);
          jm.tell(request,getTestActor());
          PartitionState resp=expectMsgClass(PartitionState.class);
          assertEquals(request.taskExecutionId(),resp.taskExecutionId());
          assertEquals(request.taskResultId(),resp.taskResultId());
          assertEquals(request.partitionId().getPartitionId(),resp.partitionId());
          assertEquals(state,resp.state());
        }
        request=new RequestPartitionState(jid,new ResultPartitionID(),receiver,rid);
        jm.tell(request,getTestActor());
        PartitionState resp=expectMsgClass(PartitionState.class);
        assertEquals(request.taskExecutionId(),resp.taskExecutionId());
        assertEquals(request.taskResultId(),resp.taskResultId());
        assertEquals(request.partitionId().getPartitionId(),resp.partitionId());
        assertNull(resp.state());
        request=new RequestPartitionState(new JobID(),new ResultPartitionID(),receiver,rid);
        jm.tell(request,getTestActor());
        resp=expectMsgClass(PartitionState.class);
        assertEquals(request.taskExecutionId(),resp.taskExecutionId());
        assertEquals(request.taskResultId(),resp.taskResultId());
        assertEquals(request.partitionId().getPartitionId(),resp.partitionId());
        assertNull(resp.state());
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
 finally {
        if (cluster != null) {
          cluster.shutdown();
        }
      }
    }
  }
;
}
