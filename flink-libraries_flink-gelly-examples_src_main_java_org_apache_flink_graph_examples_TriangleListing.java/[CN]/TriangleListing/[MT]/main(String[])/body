{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().enableObjectReuse();
  ParameterTool parameters=ParameterTool.fromArgs(args);
  int scale=parameters.getInt("scale",DEFAULT_SCALE);
  int edgeFactor=parameters.getInt("edge_factor",DEFAULT_EDGE_FACTOR);
  RandomGenerableFactory<JDKRandomGenerator> rnd=new JDKRandomGeneratorFactory();
  long vertexCount=1L << scale;
  long edgeCount=vertexCount * edgeFactor;
  boolean clipAndFlip=parameters.getBoolean("clip_and_flip",DEFAULT_CLIP_AND_FLIP);
  Graph<LongValue,NullValue,NullValue> graph=new RMatGraph<>(env,rnd,vertexCount,edgeCount).setSimpleGraph(true,clipAndFlip).generate();
  DataSet tl;
  if (scale > 32) {
    tl=graph.run(new org.apache.flink.graph.library.clustering.undirected.TriangleListing<LongValue,NullValue,NullValue>());
  }
 else {
    tl=graph.run(new TranslateGraphIds<LongValue,IntValue,NullValue,NullValue>(new LongValueToIntValue())).run(new org.apache.flink.graph.library.clustering.undirected.TriangleListing<IntValue,NullValue,NullValue>());
  }
switch (parameters.get("output","")) {
case "print":
    tl.print();
  break;
case "hash":
System.out.println(DataSetUtils.checksumHashCode(tl));
break;
case "csv":
String filename=parameters.get("filename");
String row_delimiter=parameters.get("row_delimiter",CsvOutputFormat.DEFAULT_LINE_DELIMITER);
String field_delimiter=parameters.get("field_delimiter",CsvOutputFormat.DEFAULT_FIELD_DELIMITER);
tl.writeAsCsv(filename,row_delimiter,field_delimiter);
env.execute();
break;
default :
System.out.println("Lists all distinct triangles in the generated RMat graph.");
System.out.println("");
System.out.println("usage:");
System.out.println("  TriangleListing [--scale SCALE] [--edge_factor EDGE_FACTOR] --output print");
System.out.println("  TriangleListing [--scale SCALE] [--edge_factor EDGE_FACTOR] --output hash");
System.out.println("  TriangleListing [--scale SCALE] [--edge_factor EDGE_FACTOR] --output csv" + " --filename FILENAME [--row_delimiter ROW_DELIMITER] [--field_delimiter FIELD_DELIMITER]");
return;
}
JobExecutionResult result=env.getLastJobExecutionResult();
NumberFormat nf=NumberFormat.getInstance();
System.out.println("Execution runtime: " + nf.format(result.getNetRuntime()) + " ms");
}
