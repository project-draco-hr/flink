{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
  tupleDs.join(tupleDs).where(0).equalTo(0).projectFirst(2,3).projectSecond(1,4).output(new DiscardingOutputFormat<Tuple>());
  Plan plan=env.createProgramPlan();
  GenericDataSinkBase<?> sink=plan.getDataSinks().iterator().next();
  InnerJoinOperatorBase<?,?,?,?> projectJoinOperator=((InnerJoinOperatorBase<?,?,?,?>)sink.getInput());
  DualInputSemanticProperties props=projectJoinOperator.getSemanticProperties();
  assertEquals(1,props.getForwardingTargetFields(0,2).size());
  assertEquals(1,props.getForwardingTargetFields(0,3).size());
  assertEquals(1,props.getForwardingTargetFields(1,1).size());
  assertEquals(1,props.getForwardingTargetFields(1,4).size());
  assertTrue(props.getForwardingTargetFields(0,2).contains(0));
  assertTrue(props.getForwardingTargetFields(0,3).contains(1));
  assertTrue(props.getForwardingTargetFields(1,1).contains(2));
  assertTrue(props.getForwardingTargetFields(1,4).contains(3));
}
