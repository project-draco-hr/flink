{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,String,Long,Integer>> tupleDs=env.fromCollection(emptyTupleData,tupleTypeInfo);
    DataSet<Tuple4<String,Long,Long,Integer>> result=tupleDs.cross(tupleDs).projectFirst(2,3).projectSecond(1,4);
    result.print();
    Plan plan=env.createProgramPlan();
    GenericDataSinkBase<?> sink=plan.getDataSinks().iterator().next();
    CrossOperatorBase<?,?,?,?> projectCrossOperator=((CrossOperatorBase<?,?,?,?>)sink.getInput());
    DualInputSemanticProperties props=projectCrossOperator.getSemanticProperties();
    assertTrue(props.getForwardedField1(2).size() == 1);
    assertTrue(props.getForwardedField1(3).size() == 1);
    assertTrue(props.getForwardedField2(1).size() == 1);
    assertTrue(props.getForwardedField2(4).size() == 1);
    assertTrue(props.getForwardedField1(2).contains(0));
    assertTrue(props.getForwardedField1(3).contains(1));
    assertTrue(props.getForwardedField2(1).contains(2));
    assertTrue(props.getForwardedField2(4).contains(3));
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Exception in test: " + e.getMessage());
  }
}
