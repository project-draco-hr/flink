{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple4<Integer,Tuple3<String,Integer,Long>,Tuple2<Long,Long>,String>> tupleDs=env.fromCollection(emptyNestedTupleData,nestedTupleTypeInfo);
  tupleDs.project(2,3,1).project(2).print();
  Plan plan=env.createProgramPlan();
  GenericDataSinkBase<?> sink=plan.getDataSinks().iterator().next();
  PlanProjectOperator<?,?> projectOperator=((PlanProjectOperator<?,?>)sink.getInput());
  SingleInputSemanticProperties props=projectOperator.getSemanticProperties();
  assertNotNull(props.getForwardingTargetFields(0,0));
  assertEquals(1,props.getForwardingTargetFields(0,1).size());
  assertEquals(1,props.getForwardingTargetFields(0,2).size());
  assertEquals(1,props.getForwardingTargetFields(0,3).size());
  assertEquals(2,props.getForwardingTargetFields(0,4).size());
  assertEquals(2,props.getForwardingTargetFields(0,5).size());
  assertEquals(1,props.getForwardingTargetFields(0,6).size());
  assertEquals(0,props.getForwardingTargetFields(0,0).size());
  assertTrue(props.getForwardingTargetFields(0,4).contains(0));
  assertTrue(props.getForwardingTargetFields(0,5).contains(1));
  assertTrue(props.getForwardingTargetFields(0,6).contains(2));
  assertTrue(props.getForwardingTargetFields(0,1).contains(3));
  assertTrue(props.getForwardingTargetFields(0,2).contains(4));
  assertTrue(props.getForwardingTargetFields(0,3).contains(5));
  assertTrue(props.getForwardingTargetFields(0,4).contains(6));
  assertTrue(props.getForwardingTargetFields(0,5).contains(7));
}
