{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setDegreeOfParallelism(64);
    DataSet<Long> initialSource=env.generateSequence(1,10);
    IterativeDataSet<Long> iteration=initialSource.iterate(100);
    DataSet<Long> sourceWithMapper=env.generateSequence(1,10).map(new IdentityMapper<Long>());
    DataSet<Long> bcInput1=sourceWithMapper.map(new IdentityMapper<Long>()).reduce(new SelectOneReducer<Long>());
    DataSet<Long> result=sourceWithMapper.map(new IdentityMapper<Long>()).withBroadcastSet(iteration,"bc2").withBroadcastSet(bcInput1,"bc1");
    iteration.closeWith(result).print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    BulkIterationPlanNode iterationPlanNode=(BulkIterationPlanNode)sink.getInput().getSource();
    SingleInputPlanNode mapper=(SingleInputPlanNode)iterationPlanNode.getRootOfStepFunction();
    assertTrue(mapper.getInput().getTempMode().breaksPipeline());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
