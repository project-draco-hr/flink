{
  try {
    final String[] localHosts={"local1","local2","local3"};
    final String[] remoteHosts={"remote1","remote2","remote3"};
    final String[] requestingHosts={"local3","local2","local1","other"};
    final int NUM_THREE_LOCAL_SPLITS=10;
    final int NUM_TWO_LOCAL_SPLITS=10;
    final int NUM_ONE_LOCAL_SPLITS=10;
    final int NUM_LOCAL_SPLITS=30;
    final int NUM_REMOTE_SPLITS=10;
    final int NUM_SPLITS=40;
    String[] threeLocalHosts=localHosts;
    String[] twoLocalHosts={localHosts[0],localHosts[1],remoteHosts[0]};
    String[] oneLocalHost={localHosts[0],remoteHosts[0],remoteHosts[1]};
    String[] noLocalHost=remoteHosts;
    int splitCnt=0;
    Set<LocatableInputSplit> splits=new HashSet<LocatableInputSplit>();
    for (int i=0; i < NUM_THREE_LOCAL_SPLITS; i++) {
      splits.add(new LocatableInputSplit(splitCnt++,threeLocalHosts));
    }
    for (int i=0; i < NUM_TWO_LOCAL_SPLITS; i++) {
      splits.add(new LocatableInputSplit(splitCnt++,twoLocalHosts));
    }
    for (int i=0; i < NUM_ONE_LOCAL_SPLITS; i++) {
      splits.add(new LocatableInputSplit(splitCnt++,oneLocalHost));
    }
    for (int i=0; i < NUM_REMOTE_SPLITS; i++) {
      splits.add(new LocatableInputSplit(splitCnt++,noLocalHost));
    }
    LocatableInputSplitAssigner ia=new LocatableInputSplitAssigner(splits);
    LocatableInputSplit is=null;
    for (int i=0; i < NUM_SPLITS; i++) {
      String host=requestingHosts[i % requestingHosts.length];
      is=ia.getNextInputSplit(host);
      assertTrue(is != null);
      assertTrue(splits.remove(is));
      if (host.equals(localHosts[0])) {
        assertTrue(Arrays.equals(is.getHostnames(),oneLocalHost));
      }
 else       if (host.equals(localHosts[1])) {
        assertTrue(Arrays.equals(is.getHostnames(),twoLocalHosts));
      }
 else       if (host.equals(localHosts[2])) {
        assertTrue(Arrays.equals(is.getHostnames(),threeLocalHosts));
      }
 else {
        assertTrue(Arrays.equals(is.getHostnames(),noLocalHost));
      }
    }
    assertTrue(splits.isEmpty());
    assertNull(ia.getNextInputSplit("anotherHost"));
    assertEquals(NUM_REMOTE_SPLITS,ia.getNumberOfRemoteAssignments());
    assertEquals(NUM_LOCAL_SPLITS,ia.getNumberOfLocalAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
