{
  long seed=Calendar.getInstance().getTimeInMillis();
  final int NUM_SPLITS=65536;
  final String[] splitHosts=new String[256];
  final String[] requestingHosts=new String[256];
  final Random rand=new Random(seed);
  for (int i=0; i < splitHosts.length; i++) {
    splitHosts[i]="localHost" + i;
  }
  for (int i=0; i < requestingHosts.length; i++) {
    if (i % 2 == 0) {
      requestingHosts[i]="localHost" + i;
    }
 else {
      requestingHosts[i]="remoteHost" + i;
    }
  }
  String[] stringArray={};
  Set<String> hosts=new HashSet<String>();
  Set<LocatableInputSplit> splits=new HashSet<LocatableInputSplit>();
  for (int i=0; i < NUM_SPLITS; i++) {
    while (hosts.size() < 3) {
      hosts.add(splitHosts[rand.nextInt(splitHosts.length)]);
    }
    splits.add(new LocatableInputSplit(i,hosts.toArray(stringArray)));
    hosts.clear();
  }
  final LocatableInputSplitAssigner ia=new LocatableInputSplitAssigner(splits);
  for (int i=0; i < NUM_SPLITS; i++) {
    LocatableInputSplit split=ia.getNextInputSplit(requestingHosts[rand.nextInt(requestingHosts.length)],0);
    assertTrue(split != null);
    assertTrue(splits.remove(split));
  }
  assertTrue(splits.isEmpty());
  assertNull(ia.getNextInputSplit("testHost",0));
}
