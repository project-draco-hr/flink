{
  System.out.println(json);
  final Map<String,JsonNode> idToNode=new HashMap<>();
  ObjectMapper m=new ObjectMapper();
  JsonNode rootNode=m.readTree(json);
  JsonNode idField=rootNode.get("jid");
  JsonNode nameField=rootNode.get("name");
  JsonNode arrayField=rootNode.get("nodes");
  assertNotNull(idField);
  assertNotNull(nameField);
  assertNotNull(arrayField);
  assertTrue(idField.isTextual());
  assertTrue(nameField.isTextual());
  assertTrue(arrayField.isArray());
  ArrayNode array=(ArrayNode)arrayField;
  for (Iterator<JsonNode> iter=array.elements(); iter.hasNext(); ) {
    JsonNode vertex=iter.next();
    JsonNode vertexIdField=vertex.get("id");
    JsonNode parallelismField=vertex.get("parallelism");
    JsonNode contentsFields=vertex.get("description");
    JsonNode operatorField=vertex.get("operator");
    assertNotNull(vertexIdField);
    assertTrue(vertexIdField.isTextual());
    assertNotNull(parallelismField);
    assertTrue(parallelismField.isNumber());
    assertNotNull(contentsFields);
    assertTrue(contentsFields.isTextual());
    assertNotNull(operatorField);
    assertTrue(operatorField.isTextual());
    if (contentsFields.asText().startsWith("Sync")) {
      assertEquals(1,parallelismField.asInt());
    }
 else {
      assertEquals(expectedParallelism,parallelismField.asInt());
    }
    idToNode.put(vertexIdField.asText(),vertex);
  }
  assertEquals(numNodes,idToNode.size());
  for (  JsonNode node : idToNode.values()) {
    JsonNode inputsField=node.get("inputs");
    if (inputsField != null) {
      for (Iterator<JsonNode> inputsIter=inputsField.elements(); inputsIter.hasNext(); ) {
        JsonNode inputNode=inputsIter.next();
        JsonNode inputIdField=inputNode.get("id");
        assertNotNull(inputIdField);
        assertTrue(inputIdField.isTextual());
        String inputIdString=inputIdField.asText();
        assertTrue(idToNode.containsKey(inputIdString));
      }
    }
  }
}
