{
  File tempDir=new File(ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH,UUID.randomUUID().toString());
  try {
    FsStateBackend backend=CommonTestUtils.createCopySerializable(new FsStateBackend(localFileUri(tempDir)));
    backend.initializeForJob(new DummyEnvironment("test",0,0));
    File checkpointDir=new File(backend.getCheckpointDirectory().toUri().getPath());
    KvState<Integer,String,FsStateBackend> kv=backend.createKvState("0","a",IntSerializer.INSTANCE,StringSerializer.INSTANCE,null);
    assertEquals(0,kv.size());
    kv.setCurrentKey(1);
    assertNull(kv.value());
    kv.update("1");
    assertEquals(1,kv.size());
    kv.setCurrentKey(2);
    assertNull(kv.value());
    kv.update("2");
    assertEquals(2,kv.size());
    kv.setCurrentKey(1);
    assertEquals("1",kv.value());
    assertEquals(2,kv.size());
    KvStateSnapshot<Integer,String,FsStateBackend> snapshot1=kv.snapshot(682375462378L,System.currentTimeMillis());
    kv.setCurrentKey(1);
    kv.update("u1");
    kv.setCurrentKey(2);
    kv.update("u2");
    kv.setCurrentKey(3);
    kv.update("u3");
    KvStateSnapshot<Integer,String,FsStateBackend> snapshot2=kv.snapshot(682375462379L,System.currentTimeMillis());
    assertEquals(3,kv.size());
    kv.setCurrentKey(1);
    assertEquals("u1",kv.value());
    kv.setCurrentKey(2);
    assertEquals("u2",kv.value());
    kv.setCurrentKey(3);
    assertEquals("u3",kv.value());
    KvState<Integer,String,FsStateBackend> restored1=snapshot1.restoreState(backend,IntSerializer.INSTANCE,StringSerializer.INSTANCE,null,getClass().getClassLoader(),1);
    assertEquals(2,restored1.size());
    restored1.setCurrentKey(1);
    assertEquals("1",restored1.value());
    restored1.setCurrentKey(2);
    assertEquals("2",restored1.value());
    KvState<Integer,String,FsStateBackend> restored2=snapshot2.restoreState(backend,IntSerializer.INSTANCE,StringSerializer.INSTANCE,null,getClass().getClassLoader(),1);
    assertEquals(3,restored2.size());
    restored2.setCurrentKey(1);
    assertEquals("u1",restored2.value());
    restored2.setCurrentKey(2);
    assertEquals("u2",restored2.value());
    restored2.setCurrentKey(3);
    assertEquals("u3",restored2.value());
    snapshot1.discardState();
    assertFalse(isDirectoryEmpty(checkpointDir));
    snapshot2.discardState();
    assertTrue(isDirectoryEmpty(checkpointDir));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    deleteDirectorySilently(tempDir);
  }
}
