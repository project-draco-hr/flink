{
  File tempDir=new File(ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH,UUID.randomUUID().toString());
  try {
    FsStateBackend backend=CommonTestUtils.createCopySerializable(new FsStateBackend(localFileUri(tempDir)));
    backend.initializeForJob(new DummyEnvironment("test",0,0));
    File checkpointDir=new File(backend.getCheckpointDirectory().toUri().getPath());
    KvState<Integer,String,FsStateBackend> kv=backend.createKvState(0,"a",IntSerializer.INSTANCE,StringSerializer.INSTANCE,null);
    kv.setCurrentKey(1);
    kv.update("1");
    kv.setCurrentKey(2);
    kv.update("2");
    KvStateSnapshot<Integer,String,FsStateBackend> snapshot=kv.snapshot(682375462378L,System.currentTimeMillis());
    @SuppressWarnings("unchecked") TypeSerializer<Integer> fakeIntSerializer=(TypeSerializer<Integer>)(TypeSerializer<?>)FloatSerializer.INSTANCE;
    @SuppressWarnings("unchecked") TypeSerializer<String> fakeStringSerializer=(TypeSerializer<String>)(TypeSerializer<?>)new ValueSerializer<StringValue>(StringValue.class);
    try {
      snapshot.restoreState(backend,fakeIntSerializer,StringSerializer.INSTANCE,null,getClass().getClassLoader());
      fail("should recognize wrong serializers");
    }
 catch (    IllegalArgumentException e) {
    }
catch (    Exception e) {
      fail("wrong exception");
    }
    try {
      snapshot.restoreState(backend,IntSerializer.INSTANCE,fakeStringSerializer,null,getClass().getClassLoader());
      fail("should recognize wrong serializers");
    }
 catch (    IllegalArgumentException e) {
    }
catch (    Exception e) {
      fail("wrong exception");
    }
    try {
      snapshot.restoreState(backend,fakeIntSerializer,fakeStringSerializer,null,getClass().getClassLoader());
      fail("should recognize wrong serializers");
    }
 catch (    IllegalArgumentException e) {
    }
catch (    Exception e) {
      fail("wrong exception");
    }
    snapshot.discardState();
    assertTrue(isDirectoryEmpty(checkpointDir));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    deleteDirectorySilently(tempDir);
  }
}
