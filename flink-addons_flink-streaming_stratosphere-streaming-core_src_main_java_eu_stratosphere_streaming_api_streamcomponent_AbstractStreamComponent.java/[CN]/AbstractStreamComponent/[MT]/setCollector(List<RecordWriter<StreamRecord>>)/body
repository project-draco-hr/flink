{
  long batchTimeout=configuration.getLong("batchTimeout",1000);
  if (configuration.getBoolean("directedEmit",false)) {
    OutputSelector outputSelector=null;
    try {
      outputSelector=(OutputSelector)deserializeObject(configuration.getBytes("outputSelector",null));
    }
 catch (    Exception e) {
      if (log.isErrorEnabled()) {
        log.error("Cannot instantiate OutputSelector");
      }
    }
    int numberOfOutputs=configuration.getInteger("numberOfOutputs",0);
    List<String> partitionedOutputNames=new ArrayList<String>();
    List<String> notPartitionedOutputNames=new ArrayList<String>();
    for (int i=0; i < numberOfOutputs; i++) {
      String outputName=configuration.getString("outputName_" + i,"");
      if (configuration.getBoolean("isPartitionedOutput_" + i,false)) {
        partitionedOutputNames.add(outputName);
      }
 else {
        notPartitionedOutputNames.add(outputName);
      }
    }
    collector=new DirectedStreamCollectorManager<Tuple>(batchSizesNotPartitioned,batchSizesPartitioned,numOfOutputsPartitioned,keyPosition,batchTimeout,instanceID,outSerializationDelegate,outputsPartitioned,outputsNotPartitioned,outputSelector,partitionedOutputNames,notPartitionedOutputNames);
  }
 else {
    collector=new StreamCollectorManager<Tuple>(batchSizesNotPartitioned,batchSizesPartitioned,numOfOutputsPartitioned,keyPosition,batchTimeout,instanceID,outSerializationDelegate,outputsPartitioned,outputsNotPartitioned);
  }
  return collector;
}
