{
  testResults=Lists.newArrayList();
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.setParallelism(1);
  DataStream<Tuple2<String,Integer>> source1=env.addSource(new SourceFunction<Tuple2<String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public void run(    SourceContext<Tuple2<String,Integer>> ctx) throws Exception {
      ctx.collect(Tuple2.of("a",0));
      ctx.collect(Tuple2.of("a",1));
      ctx.collect(Tuple2.of("a",2));
      ctx.collect(Tuple2.of("b",3));
      ctx.collect(Tuple2.of("a",3));
      ctx.collect(Tuple2.of("b",4));
      ctx.collect(Tuple2.of("a",4));
      ctx.collect(Tuple2.of("b",5));
      ctx.collect(Tuple2.of("a",5));
    }
    @Override public void cancel(){
    }
  }
).assignTimestamps(new Tuple2TimestampExtractor());
  source1.windowAll(TumblingTimeWindows.of(Time.of(3,TimeUnit.MILLISECONDS))).fold(Tuple2.of("R:",0),new FoldFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>(){
    @Override public Tuple2<String,Integer> fold(    Tuple2<String,Integer> accumulator,    Tuple2<String,Integer> value) throws Exception {
      accumulator.f0+=value.f0;
      accumulator.f1+=value.f1;
      return accumulator;
    }
  }
).addSink(new SinkFunction<Tuple2<String,Integer>>(){
    @Override public void invoke(    Tuple2<String,Integer> value) throws Exception {
      testResults.add(value.toString());
    }
  }
);
  env.execute("Fold All-Window Test");
  List<String> expectedResult=Lists.newArrayList("(R:aaa,3)","(R:bababa,24)");
  Collections.sort(expectedResult);
  Collections.sort(testResults);
  Assert.assertEquals(expectedResult,testResults);
}
