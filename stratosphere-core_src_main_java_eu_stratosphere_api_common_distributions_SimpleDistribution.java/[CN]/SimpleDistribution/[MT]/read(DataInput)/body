{
  this.dim=in.readInt();
  final int len=in.readInt();
  boundaries=new Key[len][];
  Class<? extends Key<?>>[] types=new Class[dim];
  for (int i=0; i < dim; i++) {
    String className=in.readUTF();
    try {
      types[i]=(Class<? extends Key<?>>)Class.forName(className,true,getClass().getClassLoader()).asSubclass(Key.class);
    }
 catch (    ClassNotFoundException e) {
      throw new IOException("Could not load type class '" + className + "'.");
    }
catch (    Throwable t) {
      throw new IOException("Error loading type class '" + className + "'.",t);
    }
  }
  for (int i=0; i < len; i++) {
    Key<?>[] bucket=new Key[dim];
    for (int d=0; d < dim; d++) {
      Key<?> val=InstantiationUtil.instantiate(types[d],Key.class);
      val.read(in);
      bucket[d]=val;
    }
    boundaries[i]=bucket;
  }
}
