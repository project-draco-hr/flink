{
  File cwd=new File("target/" + yarnConfiguration.get(TEST_CLUSTER_NAME_KEY));
  Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to exist",cwd.exists());
  Assert.assertTrue("Expecting directory " + cwd.getAbsolutePath() + " to be a directory",cwd.isDirectory());
  File foundFile=findFile(cwd.getAbsolutePath(),new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      File f=new File(dir.getAbsolutePath() + "/" + name);
      try {
        Scanner scanner=new Scanner(f);
        while (scanner.hasNextLine()) {
          final String lineFromFile=scanner.nextLine();
          for (          String aProhibited : prohibited) {
            if (lineFromFile.contains(aProhibited)) {
              LOG.warn("Prohibited String '{}' in line '{}'",aProhibited,lineFromFile);
              return true;
            }
          }
        }
      }
 catch (      FileNotFoundException e) {
        LOG.warn("Unable to locate file: " + e.getMessage() + " file: "+ f.getAbsolutePath());
      }
      return false;
    }
  }
);
  if (foundFile != null) {
    Scanner scanner=null;
    try {
      scanner=new Scanner(foundFile);
    }
 catch (    FileNotFoundException e) {
      Assert.fail("Unable to locate file: " + e.getMessage() + " file: "+ foundFile.getAbsolutePath());
    }
    LOG.warn("Found a file with a prohibited string. Printing contents:");
    while (scanner.hasNextLine()) {
      LOG.warn("LINE: " + scanner.nextLine());
    }
    Assert.fail("Found a file " + foundFile + " with a prohibited string: "+ Arrays.toString(prohibited));
  }
}
