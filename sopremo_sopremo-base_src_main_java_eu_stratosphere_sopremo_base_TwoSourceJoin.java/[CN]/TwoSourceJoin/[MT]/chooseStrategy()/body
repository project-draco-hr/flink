{
  this.inverseInputs=false;
  this.strategy=null;
  if (this.condition instanceof ComparativeExpression) {
    ComparativeExpression comparison=(ComparativeExpression)this.condition.clone();
switch (comparison.getBinaryOperator()) {
case EQUAL:
      this.inverseInputs=comparison.getExpr1().find(InputSelection.class).getIndex() == 1;
    this.strategy=new OuterJoin().withMode(Mode.NONE).withKeyExpression(0,comparison.getExpr1().remove(InputSelection.class)).withKeyExpression(1,comparison.getExpr2().remove(InputSelection.class));
  break;
default :
this.strategy=new ThetaJoin().withComparison(comparison);
}
}
 else if (this.condition instanceof ElementInSetExpression) {
ElementInSetExpression elementInSetExpression=(ElementInSetExpression)this.condition.clone();
this.inverseInputs=elementInSetExpression.getElementExpr().find(InputSelection.class).getIndex() == 1;
switch (elementInSetExpression.getQuantor()) {
case EXISTS_NOT_IN:
this.strategy=new AntiJoin().withKeyExpression(0,elementInSetExpression.getElementExpr().remove(InputSelection.class)).withKeyExpression(1,elementInSetExpression.getSetExpr().remove(InputSelection.class));
break;
case EXISTS_IN:
this.strategy=new SemiJoin().withKeyExpression(0,elementInSetExpression.getElementExpr().remove(InputSelection.class)).withKeyExpression(1,elementInSetExpression.getSetExpr().remove(InputSelection.class));
break;
}
}
if (this.strategy == null) throw new UnsupportedOperationException("condition " + this.condition + " not supported");
}
