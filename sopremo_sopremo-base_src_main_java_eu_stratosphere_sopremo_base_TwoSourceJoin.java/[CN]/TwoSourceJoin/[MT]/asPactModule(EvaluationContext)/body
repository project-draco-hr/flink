{
  if (this.inverseInputs)   this.strategy.setResultProjection(this.getResultProjection().clone().replace(new IsInstancePredicate(InputSelection.class),new TransformFunction(){
    @Override public EvaluationExpression call(    EvaluationExpression argument){
      return new InputSelection(1 - ((InputSelection)argument).getIndex());
    }
  }
));
 else   this.strategy.setResultProjection(this.getResultProjection());
  if (!this.outerJoinSources.isEmpty() && this.strategy instanceof OuterJoin)   ((OuterJoin)this.strategy).withMode(this.outerJoinSources.contains(this.inverseInputs ? 1 : 0),this.outerJoinSources.contains(this.inverseInputs ? 0 : 1));
  final PactModule pactModule=this.strategy.asPactModule(context);
  if (this.inverseInputs)   ContractUtil.swapInputs(pactModule.getOutput(0).getInputs().get(0),0,1);
  return pactModule;
}
