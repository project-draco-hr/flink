{
  final FlatJoinFunction<IT1,IT2,OT> joinFunction=taskContext.getStub();
  final Collector<OT> collector=taskContext.getOutputCollector();
  final MutableObjectIterator<IT2> probeSideInput=taskContext.<IT2>getInput(0);
  if (objectReuseEnabled) {
    IT2 probeSideRecord=this.probeSideRecord;
    if (hashTable != null) {
      final CompactingHashTable<IT1> join=hashTable;
      final CompactingHashTable<IT1>.HashTableProber<IT2> prober=join.getProber(probeSideComparator,pairComparator);
      IT1 buildSideRecord=this.solutionSideRecord;
      while (this.running && ((probeSideRecord=probeSideInput.next(probeSideRecord)) != null)) {
        buildSideRecord=prober.getMatchFor(probeSideRecord,buildSideRecord);
        joinFunction.join(buildSideRecord,probeSideRecord,collector);
      }
    }
 else     if (objectMap != null) {
      final JoinHashMap<IT1> hashTable=this.objectMap;
      final JoinHashMap<IT1>.Prober<IT2> prober=this.objectMap.createProber(probeSideComparator,pairComparator);
      final TypeSerializer<IT1> buildSerializer=hashTable.getBuildSerializer();
      while (this.running && ((probeSideRecord=probeSideInput.next(probeSideRecord)) != null)) {
        IT1 match=prober.lookupMatch(probeSideRecord);
        joinFunction.join(buildSerializer.copy(match),probeSideRecord,collector);
      }
    }
 else {
      throw new RuntimeException();
    }
  }
 else {
    IT2 probeSideRecord;
    if (hashTable != null) {
      final CompactingHashTable<IT1> join=hashTable;
      final CompactingHashTable<IT1>.HashTableProber<IT2> prober=join.getProber(probeSideComparator,pairComparator);
      IT1 buildSideRecord;
      while (this.running && ((probeSideRecord=probeSideInput.next()) != null)) {
        buildSideRecord=prober.getMatchFor(probeSideRecord);
        joinFunction.join(buildSideRecord,probeSideRecord,collector);
      }
    }
 else     if (objectMap != null) {
      final JoinHashMap<IT1> hashTable=this.objectMap;
      final JoinHashMap<IT1>.Prober<IT2> prober=this.objectMap.createProber(probeSideComparator,pairComparator);
      final TypeSerializer<IT1> buildSerializer=hashTable.getBuildSerializer();
      while (this.running && ((probeSideRecord=probeSideInput.next()) != null)) {
        IT1 match=prober.lookupMatch(probeSideRecord);
        joinFunction.join(buildSerializer.copy(match),probeSideRecord,collector);
      }
    }
 else {
      throw new RuntimeException();
    }
  }
}
