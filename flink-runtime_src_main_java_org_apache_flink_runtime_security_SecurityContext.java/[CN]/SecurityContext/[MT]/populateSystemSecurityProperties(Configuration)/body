{
  Preconditions.checkNotNull(configuration,"The supplied configuation was null");
  System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG,"");
  boolean disableSaslClient=configuration.getBoolean(ConfigConstants.ZOOKEEPER_SASL_DISABLE,ConfigConstants.DEFAULT_ZOOKEEPER_SASL_DISABLE);
  if (disableSaslClient) {
    LOG.info("SASL client auth for ZK will be disabled");
    System.setProperty(ZOOKEEPER_SASL_CLIENT,"false");
    return;
  }
  final File jaasConfFile;
  try {
    Path jaasConfPath=Files.createTempFile(JAAS_CONF_FILENAME,"");
    InputStream jaasConfStream=SecurityContext.class.getClassLoader().getResourceAsStream(JAAS_CONF_FILENAME);
    Files.copy(jaasConfStream,jaasConfPath,StandardCopyOption.REPLACE_EXISTING);
    jaasConfFile=jaasConfPath.toFile();
    jaasConfFile.deleteOnExit();
  }
 catch (  IOException e) {
    throw new RuntimeException("SASL auth is enabled for ZK but unable to " + "locate pseudo Jaas config provided with Flink",e);
  }
  LOG.info("Enabling {} property with pseudo JAAS config file: {}",JAVA_SECURITY_AUTH_LOGIN_CONFIG,jaasConfFile.getAbsolutePath());
  System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG,jaasConfFile.getAbsolutePath());
  System.setProperty(ZOOKEEPER_SASL_CLIENT,"true");
  String zkSaslServiceName=configuration.getString(ConfigConstants.ZOOKEEPER_SASL_SERVICE_NAME,null);
  if (!StringUtils.isBlank(zkSaslServiceName)) {
    LOG.info("ZK SASL service name: {} is provided in the configuration",zkSaslServiceName);
    System.setProperty(ZOOKEEPER_SASL_CLIENT_USERNAME,zkSaslServiceName);
  }
}
