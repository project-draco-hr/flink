{
  try {
    Plan plan=getJavaTestPlan(false,true);
    OptimizedPlan oPlan=compileNoStats(plan);
    OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(oPlan);
    DualInputPlanNode joinWithInvariantNode=resolver.getNode(JOIN_WITH_INVARIANT_NAME);
    DualInputPlanNode joinWithSolutionSetNode=resolver.getNode(JOIN_WITH_SOLUTION_SET);
    SingleInputPlanNode worksetReducer=resolver.getNode(NEXT_WORKSET_REDUCER_NAME);
    SingleInputPlanNode deltaMapper=resolver.getNode(SOLUTION_DELTA_MAPPER_NAME);
    assertEquals(ShipStrategyType.FORWARD,joinWithInvariantNode.getInput1().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_HASH,joinWithInvariantNode.getInput2().getShipStrategy());
    assertEquals(new FieldList(1,2),joinWithInvariantNode.getKeysForInput1());
    assertEquals(new FieldList(1,2),joinWithInvariantNode.getKeysForInput2());
    assertEquals(ShipStrategyType.PARTITION_HASH,joinWithSolutionSetNode.getInput1().getShipStrategy());
    assertEquals(ShipStrategyType.FORWARD,joinWithSolutionSetNode.getInput2().getShipStrategy());
    assertEquals(new FieldList(0,1),joinWithSolutionSetNode.getKeysForInput1());
    assertEquals(ShipStrategyType.PARTITION_HASH,worksetReducer.getInput().getShipStrategy());
    assertEquals(new FieldList(1,2),worksetReducer.getKeys(0));
    ShipStrategyType ss1=deltaMapper.getInput().getShipStrategy();
    ShipStrategyType ss2=deltaMapper.getOutgoingChannels().get(0).getShipStrategy();
    assertTrue((ss1 == ShipStrategyType.FORWARD && ss2 == ShipStrategyType.PARTITION_HASH) || (ss2 == ShipStrategyType.FORWARD && ss1 == ShipStrategyType.PARTITION_HASH));
    new NepheleJobGraphGenerator().compileJobGraph(oPlan);
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Test errored: " + e.getMessage());
  }
}
