{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setDegreeOfParallelism(DEFAULT_PARALLELISM);
    @SuppressWarnings("unchecked") DataSet<Tuple3<Long,Long,Long>> solutionSetInput=env.fromElements(new Tuple3<Long,Long,Long>(1L,2L,3L)).name("Solution Set");
    @SuppressWarnings("unchecked") DataSet<Tuple3<Long,Long,Long>> worksetInput=env.fromElements(new Tuple3<Long,Long,Long>(1L,2L,3L)).name("Workset");
    @SuppressWarnings("unchecked") DataSet<Tuple3<Long,Long,Long>> invariantInput=env.fromElements(new Tuple3<Long,Long,Long>(1L,2L,3L)).name("Invariant Input");
    DeltaIteration<Tuple3<Long,Long,Long>,Tuple3<Long,Long,Long>> iter=solutionSetInput.iterateDelta(worksetInput,100,1,2);
    DataSet<Tuple3<Long,Long,Long>> result=iter.getWorkset().join(invariantInput).where(1,2).equalTo(1,2).with(new RichJoinFunction<Tuple3<Long,Long,Long>,Tuple3<Long,Long,Long>,Tuple3<Long,Long,Long>>(){
      public Tuple3<Long,Long,Long> join(      Tuple3<Long,Long,Long> first,      Tuple3<Long,Long,Long> second){
        return first;
      }
    }
);
    try {
      result.join(iter.getSolutionSet()).where(1,0).equalTo(0,2).with(new RichJoinFunction<Tuple3<Long,Long,Long>,Tuple3<Long,Long,Long>,Tuple3<Long,Long,Long>>(){
        public Tuple3<Long,Long,Long> join(        Tuple3<Long,Long,Long> first,        Tuple3<Long,Long,Long> second){
          return second;
        }
      }
);
      fail("The join should be rejected with key type mismatches.");
    }
 catch (    InvalidProgramException e) {
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Test errored: " + e.getMessage());
  }
}
