{
  JobGraph jobGraph=new JobGraph("Speed Test");
  SlotSharingGroup sharingGroup=new SlotSharingGroup();
  JobVertex producer=new JobVertex("Speed Test Producer");
  jobGraph.addVertex(producer);
  producer.setSlotSharingGroup(sharingGroup);
  producer.setInvokableClass(SpeedTestProducer.class);
  producer.setParallelism(numSubtasks);
  producer.getConfiguration().setInteger(DATA_VOLUME_GB_CONFIG_KEY,dataVolumeGb);
  producer.getConfiguration().setBoolean(IS_SLOW_SENDER_CONFIG_KEY,isSlowSender);
  JobVertex forwarder=null;
  if (useForwarder) {
    forwarder=new JobVertex("Speed Test Forwarder");
    jobGraph.addVertex(forwarder);
    forwarder.setSlotSharingGroup(sharingGroup);
    forwarder.setInvokableClass(SpeedTestForwarder.class);
    forwarder.setParallelism(numSubtasks);
  }
  JobVertex consumer=new JobVertex("Speed Test Consumer");
  jobGraph.addVertex(consumer);
  consumer.setSlotSharingGroup(sharingGroup);
  consumer.setInvokableClass(SpeedTestConsumer.class);
  consumer.setParallelism(numSubtasks);
  consumer.getConfiguration().setBoolean(IS_SLOW_RECEIVER_CONFIG_KEY,isSlowReceiver);
  if (useForwarder) {
    forwarder.connectNewDataSetAsInput(producer,DistributionPattern.ALL_TO_ALL);
    consumer.connectNewDataSetAsInput(forwarder,DistributionPattern.ALL_TO_ALL);
  }
 else {
    consumer.connectNewDataSetAsInput(producer,DistributionPattern.ALL_TO_ALL);
  }
  return jobGraph;
}
