{
  int degreeOfParallelism=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String dataPointInput=(args.length > 1 ? args[1] : "");
  String clusterInput=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  int numIterations=(args.length > 4 ? Integer.parseInt(args[4]) : 2);
  @SuppressWarnings("unchecked") FileDataSource pointsSource=new FileDataSource(new CsvInputFormat('|',IntValue.class,DoubleValue.class,DoubleValue.class,DoubleValue.class),dataPointInput,"Data Points");
  @SuppressWarnings("unchecked") FileDataSource clustersSource=new FileDataSource(new CsvInputFormat('|',IntValue.class,DoubleValue.class,DoubleValue.class,DoubleValue.class),clusterInput,"Centers");
  MapOperator dataPoints=MapOperator.builder(new PointBuilder()).name("Build data points").input(pointsSource).build();
  MapOperator clusterPoints=MapOperator.builder(new PointBuilder()).name("Build cluster points").input(clustersSource).build();
  BulkIteration iter=new BulkIteration("k-means loop");
  iter.setInput(clusterPoints);
  iter.setMaximumNumberOfIterations(numIterations);
  MapOperator findNearestClusterCenters=MapOperator.builder(new SelectNearestCenter()).setBroadcastVariable("centers",iter.getPartialSolution()).input(dataPoints).name("Find Nearest Centers").build();
  ReduceOperator recomputeClusterCenter=ReduceOperator.builder(new RecomputeClusterCenter(),IntValue.class,0).input(findNearestClusterCenters).name("Recompute Center Positions").build();
  iter.setNextPartialSolution(recomputeClusterCenter);
  FileDataSink newClusterPoints=new FileDataSink(new PointOutFormat(),output,iter,"New Center Positions");
  Plan plan=new Plan(newClusterPoints,"K-Means");
  plan.setDefaultParallelism(degreeOfParallelism);
  return plan;
}
