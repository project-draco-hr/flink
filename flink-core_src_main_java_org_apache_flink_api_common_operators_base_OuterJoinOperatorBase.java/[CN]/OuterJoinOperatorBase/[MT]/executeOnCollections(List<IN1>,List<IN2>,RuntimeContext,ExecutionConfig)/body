{
  TypeInformation<IN1> leftInformation=getOperatorInfo().getFirstInputType();
  TypeInformation<IN2> rightInformation=getOperatorInfo().getSecondInputType();
  TypeInformation<OUT> outInformation=getOperatorInfo().getOutputType();
  TypeComparator<IN1> leftComparator=buildComparatorFor(0,executionConfig,leftInformation);
  TypeComparator<IN2> rightComparator=buildComparatorFor(1,executionConfig,rightInformation);
  TypeSerializer<IN1> leftSerializer=leftInformation.createSerializer(executionConfig);
  TypeSerializer<IN2> rightSerializer=rightInformation.createSerializer(executionConfig);
  OuterJoinListIterator<IN1,IN2> outerJoinIterator=new OuterJoinListIterator<>(leftInput,leftSerializer,leftComparator,rightInput,rightSerializer,rightComparator,outerJoinType);
  FlatJoinFunction<IN1,IN2,OUT> function=userFunction.getUserCodeObject();
  FunctionUtils.setFunctionRuntimeContext(function,runtimeContext);
  FunctionUtils.openFunction(function,this.parameters);
  List<OUT> result=new ArrayList<>();
  Collector<OUT> collector=new CopyingListCollector<>(result,outInformation.createSerializer(executionConfig));
  while (outerJoinIterator.next()) {
    IN1 left=outerJoinIterator.getLeft();
    IN2 right=outerJoinIterator.getRight();
    function.join(left == null ? null : leftSerializer.copy(left),right == null ? null : rightSerializer.copy(right),collector);
  }
  return result;
}
