{
  CacheType cacheType=cacheTypes.get(cacheId);
  String finalCacheId=getFinalCacheId(cacheId,subTaskId,cacheType);
switch (cacheType) {
case ISOLATED:
case SHARED_READ_WRITE:
    return store.get(finalCacheId);
case SHARED_READ:
  Set<Integer> subTaskList=subTasks.get(cacheId);
final ConcurrentMap<K,V>[] stores=new ConcurrentMap[subTaskList.size()];
int i=0;
for (Integer id : subTaskList) {
finalCacheId=getFinalCacheId(cacheId,id,cacheType);
stores[i]=store.get(finalCacheId);
i++;
}
if (stores.length == 1) {
return stores[0];
}
return new ConcurrentMap<K,V>(){
final int length=stores.length;
@Override public void clear(){
throw new UnsupportedOperationException();
}
@Override public boolean containsKey(Object key){
throw new UnsupportedOperationException();
}
@Override public boolean containsValue(Object value){
throw new UnsupportedOperationException();
}
@Override public Set<java.util.Map.Entry<K,V>> entrySet(){
throw new UnsupportedOperationException();
}
@Override public V get(Object key){
for (int j=0; j < length; j++) {
V value=stores[j].get(key);
if (value != null) {
return value;
}
}
return null;
}
@Override public boolean isEmpty(){
throw new UnsupportedOperationException();
}
@Override public Set<K> keySet(){
throw new UnsupportedOperationException();
}
@Override public V put(K key,V value){
throw new UnsupportedOperationException();
}
@Override public void putAll(Map<? extends K,? extends V> m){
throw new UnsupportedOperationException();
}
@Override public V remove(Object key){
throw new UnsupportedOperationException();
}
@Override public int size(){
throw new UnsupportedOperationException();
}
@Override public Collection<V> values(){
throw new UnsupportedOperationException();
}
@Override public V putIfAbsent(K key,V value){
throw new UnsupportedOperationException();
}
@Override public boolean remove(Object key,Object value){
throw new UnsupportedOperationException();
}
@Override public V replace(K key,V value){
throw new UnsupportedOperationException();
}
@Override public boolean replace(K key,V oldValue,V newValue){
throw new UnsupportedOperationException();
}
}
;
default :
throw new RuntimeException("Unknown cache type " + cacheType.name());
}
}
