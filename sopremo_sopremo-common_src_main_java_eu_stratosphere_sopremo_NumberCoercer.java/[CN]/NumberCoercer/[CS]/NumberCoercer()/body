{
  this.coercers.put(AbstractJsonNode.Type.IntNode,new Coercer(){
    @Override public AbstractNumericNode coerce(    final IJsonNode node){
      return IntNode.valueOf(((INumericNode)node).getIntValue());
    }
  }
);
  this.coercers.put(AbstractJsonNode.Type.LongNode,new Coercer(){
    @Override public AbstractNumericNode coerce(    final IJsonNode node){
      return LongNode.valueOf(((INumericNode)node).getLongValue());
    }
  }
);
  this.coercers.put(AbstractJsonNode.Type.DoubleNode,new Coercer(){
    @Override public AbstractNumericNode coerce(    final IJsonNode node){
      return DoubleNode.valueOf(((INumericNode)node).getDoubleValue());
    }
  }
);
  this.coercers.put(AbstractJsonNode.Type.BigIntegerNode,new Coercer(){
    @Override public AbstractNumericNode coerce(    final IJsonNode node){
      return BigIntegerNode.valueOf(((INumericNode)node).getBigIntegerValue());
    }
  }
);
  this.coercers.put(AbstractJsonNode.Type.DecimalNode,new Coercer(){
    @Override public AbstractNumericNode coerce(    final IJsonNode node){
      return DecimalNode.valueOf(((INumericNode)node).getDecimalValue());
    }
  }
);
  for (  final Entry<AbstractJsonNode.Type,Coercer> entry : this.coercers.entrySet())   this.classCoercers.put(entry.getKey().getClazz(),entry.getValue());
}
