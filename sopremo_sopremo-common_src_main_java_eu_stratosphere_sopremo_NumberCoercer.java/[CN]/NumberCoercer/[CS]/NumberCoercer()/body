{
  final List<NumberType> widestTypes=Arrays.asList(NumberType.DOUBLE,NumberType.FLOAT,NumberType.BIG_DECIMAL,NumberType.BIG_INTEGER,NumberType.LONG,NumberType.INT);
  @SuppressWarnings("unchecked") final Class<? extends JsonNode>[] types=(Class<? extends JsonNode>[])new Class<?>[]{DoubleNode.class,DoubleNode.class,DecimalNode.class,BigIntegerNode.class,LongNode.class,IntNode.class};
  for (int index=0; index < types.length; index++) {
    this.implementationTypes.put(widestTypes.get(index),types[index]);
    this.numberTypes.put(types[index],widestTypes.get(index));
  }
  for (int leftIndex=0; leftIndex < NUMBER_TYPES_COUNT; leftIndex++)   for (int rightIndex=0; rightIndex < NUMBER_TYPES_COUNT; rightIndex++) {
    final int coerceIndex=Math.min(widestTypes.indexOf(NumberType.values()[leftIndex]),widestTypes.indexOf(NumberType.values()[rightIndex]));
    this.typeCoerceMatrix[leftIndex][rightIndex]=widestTypes.get(coerceIndex);
  }
  this.coercers.put(NumberType.INT,new Coercer(){
    @Override public NumericNode coerce(    final JsonNode node){
      return IntNode.valueOf(node.getIntValue());
    }
  }
);
  this.coercers.put(NumberType.LONG,new Coercer(){
    @Override public NumericNode coerce(    final JsonNode node){
      return LongNode.valueOf(node.getLongValue());
    }
  }
);
  this.coercers.put(NumberType.DOUBLE,new Coercer(){
    @Override public NumericNode coerce(    final JsonNode node){
      return DoubleNode.valueOf(node.getDoubleValue());
    }
  }
);
  this.coercers.put(NumberType.FLOAT,new Coercer(){
    @Override public NumericNode coerce(    final JsonNode node){
      return DoubleNode.valueOf(node.getDoubleValue());
    }
  }
);
  this.coercers.put(NumberType.BIG_INTEGER,new Coercer(){
    @Override public NumericNode coerce(    final JsonNode node){
      return BigIntegerNode.valueOf(node.getBigIntegerValue());
    }
  }
);
  this.coercers.put(NumberType.BIG_DECIMAL,new Coercer(){
    @Override public NumericNode coerce(    final JsonNode node){
      return DecimalNode.valueOf(node.getDecimalValue());
    }
  }
);
  for (  final Entry<NumberType,Coercer> entry : this.coercers.entrySet())   this.classCoercers.put(this.implementationTypes.get(entry.getKey()),entry.getValue());
}
