{
  JobStatusMessage status=null;
  for (int i=0; i < 200; i++) {
    Future<Object> listResponse=jobManager.ask(JobManagerMessages.getRequestRunningJobsStatus(),askTimeout);
    List<JobStatusMessage> jobs;
    try {
      Object result=Await.result(listResponse,askTimeout);
      jobs=((JobManagerMessages.RunningJobsStatus)result).getStatusMessages();
    }
 catch (    Exception e) {
      throw new Exception("Could not cancel job - failed to retrieve running jobs from the JobManager.",e);
    }
    if (jobs.isEmpty()) {
      Thread.sleep(50);
    }
 else     if (jobs.size() == 1) {
      status=jobs.get(0);
    }
 else {
      throw new Exception("Could not cancel job - more than one running job.");
    }
  }
  if (status == null) {
    throw new Exception("Could not cancel job - no running jobs");
  }
 else   if (status.getJobState().isTerminalState()) {
    throw new Exception("Could not cancel job - job is not running any more");
  }
  JobID jobId=status.getJobId();
  Future<Object> response=jobManager.ask(new JobManagerMessages.CancelJob(jobId),askTimeout);
  try {
    Await.result(response,askTimeout);
  }
 catch (  Exception e) {
    throw new Exception("Sending the 'cancel' message failed.",e);
  }
}
