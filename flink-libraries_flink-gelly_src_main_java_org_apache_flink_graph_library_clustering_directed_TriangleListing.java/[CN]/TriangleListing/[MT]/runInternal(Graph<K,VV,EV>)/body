{
  DataSet<Tuple3<K,K,ByteValue>> filteredByID=input.getEdges().map(new OrderByID<K,EV>()).setParallelism(littleParallelism).name("Order by ID").groupBy(0,1).reduceGroup(new ReduceBitmask<K>()).setParallelism(littleParallelism).name("Flatten by ID");
  DataSet<Edge<K,Tuple3<EV,Degrees,Degrees>>> pairDegrees=input.run(new EdgeDegreesPair<K,VV,EV>().setParallelism(littleParallelism));
  DataSet<Tuple3<K,K,ByteValue>> filteredByDegree=pairDegrees.map(new OrderByDegree<K,EV>()).setParallelism(littleParallelism).name("Order by degree").groupBy(0,1).reduceGroup(new ReduceBitmask<K>()).setParallelism(littleParallelism).name("Flatten by degree");
  DataSet<Tuple4<K,K,K,ByteValue>> triplets=filteredByDegree.groupBy(0).sortGroup(1,Order.ASCENDING).reduceGroup(new GenerateTriplets<K>()).setParallelism(littleParallelism).name("Generate triplets");
  DataSet<Result<K>> triangles=triplets.join(filteredByID,JoinOperatorBase.JoinHint.REPARTITION_HASH_SECOND).where(1,2).equalTo(0,1).with(new ProjectTriangles<K>()).setParallelism(littleParallelism).name("Triangle listing");
  if (sortTriangleVertices.get()) {
    triangles=triangles.map(new SortTriangleVertices<K>()).name("Sort triangle vertices");
  }
  return triangles;
}
