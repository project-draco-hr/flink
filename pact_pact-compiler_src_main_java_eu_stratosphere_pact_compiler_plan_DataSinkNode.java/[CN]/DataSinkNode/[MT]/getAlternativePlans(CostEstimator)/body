{
  List<? extends OptimizerNode> inPlans=input.getSourcePact().getAlternativePlans(estimator);
  List<DataSinkNode> plans=new ArrayList<DataSinkNode>(inPlans.size());
  for (  OptimizerNode pred : inPlans) {
    Order go=getPactContract().getGlobalOrder();
    Order lo=getPactContract().getLocalOrder();
    GlobalProperties gp=pred.getGlobalProperties().createCopy();
    LocalProperties lp=pred.getLocalProperties().createCopy();
    ShipStrategy ss=null;
    LocalStrategy ls=null;
    if (go != Order.NONE && go != gp.getKeyOrder()) {
      if (input.getShipStrategy() == ShipStrategy.NONE || input.getShipStrategy() == ShipStrategy.PARTITION_RANGE) {
        ss=ShipStrategy.PARTITION_RANGE;
      }
 else {
        continue;
      }
      if (localStrategy == LocalStrategy.NONE || localStrategy == LocalStrategy.SORT) {
        ls=LocalStrategy.SORT;
      }
 else {
        continue;
      }
      gp.setPartitioning(PartitionProperty.RANGE_PARTITIONED);
      gp.setKeyOrder(go);
      lp.setKeyOrder(go);
    }
 else     if (lo != Order.NONE && lo != lp.getKeyOrder()) {
      if (localStrategy == LocalStrategy.NONE || localStrategy == LocalStrategy.SORT) {
        ls=LocalStrategy.SORT;
      }
 else {
        continue;
      }
      ls=LocalStrategy.SORT;
      lp.setKeyOrder(lo);
    }
    DataSinkNode ns=new DataSinkNode(this,pred,input,gp,lp);
    if (ss == null) {
      ss=ShipStrategy.FORWARD;
    }
    ns.input.setShipStrategy(ss);
    if (ls == null) {
      ls=LocalStrategy.NONE;
    }
    ns.setLocalStrategy(ls);
    estimator.costOperator(ns);
    plans.add(ns);
  }
  prunePlanAlternatives(plans);
  if (plans.isEmpty()) {
    throw new CompilerException("Could not create a valid plan for the reduce contract '" + getPactContract().getName() + "'. The compiler hints specified incompatible shipping strategies.");
  }
  return plans;
}
