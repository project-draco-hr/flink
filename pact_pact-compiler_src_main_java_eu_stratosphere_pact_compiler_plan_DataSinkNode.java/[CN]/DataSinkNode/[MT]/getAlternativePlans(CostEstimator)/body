{
  List<OptimizerNode> outputPlans=new ArrayList<OptimizerNode>();
  List<? extends OptimizerNode> subPlans=this.getPredNode().getAlternativePlans(estimator);
  for (  OptimizerNode subPlan : subPlans) {
    Ordering go=getPactContract().getGlobalOrder();
    Ordering lo=getPactContract().getLocalOrder();
    GlobalProperties gp;
    LocalProperties lp;
    gp=subPlan.getGlobalProperties().createCopy();
    lp=subPlan.getLocalProperties().createCopy();
    ShipStrategy ss=null;
    LocalStrategy ls=null;
    if (go != null && lo != null) {
      ShipStrategy s=this.input.getShipStrategy();
      if (s == ShipStrategy.NONE || s == ShipStrategy.PARTITION_RANGE) {
        ss=ShipStrategy.PARTITION_RANGE;
      }
 else {
        continue;
      }
      if (this.localStrategy == LocalStrategy.NONE || this.localStrategy == LocalStrategy.SORT) {
        ls=LocalStrategy.SORT;
      }
 else {
        continue;
      }
      gp.setPartitioning(PartitionProperty.RANGE_PARTITIONED,go.getInvolvedFields());
      gp.setOrdering(go);
      lp.setOrdering(go);
    }
 else     if (lo != null && lo.isMetBy(lp.getOrdering())) {
      if (this.localStrategy == LocalStrategy.NONE || this.localStrategy == LocalStrategy.SORT) {
        ls=LocalStrategy.SORT;
      }
 else {
        continue;
      }
      ls=LocalStrategy.SORT;
      lp.setOrdering(lo);
    }
    if (ss == null) {
      ss=ShipStrategy.FORWARD;
    }
    DataSinkNode ns=new DataSinkNode(this,subPlan,this.input,gp,lp);
    ns.input.setShipStrategy(ss);
    if (ls == null) {
      ls=LocalStrategy.NONE;
    }
    ns.setLocalStrategy(ls);
    estimator.costOperator(ns);
    outputPlans.add(ns);
  }
  prunePlanAlternatives(outputPlans);
  if (outputPlans.isEmpty()) {
    throw new CompilerException("Could not create a valid plan for the DataSink contract '" + getPactContract().getName() + "'. The compiler hints specified incompatible shipping strategies.");
  }
  return outputPlans;
}
