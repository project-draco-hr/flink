{
  final Ordering partitioning=getPactContract().getPartitionOrdering();
  final Ordering localOrder=getPactContract().getLocalOrder();
  if (partitioning != null) {
    InterestingProperties partitioningProps=new InterestingProperties();
    partitioningProps.getGlobalProperties().setRangePartitioned(partitioning);
    estimator.addRangePartitionCost(this.input,partitioningProps.getMaximalCosts());
    this.input.addInterestingProperties(partitioningProps);
  }
 else   if (localOrder == null) {
    this.input.setNoInterestingProperties();
  }
  if (localOrder != null) {
    if (partitioning != null && localOrder.equals(partitioning)) {
      InterestingProperties globalSortProps=new InterestingProperties();
      globalSortProps.getGlobalProperties().setRangePartitioned(partitioning);
      estimator.addRangePartitionCost(this.input,globalSortProps.getMaximalCosts());
      globalSortProps.getLocalProperties().setOrdering(partitioning);
      estimator.addLocalSortCost(this.input,-1,globalSortProps.getMaximalCosts());
      this.input.addInterestingProperties(globalSortProps);
    }
 else {
      InterestingProperties localSortProps=new InterestingProperties();
      localSortProps.getLocalProperties().setOrdering(partitioning);
      estimator.addLocalSortCost(this.input,-1,localSortProps.getMaximalCosts());
      this.input.addInterestingProperties(localSortProps);
    }
  }
}
