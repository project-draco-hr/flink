{
  long checkpointId=dis.readLong();
  int numTaskStates=dis.readInt();
  List<TaskState> taskStates=new ArrayList<>(numTaskStates);
  for (int i=0; i < numTaskStates; i++) {
    JobVertexID jobVertexId=new JobVertexID(dis.readLong(),dis.readLong());
    int parallelism=dis.readInt();
    TaskState taskState=new TaskState(jobVertexId,parallelism);
    taskStates.add(taskState);
    int numSubTaskStates=dis.readInt();
    for (int j=0; j < numSubTaskStates; j++) {
      int subtaskIndex=dis.readInt();
      int length=dis.readInt();
      SerializedValue<StateHandle<?>> serializedValue;
      if (length == -1) {
        serializedValue=new SerializedValue<>(null);
      }
 else {
        byte[] serializedData=new byte[length];
        dis.readFully(serializedData,0,length);
        serializedValue=SerializedValue.fromBytes(serializedData);
      }
      long stateSize=dis.readLong();
      long duration=dis.readLong();
      SubtaskState subtaskState=new SubtaskState(serializedValue,stateSize,duration);
      taskState.putState(subtaskIndex,subtaskState);
    }
    int numKvStates=dis.readInt();
    for (int j=0; j < numKvStates; j++) {
      int keyGroupIndex=dis.readInt();
      int length=dis.readInt();
      SerializedValue<StateHandle<?>> serializedValue;
      if (length == -1) {
        serializedValue=new SerializedValue<>(null);
      }
 else {
        byte[] serializedData=new byte[length];
        dis.readFully(serializedData,0,length);
        serializedValue=SerializedValue.fromBytes(serializedData);
      }
      long stateSize=dis.readLong();
      long duration=dis.readLong();
      KeyGroupState keyGroupState=new KeyGroupState(serializedValue,stateSize,duration);
      taskState.putKvState(keyGroupIndex,keyGroupState);
    }
  }
  return new SavepointV0(checkpointId,taskStates);
}
