{
  StreamFilter<Integer> operator=new StreamFilter<Integer>(new MyFilter());
  OneInputStreamOperatorTestHarness<Integer,Integer> testHarness=new OneInputStreamOperatorTestHarness<Integer,Integer>(operator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<Integer>(1,initialTime + 1));
  testHarness.processElement(new StreamRecord<Integer>(2,initialTime + 2));
  testHarness.processWatermark(new Watermark(initialTime + 2));
  testHarness.processElement(new StreamRecord<Integer>(3,initialTime + 3));
  testHarness.processElement(new StreamRecord<Integer>(4,initialTime + 4));
  testHarness.processElement(new StreamRecord<Integer>(5,initialTime + 5));
  testHarness.processElement(new StreamRecord<Integer>(6,initialTime + 6));
  testHarness.processElement(new StreamRecord<Integer>(7,initialTime + 7));
  expectedOutput.add(new StreamRecord<Integer>(2,initialTime + 2));
  expectedOutput.add(new Watermark(initialTime + 2));
  expectedOutput.add(new StreamRecord<Integer>(4,initialTime + 4));
  expectedOutput.add(new StreamRecord<Integer>(6,initialTime + 6));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
}
