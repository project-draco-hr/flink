{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  FilterFunction<Long> dummyFilter=new FilterFunction<Long>(){
    @Override public boolean filter(    Long value){
      return false;
    }
  }
;
  env.generateSequence(1,10).filter(dummyFilter).slotSharingGroup("isolated").filter(dummyFilter).slotSharingGroup("default").disableChaining().filter(dummyFilter).slotSharingGroup("group 1").filter(dummyFilter).startNewChain().print().disableChaining();
  env.generateSequence(1,10).filter(dummyFilter).slotSharingGroup("isolated-2").filter(dummyFilter).slotSharingGroup("default").disableChaining().filter(dummyFilter).slotSharingGroup("group 2").filter(dummyFilter).startNewChain().print().disableChaining();
  JobGraph jobGraph=env.getStreamGraph().getJobGraph();
  List<JobVertex> vertices=jobGraph.getVerticesSortedTopologicallyFromSources();
  assertEquals(vertices.get(0).getSlotSharingGroup(),vertices.get(3).getSlotSharingGroup());
  assertNotEquals(vertices.get(0).getSlotSharingGroup(),vertices.get(2).getSlotSharingGroup());
  assertNotEquals(vertices.get(3).getSlotSharingGroup(),vertices.get(4).getSlotSharingGroup());
  assertEquals(vertices.get(4).getSlotSharingGroup(),vertices.get(5).getSlotSharingGroup());
  assertEquals(vertices.get(5).getSlotSharingGroup(),vertices.get(6).getSlotSharingGroup());
  int pipelineStart=6;
  assertEquals(vertices.get(1).getSlotSharingGroup(),vertices.get(pipelineStart + 2).getSlotSharingGroup());
  assertNotEquals(vertices.get(1).getSlotSharingGroup(),vertices.get(pipelineStart + 1).getSlotSharingGroup());
  assertNotEquals(vertices.get(pipelineStart + 2).getSlotSharingGroup(),vertices.get(pipelineStart + 3).getSlotSharingGroup());
  assertEquals(vertices.get(pipelineStart + 3).getSlotSharingGroup(),vertices.get(pipelineStart + 4).getSlotSharingGroup());
  assertEquals(vertices.get(pipelineStart + 4).getSlotSharingGroup(),vertices.get(pipelineStart + 5).getSlotSharingGroup());
}
