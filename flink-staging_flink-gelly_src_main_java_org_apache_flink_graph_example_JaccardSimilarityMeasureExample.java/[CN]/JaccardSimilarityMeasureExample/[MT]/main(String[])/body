{
  if (!parseParameters(args)) {
    return;
  }
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Edge<Long,Double>> edges=getEdgesDataSet(env);
  Graph<Long,NullValue,Double> graph=Graph.fromDataSet(edges,env);
  DataSet<Vertex<Long,HashSet<Long>>> verticesWithNeighbors=graph.reduceOnEdges(new GatherNeighbors(),EdgeDirection.ALL);
  Graph<Long,HashSet<Long>,Double> graphWithVertexValues=Graph.fromDataSet(verticesWithNeighbors,edges,env);
  DataSet<Tuple3<Long,Long,Double>> edgesWithJaccardWeight=graphWithVertexValues.getTriplets().map(new WeighEdgesMapper());
  DataSet<Edge<Long,Double>> result=graphWithVertexValues.joinWithEdges(edgesWithJaccardWeight,new MapFunction<Tuple2<Double,Double>,Double>(){
    @Override public Double map(    Tuple2<Double,Double> value) throws Exception {
      return value.f1;
    }
  }
).getEdges();
  if (fileOutput) {
    result.writeAsCsv(outputPath,"\n",",");
  }
 else {
    result.print();
  }
  env.execute("Executing Jaccard Similarity Measure");
}
