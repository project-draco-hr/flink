{
  String inputPath=this.inputPath, name=this.inputPath;
  if (this.isAdhoc())   try {
    final File tempFile=File.createTempFile("Adhoc","source");
    this.writeValues(tempFile);
    inputPath="file://localhost" + tempFile.getAbsolutePath();
    SopremoUtil.LOG.info("temp file " + inputPath);
    name="Adhoc";
  }
 catch (  final IOException e) {
    throw new IllegalStateException("Cannot create adhoc source",e);
  }
  final PactModule pactModule=new PactModule(this.toString(),0,1);
  try {
    URI validURI=new URI(inputPath);
    if (validURI.getScheme() == null)     throw new IllegalStateException("Source does not have a valid schema: " + inputPath);
  }
 catch (  URISyntaxException e) {
    throw new IllegalStateException("Source does not have a valid path: " + inputPath,e);
  }
  final FileDataSource contract=new FileDataSource(this.inputFormat,inputPath,name);
  if (this.inputFormat == JsonInputFormat.class)   contract.setDegreeOfParallelism(1);
  for (  final Entry<String,Object> parameter : this.parameters.entrySet())   if (parameter.getValue() instanceof Serializable)   SopremoUtil.serialize(contract.getParameters(),parameter.getKey(),(Serializable)parameter.getValue());
  SopremoUtil.serialize(contract.getParameters(),IOConstants.SCHEMA,context.getOutputSchema(0));
  pactModule.getOutput(0).setInput(contract);
  return pactModule;
}
