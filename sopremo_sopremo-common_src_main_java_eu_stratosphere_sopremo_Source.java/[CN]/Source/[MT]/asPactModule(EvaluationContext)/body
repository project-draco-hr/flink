{
  final String inputPath=this.inputPath, name=this.getName();
  GenericDataSource<?> contract;
  if (this.isAdhoc()) {
    contract=new GenericDataSource<GeneratorInputFormat>(GeneratorInputFormat.class,String.format("Adhoc %s",name));
    SopremoUtil.serialize(contract.getParameters(),GeneratorInputFormat.ADHOC_EXPRESSION_PARAMETER_KEY,this.adhocExpression);
  }
 else {
    try {
      URI validURI=new URI(inputPath);
      if (validURI.getScheme() == null)       throw new IllegalStateException("Source does not have a valid schema: " + inputPath);
    }
 catch (    URISyntaxException e) {
      throw new IllegalStateException("Source does not have a valid path: " + inputPath,e);
    }
    contract=new FileDataSource(this.inputFormat,inputPath,name);
  }
  final PactModule pactModule=new PactModule(this.toString(),0,1);
  if (this.inputFormat == JsonInputFormat.class)   contract.setDegreeOfParallelism(1);
  for (  final Entry<String,Object> parameter : this.parameters.entrySet())   if (parameter.getValue() instanceof Serializable)   SopremoUtil.serialize(contract.getParameters(),parameter.getKey(),(Serializable)parameter.getValue());
  SopremoUtil.serialize(contract.getParameters(),IOConstants.SCHEMA,context.getOutputSchema(0));
  pactModule.getOutput(0).setInput(contract);
  return pactModule;
}
