{
  AbstractInvokable memOwner=new DummyInvokable();
  MemorySegment memory=memoryManager.allocate(memOwner,256);
{
    BufferSortableGuaranteed<TestData.Key,TestData.Value> buffer=newSortBuffer(memory);
    for (int i=1; i < 4; i++) {
      KeyValuePair<TestData.Key,TestData.Value> pair=new KeyValuePair<TestData.Key,TestData.Value>(new TestData.Key(i),new TestData.Value("" + i));
      buffer.write(pair);
    }
    Iterator<KeyValuePair<TestData.Key,TestData.Value>> iter=buffer.getIterator();
    for (int i=1; i < 4; i++) {
      if (!iter.hasNext()) {
        throw new IllegalStateException();
      }
      Pair<TestData.Key,TestData.Value> pair=iter.next();
      Assert.assertEquals(i,pair.getKey().getKey());
    }
{
      MemorySegment memory2=memoryManager.allocate(memOwner,256);
      final Buffer.Output buffer2=new Buffer.Output(memory2);
      Writer writer=new Writer(){
        @Override public Collection<MemorySegment> close(){
          return Collections.emptyList();
        }
        @Override public boolean write(        IOReadableWritable readable){
          return buffer2.write(readable);
        }
      }
;
      buffer.writeToChannel(writer);
      memory2=buffer2.dispose();
      memoryManager.release(memory2);
    }
    memory=buffer.unbind();
  }
  memoryManager.release(memory);
}
