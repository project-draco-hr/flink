{
  AbstractInvokable memOwner=new DummyInvokable();
  MemorySegment memory=memoryManager.allocate(memOwner,1024);
  int writtenPairs=0, readPairs=0, limit;
{
    TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    BufferSortableGuaranteed<TestData.Key,TestData.Value> buffer=newSortBuffer(memory);
    int writtenBytes=0;
    KeyValuePair<TestData.Key,TestData.Value> pair=generator.next();
    while (buffer.write(pair)) {
      LOG.debug("<- " + pair);
      writtenBytes+=generator.sizeOf(pair);
      writtenPairs++;
      pair=generator.next();
    }
    LOG.debug("Written " + writtenPairs + " pairs to buffer which occupied "+ writtenBytes+ " of "+ 1024+ " bytes.");
    limit=buffer.getPosition();
    memory=buffer.unbind();
  }
{
    Buffer.Input buffer=new Buffer.Input(memory);
    buffer.reset(limit);
    KeyValuePair<TestData.Key,TestData.Value> pair=new KeyValuePair<TestData.Key,TestData.Value>(new TestData.Key(),new TestData.Value());
    while (buffer.read(pair) && buffer.getPosition() <= limit) {
      LOG.debug("-> " + pair);
      readPairs++;
    }
    LOG.debug("Read " + readPairs + " pairs from buffer.");
    memory=buffer.dispose();
  }
  Assert.assertEquals(writtenPairs,readPairs);
  memoryManager.release(memory);
}
