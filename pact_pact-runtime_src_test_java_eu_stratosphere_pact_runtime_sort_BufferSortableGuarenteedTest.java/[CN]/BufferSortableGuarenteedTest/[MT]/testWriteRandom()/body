{
  AbstractInvokable memOwner=new DummyInvokable();
  MemorySegment memory=memoryManager.allocate(memOwner,1024);
  int writtenPairs=0, readPairs=0, limit;
{
    TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    BufferSortableGuaranteed buffer=newSortBuffer(memory);
    int writtenBytes=0;
    PactRecord rec=new PactRecord();
    rec=generator.next(rec);
    while (buffer.write(rec)) {
      LOG.debug("<- " + rec);
      writtenBytes+=generator.sizeOf(rec);
      writtenPairs++;
      rec=generator.next(rec);
    }
    LOG.debug("Written " + writtenPairs + " pairs to buffer which occupied "+ writtenBytes+ " of "+ 1024+ " bytes.");
    limit=buffer.getPosition();
    memory=buffer.unbind();
  }
{
    Buffer.Input buffer=new Buffer.Input(memory);
    buffer.reset(limit);
    PactRecord readRec=new PactRecord();
    while (buffer.read(readRec) && buffer.getPosition() <= limit) {
      LOG.debug("-> " + readRec);
      readPairs++;
    }
    LOG.debug("Read " + readPairs + " pairs from buffer.");
    memory=buffer.dispose();
  }
  Assert.assertEquals(writtenPairs,readPairs);
  memoryManager.release(memory);
}
