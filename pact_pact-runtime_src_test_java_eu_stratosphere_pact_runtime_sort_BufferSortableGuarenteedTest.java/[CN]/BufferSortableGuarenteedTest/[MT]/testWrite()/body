{
  AbstractInvokable memOwner=new DummyInvokable();
  MemorySegment memory=memoryManager.allocate(memOwner,MEMORY_SIZE);
  int writtenPairs=0, readPairs=0, position;
{
    TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.SORTED,ValueMode.FIX_LENGTH);
    BufferSortableGuaranteed buffer=newSortBuffer(memory);
    int writtenBytes=0;
    PactRecord rec=generator.next();
    while (buffer.write(rec)) {
      writtenBytes+=generator.sizeOf(rec);
      writtenPairs++;
      rec=generator.next();
    }
    LOG.debug("Written " + writtenPairs + " pairs to buffer which occupied "+ writtenBytes+ " of "+ MEMORY_SIZE+ " bytes.");
    position=buffer.getPosition();
    memory=buffer.unbind();
  }
{
    Buffer.Input buffer=new Buffer.Input(memory);
    buffer.reset(position);
    PactRecord readRec=new PactRecord();
    while (buffer.read(readRec)) {
      readPairs++;
    }
    LOG.debug("Read " + readPairs + " pairs from buffer.");
    memory=buffer.dispose();
  }
  Assert.assertEquals(writtenPairs,readPairs);
  memoryManager.release(memory);
}
