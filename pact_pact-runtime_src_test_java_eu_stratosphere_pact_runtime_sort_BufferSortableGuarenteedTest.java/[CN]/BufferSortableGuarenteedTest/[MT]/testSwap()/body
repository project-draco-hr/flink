{
  AbstractInvokable memOwner=new DummyInvokable();
  MemorySegment memory=memoryManager.allocate(memOwner,256);
{
    BufferSortableGuaranteed buffer=newSortBuffer(memory);
    for (int i=1; i <= 3; i++) {
      PactRecord rec=new PactRecord(new TestData.Key(i),new TestData.Value("" + i));
      buffer.write(rec);
    }
    buffer.swap(0,1);
{
      final MutableObjectIterator<PactRecord> iter=buffer.getIterator();
      final PactRecord rec=new PactRecord();
      Assert.assertEquals(2,iter.next(rec).getField(0,TestData.Key.class).getKey());
      Assert.assertEquals(1,iter.next(rec).getField(0,TestData.Key.class).getKey());
      Assert.assertEquals(3,iter.next(rec).getField(0,TestData.Key.class).getKey());
    }
    buffer.swap(1,2);
{
      MutableObjectIterator<PactRecord> iter=buffer.getIterator();
      final PactRecord rec=new PactRecord();
      Assert.assertEquals(2,iter.next(rec).getField(0,TestData.Key.class).getKey());
      Assert.assertEquals(3,iter.next(rec).getField(0,TestData.Key.class).getKey());
      Assert.assertEquals(1,iter.next(rec).getField(0,TestData.Key.class).getKey());
    }
{
      MemorySegment memory2=memoryManager.allocate(memOwner,256);
{
        final Buffer.Output buffer2=new Buffer.Output(memory2);
        Writer writer=new Writer(){
          @Override public Collection<MemorySegment> close(){
            return Collections.emptyList();
          }
          @Override public boolean write(          IOReadableWritable readable){
            return buffer2.write(readable);
          }
        }
;
        buffer.writeToChannel(writer);
        memory2=buffer2.dispose();
      }
{
        Buffer.Input buffer2=new Buffer.Input(memory2);
        @SuppressWarnings("unused") PactRecord rec=new PactRecord(new TestData.Key(),new TestData.Value());
        memory2=buffer2.dispose();
      }
      memoryManager.release(memory2);
    }
    memory=buffer.unbind();
  }
  memoryManager.release(memory);
}
