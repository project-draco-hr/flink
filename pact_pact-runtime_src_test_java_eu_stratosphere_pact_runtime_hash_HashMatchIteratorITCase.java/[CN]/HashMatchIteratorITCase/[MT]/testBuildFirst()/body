{
  try {
    Generator generator1=new Generator(SEED1,500,4096,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    Generator generator2=new Generator(SEED2,500,2048,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TestData.GeneratorIterator input1=new TestData.GeneratorIterator(generator1,INPUT_1_SIZE);
    final TestData.GeneratorIterator input2=new TestData.GeneratorIterator(generator2,INPUT_2_SIZE);
    final Map<TestData.Key,Collection<Match>> expectedMatchesMap=matchValues(collectData(input1),collectData(input2));
    final MatchStub matcher=new MatchRemovingMatcher(expectedMatchesMap);
    final Collector collector=new DiscardingOutputCollector();
    generator1.reset();
    generator2.reset();
    input1.reset();
    input2.reset();
    @SuppressWarnings("unchecked") BuildFirstHashMatchIterator iterator=new BuildFirstHashMatchIterator(input1,input2,new int[]{0},new Class[]{TestData.Key.class},this.memoryManager,ioManager,this.parentTask,MEMORY_SIZE);
    iterator.open();
    while (iterator.callWithNextKey(matcher,collector))     ;
    iterator.close();
    ;
    for (    Entry<TestData.Key,Collection<Match>> entry : expectedMatchesMap.entrySet()) {
      if (!entry.getValue().isEmpty())       Assert.fail("Collection for key " + entry.getKey() + " is not empty");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
