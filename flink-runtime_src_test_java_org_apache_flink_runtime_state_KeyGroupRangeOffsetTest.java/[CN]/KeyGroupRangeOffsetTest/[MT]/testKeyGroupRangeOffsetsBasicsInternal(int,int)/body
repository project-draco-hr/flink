{
  long[] offsets=new long[endKeyGroup - startKeyGroup + 1];
  for (int i=0; i < offsets.length; ++i) {
    offsets[i]=i;
  }
  KeyGroupRangeOffsets keyGroupRange=new KeyGroupRangeOffsets(startKeyGroup,endKeyGroup,offsets);
  KeyGroupRangeOffsets sameButDifferentConstr=new KeyGroupRangeOffsets(KeyGroupRange.of(startKeyGroup,endKeyGroup),offsets);
  Assert.assertEquals(keyGroupRange,sameButDifferentConstr);
  int numberOfKeyGroup=keyGroupRange.getKeyGroupRange().getNumberOfKeyGroups();
  Assert.assertEquals(Math.max(0,endKeyGroup - startKeyGroup + 1),numberOfKeyGroup);
  if (numberOfKeyGroup > 0) {
    Assert.assertEquals(startKeyGroup,keyGroupRange.getKeyGroupRange().getStartKeyGroup());
    Assert.assertEquals(endKeyGroup,keyGroupRange.getKeyGroupRange().getEndKeyGroup());
    int c=startKeyGroup;
    for (    Tuple2<Integer,Long> tuple : keyGroupRange) {
      Assert.assertEquals(c,(int)tuple.f0);
      Assert.assertTrue(keyGroupRange.getKeyGroupRange().contains(tuple.f0));
      Assert.assertEquals((long)c - startKeyGroup,(long)tuple.f1);
      ++c;
    }
    for (int i=startKeyGroup; i <= endKeyGroup; ++i) {
      Assert.assertEquals(i - startKeyGroup,keyGroupRange.getKeyGroupOffset(i));
    }
    int newOffset=42;
    for (int i=startKeyGroup; i <= endKeyGroup; ++i) {
      keyGroupRange.setKeyGroupOffset(i,newOffset);
      ++newOffset;
    }
    for (int i=startKeyGroup; i <= endKeyGroup; ++i) {
      Assert.assertEquals(42 + i - startKeyGroup,keyGroupRange.getKeyGroupOffset(i));
    }
    Assert.assertEquals(endKeyGroup + 1,c);
    Assert.assertFalse(keyGroupRange.getKeyGroupRange().contains(startKeyGroup - 1));
    Assert.assertFalse(keyGroupRange.getKeyGroupRange().contains(endKeyGroup + 1));
  }
 else {
    Assert.assertEquals(KeyGroupRange.EMPTY_KEY_GROUP,keyGroupRange);
  }
}
