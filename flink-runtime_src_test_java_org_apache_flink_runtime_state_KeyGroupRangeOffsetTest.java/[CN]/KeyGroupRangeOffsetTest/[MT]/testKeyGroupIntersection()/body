{
  long[] offsets=new long[9];
  for (int i=0; i < offsets.length; ++i) {
    offsets[i]=i;
  }
  int startKeyGroup=2;
  KeyGroupRangeOffsets keyGroupRangeOffsets=new KeyGroupRangeOffsets(KeyGroupRange.of(startKeyGroup,10),offsets);
  KeyGroupRangeOffsets intersection=keyGroupRangeOffsets.getIntersection(KeyGroupRange.of(3,7));
  KeyGroupRangeOffsets expected=new KeyGroupRangeOffsets(KeyGroupRange.of(3,7),Arrays.copyOfRange(offsets,3 - startKeyGroup,8 - startKeyGroup));
  Assert.assertEquals(expected,intersection);
  Assert.assertEquals(keyGroupRangeOffsets,keyGroupRangeOffsets.getIntersection(keyGroupRangeOffsets.getKeyGroupRange()));
  intersection=keyGroupRangeOffsets.getIntersection(KeyGroupRange.of(11,13));
  Assert.assertEquals(KeyGroupRange.EMPTY_KEY_GROUP,intersection.getKeyGroupRange());
  Assert.assertFalse(intersection.iterator().hasNext());
  intersection=keyGroupRangeOffsets.getIntersection(KeyGroupRange.of(5,13));
  expected=new KeyGroupRangeOffsets(KeyGroupRange.of(5,10),Arrays.copyOfRange(offsets,5 - startKeyGroup,11 - startKeyGroup));
  Assert.assertEquals(expected,intersection);
  intersection=keyGroupRangeOffsets.getIntersection(KeyGroupRange.of(0,2));
  expected=new KeyGroupRangeOffsets(KeyGroupRange.of(2,2),Arrays.copyOfRange(offsets,2 - startKeyGroup,3 - startKeyGroup));
  Assert.assertEquals(intersection,intersection);
}
