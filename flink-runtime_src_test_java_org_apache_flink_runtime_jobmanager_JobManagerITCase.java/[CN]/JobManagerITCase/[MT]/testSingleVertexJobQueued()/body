{
  final int NUM_TASKS=111;
  try {
    final AbstractJobVertex vertex=new AbstractJobVertex("Test Vertex");
    vertex.setParallelism(NUM_TASKS);
    vertex.setInvokableClass(NoOpInvokable.class);
    final JobGraph jobGraph=new JobGraph("Test Job",vertex);
    jobGraph.setAllowQueuedScheduling(true);
    final JobManager jm=startJobManager(10);
    final GlobalBufferPool bp=((LocalInstanceManager)jm.getInstanceManager()).getTaskManagers()[0].getChannelManager().getGlobalBufferPool();
    try {
      JobSubmissionResult result=jm.submitJob(jobGraph);
      if (result.getReturnCode() != AbstractJobResult.ReturnCode.SUCCESS) {
        System.out.println(result.getDescription());
      }
      assertEquals(AbstractJobResult.ReturnCode.SUCCESS,result.getReturnCode());
      ExecutionGraph eg=jm.getCurrentJobs().get(jobGraph.getJobID());
      if (eg != null) {
        eg.waitForJobEnd();
        assertEquals(JobStatus.FINISHED,eg.getState());
      }
 else {
      }
      waitForTaskThreadsToBeTerminated();
      assertEquals(bp.numBuffers(),bp.numAvailableBuffers());
    }
  finally {
      jm.shutdown();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
