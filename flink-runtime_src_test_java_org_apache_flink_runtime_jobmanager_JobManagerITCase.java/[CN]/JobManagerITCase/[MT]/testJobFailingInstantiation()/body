{
  final int NUM_TASKS=200;
  try {
    final AbstractJobVertex sender=new AbstractJobVertex("Sender");
    final AbstractJobVertex receiver=new AbstractJobVertex("Receiver");
    sender.setInvokableClass(InstantiationErrorSender.class);
    receiver.setInvokableClass(Receiver.class);
    sender.setParallelism(NUM_TASKS);
    receiver.setParallelism(NUM_TASKS);
    receiver.connectNewDataSetAsInput(sender,DistributionPattern.POINTWISE);
    final JobGraph jobGraph=new JobGraph("Pointwise Job",sender,receiver);
    final JobManager jm=startJobManager(NUM_TASKS);
    final GlobalBufferPool bp=((LocalInstanceManager)jm.getInstanceManager()).getTaskManagers()[0].getChannelManager().getGlobalBufferPool();
    try {
      assertEquals(NUM_TASKS,jm.getTotalNumberOfRegisteredSlots());
      JobSubmissionResult result=jm.submitJob(jobGraph);
      if (result.getReturnCode() != AbstractJobResult.ReturnCode.SUCCESS) {
        System.out.println(result.getDescription());
      }
      assertEquals(AbstractJobResult.ReturnCode.SUCCESS,result.getReturnCode());
      ExecutionGraph eg=jm.getCurrentJobs().get(jobGraph.getJobID());
      if (eg != null) {
        eg.waitForJobEnd();
        assertEquals(JobStatus.FAILED,eg.getState());
      }
 else {
      }
      waitForTaskThreadsToBeTerminated();
      assertEquals(bp.numBuffers(),bp.numAvailableBuffers());
    }
  finally {
      jm.shutdown();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
