{
  final String exceptionClassName=ExceptionTask.class.getSimpleName();
  File inputFile=null;
  File outputFile=null;
  File jarFile=null;
  JobClient jobClient=null;
  try {
    inputFile=ServerTestUtils.createInputFile(0);
    outputFile=new File(ServerTestUtils.getTempDir() + File.separator + ServerTestUtils.getRandomFilename());
    jarFile=ServerTestUtils.createJarFile(exceptionClassName);
    final JobGraph jg=new JobGraph("Job Graph for Exception Test");
    final JobFileInputVertex i1=new JobFileInputVertex("Input 1",jg);
    i1.setInvokableClass(FileLineReader.class);
    i1.setFilePath(new Path(inputFile.toURI()));
    final JobTaskVertex t1=new JobTaskVertex("Task with Exception",jg);
    t1.setInvokableClass(ExceptionTask.class);
    JobFileOutputVertex o1=new JobFileOutputVertex("Output 1",jg);
    o1.setInvokableClass(FileLineWriter.class);
    o1.setFilePath(new Path(outputFile.toURI()));
    t1.setVertexToShareInstancesWith(i1);
    o1.setVertexToShareInstancesWith(i1);
    i1.connectTo(t1,ChannelType.IN_MEMORY);
    t1.connectTo(o1,ChannelType.IN_MEMORY);
    jg.addJar(new Path(new File(ServerTestUtils.getTempDir() + File.separator + exceptionClassName+ ".jar").toURI()));
    jobClient=new JobClient(jg,configuration,getClass().getClassLoader());
    Logger taskLogger=Logger.getLogger(Task.class);
    taskLogger.setLevel(Level.OFF);
    Logger jmLogger=Logger.getLogger(JobManager.class);
    jmLogger.setLevel(Level.OFF);
    try {
      jobClient.submitJobAndWait();
    }
 catch (    JobExecutionException e) {
      if (e.getMessage() == null) {
        fail("JobExecutionException does not contain an error message");
      }
      if (!e.getMessage().contains(ExceptionTask.ERROR_MESSAGE)) {
        fail("JobExecutionException does not contain the expected error message");
      }
      return;
    }
    fail("Expected exception but did not receive it");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    if (inputFile != null) {
      inputFile.delete();
    }
    if (outputFile != null) {
      outputFile.delete();
    }
    if (jarFile != null) {
      jarFile.delete();
    }
    if (jobClient != null) {
      jobClient.close();
    }
  }
}
