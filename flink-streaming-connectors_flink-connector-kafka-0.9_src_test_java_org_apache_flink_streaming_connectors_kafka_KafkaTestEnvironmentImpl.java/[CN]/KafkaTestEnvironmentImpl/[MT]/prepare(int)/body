{
  File tempDir=new File(System.getProperty("java.io.tmpdir"));
  tmpZkDir=new File(tempDir,"kafkaITcase-zk-dir-" + (UUID.randomUUID().toString()));
  assertTrue("cannot create zookeeper temp dir",tmpZkDir.mkdirs());
  tmpKafkaParent=new File(tempDir,"kafkaITcase-kafka-dir*" + (UUID.randomUUID().toString()));
  assertTrue("cannot create kafka temp dir",tmpKafkaParent.mkdirs());
  tmpKafkaDirs=new ArrayList<>(numKafkaServers);
  for (int i=0; i < numKafkaServers; i++) {
    File tmpDir=new File(tmpKafkaParent,"server-" + i);
    assertTrue("cannot create kafka temp dir",tmpDir.mkdir());
    tmpKafkaDirs.add(tmpDir);
  }
  zookeeper=null;
  brokers=null;
  try {
    LOG.info("Starting Zookeeper");
    zookeeper=new TestingServer(-1,tmpZkDir);
    zookeeperConnectionString=zookeeper.getConnectString();
    LOG.info("Starting KafkaServer");
    brokers=new ArrayList<>(numKafkaServers);
    for (int i=0; i < numKafkaServers; i++) {
      brokers.add(getKafkaServer(i,tmpKafkaDirs.get(i),KafkaTestEnvironment.KAFKA_HOST,zookeeperConnectionString));
      SocketServer socketServer=brokers.get(i).socketServer();
      brokerConnectionString+=hostAndPortToUrlString(KafkaTestEnvironment.KAFKA_HOST,brokers.get(i).socketServer().boundPort(SecurityProtocol.PLAINTEXT)) + ",";
    }
    LOG.info("ZK and KafkaServer started.");
  }
 catch (  Throwable t) {
    t.printStackTrace();
    fail("Test setup failed: " + t.getMessage());
  }
  standardProps=new Properties();
  standardProps.setProperty("zookeeper.connect",zookeeperConnectionString);
  standardProps.setProperty("bootstrap.servers",brokerConnectionString);
  standardProps.setProperty("group.id","flink-tests");
  standardProps.setProperty("auto.commit.enable","false");
  standardProps.setProperty("zookeeper.session.timeout.ms","12000");
  standardProps.setProperty("zookeeper.connection.timeout.ms","20000");
  standardProps.setProperty("auto.offset.reset","earliest");
  standardProps.setProperty("fetch.message.max.bytes","256");
}
