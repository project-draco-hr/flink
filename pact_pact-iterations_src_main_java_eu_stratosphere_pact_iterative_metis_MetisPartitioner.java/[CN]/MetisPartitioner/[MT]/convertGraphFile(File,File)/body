{
  RandomAccessFile file=null;
  FileChannel channel=null;
  BufferedWriter writer=new BufferedWriter(new FileWriter(outputFile));
  try {
    file=new RandomAccessFile(graphFile,"r");
    channel=file.getChannel();
    final ByteBuffer buffer=ByteBuffer.allocateDirect(READ_BUFFER_CAPACITY);
    int current=0;
    int first=0;
    while (channel.read(buffer) != -1) {
      buffer.flip();
      while (buffer.hasRemaining()) {
        int next=buffer.get();
        if (next == '\n') {
          Integer firstI=hashMapping.get(first);
          Integer secondI=hashMapping.get(current);
          writer.write(firstI + "," + secondI+ "\n");
          current=0;
        }
 else         if (next == ',') {
          first=current;
          current=0;
        }
 else {
          current*=10;
          current+=(next - '0');
        }
      }
      buffer.clear();
    }
  }
 catch (  IOException ioex) {
    System.err.println("Error reading the input into the hashtable: " + ioex.getMessage());
    ioex.printStackTrace(System.err);
    return;
  }
 finally {
    try {
      if (channel != null) {
        channel.close();
        channel=null;
      }
      if (file != null) {
        file.close();
        file=null;
      }
    }
 catch (    IOException ioex) {
      System.err.println("Error closing the input file: " + ioex.getMessage());
      ioex.printStackTrace(System.err);
      return;
    }
  }
  writer.close();
}
