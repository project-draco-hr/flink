{
  int keyCnt=100;
  int valCnt=20;
  super.initEnvironment(1);
  super.addInput(new RegularlyGeneratedInputGenerator(keyCnt,valCnt,true));
  super.addOutput(outList);
  ReduceTask testTask=new ReduceTask();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.NONE);
  super.getTaskConfig().setMemorySize(0);
  super.getTaskConfig().setNumFilehandles(4);
  super.getTaskConfig().setLocalStrategyKeyTypes(0,new int[]{0});
  super.getTaskConfig().setLocalStrategyKeyTypes(new Class[]{PactInteger.class});
  super.registerTask(testTask,MockReduceStub.class);
  try {
    testTask.invoke();
  }
 catch (  Exception e) {
    LOG.debug(e);
    Assert.fail("Invoke method caused exception.");
  }
  Assert.assertTrue("Resultset size was " + outList.size() + ". Expected was "+ keyCnt,outList.size() == keyCnt);
  for (  PactRecord record : outList) {
    Assert.assertTrue("Incorrect result",record.getField(1,PactInteger.class).getValue() == valCnt - record.getField(0,PactInteger.class).getValue());
  }
  outList.clear();
}
