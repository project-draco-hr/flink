{
  int[] inKeys={5,4,5,5,2,3,3,2,5,4,1,4,5,3,4};
  int[] inVals={4,1,2,5,1,2,1,2,3,3,1,2,1,3,4};
  super.initEnvironment(3 * 1024 * 1024);
  super.addInput(super.createInputIterator(inKeys,inVals));
  super.addOutput(outList);
  ReduceTask testTask=new ReduceTask();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.SORT);
  super.getTaskConfig().setNumSortBuffer(2);
  super.getTaskConfig().setSortBufferSize(1);
  super.getTaskConfig().setMergeFactor(4);
  super.getTaskConfig().setIOBufferSize(1);
  super.registerTask(testTask,MockReduceStub.class);
  try {
    testTask.invoke();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Assert.assertTrue("Resultset size was " + outList.size() + ". Expected was 5.",outList.size() == 5);
  for (  KeyValuePair<PactInteger,PactInteger> pair : outList) {
    Assert.assertTrue("Incorrect result",computeSum(pair.getKey().getValue()) == pair.getValue().getValue());
  }
  outList.clear();
  try {
    super.getMemoryManager().allocate(3 * 1024 * 1024);
  }
 catch (  MemoryAllocationException e) {
    Assert.fail("MemoryManager not reset");
  }
}
