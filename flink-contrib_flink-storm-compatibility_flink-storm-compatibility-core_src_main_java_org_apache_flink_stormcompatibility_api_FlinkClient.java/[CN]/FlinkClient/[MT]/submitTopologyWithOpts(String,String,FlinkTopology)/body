{
  if (this.getTopologyJobId(name) != null) {
    throw new AlreadyAliveException();
  }
  final File uploadedJarFile=new File(uploadedJarLocation);
  try {
    JobWithJars.checkJarFile(uploadedJarFile);
  }
 catch (  final IOException e) {
    throw new RuntimeException("Problem with jar file " + uploadedJarFile.getAbsolutePath(),e);
  }
  if (this.conf != null) {
    topology.getConfig().setGlobalJobParameters(new StormConfig(this.conf));
  }
  final JobGraph jobGraph=topology.getStreamGraph().getJobGraph(name);
  jobGraph.addJar(new Path(uploadedJarFile.getAbsolutePath()));
  final Configuration configuration=jobGraph.getJobConfiguration();
  configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,jobManagerHost);
  configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,jobManagerPort);
  final Client client;
  try {
    client=new Client(configuration);
  }
 catch (  IOException e) {
    throw new RuntimeException("Could not establish a connection to the job manager",e);
  }
  try {
    ClassLoader classLoader=JobWithJars.buildUserCodeClassLoader(Lists.newArrayList(uploadedJarFile),this.getClass().getClassLoader());
    client.runDetached(jobGraph,classLoader);
  }
 catch (  final ProgramInvocationException e) {
    throw new RuntimeException("Cannot execute job due to ProgramInvocationException",e);
  }
}
