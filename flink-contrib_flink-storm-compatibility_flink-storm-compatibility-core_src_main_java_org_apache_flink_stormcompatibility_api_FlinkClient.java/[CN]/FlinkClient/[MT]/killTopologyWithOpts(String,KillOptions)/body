{
  final JobID jobId=this.getTopologyJobId(name);
  if (jobId == null) {
    throw new NotAliveException();
  }
  try {
    final ActorRef jobManager=this.getJobManager();
    if (options != null) {
      try {
        Thread.sleep(1000 * options.get_wait_secs());
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    final FiniteDuration askTimeout=this.getTimeout();
    final Future<Object> response=Patterns.ask(jobManager,new CancelJob(jobId),new Timeout(askTimeout));
    try {
      Await.result(response,askTimeout);
    }
 catch (    final Exception e) {
      throw new RuntimeException("Killing topology " + name + " with Flink job ID "+ jobId+ " failed",e);
    }
  }
 catch (  final IOException e) {
    throw new RuntimeException("Could not connect to Flink JobManager with address " + this.jobManagerHost + ":"+ this.jobManagerPort,e);
  }
}
