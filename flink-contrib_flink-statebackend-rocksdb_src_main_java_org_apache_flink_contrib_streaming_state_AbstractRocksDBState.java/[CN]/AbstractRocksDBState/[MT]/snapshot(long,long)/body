{
  final File localBackupPath=new File(basePath,"local-chk-" + checkpointId);
  final URI backupUri=new URI(checkpointPath + "/chk-" + checkpointId);
  if (!localBackupPath.exists()) {
    if (!localBackupPath.mkdirs()) {
      throw new RuntimeException("Could not create local backup path " + localBackupPath);
    }
  }
  long startTime=System.currentTimeMillis();
  BackupableDBOptions backupOptions=new BackupableDBOptions(localBackupPath.getAbsolutePath());
  backupOptions.setBackupLogFiles(false);
  backupOptions.setSync(false);
  try (BackupEngine backupEngine=BackupEngine.open(Env.getDefault(),backupOptions)){
    db.flush(new FlushOptions().setWaitForFlush(true));
    backupEngine.createNewBackup(db);
  }
   long endTime=System.currentTimeMillis();
  LOG.info("RocksDB (" + rocksDbPath + ") backup (synchronous part) took "+ (endTime - startTime)+ " ms.");
  return new AsyncRocksDBSnapshot<>(localBackupPath,backupUri,checkpointId,this);
}
