{
  if (!triggerResult.isFire() && !triggerResult.isPurge()) {
    return;
  }
  ListState<StreamRecord<IN>> windowState;
  MergingWindowSet<W> mergingWindows=null;
  if (windowAssigner instanceof MergingWindowAssigner) {
    mergingWindows=getMergingWindowSet();
    W stateWindow=mergingWindows.getStateWindow(window);
    windowState=getPartitionedState(stateWindow,windowSerializer,windowStateDescriptor);
  }
 else {
    windowState=getPartitionedState(window,windowSerializer,windowStateDescriptor);
  }
  if (triggerResult.isFire()) {
    timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp());
    Iterable<StreamRecord<IN>> contents=windowState.get();
    int toEvict=evictor.evict((Iterable)contents,Iterables.size(contents),context.window);
    FluentIterable<IN> projectedContents=FluentIterable.from(contents).skip(toEvict).transform(new Function<StreamRecord<IN>,IN>(){
      @Override public IN apply(      StreamRecord<IN> input){
        return input.getValue();
      }
    }
);
    userFunction.apply(context.key,context.window,projectedContents,timestampedCollector);
  }
  if (triggerResult.isPurge()) {
    windowState.clear();
    if (mergingWindows != null) {
      mergingWindows.retireWindow(window);
    }
    context.clear();
  }
}
