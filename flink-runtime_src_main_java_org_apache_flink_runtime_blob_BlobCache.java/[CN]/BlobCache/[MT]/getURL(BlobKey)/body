{
  if (requiredBlob == null) {
    throw new IllegalArgumentException("BLOB key cannot be null.");
  }
  final File localJarFile=BlobUtils.getStorageLocation(storageDir,requiredBlob);
  if (!localJarFile.exists()) {
    final byte[] buf=new byte[BlobServerProtocol.BUFFER_SIZE];
    int attempt=0;
    while (true) {
      if (attempt == 0) {
        LOG.info("Downloading {} from {}",requiredBlob,serverAddress);
      }
 else {
        LOG.info("Downloading {} from {} (retry {})",requiredBlob,serverAddress,attempt);
      }
      try {
        BlobClient bc=null;
        InputStream is=null;
        OutputStream os=null;
        try {
          bc=new BlobClient(serverAddress);
          is=bc.get(requiredBlob);
          os=new FileOutputStream(localJarFile);
          while (true) {
            final int read=is.read(buf);
            if (read < 0) {
              break;
            }
            os.write(buf,0,read);
          }
          os.close();
          os=null;
          is.close();
          is=null;
          bc.close();
          bc=null;
          break;
        }
 catch (        Throwable t) {
          closeSilently(os);
          closeSilently(is);
          closeSilently(bc);
          if (t instanceof IOException) {
            throw (IOException)t;
          }
 else {
            throw new IOException(t.getMessage(),t);
          }
        }
      }
 catch (      IOException e) {
        String message="Failed to fetch BLOB " + requiredBlob + "  from "+ serverAddress+ '.';
        if (attempt < numFetchRetries) {
          attempt++;
          if (LOG.isDebugEnabled()) {
            LOG.debug(message + " Retrying...",e);
          }
 else {
            LOG.error(message + " Retrying...");
          }
        }
 else {
          LOG.error(message + " No retries left.",e);
          throw new IOException(message,e);
        }
      }
    }
  }
  return localJarFile.toURI().toURL();
}
