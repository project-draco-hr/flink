{
  final int numVertices=10;
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Vertex<Long,Double>> pages=env.generateSequence(1,numVertices).map(new MapFunction<Long,Vertex<Long,Double>>(){
    @Override public Vertex<Long,Double> map(    Long l) throws Exception {
      return new Vertex<Long,Double>(l,1.0 / numVertices);
    }
  }
);
  DataSet<Edge<Long,Double>> links=env.generateSequence(1,numVertices).flatMap(new FlatMapFunction<Long,Edge<Long,Double>>(){
    @Override public void flatMap(    Long key,    Collector<Edge<Long,Double>> out) throws Exception {
      int numOutEdges=(int)(Math.random() * (numVertices / 2));
      for (int i=0; i < numOutEdges; i++) {
        long target=(long)(Math.random() * numVertices) + 1;
        out.collect(new Edge<Long,Double>(key,target,1.0 / numOutEdges));
      }
    }
  }
);
  Graph<Long,Double,Double> network=new Graph<Long,Double,Double>(pages,links,env);
  DataSet<Vertex<Long,Double>> verticesWithRanks=GraphLib.pageRank(network,numVertices,BETA,60).getVertices();
  verticesWithRanks.print();
  env.execute();
}
