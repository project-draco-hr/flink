{
  try {
    TestData.TupleGenerator generator1=new TestData.TupleGenerator(SEED1,1000,4096,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    TestData.TupleGenerator generator2=new TestData.TupleGenerator(SEED2,500,2048,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TestData.TupleGeneratorIterator input1=new TestData.TupleGeneratorIterator(generator1,INPUT_1_SIZE);
    final TestData.TupleGeneratorIterator input2=new TestData.TupleGeneratorIterator(generator2,INPUT_2_SIZE);
    final Map<Integer,Collection<TupleMatch>> expectedMatchesMap=leftOuterJoinTuples(collectTupleData(input1),collectTupleData(input2));
    final FlatJoinFunction matcher=new TupleMatchRemovingJoin(expectedMatchesMap);
    final Collector<Tuple2<Integer,String>> collector=new DiscardingOutputCollector<>();
    generator1.reset();
    generator2.reset();
    input1.reset();
    input2.reset();
    ReusingBuildSecondHashJoinIterator<Tuple2<Integer,String>,Tuple2<Integer,String>,Tuple2<Integer,String>> iterator=new ReusingBuildSecondHashJoinIterator<>(input1,input2,this.recordSerializer,this.record1Comparator,this.recordSerializer,this.record2Comparator,this.recordPairComparator,this.memoryManager,ioManager,this.parentTask,1.0,true,false);
    iterator.open();
    while (iterator.callWithNextKey(matcher,collector))     ;
    iterator.close();
    for (    Entry<Integer,Collection<TupleMatch>> entry : expectedMatchesMap.entrySet()) {
      if (!entry.getValue().isEmpty()) {
        Assert.fail("Collection for key " + entry.getKey() + " is not empty");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
