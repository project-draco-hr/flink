{
  Assert.assertFalse(typeInfo.isBasicType());
  Assert.assertFalse(typeInfo.isTupleType());
  Assert.assertEquals(9,typeInfo.getTotalFields());
  Assert.assertTrue(typeInfo instanceof PojoTypeInfo);
  PojoTypeInfo<?> pojoType=(PojoTypeInfo<?>)typeInfo;
  List<FlatFieldDescriptor> ffd=new ArrayList<FlatFieldDescriptor>();
  String[] fields={"count","complex.date","complex.hadoopCitizen","complex.nothing","complex.someFloat","complex.someNumber","complex.word.f0","complex.word.f1","complex.word.f2"};
  int[] positions={8,0,1,2,3,4,5,6,7};
  Assert.assertEquals(fields.length,positions.length);
  for (int i=0; i < fields.length; i++) {
    pojoType.getKey(fields[i],0,ffd);
    Assert.assertEquals("Too many keys returned",1,ffd.size());
    Assert.assertEquals("position of field " + fields[i] + " wrong",positions[i],ffd.get(0).getPosition());
    ffd.clear();
  }
  pojoType.getKey("complex.word.*",0,ffd);
  Assert.assertEquals(3,ffd.size());
  for (  FlatFieldDescriptor ffdE : ffd) {
    final int pos=ffdE.getPosition();
    Assert.assertTrue(pos <= 7);
    Assert.assertTrue(5 <= pos);
    if (pos == 5) {
      Assert.assertEquals(Long.class,ffdE.getType().getTypeClass());
    }
    if (pos == 6) {
      Assert.assertEquals(Long.class,ffdE.getType().getTypeClass());
    }
    if (pos == 7) {
      Assert.assertEquals(String.class,ffdE.getType().getTypeClass());
    }
  }
  ffd.clear();
  pojoType.getKey("complex.word._",0,ffd);
  Assert.assertEquals(3,ffd.size());
  ffd.clear();
  pojoType.getKey("complex.*",0,ffd);
  Assert.assertEquals(8,ffd.size());
  for (  FlatFieldDescriptor ffdE : ffd) {
    final int pos=ffdE.getPosition();
    Assert.assertTrue(ffdE.getPosition() <= 7);
    Assert.assertTrue(0 <= ffdE.getPosition());
    if (pos == 0) {
      Assert.assertEquals(Date.class,ffdE.getType().getTypeClass());
    }
    if (pos == 1) {
      Assert.assertEquals(MyWritable.class,ffdE.getType().getTypeClass());
    }
    if (pos == 2) {
      Assert.assertEquals(Object.class,ffdE.getType().getTypeClass());
    }
    if (pos == 3) {
      Assert.assertEquals(Float.class,ffdE.getType().getTypeClass());
    }
    if (pos == 4) {
      Assert.assertEquals(Integer.class,ffdE.getType().getTypeClass());
    }
    if (pos == 5) {
      Assert.assertEquals(Long.class,ffdE.getType().getTypeClass());
    }
    if (pos == 6) {
      Assert.assertEquals(Long.class,ffdE.getType().getTypeClass());
    }
    if (pos == 7) {
      Assert.assertEquals(String.class,ffdE.getType().getTypeClass());
    }
  }
  ffd.clear();
  pojoType.getKey("*",0,ffd);
  Assert.assertEquals(9,ffd.size());
  for (  FlatFieldDescriptor ffdE : ffd) {
    Assert.assertTrue(ffdE.getPosition() <= 8);
    Assert.assertTrue(0 <= ffdE.getPosition());
    if (ffdE.getPosition() == 8) {
      Assert.assertEquals(Integer.class,ffdE.getType().getTypeClass());
    }
  }
  ffd.clear();
  TypeInformation<?> typeComplexNested=pojoType.getTypeAt(0);
  Assert.assertTrue(typeComplexNested instanceof PojoTypeInfo);
  Assert.assertEquals(6,typeComplexNested.getArity());
  Assert.assertEquals(8,typeComplexNested.getTotalFields());
  PojoTypeInfo<?> pojoTypeComplexNested=(PojoTypeInfo<?>)typeComplexNested;
  boolean dateSeen=false, intSeen=false, floatSeen=false, tupleSeen=false, objectSeen=false, writableSeen=false;
  for (int i=0; i < pojoTypeComplexNested.getArity(); i++) {
    PojoField field=pojoTypeComplexNested.getPojoFieldAt(i);
    String name=field.field.getName();
    if (name.equals("date")) {
      if (dateSeen) {
        Assert.fail("already seen");
      }
      dateSeen=true;
      Assert.assertEquals(new GenericTypeInfo<Date>(Date.class),field.type);
      Assert.assertEquals(Date.class,field.type.getTypeClass());
    }
 else     if (name.equals("someNumber")) {
      if (intSeen) {
        Assert.fail("already seen");
      }
      intSeen=true;
      Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO,field.type);
      Assert.assertEquals(Integer.class,field.type.getTypeClass());
    }
 else     if (name.equals("someFloat")) {
      if (floatSeen) {
        Assert.fail("already seen");
      }
      floatSeen=true;
      Assert.assertEquals(BasicTypeInfo.FLOAT_TYPE_INFO,field.type);
      Assert.assertEquals(Float.class,field.type.getTypeClass());
    }
 else     if (name.equals("word")) {
      if (tupleSeen) {
        Assert.fail("already seen");
      }
      tupleSeen=true;
      Assert.assertTrue(field.type instanceof TupleTypeInfo<?>);
      Assert.assertEquals(Tuple3.class,field.type.getTypeClass());
      TupleTypeInfo<?> tupleTypeFromComplexNested=(TupleTypeInfo<?>)field.type;
      Assert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO,tupleTypeFromComplexNested.getTypeAt(0));
      Assert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO,tupleTypeFromComplexNested.getTypeAt(1));
      Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO,tupleTypeFromComplexNested.getTypeAt(2));
    }
 else     if (name.equals("nothing")) {
      if (objectSeen) {
        Assert.fail("already seen");
      }
      objectSeen=true;
      Assert.assertEquals(new GenericTypeInfo<Object>(Object.class),field.type);
      Assert.assertEquals(Object.class,field.type.getTypeClass());
    }
 else     if (name.equals("hadoopCitizen")) {
      if (writableSeen) {
        Assert.fail("already seen");
      }
      writableSeen=true;
      Assert.assertEquals(new WritableTypeInfo<MyWritable>(MyWritable.class),field.type);
      Assert.assertEquals(MyWritable.class,field.type.getTypeClass());
    }
 else {
      Assert.fail("field " + field + " is not expected");
    }
  }
  Assert.assertTrue("Field was not present",dateSeen);
  Assert.assertTrue("Field was not present",intSeen);
  Assert.assertTrue("Field was not present",floatSeen);
  Assert.assertTrue("Field was not present",tupleSeen);
  Assert.assertTrue("Field was not present",objectSeen);
  Assert.assertTrue("Field was not present",writableSeen);
  TypeInformation<?> typeAtOne=pojoType.getTypeAt(1);
  Assert.assertTrue(typeAtOne instanceof BasicTypeInfo);
  Assert.assertEquals(typeInfo.getTypeClass(),WC.class);
  Assert.assertEquals(typeInfo.getArity(),2);
}
