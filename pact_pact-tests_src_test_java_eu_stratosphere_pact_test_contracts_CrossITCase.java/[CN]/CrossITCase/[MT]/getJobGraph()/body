{
  String pathPrefix=getFilesystemProvider().getURIPrefix() + getFilesystemProvider().getTempDirPath();
  FileDataSourceContract<PactString,PactString> input_left=new FileDataSourceContract<PactString,PactString>(CrossTestInFormat.class,pathPrefix + "/cross_left");
  input_left.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  input_left.setDegreeOfParallelism(config.getInteger("CrossTest#NoSubtasks",1));
  FileDataSourceContract<PactString,PactString> input_right=new FileDataSourceContract<PactString,PactString>(CrossTestInFormat.class,pathPrefix + "/cross_right");
  input_right.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  input_right.setDegreeOfParallelism(config.getInteger("CrossTest#NoSubtasks",1));
  CrossContract<PactString,PactString,PactString,PactString,PactString,PactInteger> testCross=new CrossContract<PactString,PactString,PactString,PactString,PactString,PactInteger>(TestCross.class);
  testCross.setDegreeOfParallelism(config.getInteger("CrossTest#NoSubtasks",1));
  testCross.getParameters().setString(PactCompiler.HINT_LOCAL_STRATEGY,config.getString("CrossTest#LocalStrategy",""));
  if (config.getString("CrossTest#ShipStrategy","").equals("BROADCAST_FIRST")) {
    testCross.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY_FIRST_INPUT,PactCompiler.HINT_SHIP_STRATEGY_BROADCAST);
    testCross.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY_SECOND_INPUT,PactCompiler.HINT_SHIP_STRATEGY_FORWARD);
  }
 else   if (config.getString("CrossTest#ShipStrategy","").equals("BROADCAST_SECOND")) {
    testCross.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY_FIRST_INPUT,PactCompiler.HINT_SHIP_STRATEGY_BROADCAST);
    testCross.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY_SECOND_INPUT,PactCompiler.HINT_SHIP_STRATEGY_FORWARD);
  }
 else {
    testCross.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY,config.getString("CrossTest#ShipStrategy",""));
  }
  FileDataSinkContract<PactString,PactInteger> output=new FileDataSinkContract<PactString,PactInteger>(CrossTestOutFormat.class,pathPrefix + "/result.txt");
  output.setDegreeOfParallelism(1);
  output.setInput(testCross);
  testCross.addFirstInput(input_left);
  testCross.addSecondInput(input_right);
  Plan plan=new Plan(output);
  PactCompiler pc=new PactCompiler();
  OptimizedPlan op=pc.compile(plan);
  JobGraphGenerator jgg=new JobGraphGenerator();
  return jgg.compileJobGraph(op);
}
