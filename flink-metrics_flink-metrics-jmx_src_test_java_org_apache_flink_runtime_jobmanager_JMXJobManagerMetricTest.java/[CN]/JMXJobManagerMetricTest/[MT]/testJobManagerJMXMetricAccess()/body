{
  Deadline deadline=new FiniteDuration(2,TimeUnit.MINUTES).fromNow();
  Configuration flinkConfiguration=new Configuration();
  flinkConfiguration.setString(ConfigConstants.METRICS_REPORTERS_LIST,"test");
  flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,JMXReporter.class.getName());
  flinkConfiguration.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port","9060-9075");
  flinkConfiguration.setString(ConfigConstants.METRICS_SCOPE_NAMING_JM_JOB,"jobmanager.<job_name>");
  TestingCluster flink=new TestingCluster(flinkConfiguration);
  try {
    flink.start();
    JobVertex sourceJobVertex=new JobVertex("Source");
    sourceJobVertex.setInvokableClass(BlockingInvokable.class);
    JobGraph jobGraph=new JobGraph("TestingJob",sourceJobVertex);
    jobGraph.setSnapshotSettings(new JobSnapshottingSettings(Collections.<JobVertexID>emptyList(),Collections.<JobVertexID>emptyList(),Collections.<JobVertexID>emptyList(),500,500,50,5));
    flink.waitForActorsToBeAlive();
    flink.submitJobDetached(jobGraph);
    Future<Object> jobRunning=flink.getLeaderGateway(deadline.timeLeft()).ask(new TestingJobManagerMessages.WaitForAllVerticesToBeRunning(jobGraph.getJobID()),deadline.timeLeft());
    Await.ready(jobRunning,deadline.timeLeft());
    MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
    ObjectName objectName1=new ObjectName("org.apache.flink.metrics:key0=jobmanager,key1=TestingJob,name=lastCheckpointSize");
    assertEquals(-1L,mBeanServer.getAttribute(objectName1,"Value"));
    Future<Object> jobFinished=flink.getLeaderGateway(deadline.timeLeft()).ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()),deadline.timeLeft());
    BlockingInvokable.unblock();
    Await.ready(jobFinished,deadline.timeLeft());
  }
  finally {
    flink.stop();
  }
}
