{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  @SuppressWarnings("unchecked") List<Edge<Long,Long>> edges1=new ArrayList<>();
  edges1.add(new Edge<>(1L,3L,12L));
  edges1.add(new Edge<>(1L,3L,13L));
  edges1.add(new Edge<>(1L,3L,13L));
  edges1.add(new Edge<>(1L,3L,13L));
  edges1.add(new Edge<>(1L,3L,14L));
  @SuppressWarnings("unchecked") List<Edge<Long,Long>> edges2=new ArrayList<>();
  edges2.add(new Edge<>(1L,3L,13L));
  edges2.add(new Edge<>(1L,3L,13L));
  edges2.add(new Edge<>(1L,3L,14L));
  Graph<Long,NullValue,Long> graph1=Graph.fromCollection(edges1,env);
  Graph<Long,NullValue,Long> graph2=Graph.fromCollection(edges2,env);
  Graph<Long,NullValue,Long> intersect=graph1.intersect(graph2,false);
  List<Vertex<Long,NullValue>> vertices=new ArrayList<>();
  List<Edge<Long,Long>> edges=new ArrayList<>();
  intersect.getVertices().output(new LocalCollectionOutputFormat<>(vertices));
  intersect.getEdges().output(new LocalCollectionOutputFormat<>(edges));
  env.execute();
  String expectedVertices="1,(null)\n" + "3,(null)\n";
  String expectedEdges="1,3,13\n" + "1,3,13\n" + "1,3,13\n"+ "1,3,13\n"+ "1,3,14\n"+ "1,3,14";
  compareResultAsTuples(vertices,expectedVertices);
  compareResultAsTuples(edges,expectedEdges);
}
