{
  try {
    final int bbCapacity=pageSize / 10;
    final int[] validOffsets={0,1,pageSize / 10 * 9};
    final int[] invalidOffsets={-1,pageSize + 1,-pageSize,Integer.MAX_VALUE,Integer.MIN_VALUE};
    final int[] validLengths={0,1,bbCapacity,pageSize};
    final int[] invalidLengths={-1,-pageSize,Integer.MAX_VALUE,Integer.MIN_VALUE};
    final MemorySegment seg=createSegment(pageSize);
    for (    ByteBuffer bb : new ByteBuffer[]{ByteBuffer.allocate(bbCapacity),ByteBuffer.allocateDirect(bbCapacity)}) {
      for (      int off : validOffsets) {
        for (        int len : invalidLengths) {
          try {
            seg.put(off,bb,len);
            fail("should fail with an IndexOutOfBoundsException");
          }
 catch (          IndexOutOfBoundsException|BufferUnderflowException ignored) {
          }
          try {
            seg.get(off,bb,len);
            fail("should fail with an IndexOutOfBoundsException");
          }
 catch (          IndexOutOfBoundsException|BufferOverflowException ignored) {
          }
          assertEquals(0,bb.position());
          assertEquals(bb.capacity(),bb.limit());
        }
      }
      for (      int off : invalidOffsets) {
        for (        int len : validLengths) {
          try {
            seg.put(off,bb,len);
            fail("should fail with an IndexOutOfBoundsException");
          }
 catch (          IndexOutOfBoundsException|BufferUnderflowException ignored) {
          }
          try {
            seg.get(off,bb,len);
            fail("should fail with an IndexOutOfBoundsException");
          }
 catch (          IndexOutOfBoundsException|BufferOverflowException ignored) {
          }
          assertEquals(0,bb.position());
          assertEquals(bb.capacity(),bb.limit());
        }
      }
      for (      int off : validOffsets) {
        for (        int len : validLengths) {
          if (off + len > pageSize) {
            try {
              seg.put(off,bb,len);
              fail("should fail with an IndexOutOfBoundsException");
            }
 catch (            IndexOutOfBoundsException|BufferUnderflowException ignored) {
            }
            try {
              seg.get(off,bb,len);
              fail("should fail with an IndexOutOfBoundsException");
            }
 catch (            IndexOutOfBoundsException|BufferOverflowException ignored) {
            }
            assertEquals(0,bb.position());
            assertEquals(bb.capacity(),bb.limit());
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
