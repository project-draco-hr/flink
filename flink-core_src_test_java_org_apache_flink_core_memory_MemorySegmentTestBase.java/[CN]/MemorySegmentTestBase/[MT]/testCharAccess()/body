{
  try {
    final MemorySegment segment=createSegment(pageSize);
    try {
      segment.putChar(-1,'a');
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putChar(pageSize,'a');
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putChar(Integer.MIN_VALUE,'a');
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putChar(Integer.MAX_VALUE,'a');
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putChar(Integer.MAX_VALUE - 1,'a');
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getChar(-1);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getChar(pageSize);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getChar(Integer.MIN_VALUE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getChar(Integer.MAX_VALUE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getChar(Integer.MAX_VALUE - 1);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    long seed=random.nextLong();
    random.setSeed(seed);
    for (int i=0; i <= pageSize - 2; i+=2) {
      segment.putChar(i,(char)(random.nextInt(Character.MAX_VALUE)));
    }
    random.setSeed(seed);
    for (int i=0; i <= pageSize - 2; i+=2) {
      assertEquals((char)(random.nextInt(Character.MAX_VALUE)),segment.getChar(i));
    }
    random.setSeed(seed);
    boolean[] occupied=new boolean[pageSize];
    for (int i=0; i < 1000; i++) {
      int pos=random.nextInt(pageSize - 1);
      if (occupied[pos] || occupied[pos + 1]) {
        continue;
      }
 else {
        occupied[pos]=true;
        occupied[pos + 1]=true;
      }
      segment.putChar(pos,(char)(random.nextInt(Character.MAX_VALUE)));
    }
    random.setSeed(seed);
    occupied=new boolean[pageSize];
    for (int i=0; i < 1000; i++) {
      int pos=random.nextInt(pageSize - 1);
      if (occupied[pos] || occupied[pos + 1]) {
        continue;
      }
 else {
        occupied[pos]=true;
        occupied[pos + 1]=true;
      }
      assertEquals((char)(random.nextInt(Character.MAX_VALUE)),segment.getChar(pos));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
