{
  try {
{
      final MemorySegment segment=createSegment(pageSize);
      long seed=random.nextLong();
      random.setSeed(seed);
      byte[] src=new byte[pageSize / 8];
      for (int i=0; i < 8; i++) {
        random.nextBytes(src);
        segment.put(i * (pageSize / 8),src);
      }
      random.setSeed(seed);
      byte[] expected=new byte[pageSize / 8];
      byte[] actual=new byte[pageSize / 8];
      for (int i=0; i < 8; i++) {
        random.nextBytes(expected);
        segment.get(i * (pageSize / 8),actual);
        assertArrayEquals(expected,actual);
      }
    }
{
      final MemorySegment segment=createSegment(pageSize);
      byte[] expected=new byte[pageSize];
      random.nextBytes(expected);
      for (int i=0; i < 16; i++) {
        segment.put(i * (pageSize / 16),expected,i * (pageSize / 16),pageSize / 16);
      }
      byte[] actual=new byte[pageSize];
      for (int i=0; i < 16; i++) {
        segment.get(i * (pageSize / 16),actual,i * (pageSize / 16),pageSize / 16);
      }
      assertArrayEquals(expected,actual);
    }
{
      final MemorySegment segment=createSegment(pageSize);
      byte[] expected=new byte[pageSize];
      for (int i=0; i < 200; i++) {
        int numBytes=random.nextInt(pageSize - 10) + 1;
        int pos=random.nextInt(pageSize - numBytes + 1);
        byte[] data=new byte[(random.nextInt(3) + 1) * numBytes];
        int dataStartPos=random.nextInt(data.length - numBytes + 1);
        random.nextBytes(data);
        System.arraycopy(data,dataStartPos,expected,pos,numBytes);
        segment.put(pos,data,dataStartPos,numBytes);
      }
      byte[] validation=new byte[pageSize];
      segment.get(0,validation);
      assertArrayEquals(expected,validation);
    }
{
      final MemorySegment segment=createSegment(pageSize);
      byte[] contents=new byte[pageSize];
      random.nextBytes(contents);
      segment.put(0,contents);
      for (int i=0; i < 200; i++) {
        int numBytes=random.nextInt(pageSize / 8) + 1;
        int pos=random.nextInt(pageSize - numBytes + 1);
        byte[] data=new byte[(random.nextInt(3) + 1) * numBytes];
        int dataStartPos=random.nextInt(data.length - numBytes + 1);
        segment.get(pos,data,dataStartPos,numBytes);
        byte[] expected=Arrays.copyOfRange(contents,pos,pos + numBytes);
        byte[] validation=Arrays.copyOfRange(data,dataStartPos,dataStartPos + numBytes);
        assertArrayEquals(expected,validation);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
