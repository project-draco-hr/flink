{
  try {
    final MemorySegment segment=createSegment(pageSize);
    try {
      segment.putInt(-1,0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putInt(pageSize,0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putInt(pageSize - 3,0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putInt(Integer.MIN_VALUE,0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putInt(Integer.MAX_VALUE,0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putInt(Integer.MAX_VALUE - 3,0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getInt(-1);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getInt(pageSize);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getInt(pageSize - 3);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getInt(Integer.MIN_VALUE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getInt(Integer.MAX_VALUE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getInt(Integer.MAX_VALUE - 3);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    long seed=random.nextLong();
    random.setSeed(seed);
    for (int i=0; i <= pageSize - 4; i+=4) {
      segment.putInt(i,random.nextInt());
    }
    random.setSeed(seed);
    for (int i=0; i <= pageSize - 4; i+=4) {
      assertEquals(random.nextInt(),segment.getInt(i));
    }
    random.setSeed(seed);
    boolean[] occupied=new boolean[pageSize];
    for (int i=0; i < 1000; i++) {
      int pos=random.nextInt(pageSize - 3);
      if (occupied[pos] || occupied[pos + 1] || occupied[pos + 2]|| occupied[pos + 3]) {
        continue;
      }
 else {
        occupied[pos]=true;
        occupied[pos + 1]=true;
        occupied[pos + 2]=true;
        occupied[pos + 3]=true;
      }
      segment.putInt(pos,random.nextInt());
    }
    random.setSeed(seed);
    occupied=new boolean[pageSize];
    for (int i=0; i < 1000; i++) {
      int pos=random.nextInt(pageSize - 3);
      if (occupied[pos] || occupied[pos + 1] || occupied[pos + 2]|| occupied[pos + 3]) {
        continue;
      }
 else {
        occupied[pos]=true;
        occupied[pos + 1]=true;
        occupied[pos + 2]=true;
        occupied[pos + 3]=true;
      }
      assertEquals(random.nextInt(),segment.getInt(pos));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
