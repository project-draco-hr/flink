{
  try {
    MemorySegment seg=createSegment(1024);
    ByteBuffer buf1=seg.wrap(13,47);
    assertEquals(13,buf1.position());
    assertEquals(60,buf1.limit());
    assertEquals(47,buf1.remaining());
    ByteBuffer buf2=seg.wrap(500,267);
    assertEquals(500,buf2.position());
    assertEquals(767,buf2.limit());
    assertEquals(267,buf2.remaining());
    ByteBuffer buf3=seg.wrap(0,1024);
    assertEquals(0,buf3.position());
    assertEquals(1024,buf3.limit());
    assertEquals(1024,buf3.remaining());
    buf3.order(ByteOrder.LITTLE_ENDIAN);
    buf3.putInt(112,651797651);
    assertEquals(651797651,seg.getIntLittleEndian(112));
    buf3.order(ByteOrder.BIG_ENDIAN);
    buf3.putInt(187,992288337);
    assertEquals(992288337,seg.getIntBigEndian(187));
    try {
      seg.wrap(-1,20);
      fail("should throw an exception");
    }
 catch (    IndexOutOfBoundsException|IllegalArgumentException ignored) {
    }
    try {
      seg.wrap(10,-20);
      fail("should throw an exception");
    }
 catch (    IndexOutOfBoundsException|IllegalArgumentException ignored) {
    }
    try {
      seg.wrap(10,1024);
      fail("should throw an exception");
    }
 catch (    IndexOutOfBoundsException|IllegalArgumentException ignored) {
    }
    seg.free();
    try {
      seg.wrap(13,47);
      fail("should fail with an exception");
    }
 catch (    IllegalStateException e) {
    }
    buf3.order(ByteOrder.LITTLE_ENDIAN);
    buf3.putInt(112,651797651);
    assertEquals(651797651,buf3.getInt(112));
    buf3.order(ByteOrder.BIG_ENDIAN);
    buf3.putInt(187,992288337);
    assertEquals(992288337,buf3.getInt(187));
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
