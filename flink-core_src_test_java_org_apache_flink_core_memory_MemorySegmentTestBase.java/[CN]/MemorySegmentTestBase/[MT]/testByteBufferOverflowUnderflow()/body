{
  try {
    final int bbCapacity=pageSize / 10;
    ByteBuffer bb=ByteBuffer.allocate(bbCapacity);
    MemorySegment seg=createSegment(pageSize);
    try {
      seg.get(pageSize / 5,bb,pageSize / 10 + 2);
      fail("should fail with an exception");
    }
 catch (    BufferOverflowException ignored) {
    }
    assertEquals(0,bb.position());
    assertEquals(bb.capacity(),bb.limit());
    try {
      seg.put(pageSize / 5,bb,pageSize / 10 + 2);
      fail("should fail with an exception");
    }
 catch (    BufferUnderflowException ignored) {
    }
    assertEquals(0,bb.position());
    assertEquals(bb.capacity(),bb.limit());
    int pos=bb.capacity() / 3;
    int limit=2 * bb.capacity() / 3;
    bb.limit(limit);
    bb.position(pos);
    try {
      seg.get(20,bb,bb.capacity() / 3 + 3);
      fail("should fail with an exception");
    }
 catch (    BufferOverflowException ignored) {
    }
    assertEquals(pos,bb.position());
    assertEquals(limit,bb.limit());
    try {
      seg.put(20,bb,bb.capacity() / 3 + 3);
      fail("should fail with an exception");
    }
 catch (    BufferUnderflowException ignored) {
    }
    assertEquals(pos,bb.position());
    assertEquals(limit,bb.limit());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
