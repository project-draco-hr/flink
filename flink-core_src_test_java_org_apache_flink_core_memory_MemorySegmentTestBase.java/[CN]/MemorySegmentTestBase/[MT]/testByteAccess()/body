{
  try {
    final MemorySegment segment=createSegment(pageSize);
    try {
      segment.put(-1,(byte)0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.put(pageSize,(byte)0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.put(Integer.MAX_VALUE,(byte)0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.put(Integer.MIN_VALUE,(byte)0);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.get(-1);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.get(pageSize);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.get(Integer.MAX_VALUE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.get(Integer.MIN_VALUE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    long seed=random.nextLong();
    random.setSeed(seed);
    for (int i=0; i < pageSize; i++) {
      segment.put(i,(byte)random.nextInt());
    }
    random.setSeed(seed);
    for (int i=0; i < pageSize; i++) {
      assertEquals((byte)random.nextInt(),segment.get(i));
    }
    random.setSeed(seed);
    boolean[] occupied=new boolean[pageSize];
    for (int i=0; i < 1000; i++) {
      int pos=random.nextInt(pageSize);
      if (occupied[pos]) {
        continue;
      }
 else {
        occupied[pos]=true;
      }
      segment.put(pos,(byte)random.nextInt());
    }
    random.setSeed(seed);
    occupied=new boolean[pageSize];
    for (int i=0; i < 1000; i++) {
      int pos=random.nextInt(pageSize);
      if (occupied[pos]) {
        continue;
      }
 else {
        occupied[pos]=true;
      }
      assertEquals((byte)random.nextInt(),segment.get(pos));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
