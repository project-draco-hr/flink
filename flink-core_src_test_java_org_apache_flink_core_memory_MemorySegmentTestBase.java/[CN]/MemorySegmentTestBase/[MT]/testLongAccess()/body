{
  try {
    final MemorySegment segment=createSegment(pageSize);
    try {
      segment.putLong(-1,0L);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putLong(pageSize,0L);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putLong(pageSize - 7,0L);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putLong(Integer.MIN_VALUE,0L);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putLong(Integer.MAX_VALUE,0L);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putLong(Integer.MAX_VALUE - 7,0L);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getLong(-1);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getLong(pageSize);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getLong(pageSize - 7);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getLong(Integer.MIN_VALUE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getLong(Integer.MAX_VALUE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getLong(Integer.MAX_VALUE - 7);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    long seed=random.nextLong();
    random.setSeed(seed);
    for (int i=0; i <= pageSize - 8; i+=8) {
      segment.putLong(i,random.nextLong());
    }
    random.setSeed(seed);
    for (int i=0; i <= pageSize - 8; i+=8) {
      assertEquals(random.nextLong(),segment.getLong(i));
    }
    random.setSeed(seed);
    boolean[] occupied=new boolean[pageSize];
    for (int i=0; i < 1000; i++) {
      int pos=random.nextInt(pageSize - 7);
      if (occupied[pos] || occupied[pos + 1] || occupied[pos + 2]|| occupied[pos + 3]|| occupied[pos + 4]|| occupied[pos + 5]|| occupied[pos + 6]|| occupied[pos + 7]) {
        continue;
      }
 else {
        occupied[pos]=true;
        occupied[pos + 1]=true;
        occupied[pos + 2]=true;
        occupied[pos + 3]=true;
        occupied[pos + 4]=true;
        occupied[pos + 5]=true;
        occupied[pos + 6]=true;
        occupied[pos + 7]=true;
      }
      segment.putLong(pos,random.nextLong());
    }
    random.setSeed(seed);
    occupied=new boolean[pageSize];
    for (int i=0; i < 1000; i++) {
      int pos=random.nextInt(pageSize - 7);
      if (occupied[pos] || occupied[pos + 1] || occupied[pos + 2]|| occupied[pos + 3]|| occupied[pos + 4]|| occupied[pos + 5]|| occupied[pos + 6]|| occupied[pos + 7]) {
        continue;
      }
 else {
        occupied[pos]=true;
        occupied[pos + 1]=true;
        occupied[pos + 2]=true;
        occupied[pos + 3]=true;
        occupied[pos + 4]=true;
        occupied[pos + 5]=true;
        occupied[pos + 6]=true;
        occupied[pos + 7]=true;
      }
      assertEquals(random.nextLong(),segment.getLong(pos));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
