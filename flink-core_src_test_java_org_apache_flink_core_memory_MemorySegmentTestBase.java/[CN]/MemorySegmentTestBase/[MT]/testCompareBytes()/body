{
  try {
    final byte[] bytes1=new byte[pageSize];
    final byte[] bytes2=new byte[pageSize];
    final int stride=pageSize / 255;
    final int shift=16666;
    for (int i=0; i < pageSize; i++) {
      byte val=(byte)((i / stride) & 0xff);
      bytes1[i]=val;
      if (i + shift < bytes2.length) {
        bytes2[i + shift]=val;
      }
    }
    MemorySegment seg1=createSegment(pageSize);
    MemorySegment seg2=createSegment(pageSize);
    seg1.put(0,bytes1);
    seg2.put(0,bytes2);
    for (int i=0; i < 1000; i++) {
      int pos1=random.nextInt(bytes1.length);
      int pos2=random.nextInt(bytes2.length);
      int len=Math.min(Math.min(bytes1.length - pos1,bytes2.length - pos2),random.nextInt(pageSize / 50));
      int cmp=seg1.compare(seg2,pos1,pos2,len);
      if (pos1 < pos2 - shift) {
        assertTrue(cmp <= 0);
      }
 else {
        assertTrue(cmp >= 0);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
