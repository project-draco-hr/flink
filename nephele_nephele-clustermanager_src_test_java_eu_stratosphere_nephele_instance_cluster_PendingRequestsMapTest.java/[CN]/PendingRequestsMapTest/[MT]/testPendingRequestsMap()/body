{
  final PendingRequestsMap prm=new PendingRequestsMap();
  assertFalse(prm.hasPendingRequests());
  prm.addRequest(INSTANCE_TYPE1,1);
  prm.addRequest(INSTANCE_TYPE2,2);
  prm.addRequest(INSTANCE_TYPE2,2);
  assertTrue(prm.hasPendingRequests());
  final Iterator<Map.Entry<InstanceType,Integer>> it=prm.iterator();
  int iterationCounter=0;
  while (it.hasNext()) {
    final Map.Entry<InstanceType,Integer> entry=it.next();
    ++iterationCounter;
    if (entry.getKey().equals(INSTANCE_TYPE1)) {
      assertEquals(1,entry.getValue().intValue());
    }
    if (entry.getKey().equals(INSTANCE_TYPE2)) {
      assertEquals(4,entry.getValue().intValue());
    }
  }
  assertEquals(2,iterationCounter);
  prm.decreaseNumberOfPendingInstances(INSTANCE_TYPE1);
  prm.decreaseNumberOfPendingInstances(INSTANCE_TYPE1);
  prm.decreaseNumberOfPendingInstances(INSTANCE_TYPE1);
  assertTrue(prm.hasPendingRequests());
  prm.decreaseNumberOfPendingInstances(INSTANCE_TYPE2);
  prm.decreaseNumberOfPendingInstances(INSTANCE_TYPE2);
  prm.decreaseNumberOfPendingInstances(INSTANCE_TYPE2);
  prm.decreaseNumberOfPendingInstances(INSTANCE_TYPE2);
  assertFalse(prm.hasPendingRequests());
}
