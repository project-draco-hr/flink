{
  final FileBaseStatistics cachedFileStats=(cachedStats != null && cachedStats instanceof FileBaseStatistics) ? (FileBaseStatistics)cachedStats : null;
  final long oldTimeout=this.openTimeout;
  final int oldBufferSize=this.bufferSize;
  final int oldLineLengthLimit=this.lineLengthLimit;
  try {
    final Path filePath=this.filePath;
    final FileSystem fs=FileSystem.get(filePath.toUri());
    final ArrayList<FileStatus> allFiles=new ArrayList<FileStatus>(1);
    final FileBaseStatistics stats=getFileStats(cachedFileStats,filePath,fs,allFiles);
    if (stats == null) {
      return null;
    }
    if (stats.getAverageRecordWidth() != FileBaseStatistics.AVG_RECORD_BYTES_UNKNOWN || stats.getTotalInputSize() == FileBaseStatistics.SIZE_UNKNOWN) {
      return stats;
    }
    final int numSamples;
    if (this.numLineSamples != NUM_SAMPLES_UNDEFINED) {
      numSamples=this.numLineSamples;
    }
 else {
      final int calcSamples=(int)(stats.getTotalInputSize() / 1024);
      numSamples=Math.min(DEFAULT_MAX_NUM_SAMPLES,Math.max(DEFAULT_MIN_NUM_SAMPLES,calcSamples));
    }
    if (numSamples == 0) {
      return stats;
    }
    if (numSamples < 0) {
      throw new RuntimeException("Error: Invalid number of samples: " + numSamples);
    }
    this.openTimeout=10000;
    this.bufferSize=4 * 1024;
    this.lineLengthLimit=MAX_SAMPLE_LEN;
    long offset=0;
    long totalNumBytes=0;
    long stepSize=stats.getTotalInputSize() / numSamples;
    int fileNum=0;
    int samplesTaken=0;
    while (samplesTaken < numSamples && fileNum < allFiles.size()) {
      FileStatus file=allFiles.get(fileNum);
      FileInputSplit split=new FileInputSplit(0,file.getPath(),offset,file.getLen() - offset,null);
      try {
        open(split);
        if (readLine()) {
          totalNumBytes+=this.currLen + this.delimiter.length;
          samplesTaken++;
        }
      }
  finally {
        super.close();
      }
      offset+=stepSize;
      while (fileNum < allFiles.size() && offset >= (file=allFiles.get(fileNum)).getLen()) {
        offset-=file.getLen();
        fileNum++;
      }
    }
    return new FileBaseStatistics(stats.getLastModificationTime(),stats.getTotalInputSize(),totalNumBytes / (float)samplesTaken);
  }
 catch (  IOException ioex) {
    if (LOG.isWarnEnabled()) {
      LOG.warn("Could not determine statistics for file '" + this.filePath + "' due to an io error: "+ ioex.getMessage());
    }
  }
catch (  Throwable t) {
    if (LOG.isErrorEnabled()) {
      LOG.error("Unexpected problen while getting the file statistics for file '" + this.filePath + "': "+ t.getMessage(),t);
    }
  }
 finally {
    this.openTimeout=oldTimeout;
    this.bufferSize=oldBufferSize;
    this.lineLengthLimit=oldLineLengthLimit;
  }
  return null;
}
