{
  Preconditions.checkNotNull(vertices);
  Preconditions.checkNotNull(translator);
  Class<Vertex<NEW,VV>> vertexClass=(Class<Vertex<NEW,VV>>)(Class<? extends Vertex>)Vertex.class;
  TypeInformation<OLD> oldType=((TupleTypeInfo<Vertex<OLD,VV>>)vertices.getType()).getTypeAt(0);
  TypeInformation<NEW> newType=TypeExtractor.getUnaryOperatorReturnType(translator,TranslateFunction.class,false,false,oldType,null,false);
  TypeInformation<VV> vertexValueType=((TupleTypeInfo<Vertex<OLD,VV>>)vertices.getType()).getTypeAt(1);
  TupleTypeInfo<Vertex<NEW,VV>> returnType=new TupleTypeInfo<>(vertexClass,newType,vertexValueType);
  return vertices.map(new TranslateVertexId<OLD,NEW,VV>(translator)).returns(returnType).setParallelism(parallelism).name("Translate vertex IDs");
}
