{
  final List<ObjectAccess> objectAccesses=new ArrayList<ObjectAccess>();
  final List<ArrayAccess> arrayAccesses=new ArrayList<ArrayAccess>();
  final List<EvaluationExpression> mappings=new ArrayList<EvaluationExpression>();
  for (  final EvaluationExpression evaluationExpression : keyExpressions) {
    mappings.add(evaluationExpression);
    if (evaluationExpression instanceof ObjectAccess)     objectAccesses.add((ObjectAccess)evaluationExpression);
    if (evaluationExpression instanceof ArrayAccess)     arrayAccesses.add((ArrayAccess)evaluationExpression);
  }
  if (mappings.isEmpty())   return new DirectSchema();
  if (objectAccesses.size() == mappings.size())   return new ObjectSchema(objectAccesses);
 else   if (arrayAccesses.size() == mappings.size()) {
    final int startIndex=arrayAccesses.get(0).getStartIndex();
    final int endIndex=arrayAccesses.get(arrayAccesses.size() - 1).getEndIndex();
    if (startIndex == 0)     return new HeadArraySchema(endIndex + 1);
 else     return new TailArraySchema(endIndex - startIndex + 1);
  }
 else   return new GeneralSchema(mappings);
}
