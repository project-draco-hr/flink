{
  List<ObjectAccess> objectAccesses=new ArrayList<ObjectAccess>();
  List<ArrayAccess> arrayAccesses=new ArrayList<ArrayAccess>();
  List<EvaluationExpression> mappings=new ArrayList<EvaluationExpression>();
  for (  EvaluationExpression evaluationExpression : keyExpressions) {
    mappings.add(evaluationExpression);
    if (evaluationExpression instanceof ObjectAccess)     objectAccesses.add((ObjectAccess)evaluationExpression);
    if (evaluationExpression instanceof ArrayAccess)     arrayAccesses.add((ArrayAccess)evaluationExpression);
  }
  if (mappings.isEmpty())   return new DirectSchema();
  if (objectAccesses.size() == mappings.size()) {
    ObjectSchema schema=new ObjectSchema();
    schema.setMappingsWithAccesses(objectAccesses);
    return schema;
  }
 else   if (arrayAccesses.size() == mappings.size()) {
    int startIndex=arrayAccesses.get(0).getStartIndex();
    int endIndex=arrayAccesses.get(arrayAccesses.size() - 1).getEndIndex();
    if (startIndex == 0) {
      HeadArraySchema schema=new HeadArraySchema();
      schema.setHeadSize(endIndex + 1);
      return schema;
    }
 else {
      TailArraySchema schema=new TailArraySchema();
      schema.setTailSize(endIndex - startIndex + 1);
      return schema;
    }
  }
 else   return new GeneralSchema(mappings);
}
