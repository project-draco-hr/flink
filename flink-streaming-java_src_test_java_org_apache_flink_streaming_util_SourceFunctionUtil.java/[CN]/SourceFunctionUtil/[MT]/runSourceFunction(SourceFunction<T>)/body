{
  List<T> outputs=new ArrayList<T>();
  if (sourceFunction instanceof RichFunction) {
    AbstractStreamOperator<?> operator=mock(AbstractStreamOperator.class);
    when(operator.getExecutionConfig()).thenReturn(new ExecutionConfig());
    RuntimeContext runtimeContext=new StreamingRuntimeContext(operator,new MockEnvironment("MockTask",3 * 1024 * 1024,new MockInputSplitProvider(),1024),new HashMap<String,Accumulator<?,?>>());
    ((RichFunction)sourceFunction).setRuntimeContext(runtimeContext);
    ((RichFunction)sourceFunction).open(new Configuration());
  }
  try {
    final Output<StreamRecord<T>> collector=new MockOutput<T>(outputs);
    final Object lockingObject=new Object();
    SourceFunction.SourceContext<T> ctx;
    if (sourceFunction instanceof EventTimeSourceFunction) {
      ctx=new StreamSource.ManualWatermarkContext<T>(lockingObject,collector,true);
    }
 else {
      ctx=new StreamSource.NonWatermarkContext<T>(lockingObject,collector);
    }
    sourceFunction.run(ctx);
  }
 catch (  Exception e) {
    throw new RuntimeException("Cannot invoke source.",e);
  }
  return outputs;
}
