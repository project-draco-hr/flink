{
  final TypeSerializerFactory<?> serializer=RecordSerializerFactory.get();
  @SuppressWarnings("unchecked") final TypeComparatorFactory<?> comparator=new RecordComparatorFactory(new int[]{0},new Class[]{LongValue.class},new boolean[]{true});
  final TypePairComparatorFactory<?,?> pairComparator=RecordPairComparatorFactory.get();
  JobGraph jobGraph=new JobGraph("Connected Components (Unified Tails)");
  InputFormatVertex vertices=createVerticesInput(jobGraph,verticesPath,numSubTasks,serializer,comparator);
  InputFormatVertex edges=createEdgesInput(jobGraph,edgesPath,numSubTasks,serializer,comparator);
  JobVertex head=createIterationHead(jobGraph,numSubTasks,serializer,comparator,pairComparator);
  JobVertex intermediate=createIterationIntermediate(jobGraph,numSubTasks,serializer,comparator);
  TaskConfig intermediateConfig=new TaskConfig(intermediate.getConfiguration());
  OutputFormatVertex output=createOutput(jobGraph,resultPath,numSubTasks,serializer);
  JobVertex sync=createSync(jobGraph,numSubTasks,maxIterations);
  JobVertex tail=JobGraphUtils.createTask(IterationTailPactTask.class,"IterationTail",jobGraph,numSubTasks);
  TaskConfig tailConfig=new TaskConfig(tail.getConfiguration());
{
    tailConfig.setIterationId(ITERATION_ID);
    tailConfig.setIsWorksetIteration();
    tailConfig.setIsWorksetUpdate();
    tailConfig.setIsSolutionSetUpdate();
    tailConfig.setIsSolutionSetUpdateWithoutReprobe();
    tailConfig.addInputToGroup(0);
    tailConfig.setInputSerializer(serializer,0);
    tailConfig.setOutputSerializer(serializer);
    tailConfig.setDriver(JoinWithSolutionSetSecondDriver.class);
    tailConfig.setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND);
    tailConfig.setDriverComparator(comparator,0);
    tailConfig.setDriverPairComparator(pairComparator);
    tailConfig.setStubWrapper(new UserCodeClassWrapper<UpdateComponentIdMatch>(UpdateComponentIdMatch.class));
  }
  JobGraphUtils.connect(vertices,head,DistributionPattern.ALL_TO_ALL);
  JobGraphUtils.connect(edges,head,DistributionPattern.ALL_TO_ALL);
  JobGraphUtils.connect(vertices,head,DistributionPattern.ALL_TO_ALL);
  JobGraphUtils.connect(head,intermediate,DistributionPattern.ALL_TO_ALL);
  intermediateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,numSubTasks);
  JobGraphUtils.connect(intermediate,tail,DistributionPattern.POINTWISE);
  tailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(head,output,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(head,sync,DistributionPattern.POINTWISE);
  SlotSharingGroup sharingGroup=new SlotSharingGroup();
  vertices.setSlotSharingGroup(sharingGroup);
  edges.setSlotSharingGroup(sharingGroup);
  head.setSlotSharingGroup(sharingGroup);
  intermediate.setSlotSharingGroup(sharingGroup);
  tail.setSlotSharingGroup(sharingGroup);
  output.setSlotSharingGroup(sharingGroup);
  sync.setSlotSharingGroup(sharingGroup);
  intermediate.setStrictlyCoLocatedWith(head);
  tail.setStrictlyCoLocatedWith(head);
  return jobGraph;
}
