{
  final TypeSerializerFactory<?> serializer=RecordSerializerFactory.get();
  @SuppressWarnings("unchecked") final TypeComparatorFactory<?> comparator=new RecordComparatorFactory(new int[]{0},new Class[]{LongValue.class},new boolean[]{true});
  final TypePairComparatorFactory<?,?> pairComparator=RecordPairComparatorFactory.get();
  JobGraph jobGraph=new JobGraph("Connected Components (Intermediate Workset Update, Solution Set Tail)");
  InputFormatInputVertex vertices=createVerticesInput(jobGraph,verticesPath,numSubTasks,serializer,comparator);
  InputFormatInputVertex edges=createEdgesInput(jobGraph,edgesPath,numSubTasks,serializer,comparator);
  JobTaskVertex head=createIterationHead(jobGraph,numSubTasks,serializer,comparator,pairComparator);
  TaskConfig headConfig=new TaskConfig(head.getConfiguration());
  headConfig.setWaitForSolutionSetUpdate();
  JobTaskVertex intermediate=createIterationIntermediate(jobGraph,numSubTasks,serializer,comparator);
  TaskConfig intermediateConfig=new TaskConfig(intermediate.getConfiguration());
  OutputFormatOutputVertex output=createOutput(jobGraph,resultPath,numSubTasks,serializer);
  SimpleOutputVertex fakeTail=createFakeTail(jobGraph,numSubTasks);
  SimpleOutputVertex sync=createSync(jobGraph,numSubTasks,maxIterations);
  JobTaskVertex wsUpdateIntermediate=JobGraphUtils.createTask(IterationIntermediatePactTask.class,"WorksetUpdate",jobGraph,numSubTasks);
  TaskConfig wsUpdateConfig=new TaskConfig(wsUpdateIntermediate.getConfiguration());
{
    wsUpdateConfig.setIterationId(ITERATION_ID);
    wsUpdateConfig.setIsWorksetIteration();
    wsUpdateConfig.setIsWorksetUpdate();
    wsUpdateConfig.addInputToGroup(0);
    wsUpdateConfig.setInputSerializer(serializer,0);
    wsUpdateConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    wsUpdateConfig.setOutputComparator(comparator,0);
    wsUpdateConfig.setOutputSerializer(serializer);
    wsUpdateConfig.setDriver(JoinWithSolutionSetSecondDriver.class);
    wsUpdateConfig.setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND);
    wsUpdateConfig.setDriverComparator(comparator,0);
    wsUpdateConfig.setDriverPairComparator(pairComparator);
    wsUpdateConfig.setStubWrapper(new UserCodeClassWrapper<UpdateComponentIdMatch>(UpdateComponentIdMatch.class));
  }
  JobTaskVertex ssTail=JobGraphUtils.createTask(IterationTailPactTask.class,"IterationSolutionSetTail",jobGraph,numSubTasks);
  TaskConfig ssTailConfig=new TaskConfig(ssTail.getConfiguration());
{
    ssTailConfig.setIterationId(ITERATION_ID);
    ssTailConfig.setIsSolutionSetUpdate();
    ssTailConfig.setIsWorksetIteration();
    ssTailConfig.addInputToGroup(0);
    ssTailConfig.setInputSerializer(serializer,0);
    ssTailConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    ssTailConfig.setOutputSerializer(serializer);
    ssTailConfig.setDriver(CollectorMapDriver.class);
    ssTailConfig.setDriverStrategy(DriverStrategy.COLLECTOR_MAP);
    ssTailConfig.setStubWrapper(new UserCodeClassWrapper<DummyMapper>(DummyMapper.class));
  }
  JobGraphUtils.connect(vertices,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(edges,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(vertices,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(head,intermediate,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  intermediateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,numSubTasks);
  JobGraphUtils.connect(intermediate,wsUpdateIntermediate,ChannelType.NETWORK,DistributionPattern.POINTWISE);
  wsUpdateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(wsUpdateIntermediate,ssTail,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
  ssTailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(head,output,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(ssTail,fakeTail,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(head,sync,ChannelType.NETWORK,DistributionPattern.POINTWISE);
  vertices.setVertexToShareInstancesWith(head);
  edges.setVertexToShareInstancesWith(head);
  intermediate.setVertexToShareInstancesWith(head);
  wsUpdateIntermediate.setVertexToShareInstancesWith(head);
  ssTail.setVertexToShareInstancesWith(head);
  output.setVertexToShareInstancesWith(head);
  sync.setVertexToShareInstancesWith(head);
  fakeTail.setVertexToShareInstancesWith(ssTail);
  return jobGraph;
}
