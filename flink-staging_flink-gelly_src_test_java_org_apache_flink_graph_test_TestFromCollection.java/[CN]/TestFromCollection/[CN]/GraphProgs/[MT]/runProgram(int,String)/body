{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongVertices(),TestGraphUtils.getLongLongEdges(),env);
      graph.getEdges().writeAsCsv(resultPath);
      env.execute();
      return "1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,NullValue,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongEdges(),env);
    graph.getVertices().writeAsCsv(resultPath);
    env.execute();
    return "1,(null)\n" + "2,(null)\n" + "3,(null)\n"+ "4,(null)\n"+ "5,(null)\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,Long,Long> graph=Graph.fromCollection(TestGraphUtils.getLongLongEdges(),new MapFunction<Long,Long>(){
    public Long map(    Long vertexId){
      return vertexId * 2;
    }
  }
,env);
  graph.getVertices().writeAsCsv(resultPath);
  env.execute();
  return "1,2\n" + "2,4\n" + "3,6\n"+ "4,8\n"+ "5,10\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
