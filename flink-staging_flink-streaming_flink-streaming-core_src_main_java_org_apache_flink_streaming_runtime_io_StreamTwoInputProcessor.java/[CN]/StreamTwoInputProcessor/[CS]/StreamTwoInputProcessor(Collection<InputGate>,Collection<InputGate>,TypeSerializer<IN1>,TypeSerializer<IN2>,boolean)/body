{
  super(InputGateUtil.createInputGate(inputGates1,inputGates2));
  barrierBuffer=new BarrierBuffer(inputGate,this);
  if (enableWatermarkMultiplexing) {
    MultiplexingStreamRecordSerializer<IN1> ser=new MultiplexingStreamRecordSerializer<IN1>(inputSerializer1);
    this.deserializationDelegate1=new NonReusingDeserializationDelegate<Object>(ser);
  }
 else {
    StreamRecordSerializer<IN1> ser=new StreamRecordSerializer<IN1>(inputSerializer1);
    this.deserializationDelegate1=(DeserializationDelegate<Object>)(DeserializationDelegate<?>)new NonReusingDeserializationDelegate<StreamRecord<IN1>>(ser);
  }
  if (enableWatermarkMultiplexing) {
    MultiplexingStreamRecordSerializer<IN2> ser=new MultiplexingStreamRecordSerializer<IN2>(inputSerializer2);
    this.deserializationDelegate2=new NonReusingDeserializationDelegate<Object>(ser);
  }
 else {
    StreamRecordSerializer<IN2> ser=new StreamRecordSerializer<IN2>(inputSerializer2);
    this.deserializationDelegate2=(DeserializationDelegate<Object>)(DeserializationDelegate<?>)new NonReusingDeserializationDelegate<StreamRecord<IN2>>(ser);
  }
  this.recordDeserializers=new SpillingAdaptiveSpanningRecordDeserializer[inputGate.getNumberOfInputChannels()];
  for (int i=0; i < recordDeserializers.length; i++) {
    recordDeserializers[i]=new SpillingAdaptiveSpanningRecordDeserializer<DeserializationDelegate<Object>>();
  }
  int numInputChannels1=0;
  for (  InputGate gate : inputGates1) {
    numInputChannels1+=gate.getNumberOfInputChannels();
  }
  this.numInputChannels1=numInputChannels1;
  int numInputChannels2=inputGate.getNumberOfInputChannels() - numInputChannels1;
  watermarks1=new long[numInputChannels1];
  for (int i=0; i < numInputChannels1; i++) {
    watermarks1[i]=Long.MIN_VALUE;
  }
  lastEmittedWatermark1=Long.MIN_VALUE;
  watermarks2=new long[numInputChannels2];
  for (int i=0; i < numInputChannels2; i++) {
    watermarks2[i]=Long.MIN_VALUE;
  }
  lastEmittedWatermark2=Long.MIN_VALUE;
}
