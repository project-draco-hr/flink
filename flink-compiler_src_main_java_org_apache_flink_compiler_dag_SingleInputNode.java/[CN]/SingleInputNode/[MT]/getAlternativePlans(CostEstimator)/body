{
  if (this.cachedPlans != null) {
    return this.cachedPlans;
  }
  boolean childrenSkippedDueToReplicatedInput=false;
  final List<? extends PlanNode> subPlans=getPredecessorNode().getAlternativePlans(estimator);
  final Set<RequestedGlobalProperties> intGlobal=this.inConn.getInterestingProperties().getGlobalProperties();
  final List<Set<? extends NamedChannel>> broadcastPlanChannels=new ArrayList<Set<? extends NamedChannel>>();
  List<PactConnection> broadcastConnections=getBroadcastConnections();
  List<String> broadcastConnectionNames=getBroadcastConnectionNames();
  for (int i=0; i < broadcastConnections.size(); i++) {
    PactConnection broadcastConnection=broadcastConnections.get(i);
    String broadcastConnectionName=broadcastConnectionNames.get(i);
    List<PlanNode> broadcastPlanCandidates=broadcastConnection.getSource().getAlternativePlans(estimator);
    HashSet<NamedChannel> broadcastChannels=new HashSet<NamedChannel>(broadcastPlanCandidates.size());
    for (    PlanNode plan : broadcastPlanCandidates) {
      final NamedChannel c=new NamedChannel(broadcastConnectionName,plan);
      c.setShipStrategy(ShipStrategyType.BROADCAST);
      broadcastChannels.add(c);
    }
    broadcastPlanChannels.add(broadcastChannels);
  }
  final RequestedGlobalProperties[] allValidGlobals;
{
    Set<RequestedGlobalProperties> pairs=new HashSet<RequestedGlobalProperties>();
    for (    OperatorDescriptorSingle ods : getPossibleProperties()) {
      pairs.addAll(ods.getPossibleGlobalProperties());
    }
    allValidGlobals=(RequestedGlobalProperties[])pairs.toArray(new RequestedGlobalProperties[pairs.size()]);
  }
  final ArrayList<PlanNode> outputPlans=new ArrayList<PlanNode>();
  final int dop=getDegreeOfParallelism();
  final int inDop=getPredecessorNode().getDegreeOfParallelism();
  final boolean dopChange=inDop != dop;
  for (  PlanNode child : subPlans) {
    if (child.getGlobalProperties().isFullyReplicated()) {
      if (dopChange) {
        childrenSkippedDueToReplicatedInput=true;
        continue;
      }
 else {
        this.inConn.setShipStrategy(ShipStrategyType.FORWARD);
      }
    }
    if (this.inConn.getShipStrategy() == null) {
      for (      RequestedGlobalProperties igps : intGlobal) {
        final Channel c=new Channel(child,this.inConn.getMaterializationMode());
        igps.parameterizeChannel(c,dopChange);
        if (dopChange && !c.getShipStrategy().isNetworkStrategy()) {
          c.getGlobalProperties().reset();
        }
        for (        RequestedGlobalProperties rgps : allValidGlobals) {
          if (rgps.isMetBy(c.getGlobalProperties())) {
            c.setRequiredGlobalProps(rgps);
            addLocalCandidates(c,broadcastPlanChannels,igps,outputPlans,estimator);
            break;
          }
        }
      }
    }
 else {
      final Channel c=new Channel(child,this.inConn.getMaterializationMode());
      if (this.keys != null) {
        c.setShipStrategy(this.inConn.getShipStrategy(),this.keys.toFieldList());
      }
 else {
        c.setShipStrategy(this.inConn.getShipStrategy());
      }
      if (dopChange) {
        c.adjustGlobalPropertiesForFullParallelismChange();
      }
      for (      RequestedGlobalProperties rgps : allValidGlobals) {
        if (rgps.isMetBy(c.getGlobalProperties())) {
          addLocalCandidates(c,broadcastPlanChannels,rgps,outputPlans,estimator);
          break;
        }
      }
    }
  }
  if (outputPlans.isEmpty()) {
    if (childrenSkippedDueToReplicatedInput) {
      throw new CompilerException("No plan meeting the requirements could be created @ " + this + ". Most likely reason: Invalid use of replicated input.");
    }
 else {
      throw new CompilerException("No plan meeting the requirements could be created @ " + this + ". Most likely reason: Too restrictive plan hints.");
    }
  }
  for (  PlanNode node : outputPlans) {
    estimator.costOperator(node);
  }
  prunePlanAlternatives(outputPlans);
  outputPlans.trimToSize();
  this.cachedPlans=outputPlans;
  return outputPlans;
}
