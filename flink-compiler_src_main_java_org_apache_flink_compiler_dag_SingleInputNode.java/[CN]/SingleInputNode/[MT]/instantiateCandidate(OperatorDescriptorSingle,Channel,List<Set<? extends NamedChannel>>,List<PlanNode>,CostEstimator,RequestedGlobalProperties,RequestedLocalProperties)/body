{
  final PlanNode inputSource=in.getSource();
  for (  List<NamedChannel> broadcastChannelsCombination : Sets.cartesianProduct(broadcastPlanChannels)) {
    boolean validCombination=true;
    boolean requiresPipelinebreaker=false;
    for (int i=0; i < broadcastChannelsCombination.size(); i++) {
      NamedChannel nc=broadcastChannelsCombination.get(i);
      PlanNode bcSource=nc.getSource();
      if (!areBranchCompatible(bcSource,inputSource)) {
        validCombination=false;
        break;
      }
      for (int k=0; k < i; k++) {
        PlanNode otherBcSource=broadcastChannelsCombination.get(k).getSource();
        if (!areBranchCompatible(bcSource,otherBcSource)) {
          validCombination=false;
          break;
        }
      }
      if (this.hereJoinedBranches != null) {
        for (        OptimizerNode brancher : this.hereJoinedBranches) {
          PlanNode candAtBrancher=in.getSource().getCandidateAtBranchPoint(brancher);
          if (candAtBrancher == null) {
            continue;
          }
          SourceAndDamReport res=in.getSource().hasDamOnPathDownTo(candAtBrancher);
          if (res == NOT_FOUND) {
            throw new CompilerException("Bug: Tracing dams for deadlock detection is broken.");
          }
 else           if (res == FOUND_SOURCE) {
            requiresPipelinebreaker=true;
            break;
          }
 else           if (res == FOUND_SOURCE_AND_DAM) {
          }
 else {
            throw new CompilerException();
          }
        }
      }
    }
    if (!validCombination) {
      continue;
    }
    if (requiresPipelinebreaker) {
      in.setTempMode(in.getTempMode().makePipelineBreaker());
    }
    final SingleInputPlanNode node=dps.instantiate(in,this);
    node.setBroadcastInputs(broadcastChannelsCombination);
    GlobalProperties gProps=in.getGlobalProperties().clone();
    LocalProperties lProps=in.getLocalProperties().clone();
    gProps=dps.computeGlobalProperties(gProps);
    lProps=dps.computeLocalProperties(lProps);
    gProps=gProps.filterByNodesConstantSet(this,0);
    lProps=lProps.filterByNodesConstantSet(this,0);
    node.initProperties(gProps,lProps);
    node.updatePropertiesWithUniqueSets(getUniqueFields());
    target.add(node);
  }
}
