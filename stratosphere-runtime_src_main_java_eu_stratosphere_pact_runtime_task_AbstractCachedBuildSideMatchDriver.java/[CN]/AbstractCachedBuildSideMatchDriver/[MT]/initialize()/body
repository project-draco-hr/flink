{
  TaskConfig config=this.taskContext.getTaskConfig();
  TypeSerializer<IT1> serializer1=this.taskContext.getInputSerializer(0);
  TypeSerializer<IT2> serializer2=this.taskContext.getInputSerializer(1);
  TypeComparator<IT1> comparator1=this.taskContext.getInputComparator(0);
  TypeComparator<IT2> comparator2=this.taskContext.getInputComparator(1);
  MutableObjectIterator<IT1> input1=this.taskContext.getInput(0);
  MutableObjectIterator<IT2> input2=this.taskContext.getInput(1);
  TypePairComparatorFactory<IT1,IT2> pairComparatorFactory=this.taskContext.getTaskConfig().getPairComparatorFactory(this.taskContext.getUserCodeClassLoader());
  int numMemoryPages=this.taskContext.getMemoryManager().computeNumberOfPages(config.getMemoryDriver());
  List<MemorySegment> memSegments=this.taskContext.getMemoryManager().allocatePages(this.taskContext.getOwningNepheleTask(),numMemoryPages);
  if (getBuildSideIndex() == 0 && getProbeSideIndex() == 1) {
    MutableHashTable<IT1,IT2> hashJoin=new MutableHashTable<IT1,IT2>(serializer1,serializer2,comparator1,comparator2,pairComparatorFactory.createComparator21(comparator1,comparator2),memSegments,this.taskContext.getIOManager());
    this.hashJoin=hashJoin;
    hashJoin.open(input1,EmptyMutableObjectIterator.<IT2>get());
  }
 else   if (getBuildSideIndex() == 1 && getProbeSideIndex() == 0) {
    MutableHashTable<IT2,IT1> hashJoin=new MutableHashTable<IT2,IT1>(serializer2,serializer1,comparator2,comparator1,pairComparatorFactory.createComparator12(comparator1,comparator2),memSegments,this.taskContext.getIOManager());
    this.hashJoin=hashJoin;
    hashJoin.open(input2,EmptyMutableObjectIterator.<IT1>get());
  }
 else {
    throw new Exception("Error: Inconcistent setup for repeatable hash join driver.");
  }
}
