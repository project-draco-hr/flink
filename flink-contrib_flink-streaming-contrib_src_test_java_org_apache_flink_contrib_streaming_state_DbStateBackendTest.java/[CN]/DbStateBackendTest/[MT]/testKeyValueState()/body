{
  File tempDir=new File(ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH,UUID.randomUUID().toString());
  try {
    FsStateBackend fileBackend=new FsStateBackend(localFileUri(tempDir));
    DbStateBackend backend=new DbStateBackend(conf,fileBackend);
    Environment env=new DummyEnvironment("test",2,0);
    backend.initializeForJob(env);
    LazyDbKvState<Integer,String> kv=backend.createKvState(1,"state1",IntSerializer.INSTANCE,StringSerializer.INSTANCE,null);
    String tableName="kvstate_" + env.getJobID() + "_1_state1";
    assertTrue(isTableCreated(backend.getConnections().getFirst(),tableName));
    assertEquals(0,kv.size());
    kv.setCurrentKey(1);
    assertNull(kv.value());
    kv.update("1");
    assertEquals(1,kv.size());
    kv.setCurrentKey(2);
    assertNull(kv.value());
    kv.update("2");
    assertEquals(2,kv.size());
    kv.setCurrentKey(1);
    assertEquals("1",kv.value());
    assertEquals(2,kv.size());
    kv.snapshot(682375462378L,100);
    kv.setCurrentKey(1);
    kv.update("u1");
    kv.setCurrentKey(2);
    kv.update("u2");
    kv.setCurrentKey(3);
    kv.update("u3");
    assertTrue(containsKey(backend.getConnections().getFirst(),tableName,1,100));
    kv.notifyCheckpointComplete(682375462378L);
    KvStateSnapshot<Integer,String,DbStateBackend> snapshot2=kv.snapshot(682375462379L,200);
    assertTrue(containsKey(backend.getConnections().getFirst(),tableName,1,100));
    assertTrue(containsKey(backend.getConnections().getFirst(),tableName,1,200));
    kv.notifyCheckpointComplete(682375462379L);
    assertFalse(containsKey(backend.getConnections().getFirst(),tableName,1,100));
    assertTrue(containsKey(backend.getConnections().getFirst(),tableName,1,200));
    assertEquals(3,kv.size());
    kv.setCurrentKey(1);
    assertEquals("u1",kv.value());
    kv.setCurrentKey(2);
    assertEquals("u2",kv.value());
    kv.setCurrentKey(3);
    assertEquals("u3",kv.value());
    KvState<Integer,String,DbStateBackend> restored2=snapshot2.restoreState(backend,IntSerializer.INSTANCE,StringSerializer.INSTANCE,null,getClass().getClassLoader(),6823754623710L);
    assertEquals(0,restored2.size());
    restored2.setCurrentKey(1);
    assertEquals("u1",restored2.value());
    restored2.setCurrentKey(2);
    assertEquals("u2",restored2.value());
    restored2.setCurrentKey(3);
    assertEquals("u3",restored2.value());
    backend.close();
  }
  finally {
    deleteDirectorySilently(tempDir);
  }
}
