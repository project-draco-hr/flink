{
  DbBackendConfig conf=DbStateBackendTest.conf.createConfigForShard(0);
  conf.setKvCacheSize(3);
  conf.setMaxKvInsertBatchSize(2);
  conf.setMaxKvCacheEvictFraction(0.6f);
  DbStateBackend backend=new DbStateBackend(conf);
  Environment env=new DummyEnvironment("test",2,0);
  backend.initializeForJob(env);
  LazyDbKvState<Integer,String> kv=backend.createKvState(1,"state1",IntSerializer.INSTANCE,StringSerializer.INSTANCE,"a");
  Map<Integer,Optional<String>> cache=kv.getStateCache();
  Map<Integer,Optional<String>> modified=kv.getModified();
  assertEquals(0,kv.size());
  kv.setCurrentKey(1);
  assertEquals("a",kv.value());
  kv.update(null);
  assertEquals(1,kv.size());
  kv.setCurrentKey(2);
  assertEquals("a",kv.value());
  kv.update("2");
  assertEquals(2,kv.size());
  kv.setCurrentKey(1);
  assertEquals("a",kv.value());
  kv.setCurrentKey(3);
  kv.update("3");
  assertEquals("3",kv.value());
  assertTrue(modified.containsKey(1));
  assertTrue(modified.containsKey(2));
  assertTrue(modified.containsKey(3));
  kv.setCurrentKey(4);
  kv.update("4");
  assertEquals("4",kv.value());
  assertFalse(modified.containsKey(1));
  assertFalse(modified.containsKey(2));
  assertTrue(modified.containsKey(3));
  assertTrue(modified.containsKey(4));
  assertEquals(Optional.of("3"),cache.get(3));
  assertEquals(Optional.of("4"),cache.get(4));
  assertFalse(cache.containsKey(1));
  assertFalse(cache.containsKey(2));
  kv.shapshot(682375462378L,100);
  assertTrue(modified.isEmpty());
  kv.setCurrentKey(2);
  assertEquals("2",kv.value());
  kv.update(null);
  assertTrue(modified.containsKey(2));
  assertEquals(1,modified.size());
  assertEquals(Optional.of("3"),cache.get(3));
  assertEquals(Optional.of("4"),cache.get(4));
  assertEquals(Optional.absent(),cache.get(2));
  assertFalse(cache.containsKey(1));
  assertTrue(modified.containsKey(2));
  assertTrue(modified.containsKey(3));
  assertTrue(modified.containsKey(4));
  kv.setCurrentKey(5);
  kv.value();
  kv.setCurrentKey(6);
  kv.value();
  kv.setCurrentKey(7);
  kv.value();
  assertFalse(modified.containsKey(5));
  assertTrue(modified.containsKey(6));
  assertTrue(modified.containsKey(7));
  assertFalse(cache.containsKey(1));
  assertFalse(cache.containsKey(2));
  assertFalse(cache.containsKey(3));
  assertFalse(cache.containsKey(4));
  kv.setCurrentKey(2);
  assertEquals("a",kv.value());
  long checkpointTs=System.currentTimeMillis();
  KvStateSnapshot<Integer,String,DbStateBackend> snapshot1=kv.shapshot(682375462379L,checkpointTs);
  assertTrue(modified.isEmpty());
  kv.setCurrentKey(1);
  kv.update("123");
  kv.setCurrentKey(3);
  kv.update("456");
  kv.setCurrentKey(2);
  kv.notifyCheckpointComplete(682375462379L);
  kv.update("2");
  kv.setCurrentKey(4);
  kv.update("4");
  kv.update("5");
  kv.shapshot(6823754623710L,checkpointTs + 10);
  KvState<Integer,String,DbStateBackend> restored=snapshot1.restoreState(backend,IntSerializer.INSTANCE,StringSerializer.INSTANCE,"b",getClass().getClassLoader(),6823754623711L);
  restored.setCurrentKey(1);
  assertEquals("b",restored.value());
  restored.setCurrentKey(2);
  assertEquals("b",restored.value());
  restored.setCurrentKey(3);
  assertEquals("3",restored.value());
  restored.setCurrentKey(4);
  assertEquals("4",restored.value());
  backend.close();
}
