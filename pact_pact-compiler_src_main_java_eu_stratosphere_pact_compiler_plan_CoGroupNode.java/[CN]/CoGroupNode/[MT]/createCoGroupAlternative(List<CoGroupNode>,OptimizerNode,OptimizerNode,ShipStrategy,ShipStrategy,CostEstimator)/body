{
  GlobalProperties gp1=PactConnection.getGlobalPropertiesAfterConnection(pred1,this,ss1);
  LocalProperties lp1=PactConnection.getLocalPropertiesAfterConnection(pred1,this,ss1);
  LocalProperties lp2=PactConnection.getLocalPropertiesAfterConnection(pred2,this,ss2);
  GlobalProperties outGp=new GlobalProperties();
  outGp.setPartitioning(gp1.getPartitioning());
  CoGroupNode n=new CoGroupNode(this,pred1,pred2,input1,input2,outGp,new LocalProperties());
  n.input1.setShipStrategy(ss1);
  n.input2.setShipStrategy(ss2);
  n.getLocalProperties().setKeyOrder(Order.ASCENDING);
  n.getLocalProperties().setKeysGrouped(true);
  if (n.getLocalStrategy() == LocalStrategy.NONE) {
    if (lp1.getKeyOrder() == Order.ASCENDING && lp2.getKeyOrder() == Order.ASCENDING) {
      n.setLocalStrategy(LocalStrategy.MERGE);
    }
 else     if (lp1.getKeyOrder() != Order.ASCENDING && lp2.getKeyOrder() == Order.ASCENDING) {
      n.setLocalStrategy(LocalStrategy.SORT_FIRST_MERGE);
    }
 else     if (lp1.getKeyOrder() == Order.ASCENDING && lp2.getKeyOrder() != Order.ASCENDING) {
      n.setLocalStrategy(LocalStrategy.SORT_SECOND_MERGE);
    }
 else {
      n.setLocalStrategy(LocalStrategy.SORT_BOTH_MERGE);
    }
  }
  n.getGlobalProperties().filterByOutputContract(getOutputContract());
  n.getLocalProperties().filterByOutputContract(getOutputContract());
  estimator.costOperator(n);
  target.add(n);
}
