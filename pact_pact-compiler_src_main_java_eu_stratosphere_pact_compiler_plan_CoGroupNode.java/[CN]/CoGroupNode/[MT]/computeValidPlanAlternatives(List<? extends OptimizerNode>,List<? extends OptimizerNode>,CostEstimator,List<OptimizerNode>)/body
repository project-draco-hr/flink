{
  for (  OptimizerNode subPlan1 : altSubPlans1) {
    for (    OptimizerNode subPlan2 : altSubPlans2) {
      if (!areBranchCompatible(subPlan1,subPlan2)) {
        continue;
      }
      ShipStrategy ss1=this.input1.getShipStrategy();
      ShipStrategy ss2=this.input2.getShipStrategy();
      InterestingGlobalProperties gp1;
      InterestingGlobalProperties gp2;
      if (ss1.type() == ShipStrategyType.NONE) {
        gp1=subPlan1.getGlobalPropertiesForParent(this);
        if (ss2.type() == ShipStrategyType.NONE) {
          gp2=subPlan2.getGlobalPropertiesForParent(this);
          if (partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning().isComputablyPartitioned()) {
            ss1=new ForwardSS();
          }
          if (partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning().isComputablyPartitioned()) {
            if (!partitioningIsOnRightFields(gp1,0) || !gp1.getPartitioning().isComputablyPartitioned()) {
              ss2=new ForwardSS();
            }
 else {
              if (gp1.getPartitioning() == gp2.getPartitioning() && partitioningIsOnSameSubkey(gp1.getPartitionedFields(),gp2.getPartitionedFields())) {
                ss2=new ForwardSS();
              }
 else {
                if (gp1.getPartitioning() == PartitioningProperty.HASH_PARTITIONED && gp2.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED) {
                  createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new ForwardSS(),new PartitionHashSS(this.keySet2),estimator);
                  createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new PartitionRangeSS(this.keySet1),new ForwardSS(),estimator);
                }
 else                 if (gp1.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED && gp2.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) {
                  createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new ForwardSS(),new PartitionRangeSS(this.keySet2),estimator);
                  createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new PartitionHashSS(this.keySet1),new ForwardSS(),estimator);
                }
                continue;
              }
            }
          }
          if (ss1.type() == ShipStrategyType.FORWARD) {
            if (ss2.type() == ShipStrategyType.FORWARD) {
              createCoGroupAlternative(outputPlans,subPlan1,subPlan2,ss1,ss2,estimator);
              if (gp1.getPartitioning() != PartitioningProperty.RANGE_PARTITIONED) {
              }
            }
 else {
              if (partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) {
                createCoGroupAlternative(outputPlans,subPlan1,subPlan2,ss1,new PartitionHashSS(this.keySet2),estimator);
              }
 else               if (partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED) {
                createCoGroupAlternative(outputPlans,subPlan1,subPlan2,ss1,new PartitionRangeSS(this.keySet2),estimator);
                createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new PartitionHashSS(this.keySet1),new PartitionHashSS(this.keySet2),estimator);
              }
 else {
                throw new CompilerException("Invalid partitioning property for input 1 of CoGroup '" + getPactContract().getName() + "'.");
              }
            }
          }
 else           if (ss2.type() == ShipStrategyType.FORWARD) {
            if (partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) {
              createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new PartitionHashSS(this.keySet1),ss2,estimator);
            }
 else             if (partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED) {
              createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new PartitionRangeSS(this.keySet1),ss2,estimator);
              createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new PartitionHashSS(this.keySet1),new PartitionHashSS(this.keySet2),estimator);
            }
 else {
              throw new CompilerException("Invalid partitioning property for input 2 of CoGroup '" + getPactContract().getName() + "'.");
            }
          }
 else {
            createCoGroupAlternative(outputPlans,subPlan1,subPlan2,new PartitionHashSS(this.keySet1),new PartitionHashSS(this.keySet2),estimator);
          }
        }
 else {
          gp2=PactConnection.getGlobalPropertiesAfterConnection(subPlan2,this,1,input2.getShipStrategy());
switch (ss2.type()) {
case FORWARD:
            if (partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning().isPartitioned()) {
              if (gp2.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) {
                ss1=new PartitionHashSS(this.keySet1);
              }
 else               if (gp2.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED) {
                ss1=new PartitionRangeSS(this.keySet1);
              }
 else {
                throw new CompilerException();
              }
            }
 else {
              continue;
            }
          break;
case PARTITION_HASH:
        ss1=(partitioningIsOnSameSubkey(gp1.getPartitionedFields(),this.keySet2) && gp1.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) ? new ForwardSS() : new PartitionHashSS(this.keySet1);
      break;
case PARTITION_RANGE:
    ss1=(partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED) ? new ForwardSS() : new PartitionRangeSS(this.keySet1);
  break;
default :
throw new CompilerException("Invalid fixed shipping strategy '" + ss2.name() + "' for CoGroup contract '"+ getPactContract().getName()+ "'.");
}
createCoGroupAlternative(outputPlans,subPlan1,subPlan2,ss1,ss2,estimator);
}
}
 else if (ss2.type() == ShipStrategyType.NONE) {
gp1=PactConnection.getGlobalPropertiesAfterConnection(subPlan1,this,0,input1.getShipStrategy());
gp2=subPlan2.getGlobalPropertiesForParent(this);
switch (ss1.type()) {
case FORWARD:
if (partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning().isPartitioned()) {
if (gp1.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) {
ss2=new PartitionHashSS(this.keySet2);
}
 else if (gp1.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED) {
ss2=new PartitionRangeSS(this.keySet2);
}
 else {
throw new CompilerException();
}
}
 else {
continue;
}
break;
case PARTITION_HASH:
ss2=(partitioningIsOnSameSubkey(this.keySet1,gp2.getPartitionedFields()) && gp2.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) ? new ForwardSS() : new PartitionHashSS(this.keySet2);
break;
case PARTITION_RANGE:
ss2=(partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning() == PartitioningProperty.RANGE_PARTITIONED) ? new ForwardSS() : new PartitionRangeSS(this.keySet2);
break;
default :
throw new CompilerException("Invalid fixed shipping strategy '" + ss1.name() + "' for match contract '"+ getPactContract().getName()+ "'.");
}
createCoGroupAlternative(outputPlans,subPlan1,subPlan2,ss1,ss2,estimator);
}
 else {
gp1=PactConnection.getGlobalPropertiesAfterConnection(subPlan1,this,0,input1.getShipStrategy());
gp2=PactConnection.getGlobalPropertiesAfterConnection(subPlan2,this,1,input2.getShipStrategy());
if (gp1.getPartitioning().isComputablyPartitioned() && gp1.getPartitioning() == gp2.getPartitioning() && partitioningIsOnSameSubkey(gp1.getPartitionedFields(),gp2.getPartitionedFields())) {
createCoGroupAlternative(outputPlans,subPlan1,subPlan2,ss1,ss2,estimator);
}
 else {
continue;
}
}
}
}
}
