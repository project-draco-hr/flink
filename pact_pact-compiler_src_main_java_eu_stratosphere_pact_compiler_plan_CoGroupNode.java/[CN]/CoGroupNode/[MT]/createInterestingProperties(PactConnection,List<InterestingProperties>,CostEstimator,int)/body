{
  InterestingProperties p=new InterestingProperties();
  FieldList keyFields;
switch (inputNum) {
case 0:
    keyFields=this.keySet1;
  break;
case 1:
keyFields=this.keySet2;
break;
default :
throw new CompilerException("Invalid input number " + inputNum + " for CoGroup");
}
p.getGlobalProperties().setPartitioning(PartitioningProperty.ANY,(FieldList)keyFields.clone());
Ordering ordering=new Ordering();
for (Integer index : getPactContract().getKeyColumnNumbers(inputNum)) {
ordering.appendOrdering(index,null,Order.ANY);
}
p.getLocalProperties().setOrdering(ordering);
estimator.getHashPartitioningCost(input,p.getMaximalCosts());
Costs c=new Costs();
estimator.getLocalSortCost(this,input,c);
p.getMaximalCosts().addCosts(c);
InterestingProperties.mergeUnionOfInterestingProperties(target,p);
p=new InterestingProperties();
p.getGlobalProperties().setPartitioning(PartitioningProperty.ANY,(FieldList)keyFields.clone());
estimator.getHashPartitioningCost(input,p.getMaximalCosts());
InterestingProperties.mergeUnionOfInterestingProperties(target,p);
}
