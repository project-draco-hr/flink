{
  for (  List<OptimizerNode> predList1 : alternativeSubPlanCominations1) {
    for (    List<OptimizerNode> predList2 : alternativeSubPlanCominations2) {
      if (!areBranchCompatible(predList1,predList2)) {
        continue;
      }
      ShipStrategy ss1=checkShipStrategyCompatibility(this.input1);
      if (ss1 == null)       continue;
      ShipStrategy ss2=checkShipStrategyCompatibility(this.input2);
      if (ss2 == null)       continue;
      GlobalProperties gp1;
      GlobalProperties gp2;
      if (ss1 == ShipStrategy.NONE) {
        if (predList1.size() == 1) {
          gp1=predList1.get(0).getGlobalProperties();
        }
 else {
          gp1=new GlobalProperties();
        }
        if (ss2 == ShipStrategy.NONE) {
          if (predList2.size() == 1) {
            gp2=predList2.get(0).getGlobalProperties();
          }
 else {
            gp2=new GlobalProperties();
          }
          if (partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning().isComputablyPartitioned()) {
            ss1=ShipStrategy.FORWARD;
          }
          if (partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning().isComputablyPartitioned()) {
            if (!partitioningIsOnRightFields(gp1,0) || !gp1.getPartitioning().isComputablyPartitioned()) {
              ss2=ShipStrategy.FORWARD;
            }
 else {
              if (gp1.getPartitioning() == gp2.getPartitioning() && partitioningIsOnSameSubkey(gp1.getPartitionedFields(),gp2.getPartitionedFields())) {
                ss2=ShipStrategy.FORWARD;
              }
 else {
                if (gp1.getPartitioning() == PartitionProperty.HASH_PARTITIONED && gp2.getPartitioning() == PartitionProperty.RANGE_PARTITIONED) {
                  createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.FORWARD,ShipStrategy.PARTITION_HASH,estimator);
                  createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.PARTITION_RANGE,ShipStrategy.FORWARD,estimator);
                }
 else                 if (gp1.getPartitioning() == PartitionProperty.RANGE_PARTITIONED && gp2.getPartitioning() == PartitionProperty.HASH_PARTITIONED) {
                  createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.FORWARD,ShipStrategy.PARTITION_RANGE,estimator);
                  createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.PARTITION_HASH,ShipStrategy.FORWARD,estimator);
                }
                continue;
              }
            }
          }
          if (ss1 == ShipStrategy.FORWARD) {
            if (ss2 == ShipStrategy.FORWARD) {
              createCoGroupAlternative(outputPlans,predList1,predList2,ss1,ss2,estimator);
              if (gp1.getPartitioning() != PartitionProperty.RANGE_PARTITIONED) {
              }
            }
 else {
              if (partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning() == PartitionProperty.HASH_PARTITIONED) {
                createCoGroupAlternative(outputPlans,predList1,predList2,ss1,ShipStrategy.PARTITION_HASH,estimator);
              }
 else               if (partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning() == PartitionProperty.RANGE_PARTITIONED) {
                createCoGroupAlternative(outputPlans,predList1,predList2,ss1,ShipStrategy.PARTITION_RANGE,estimator);
                createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.PARTITION_HASH,ShipStrategy.PARTITION_HASH,estimator);
              }
 else {
                throw new CompilerException("Invalid partitioning property for input 1 of CoGroup '" + getPactContract().getName() + "'.");
              }
            }
          }
 else           if (ss2 == ShipStrategy.FORWARD) {
            if (partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning() == PartitionProperty.HASH_PARTITIONED) {
              createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.PARTITION_HASH,ss2,estimator);
            }
 else             if (partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning() == PartitionProperty.RANGE_PARTITIONED) {
              createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.PARTITION_RANGE,ss2,estimator);
              createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.PARTITION_HASH,ShipStrategy.PARTITION_HASH,estimator);
            }
 else {
              throw new CompilerException("Invalid partitioning property for input 2 of CoGroup '" + getPactContract().getName() + "'.");
            }
          }
 else {
            createCoGroupAlternative(outputPlans,predList1,predList2,ShipStrategy.PARTITION_HASH,ShipStrategy.PARTITION_HASH,estimator);
          }
        }
 else {
          if (predList2.size() == 1) {
            gp2=PactConnection.getGlobalPropertiesAfterConnection(predList2.get(0),this,ss2);
          }
 else {
            gp2=new GlobalProperties();
          }
switch (ss2) {
case FORWARD:
            if (partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning().isPartitioned()) {
              if (gp2.getPartitioning() == PartitionProperty.HASH_PARTITIONED) {
                ss1=ShipStrategy.PARTITION_HASH;
              }
 else               if (gp2.getPartitioning() == PartitionProperty.RANGE_PARTITIONED) {
                ss1=ShipStrategy.PARTITION_RANGE;
              }
 else {
                throw new CompilerException();
              }
            }
 else {
              continue;
            }
          break;
case PARTITION_HASH:
        int[] keyFields2=getPactContract().getKeyColumnNumbers(1);
      ss1=(partitioningIsOnSameSubkey(gp1.getPartitionedFields(),keyFields2) && gp1.getPartitioning() == PartitionProperty.HASH_PARTITIONED) ? ShipStrategy.FORWARD : ShipStrategy.PARTITION_HASH;
    break;
case PARTITION_RANGE:
  ss1=(partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning() == PartitionProperty.RANGE_PARTITIONED) ? ShipStrategy.FORWARD : ShipStrategy.PARTITION_RANGE;
break;
default :
throw new CompilerException("Invalid fixed shipping strategy '" + ss2.name() + "' for CoGroup contract '"+ getPactContract().getName()+ "'.");
}
createCoGroupAlternative(outputPlans,predList1,predList2,ss1,ss2,estimator);
}
}
 else if (ss2 == ShipStrategy.NONE) {
if (predList1.size() == 1) {
gp1=PactConnection.getGlobalPropertiesAfterConnection(predList1.get(0),this,ss1);
}
 else {
gp1=new GlobalProperties();
}
if (predList2.size() == 1) {
gp2=predList2.get(0).getGlobalProperties();
}
 else {
gp2=new GlobalProperties();
}
switch (ss1) {
case FORWARD:
if (partitioningIsOnRightFields(gp1,0) && gp1.getPartitioning().isPartitioned()) {
if (gp1.getPartitioning() == PartitionProperty.HASH_PARTITIONED) {
ss2=ShipStrategy.PARTITION_HASH;
}
 else if (gp1.getPartitioning() == PartitionProperty.RANGE_PARTITIONED) {
ss2=ShipStrategy.PARTITION_RANGE;
}
 else {
throw new CompilerException();
}
}
 else {
continue;
}
break;
case PARTITION_HASH:
int[] keyFields1=getPactContract().getKeyColumnNumbers(0);
ss2=(partitioningIsOnSameSubkey(keyFields1,gp2.getPartitionedFields()) && gp2.getPartitioning() == PartitionProperty.HASH_PARTITIONED) ? ShipStrategy.FORWARD : ShipStrategy.PARTITION_HASH;
break;
case PARTITION_RANGE:
ss2=(partitioningIsOnRightFields(gp2,1) && gp2.getPartitioning() == PartitionProperty.RANGE_PARTITIONED) ? ShipStrategy.FORWARD : ShipStrategy.PARTITION_RANGE;
break;
default :
throw new CompilerException("Invalid fixed shipping strategy '" + ss1.name() + "' for match contract '"+ getPactContract().getName()+ "'.");
}
createCoGroupAlternative(outputPlans,predList1,predList2,ss1,ss2,estimator);
}
 else {
if (predList1.size() == 1) {
gp1=PactConnection.getGlobalPropertiesAfterConnection(predList1.get(0),this,ss1);
}
 else {
gp1=new GlobalProperties();
}
if (predList2.size() == 1) {
gp2=PactConnection.getGlobalPropertiesAfterConnection(predList2.get(0),this,ss2);
}
 else {
gp2=new GlobalProperties();
}
if (gp1.getPartitioning().isComputablyPartitioned() && gp1.getPartitioning() == gp2.getPartitioning() && partitioningIsOnSameSubkey(gp1.getPartitionedFields(),gp2.getPartitionedFields())) {
createCoGroupAlternative(outputPlans,predList1,predList2,ss1,ss2,estimator);
}
 else {
}
}
}
}
}
