{
  super(pactContract);
  Configuration conf=getPactContract().getParameters();
  String localStrategy=conf.getString(PactCompiler.HINT_LOCAL_STRATEGY,null);
  if (localStrategy != null) {
    if (PactCompiler.HINT_LOCAL_STRATEGY_SORT_BOTH_MERGE.equals(localStrategy)) {
      setDriverStrategy(DriverStrategy.MERGE);
      this.acceptedLocalFirst=LocalStrategy.SORT;
      this.acceptedLocalSecond=LocalStrategy.SORT;
    }
 else     if (PactCompiler.HINT_LOCAL_STRATEGY_SORT_FIRST_MERGE.equals(localStrategy)) {
      setDriverStrategy(DriverStrategy.MERGE);
      this.acceptedLocalFirst=LocalStrategy.SORT;
      this.acceptedLocalSecond=LocalStrategy.NONE;
    }
 else     if (PactCompiler.HINT_LOCAL_STRATEGY_SORT_SECOND_MERGE.equals(localStrategy)) {
      setDriverStrategy(DriverStrategy.MERGE);
      this.acceptedLocalFirst=LocalStrategy.NONE;
      this.acceptedLocalSecond=LocalStrategy.SORT;
    }
 else     if (PactCompiler.HINT_LOCAL_STRATEGY_MERGE.equals(localStrategy)) {
      setDriverStrategy(DriverStrategy.MERGE);
      this.acceptedLocalFirst=LocalStrategy.NONE;
      this.acceptedLocalSecond=LocalStrategy.NONE;
    }
 else {
      throw new CompilerException("Invalid local strategy hint for match contract: " + localStrategy);
    }
  }
 else {
    this.acceptedLocalFirst=this.acceptedLocalSecond=null;
  }
  this.keys1Order=Utils.createOrdering(this.keySet1);
  this.keys2Order=Utils.createOrdering(this.keySet2);
}
