{
  super(template,nodeName,driverStrategy);
  this.input=input;
  this.comparators=new TypeComparatorFactory<?>[driverStrategy.getNumRequiredComparators()];
  this.driverKeys=new FieldList[driverStrategy.getNumRequiredComparators()];
  this.driverSortOrders=new boolean[driverStrategy.getNumRequiredComparators()][];
  if (driverStrategy.getNumRequiredComparators() > 0) {
    this.driverKeys[0]=driverKeyFields;
    this.driverSortOrders[0]=driverSortOrders;
  }
  if (this.input.getShipStrategy() == ShipStrategyType.BROADCAST) {
    this.input.setReplicationFactor(getDegreeOfParallelism());
  }
  final PlanNode predNode=input.getSource();
  if (predNode.branchPlan != null && !predNode.branchPlan.isEmpty()) {
    if (this.branchPlan == null) {
      this.branchPlan=new HashMap<OptimizerNode,PlanNode>();
    }
    this.branchPlan.putAll(predNode.branchPlan);
  }
}
