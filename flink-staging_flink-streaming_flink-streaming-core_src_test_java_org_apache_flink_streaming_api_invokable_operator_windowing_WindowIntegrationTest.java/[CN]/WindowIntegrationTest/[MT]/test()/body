{
  List<Integer> inputs=new ArrayList<Integer>();
  inputs.add(1);
  inputs.add(2);
  inputs.add(2);
  inputs.add(3);
  inputs.add(4);
  inputs.add(5);
  inputs.add(10);
  inputs.add(11);
  inputs.add(11);
  StreamExecutionEnvironment env=new TestStreamEnvironment(2,MEMORYSIZE);
  DataStream<Integer> source=env.fromCollection(inputs);
  source.window(Count.of(2)).every(Count.of(3)).sum(0).getDiscretizedStream().addSink(new CentralSink1());
  source.window(Count.of(4)).groupBy(new ModKey(2)).mapWindow(new IdentityWindowMap()).flatten().addSink(new CentralSink2());
  KeySelector<Integer,?> key=new ModKey(2);
  Timestamp<Integer> ts=new Timestamp<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Integer value){
      return value;
    }
  }
;
  source.groupBy(key).window(Time.of(4,ts,1)).sum(0).getDiscretizedStream().addSink(new DistributedSink1());
  source.groupBy(new ModKey(3)).window(Count.of(2)).groupBy(new ModKey(2)).mapWindow(new IdentityWindowMap()).flatten().addSink(new DistributedSink2());
  source.window(Count.of(2)).every(Count.of(3)).min(0).getDiscretizedStream().addSink(new CentralSink3());
  source.groupBy(key).window(Time.of(4,ts,1)).max(0).getDiscretizedStream().addSink(new DistributedSink3());
  env.execute();
  List<StreamWindow<Integer>> expected1=new ArrayList<StreamWindow<Integer>>();
  expected1.add(StreamWindow.fromElements(4));
  expected1.add(StreamWindow.fromElements(9));
  expected1.add(StreamWindow.fromElements(22));
  validateOutput(expected1,CentralSink1.windows);
  List<StreamWindow<Integer>> expected2=new ArrayList<StreamWindow<Integer>>();
  expected2.add(StreamWindow.fromElements(2,2));
  expected2.add(StreamWindow.fromElements(1,3));
  expected2.add(StreamWindow.fromElements(4,10));
  expected2.add(StreamWindow.fromElements(5,11));
  expected2.add(StreamWindow.fromElements(11));
  validateOutput(expected2,CentralSink2.windows);
  List<StreamWindow<Integer>> expected3=new ArrayList<StreamWindow<Integer>>();
  expected3.add(StreamWindow.fromElements(4));
  expected3.add(StreamWindow.fromElements(5));
  expected3.add(StreamWindow.fromElements(22));
  expected3.add(StreamWindow.fromElements(8));
  expected3.add(StreamWindow.fromElements(10));
  validateOutput(expected3,DistributedSink1.windows);
  List<StreamWindow<Integer>> expected4=new ArrayList<StreamWindow<Integer>>();
  expected4.add(StreamWindow.fromElements(2,2));
  expected4.add(StreamWindow.fromElements(1));
  expected4.add(StreamWindow.fromElements(4));
  expected4.add(StreamWindow.fromElements(5,11));
  expected4.add(StreamWindow.fromElements(10));
  expected4.add(StreamWindow.fromElements(11));
  expected4.add(StreamWindow.fromElements(3));
  validateOutput(expected4,DistributedSink2.windows);
  List<StreamWindow<Integer>> expected5=new ArrayList<StreamWindow<Integer>>();
  expected5.add(StreamWindow.fromElements(2));
  expected5.add(StreamWindow.fromElements(4));
  expected5.add(StreamWindow.fromElements(11));
  validateOutput(expected5,CentralSink3.windows);
  List<StreamWindow<Integer>> expected6=new ArrayList<StreamWindow<Integer>>();
  expected6.add(StreamWindow.fromElements(3));
  expected6.add(StreamWindow.fromElements(5));
  expected6.add(StreamWindow.fromElements(11));
  expected6.add(StreamWindow.fromElements(4));
  expected6.add(StreamWindow.fromElements(10));
}
