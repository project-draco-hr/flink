{
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  SingleOutputStreamOperator<String> source=env.generateSequence(0,20).map(new MapFunction<Long,String>(){
    /** 
 * The mapping method. Takes an element from the input data set and transforms
 * it into exactly one element.
 * @param value The input value.
 * @return The transformed value
 * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation
 * to fail and may trigger recovery.
 */
    @Override public String map(    Long value) throws Exception {
      return "message #" + value;
    }
  }
);
  Map<String,String> config=new HashMap<>();
  config.put(ElasticsearchSink.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS,"1");
  List<InetSocketAddress> transports=new ArrayList<>();
  transports.add(new InetSocketAddress(InetAddress.getByName("127.0.0.1"),9300));
  source.addSink(new ElasticsearchSink<>(config,transports,new ElasticsearchSinkFunction<String>(){
    @Override public void process(    String element,    RuntimeContext ctx,    RequestIndexer indexer){
      indexer.add(createIndexRequest(element));
    }
  }
));
  env.execute("Elasticsearch Example");
}
