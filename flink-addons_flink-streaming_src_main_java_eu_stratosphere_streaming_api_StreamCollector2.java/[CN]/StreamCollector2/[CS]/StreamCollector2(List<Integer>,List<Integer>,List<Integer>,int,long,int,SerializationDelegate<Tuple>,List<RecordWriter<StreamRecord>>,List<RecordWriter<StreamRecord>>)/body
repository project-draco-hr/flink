{
  notPartitionedCollectors=new ArrayList<StreamCollector<Tuple>>(batchSizesOfNotPartitioned.size());
  partitionedCollectors=new ArrayList<StreamCollector<Tuple>[]>(batchSizesOfPartitioned.size());
  this.keyPostition=keyPosition;
  for (int i=0; i < batchSizesOfNotPartitioned.size(); i++) {
    List<RecordWriter<StreamRecord>> output=new ArrayList<RecordWriter<StreamRecord>>();
    output.add(notPartitionedOutputs.get(i));
    notPartitionedCollectors.add(new StreamCollector<Tuple>(batchSizesOfNotPartitioned.get(i),batchTimeout,channelID,serializationDelegate,output));
  }
  for (int i=0; i < batchSizesOfPartitioned.size(); i++) {
    StreamCollector<Tuple>[] collectors=new StreamCollector[parallelismOfOutput.get(i)];
    for (int j=0; j < collectors.length; j++) {
      List<RecordWriter<StreamRecord>> output=new ArrayList<RecordWriter<StreamRecord>>();
      output.add(partitionedOutputs.get(i));
      collectors[j]=new StreamCollector<Tuple>(batchSizesOfPartitioned.get(i),batchTimeout,channelID,serializationDelegate,output);
    }
    partitionedCollectors.add(collectors);
  }
}
