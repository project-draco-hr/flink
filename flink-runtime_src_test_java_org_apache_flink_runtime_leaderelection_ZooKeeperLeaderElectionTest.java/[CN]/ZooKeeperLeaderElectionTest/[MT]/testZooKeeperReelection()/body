{
  Configuration configuration=new Configuration();
  configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY,testingServer.getConnectString());
  configuration.setString(ConfigConstants.HA_MODE,"zookeeper");
  Deadline deadline=new FiniteDuration(5,TimeUnit.MINUTES).fromNow();
  int num=20;
  ZooKeeperLeaderElectionService[] leaderElectionService=new ZooKeeperLeaderElectionService[num];
  TestingContender[] contenders=new TestingContender[num];
  ZooKeeperLeaderRetrievalService leaderRetrievalService=null;
  TestingListener listener=new TestingListener();
  try {
    leaderRetrievalService=ZooKeeperUtils.createLeaderRetrievalService(configuration);
    LOG.debug("Start leader retrieval service for the TestingListener.");
    leaderRetrievalService.start(listener);
    for (int i=0; i < num; i++) {
      leaderElectionService[i]=ZooKeeperUtils.createLeaderElectionService(configuration);
      contenders[i]=new TestingContender(TEST_URL + "_" + i,leaderElectionService[i]);
      LOG.debug("Start leader election service for contender #{}.",i);
      leaderElectionService[i].start(contenders[i]);
    }
    String pattern=TEST_URL + "_" + "(\\d+)";
    Pattern regex=Pattern.compile(pattern);
    int numberSeenLeaders=0;
    while (deadline.hasTimeLeft() && numberSeenLeaders < num) {
      LOG.debug("Wait for new leader #{}.",numberSeenLeaders);
      String address=listener.waitForNewLeader(deadline.timeLeft().toMillis());
      Matcher m=regex.matcher(address);
      if (m.find()) {
        int index=Integer.parseInt(m.group(1));
        TestingContender contender=contenders[index];
        if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {
          LOG.debug("Stop leader election service of contender #{}.",numberSeenLeaders);
          leaderElectionService[index].stop();
          leaderElectionService[index]=null;
          numberSeenLeaders++;
        }
      }
 else {
        fail("Did not find the leader's index.");
      }
    }
    assertFalse(deadline.isOverdue());
    assertEquals(num,numberSeenLeaders);
  }
  finally {
    if (leaderRetrievalService != null) {
      leaderRetrievalService.stop();
    }
    for (    ZooKeeperLeaderElectionService electionService : leaderElectionService) {
      if (electionService != null) {
        electionService.stop();
      }
    }
  }
}
