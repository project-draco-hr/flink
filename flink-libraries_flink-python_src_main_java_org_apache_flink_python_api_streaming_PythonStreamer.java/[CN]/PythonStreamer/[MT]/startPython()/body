{
  this.outputFilePath=FLINK_TMP_DATA_DIR + "/" + id+ this.function.getRuntimeContext().getIndexOfThisSubtask()+ "output";
  this.inputFilePath=FLINK_TMP_DATA_DIR + "/" + id+ this.function.getRuntimeContext().getIndexOfThisSubtask()+ "input";
  sender.open(inputFilePath);
  receiver.open(outputFilePath);
  String path=function.getRuntimeContext().getDistributedCache().getFile(FLINK_PYTHON_DC_ID).getAbsolutePath();
  String planPath=path + FLINK_PYTHON_PLAN_NAME;
  String pythonBinaryPath=usePython3 ? FLINK_PYTHON3_BINARY_PATH : FLINK_PYTHON2_BINARY_PATH;
  try {
    Runtime.getRuntime().exec(pythonBinaryPath);
  }
 catch (  IOException ex) {
    throw new RuntimeException(pythonBinaryPath + " does not point to a valid python binary.");
  }
  if (debug) {
    socket.setSoTimeout(0);
    LOG.info("Waiting for Python Process : " + function.getRuntimeContext().getTaskName() + " Run python "+ planPath+ planArguments);
  }
 else {
    process=Runtime.getRuntime().exec(pythonBinaryPath + " -O -B " + planPath+ planArguments);
    new StreamPrinter(process.getInputStream()).start();
    new StreamPrinter(process.getErrorStream(),true,msg).start();
  }
  shutdownThread=new Thread(){
    @Override public void run(){
      try {
        destroyProcess();
      }
 catch (      IOException ex) {
      }
    }
  }
;
  Runtime.getRuntime().addShutdownHook(shutdownThread);
  OutputStream processOutput=process.getOutputStream();
  processOutput.write("operator\n".getBytes());
  processOutput.write(("" + server.getLocalPort() + "\n").getBytes());
  processOutput.write((id + "\n").getBytes());
  processOutput.write((inputFilePath + "\n").getBytes());
  processOutput.write((outputFilePath + "\n").getBytes());
  processOutput.flush();
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException ex) {
  }
  if (!debug) {
    try {
      process.exitValue();
      throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely."+ msg);
    }
 catch (    IllegalThreadStateException ise) {
    }
  }
  socket=server.accept();
  in=socket.getInputStream();
  out=socket.getOutputStream();
}
