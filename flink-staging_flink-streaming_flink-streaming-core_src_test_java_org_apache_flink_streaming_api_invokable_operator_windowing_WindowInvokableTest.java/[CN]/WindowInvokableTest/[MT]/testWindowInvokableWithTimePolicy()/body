{
  List<Integer> inputs=new ArrayList<Integer>();
  inputs.add(1);
  inputs.add(2);
  inputs.add(2);
  inputs.add(3);
  inputs.add(4);
  inputs.add(5);
  inputs.add(10);
  inputs.add(11);
  inputs.add(11);
  List<Integer> expected=new ArrayList<Integer>();
  expected.add(12);
  expected.add(12);
  expected.add(5);
  expected.add(10);
  expected.add(32);
  Timestamp<Integer> myTimeStamp=new Timestamp<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Integer value){
      return value;
    }
  }
;
  ReduceFunction<Integer> myReduceFunction=new ReduceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer reduce(    Integer value1,    Integer value2) throws Exception {
      return value1 + value2;
    }
  }
;
  LinkedList<TriggerPolicy<Integer>> triggers=new LinkedList<TriggerPolicy<Integer>>();
  triggers.add(new TimeTriggerPolicy<Integer>(2L,new TimestampWrapper<Integer>(myTimeStamp,1),2L));
  LinkedList<EvictionPolicy<Integer>> evictions=new LinkedList<EvictionPolicy<Integer>>();
  evictions.add(new TimeEvictionPolicy<Integer>(4L,new TimestampWrapper<Integer>(myTimeStamp,1)));
  WindowInvokable<Integer,Integer> invokable=new WindowReducer<Integer>(myReduceFunction,triggers,evictions);
  ArrayList<Integer> result=new ArrayList<Integer>();
  for (  Integer t : MockContext.createAndExecute(invokable,inputs)) {
    result.add(t);
  }
  assertEquals(expected,result);
}
