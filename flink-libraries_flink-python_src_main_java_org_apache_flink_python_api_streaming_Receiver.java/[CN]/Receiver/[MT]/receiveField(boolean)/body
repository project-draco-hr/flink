{
  byte type=fileBuffer.get();
switch (type) {
case TYPE_TUPLE:
    int tupleSize=fileBuffer.get();
  Tuple tuple=createTuple(tupleSize);
for (int x=0; x < tupleSize; x++) {
  tuple.setField(receiveField(normalized),x);
}
return tuple;
case TYPE_BOOLEAN:
return fileBuffer.get() == 1;
case TYPE_BYTE:
return fileBuffer.get();
case TYPE_SHORT:
if (normalized) {
return (int)fileBuffer.getShort();
}
 else {
return fileBuffer.getShort();
}
case TYPE_INTEGER:
return fileBuffer.getInt();
case TYPE_LONG:
if (normalized) {
return new Long(fileBuffer.getLong()).intValue();
}
 else {
return fileBuffer.getLong();
}
case TYPE_FLOAT:
if (normalized) {
return (double)fileBuffer.getFloat();
}
 else {
return fileBuffer.getFloat();
}
case TYPE_DOUBLE:
return fileBuffer.getDouble();
case TYPE_STRING:
int stringSize=fileBuffer.getInt();
byte[] buffer=new byte[stringSize];
fileBuffer.get(buffer);
return new String(buffer);
case TYPE_BYTES:
int bytessize=fileBuffer.getInt();
byte[] bytebuffer=new byte[bytessize];
fileBuffer.get(bytebuffer);
return bytebuffer;
case TYPE_NULL:
return null;
default :
return new CustomTypeDeserializer(type).deserialize();
}
}
