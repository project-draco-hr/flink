{
  KeyValuePair<K,VP> pair=probePairSerialization.newInstance();
  while (currentProbePartitionReader.read(pair)) {
    K key=pair.getKey();
    if (hashMap.contains(key)) {
      currentKey=key;
      currentBuildValuesIterable=hashMap.get(currentKey);
      currentProbeValuesIterable.value=pair.getValue();
      return true;
    }
  }
  if (currentPartition >= numberOfPartitions - 1) {
    return false;
  }
  try {
    currentProbePartitionReader.close();
    currentPartition++;
    LOG.debug("loading partition " + currentPartition);
    hashMap.clear();
    currentBuildPartitionReader=ioManager.createChannelReader(buildPartitionIDs.get(currentPartition),freeSegments,false);
    KeyValuePair<K,VB> tmp=buildPairSerialization.newInstance();
    while (currentBuildPartitionReader.read(tmp)) {
      hashMap.put(tmp.getKey(),tmp.getValue());
      tmp=buildPairSerialization.newInstance();
    }
    currentBuildPartitionReader.close();
    currentProbePartitionReader=ioManager.createChannelReader(probePartitionIDs.get(currentPartition),freeSegments,false);
    return next();
  }
 catch (  ServiceException e) {
    throw new IOException(e);
  }
catch (  Exception e) {
    throw new IOException(e);
  }
}
