{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
      graph.getUndirected().getEdges().writeAsCsv(resultPath);
      env.execute();
      return "1,2,12\n" + "2,1,12\n" + "1,3,13\n"+ "3,1,13\n"+ "2,3,23\n"+ "3,2,23\n"+ "3,4,34\n"+ "4,3,34\n"+ "3,5,35\n"+ "5,3,35\n"+ "4,5,45\n"+ "5,4,45\n"+ "5,1,51\n"+ "1,5,51\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    graph.reverse().getEdges().writeAsCsv(resultPath);
    env.execute();
    return "2,1,12\n" + "3,1,13\n" + "3,2,23\n"+ "4,3,34\n"+ "5,3,35\n"+ "5,4,45\n"+ "1,5,51\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
  graph.outDegrees().writeAsCsv(resultPath);
  env.execute();
  return "1,2\n" + "2,1\n" + "3,2\n"+ "4,1\n"+ "5,1\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph.inDegrees().writeAsCsv(resultPath);
env.execute();
return "1,1\n" + "2,1\n" + "3,2\n"+ "4,1\n"+ "5,2\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph.getDegrees().writeAsCsv(resultPath);
env.execute();
return "1,3\n" + "2,2\n" + "3,4\n"+ "4,2\n"+ "5,3\n";
}
case 6:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph.subgraph(new FilterFunction<Long>(){
public boolean filter(Long value) throws Exception {
return (value > 2);
}
}
,new FilterFunction<Long>(){
public boolean filter(Long value) throws Exception {
return (value > 34);
}
}
).getEdges().writeAsCsv(resultPath);
env.execute();
return "3,5,35\n" + "4,5,45\n";
}
case 7:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph.numberOfVertices().writeAsText(resultPath);
env.execute();
return "5";
}
case 8:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph.numberOfEdges().writeAsText(resultPath);
env.execute();
return "7";
}
case 9:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph.getVertexIds().writeAsText(resultPath);
env.execute();
return "1\n2\n3\n4\n5\n";
}
case 10:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph.getEdgeIds().writeAsCsv(resultPath);
env.execute();
return "1,2\n" + "1,3\n" + "2,3\n"+ "3,4\n"+ "3,5\n"+ "4,5\n"+ "5,1\n";
}
case 11:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
List<Tuple2<Long,Long>> vertices=new ArrayList<Tuple2<Long,Long>>();
List<Tuple3<Long,Long,Long>> edges=new ArrayList<Tuple3<Long,Long,Long>>();
vertices.add(new Tuple2<Long,Long>(6L,6L));
edges.add(new Tuple3<Long,Long,Long>(6L,1L,61L));
graph=graph.union(graph.fromCollection(vertices,edges));
graph.getEdges().writeAsCsv(resultPath);
env.execute();
return "1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n"+ "6,1,61\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
