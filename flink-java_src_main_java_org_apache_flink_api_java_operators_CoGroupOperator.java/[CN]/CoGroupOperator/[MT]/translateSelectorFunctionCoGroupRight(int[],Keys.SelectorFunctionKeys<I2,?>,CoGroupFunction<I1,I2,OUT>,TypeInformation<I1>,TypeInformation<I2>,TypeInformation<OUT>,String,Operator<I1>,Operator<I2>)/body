{
  if (!inputType1.isTupleType()) {
    throw new InvalidParameterException("Should not happen.");
  }
  @SuppressWarnings("unchecked") final Keys.SelectorFunctionKeys<I2,K> keys2=(Keys.SelectorFunctionKeys<I2,K>)rawKeys2;
  final TypeInformation<Tuple2<K,I2>> typeInfoWithKey2=new TupleTypeInfo<Tuple2<K,I2>>(keys2.getKeyType(),inputType2);
  final KeyExtractingMapper<I2,K> extractor2=new KeyExtractingMapper<I2,K>(keys2.getKeyExtractor());
  final MapOperatorBase<I2,Tuple2<K,I2>,MapFunction<I2,Tuple2<K,I2>>> keyMapper2=new MapOperatorBase<I2,Tuple2<K,I2>,MapFunction<I2,Tuple2<K,I2>>>(extractor2,new UnaryOperatorInformation<I2,Tuple2<K,I2>>(inputType2,typeInfoWithKey2),"Key Extractor 2");
  final PlanRightUnwrappingCoGroupOperator<I1,I2,OUT,K> cogroup=new PlanRightUnwrappingCoGroupOperator<I1,I2,OUT,K>(function,logicalKeyPositions1,keys2,name,outputType,inputType1,typeInfoWithKey2);
  cogroup.setFirstInput(input1);
  cogroup.setSecondInput(keyMapper2);
  keyMapper2.setInput(input2);
  keyMapper2.setDegreeOfParallelism(input2.getDegreeOfParallelism());
  return cogroup;
}
