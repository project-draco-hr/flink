{
  if (!inputType1.isTupleType()) {
    throw new InvalidParameterException("Should not happen.");
  }
  @SuppressWarnings("unchecked") final SelectorFunctionKeys<I2,K> keys2=(SelectorFunctionKeys<I2,K>)rawKeys2;
  final TypeInformation<Tuple2<K,I2>> typeInfoWithKey2=SelectorFunctionKeys.createTypeWithKey(keys2);
  final Operator<Tuple2<K,I2>> keyedInput2=SelectorFunctionKeys.appendKeyExtractor(input2,keys2);
  final PlanRightUnwrappingCoGroupOperator<I1,I2,OUT,K> cogroup=new PlanRightUnwrappingCoGroupOperator<>(function,logicalKeyPositions1,keys2,name,outputType,inputType1,typeInfoWithKey2);
  cogroup.setFirstInput(input1);
  cogroup.setSecondInput(keyedInput2);
  return cogroup;
}
