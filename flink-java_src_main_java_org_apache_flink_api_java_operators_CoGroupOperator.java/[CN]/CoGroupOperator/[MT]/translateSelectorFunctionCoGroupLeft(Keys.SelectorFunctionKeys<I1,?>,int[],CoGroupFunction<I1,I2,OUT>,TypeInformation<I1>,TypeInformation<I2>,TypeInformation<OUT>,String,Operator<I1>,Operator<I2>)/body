{
  if (!inputType2.isTupleType()) {
    throw new InvalidParameterException("Should not happen.");
  }
  @SuppressWarnings("unchecked") final Keys.SelectorFunctionKeys<I1,K> keys1=(Keys.SelectorFunctionKeys<I1,K>)rawKeys1;
  final TypeInformation<Tuple2<K,I1>> typeInfoWithKey1=new TupleTypeInfo<Tuple2<K,I1>>(keys1.getKeyType(),inputType1);
  final KeyExtractingMapper<I1,K> extractor1=new KeyExtractingMapper<I1,K>(keys1.getKeyExtractor());
  final MapOperatorBase<I1,Tuple2<K,I1>,MapFunction<I1,Tuple2<K,I1>>> keyMapper1=new MapOperatorBase<I1,Tuple2<K,I1>,MapFunction<I1,Tuple2<K,I1>>>(extractor1,new UnaryOperatorInformation<I1,Tuple2<K,I1>>(inputType1,typeInfoWithKey1),"Key Extractor 1");
  final PlanLeftUnwrappingCoGroupOperator<I1,I2,OUT,K> cogroup=new PlanLeftUnwrappingCoGroupOperator<I1,I2,OUT,K>(function,keys1,logicalKeyPositions2,name,outputType,typeInfoWithKey1,inputType2);
  cogroup.setFirstInput(keyMapper1);
  cogroup.setSecondInput(input2);
  keyMapper1.setInput(input1);
  keyMapper1.setDegreeOfParallelism(input1.getDegreeOfParallelism());
  return cogroup;
}
