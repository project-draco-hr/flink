{
  super(input1,input2,returnType);
  this.function=function;
  this.defaultName=defaultName;
  if (keys1 == null || keys2 == null) {
    throw new NullPointerException();
  }
  if (input1 instanceof SolutionSetPlaceHolder) {
    if (keys1 instanceof ExpressionKeys) {
      int[] positions=((ExpressionKeys<?>)keys1).computeLogicalKeyPositions();
      ((SolutionSetPlaceHolder<?>)input1).checkJoinKeyFields(positions);
    }
 else {
      throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.");
    }
  }
  if (input2 instanceof SolutionSetPlaceHolder) {
    if (keys2 instanceof ExpressionKeys) {
      int[] positions=((ExpressionKeys<?>)keys2).computeLogicalKeyPositions();
      ((SolutionSetPlaceHolder<?>)input2).checkJoinKeyFields(positions);
    }
 else {
      throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.");
    }
  }
  this.keys1=keys1;
  this.keys2=keys2;
  extractSemanticAnnotationsFromUdf(function.getClass());
}
