{
  Class<? extends Scheduler> schedulerClass;
  try {
    schedulerClass=(Class<? extends Scheduler>)Class.forName(schedulerClassName);
  }
 catch (  ClassNotFoundException e) {
    LOG.error("Cannot find class " + schedulerClassName + ": "+ StringUtils.stringifyException(e));
    return null;
  }
  Constructor<? extends Scheduler> constructor;
  try {
    Class<?>[] constructorArgs={SchedulingListener.class,InstanceManager.class};
    constructor=schedulerClass.getConstructor(constructorArgs);
  }
 catch (  NoSuchMethodException e) {
    LOG.error("Cannot create scheduler: " + StringUtils.stringifyException(e));
    return null;
  }
catch (  SecurityException e) {
    LOG.error("Cannot create scheduler: " + StringUtils.stringifyException(e));
    return null;
  }
  Scheduler scheduler;
  try {
    scheduler=constructor.newInstance(schedulingListener,instanceManager);
  }
 catch (  InstantiationException e) {
    LOG.error("Cannot create scheduler: " + StringUtils.stringifyException(e));
    return null;
  }
catch (  IllegalAccessException e) {
    LOG.error("Cannot create scheduler: " + StringUtils.stringifyException(e));
    return null;
  }
catch (  IllegalArgumentException e) {
    LOG.error("Cannot create scheduler: " + StringUtils.stringifyException(e));
    return null;
  }
catch (  InvocationTargetException e) {
    LOG.error("Cannot create scheduler: " + StringUtils.stringifyException(e));
    return null;
  }
  return scheduler;
}
