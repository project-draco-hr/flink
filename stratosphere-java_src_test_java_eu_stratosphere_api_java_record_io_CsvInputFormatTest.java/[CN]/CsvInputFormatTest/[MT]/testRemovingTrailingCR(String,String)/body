{
  File tempFile=null;
  String fileContent=CsvInputFormatTest.FIRST_PART + lineBreakerInFile + CsvInputFormatTest.SECOND_PART+ lineBreakerInFile;
  try {
    tempFile=File.createTempFile("CsvInputFormatTest","tmp");
    tempFile.deleteOnExit();
    tempFile.setWritable(true);
    OutputStreamWriter wrt=new OutputStreamWriter(new FileOutputStream(tempFile));
    wrt.write(fileContent);
    wrt.close();
    CsvInputFormat inputFormat=new CsvInputFormat();
    Configuration parameters=new Configuration();
    new CsvInputFormat.ConfigBuilder(null,parameters).field(StringValue.class,0).filePath(tempFile.toURI().toString());
    inputFormat.configure(parameters);
    inputFormat.setDelimiter(lineBreakerSetup);
    FileInputSplit[] splits=inputFormat.createInputSplits(1);
    inputFormat.open(splits[0]);
    Record record=new Record();
    Record result=inputFormat.nextRecord(record);
    assertNotNull("Expecting to not return null",result);
    assertEquals(FIRST_PART,result.getField(0,StringValue.class).getValue());
    result=inputFormat.nextRecord(record);
    assertNotNull("Expecting to not return null",result);
    assertEquals(SECOND_PART,result.getField(0,StringValue.class).getValue());
  }
 catch (  Throwable t) {
    System.err.println("test failed with exception: " + t.getMessage());
    t.printStackTrace(System.err);
    fail("Test erroneous");
  }
}
