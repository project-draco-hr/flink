{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setDegreeOfParallelism(DOP);
  DataSet<Tuple2<Long,Long>> initialSolutionSet=env.fromCollection(verticesInput);
  DataSet<Tuple2<Long,Long>> edges=env.fromCollection(edgesInput);
  IterativeDataSet<Tuple2<Long,Long>> iteration=initialSolutionSet.iterate(MAX_ITERATIONS);
  iteration.registerAggregator(ELEMENTS_IN_COMPONENT,new LongSumAggregatorWithParameter(componentId));
  DataSet<Tuple2<Long,Long>> verticesWithNewComponents=iteration.join(edges).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).reduceGroup(new MinimumReduce());
  DataSet<Tuple2<Long,Long>> updatedComponentId=verticesWithNewComponents.join(iteration).where(0).equalTo(0).flatMap(new MinimumIdFilter());
  iteration.closeWith(updatedComponentId).writeAsText(resultPath);
  env.execute();
  return resultPath;
}
