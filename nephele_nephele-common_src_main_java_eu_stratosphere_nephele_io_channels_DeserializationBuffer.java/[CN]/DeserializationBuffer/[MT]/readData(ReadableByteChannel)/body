{
  if (this.recordLength < 0) {
    if (readableByteChannel.read(this.lengthBuf) == -1 && this.propagateEndOfStream) {
      if (this.lengthBuf.position() == 0) {
        throw new EOFException();
      }
 else {
        throw new IOException("Deserilization error: Expected to read " + this.lengthBuf.remaining() + " more bytes of length information from the stream!");
      }
    }
    if (this.lengthBuf.hasRemaining()) {
      return null;
    }
    this.recordLength=byteArrayToInt(this.lengthBuf.array());
    if (this.tempBuffer == null) {
      this.tempBuffer=ByteBuffer.allocate(this.recordLength);
    }
    if (this.tempBuffer.capacity() < this.recordLength) {
      this.tempBuffer=ByteBuffer.allocate(this.recordLength);
    }
    this.tempBuffer.position(0);
    this.tempBuffer.limit(this.recordLength);
  }
  long read=readableByteChannel.read(this.tempBuffer);
  if (read == -1 && this.propagateEndOfStream) {
    throw new IOException("Deserilization error: Expected to read " + this.tempBuffer.remaining() + " more bytes from stream!");
  }
  if (read == -1) {
    System.out.println("Read EOF");
    while (read == -1 && !this.propagateEndOfStream) {
      read=readableByteChannel.read(this.tempBuffer);
      try {
        Thread.sleep(20000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        break;
      }
    }
  }
  if (this.tempBuffer.hasRemaining()) {
    return null;
  }
  this.deserializationBuffer.reset(this.tempBuffer.array(),this.recordLength);
  final T record=this.deserializer.deserialize(this.deserializationBuffer);
  this.recordLength=-1;
  this.lengthBuf.clear();
  return record;
}
