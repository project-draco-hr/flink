{
  final int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String ordersPath=(args.length > 1 ? args[1] : "");
  final String lineItemsPath=(args.length > 2 ? args[2] : "");
  final String output=(args.length > 3 ? args[3] : "");
  FileDataSource orders=new FileDataSource(RecordInputFormat.class,ordersPath,"Orders");
  RecordInputFormat.configureRecordFormat(orders).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,7).field(VarLengthStringParser.class,2).field(VarLengthStringParser.class,4).field(VarLengthStringParser.class,5);
  orders.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(0),1);
  orders.getCompilerHints().setAvgBytesPerRecord(16);
  orders.getCompilerHints().setUniqueField(new FieldSet(0));
  FileDataSource lineitems=new FileDataSource(RecordInputFormat.class,lineItemsPath,"LineItems");
  RecordInputFormat.configureRecordFormat(lineitems).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextDoubleParser.class,5);
  lineitems.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(0),4);
  lineitems.getCompilerHints().setAvgBytesPerRecord(20);
  MapContract filterO=MapContract.builder(FilterO.class).input(orders).name("FilterO").build();
  filterO.setParameter(YEAR_FILTER,1993);
  filterO.setParameter(PRIO_FILTER,"5");
  filterO.getCompilerHints().setAvgBytesPerRecord(16);
  filterO.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.05f);
  filterO.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(0),1);
  MatchContract joinLiO=MatchContract.builder(JoinLiO.class,PactLong.class,0,0).input1(filterO).input2(lineitems).name("JoinLiO").build();
  joinLiO.getCompilerHints().setAvgBytesPerRecord(24);
  joinLiO.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(new int[]{0,1}),4);
  ReduceContract aggLiO=ReduceContract.builder(AggLiO.class).keyField(PactLong.class,0).keyField(PactString.class,1).input(joinLiO).name("AggLio").build();
  aggLiO.getCompilerHints().setAvgBytesPerRecord(30);
  aggLiO.getCompilerHints().setAvgRecordsEmittedPerStubCall(1.0f);
  aggLiO.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(new int[]{0,1}),1);
  FileDataSink result=new FileDataSink(RecordOutputFormat.class,output,aggLiO,"Output");
  RecordOutputFormat.configureRecordFormat(result).lenient(true).recordDelimiter('\n').fieldDelimiter('|').field(PactLong.class,0).field(PactInteger.class,1).field(PactDouble.class,5);
  Plan plan=new Plan(result,"TPCH Q3");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
