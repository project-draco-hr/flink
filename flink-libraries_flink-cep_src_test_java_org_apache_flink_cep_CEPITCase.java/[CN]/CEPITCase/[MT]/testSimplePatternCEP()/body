{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Event> input=env.fromElements(new Event(1,"barfoo",1.0),new Event(2,"start",2.0),new Event(3,"foobar",3.0),new SubEvent(4,"foo",4.0,1.0),new Event(5,"middle",5.0),new SubEvent(6,"middle",6.0,2.0),new SubEvent(7,"bar",3.0,3.0),new Event(42,"42",42.0),new Event(8,"end",1.0));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new FilterFunction<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("start");
    }
  }
).followedBy("middle").subtype(SubEvent.class).where(new FilterFunction<SubEvent>(){
    @Override public boolean filter(    SubEvent value) throws Exception {
      return value.getName().equals("middle");
    }
  }
).followedBy("end").where(new FilterFunction<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("end");
    }
  }
);
  DataStream<String> result=CEP.pattern(input,pattern).select(new PatternSelectFunction<Event,String>(){
    @Override public String select(    Map<String,Event> pattern){
      StringBuilder builder=new StringBuilder();
      builder.append(pattern.get("start").getId()).append(",").append(pattern.get("middle").getId()).append(",").append(pattern.get("end").getId());
      return builder.toString();
    }
  }
);
  result.writeAsText(resultPath,FileSystem.WriteMode.OVERWRITE);
  expected="2,6,8";
  env.execute();
}
