{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  DataStream<Event> input=env.fromElements(Tuple2.of(new Event(1,"start",1.0),1L),Tuple2.of(new Event(1,"middle",2.0),5L),Tuple2.of(new Event(1,"start",2.0),4L),Tuple2.of(new Event(1,"end",2.0),6L)).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event,Long>>(){
    @Override public long extractTimestamp(    Tuple2<Event,Long> element,    long currentTimestamp){
      return element.f1;
    }
    @Override public Watermark checkAndGetNextWatermark(    Tuple2<Event,Long> lastElement,    long extractedTimestamp){
      return new Watermark(lastElement.f1 - 5);
    }
  }
).map(new MapFunction<Tuple2<Event,Long>,Event>(){
    @Override public Event map(    Tuple2<Event,Long> value) throws Exception {
      return value.f0;
    }
  }
);
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new FilterFunction<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("start");
    }
  }
).followedBy("middle").where(new FilterFunction<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("middle");
    }
  }
).followedBy("end").where(new FilterFunction<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("end");
    }
  }
).within(Time.milliseconds(3));
  DataStream<Either<String,String>> result=CEP.pattern(input,pattern).select(new PatternTimeoutFunction<Event,String>(){
    @Override public String timeout(    Map<String,Event> pattern,    long timeoutTimestamp) throws Exception {
      return pattern.get("start").getPrice() + "";
    }
  }
,new PatternSelectFunction<Event,String>(){
    @Override public String select(    Map<String,Event> pattern){
      StringBuilder builder=new StringBuilder();
      builder.append(pattern.get("start").getPrice()).append(",").append(pattern.get("middle").getPrice()).append(",").append(pattern.get("end").getPrice());
      return builder.toString();
    }
  }
);
  result.writeAsText(resultPath,FileSystem.WriteMode.OVERWRITE);
  expected="Left(1.0)\nRight(2.0,2.0,2.0)";
  env.execute();
}
