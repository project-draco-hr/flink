{
  if (logicalKeyFields == null || orders == null || logicalKeyFields.length != orders.length || logicalKeyFields.length > types.length) {
    throw new IllegalArgumentException();
  }
  if (logicalKeyFields.length == 1) {
    return createSinglefieldComparator(logicalKeyFields[0],orders[0],types[logicalKeyFields[0]]);
  }
  TypeComparator<?>[] fieldComparators=new TypeComparator<?>[logicalKeyFields.length];
  for (int i=0; i < logicalKeyFields.length; i++) {
    int field=logicalKeyFields[i];
    if (field < 0 || field >= types.length) {
      throw new IllegalArgumentException("The field position " + field + " is out of range [0,"+ types.length+ ")");
    }
    if (types[field].isKeyType() && types[field] instanceof AtomicType) {
      fieldComparators[i]=((AtomicType<?>)types[field]).createComparator(orders[i]);
    }
 else {
      throw new IllegalArgumentException("The field at position " + field + " ("+ types[field]+ ") is no atomic key type.");
    }
  }
  return new TupleComparator<T>(logicalKeyFields,fieldComparators);
}
