{
  try {
    ReduceOperator reduceOp=ReduceOperator.builder(TestReduceFunction.class).build();
    UserCodeWrapper<GroupReduceFunction<Record,Record>> udf=reduceOp.getUserCodeWrapper();
    UserCodeWrapper<GroupReduceFunction<Record,Record>> copy=SerializationUtils.clone(udf);
    GroupReduceFunction<Record,Record> reducer=copy.getUserCodeObject();
    final List<Record> target=new ArrayList<Record>();
    Collector<Record> collector=new Collector<Record>(){
      @Override public void collect(      Record record){
        target.add(record);
      }
      @Override public void close(){
      }
    }
;
    List<Record> source=new ArrayList<Record>();
    source.add(new Record(new IntValue(42),new LongValue(11)));
    source.add(new Record(new IntValue(13),new LongValue(17)));
    reducer.reduce(source,collector);
    assertEquals(2,target.size());
    assertEquals(new IntValue(42),target.get(0).getField(0,IntValue.class));
    assertEquals(new LongValue(11),target.get(0).getField(1,LongValue.class));
    assertEquals(new IntValue(13),target.get(1).getField(0,IntValue.class));
    assertEquals(new LongValue(17),target.get(1).getField(1,LongValue.class));
    target.clear();
    ((FlatCombineFunction<Record,Record>)reducer).combine(source,collector);
    assertEquals(2,target.size());
    assertEquals(new IntValue(42),target.get(0).getField(0,IntValue.class));
    assertEquals(new LongValue(11),target.get(0).getField(1,LongValue.class));
    assertEquals(new IntValue(13),target.get(1).getField(0,IntValue.class));
    assertEquals(new LongValue(17),target.get(1).getField(1,LongValue.class));
    target.clear();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
