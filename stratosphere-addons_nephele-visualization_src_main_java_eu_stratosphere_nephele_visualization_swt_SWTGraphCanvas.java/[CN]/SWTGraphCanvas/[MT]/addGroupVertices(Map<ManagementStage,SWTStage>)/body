{
  Map<ManagementGroupVertex,SWTGroupVertex> groupMap=new HashMap<ManagementGroupVertex,SWTGroupVertex>();
  Iterator<Map.Entry<ManagementStage,SWTStage>> iterator=stageMap.entrySet().iterator();
  while (iterator.hasNext()) {
    final Map.Entry<ManagementStage,SWTStage> entry=iterator.next();
    final ManagementStage managementStage=entry.getKey();
    final SWTStage parent=entry.getValue();
    for (int i=0; i < managementStage.getNumberOfGroupVertices(); i++) {
      final ManagementGroupVertex groupVertex=managementStage.getGroupVertex(i);
      if (!(groupVertex.getName().equals(this.FAKE_TAIL) || groupVertex.getName().contains(this.ITERATION_SYNC))) {
        final SWTGroupVertex visualGroupVertex=new SWTGroupVertex(parent,groupVertex);
        groupMap.put(groupVertex,visualGroupVertex);
      }
    }
  }
  iterator=stageMap.entrySet().iterator();
  while (iterator.hasNext()) {
    final Map.Entry<ManagementStage,SWTStage> entry=iterator.next();
    final ManagementStage executionStage=entry.getKey();
    for (int i=0; i < executionStage.getNumberOfGroupVertices(); i++) {
      final ManagementGroupVertex sourceVertex=executionStage.getGroupVertex(i);
      final SWTGroupVertex sourceGroupVertex=groupMap.get(sourceVertex);
      for (int j=0; j < sourceVertex.getNumberOfForwardEdges(); j++) {
        final ManagementGroupEdge edge=sourceVertex.getForwardEdge(j);
        final ManagementGroupVertex targetVertex=edge.getTarget();
        final SWTGroupVertex targetGroupVertex=groupMap.get(targetVertex);
        sourceGroupVertex.connectTo(targetGroupVertex);
      }
    }
  }
  return groupMap;
}
