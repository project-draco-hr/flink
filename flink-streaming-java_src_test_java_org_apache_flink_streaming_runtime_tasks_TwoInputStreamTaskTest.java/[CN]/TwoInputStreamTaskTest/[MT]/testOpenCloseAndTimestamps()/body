{
  final TwoInputStreamTask<String,Integer,String> coMapTask=new TwoInputStreamTask<String,Integer,String>();
  final TwoInputStreamTaskTestHarness<String,Integer,String> testHarness=new TwoInputStreamTaskTestHarness<String,Integer,String>(coMapTask,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  StreamConfig streamConfig=testHarness.getStreamConfig();
  CoStreamMap<String,Integer,String> coMapOperator=new CoStreamMap<String,Integer,String>(new TestOpenCloseMapFunction());
  streamConfig.setStreamOperator(coMapOperator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  testHarness.invoke();
  testHarness.waitForTaskRunning();
  testHarness.processElement(new StreamRecord<String>("Hello",initialTime + 1),0,0);
  expectedOutput.add(new StreamRecord<String>("Hello",initialTime + 1));
  testHarness.waitForInputProcessing();
  testHarness.processElement(new StreamRecord<Integer>(1337,initialTime + 2),1,0);
  expectedOutput.add(new StreamRecord<String>("1337",initialTime + 2));
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
  Assert.assertTrue("RichFunction methods where not called.",TestOpenCloseMapFunction.closeCalled);
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
}
