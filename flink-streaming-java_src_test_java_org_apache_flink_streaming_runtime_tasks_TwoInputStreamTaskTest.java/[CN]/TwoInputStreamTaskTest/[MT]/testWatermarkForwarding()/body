{
  final TwoInputStreamTask<String,Integer,String> coMapTask=new TwoInputStreamTask<String,Integer,String>();
  final TwoInputStreamTaskTestHarness<String,Integer,String> testHarness=new TwoInputStreamTaskTestHarness<String,Integer,String>(coMapTask,2,2,new int[]{1,2},BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  StreamConfig streamConfig=testHarness.getStreamConfig();
  CoStreamMap<String,Integer,String> coMapOperator=new CoStreamMap<String,Integer,String>(new IdentityMap());
  streamConfig.setStreamOperator(coMapOperator);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  long initialTime=0L;
  testHarness.invoke();
  testHarness.waitForTaskRunning();
  testHarness.processElement(new Watermark(initialTime),0,0);
  testHarness.processElement(new Watermark(initialTime),0,1);
  testHarness.processElement(new Watermark(initialTime),1,0);
  testHarness.waitForInputProcessing();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new StreamRecord<String>("Hello",initialTime),0,0);
  testHarness.processElement(new StreamRecord<Integer>(42,initialTime),1,1);
  expectedOutput.add(new StreamRecord<String>("Hello",initialTime));
  expectedOutput.add(new StreamRecord<String>("42",initialTime));
  testHarness.waitForInputProcessing();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime + 4),0,0);
  testHarness.processElement(new Watermark(initialTime + 3),0,1);
  testHarness.processElement(new Watermark(initialTime + 3),1,0);
  testHarness.processElement(new Watermark(initialTime + 2),1,1);
  expectedOutput.add(new Watermark(initialTime + 2));
  testHarness.waitForInputProcessing();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime + 4),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 3));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime + 4),0,1);
  testHarness.processElement(new Watermark(initialTime + 4),1,0);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 4));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
  List<String> resultElements=TestHarnessUtil.getRawElementsFromOutput(testHarness.getOutput());
  Assert.assertEquals(2,resultElements.size());
}
