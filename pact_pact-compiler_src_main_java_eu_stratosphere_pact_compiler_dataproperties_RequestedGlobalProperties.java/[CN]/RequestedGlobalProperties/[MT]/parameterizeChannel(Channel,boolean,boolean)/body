{
  if (isTrivial()) {
    channel.setShipStrategy(globalDopChange ? ShipStrategyType.PARTITION_RANDOM : ShipStrategyType.FORWARD);
    return;
  }
  final GlobalProperties inGlobals=channel.getSource().getGlobalProperties();
  if (!globalDopChange && isMetBy(inGlobals)) {
    if (localDopChange) {
      if (inGlobals.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) {
        channel.setShipStrategy(ShipStrategyType.PARTITION_LOCAL_HASH,inGlobals.getPartitioningFields());
        return;
      }
    }
 else {
      channel.setShipStrategy(ShipStrategyType.FORWARD);
      return;
    }
  }
switch (this.partitioning) {
case FULL_REPLICATION:
    channel.setShipStrategy(ShipStrategyType.BROADCAST);
  break;
case ANY_PARTITIONING:
case HASH_PARTITIONED:
channel.setShipStrategy(ShipStrategyType.PARTITION_HASH,Utils.createOrderedFromSet(this.partitioningFields));
break;
case RANGE_PARTITIONED:
if (this.dataDistribution != null) {
final int[] distKeyPositions=this.dataDistribution.getBoundaryKeyPositions();
final Class<? extends Key>[] distKeyTypes=this.dataDistribution.getBoundaryKeyTypes();
final Order[] distKeyOrders=this.dataDistribution.getBoundaryKeyOrders();
final Ordering partitionOrdering=new Ordering();
for (int i=0; i < distKeyPositions.length; i++) {
if (this.ordering.getFieldNumber(i) == distKeyPositions[i] && this.ordering.getType(i).equals(distKeyTypes[i]) && this.ordering.getOrder(i).equals(distKeyOrders[i])) {
  partitionOrdering.appendOrdering(distKeyPositions[i],distKeyTypes[i],distKeyOrders[i]);
}
 else {
  throw new IllegalArgumentException("Provided data distribution is incompatible with desired sort order.");
}
}
channel.setShipStrategy(ShipStrategyType.PARTITION_RANGE,partitionOrdering.getInvolvedIndexes(),partitionOrdering.getFieldSortDirections());
channel.setDataDistribution(this.dataDistribution);
}
 else {
channel.setShipStrategy(ShipStrategyType.PARTITION_RANGE,this.ordering.getInvolvedIndexes(),this.ordering.getFieldSortDirections());
}
break;
default :
throw new CompilerException();
}
}
