{
  Assert.assertTrue(expected.getSequenceNumber() == actual.getSequenceNumber() && expected.getJobID().equals(actual.getJobID()) && expected.getSource().equals(actual.getSource()));
  if (expected.getBuffer() == null) {
    Assert.assertNull(actual.getBuffer());
  }
 else {
    Assert.assertNotNull(actual.getBuffer());
    ByteBuffer expectedByteBuffer=expected.getBuffer().getMemorySegment().wrap(0,expected.getBuffer().size());
    ByteBuffer actualByteBuffer=actual.getBuffer().getMemorySegment().wrap(0,actual.getBuffer().size());
    Assert.assertEquals(0,expectedByteBuffer.compareTo(actualByteBuffer));
  }
  if (expected.getEventsSerialized() == null) {
    Assert.assertNull(actual.getEventsSerialized());
  }
 else {
    Assert.assertNotNull(actual.getEventsSerialized());
    expected.getEventsSerialized().clear();
    List<? extends AbstractEvent> expectedEvents=expected.deserializeEvents();
    List<? extends AbstractEvent> actualEvents=actual.deserializeEvents();
    Assert.assertEquals(expectedEvents.size(),actualEvents.size());
    for (int i=0; i < expectedEvents.size(); i++) {
      AbstractEvent expectedEvent=expectedEvents.get(i);
      AbstractEvent actualEvent=actualEvents.get(i);
      Assert.assertEquals(expectedEvent.getClass(),actualEvent.getClass());
      Assert.assertEquals(expectedEvent,actualEvent);
    }
  }
}
