{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().enableObjectReuse();
  ParameterTool parameters=ParameterTool.fromArgs(args);
  int iterations=parameters.getInt("iterations",DEFAULT_ITERATIONS);
  DataSet hits;
switch (parameters.get("input","")) {
case "csv":
{
      String lineDelimiter=StringEscapeUtils.unescapeJava(parameters.get("input_line_delimiter",CsvOutputFormat.DEFAULT_LINE_DELIMITER));
      String fieldDelimiter=StringEscapeUtils.unescapeJava(parameters.get("input_field_delimiter",CsvOutputFormat.DEFAULT_FIELD_DELIMITER));
      Graph<LongValue,NullValue,NullValue> graph=Graph.fromCsvReader(parameters.get("input_filename"),env).ignoreCommentsEdges("#").lineDelimiterEdges(lineDelimiter).fieldDelimiterEdges(fieldDelimiter).keyType(LongValue.class);
      hits=graph.run(new org.apache.flink.graph.library.link_analysis.HITS<LongValue,NullValue,NullValue>(iterations));
    }
  break;
case "rmat":
{
  int scale=parameters.getInt("scale",DEFAULT_SCALE);
  int edgeFactor=parameters.getInt("edge_factor",DEFAULT_EDGE_FACTOR);
  RandomGenerableFactory<JDKRandomGenerator> rnd=new JDKRandomGeneratorFactory();
  long vertexCount=1L << scale;
  long edgeCount=vertexCount * edgeFactor;
  Graph<LongValue,NullValue,NullValue> graph=new RMatGraph<>(env,rnd,vertexCount,edgeCount).generate();
  if (scale > 32) {
    hits=graph.run(new Simplify<LongValue,NullValue,NullValue>()).run(new org.apache.flink.graph.library.link_analysis.HITS<LongValue,NullValue,NullValue>(iterations));
  }
 else {
    hits=graph.run(new TranslateGraphIds<LongValue,IntValue,NullValue,NullValue>(new LongValueToIntValue())).run(new Simplify<IntValue,NullValue,NullValue>()).run(new org.apache.flink.graph.library.link_analysis.HITS<IntValue,NullValue,NullValue>(iterations));
  }
}
break;
default :
printUsage();
return;
}
switch (parameters.get("output","")) {
case "print":
for (Object e : hits.collect()) {
System.out.println(((Result)e).toVerboseString());
}
break;
case "hash":
System.out.println(DataSetUtils.checksumHashCode(hits));
break;
case "csv":
String filename=parameters.get("output_filename");
String lineDelimiter=StringEscapeUtils.unescapeJava(parameters.get("output_line_delimiter",CsvOutputFormat.DEFAULT_LINE_DELIMITER));
String fieldDelimiter=StringEscapeUtils.unescapeJava(parameters.get("output_field_delimiter",CsvOutputFormat.DEFAULT_FIELD_DELIMITER));
hits.writeAsCsv(filename,lineDelimiter,fieldDelimiter);
env.execute();
break;
default :
printUsage();
return;
}
JobExecutionResult result=env.getLastJobExecutionResult();
NumberFormat nf=NumberFormat.getInstance();
System.out.println("Execution runtime: " + nf.format(result.getNetRuntime()) + " ms");
}
