{
  if (!(typeInfo instanceof CompositeType)) {
    throw new InvalidTypesException("This key operation requires a composite type such as Tuples, POJOs, or Case Classes.");
  }
  CompositeType<X> compositeType=(CompositeType<X>)typeInfo;
  int[] logicalKeyPositions=keys.computeLogicalKeyPositions();
  int numKeyFields=logicalKeyPositions.length;
  boolean[] orders=new boolean[numKeyFields];
  TypeInformation[] typeInfos=new TypeInformation[numKeyFields];
  for (int i=0; i < numKeyFields; i++) {
    orders[i]=true;
    typeInfos[i]=compositeType.getTypeAt(logicalKeyPositions[i]);
  }
  TypeComparator<X> comparator=compositeType.createComparator(logicalKeyPositions,orders,0,executionConfig);
  return new ComparableKeySelector<>(comparator,numKeyFields,new TupleTypeInfo<>(typeInfos));
}
