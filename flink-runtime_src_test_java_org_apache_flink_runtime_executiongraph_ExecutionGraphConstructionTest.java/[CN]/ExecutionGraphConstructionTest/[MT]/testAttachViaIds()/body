{
  final JobID jobId=new JobID();
  final String jobName="Test Job Sample Name";
  final Configuration cfg=new Configuration();
  AbstractJobVertex v1=new AbstractJobVertex("vertex1");
  AbstractJobVertex v2=new AbstractJobVertex("vertex2");
  AbstractJobVertex v3=new AbstractJobVertex("vertex3");
  v1.setParallelism(5);
  v2.setParallelism(7);
  v3.setParallelism(2);
  v2.connectNewDataSetAsInput(v1,DistributionPattern.ALL_TO_ALL);
  IntermediateDataSet v2result=v2.createAndAddResultDataSet(ResultPartitionType.PIPELINED);
  IntermediateDataSet v3result_1=v3.createAndAddResultDataSet(ResultPartitionType.PIPELINED);
  IntermediateDataSet v3result_2=v3.createAndAddResultDataSet(ResultPartitionType.PIPELINED);
  List<AbstractJobVertex> ordered=new ArrayList<AbstractJobVertex>(Arrays.asList(v1,v2,v3));
  ExecutionGraph eg=new ExecutionGraph(jobId,jobName,cfg,AkkaUtils.getDefaultTimeout());
  try {
    eg.attachJobGraph(ordered);
  }
 catch (  JobException e) {
    e.printStackTrace();
    fail("Job failed with exception: " + e.getMessage());
  }
  AbstractJobVertex v4=new AbstractJobVertex("vertex4");
  AbstractJobVertex v5=new AbstractJobVertex("vertex5");
  v4.setParallelism(11);
  v5.setParallelism(4);
  v4.connectIdInput(v2result.getId(),DistributionPattern.ALL_TO_ALL);
  v4.connectIdInput(v3result_1.getId(),DistributionPattern.ALL_TO_ALL);
  v5.connectNewDataSetAsInput(v4,DistributionPattern.ALL_TO_ALL);
  v5.connectIdInput(v3result_2.getId(),DistributionPattern.ALL_TO_ALL);
  List<AbstractJobVertex> ordered2=new ArrayList<AbstractJobVertex>(Arrays.asList(v4,v5));
  try {
    eg.attachJobGraph(ordered2);
  }
 catch (  JobException e) {
    e.printStackTrace();
    fail("Job failed with exception: " + e.getMessage());
  }
  verifyTestGraph(eg,jobId,v1,v2,v3,v4,v5);
}
