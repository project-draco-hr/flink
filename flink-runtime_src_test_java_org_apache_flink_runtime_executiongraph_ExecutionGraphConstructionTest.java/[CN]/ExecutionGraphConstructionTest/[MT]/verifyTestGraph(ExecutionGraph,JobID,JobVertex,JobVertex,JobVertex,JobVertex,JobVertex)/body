{
  Map<JobVertexID,ExecutionJobVertex> vertices=eg.getAllVertices();
{
    ExecutionJobVertex e1=vertices.get(v1.getID());
    assertNotNull(e1);
    assertEquals(v1.getParallelism(),e1.getParallelism());
    assertEquals(v1.getID(),e1.getJobVertexId());
    assertEquals(jobId,e1.getJobId());
    assertEquals(v1,e1.getJobVertex());
    assertEquals(1,e1.getProducedDataSets().length);
    assertEquals(v1.getProducedDataSets().get(0).getId(),e1.getProducedDataSets()[0].getId());
    assertEquals(v1.getParallelism(),e1.getProducedDataSets()[0].getPartitions().length);
    assertEquals(v1.getParallelism(),e1.getTaskVertices().length);
    int num=0;
    for (    ExecutionVertex ev : e1.getTaskVertices()) {
      assertEquals(jobId,ev.getJobId());
      assertEquals(v1.getID(),ev.getJobvertexId());
      assertEquals(v1.getParallelism(),ev.getTotalNumberOfParallelSubtasks());
      assertEquals(num++,ev.getParallelSubtaskIndex());
      assertEquals(0,ev.getNumberOfInputs());
      assertTrue(ev.getStateTimestamp(ExecutionState.CREATED) > 0);
    }
  }
{
    ExecutionJobVertex e2=vertices.get(v2.getID());
    assertNotNull(e2);
    assertEquals(1,e2.getProducedDataSets().length);
    assertEquals(v2.getProducedDataSets().get(0).getId(),e2.getProducedDataSets()[0].getId());
    assertEquals(v2.getParallelism(),e2.getProducedDataSets()[0].getPartitions().length);
    assertEquals(v2.getParallelism(),e2.getTaskVertices().length);
    int num=0;
    for (    ExecutionVertex ev : e2.getTaskVertices()) {
      assertEquals(jobId,ev.getJobId());
      assertEquals(v2.getID(),ev.getJobvertexId());
      assertEquals(v2.getParallelism(),ev.getTotalNumberOfParallelSubtasks());
      assertEquals(num++,ev.getParallelSubtaskIndex());
      assertEquals(1,ev.getNumberOfInputs());
      ExecutionEdge[] inputs=ev.getInputEdges(0);
      assertEquals(v1.getParallelism(),inputs.length);
      int sumOfPartitions=0;
      for (      ExecutionEdge inEdge : inputs) {
        assertEquals(0,inEdge.getInputNum());
        sumOfPartitions+=inEdge.getSource().getPartitionNumber();
      }
      assertEquals(10,sumOfPartitions);
    }
  }
{
    ExecutionJobVertex e3=vertices.get(v3.getID());
    assertNotNull(e3);
    assertEquals(2,e3.getProducedDataSets().length);
    assertEquals(v3.getProducedDataSets().get(0).getId(),e3.getProducedDataSets()[0].getId());
    assertEquals(v3.getProducedDataSets().get(1).getId(),e3.getProducedDataSets()[1].getId());
    assertEquals(v3.getParallelism(),e3.getProducedDataSets()[0].getPartitions().length);
    assertEquals(v3.getParallelism(),e3.getProducedDataSets()[1].getPartitions().length);
    assertEquals(v3.getParallelism(),e3.getTaskVertices().length);
    int num=0;
    for (    ExecutionVertex ev : e3.getTaskVertices()) {
      assertEquals(jobId,ev.getJobId());
      assertEquals(v3.getID(),ev.getJobvertexId());
      assertEquals(v3.getParallelism(),ev.getTotalNumberOfParallelSubtasks());
      assertEquals(num++,ev.getParallelSubtaskIndex());
      assertEquals(0,ev.getNumberOfInputs());
    }
  }
{
    ExecutionJobVertex e4=vertices.get(v4.getID());
    assertNotNull(e4);
    assertEquals(1,e4.getProducedDataSets().length);
    assertEquals(v4.getProducedDataSets().get(0).getId(),e4.getProducedDataSets()[0].getId());
    assertEquals(v4.getParallelism(),e4.getTaskVertices().length);
    int num=0;
    for (    ExecutionVertex ev : e4.getTaskVertices()) {
      assertEquals(jobId,ev.getJobId());
      assertEquals(v4.getID(),ev.getJobvertexId());
      assertEquals(v4.getParallelism(),ev.getTotalNumberOfParallelSubtasks());
      assertEquals(num++,ev.getParallelSubtaskIndex());
      assertEquals(2,ev.getNumberOfInputs());
{
        ExecutionEdge[] inputs=ev.getInputEdges(0);
        assertEquals(v2.getParallelism(),inputs.length);
        int sumOfPartitions=0;
        for (        ExecutionEdge inEdge : inputs) {
          assertEquals(0,inEdge.getInputNum());
          sumOfPartitions+=inEdge.getSource().getPartitionNumber();
        }
        assertEquals(21,sumOfPartitions);
      }
{
        ExecutionEdge[] inputs=ev.getInputEdges(1);
        assertEquals(v3.getParallelism(),inputs.length);
        int sumOfPartitions=0;
        for (        ExecutionEdge inEdge : inputs) {
          assertEquals(1,inEdge.getInputNum());
          sumOfPartitions+=inEdge.getSource().getPartitionNumber();
        }
        assertEquals(1,sumOfPartitions);
      }
    }
  }
{
    ExecutionJobVertex e5=vertices.get(v5.getID());
    assertNotNull(e5);
    assertEquals(0,e5.getProducedDataSets().length);
    assertEquals(v5.getParallelism(),e5.getTaskVertices().length);
    int num=0;
    for (    ExecutionVertex ev : e5.getTaskVertices()) {
      assertEquals(jobId,ev.getJobId());
      assertEquals(v5.getID(),ev.getJobvertexId());
      assertEquals(v5.getParallelism(),ev.getTotalNumberOfParallelSubtasks());
      assertEquals(num++,ev.getParallelSubtaskIndex());
      assertEquals(2,ev.getNumberOfInputs());
{
        ExecutionEdge[] inputs=ev.getInputEdges(0);
        assertEquals(v4.getParallelism(),inputs.length);
        int sumOfPartitions=0;
        for (        ExecutionEdge inEdge : inputs) {
          assertEquals(0,inEdge.getInputNum());
          sumOfPartitions+=inEdge.getSource().getPartitionNumber();
        }
        assertEquals(55,sumOfPartitions);
      }
{
        ExecutionEdge[] inputs=ev.getInputEdges(1);
        assertEquals(v3.getParallelism(),inputs.length);
        int sumOfPartitions=0;
        for (        ExecutionEdge inEdge : inputs) {
          assertEquals(1,inEdge.getInputNum());
          sumOfPartitions+=inEdge.getSource().getPartitionNumber();
        }
        assertEquals(1,sumOfPartitions);
      }
    }
  }
}
