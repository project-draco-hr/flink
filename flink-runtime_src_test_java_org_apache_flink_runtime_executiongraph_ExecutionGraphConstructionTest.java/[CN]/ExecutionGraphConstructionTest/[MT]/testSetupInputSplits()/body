{
  try {
    final InputSplit[] emptySplits=new InputSplit[0];
    InputSplitAssigner assigner1=mock(InputSplitAssigner.class);
    InputSplitAssigner assigner2=mock(InputSplitAssigner.class);
    @SuppressWarnings("unchecked") InputSplitSource<InputSplit> source1=mock(InputSplitSource.class);
    @SuppressWarnings("unchecked") InputSplitSource<InputSplit> source2=mock(InputSplitSource.class);
    when(source1.createInputSplits(Matchers.anyInt())).thenReturn(emptySplits);
    when(source2.createInputSplits(Matchers.anyInt())).thenReturn(emptySplits);
    when(source1.getInputSplitAssigner(emptySplits)).thenReturn(assigner1);
    when(source2.getInputSplitAssigner(emptySplits)).thenReturn(assigner2);
    final JobID jobId=new JobID();
    final String jobName="Test Job Sample Name";
    final Configuration cfg=new Configuration();
    JobVertex v1=new JobVertex("vertex1");
    JobVertex v2=new JobVertex("vertex2");
    JobVertex v3=new JobVertex("vertex3");
    JobVertex v4=new JobVertex("vertex4");
    JobVertex v5=new JobVertex("vertex5");
    v1.setParallelism(5);
    v2.setParallelism(7);
    v3.setParallelism(2);
    v4.setParallelism(11);
    v5.setParallelism(4);
    v2.connectNewDataSetAsInput(v1,DistributionPattern.ALL_TO_ALL);
    v4.connectNewDataSetAsInput(v2,DistributionPattern.ALL_TO_ALL);
    v4.connectNewDataSetAsInput(v3,DistributionPattern.ALL_TO_ALL);
    v5.connectNewDataSetAsInput(v4,DistributionPattern.ALL_TO_ALL);
    v5.connectNewDataSetAsInput(v3,DistributionPattern.ALL_TO_ALL);
    v3.setInputSplitSource(source1);
    v5.setInputSplitSource(source2);
    List<JobVertex> ordered=new ArrayList<JobVertex>(Arrays.asList(v1,v2,v3,v4,v5));
    ExecutionGraph eg=new ExecutionGraph(TestingUtils.defaultExecutionContext(),jobId,jobName,cfg,AkkaUtils.getDefaultTimeout(),new NoRestartStrategy());
    try {
      eg.attachJobGraph(ordered);
    }
 catch (    JobException e) {
      e.printStackTrace();
      fail("Job failed with exception: " + e.getMessage());
    }
    assertEquals(assigner1,eg.getAllVertices().get(v3.getID()).getSplitAssigner());
    assertEquals(assigner2,eg.getAllVertices().get(v5.getID()).getSplitAssigner());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
