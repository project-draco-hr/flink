{
  this.operator=operator;
  this.outputList=new ConcurrentLinkedQueue<Object>();
  this.config=new StreamConfig(new Configuration());
  this.executionConfig=executionConfig;
  this.checkpointLock=new Object();
  final Environment env=new MockEnvironment("MockTwoInputTask",3 * 1024 * 1024,new MockInputSplitProvider(),1024);
  mockTask=mock(StreamTask.class);
  when(mockTask.getName()).thenReturn("Mock Task");
  when(mockTask.getCheckpointLock()).thenReturn(checkpointLock);
  when(mockTask.getConfiguration()).thenReturn(config);
  when(mockTask.getEnvironment()).thenReturn(env);
  when(mockTask.getExecutionConfig()).thenReturn(executionConfig);
  try {
    doAnswer(new Answer<AbstractStateBackend>(){
      @Override public AbstractStateBackend answer(      InvocationOnMock invocationOnMock) throws Throwable {
        final String operatorIdentifier=(String)invocationOnMock.getArguments()[0];
        final TypeSerializer<?> keySerializer=(TypeSerializer<?>)invocationOnMock.getArguments()[1];
        MemoryStateBackend backend=MemoryStateBackend.create();
        backend.initializeForJob(env,operatorIdentifier,keySerializer);
        return backend;
      }
    }
).when(mockTask).createStateBackend(any(String.class),any(TypeSerializer.class));
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      final long execTime=(Long)invocation.getArguments()[0];
      final Triggerable target=(Triggerable)invocation.getArguments()[1];
      Thread caller=new Thread(){
        @Override public void run(){
          final long delay=execTime - System.currentTimeMillis();
          if (delay > 0) {
            try {
              Thread.sleep(delay);
            }
 catch (            InterruptedException ignored) {
            }
          }
synchronized (checkpointLock) {
            try {
              target.trigger(execTime);
            }
 catch (            Exception ignored) {
            }
          }
        }
      }
;
      caller.start();
      return null;
    }
  }
).when(mockTask).registerTimer(anyLong(),any(Triggerable.class));
}
