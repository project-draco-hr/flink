{
  FileDataSource sourceA=new FileDataSource(DummyInputFormat.class,IN_FILE);
  FileDataSource sourceB=new FileDataSource(DummyInputFormat.class,IN_FILE);
  ReduceContract redA=new ReduceContract.Builder(IdentityReduce.class,PactInteger.class,0).input(sourceA).build();
  ReduceContract redB=new ReduceContract.Builder(IdentityReduce.class,PactInteger.class,0).input(sourceB).build();
  MatchContract mat=MatchContract.builder(DummyMatchStub.class,PactInteger.class,0,0).input1(redA).input2(redB).build();
  FileDataSink sink=new FileDataSink(DummyOutputFormat.class,OUT_FILE,mat);
  sourceA.setDegreeOfParallelism(5);
  sourceB.setDegreeOfParallelism(7);
  redA.setDegreeOfParallelism(5);
  redB.setDegreeOfParallelism(7);
  mat.setDegreeOfParallelism(5);
  sink.setDegreeOfParallelism(5);
  Plan plan=new Plan(sink,"Partition on DoP Change");
  OptimizedPlan oPlan=this.compiler.compile(plan,this.instanceType);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
  oPlan.accept(new Visitor<OptimizerNode>(){
    @Override public boolean preVisit(    OptimizerNode visitable){
      if (visitable instanceof MatchNode) {
        int forwardedConnections=0;
        for (        PactConnection inConn : visitable.getIncomingConnections()) {
          if (inConn.getShipStrategy().type() == ShipStrategyType.FORWARD) {
            forwardedConnections++;
          }
        }
        Assert.assertTrue("Incompatible shipping strategy chosen for match",forwardedConnections < 2);
        return false;
      }
      return true;
    }
    @Override public void postVisit(    OptimizerNode visitable){
    }
  }
);
}
