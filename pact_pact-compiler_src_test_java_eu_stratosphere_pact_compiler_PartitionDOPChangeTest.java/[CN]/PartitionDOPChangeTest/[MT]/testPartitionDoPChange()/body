{
  FileDataSource sourceA=new FileDataSource(DummyInputFormat.class,IN_FILE);
  FileDataSource sourceB=new FileDataSource(DummyInputFormat.class,IN_FILE);
  ReduceContract redA=new ReduceContract(IdentityReduce.class,PactInteger.class,0,sourceA);
  ReduceContract redB=new ReduceContract(IdentityReduce.class,PactInteger.class,0,sourceB);
  MatchContract mat=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,redA,redB);
  FileDataSink sink=new FileDataSink(DummyOutputFormat.class,OUT_FILE,mat);
  sourceA.setDegreeOfParallelism(5);
  sourceB.setDegreeOfParallelism(7);
  redA.setDegreeOfParallelism(5);
  redB.setDegreeOfParallelism(7);
  mat.setDegreeOfParallelism(5);
  sink.setDegreeOfParallelism(5);
  Plan plan=new Plan(sink,"Partition on DoP Change");
  OptimizedPlan oPlan=this.compiler.compile(plan,this.instanceType);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
}
