{
  final TypeSerializerFactory<?> serializer=RecordSerializerFactory.get();
  @SuppressWarnings("unchecked") final TypeComparatorFactory<?> comparator=new RecordComparatorFactory(new int[]{0},new Class[]{LongValue.class},new boolean[]{true});
  final TypePairComparatorFactory<?,?> pairComparator=RecordPairComparatorFactory.get();
  JobGraph jobGraph=new JobGraph("Connected Components (Unified Tails)");
  JobInputVertex vertices=createVerticesInput(jobGraph,verticesPath,numSubTasks,serializer,comparator);
  JobInputVertex edges=createEdgesInput(jobGraph,edgesPath,numSubTasks,serializer,comparator);
  JobTaskVertex head=createIterationHead(jobGraph,numSubTasks,serializer,comparator,pairComparator);
  TaskConfig headConfig=new TaskConfig(head.getConfiguration());
  headConfig.setWaitForSolutionSetUpdate();
  JobTaskVertex intermediate=createIterationIntermediate(jobGraph,numSubTasks,serializer,comparator);
  TaskConfig intermediateConfig=new TaskConfig(intermediate.getConfiguration());
  JobOutputVertex output=createOutput(jobGraph,resultPath,numSubTasks,serializer);
  JobOutputVertex ssFakeTail=createFakeTail(jobGraph,numSubTasks);
  JobOutputVertex wsFakeTail=createFakeTail(jobGraph,numSubTasks);
  JobOutputVertex sync=createSync(jobGraph,numSubTasks,maxIterations);
  JobTaskVertex ssJoinIntermediate=JobGraphUtils.createTask(IterationIntermediatePactTask.class,"Solution Set Join",jobGraph,numSubTasks);
  TaskConfig ssJoinIntermediateConfig=new TaskConfig(ssJoinIntermediate.getConfiguration());
{
    ssJoinIntermediateConfig.setIterationId(ITERATION_ID);
    ssJoinIntermediateConfig.addInputToGroup(0);
    ssJoinIntermediateConfig.setInputSerializer(serializer,0);
    ssJoinIntermediateConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    ssJoinIntermediateConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    ssJoinIntermediateConfig.setOutputComparator(comparator,0);
    ssJoinIntermediateConfig.setOutputComparator(comparator,1);
    ssJoinIntermediateConfig.setOutputSerializer(serializer);
    ssJoinIntermediateConfig.setDriver(JoinWithSolutionSetSecondDriver.class);
    ssJoinIntermediateConfig.setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND);
    ssJoinIntermediateConfig.setDriverComparator(comparator,0);
    ssJoinIntermediateConfig.setDriverPairComparator(pairComparator);
    ssJoinIntermediateConfig.setStubWrapper(new UserCodeClassWrapper<UpdateComponentIdMatch>(UpdateComponentIdMatch.class));
  }
  JobTaskVertex ssTail=JobGraphUtils.createTask(IterationTailPactTask.class,"IterationSolutionSetTail",jobGraph,numSubTasks);
  TaskConfig ssTailConfig=new TaskConfig(ssTail.getConfiguration());
{
    ssTailConfig.setIterationId(ITERATION_ID);
    ssTailConfig.setIsSolutionSetUpdate();
    ssTailConfig.setIsWorksetIteration();
    ssTailConfig.addInputToGroup(0);
    ssTailConfig.setInputSerializer(serializer,0);
    ssTailConfig.setInputAsynchronouslyMaterialized(0,true);
    ssTailConfig.setRelativeInputMaterializationMemory(0,MEM_FRAC_PER_CONSUMER);
    ssTailConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    ssTailConfig.setOutputSerializer(serializer);
    ssTailConfig.setDriver(CollectorMapDriver.class);
    ssTailConfig.setDriverStrategy(DriverStrategy.COLLECTOR_MAP);
    ssTailConfig.setStubWrapper(new UserCodeClassWrapper<DummyMapper>(DummyMapper.class));
  }
  JobTaskVertex wsTail=JobGraphUtils.createTask(IterationTailPactTask.class,"IterationWorksetTail",jobGraph,numSubTasks);
  TaskConfig wsTailConfig=new TaskConfig(wsTail.getConfiguration());
{
    wsTailConfig.setIterationId(ITERATION_ID);
    wsTailConfig.setIsWorksetIteration();
    wsTailConfig.setIsWorksetUpdate();
    wsTailConfig.addInputToGroup(0);
    wsTailConfig.setInputSerializer(serializer,0);
    wsTailConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    wsTailConfig.setOutputSerializer(serializer);
    wsTailConfig.setDriver(CollectorMapDriver.class);
    wsTailConfig.setDriverStrategy(DriverStrategy.COLLECTOR_MAP);
    wsTailConfig.setStubWrapper(new UserCodeClassWrapper<DummyMapper>(DummyMapper.class));
  }
  JobGraphUtils.connect(vertices,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(edges,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(vertices,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(head,intermediate,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  intermediateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,numSubTasks);
  JobGraphUtils.connect(intermediate,ssJoinIntermediate,ChannelType.NETWORK,DistributionPattern.POINTWISE);
  ssJoinIntermediateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(ssJoinIntermediate,ssTail,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
  ssTailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(ssJoinIntermediate,wsTail,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
  wsTailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(head,output,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(ssTail,ssFakeTail,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(wsTail,wsFakeTail,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(head,sync,ChannelType.NETWORK,DistributionPattern.POINTWISE);
  vertices.setVertexToShareInstancesWith(head);
  edges.setVertexToShareInstancesWith(head);
  intermediate.setVertexToShareInstancesWith(head);
  ssJoinIntermediate.setVertexToShareInstancesWith(head);
  wsTail.setVertexToShareInstancesWith(head);
  output.setVertexToShareInstancesWith(head);
  sync.setVertexToShareInstancesWith(head);
  ssTail.setVertexToShareInstancesWith(wsTail);
  ssFakeTail.setVertexToShareInstancesWith(ssTail);
  wsFakeTail.setVertexToShareInstancesWith(wsTail);
  return jobGraph;
}
