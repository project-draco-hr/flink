{
  JobID jobId=new JobID();
  JobVertexID jobVertexId=new JobVertexID();
  int numKeyGroups=123;
  int numRanges=10;
  int fract=numKeyGroups / numRanges;
  int remain=numKeyGroups % numRanges;
  List<KeyGroupRange> keyGroupRanges=new ArrayList<>(numRanges);
  int start=0;
  for (int i=0; i < numRanges; ++i) {
    int end=start + fract - 1;
    if (remain > 0) {
      --remain;
      ++end;
    }
    KeyGroupRange range=new KeyGroupRange(start,end);
    keyGroupRanges.add(range);
    start=end + 1;
  }
  System.out.println(keyGroupRanges);
  String registrationName="asdasdasdasd";
  KvStateLocation location=new KvStateLocation(jobId,jobVertexId,numKeyGroups,registrationName);
  KvStateID[] kvStateIds=new KvStateID[numRanges];
  KvStateServerAddress[] serverAddresses=new KvStateServerAddress[numRanges];
  InetAddress host=InetAddress.getLocalHost();
  int registeredCount=0;
  for (int rangeIdx=0; rangeIdx < numRanges; rangeIdx++) {
    kvStateIds[rangeIdx]=new KvStateID();
    serverAddresses[rangeIdx]=new KvStateServerAddress(host,1024 + rangeIdx);
    KeyGroupRange keyGroupRange=keyGroupRanges.get(rangeIdx);
    location.registerKvState(keyGroupRange,kvStateIds[rangeIdx],serverAddresses[rangeIdx]);
    registeredCount+=keyGroupRange.getNumberOfKeyGroups();
    assertEquals(registeredCount,location.getNumRegisteredKeyGroups());
  }
  for (int rangeIdx=0; rangeIdx < numRanges; rangeIdx++) {
    KeyGroupRange keyGroupRange=keyGroupRanges.get(rangeIdx);
    for (int keyGroup=keyGroupRange.getStartKeyGroup(); keyGroup <= keyGroupRange.getEndKeyGroup(); ++keyGroup) {
      assertEquals(kvStateIds[rangeIdx],location.getKvStateID(keyGroup));
      assertEquals(serverAddresses[rangeIdx],location.getKvStateServerAddress(keyGroup));
    }
  }
  for (int rangeIdx=0; rangeIdx < numRanges; rangeIdx++) {
    kvStateIds[rangeIdx]=new KvStateID();
    serverAddresses[rangeIdx]=new KvStateServerAddress(host,1024 + rangeIdx);
    location.registerKvState(keyGroupRanges.get(rangeIdx),kvStateIds[rangeIdx],serverAddresses[rangeIdx]);
    assertEquals(registeredCount,location.getNumRegisteredKeyGroups());
  }
  for (int rangeIdx=0; rangeIdx < numRanges; rangeIdx++) {
    KeyGroupRange keyGroupRange=keyGroupRanges.get(rangeIdx);
    for (int keyGroup=keyGroupRange.getStartKeyGroup(); keyGroup <= keyGroupRange.getEndKeyGroup(); ++keyGroup) {
      assertEquals(kvStateIds[rangeIdx],location.getKvStateID(keyGroup));
      assertEquals(serverAddresses[rangeIdx],location.getKvStateServerAddress(keyGroup));
    }
  }
  for (int rangeIdx=0; rangeIdx < numRanges; rangeIdx++) {
    KeyGroupRange keyGroupRange=keyGroupRanges.get(rangeIdx);
    location.unregisterKvState(keyGroupRange);
    registeredCount-=keyGroupRange.getNumberOfKeyGroups();
    assertEquals(registeredCount,location.getNumRegisteredKeyGroups());
  }
  for (int rangeIdx=0; rangeIdx < numRanges; rangeIdx++) {
    KeyGroupRange keyGroupRange=keyGroupRanges.get(rangeIdx);
    for (int keyGroup=keyGroupRange.getStartKeyGroup(); keyGroup <= keyGroupRange.getEndKeyGroup(); ++keyGroup) {
      assertEquals(null,location.getKvStateID(keyGroup));
      assertEquals(null,location.getKvStateServerAddress(keyGroup));
    }
  }
  assertEquals(0,location.getNumRegisteredKeyGroups());
}
