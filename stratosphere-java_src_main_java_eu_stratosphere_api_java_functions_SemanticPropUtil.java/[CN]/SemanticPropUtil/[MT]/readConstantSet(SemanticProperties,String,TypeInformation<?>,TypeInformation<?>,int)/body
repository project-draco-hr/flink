{
  Pattern check=Pattern.compile(REGEX_ANNOTATION);
  Matcher matcher=check.matcher(s);
  int sourceField=0;
  if (!matcher.matches()) {
    throw new RuntimeException("Wrong annotation String format. Please read the documentation.");
  }
  sourceField=Integer.valueOf(matcher.group(1));
  if (!isValidField(inType,sourceField)) {
    throw new IndexOutOfBoundsException("Annotation: Field " + sourceField + " not available in the input tuple.");
  }
  FieldSet fs=readFieldSetFromString(matcher.group(2),inType,outType);
  if (sp instanceof SingleInputSemanticProperties) {
    ((SingleInputSemanticProperties)sp).addForwardedField(sourceField,fs);
  }
 else   if (sp instanceof DualInputSemanticProperties) {
    if (input == 0) {
      ((DualInputSemanticProperties)sp).addForwardedField1(sourceField,fs);
    }
 else     if (input == 1) {
      ((DualInputSemanticProperties)sp).addForwardedField2(sourceField,fs);
    }
  }
}
