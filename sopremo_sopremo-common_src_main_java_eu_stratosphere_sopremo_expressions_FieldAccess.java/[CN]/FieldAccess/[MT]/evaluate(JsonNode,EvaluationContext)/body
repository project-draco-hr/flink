{
  if (node.isArray()) {
    if (node instanceof StreamArrayNode)     return new StreamArrayNode(new ConversionIterator<JsonNode,JsonNode>(node.iterator()){
      @Override protected JsonNode convert(      JsonNode inputObject){
        if (!inputObject.isObject())         throw new EvaluationException("Cannot access field of primitive json type");
        return inputObject.get(FieldAccess.this.field);
      }
    }
);
    ArrayNode arrayNode=new ArrayNode(JsonUtil.NODE_FACTORY);
    for (int index=0, size=node.size(); index < size; index++) {
      if (!node.get(index).isObject())       throw new EvaluationException("Cannot access field of primitive json type");
      arrayNode.add(node.get(index).get(this.field));
    }
    return arrayNode;
  }
 else   if (!node.isObject())   throw new EvaluationException("Cannot access field of primitive json type");
  return node.get(this.field);
}
