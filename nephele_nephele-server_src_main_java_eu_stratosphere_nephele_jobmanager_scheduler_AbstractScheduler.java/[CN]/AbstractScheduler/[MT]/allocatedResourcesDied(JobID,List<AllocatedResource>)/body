{
  final ExecutionGraph eg=getExecutionGraphByID(jobID);
  if (eg == null) {
    LOG.error("Cannot find execution graph for job with ID " + jobID);
    return;
  }
synchronized (eg) {
    for (    final AllocatedResource allocatedResource : allocatedResources) {
      LOG.info("Resource " + allocatedResource.getInstance().getName() + " for Job "+ jobID+ " died.");
      final ExecutionGraph executionGraph=getExecutionGraphByID(jobID);
      if (executionGraph == null) {
        LOG.error("Cannot find execution graph for job " + jobID);
        return;
      }
      final List<ExecutionVertex> vertices=executionGraph.getVerticesAssignedToResource(allocatedResource);
      Iterator<ExecutionVertex> vertexIter=vertices.iterator();
      final DummyInstance dummyInstance=DummyInstance.createDummyInstance(allocatedResource.getInstance().getType());
      final AllocatedResource dummyResource=new AllocatedResource(dummyInstance,allocatedResource.getInstanceType(),new AllocationID());
      while (vertexIter.hasNext()) {
        final ExecutionVertex vertex=vertexIter.next();
        vertex.setAllocatedResource(dummyResource);
      }
      final String failureMessage=allocatedResource.getInstance().getName() + " died";
      vertexIter=vertices.iterator();
      while (vertexIter.hasNext()) {
        final ExecutionVertex vertex=vertexIter.next();
        vertex.updateCheckpointState(CheckpointState.NONE);
        final ExecutionState state=vertex.getExecutionState();
switch (state) {
case ASSIGNED:
case READY:
case STARTING:
case RUNNING:
case FINISHING:
          vertex.updateExecutionState(ExecutionState.FAILED,failureMessage);
        break;
default :
    }
  }
}
}
final InternalJobStatus js=eg.getJobStatus();
if (js != InternalJobStatus.FAILING && js != InternalJobStatus.FAILED) {
deployAssignedVertices(eg);
final ExecutionStage stage=eg.getCurrentExecutionStage();
try {
  requestInstances(stage);
}
 catch (InstanceException e) {
  e.printStackTrace();
}
}
}
