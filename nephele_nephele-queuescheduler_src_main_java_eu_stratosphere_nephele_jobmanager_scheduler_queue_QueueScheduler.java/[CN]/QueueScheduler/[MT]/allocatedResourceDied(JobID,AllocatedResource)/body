{
  LOG.info("Resource on " + allocatedResource.getInstance().getName() + " for Job "+ jobID+ " died.");
  ExecutionGraph job=this.jobQueue.getFirst();
  Iterator<ExecutionGraph> iterator=this.jobQueue.descendingIterator();
  while (job.getJobID() != jobID) {
    if (iterator.hasNext()) {
      job=iterator.next();
    }
 else {
      LOG.error("No Job with ID " + jobID + " in Queue");
      return;
    }
  }
  List<ExecutionVertex> vertices=job.getVerticesAssignedToResource(allocatedResource);
  Iterator<ExecutionVertex> vertexIter=vertices.iterator();
  while (vertexIter.hasNext()) {
    ExecutionVertex vertex=vertexIter.next();
    vertex.getEnvironment().changeExecutionState(ExecutionState.FAILED,"The Resource " + allocatedResource.getInstance().getName() + " the Vertex "+ vertex.getEnvironment().getTaskName()+ " was assigned to, died");
    if (vertex.getExecutionState() == ExecutionState.FAILED) {
      job.executionStateChanged(vertex.getEnvironment(),ExecutionState.FAILED,"The Resource " + allocatedResource.getInstance().getName() + " the Vertex "+ vertex.getEnvironment().getTaskName()+ " was assigned to, died");
      return;
    }
    vertex.setAllocatedResource(new AllocatedResource(DummyInstance.createDummyInstance(allocatedResource.getInstanceType()),allocatedResource.getInstanceType(),null));
    vertex.getEnvironment().changeExecutionState(ExecutionState.ASSIGNING,null);
  }
  try {
    LOG.info("Trying to allocate instance of type " + allocatedResource.getInstanceType().getIdentifier());
    Map<InstanceType,Integer> instanceMap=new HashMap<InstanceType,Integer>();
    instanceMap.put(allocatedResource.getInstanceType(),1);
    this.instanceManager.requestInstance(jobID,job.getJobConfiguration(),instanceMap,null);
  }
 catch (  InstanceException e) {
    e.printStackTrace();
  }
  super.deployAssignedVertices(job);
  boolean notAssigend=true;
  while (notAssigend) {
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    notAssigend=false;
    for (int i=0; i < vertices.size(); i++) {
      if (vertices.get(i).getExecutionState() == ExecutionState.ASSIGNING) {
        notAssigend=true;
        super.deployAssignedVertices(job);
        break;
      }
    }
  }
  job.executionStateChanged(vertices.get(0).getEnvironment(),ExecutionState.RECOVERING,null);
}
