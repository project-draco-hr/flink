{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple2<Long,Long>> data=env.generateSequence(0,10).flatMap(new FlatMapFunction<Long,Tuple2<Long,Long>>(){
      @Override public void flatMap(      Long value,      Collector<Tuple2<Long,Long>> out){
        out.collect(new Tuple2<Long,Long>(value,value));
        out.collect(new Tuple2<Long,Long>(value,value));
        out.collect(new Tuple2<Long,Long>(value,value));
      }
    }
).rebalance();
    DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iter=data.iterateDelta(data,10,0);
    List<Integer> result=iter.closeWith(iter.getWorkset(),iter.getWorkset()).map(new MapFunction<Tuple2<Long,Long>,Integer>(){
      @Override public Integer map(      Tuple2<Long,Long> value){
        return value.f0.intValue();
      }
    }
).collect();
    assertEquals(11,result.size());
    Collections.sort(result);
    assertEquals(Arrays.asList(0,1,2,3,4,5,6,7,8,9,10),result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
