{
  int keyCnt=100;
  int valCnt=20;
{
    super.initEnvironment(3 * 1024 * 1024);
    super.addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false),1);
    super.addOutput(this.outList);
  }
{
    Configuration config=new Configuration();
    config.addAll(super.getConfiguration(),"");
    TaskConfig combineConfig=new TaskConfig(config);
    combineConfig.setStubClass(MockReduceStub.class);
    combineConfig.setLocalStrategy(LocalStrategy.COMBININGSORT);
    combineConfig.setMemorySize(3 * 1024 * 1024);
    combineConfig.setNumFilehandles(2);
    PactRecordComparatorFactory.writeComparatorSetupToConfig(combineConfig.getConfigForInputParameters(0),new int[]{0},new Class[]{PactInteger.class},new boolean[]{true});
    super.getTaskConfig().addChainedTask(ChainedCombineDriver.class,combineConfig,"combine");
  }
{
    final RegularPactTask<GenericMapper<PactRecord,PactRecord>,PactRecord> testTask=new RegularPactTask<GenericMapper<PactRecord,PactRecord>,PactRecord>();
    super.registerTask(testTask,MapDriver.class,MockMapStub.class);
    try {
      testTask.invoke();
    }
 catch (    Exception e) {
      LOG.debug(e);
      Assert.fail("Invoke method caused exception.");
    }
  }
  Assert.assertEquals(keyCnt,this.outList.size());
}
