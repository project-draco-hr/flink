{
  int keyCnt=100;
  int valCnt=20;
  initEnvironment(3 * 1024 * 1024);
  addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false),1);
  addOutput(this.outList);
{
    Configuration config=new Configuration();
    config.addAll(super.getConfiguration(),"");
    TaskConfig combineConfig=new TaskConfig(config);
    combineConfig.setStubClass(MockFailingCombineStub.class);
    combineConfig.setInputLocalStrategy(0,LocalStrategy.COMBININGSORT);
    combineConfig.setMemoryInput(0,3 * 1024 * 1024);
    combineConfig.setFilehandlesInput(0,2);
    PactRecordComparatorFactory fact=new PactRecordComparatorFactory(new int[]{0},new Class[]{PactInteger.class},new boolean[]{true});
    combineConfig.setInputComparator(fact,0);
    super.getTaskConfig().addChainedTask(ChainedCombineDriver.class,combineConfig,"combine");
  }
{
    final RegularPactTask<GenericMapper<PactRecord,PactRecord>,PactRecord> testTask=new RegularPactTask<GenericMapper<PactRecord,PactRecord>,PactRecord>();
    super.registerTask(testTask,MapDriver.class,MockMapStub.class);
    boolean stubFailed=false;
    try {
      testTask.invoke();
    }
 catch (    Exception e) {
      stubFailed=true;
    }
    Assert.assertTrue("Stub exception was not forwarded.",stubFailed);
  }
}
