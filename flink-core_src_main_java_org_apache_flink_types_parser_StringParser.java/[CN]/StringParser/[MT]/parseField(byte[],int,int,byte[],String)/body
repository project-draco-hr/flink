{
  int i=startPos;
  final int delimLimit=limit - delimiter.length + 1;
  if (quotedStringParsing && bytes[i] == quoteCharacter) {
    i++;
    while (i < limit && (bytes[i] != quoteCharacter || bytes[i - 1] == BACKSLASH)) {
      i++;
    }
    if (i == limit) {
      setErrorState(ParseErrorState.UNTERMINATED_QUOTED_STRING);
      return -1;
    }
 else {
      i++;
      if (i == limit) {
        this.result=new String(bytes,startPos + 1,i - startPos - 2);
        return limit;
      }
 else       if (i < delimLimit && delimiterNext(bytes,i,delimiter)) {
        this.result=new String(bytes,startPos + 1,i - startPos - 2);
        return i + delimiter.length;
      }
 else {
        setErrorState(ParseErrorState.UNQUOTED_CHARS_AFTER_QUOTED_STRING);
        return -1;
      }
    }
  }
 else {
    while (i < delimLimit && !delimiterNext(bytes,i,delimiter)) {
      i++;
    }
    if (i >= delimLimit) {
      if (limit == startPos) {
        setErrorState(ParseErrorState.EMPTY_COLUMN);
      }
      this.result=new String(bytes,startPos,limit - startPos);
      return limit;
    }
 else {
      if (i == startPos) {
        setErrorState(ParseErrorState.EMPTY_COLUMN);
      }
      this.result=new String(bytes,startPos,i - startPos);
      return i + delimiter.length;
    }
  }
}
