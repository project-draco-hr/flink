{
  @SuppressWarnings("unchecked") final TypeComparator<PactRecord> intComp=new PactRecordComparatorFactory(new int[]{0},new Class[]{PactInteger.class}).createComparator();
  final ChannelSelector<SerializationDelegate<PactRecord>> oe1=new OutputEmitter<PactRecord>(ShipStrategyType.PARTITION_HASH,intComp);
  final SerializationDelegate<PactRecord> delegate=new SerializationDelegate<PactRecord>(new PactRecordSerializerFactory().getSerializer());
  int numChans=100;
  int numRecs=50000;
  int[] hit=new int[numChans];
  for (int i=0; i < numRecs; i++) {
    PactInteger k=new PactInteger(i);
    PactRecord rec=new PactRecord(k);
    delegate.setInstance(rec);
    int[] chans=oe1.selectChannels(delegate,hit.length);
    for (int j=0; j < chans.length; j++) {
      hit[chans[j]]++;
    }
  }
  int cnt=0;
  for (int i=0; i < hit.length; i++) {
    assertTrue(hit[i] > 0);
    cnt+=hit[i];
  }
  assertTrue(cnt == numRecs);
  @SuppressWarnings("unchecked") final TypeComparator<PactRecord> stringComp=new PactRecordComparatorFactory(new int[]{0},new Class[]{PactString.class}).createComparator();
  final ChannelSelector<SerializationDelegate<PactRecord>> oe2=new OutputEmitter<PactRecord>(ShipStrategyType.PARTITION_HASH,stringComp);
  numChans=100;
  numRecs=10000;
  hit=new int[numChans];
  for (int i=0; i < numRecs; i++) {
    PactString k=new PactString(i + "");
    PactRecord rec=new PactRecord(k);
    delegate.setInstance(rec);
    int[] chans=oe2.selectChannels(delegate,hit.length);
    for (int j=0; j < chans.length; j++) {
      hit[chans[j]]++;
    }
  }
  cnt=0;
  for (int i=0; i < hit.length; i++) {
    assertTrue(hit[i] > 0);
    cnt+=hit[i];
  }
  assertTrue(cnt == numRecs);
}
