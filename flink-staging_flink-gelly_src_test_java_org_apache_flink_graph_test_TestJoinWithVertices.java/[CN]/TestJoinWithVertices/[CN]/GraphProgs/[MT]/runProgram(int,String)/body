{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
      Graph<Long,Long,Long> result=graph.joinWithVertices(graph.getVertices().map(new MapFunction<Vertex<Long,Long>,Tuple2<Long,Long>>(){
        @Override public Tuple2<Long,Long> map(        Vertex<Long,Long> vertex) throws Exception {
          return new Tuple2<Long,Long>(vertex.getId(),vertex.getValue());
        }
      }
),new MapFunction<Tuple2<Long,Long>,Long>(){
        @Override public Long map(        Tuple2<Long,Long> tuple) throws Exception {
          return tuple.f0 + tuple.f1;
        }
      }
);
      result.getVertices().writeAsCsv(resultPath);
      env.execute();
      return "1,2\n" + "2,4\n" + "3,6\n"+ "4,8\n"+ "5,10\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    Graph<Long,Long,Long> result=graph.joinWithVertices(graph.getVertices().first(3).map(new MapFunction<Vertex<Long,Long>,Tuple2<Long,Long>>(){
      @Override public Tuple2<Long,Long> map(      Vertex<Long,Long> vertex) throws Exception {
        return new Tuple2<Long,Long>(vertex.getId(),vertex.getValue());
      }
    }
),new MapFunction<Tuple2<Long,Long>,Long>(){
      @Override public Long map(      Tuple2<Long,Long> tuple) throws Exception {
        return tuple.f0 + tuple.f1;
      }
    }
);
    result.getVertices().writeAsCsv(resultPath);
    env.execute();
    return "1,2\n" + "2,4\n" + "3,6\n"+ "4,4\n"+ "5,5\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
  Graph<Long,Long,Long> result=graph.joinWithVertices(graph.getVertices().first(3).map(new MapFunction<Vertex<Long,Long>,Tuple2<Long,Boolean>>(){
    @Override public Tuple2<Long,Boolean> map(    Vertex<Long,Long> vertex) throws Exception {
      return new Tuple2<Long,Boolean>(vertex.getId(),true);
    }
  }
),new MapFunction<Tuple2<Long,Boolean>,Long>(){
    @Override public Long map(    Tuple2<Long,Boolean> tuple) throws Exception {
      if (tuple.f1) {
        return tuple.f0 * 2;
      }
 else {
        return tuple.f0;
      }
    }
  }
);
  result.getVertices().writeAsCsv(resultPath);
  env.execute();
  return "1,2\n" + "2,4\n" + "3,6\n"+ "4,4\n"+ "5,5\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
Graph<Long,Long,Long> result=graph.joinWithVertices(TestGraphUtils.getLongLongTuple2Data(env),new MapFunction<Tuple2<Long,Long>,Long>(){
  public Long map(  Tuple2<Long,Long> tuple) throws Exception {
    return tuple.f1;
  }
}
);
result.getVertices().writeAsCsv(resultPath);
env.execute();
return "1,10\n" + "2,20\n" + "3,30\n"+ "4,40\n"+ "5,5\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
Graph<Long,Long,Long> result=graph.joinWithVertices(TestGraphUtils.getLongCustomTuple2Data(env),new MapFunction<Tuple2<Long,DummyCustomParameterizedType<Float>>,Long>(){
public Long map(Tuple2<Long,DummyCustomParameterizedType<Float>> tuple) throws Exception {
  return (long)tuple.f1.getIntField();
}
}
);
result.getVertices().writeAsCsv(resultPath);
env.execute();
return "1,10\n" + "2,20\n" + "3,30\n"+ "4,40\n"+ "5,5\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
