{
  final int numSources=sourcePartitions.length;
  final int parallelism=getTotalNumberOfParallelSubtasks();
  if (numSources == parallelism) {
    return new ExecutionEdge2[]{new ExecutionEdge2(sourcePartitions[subTaskIndex],this,inputNumber)};
  }
 else   if (numSources < parallelism) {
    int sourcePartition;
    if (parallelism % numSources == 0) {
      int factor=parallelism / numSources;
      sourcePartition=subTaskIndex / factor;
    }
 else {
      float factor=((float)parallelism) / numSources;
      sourcePartition=(int)(subTaskIndex / factor);
    }
    return new ExecutionEdge2[]{new ExecutionEdge2(sourcePartitions[sourcePartition],this,inputNumber)};
  }
 else {
    if (numSources % parallelism == 0) {
      int factor=numSources / parallelism;
      int startIndex=subTaskIndex * factor;
      ExecutionEdge2[] edges=new ExecutionEdge2[factor];
      for (int i=0; i < factor; i++) {
        edges[i]=new ExecutionEdge2(sourcePartitions[startIndex + i],this,inputNumber);
      }
      return edges;
    }
 else {
      float factor=((float)numSources) / parallelism;
      int start=(int)(subTaskIndex * factor);
      int end=(subTaskIndex == getTotalNumberOfParallelSubtasks() - 1) ? sourcePartitions.length : (int)((subTaskIndex + 1) * factor);
      ExecutionEdge2[] edges=new ExecutionEdge2[end - start];
      for (int i=0; i < edges.length; i++) {
        edges[i]=new ExecutionEdge2(sourcePartitions[start + i],this,inputNumber);
      }
      return edges;
    }
  }
}
