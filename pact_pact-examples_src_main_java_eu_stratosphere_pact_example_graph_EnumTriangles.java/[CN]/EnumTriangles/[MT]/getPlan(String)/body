{
  int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String edgeInput=(args.length > 1 ? args[1] : "");
  String output=(args.length > 2 ? args[2] : "");
  FileDataSource edges=new FileDataSource(EdgeInFormat.class,edgeInput,"BTC Edges");
  ReduceContract buildTriads=new ReduceContract.Builder(BuildTriads.class,PactString.class,0).name("Build Triads").build();
  MatchContract closeTriads=MatchContract.builder(CloseTriads.class,PactString.class,1,0).keyField(PactString.class,2,1).name("Close Triads").build();
  closeTriads.setParameter("INPUT_LEFT_SHIP_STRATEGY","SHIP_REPARTITION_HASH");
  closeTriads.setParameter("INPUT_RIGHT_SHIP_STRATEGY","SHIP_REPARTITION_HASH");
  closeTriads.setParameter("LOCAL_STRATEGY","LOCAL_STRATEGY_HASH_BUILD_SECOND");
  FileDataSink triangles=new FileDataSink(RecordOutputFormat.class,output,"Output");
  RecordOutputFormat.configureRecordFormat(triangles).recordDelimiter('\n').fieldDelimiter(' ').field(PactString.class,0).field(PactString.class,1).field(PactString.class,2);
  triangles.setInput(closeTriads);
  closeTriads.setSecondInput(edges);
  closeTriads.setFirstInput(buildTriads);
  buildTriads.setInput(edges);
  Plan plan=new Plan(triangles,"Enumerate Triangles");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
