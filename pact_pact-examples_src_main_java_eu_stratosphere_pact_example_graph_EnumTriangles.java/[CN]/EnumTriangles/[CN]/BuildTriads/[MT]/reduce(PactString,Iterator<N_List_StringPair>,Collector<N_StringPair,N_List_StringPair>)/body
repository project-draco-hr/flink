{
  LinkedList<N_StringPair> edges=new LinkedList<N_StringPair>();
  while (edgeListsList.hasNext()) {
    N_StringPair value=edgeListsList.next().get(0);
    edges.add(value);
    LOG.info("Processed: [" + vertice + ","+ value+ "]");
  }
  for (int i=0; i < edges.size(); i++) {
    for (int j=i + 1; j < edges.size(); j++) {
      PactString v_i=edges.get(i).getSecond();
      PactString v_j=edges.get(j).getSecond();
      N_StringPair missingEdge;
      N_List_StringPair triad=new N_List_StringPair();
      if (v_i.compareTo(v_j) <= 0) {
        missingEdge=new N_StringPair(v_i,v_j);
        triad.add(edges.get(i));
        triad.add(edges.get(j));
      }
 else {
        missingEdge=new N_StringPair(v_j,v_i);
        triad.add(edges.get(j));
        triad.add(edges.get(i));
      }
      LOG.info("Emitted: [" + missingEdge + ","+ triad+ "]");
      out.collect(missingEdge,triad);
    }
  }
}
