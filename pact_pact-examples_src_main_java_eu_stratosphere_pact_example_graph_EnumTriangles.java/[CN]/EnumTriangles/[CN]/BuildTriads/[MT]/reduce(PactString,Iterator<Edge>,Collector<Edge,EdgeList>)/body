{
  LinkedList<Edge> edgesList=new LinkedList<Edge>();
  while (edges.hasNext()) {
    edgesList.add(edges.next());
    LOG.debug("Read: " + node + " :: "+ edgesList.getLast());
  }
  if (edgesList.size() <= 1) {
    return;
  }
  for (int i=0; i < edgesList.size(); i++) {
    for (int j=i + 1; j < edgesList.size(); j++) {
      PactString e_i=edgesList.get(i).getSecond();
      PactString e_j=edgesList.get(j).getSecond();
      Edge missingEdge;
      EdgeList triad=new EdgeList();
      if (e_i.compareTo(e_j) <= 0) {
        missingEdge=new Edge(e_i,e_j);
        triad.add(edgesList.get(i));
        triad.add(edgesList.get(j));
      }
 else {
        missingEdge=new Edge(e_j,e_i);
        triad.add(edgesList.get(j));
        triad.add(edgesList.get(i));
      }
      LOG.debug("Emit: " + missingEdge + " :: "+ triad);
      out.collect(missingEdge,triad);
    }
  }
}
