{
  final int NUM_ELEMENTS_PER_KEY=3000;
  final int WINDOW_SIZE=100;
  final int NUM_KEYS=1;
  FailingSource.reset();
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getLeaderRPCPort());
    env.setParallelism(PARALLELISM);
    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
    env.enableCheckpointing(100);
    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3,0));
    env.getConfig().disableSysoutLogging();
    env.addSource(new FailingSource(NUM_KEYS,NUM_ELEMENTS_PER_KEY,NUM_ELEMENTS_PER_KEY / 3)).rebalance().timeWindowAll(Time.of(WINDOW_SIZE,MILLISECONDS)).apply(new RichAllWindowFunction<Tuple2<Long,IntType>,Tuple4<Long,Long,Long,IntType>,TimeWindow>(){
      private boolean open=false;
      @Override public void open(      Configuration parameters){
        assertEquals(1,getRuntimeContext().getNumberOfParallelSubtasks());
        open=true;
      }
      @Override public void apply(      TimeWindow window,      Iterable<Tuple2<Long,IntType>> values,      Collector<Tuple4<Long,Long,Long,IntType>> out){
        assertTrue(open);
        int sum=0;
        long key=-1;
        for (        Tuple2<Long,IntType> value : values) {
          sum+=value.f1.value;
          key=value.f0;
        }
        out.collect(new Tuple4<>(key,window.getStart(),window.getEnd(),new IntType(sum)));
      }
    }
).addSink(new ValidatingSink(NUM_KEYS,NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);
    tryExecute(env,"Tumbling Window Test");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
