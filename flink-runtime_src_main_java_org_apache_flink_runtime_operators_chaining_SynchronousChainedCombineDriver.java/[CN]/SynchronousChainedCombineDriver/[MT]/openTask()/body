{
  final Configuration stubConfig=this.config.getStubParameters();
  RegularPactTask.openUserCode(this.combiner,stubConfig);
  final TypeSerializerFactory<IN> serializerFactory=this.config.getInputSerializer(0,this.userCodeClassLoader);
  final TypeComparatorFactory<IN> sortingComparatorFactory=this.config.getDriverComparator(0,this.userCodeClassLoader);
  final TypeComparatorFactory<IN> groupingComparatorFactory=this.config.getDriverComparator(1,this.userCodeClassLoader);
  this.serializer=serializerFactory.getSerializer();
  TypeComparator<IN> sortingComparator=sortingComparatorFactory.createComparator();
  this.groupingComparator=groupingComparatorFactory.createComparator();
  MemoryManager memManager=this.parent.getEnvironment().getMemoryManager();
  final int numMemoryPages=memManager.computeNumberOfPages(this.config.getRelativeMemoryDriver());
  this.memory=memManager.allocatePages(this.parent,numMemoryPages);
  if (sortingComparator.supportsSerializationWithKeyNormalization() && this.serializer.getLength() > 0 && this.serializer.getLength() <= THRESHOLD_FOR_IN_PLACE_SORTING) {
    this.sorter=new FixedLengthRecordSorter<IN>(this.serializer,sortingComparator,this.memory);
  }
 else {
    this.sorter=new NormalizedKeySorter<IN>(this.serializer,sortingComparator.duplicate(),this.memory);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("SynchronousChainedCombineDriver object reuse: " + (this.objectReuseEnabled ? "ENABLED" : "DISABLED") + ".");
  }
}
