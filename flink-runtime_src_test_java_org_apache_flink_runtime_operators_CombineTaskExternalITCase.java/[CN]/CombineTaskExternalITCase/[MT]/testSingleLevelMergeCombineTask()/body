{
  final int keyCnt=40000;
  final int valCnt=8;
  addInput(new UniformRecordGenerator(keyCnt,valCnt,false));
  addDriverComparator(this.comparator);
  addDriverComparator(this.comparator);
  setOutput(this.outList);
  getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
  getTaskConfig().setRelativeMemoryDriver(combine_frac);
  getTaskConfig().setFilehandlesDriver(2);
  final GroupReduceCombineDriver<Record> testTask=new GroupReduceCombineDriver<Record>();
  try {
    testDriver(testTask,MockCombiningReduceStub.class);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("Invoke method caused exception.");
  }
  int expSum=0;
  for (int i=1; i < valCnt; i++) {
    expSum+=i;
  }
  final HashMap<IntValue,IntValue> aggMap=new HashMap<IntValue,IntValue>();
  for (  Record record : this.outList) {
    IntValue key=new IntValue();
    IntValue value=new IntValue();
    key=record.getField(0,key);
    value=record.getField(1,value);
    IntValue prevVal=aggMap.get(key);
    if (prevVal != null) {
      aggMap.put(key,new IntValue(prevVal.getValue() + value.getValue()));
    }
 else {
      aggMap.put(key,value);
    }
  }
  Assert.assertTrue("Resultset size was " + aggMap.size() + ". Expected was "+ keyCnt,aggMap.size() == keyCnt);
  for (  IntValue integer : aggMap.values()) {
    Assert.assertTrue("Incorrect result",integer.getValue() == expSum);
  }
  this.outList.clear();
}
