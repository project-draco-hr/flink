{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
      List<Tuple3<Long,Long,Long>> edges=new ArrayList<Tuple3<Long,Long,Long>>();
      edges.add(new Tuple3<Long,Long,Long>(6L,1L,61L));
      graph=graph.addVertex(new Tuple2<Long,Long>(6L,6L),edges);
      graph.getEdges().writeAsCsv(resultPath);
      env.execute();
      return "1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n"+ "6,1,61\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    List<Tuple3<Long,Long,Long>> edges=new ArrayList<Tuple3<Long,Long,Long>>();
    edges.add(new Tuple3<Long,Long,Long>(1L,5L,15L));
    graph=graph.addVertex(new Tuple2<Long,Long>(1L,1L),edges);
    graph.getEdges().writeAsCsv(resultPath);
    env.execute();
    return "1,2,12\n" + "1,3,13\n" + "1,5,15\n"+ "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
  List<Tuple3<Long,Long,Long>> edges=new ArrayList<Tuple3<Long,Long,Long>>();
  graph=graph.addVertex(new Tuple2<Long,Long>(6L,6L),edges);
  graph.getVertices().writeAsCsv(resultPath);
  env.execute();
  return "1,1\n" + "2,2\n" + "3,3\n"+ "4,4\n"+ "5,5\n"+ "6,6\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph=graph.removeVertex(new Tuple2<Long,Long>(5L,5L));
graph.getEdges().writeAsCsv(resultPath);
env.execute();
return "1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph=graph.removeVertex(new Tuple2<Long,Long>(6L,6L));
graph.getEdges().writeAsCsv(resultPath);
env.execute();
return "1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
}
case 6:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph=graph.addEdge(new Tuple2<Long,Long>(6L,6L),new Tuple2<Long,Long>(1L,1L),61L);
graph.getEdges().writeAsCsv(resultPath);
env.execute();
return "1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n"+ "6,1,61\n";
}
case 7:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph=graph.addEdge(new Tuple2<Long,Long>(1L,1L),new Tuple2<Long,Long>(2L,2L),12L);
graph.getEdges().writeAsCsv(resultPath);
env.execute();
return "1,2,12\n" + "1,2,12\n" + "1,3,13\n"+ "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
}
case 8:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph=graph.removeEdge(new Tuple3<Long,Long,Long>(5L,1L,51L));
graph.getEdges().writeAsCsv(resultPath);
env.execute();
return "1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n";
}
case 9:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph=graph.removeEdge(new Tuple3<Long,Long,Long>(6L,1L,61L));
graph.getEdges().writeAsCsv(resultPath);
env.execute();
return "1,2,12\n" + "1,3,13\n" + "2,3,23\n"+ "3,4,34\n"+ "3,5,35\n"+ "4,5,45\n"+ "5,1,51\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
