{
  int numSubtasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String input1Path=(args.length > 1 ? args[1] : "");
  String input2Path=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  int numSubtasksInput2=(args.length > 4 ? Integer.parseInt(args[4]) : 1);
  @SuppressWarnings("unchecked") CsvInputFormat format1=new CsvInputFormat('|',IntValue.class,IntValue.class);
  FileDataSource input1=new FileDataSource(format1,input1Path,"Input 1");
  ReduceOperator aggInput1=ReduceOperator.builder(DummyReduce.class,IntValue.class,0).input(input1).name("AggOrders").build();
  @SuppressWarnings("unchecked") CsvInputFormat format2=new CsvInputFormat('|',IntValue.class,IntValue.class);
  FileDataSource input2=new FileDataSource(format2,input2Path,"Input 2");
  input2.setParallelism(numSubtasksInput2);
  ReduceOperator aggInput2=ReduceOperator.builder(DummyReduce.class,IntValue.class,0).input(input2).name("AggLines").build();
  aggInput2.setParallelism(numSubtasksInput2);
  JoinOperator joinLiO=JoinOperator.builder(JoinInputs.class,IntValue.class,0,0).input1(aggInput1).input2(aggInput2).name("JoinLiO").build();
  FileDataSink result=new FileDataSink(new CsvOutputFormat(),output,joinLiO,"Output");
  CsvOutputFormat.configureRecordFormat(result).recordDelimiter('\n').fieldDelimiter('|').lenient(true).field(IntValue.class,0).field(IntValue.class,1).field(IntValue.class,2);
  Plan plan=new Plan(result,"Merge Only Join");
  plan.setDefaultParallelism(numSubtasks);
  return plan;
}
