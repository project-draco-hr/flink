{
  Tuple2<Integer,Integer> backoff=new Tuple2<Integer,Integer>(500,3000);
  int[] expectedDelays={backoff._1(),1000,2000,backoff._2()};
  SingleInputGate inputGate=mock(SingleInputGate.class);
  BufferProvider bufferProvider=mock(BufferProvider.class);
  when(inputGate.getBufferProvider()).thenReturn(bufferProvider);
  ResultPartitionManager partitionManager=mock(ResultPartitionManager.class);
  LocalInputChannel ch=createLocalInputChannel(inputGate,partitionManager,backoff);
  when(partitionManager.createSubpartitionView(eq(ch.partitionId),eq(0),eq(bufferProvider))).thenThrow(new PartitionNotFoundException(ch.partitionId));
  Timer timer=mock(Timer.class);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      ((TimerTask)invocation.getArguments()[0]).run();
      return null;
    }
  }
).when(timer).schedule(any(TimerTask.class),anyLong());
  ch.requestSubpartition(0);
  verify(partitionManager).createSubpartitionView(eq(ch.partitionId),eq(0),eq(bufferProvider));
  for (  long expected : expectedDelays) {
    ch.retriggerSubpartitionRequest(timer,0);
    verify(timer).schedule(any(TimerTask.class),eq(expected));
  }
  try {
    ch.retriggerSubpartitionRequest(timer,0);
    ch.getNextBuffer();
    fail("Did not throw expected exception.");
  }
 catch (  Exception expected) {
  }
}
