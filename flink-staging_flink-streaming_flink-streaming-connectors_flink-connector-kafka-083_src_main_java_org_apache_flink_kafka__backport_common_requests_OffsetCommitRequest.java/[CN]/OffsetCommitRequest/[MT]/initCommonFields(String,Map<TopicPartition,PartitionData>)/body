{
  Map<String,Map<Integer,PartitionData>> topicsData=CollectionUtils.groupDataByTopic(offsetData);
  struct.set(GROUP_ID_KEY_NAME,groupId);
  List<Struct> topicArray=new ArrayList<Struct>();
  for (  Map.Entry<String,Map<Integer,PartitionData>> topicEntry : topicsData.entrySet()) {
    Struct topicData=struct.instance(TOPICS_KEY_NAME);
    topicData.set(TOPIC_KEY_NAME,topicEntry.getKey());
    List<Struct> partitionArray=new ArrayList<Struct>();
    for (    Map.Entry<Integer,PartitionData> partitionEntry : topicEntry.getValue().entrySet()) {
      PartitionData fetchPartitionData=partitionEntry.getValue();
      Struct partitionData=topicData.instance(PARTITIONS_KEY_NAME);
      partitionData.set(PARTITION_KEY_NAME,partitionEntry.getKey());
      partitionData.set(COMMIT_OFFSET_KEY_NAME,fetchPartitionData.offset);
      if (partitionData.hasField(TIMESTAMP_KEY_NAME))       partitionData.set(TIMESTAMP_KEY_NAME,fetchPartitionData.timestamp);
      partitionData.set(METADATA_KEY_NAME,fetchPartitionData.metadata);
      partitionArray.add(partitionData);
    }
    topicData.set(PARTITIONS_KEY_NAME,partitionArray.toArray());
    topicArray.add(topicData);
  }
  struct.set(TOPICS_KEY_NAME,topicArray.toArray());
}
