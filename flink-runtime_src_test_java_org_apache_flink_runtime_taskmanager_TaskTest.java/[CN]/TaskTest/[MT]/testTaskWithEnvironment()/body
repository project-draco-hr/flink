{
  try {
    final JobID jid=new JobID();
    final JobVertexID vid=new JobVertexID();
    final ExecutionAttemptID eid=new ExecutionAttemptID();
    final TaskManager taskManager=mock(TaskManager.class);
    TaskDeploymentDescriptor tdd=new TaskDeploymentDescriptor(jid,vid,eid,"TestTask",2,7,new Configuration(),new Configuration(),TestInvokableCorrect.class.getName(),Collections.<GateDeploymentDescriptor>emptyList(),Collections.<GateDeploymentDescriptor>emptyList(),new String[0],0);
    Task task=new Task(jid,vid,2,7,eid,"TestTask",taskManager);
    RuntimeEnvironment env=new RuntimeEnvironment(task,tdd,getClass().getClassLoader(),mock(MemoryManager.class),mock(IOManager.class),mock(InputSplitProvider.class),mock(AccumulatorProtocol.class));
    task.setEnvironment(env);
    assertEquals(ExecutionState2.DEPLOYING,task.getExecutionState());
    task.startExecution();
    task.getEnvironment().getExecutingThread().join();
    assertEquals(ExecutionState2.FINISHED,task.getExecutionState());
    verify(taskManager).notifyExecutionStateChange(jid,eid,ExecutionState2.FINISHED,null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
