{
  try {
    final JobID jid=new JobID();
    final JobVertexID vid=new JobVertexID();
    final ExecutionAttemptID eid=new ExecutionAttemptID();
    final Task task=spy(new Task(jid,vid,2,7,eid,"TestTask",ActorRef.noSender()));
    doNothing().when(task).notifyExecutionStateChange(any(ExecutionState.class),any(Throwable.class));
    final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
    final OneShotLatch toRunning=new OneShotLatch();
    final OneShotLatch afterCanceling=new OneShotLatch();
    Thread operation=new Thread(){
      public void run(){
        try {
          toRunning.trigger();
          afterCanceling.await();
          assertFalse(task.markAsFinished());
          task.cancelingDone();
        }
 catch (        Throwable t) {
          error.set(t);
        }
      }
    }
;
    final RuntimeEnvironment env=mock(RuntimeEnvironment.class);
    when(env.getExecutingThread()).thenReturn(operation);
    assertEquals(ExecutionState.DEPLOYING,task.getExecutionState());
    task.setEnvironment(env);
    task.startExecution();
    toRunning.await();
    task.cancelExecution();
    afterCanceling.trigger();
    operation.join();
    if (error.get() != null) {
      ExceptionUtils.rethrow(error.get());
    }
    assertEquals(ExecutionState.CANCELED,task.getExecutionState());
    verify(task).notifyExecutionStateChange(ExecutionState.CANCELED,null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
