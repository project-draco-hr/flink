{
  int numHosts=3;
  int slotsPerHost=5;
  int parallelism=7;
  TestLocatableInputSplit[] splits=new TestLocatableInputSplit[]{new TestLocatableInputSplit(1,"host1"),new TestLocatableInputSplit(2,"host2"),new TestLocatableInputSplit(3,"host2"),new TestLocatableInputSplit(4,"host2"),new TestLocatableInputSplit(5,"host3"),new TestLocatableInputSplit(6,"host3"),new TestLocatableInputSplit(7,"host3"),new TestLocatableInputSplit(8,"host3"),new TestLocatableInputSplit(9,"host3"),new TestLocatableInputSplit(10,"host3"),new TestLocatableInputSplit(11,"host3"),new TestLocatableInputSplit(12,"host3"),new TestLocatableInputSplit(13,"host3")};
  try {
    String[] hostsForTasks=runTests(numHosts,slotsPerHost,parallelism,splits);
    assertEquals("host1",hostsForTasks[0]);
    assertEquals("host2",hostsForTasks[1]);
    assertEquals("host2",hostsForTasks[2]);
    assertEquals("host3",hostsForTasks[3]);
    assertEquals("host3",hostsForTasks[4]);
    assertTrue(hostsForTasks[5].equals("host1") || hostsForTasks[5].equals("host2") || hostsForTasks[5].equals("host3"));
    assertTrue(hostsForTasks[6].equals("host1") || hostsForTasks[6].equals("host2") || hostsForTasks[6].equals("host3"));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
