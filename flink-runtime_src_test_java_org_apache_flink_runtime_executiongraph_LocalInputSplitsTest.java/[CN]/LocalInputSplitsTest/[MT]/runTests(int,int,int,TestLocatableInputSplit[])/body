{
  JobVertex vertex=new JobVertex("test vertex");
  vertex.setParallelism(parallelism);
  vertex.setInvokableClass(DummyInvokable.class);
  vertex.setInputSplitSource(new TestInputSplitSource(splits));
  JobGraph jobGraph=new JobGraph("test job",vertex);
  ExecutionGraph eg=new ExecutionGraph(TestingUtils.defaultExecutionContext(),jobGraph.getJobID(),jobGraph.getName(),jobGraph.getJobConfiguration(),TIMEOUT);
  eg.setQueuedSchedulingAllowed(false);
  eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources());
  Scheduler scheduler=getScheduler(numHosts,slotsPerHost);
  eg.scheduleForExecution(scheduler);
  ExecutionVertex[] tasks=eg.getVerticesTopologically().iterator().next().getTaskVertices();
  assertEquals(parallelism,tasks.length);
  String[] hostsForTasks=new String[parallelism];
  for (int i=0; i < parallelism; i++) {
    hostsForTasks[i]=tasks[i].getCurrentAssignedResourceLocation().getHostname();
  }
  return hostsForTasks;
}
