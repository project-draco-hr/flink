{
  try {
    Counter completedSplitsCounter=getMetricGroup().counter("numSplitsProcessed");
    this.format.openInputFormat();
    while (this.isRunning) {
synchronized (checkpointLock) {
        if (this.currentSplit != null) {
          if (currentSplit.equals(EOS)) {
            isRunning=false;
            break;
          }
          if (this.format instanceof CheckpointableInputFormat && restoredFormatState != null) {
            @SuppressWarnings("unchecked") CheckpointableInputFormat<FileInputSplit,S> checkpointableFormat=(CheckpointableInputFormat<FileInputSplit,S>)this.format;
            checkpointableFormat.reopen(currentSplit,restoredFormatState);
          }
 else {
            LOG.info("Format " + this.format.getClass().getName() + " does not support checkpointing.");
            format.open(currentSplit);
          }
          this.restoredFormatState=null;
        }
 else {
          currentSplit=this.pendingSplits.poll();
          if (currentSplit == null) {
            checkpointLock.wait(50);
            continue;
          }
          if (currentSplit.equals(EOS)) {
            isRunning=false;
            break;
          }
          this.format.open(currentSplit);
        }
        this.isSplitOpen=true;
      }
      LOG.info("Reading split: " + currentSplit);
      try {
        OT nextElement=serializer.createInstance();
        while (!format.reachedEnd()) {
synchronized (checkpointLock) {
            nextElement=format.nextRecord(nextElement);
            if (nextElement != null) {
              readerContext.collect(nextElement);
            }
 else {
              break;
            }
          }
        }
        completedSplitsCounter.inc();
      }
  finally {
synchronized (checkpointLock) {
          this.format.close();
          this.isSplitOpen=false;
          this.currentSplit=null;
        }
      }
    }
  }
 catch (  Throwable e) {
    getContainingTask().handleAsyncException("Caught exception when processing split: " + currentSplit,e);
  }
 finally {
synchronized (checkpointLock) {
      LOG.info("Reader terminated, and exiting...");
      this.format.closeInputFormat();
      this.isSplitOpen=false;
      this.currentSplit=null;
      this.isRunning=false;
      checkpointLock.notifyAll();
    }
  }
}
