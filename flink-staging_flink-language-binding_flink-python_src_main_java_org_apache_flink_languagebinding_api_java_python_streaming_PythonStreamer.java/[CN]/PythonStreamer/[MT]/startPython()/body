{
  this.outputFilePath=FLINK_TMP_DATA_DIR + "/" + id+ this.function.getRuntimeContext().getIndexOfThisSubtask()+ "output";
  this.inputFilePath=FLINK_TMP_DATA_DIR + "/" + id+ this.function.getRuntimeContext().getIndexOfThisSubtask()+ "input";
  sender.open(inputFilePath);
  receiver.open(outputFilePath);
  ProcessBuilder pb=new ProcessBuilder();
  String path=function.getRuntimeContext().getDistributedCache().getFile(FLINK_PYTHON_DC_ID).getAbsolutePath();
  String executorPath=path + FLINK_PYTHON_EXECUTOR_NAME;
  String[] frag=metaInformation.split("\\|");
  StringBuilder importString=new StringBuilder();
  if (frag[0].contains("__main__")) {
    importString.append("from ");
    importString.append(FLINK_PYTHON_PLAN_NAME.substring(1,FLINK_PYTHON_PLAN_NAME.length() - 3));
    importString.append(" import ");
    importString.append(frag[1]);
  }
 else {
    importString.append("import ");
    importString.append(FLINK_PYTHON_PLAN_NAME.substring(1,FLINK_PYTHON_PLAN_NAME.length() - 3));
  }
  if (usePython3) {
    try {
      Runtime.getRuntime().exec(FLINK_PYTHON3_BINARY_PATH);
    }
 catch (    IOException ex) {
      throw new RuntimeException(FLINK_PYTHON3_BINARY_KEY + "=" + FLINK_PYTHON3_BINARY_PATH+ " does not point to a valid python binary.");
    }
    pb.command(FLINK_PYTHON3_BINARY_PATH,"-O","-B",executorPath,"" + socket.getLocalPort());
  }
 else {
    try {
      Runtime.getRuntime().exec(FLINK_PYTHON2_BINARY_PATH);
    }
 catch (    IOException ex) {
      throw new RuntimeException(FLINK_PYTHON2_BINARY_KEY + "=" + FLINK_PYTHON2_BINARY_PATH+ " does not point to a valid python binary.");
    }
    pb.command(FLINK_PYTHON2_BINARY_PATH,"-O","-B",executorPath,"" + socket.getLocalPort());
  }
  if (debug) {
    socket.setSoTimeout(0);
    LOG.info("Waiting for Python Process : " + function.getRuntimeContext().getTaskName() + " Run python /tmp/flink"+ FLINK_PYTHON_EXECUTOR_NAME+ " "+ socket.getLocalPort());
  }
 else {
    process=pb.start();
    new StreamPrinter(process.getInputStream()).start();
    new StreamPrinter(process.getErrorStream(),true,msg).start();
  }
  byte[] executorPort=new byte[4];
  socket.receive(new DatagramPacket(executorPort,0,4));
  int exPort=getInt(executorPort,0);
  if (exPort == -2) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException ex) {
    }
    throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely."+ msg);
  }
  byte[] opSize=new byte[4];
  putInt(opSize,0,operator.length);
  socket.send(new DatagramPacket(opSize,0,4,host,exPort));
  socket.send(new DatagramPacket(operator,0,operator.length,host,exPort));
  byte[] meta=importString.toString().getBytes("utf-8");
  putInt(opSize,0,meta.length);
  socket.send(new DatagramPacket(opSize,0,4,host,exPort));
  socket.send(new DatagramPacket(meta,0,meta.length,host,exPort));
  byte[] input=inputFilePath.getBytes("utf-8");
  putInt(opSize,0,input.length);
  socket.send(new DatagramPacket(opSize,0,4,host,exPort));
  socket.send(new DatagramPacket(input,0,input.length,host,exPort));
  byte[] output=outputFilePath.getBytes("utf-8");
  putInt(opSize,0,output.length);
  socket.send(new DatagramPacket(opSize,0,4,host,exPort));
  socket.send(new DatagramPacket(output,0,output.length,host,exPort));
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException ex) {
  }
  if (!debug) {
    try {
      process.exitValue();
      throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely."+ msg);
    }
 catch (    IllegalThreadStateException ise) {
    }
  }
}
