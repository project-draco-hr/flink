{
  try {
    AbstractJobVertex source1=new AbstractJobVertex("source1");
    AbstractJobVertex source2=new AbstractJobVertex("source2");
    AbstractJobVertex target1=new AbstractJobVertex("target1");
    AbstractJobVertex target2=new AbstractJobVertex("target2");
    AbstractJobVertex intermediate1=new AbstractJobVertex("intermediate1");
    AbstractJobVertex intermediate2=new AbstractJobVertex("intermediate2");
    target1.connectNewDataSetAsInput(source1,DistributionPattern.POINTWISE);
    target2.connectNewDataSetAsInput(source1,DistributionPattern.POINTWISE);
    target2.connectNewDataSetAsInput(intermediate2,DistributionPattern.POINTWISE);
    intermediate2.connectNewDataSetAsInput(intermediate1,DistributionPattern.POINTWISE);
    intermediate1.connectNewDataSetAsInput(source2,DistributionPattern.POINTWISE);
    JobGraph graph=new JobGraph("TestGraph",source1,source2,intermediate1,intermediate2,target1,target2);
    List<AbstractJobVertex> sorted=graph.getVerticesSortedTopologicallyFromSources();
    assertBefore(source1,target1,sorted);
    assertBefore(source1,target2,sorted);
    assertBefore(source2,target2,sorted);
    assertBefore(source2,intermediate1,sorted);
    assertBefore(source2,intermediate2,sorted);
    assertBefore(intermediate1,target2,sorted);
    assertBefore(intermediate2,target2,sorted);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
