{
  try {
    JobGraph jg=new JobGraph("The graph");
{
      jg.getJobConfiguration().setString("some key","some value");
      jg.getJobConfiguration().setDouble("Life of ",Math.PI);
    }
{
      JobVertex source1=new JobVertex("source1");
      JobVertex source2=new JobVertex("source2");
      JobVertex target=new JobVertex("target");
      target.connectNewDataSetAsInput(source1,DistributionPattern.POINTWISE);
      target.connectNewDataSetAsInput(source2,DistributionPattern.ALL_TO_ALL);
      jg.addVertex(source1);
      jg.addVertex(source2);
      jg.addVertex(target);
    }
    JobGraph copy=CommonTestUtils.createCopySerializable(jg);
    assertEquals(jg.getName(),copy.getName());
    assertEquals(jg.getJobID(),copy.getJobID());
    assertEquals(jg.getJobConfiguration(),copy.getJobConfiguration());
    assertEquals(jg.getNumberOfVertices(),copy.getNumberOfVertices());
    for (    JobVertex vertex : copy.getVertices()) {
      JobVertex original=jg.findVertexByID(vertex.getID());
      assertNotNull(original);
      assertEquals(original.getName(),vertex.getName());
      assertEquals(original.getNumberOfInputs(),vertex.getNumberOfInputs());
      assertEquals(original.getNumberOfProducedIntermediateDataSets(),vertex.getNumberOfProducedIntermediateDataSets());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
