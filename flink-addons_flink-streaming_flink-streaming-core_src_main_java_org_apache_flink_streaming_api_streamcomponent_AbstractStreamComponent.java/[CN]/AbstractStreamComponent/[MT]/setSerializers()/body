{
  byte[] operatorBytes=configuration.getBytes("operator",null);
  String operatorName=configuration.getString("operatorName","");
  Object function=null;
  try {
    ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(operatorBytes));
    function=in.readObject();
    if (operatorName.equals("flatMap")) {
      setSerializerDeserializer(function,FlatMapFunction.class);
    }
 else     if (operatorName.equals("map")) {
      setSerializerDeserializer(function,MapFunction.class);
    }
 else     if (operatorName.equals("batchReduce")) {
      setSerializerDeserializer(function,GroupReduceFunction.class);
    }
 else     if (operatorName.equals("filter")) {
      setDeserializer(function,FilterFunction.class);
      setSerializer(function,FilterFunction.class,0);
    }
 else     if (operatorName.equals("sink")) {
      setDeserializer(function,SinkFunction.class);
    }
 else     if (operatorName.equals("source")) {
      setSerializer(function,UserSourceInvokable.class,0);
    }
 else     if (operatorName.equals("elements")) {
      outTupleTypeInfo=new TupleTypeInfo<OUT>(TypeExtractor.getForObject(function));
      outTupleSerializer=new StreamRecordSerializer<OUT>(outTupleTypeInfo.createSerializer());
      outSerializationDelegate=new SerializationDelegate<StreamRecord<OUT>>(outTupleSerializer);
    }
 else {
      throw new Exception("Wrong operator name!");
    }
  }
 catch (  Exception e) {
    throw new StreamComponentException(e);
  }
}
