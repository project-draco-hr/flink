{
  Class<? extends ChannelSelector<StreamRecord<OUT>>> partitioner=(Class<? extends ChannelSelector<StreamRecord<OUT>>>)configuration.getClass("partitionerClass_" + numberOfOutputs,DefaultPartitioner.class,ChannelSelector.class);
  try {
    ChannelSelector<StreamRecord<OUT>> outputPartitioner;
    if (partitioner.equals(FieldsPartitioner.class)) {
      int keyPosition=configuration.getInteger("partitionerIntParam_" + numberOfOutputs,1);
      outputPartitioner=partitioner.getConstructor(int.class).newInstance(keyPosition);
    }
 else {
      outputPartitioner=partitioner.newInstance();
    }
    RecordWriter<StreamRecord<OUT>> output=new RecordWriter<StreamRecord<OUT>>(this,outputPartitioner);
    outputs.add(output);
    String outputName=configuration.getString("outputName_" + numberOfOutputs,null);
    if (collector != null) {
      collector.addOutput(output,outputName);
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Partitioner set: " + partitioner.getSimpleName() + " with "+ numberOfOutputs+ " outputs");
    }
  }
 catch (  Exception e) {
    throw new StreamComponentException("Unexpected problem while setting partitioner " + partitioner.getSimpleName() + " with "+ numberOfOutputs+ " outputs");
  }
}
