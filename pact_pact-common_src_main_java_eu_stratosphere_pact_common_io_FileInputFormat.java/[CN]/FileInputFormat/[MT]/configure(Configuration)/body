{
  final String filePath=parameters.getString(FILE_PARAMETER_KEY,null);
  if (filePath == null) {
    throw new IllegalArgumentException("Configuration file FileInputFormat does not contain the file path.");
  }
  try {
    this.filePath=new Path(filePath);
  }
 catch (  RuntimeException rex) {
    throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage());
  }
  this.numSplits=parameters.getInteger(DESIRED_NUMBER_OF_SPLITS_PARAMETER_KEY,-1);
  if (this.numSplits == 0 || this.numSplits < -1) {
    this.numSplits=-1;
    if (LOG.isWarnEnabled())     LOG.warn("Ignoring invalid parameter for number of splits: " + this.numSplits);
  }
  this.minSplitSize=parameters.getLong(MINIMAL_SPLIT_SIZE_PARAMETER_KEY,1);
  if (this.minSplitSize < 1) {
    this.minSplitSize=1;
    if (LOG.isWarnEnabled())     LOG.warn("Ignoring invalid parameter for minimal split size (requires a positive value): " + this.numSplits);
  }
  this.openTimeout=parameters.getLong(INPUT_STREAM_OPEN_TIMEOUT_KEY,DEFAULT_OPENING_TIMEOUT);
  if (this.openTimeout < 0) {
    this.openTimeout=DEFAULT_OPENING_TIMEOUT;
    if (LOG.isWarnEnabled())     LOG.warn("Ignoring invalid parameter for stream opening timeout (requires a positive value or zero=infinite): " + this.openTimeout);
  }
 else   if (this.openTimeout == 0) {
    this.openTimeout=Long.MAX_VALUE;
  }
}
