{
  SerializationTestType randomInt=Util.randomRecord(SerializationTestTypeFactory.INT);
  DataOutputSerializer serializer=new DataOutputSerializer(randomInt.length());
  MemorySegment segment=new MemorySegment(new byte[randomInt.length()]);
  try {
    ByteBuffer wrapper=serializer.wrapAsByteBuffer();
    Assert.assertEquals(0,wrapper.position());
    Assert.assertEquals(0,wrapper.limit());
    randomInt.write(serializer);
    Assert.assertEquals(0,wrapper.position());
    Assert.assertEquals(0,wrapper.limit());
    wrapper=serializer.wrapAsByteBuffer();
    Assert.assertEquals(0,wrapper.position());
    Assert.assertEquals(randomInt.length(),wrapper.limit());
    serializer.clear();
    Assert.assertEquals(0,wrapper.position());
    Assert.assertEquals(randomInt.length(),wrapper.limit());
    wrapper=serializer.wrapAsByteBuffer();
    Assert.assertEquals(0,wrapper.position());
    Assert.assertEquals(0,wrapper.limit());
    randomInt.write(serializer);
    wrapper=serializer.wrapAsByteBuffer();
    segment.put(0,wrapper,randomInt.length());
    Assert.assertEquals(randomInt.length(),wrapper.position());
    Assert.assertEquals(randomInt.length(),wrapper.limit());
  }
 catch (  IOException e) {
    e.printStackTrace();
    Assert.fail("Test encountered an unexpected exception.");
  }
}
