{
  Class<?>[] types={type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15};
  if (types.length != this.fieldIndexes.length) {
    throw new IllegalArgumentException("Numbers of projected fields and types do not match.");
  }
  @SuppressWarnings("unchecked") TypeInformation<Tuple16<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>> outType=(TypeInformation<Tuple16<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>)extractFieldTypes(fieldIndexes,types,inTypeInfo);
  return dataStream.transform("Projection",outType,new StreamProject<IN,Tuple16<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>>(fieldIndexes,outType));
}
