{
  checkArgument(baseInterval > 0,"Checkpoint timeout must be larger than zero");
  checkArgument(checkpointTimeout >= 1,"Checkpoint timeout must be larger than zero");
  checkArgument(minPauseBetweenCheckpoints >= 0,"minPauseBetweenCheckpoints must be >= 0");
  checkArgument(maxConcurrentCheckpointAttempts >= 1,"maxConcurrentCheckpointAttempts must be >= 1");
  this.job=checkNotNull(job);
  this.baseInterval=baseInterval;
  this.checkpointTimeout=checkpointTimeout;
  this.minPauseBetweenCheckpoints=minPauseBetweenCheckpoints;
  this.maxConcurrentCheckpointAttempts=maxConcurrentCheckpointAttempts;
  this.tasksToTrigger=checkNotNull(tasksToTrigger);
  this.tasksToWaitFor=checkNotNull(tasksToWaitFor);
  this.tasksToCommitTo=checkNotNull(tasksToCommitTo);
  this.pendingCheckpoints=new LinkedHashMap<>();
  this.checkpointIdCounter=checkNotNull(checkpointIDCounter);
  this.completedCheckpointStore=checkNotNull(completedCheckpointStore);
  this.savepointStore=checkNotNull(savepointStore);
  this.recentPendingCheckpoints=new ArrayDeque<>(NUM_GHOST_CHECKPOINT_IDS);
  this.userClassLoader=checkNotNull(userClassLoader);
  this.statsTracker=checkNotNull(statsTracker);
  this.numberKeyGroups=numberKeyGroups;
  this.timer=new Timer("Checkpoint Timer",true);
  try {
    checkpointIDCounter.start();
  }
 catch (  Exception e) {
    throw new Exception("Failed to start checkpoint ID counter: " + e.getMessage(),e);
  }
}
