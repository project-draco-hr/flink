{
  if (shutdown || message == null) {
    return false;
  }
  if (!job.equals(message.getJob())) {
    LOG.error("Received DeclineCheckpoint message for wrong job: {}",message);
    return false;
  }
  final long checkpointId=message.getCheckpointId();
  PendingCheckpoint checkpoint;
  boolean isPendingCheckpoint;
synchronized (lock) {
    if (shutdown) {
      return false;
    }
    checkpoint=pendingCheckpoints.get(checkpointId);
    if (checkpoint != null && !checkpoint.isDiscarded()) {
      isPendingCheckpoint=true;
      LOG.info("Discarding checkpoint " + checkpointId + " because of checkpoint decline from task "+ message.getTaskExecutionId());
      pendingCheckpoints.remove(checkpointId);
      checkpoint.discard(userClassLoader);
      rememberRecentCheckpointId(checkpointId);
      onCancelCheckpoint(checkpointId);
      boolean haveMoreRecentPending=false;
      Iterator<Map.Entry<Long,PendingCheckpoint>> entries=pendingCheckpoints.entrySet().iterator();
      while (entries.hasNext()) {
        PendingCheckpoint p=entries.next().getValue();
        if (!p.isDiscarded() && p.getCheckpointTimestamp() >= checkpoint.getCheckpointTimestamp()) {
          haveMoreRecentPending=true;
          break;
        }
      }
      if (!haveMoreRecentPending && !triggerRequestQueued) {
        LOG.info("Triggering new checkpoint because of discarded checkpoint " + checkpointId);
        triggerCheckpoint(System.currentTimeMillis());
      }
 else       if (!haveMoreRecentPending) {
        LOG.info("Promoting queued checkpoint request because of discarded checkpoint " + checkpointId);
        triggerQueuedRequests();
      }
    }
 else     if (checkpoint != null) {
      throw new IllegalStateException("Received message for discarded but non-removed checkpoint " + checkpointId);
    }
 else {
      if (recentPendingCheckpoints.contains(checkpointId)) {
        isPendingCheckpoint=true;
        LOG.info("Received another decline checkpoint message for now expired checkpoint attempt " + checkpointId);
      }
 else {
        isPendingCheckpoint=false;
      }
    }
  }
  return isPendingCheckpoint;
}
