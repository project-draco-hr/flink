{
  if (shutdown || message == null) {
    return false;
  }
  if (!job.equals(message.getJob())) {
    LOG.error("Received AcknowledgeCheckpoint message for wrong job: {}",message);
    return false;
  }
  final long checkpointId=message.getCheckpointId();
  CompletedCheckpoint completed=null;
  PendingCheckpoint checkpoint;
  boolean isPendingCheckpoint;
synchronized (lock) {
    if (shutdown) {
      return false;
    }
    checkpoint=pendingCheckpoints.get(checkpointId);
    if (checkpoint != null && !checkpoint.isDiscarded()) {
      isPendingCheckpoint=true;
      if (checkpoint.acknowledgeTask(message.getTaskExecutionId(),message.getStateHandle(),message.getKeyGroupsStateHandle())) {
        if (checkpoint.isFullyAcknowledged()) {
          completed=checkpoint.finalizeCheckpoint();
          completedCheckpointStore.addCheckpoint(completed);
          LOG.info("Completed checkpoint " + checkpointId + " (in "+ completed.getDuration()+ " ms)");
          if (LOG.isDebugEnabled()) {
            StringBuilder builder=new StringBuilder();
            for (            Map.Entry<JobVertexID,TaskState> entry : completed.getTaskStates().entrySet()) {
              builder.append("JobVertexID: ").append(entry.getKey()).append(" {").append(entry.getValue()).append("}");
            }
            LOG.debug(builder.toString());
          }
          pendingCheckpoints.remove(checkpointId);
          rememberRecentCheckpointId(checkpointId);
          dropSubsumedCheckpoints(completed.getCheckpointID());
          triggerQueuedRequests();
        }
      }
 else {
        LOG.error("Received duplicate or invalid acknowledge message for checkpoint " + checkpointId + " , task "+ message.getTaskExecutionId());
      }
    }
 else     if (checkpoint != null) {
      throw new IllegalStateException("Received message for discarded but non-removed checkpoint " + checkpointId);
    }
 else {
      if (recentPendingCheckpoints.contains(checkpointId)) {
        isPendingCheckpoint=true;
        LOG.warn("Received late message for now expired checkpoint attempt " + checkpointId);
      }
 else {
        isPendingCheckpoint=false;
      }
    }
  }
  if (completed != null) {
    final long timestamp=completed.getTimestamp();
    for (    ExecutionVertex ev : tasksToCommitTo) {
      Execution ee=ev.getCurrentExecutionAttempt();
      if (ee != null) {
        ExecutionAttemptID attemptId=ee.getAttemptId();
        NotifyCheckpointComplete notifyMessage=new NotifyCheckpointComplete(job,attemptId,checkpointId,timestamp);
        ev.sendMessageToCurrentExecution(notifyMessage,ee.getAttemptId());
      }
    }
    statsTracker.onCompletedCheckpoint(completed);
  }
  return isPendingCheckpoint;
}
