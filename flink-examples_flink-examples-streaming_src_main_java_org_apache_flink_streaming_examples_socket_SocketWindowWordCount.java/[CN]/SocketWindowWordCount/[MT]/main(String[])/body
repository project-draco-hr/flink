{
  final int port;
  try {
    final ParameterTool params=ParameterTool.fromArgs(args);
    port=params.getInt("port");
  }
 catch (  Exception e) {
    System.err.println("No port specified. Please run 'WindowWordCount --port <port>', " + "where port is the address of the text server");
    System.err.println("To start a simple text server, run 'netcat -l <port>' and type the input text " + "into the command line");
    return;
  }
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<String> text=env.socketTextStream("localhost",port,"\n");
  DataStream<WordWithCount> windowCounts=text.flatMap(new FlatMapFunction<String,WordWithCount>(){
    @Override public void flatMap(    String value,    Collector<WordWithCount> out){
      for (      String word : value.split("\\s")) {
        out.collect(new WordWithCount(word,1L));
      }
    }
  }
).keyBy("word").timeWindow(Time.seconds(5),Time.seconds(1)).reduce(new ReduceFunction<WordWithCount>(){
    @Override public WordWithCount reduce(    WordWithCount a,    WordWithCount b){
      return new WordWithCount(a.word,a.count + b.count);
    }
  }
);
  windowCounts.print().setParallelism(1);
  env.execute("Socket Window WordCount");
}
