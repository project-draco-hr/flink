{
  TypeSerializer<?>[] fieldSerializers={LongSerializer.INSTANCE,BytePrimitiveArraySerializer.INSTANCE};
  @SuppressWarnings("unchecked") Class<Tuple2<Long,byte[]>> clazz=(Class<Tuple2<Long,byte[]>>)(Class<?>)Tuple2.class;
  this.buildSerializer=new TupleSerializer<Tuple2<Long,byte[]>>(clazz,fieldSerializers);
  this.probeSerializer=LongSerializer.INSTANCE;
  TypeComparator<?>[] comparators={new LongComparator(true)};
  TypeSerializer<?>[] comparatorSerializers={LongSerializer.INSTANCE};
  this.buildComparator=new TupleComparator<Tuple2<Long,byte[]>>(new int[]{0},comparators,comparatorSerializers);
  this.probeComparator=new LongComparator(true);
  this.pairComparator=new TypePairComparator<Long,Tuple2<Long,byte[]>>(){
    private long ref;
    @Override public void setReference(    Long reference){
      ref=reference;
    }
    @Override public boolean equalToReference(    Tuple2<Long,byte[]> candidate){
      return candidate.f0.longValue() == ref;
    }
    @Override public int compareToReference(    Tuple2<Long,byte[]> candidate){
      long x=ref;
      long y=candidate.f0;
      return (x < y) ? -1 : ((x == y) ? 0 : 1);
    }
  }
;
}
