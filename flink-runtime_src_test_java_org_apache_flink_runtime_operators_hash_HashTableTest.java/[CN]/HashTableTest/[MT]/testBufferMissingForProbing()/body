{
  final IOManager ioMan=new IOManagerAsync();
  try {
    final int pageSize=32 * 1024;
    final int numSegments=34;
    final int numRecords=3400;
    final int recordLen=270;
    final byte[] payload=new byte[recordLen - 8 - 4];
    List<MemorySegment> memory=getMemory(numSegments,pageSize);
    MutableHashTable<Tuple2<Long,byte[]>,Long> table=new MutableHashTable<>(buildSerializer,probeSerializer,buildComparator,probeComparator,pairComparator,memory,ioMan,16,false);
    table.open(new TupleBytesIterator(payload,numRecords),new LongIterator(10000));
    try {
      while (table.nextRecord()) {
        MutableHashTable.HashBucketIterator<Tuple2<Long,byte[]>,Long> matches=table.getBuildSideIterator();
        while (matches.next() != null)         ;
      }
    }
 catch (    RuntimeException e) {
      if (!e.getMessage().contains("exceeded maximum number of recursions")) {
        e.printStackTrace();
        fail("Test failed with unexpected exception");
      }
    }
 finally {
      table.close();
    }
    checkNoTempFilesRemain(ioMan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    ioMan.shutdown();
  }
}
