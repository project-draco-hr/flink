{
  new Context(){
{
      new Within(duration("10 seconds")){
        @Override protected void run(){
          try {
            MesosWorkerStore.Worker worker1=MesosWorkerStore.Worker.newTask(task1).launchTask(slave1,slave1host);
            when(workerStore.getFrameworkID()).thenReturn(Option.apply(framework1));
            when(workerStore.recoverWorkers()).thenReturn(singletonList(worker1));
            initialize();
            resourceManagerInstance.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class);
            register(singletonList(extractResourceID(task1)));
            resourceManager.tell(new RemoveResource(extractResourceID(task1)));
            MesosWorkerStore.Worker worker2Released=worker1.releaseTask();
            verify(workerStore).putWorker(worker2Released);
            assertThat(resourceManagerInstance.workersBeingReturned,hasEntry(extractResourceID(task1),worker2Released));
            resourceManagerInstance.launchCoordinator.expectMsg(new LaunchCoordinator.Unassign(task1,slave1host));
            resourceManager.tell(new TaskMonitor.TaskTerminated(task1,Protos.TaskStatus.newBuilder().setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FINISHED).build()));
            assertThat(resourceManagerInstance.workersBeingReturned.entrySet(),empty());
            verify(workerStore).removeWorker(task1);
          }
 catch (          Exception ex) {
            throw new RuntimeException(ex);
          }
        }
      }
;
    }
  }
;
}
