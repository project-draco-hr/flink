{
  new Context(){
{
      new Within(duration("10 seconds")){
        @Override protected void run(){
          try {
            MesosWorkerStore.Worker worker1=MesosWorkerStore.Worker.newTask(task1);
            MesosWorkerStore.Worker worker2=MesosWorkerStore.Worker.newTask(task2).launchTask(slave1,slave1host);
            MesosWorkerStore.Worker worker3=MesosWorkerStore.Worker.newTask(task3).launchTask(slave1,slave1host).releaseTask();
            when(workerStore.getFrameworkID()).thenReturn(Option.apply(framework1));
            when(workerStore.recoverWorkers()).thenReturn(Arrays.asList(worker1,worker2,worker3));
            initialize();
            assertThat(resourceManagerInstance.workersInNew,hasEntry(extractResourceID(task1),worker1));
            assertThat(resourceManagerInstance.workersInLaunch,hasEntry(extractResourceID(task2),worker2));
            assertThat(resourceManagerInstance.workersBeingReturned,hasEntry(extractResourceID(task3),worker3));
            resourceManagerInstance.taskRouter.expectMsgClass(TaskMonitor.TaskGoalStateUpdated.class);
            LaunchCoordinator.Assign actualAssign=resourceManagerInstance.launchCoordinator.expectMsgClass(LaunchCoordinator.Assign.class);
            assertThat(actualAssign.tasks(),hasSize(1));
            assertThat(actualAssign.tasks().get(0).f0.getId(),equalTo(task2.getValue()));
            assertThat(actualAssign.tasks().get(0).f1,equalTo(slave1host));
            resourceManagerInstance.launchCoordinator.expectMsgClass(LaunchCoordinator.Launch.class);
            register(Collections.<ResourceID>emptyList());
          }
 catch (          Exception ex) {
            throw new RuntimeException(ex);
          }
        }
      }
;
    }
  }
;
}
