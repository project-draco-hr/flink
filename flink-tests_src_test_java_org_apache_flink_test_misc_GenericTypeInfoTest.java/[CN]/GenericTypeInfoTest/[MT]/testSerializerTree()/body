{
  TypeInformation<CollectionDataSets.PojoWithCollectionGeneric> ti=(TypeInformation<CollectionDataSets.PojoWithCollectionGeneric>)TypeExtractor.createTypeInfo(CollectionDataSets.PojoWithCollectionGeneric.class);
  String serTree=Utils.getSerializerTree(ti);
  Assert.assertTrue(serTree.startsWith("GenericTypeInfo (PojoWithCollectionGeneric)\n" + "    pojos:java.util.List\n" + "    key:int\n"+ "    sqlDate:java.sql.Date\n"+ "    bigInt:java.math.BigInteger\n"+ "        signum:int\n"+ "        mag:[I\n"+ "        bitCount:int\n"+ "        bitLength:int\n"+ "        lowestSetBit:int\n"+ "        firstNonzeroIntNum:int\n"+ "    bigDecimalKeepItNull:java.math.BigDecimal\n"+ "        intVal:java.math.BigInteger\n"+ "            signum:int\n"+ "            mag:[I\n"+ "            bitCount:int\n"+ "            bitLength:int\n"+ "            lowestSetBit:int\n"+ "            firstNonzeroIntNum:int\n"+ "        scale:int\n"+ "    scalaBigInt:scala.math.BigInt\n"+ "        bigInteger:java.math.BigInteger\n"+ "            signum:int\n"+ "            mag:[I\n"+ "            bitCount:int\n"+ "            bitLength:int\n"+ "            lowestSetBit:int\n"+ "            firstNonzeroIntNum:int\n"+ "    mixed:java.util.List\n"+ "    makeMeGeneric:org.apache.flink.test.javaApiOperators.util.CollectionDataSets$PojoWithDateAndEnum\n"+ "        group:java.lang.String\n"));
}
