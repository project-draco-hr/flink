{
  final int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String verticesInput=(args.length > 1 ? args[1] : "");
  final String edgeInput=(args.length > 2 ? args[2] : "");
  final String output=(args.length > 3 ? args[3] : "");
  final int maxIterations=(args.length > 4 ? Integer.parseInt(args[4]) : 1);
  FileDataSource initialVertices=new FileDataSource(new DuplicateLongInputFormat(),verticesInput,"Vertices");
  WorksetIteration iteration=new WorksetIteration(0,"Connected Components Iteration");
  iteration.setInitialSolutionSet(initialVertices);
  iteration.setInitialWorkset(initialVertices);
  iteration.setMaximumNumberOfIterations(maxIterations);
  FileDataSource edges=new FileDataSource(new LongLongInputFormat(),edgeInput,"Edges");
  JoinOperator joinWithNeighbors=JoinOperator.builder(new NeighborWithComponentIDJoin(),PactLong.class,0,0).input1(iteration.getWorkset()).input2(edges).name("Join Candidate Id With Neighbor").build();
  ReduceOperator minCandidateId=ReduceOperator.builder(new MinimumComponentIDReduce(),PactLong.class,0).input(joinWithNeighbors).name("Find Minimum Candidate Id").build();
  JoinOperator updateComponentId=JoinOperator.builder(new UpdateComponentIdMatch(),PactLong.class,0,0).input1(minCandidateId).input2(iteration.getSolutionSet()).name("Update Component Id").build();
  iteration.setNextWorkset(updateComponentId);
  iteration.setSolutionSetDelta(updateComponentId);
  FileDataSink result=new FileDataSink(new CsvOutputFormat(),output,iteration,"Result");
  CsvOutputFormat.configureRecordFormat(result).recordDelimiter('\n').fieldDelimiter(' ').field(PactLong.class,0).field(PactLong.class,1);
  Job plan=new Job(result,"Workset Connected Components");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
