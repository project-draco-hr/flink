{
  super.configure(parameters);
  this.pathToGeneratorBinary=parameters.getString(GENERATOR_PATH_PARAMETER_KEY,null);
  if (this.pathToGeneratorBinary == null) {
    throw new IllegalArgumentException("Configuration does not contain a path to a generator binary.");
  }
  File checkFile=new File(this.pathToGeneratorBinary);
  if (!checkFile.exists()) {
    throw new IllegalArgumentException("Configured generator binary does not exist: " + this.pathToGeneratorBinary);
  }
  try {
    Process p=Runtime.getRuntime().exec(this.pathToGeneratorBinary + " --help");
    byte[] stdOut=new byte[1024 * 64];
    p.getInputStream().read(stdOut);
    if (!(new String(stdOut).startsWith(MYRIAD_HELP_MESSAGE_PREFIX))) {
      throw new IllegalArgumentException("Specified binary is not a myriad generator: " + this.pathToGeneratorBinary);
    }
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Unable to execute specified binary: " + this.pathToGeneratorBinary);
  }
  this.pathToConfigDir=parameters.getString(GENERATOR_CONFIGDIR_PARAMETER_KEY,null);
  if (this.pathToConfigDir != null) {
    checkFile=new File(this.pathToConfigDir);
    if (!checkFile.exists()) {
      throw new IllegalArgumentException("Configured generator configuration directory does not exist: " + this.pathToConfigDir);
    }
    if (!checkFile.isDirectory()) {
      throw new IllegalArgumentException("Configured generator configuration directory is not a directory: " + this.pathToConfigDir);
    }
  }
  this.scaleFactor=parameters.getFloat(GENERATOR_SCALEFACTOR_PARAMETER_KEY,-1.0f);
  if (this.scaleFactor <= 0.0) {
    throw new IllegalArgumentException("Specified scale factor must be > 0.0");
  }
  this.scaleFactorBaseCard=parameters.getLong(GENERATOR_SCALEFACTORBASECARD_PARAMETER_KEY,-1);
}
