{
  if (!isConnected) {
    throw new IllegalStateException("The cluster has been connected to the ApplicationMaster.");
  }
  if (hasBeenShutDown.getAndSet(true)) {
    return;
  }
  try {
    Runtime.getRuntime().removeShutdownHook(clientShutdownHook);
  }
 catch (  IllegalStateException e) {
  }
  if (actorSystem != null) {
    LOG.info("Sending shutdown request to the Application Master");
    if (applicationClient != ActorRef.noSender()) {
      try {
        FinalApplicationStatus finalStatus;
        if (failApplication) {
          finalStatus=FinalApplicationStatus.FAILED;
        }
 else {
          finalStatus=FinalApplicationStatus.SUCCEEDED;
        }
        Future<Object> response=Patterns.ask(applicationClient,new Messages.StopYarnSession(finalStatus,"Flink YARN Client requested shutdown"),new Timeout(akkaDuration));
        Await.ready(response,akkaDuration);
      }
 catch (      Exception e) {
        throw new RuntimeException("Error while stopping YARN Application Client",e);
      }
    }
    actorSystem.shutdown();
    actorSystem.awaitTermination();
    actorSystem=null;
  }
  LOG.info("Deleting files in " + sessionFilesDir);
  try {
    FileSystem shutFS=FileSystem.get(hadoopConfig);
    shutFS.delete(sessionFilesDir,true);
    shutFS.close();
  }
 catch (  IOException e) {
    LOG.error("Could not delete the Flink jar and configuration files in HDFS..",e);
  }
  try {
    actorRunner.join(1000);
  }
 catch (  InterruptedException e) {
    LOG.warn("Shutdown of the actor runner was interrupted",e);
    Thread.currentThread().interrupt();
  }
  try {
    pollingRunner.stopRunner();
    pollingRunner.join(1000);
  }
 catch (  InterruptedException e) {
    LOG.warn("Shutdown of the polling runner was interrupted",e);
    Thread.currentThread().interrupt();
  }
  LOG.info("YARN Client is shutting down");
  yarnClient.stop();
  yarnClient=null;
}
