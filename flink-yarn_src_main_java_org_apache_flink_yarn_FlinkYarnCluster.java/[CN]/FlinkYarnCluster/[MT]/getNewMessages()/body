{
  if (hasBeenStopped()) {
    throw new RuntimeException("The FlinkYarnCluster has alread been stopped");
  }
  List<String> ret=new ArrayList<String>();
  while (true) {
    Object result=null;
    try {
      Future<Object> response=Patterns.ask(applicationClient,Messages.getLocalGetYarnMessage(),new Timeout(akkaDuration));
      result=Await.result(response,akkaDuration);
    }
 catch (    Exception ioe) {
      LOG.warn("Error retrieving the yarn messages locally",ioe);
    }
    if (!(result instanceof Option)) {
      throw new RuntimeException("LocalGetYarnMessage requires a response of type " + "Option. Instead the response is of type " + result.getClass() + ".");
    }
 else {
      Option messageOption=(Option)result;
      if (messageOption.isEmpty()) {
        break;
      }
 else {
        Object obj=messageOption.get();
        if (obj instanceof Messages.YarnMessage) {
          Messages.YarnMessage msg=(Messages.YarnMessage)obj;
          ret.add("[" + msg.date() + "] "+ msg.message());
        }
 else {
          LOG.warn("LocalGetYarnMessage returned unexpected type: " + messageOption);
        }
      }
    }
  }
  return ret;
}
