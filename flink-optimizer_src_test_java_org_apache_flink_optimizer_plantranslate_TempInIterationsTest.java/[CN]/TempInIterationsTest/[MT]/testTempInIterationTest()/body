{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple2<Long,Long>> input=env.readCsvFile("file:///does/not/exist").types(Long.class,Long.class);
  DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iteration=input.iterateDelta(input,1,0);
  DataSet<Tuple2<Long,Long>> update=iteration.getWorkset().join(iteration.getSolutionSet()).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
  iteration.closeWith(update,update).output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
  JavaPlan plan=env.createProgramPlan();
  OptimizedPlan oPlan=(new Optimizer(new Configuration())).compile(plan);
  JobGraphGenerator jgg=new JobGraphGenerator();
  JobGraph jg=jgg.compileJobGraph(oPlan);
  boolean solutionSetUpdateChecked=false;
  for (  AbstractJobVertex v : jg.getVertices()) {
    if (v.getName().equals("SolutionSet Delta")) {
      TaskConfig tc=new TaskConfig(v.getConfiguration());
      assertTrue(tc.isInputAsynchronouslyMaterialized(0));
      solutionSetUpdateChecked=true;
    }
  }
  assertTrue(solutionSetUpdateChecked);
}
