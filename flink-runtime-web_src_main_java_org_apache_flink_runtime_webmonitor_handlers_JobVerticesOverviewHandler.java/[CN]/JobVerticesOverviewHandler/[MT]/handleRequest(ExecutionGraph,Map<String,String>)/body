{
  JSONObject obj=new JSONObject();
  obj.put("jid",graph.getJobID().toString());
  obj.put("name",graph.getJobName());
  List<JSONObject> vertexJSONs=new ArrayList<JSONObject>();
  for (  ExecutionJobVertex vertex : graph.getVerticesTopologically()) {
    JSONObject vertexJSON=new JSONObject();
    vertexJSONs.add(vertexJSON);
    JobVertex jobVertex=vertex.getJobVertex();
    vertexJSON.put("id",jobVertex.getID().toString());
    vertexJSON.put("name",jobVertex.getName());
    vertexJSON.put("start-time",System.currentTimeMillis() - 10000);
    vertexJSON.put("end-time",System.currentTimeMillis() - 6453);
    vertexJSON.put("bytes-read-local",14355376592L);
    vertexJSON.put("bytes-read-remote",607623465782L);
    vertexJSON.put("bytes-written",5372934L);
    vertexJSON.put("records-read",4659765L);
    vertexJSON.put("records-written",4659765L);
    vertexJSON.put("parallelism",vertex.getParallelism());
    JSONObject states=new JSONObject();
{
      int[] statesCount=new int[ExecutionState.values().length];
      for (      ExecutionVertex ev : vertex.getTaskVertices()) {
        Execution ee=ev.getCurrentExecutionAttempt();
        if (ee != null) {
          statesCount[ee.getState().ordinal()]++;
        }
      }
      int i=0;
      for (      ExecutionState state : ExecutionState.values()) {
        states.put(state.name(),statesCount[i++]);
      }
    }
    vertexJSON.put("states",states);
  }
  obj.put("vertices",vertexJSONs);
  return obj.toString();
}
