{
{
    try {
      segment.putLong(-1,0L);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.putLong(PAGE_SIZE,0L);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getLong(-1);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.getLong(PAGE_SIZE);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
  }
{
    long seed=random.nextLong();
    random.setSeed(seed);
    for (int i=0; i <= PAGE_SIZE - 8; i+=8) {
      segment.putLong(i,random.nextLong());
    }
    random.setSeed(seed);
    for (int i=0; i <= PAGE_SIZE - 8; i+=8) {
      assertEquals(random.nextLong(),segment.getLong(i));
    }
  }
{
    final long seed=random.nextLong();
    random.setSeed(seed);
    for (int offset=0; offset < PAGE_SIZE - 8; offset+=random.nextInt(24) + 8) {
      long value=random.nextLong();
      segment.putLong(offset,value);
    }
    random.setSeed(seed);
    for (int offset=0; offset < PAGE_SIZE - 8; offset+=random.nextInt(24) + 8) {
      long shouldValue=random.nextLong();
      long isValue=segment.getLong(offset);
      assertEquals(shouldValue,isValue);
    }
  }
}
