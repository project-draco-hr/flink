{
  int numElements=10;
  int numKeys=2;
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Tuple2<Integer,Integer>> sourceStream=env.addSource(new TupleSource(numElements,numKeys));
  SplitStream<Tuple2<Integer,Integer>> splittedResult=sourceStream.keyBy(0).fold(0,new FoldFunction<Tuple2<Integer,Integer>,Integer>(){
    @Override public Integer fold(    Integer accumulator,    Tuple2<Integer,Integer> value) throws Exception {
      return accumulator + value.f1;
    }
  }
).map(new RichMapFunction<Integer,Tuple2<Integer,Integer>>(){
    @Override public Tuple2<Integer,Integer> map(    Integer value) throws Exception {
      return new Tuple2<Integer,Integer>(getRuntimeContext().getIndexOfThisSubtask(),value);
    }
  }
).split(new OutputSelector<Tuple2<Integer,Integer>>(){
    @Override public Iterable<String> select(    Tuple2<Integer,Integer> value){
      List<String> output=new ArrayList<>();
      output.add(value.f0 + "");
      return output;
    }
  }
);
  splittedResult.select("0").map(new MapFunction<Tuple2<Integer,Integer>,Integer>(){
    @Override public Integer map(    Tuple2<Integer,Integer> value) throws Exception {
      return value.f1;
    }
  }
).writeAsText(resultPath1,FileSystem.WriteMode.OVERWRITE);
  splittedResult.select("1").map(new MapFunction<Tuple2<Integer,Integer>,Integer>(){
    @Override public Integer map(    Tuple2<Integer,Integer> value) throws Exception {
      return value.f1;
    }
  }
).writeAsText(resultPath2,FileSystem.WriteMode.OVERWRITE);
  StringBuilder builder1=new StringBuilder();
  StringBuilder builder2=new StringBuilder();
  int counter1=0;
  int counter2=0;
  for (int i=0; i < numElements; i++) {
    if (i % 2 == 0) {
      counter1+=i;
      builder1.append(counter1 + "\n");
    }
 else {
      counter2+=i;
      builder2.append(counter2 + "\n");
    }
  }
  expected1=builder1.toString();
  expected2=builder2.toString();
  env.execute();
}
