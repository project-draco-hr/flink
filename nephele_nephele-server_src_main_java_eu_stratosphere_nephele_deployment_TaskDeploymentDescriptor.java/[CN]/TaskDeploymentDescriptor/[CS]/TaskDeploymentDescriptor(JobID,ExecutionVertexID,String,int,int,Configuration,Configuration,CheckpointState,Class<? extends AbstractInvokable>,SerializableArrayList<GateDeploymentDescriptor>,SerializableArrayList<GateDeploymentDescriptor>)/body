{
  if (jobID == null) {
    throw new IllegalArgumentException("Argument jobID must not be null");
  }
  if (vertexID == null) {
    throw new IllegalArgumentException("Argument vertexID must not be null");
  }
  if (taskName == null) {
    throw new IllegalArgumentException("Argument taskName must not be null");
  }
  if (indexInSubtaskGroup < 0) {
    throw new IllegalArgumentException("Argument indexInSubtaskGroup must not be smaller than zero");
  }
  if (currentNumberOfSubtasks < indexInSubtaskGroup) {
    throw new IllegalArgumentException("Argument currentNumberOfSubtasks must not be smaller than argument indexInSubtaskGroup");
  }
  if (jobConfiguration == null) {
    throw new IllegalArgumentException("Argument jobConfiguration must not be null");
  }
  if (taskConfiguration == null) {
    throw new IllegalArgumentException("Argument taskConfiguration must not be null");
  }
  if (initialCheckpointState == null) {
    throw new IllegalArgumentException("Argument initialCheckpointState must not be null");
  }
  if (invokableClass == null) {
    throw new IllegalArgumentException("Argument invokableClass must not be null");
  }
  this.jobID=jobID;
  this.vertexID=vertexID;
  this.taskName=taskName;
  this.indexInSubtaskGroup=indexInSubtaskGroup;
  this.currentNumberOfSubtasks=currentNumberOfSubtasks;
  this.jobConfiguration=jobConfiguration;
  this.taskConfiguration=taskConfiguration;
  this.initialCheckpointState=initialCheckpointState;
  this.invokableClass=invokableClass;
  this.outputGates=outputGates;
  this.inputGates=inputGates;
}
