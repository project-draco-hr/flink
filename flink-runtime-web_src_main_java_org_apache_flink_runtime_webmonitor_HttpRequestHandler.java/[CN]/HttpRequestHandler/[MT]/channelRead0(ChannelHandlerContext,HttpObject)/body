{
  try {
    if (msg instanceof HttpRequest) {
      currentRequest=(HttpRequest)msg;
      currentRequestPath=null;
      if (currentDecoder != null) {
        currentDecoder.destroy();
        currentDecoder=null;
      }
      if (currentRequest.getMethod() == HttpMethod.GET || currentRequest.getMethod() == HttpMethod.DELETE) {
        ctx.fireChannelRead(currentRequest);
      }
 else       if (currentRequest.getMethod() == HttpMethod.POST) {
        currentRequestPath=new QueryStringDecoder(currentRequest.getUri()).path();
        currentDecoder=new HttpPostRequestDecoder(DATA_FACTORY,currentRequest);
      }
 else {
        throw new IOException("Unsupported HTTP method: " + currentRequest.getMethod().name());
      }
    }
 else     if (currentDecoder != null && msg instanceof HttpContent) {
      HttpContent chunk=(HttpContent)msg;
      currentDecoder.offer(chunk);
      try {
        while (currentDecoder.hasNext()) {
          InterfaceHttpData data=currentDecoder.next();
          if (data.getHttpDataType() == HttpDataType.FileUpload) {
            DiskFileUpload file=(DiskFileUpload)data;
            if (file.isCompleted()) {
              String name=file.getFilename();
              File target=new File(tmpDir,UUID.randomUUID() + "_" + name);
              file.renameTo(target);
              QueryStringEncoder encoder=new QueryStringEncoder(currentRequestPath);
              encoder.addParam("filepath",target.getAbsolutePath());
              encoder.addParam("filename",name);
              currentRequest.setUri(encoder.toString());
            }
          }
          data.release();
        }
      }
 catch (      EndOfDataDecoderException ignored) {
      }
      if (chunk instanceof LastHttpContent) {
        HttpRequest request=currentRequest;
        currentRequest=null;
        currentRequestPath=null;
        currentDecoder.destroy();
        currentDecoder=null;
        ctx.fireChannelRead(request);
      }
    }
  }
 catch (  Throwable t) {
    currentRequest=null;
    currentRequestPath=null;
    if (currentDecoder != null) {
      currentDecoder.destroy();
      currentDecoder=null;
    }
    if (ctx.channel().isActive()) {
      byte[] bytes=ExceptionUtils.stringifyException(t).getBytes(ENCODING);
      DefaultFullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR,Unpooled.wrappedBuffer(bytes));
      response.headers().set(HttpHeaders.Names.CONTENT_ENCODING,"utf-8");
      response.headers().set(HttpHeaders.Names.CONTENT_TYPE,"text/plain");
      response.headers().set(HttpHeaders.Names.CONTENT_LENGTH,response.content().readableBytes());
      ctx.writeAndFlush(response);
    }
  }
}
