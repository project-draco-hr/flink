{
  final InMemorySorter<T> sorter=this.sorter;
  if (!sorter.isEmpty()) {
    this.sortAlgo.sort(sorter);
    final TypeSerializer<T> serializer=this.serializer;
    final TypeComparator<T> comparator=this.comparator;
    final GenericReduce<T> function=this.reducer;
    final Collector<T> output=this.output;
    final MutableObjectIterator<T> input=sorter.getIterator();
    T value=input.next(serializer.createInstance());
    while (this.running && value != null) {
      comparator.setReference(value);
      T res=value;
      while ((value=input.next(serializer.createInstance())) != null) {
        if (comparator.equalToReference(value)) {
          res=function.reduce(res,value);
        }
 else {
          break;
        }
      }
      output.collect(res);
    }
  }
}
