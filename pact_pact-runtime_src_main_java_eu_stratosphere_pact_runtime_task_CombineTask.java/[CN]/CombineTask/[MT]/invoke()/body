{
  if (LOG.isInfoEnabled())   LOG.info(getLogString("Start PACT code"));
  if (LOG.isDebugEnabled())   LOG.debug(getLogString("Start obtaining iterator"));
  CloseableInputProvider<KeyValuePair<Key,Value>> sortedInputProvider=null;
  try {
    sortedInputProvider=obtainInput();
    Iterator<KeyValuePair<Key,Value>> iterator=sortedInputProvider.getIterator();
    KeyGroupedIterator<Key,Value> kgIterator=new KeyGroupedIterator<Key,Value>(iterator);
    if (LOG.isDebugEnabled())     LOG.debug(getLogString("Iterator obtained"));
    ReduceStub stub=this.stub;
    OutputCollector output=this.output;
    while (!this.taskCanceled && kgIterator.nextKey()) {
      stub.combine(kgIterator.getKey(),kgIterator.getValues(),output);
    }
  }
 catch (  Exception ex) {
    if (!this.taskCanceled) {
      if (LOG.isErrorEnabled())       LOG.error(getLogString("Unexpected ERROR in PACT code"));
      throw ex;
    }
  }
 finally {
    if (sortedInputProvider != null) {
      sortedInputProvider.close();
    }
  }
  if (!this.taskCanceled) {
    if (LOG.isInfoEnabled())     LOG.info(getLogString("Finished PACT code"));
  }
 else {
    if (LOG.isWarnEnabled())     LOG.warn(getLogString("PACT code cancelled"));
  }
}
