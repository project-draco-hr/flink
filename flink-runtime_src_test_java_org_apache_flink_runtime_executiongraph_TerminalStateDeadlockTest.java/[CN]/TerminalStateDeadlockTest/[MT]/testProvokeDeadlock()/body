{
  try {
    final JobID jobId=resource.getJobID();
    final JobVertexID vid1=new JobVertexID();
    final JobVertexID vid2=new JobVertexID();
    final Configuration jobConfig=new Configuration();
    final List<JobVertex> vertices;
{
      JobVertex v1=new JobVertex("v1",vid1);
      JobVertex v2=new JobVertex("v2",vid2);
      v1.setParallelism(1);
      v2.setParallelism(1);
      v1.setInvokableClass(DummyInvokable.class);
      v2.setInvokableClass(DummyInvokable.class);
      vertices=Arrays.asList(v1,v2);
    }
    final Scheduler scheduler=new Scheduler();
    final Executor executor=Executors.newFixedThreadPool(4);
    for (int i=0; i < 20000; i++) {
      final TestExecGraph eg=new TestExecGraph(jobId);
      eg.attachJobGraph(vertices);
      eg.setDelayBeforeRetrying(0);
      eg.setNumberOfRetriesLeft(1);
      final Execution e1=eg.getJobVertex(vid1).getTaskVertices()[0].getCurrentExecutionAttempt();
      final Execution e2=eg.getJobVertex(vid2).getTaskVertices()[0].getCurrentExecutionAttempt();
      initializeExecution(e1);
      initializeExecution(e2);
      execGraphStateField.set(eg,JobStatus.FAILING);
      execGraphSchedulerField.set(eg,scheduler);
      Runnable r1=new Runnable(){
        @Override public void run(){
          e1.cancelingComplete();
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          e2.cancelingComplete();
        }
      }
;
      executor.execute(r1);
      executor.execute(r2);
      eg.waitTillDone();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
