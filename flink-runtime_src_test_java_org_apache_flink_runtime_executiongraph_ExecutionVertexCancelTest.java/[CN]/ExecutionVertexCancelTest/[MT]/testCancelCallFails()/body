{
  try {
    final JobVertexID jid=new JobVertexID();
    final ExecutionJobVertex ejv=getJobVertexExecutingSynchronously(jid);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0]);
    final ExecutionAttemptID execId=vertex.getCurrentExecutionAttempt().getAttemptId();
    final TaskOperationProtocol taskManager=mock(TaskOperationProtocol.class);
    when(taskManager.cancelTask(execId)).thenThrow(new IOException("RPC call failed"));
    Instance instance=getInstance(taskManager);
    AllocatedSlot slot=instance.allocateSlot(new JobID());
    setVertexState(vertex,ExecutionState.RUNNING);
    setVertexResource(vertex,slot);
    assertEquals(ExecutionState.RUNNING,vertex.getExecutionState());
    vertex.cancel();
    assertEquals(ExecutionState.FAILED,vertex.getExecutionState());
    assertTrue(slot.isReleased());
    assertNotNull(vertex.getFailureCause());
    assertTrue(vertex.getStateTimestamp(ExecutionState.CREATED) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.CANCELING) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.FAILED) > 0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
