{
  try {
    final JobVertexID jid=new JobVertexID();
    final ExecutionJobVertex ejv=getExecutionVertex(jid);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0]);
    setVertexState(vertex,ExecutionState.CANCELED);
    assertEquals(ExecutionState.CANCELED,vertex.getExecutionState());
{
      Scheduler scheduler=mock(Scheduler.class);
      vertex.scheduleForExecution(scheduler,false);
      assertEquals(ExecutionState.CANCELED,vertex.getExecutionState());
    }
    try {
      Instance instance=getInstance(ActorRef.noSender());
      AllocatedSlot slot=instance.allocateSlot(new JobID());
      vertex.deployToSlot(slot);
      fail("Method should throw an exception");
    }
 catch (    IllegalStateException e) {
      assertEquals(ExecutionState.CANCELED,vertex.getExecutionState());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
