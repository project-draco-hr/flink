{
  try {
    final JobVertexID jid=new JobVertexID();
    final ExecutionJobVertex ejv=getJobVertexNotExecuting(jid);
    final ExecutionVertex2 vertex=new ExecutionVertex2(ejv,0,new IntermediateResult[0]);
    setVertexState(vertex,ExecutionState2.CANCELED);
    assertEquals(ExecutionState2.CANCELED,vertex.getExecutionState());
{
      DefaultScheduler scheduler=mock(DefaultScheduler.class);
      vertex.scheduleForExecution(scheduler);
      assertEquals(ExecutionState2.CANCELED,vertex.getExecutionState());
    }
    try {
      TaskOperationProtocol taskManager=mock(TaskOperationProtocol.class);
      Instance instance=getInstance(taskManager);
      AllocatedSlot slot=instance.allocateSlot(new JobID());
      vertex.deployToSlot(slot);
      fail("Method should throw an exception");
    }
 catch (    IllegalStateException e) {
      assertEquals(ExecutionState2.CANCELED,vertex.getExecutionState());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
