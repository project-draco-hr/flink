{
  try {
    final JobVertexID jid=new JobVertexID();
    final ExecutionJobVertex ejv=getExecutionVertex(jid);
    try {
      ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0],AkkaUtils.DEFAULT_TIMEOUT());
      setVertexState(vertex,ExecutionState.CANCELING);
      Scheduler scheduler=mock(Scheduler.class);
      vertex.scheduleForExecution(scheduler,false);
    }
 catch (    Exception e) {
      fail("should not throw an exception");
    }
    try {
      ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0],AkkaUtils.DEFAULT_TIMEOUT());
      setVertexState(vertex,ExecutionState.CANCELING);
      Instance instance=getInstance(ActorRef.noSender());
      SimpleSlot slot=instance.allocateSimpleSlot(new JobID());
      vertex.deployToSlot(slot);
      fail("Method should throw an exception");
    }
 catch (    IllegalStateException e) {
    }
{
      ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0],AkkaUtils.DEFAULT_TIMEOUT());
      Instance instance=getInstance(ActorRef.noSender());
      SimpleSlot slot=instance.allocateSimpleSlot(new JobID());
      setVertexResource(vertex,slot);
      setVertexState(vertex,ExecutionState.CANCELING);
      Exception failureCause=new Exception("test exception");
      vertex.fail(failureCause);
      assertEquals(ExecutionState.FAILED,vertex.getExecutionState());
      assertEquals(failureCause,vertex.getFailureCause());
      assertTrue(slot.isReleased());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
