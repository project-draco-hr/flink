{
  try {
    final JobVertexID jid=new JobVertexID();
    final TestingUtils.QueuedActionExecutionContext executionContext=TestingUtils.queuedActionExecutionContext();
    final TestingUtils.ActionQueue actions=executionContext.actionQueue();
    final ExecutionJobVertex ejv=getExecutionVertex(jid,executionContext);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0],AkkaUtils.getDefaultTimeout());
    final ExecutionAttemptID execId=vertex.getCurrentExecutionAttempt().getAttemptId();
    setVertexState(vertex,ExecutionState.SCHEDULED);
    assertEquals(ExecutionState.SCHEDULED,vertex.getExecutionState());
    InstanceGateway instanceGateway=new CancelSequenceInstanceGateway(executionContext,new TaskOperationResult(execId,false),new TaskOperationResult(execId,true));
    Instance instance=getInstance(instanceGateway);
    SimpleSlot slot=instance.allocateSimpleSlot(new JobID());
    vertex.deployToSlot(slot);
    assertEquals(ExecutionState.DEPLOYING,vertex.getExecutionState());
    vertex.cancel();
    assertEquals(ExecutionState.CANCELING,vertex.getExecutionState());
    Runnable deployAction=actions.popNextAction();
    Runnable cancelAction=actions.popNextAction();
    cancelAction.run();
    actions.triggerNextAction();
    assertEquals(ExecutionState.CANCELING,vertex.getExecutionState());
    deployAction.run();
    assertEquals(ExecutionState.CANCELING,vertex.getExecutionState());
    vertex.getCurrentExecutionAttempt().cancelingComplete();
    assertEquals(ExecutionState.CANCELED,vertex.getExecutionState());
    assertTrue(slot.isReleased());
    assertNull(vertex.getFailureCause());
    assertTrue(vertex.getStateTimestamp(ExecutionState.CREATED) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.CANCELING) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.CANCELED) > 0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
