{
  try {
    final JobVertexID jid=new JobVertexID();
    final ActionQueue actions=new ActionQueue();
    final ExecutionJobVertex ejv=getJobVertexExecutingTriggered(jid,actions);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0]);
    final ExecutionAttemptID execId=vertex.getCurrentExecutionAttempt().getAttemptId();
    setVertexState(vertex,ExecutionState.SCHEDULED);
    assertEquals(ExecutionState.SCHEDULED,vertex.getExecutionState());
    TaskOperationProtocol taskManager=mock(TaskOperationProtocol.class);
    when(taskManager.submitTask(Matchers.any(TaskDeploymentDescriptor.class))).thenReturn(new TaskOperationResult(execId,true));
    when(taskManager.cancelTask(execId)).thenReturn(new TaskOperationResult(execId,true),new TaskOperationResult(execId,false));
    Instance instance=getInstance(taskManager);
    AllocatedSlot slot=instance.allocateSlot(new JobID());
    LibraryCacheManager.register(ejv.getJobId(),new String[0]);
    vertex.deployToSlot(slot);
    assertEquals(ExecutionState.DEPLOYING,vertex.getExecutionState());
    vertex.cancel();
    assertEquals(ExecutionState.CANCELING,vertex.getExecutionState());
    verify(taskManager,times(0)).submitTask(Matchers.any(TaskDeploymentDescriptor.class));
    verify(taskManager,times(0)).cancelTask(execId);
    actions.triggerNextAction();
    assertEquals(ExecutionState.CANCELING,vertex.getExecutionState());
    verify(taskManager,times(1)).submitTask(Matchers.any(TaskDeploymentDescriptor.class));
    assertEquals(ExecutionState.CANCELING,vertex.getExecutionState());
    actions.triggerNextAction();
    vertex.getCurrentExecutionAttempt().cancelingComplete();
    assertEquals(ExecutionState.CANCELED,vertex.getExecutionState());
    actions.triggerNextAction();
    assertEquals(ExecutionState.CANCELED,vertex.getExecutionState());
    verify(taskManager,times(2)).cancelTask(execId);
    assertTrue(slot.isReleased());
    assertNull(vertex.getFailureCause());
    assertTrue(vertex.getStateTimestamp(ExecutionState.CREATED) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.CANCELING) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.CANCELED) > 0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
