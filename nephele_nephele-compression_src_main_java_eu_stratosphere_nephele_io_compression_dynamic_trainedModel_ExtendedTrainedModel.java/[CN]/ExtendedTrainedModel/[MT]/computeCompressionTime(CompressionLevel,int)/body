{
  double ratio=0.0;
  long cTime=0;
  long dTime=0;
  long result=0;
switch (cl) {
case NO_COMPRESSION:
    result=(long)((double)bufferLength / bandwidth) + (2 * ((bufferLength * 1000000) / 50000000));
case LIGHT_COMPRESSION:
case MEDIUM_COMPRESSION:
case HEAVY_COMPRESSION:
  ratio=computeCompressionRatio(cl);
if (ratio <= 0) ratio=0.0001;
AlgorithmResults ar=trainingResults.getAlgorithmResultsByCompressionLevel(cl);
if (ar == null) return -1;
 else {
cTime=(long)(ar.cRToCTCoefficientA + (ar.cRToCTCoefficientB * ratio));
dTime=(long)(ar.cRToDTCoefficientA + (ar.cRToDTCoefficientB * ratio));
System.out.println(ar.algorithmName + " Ratio: " + ratio+ " Compression-Time: "+ cTime+ " Decompression-Time: "+ dTime);
}
break;
default :
return -1;
}
result=(long)((((double)bufferLength * ratio) / (double)bandwidth) + ((bufferLength * (cTime + dTime)) / trainingResults.getDataBlockSize()));
return (long)(errorCoefficient * result);
}
