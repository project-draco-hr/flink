{
  CompressionLevel next=lastCompressionLevel;
  if (nextEvaluationRound == 0) {
    if (trainingResults == null) {
      nextEvaluationRound+=Integer.MAX_VALUE;
      return CompressionLevel.LIGHT_COMPRESSION;
    }
    if (lastCompressionLevel == CompressionLevel.NO_COMPRESSION) {
      return CompressionLevel.LIGHT_COMPRESSION;
    }
 else {
      this.lastCompressionLevel=lastCompressionLevel;
      long noTime=computeCompressionTime(CompressionLevel.NO_COMPRESSION,bufferLength);
      long lightTime=computeCompressionTime(CompressionLevel.LIGHT_COMPRESSION,bufferLength);
      long medTime=computeCompressionTime(CompressionLevel.MEDIUM_COMPRESSION,bufferLength);
      long heavyTime=computeCompressionTime(CompressionLevel.HEAVY_COMPRESSION,bufferLength);
      System.out.println("Predicted Transfer Time: NOC: " + noTime + " LC: "+ lightTime+ " MC: "+ medTime+ " HC: "+ heavyTime);
      System.out.println("Error: " + errorCoefficient);
      if (noTime < lightTime && noTime < medTime && noTime < heavyTime) {
        next=CompressionLevel.NO_COMPRESSION;
        lastEstimatedTime=noTime;
      }
 else       if (lightTime < medTime && lightTime < heavyTime) {
        next=CompressionLevel.LIGHT_COMPRESSION;
        lastEstimatedTime=lightTime;
      }
 else       if (medTime < heavyTime) {
        next=CompressionLevel.MEDIUM_COMPRESSION;
        lastEstimatedTime=medTime;
      }
 else {
        next=CompressionLevel.HEAVY_COMPRESSION;
        lastEstimatedTime=heavyTime;
      }
      if (next == lastDecision) {
        if (evaluationIncreaseFactor < MAX_EVALUATION_INCREASE_FACTOR)         evaluationIncreaseFactor++;
      }
 else {
        evaluationIncreaseFactor=1;
      }
      lastDecision=next;
      nextEvaluationRound=ROUNDS_WITHOUT_EVALUATION * evaluationIncreaseFactor;
    }
  }
  this.lastCompressionLevel=next;
  nextEvaluationRound--;
  return next;
}
