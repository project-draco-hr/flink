{
  File tempdir=new File(CommonTestUtils.getTempDir() + File.separator + CommonTestUtils.getRandomDirectoryName()+ File.separator);
  tempdir.mkdirs();
  System.out.println("created temp dir: " + tempdir.getAbsolutePath());
  File conffile1=new File(tempdir.getAbsolutePath() + File.separator + CommonTestUtils.getRandomDirectoryName()+ ".xml");
  File conffile2=new File(tempdir.getAbsolutePath() + File.separator + CommonTestUtils.getRandomDirectoryName()+ ".xml");
  try {
    PrintWriter pw1=new PrintWriter(conffile1);
    PrintWriter pw2=new PrintWriter(conffile2);
    pw1.append("<configuration>");
    pw2.append("<configuration>");
    pw1.append("<property><key>mykey1</key><value>myvalue1</value></property>");
    pw1.append("<property></property>");
    pw1.append("<property><key></key><value></value></property>");
    pw1.append("<property><key>hello</key><value></value></property>");
    pw1.append("<property><key>mykey2</key><value>myvalue2</value></property>");
    pw2.append("<property><key>mykey3</key><value>myvalue3</value></property>");
    pw2.append("<property><key>mykey4</key><value>myvalue4</value></property>");
    pw1.append("</configuration>");
    pw2.append("</configuration>");
    pw1.close();
    pw2.close();
  }
 catch (  FileNotFoundException e1) {
    fail("cannot write to temp directory " + CommonTestUtils.getTempDir());
    e1.printStackTrace();
  }
  GlobalConfiguration.loadConfiguration(tempdir.getAbsolutePath());
  Configuration co=GlobalConfiguration.getConfiguration();
  assertEquals(co.getString("mykey1","null"),"myvalue1");
  assertEquals(co.getString("mykey2","null"),"myvalue2");
  assertEquals(co.getString("mykey3","null"),"myvalue3");
  assertEquals(co.getString("mykey4","null"),"myvalue4");
  assertEquals(co.getInteger("mykey1",500),500);
  assertEquals(co.getInteger("anything",500),500);
  assertEquals(co.getBoolean("notexistent",true),true);
  conffile1.delete();
  conffile2.delete();
  tempdir.delete();
  Configuration newconf=new Configuration();
  newconf.setInteger("mynewinteger",1000);
  GlobalConfiguration.includeConfiguration(newconf);
  assertEquals(GlobalConfiguration.getInteger("mynewinteger",0),1000);
  String[] configparams={"mykey1","mykey2"};
  Configuration newconf2=GlobalConfiguration.getConfiguration(configparams);
  assertEquals(newconf2.keySet().size(),2);
  assertEquals(newconf2.getString("mykey1","null"),"myvalue1");
  assertEquals(newconf2.getString("mykey2","null"),"myvalue2");
}
