{
  List<Tuple2<Integer,Integer>> inputs=new ArrayList<Tuple2<Integer,Integer>>();
  inputs.add(new Tuple2<Integer,Integer>(1,1));
  inputs.add(new Tuple2<Integer,Integer>(0,0));
  inputs.add(new Tuple2<Integer,Integer>(1,-1));
  inputs.add(new Tuple2<Integer,Integer>(1,-2));
  TestCollector<StreamWindow<Tuple2<Integer,Integer>>> collector=new TestCollector<StreamWindow<Tuple2<Integer,Integer>>>();
  List<StreamWindow<Tuple2<Integer,Integer>>> collected=collector.getCollected();
  WindowBuffer<Tuple2<Integer,Integer>> wb=new TumblingGroupedPreReducer<Tuple2<Integer,Integer>>(reducer,key,serializer);
  wb.store(serializer.copy(inputs.get(0)));
  wb.store(serializer.copy(inputs.get(1)));
  assertEquals(2,wb.size());
  wb.emitWindow(collector);
  assertEquals(1,collected.size());
  assertSetEquals(StreamWindow.fromElements(new Tuple2<Integer,Integer>(1,1),new Tuple2<Integer,Integer>(0,0)),collected.get(0));
  assertEquals(0,wb.size());
  wb.store(serializer.copy(inputs.get(0)));
  wb.store(serializer.copy(inputs.get(1)));
  wb.store(serializer.copy(inputs.get(2)));
  wb.evict(3);
  wb.store(serializer.copy(inputs.get(3)));
  assertEquals(4,wb.size());
  wb.emitWindow(collector);
  assertEquals(2,collected.size());
  assertSetEquals(StreamWindow.fromElements(new Tuple2<Integer,Integer>(3,-2),new Tuple2<Integer,Integer>(0,0)),collected.get(1));
  assertEquals(2,reducer.allInputs.size());
  assertEquals(reducer.allInputs.get(0),inputs.get(2));
  assertEquals(reducer.allInputs.get(1),inputs.get(3));
}
