{
  createInputFile();
  createOutputDir();
  createJarFile("GrepTask1Input1Output");
  createJarFile("GrepTask2Inputs1Output");
  createJarFile("GrepTask1Input2Outputs");
  JobGraph jg=new JobGraph("Job Graph 1");
  JobID jobID=jg.getJobID();
  JobFileInputVertex i1=new JobFileInputVertex("Input 1",jg);
  i1.setFileInputClass(FileLineReader.class);
  i1.setFilePath(new Path("file://" + PATHNAME + INPUTFILENAME));
  i1.setNumberOfSubtasks(4);
  i1.setNumberOfSubtasksPerInstance(2);
  JobFileInputVertex i2=new JobFileInputVertex("Input 2",jg);
  i2.setFileInputClass(FileLineReader.class);
  i2.setFilePath(new Path("file://" + PATHNAME + INPUTFILENAME));
  i2.setNumberOfSubtasks(4);
  i2.setNumberOfSubtasksPerInstance(2);
  JobTaskVertex t1=new JobTaskVertex("Task 1",jg);
  t1.setTaskClass(GrepTask1Input1Output.class);
  t1.setNumberOfSubtasks(4);
  t1.setNumberOfSubtasksPerInstance(2);
  JobTaskVertex t2=new JobTaskVertex("Task 2",jg);
  t2.setTaskClass(GrepTask1Input1Output.class);
  t2.setNumberOfSubtasks(4);
  t2.setNumberOfSubtasksPerInstance(2);
  JobTaskVertex t3=new JobTaskVertex("Task 3",jg);
  t3.setTaskClass(GrepTask2Inputs1Output.class);
  t3.setNumberOfSubtasks(8);
  t3.setNumberOfSubtasksPerInstance(4);
  JobTaskVertex t4=new JobTaskVertex("Task 4",jg);
  t4.setTaskClass(GrepTask1Input2Outputs.class);
  t4.setNumberOfSubtasks(8);
  t4.setNumberOfSubtasksPerInstance(4);
  JobFileOutputVertex o1=new JobFileOutputVertex("Output 1",jg);
  o1.setFileOutputClass(FileLineWriter.class);
  o1.setFilePath(new Path("file://" + PATHNAME + OUTPUTDIRNAME));
  o1.setNumberOfSubtasks(4);
  o1.setNumberOfSubtasksPerInstance(2);
  JobFileOutputVertex o2=new JobFileOutputVertex("Output 2",jg);
  o2.setFileOutputClass(FileLineWriter.class);
  o2.setFilePath(new Path("file://" + PATHNAME + OUTPUTDIRNAME));
  o2.setNumberOfSubtasks(4);
  o2.setNumberOfSubtasksPerInstance(2);
  o1.setVertexToShareInstancesWith(o2);
  try {
    i1.connectTo(t1,ChannelType.FILE,CompressionLevel.NO_COMPRESSION);
    i2.connectTo(t2,ChannelType.FILE,CompressionLevel.NO_COMPRESSION);
    t1.connectTo(t3,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
    t2.connectTo(t3,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
    t3.connectTo(t4,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    t4.connectTo(o1,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
    t4.connectTo(o2,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
  }
 catch (  JobGraphDefinitionException e) {
    e.printStackTrace();
  }
  jg.addJar(new Path("file://" + PATHNAME + "GrepTask1Input1Output.jar"));
  jg.addJar(new Path("file://" + PATHNAME + "GrepTask2Inputs1Output.jar"));
  jg.addJar(new Path("file://" + PATHNAME + "GrepTask1Input2Outputs.jar"));
  Path[] paths={new Path("file://" + PATHNAME + "GrepTask1Input1Output.jar"),new Path("file://" + PATHNAME + "GrepTask2Inputs1Output.jar"),new Path("file://" + PATHNAME + "GrepTask1Input2Outputs.jar")};
  try {
    LibraryCacheManager.addLibrary(jobID,new Path("file://" + PATHNAME + "GrepTask1Input1Output.jar"),new File(PATHNAME + "GrepTask1Input1Output.jar").length(),new DataInputStream(new FileInputStream(new File(PATHNAME + "GrepTask1Input1Output.jar"))));
    LibraryCacheManager.addLibrary(jobID,new Path("file://" + PATHNAME + "GrepTask2Inputs1Output.jar"),new File(PATHNAME + "GrepTask2Inputs1Output.jar").length(),new DataInputStream(new FileInputStream(new File(PATHNAME + "GrepTask2Inputs1Output.jar"))));
    LibraryCacheManager.addLibrary(jobID,new Path("file://" + PATHNAME + "GrepTask1Input2Outputs.jar"),new File(PATHNAME + "GrepTask1Input2Outputs.jar").length(),new DataInputStream(new FileInputStream(new File(PATHNAME + "GrepTask1Input2Outputs.jar"))));
    LibraryCacheManager.register(jobID,paths);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  final String confDir=System.getProperty("user.dir") + "/correct-conf";
  GlobalConfiguration.loadConfiguration(confDir);
  final MyInstanceListener myInstanceListener=new MyInstanceListener();
  final LocalInstanceManager lim=new LocalInstanceManager(confDir);
  lim.setInstanceListener(myInstanceListener);
  try {
    ExecutionGraph eg=new ExecutionGraph(jg,lim);
    Iterator<ExecutionVertex> it=new ExecutionGraphIterator(eg,true);
    while (it.hasNext()) {
      it.next().setExecutionState(ExecutionState.SCHEDULED);
    }
    assertEquals(1,eg.getInstanceTypesRequiredForCurrentStage().size());
    assertEquals(4,(int)eg.getInstanceTypesRequiredForCurrentStage().get(lim.getInstanceTypeByName("test")));
    it=new ExecutionGraphIterator(eg,eg.getIndexOfCurrentExecutionStage(),true,true);
    while (it.hasNext()) {
      final ExecutionVertex ev=it.next();
      ev.setExecutionState(ExecutionState.SCHEDULED);
      ev.setExecutionState(ExecutionState.ASSIGNING);
      ev.setExecutionState(ExecutionState.ASSIGNED);
      ev.setExecutionState(ExecutionState.READY);
      ev.setExecutionState(ExecutionState.RUNNING);
      ev.setExecutionState(ExecutionState.FINISHING);
      ev.setExecutionState(ExecutionState.FINISHED);
    }
    assertEquals(1,eg.getInstanceTypesRequiredForCurrentStage().size());
    assertEquals(8,(int)eg.getInstanceTypesRequiredForCurrentStage().get(lim.getInstanceTypeByName("test")));
  }
 catch (  GraphConversionException e) {
    e.printStackTrace();
  }
 finally {
    lim.shutdown();
  }
}
