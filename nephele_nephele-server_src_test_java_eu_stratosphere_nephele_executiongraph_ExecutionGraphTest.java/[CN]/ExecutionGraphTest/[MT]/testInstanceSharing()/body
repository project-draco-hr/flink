{
  final int degreeOfParallelism=4;
  File inputFile1=null;
  JobID jobID=null;
  try {
    inputFile1=ServerTestUtils.createInputFile(0);
    final JobGraph jg=new JobGraph("Instance Sharing Test Job");
    jobID=jg.getJobID();
    final JobFileInputVertex input1=new JobFileInputVertex("Input 1",jg);
    input1.setFileInputClass(FileLineReader.class);
    input1.setFilePath(new Path("file://" + inputFile1.getAbsolutePath()));
    input1.setNumberOfSubtasks(degreeOfParallelism);
    final JobTaskVertex forward1=new JobTaskVertex("Forward 1",jg);
    forward1.setTaskClass(ForwardTask1Input1Output.class);
    forward1.setNumberOfSubtasks(degreeOfParallelism);
    final JobTaskVertex forward2=new JobTaskVertex("Forward 2",jg);
    forward2.setTaskClass(ForwardTask1Input1Output.class);
    forward2.setNumberOfSubtasks(degreeOfParallelism);
    final JobTaskVertex forward3=new JobTaskVertex("Forward 3",jg);
    forward3.setTaskClass(ForwardTask1Input1Output.class);
    forward3.setNumberOfSubtasks(degreeOfParallelism);
    final JobFileOutputVertex output1=new JobFileOutputVertex("Output 1",jg);
    output1.setFileOutputClass(FileLineWriter.class);
    output1.setFilePath(new Path("file://" + ServerTestUtils.getRandomFilename()));
    output1.setNumberOfSubtasks(degreeOfParallelism);
    input1.connectTo(forward1,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    forward1.connectTo(forward2,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    forward2.connectTo(forward3,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    forward3.connectTo(output1,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    input1.setVertexToShareInstancesWith(forward1);
    forward1.setVertexToShareInstancesWith(forward2);
    forward2.setVertexToShareInstancesWith(output1);
    LibraryCacheManager.register(jobID,new String[0]);
    final ExecutionGraph eg=new ExecutionGraph(jg,INSTANCE_MANAGER);
    assertEquals(1,eg.getNumberOfStages());
    final ExecutionStage stage=eg.getStage(0);
    assertEquals(4,stage.getNumberOfStageMembers());
    Map<InstanceType,Integer> instanceMap=new HashMap<InstanceType,Integer>();
    stage.collectRequiredInstanceTypes(instanceMap,ExecutionState.CREATED);
    assertEquals(1,instanceMap.size());
    final Integer numberOfRequiredInstances=instanceMap.values().iterator().next();
    System.out.println(numberOfRequiredInstances);
    assertEquals(degreeOfParallelism,numberOfRequiredInstances.intValue());
  }
 catch (  GraphConversionException e) {
    fail(e.getMessage());
  }
catch (  JobGraphDefinitionException e) {
    fail(e.getMessage());
  }
catch (  IOException ioe) {
    fail(ioe.getMessage());
  }
 finally {
    if (inputFile1 != null) {
      inputFile1.delete();
    }
    if (jobID != null) {
      try {
        LibraryCacheManager.unregister(jobID);
      }
 catch (      IOException e) {
      }
    }
  }
}
