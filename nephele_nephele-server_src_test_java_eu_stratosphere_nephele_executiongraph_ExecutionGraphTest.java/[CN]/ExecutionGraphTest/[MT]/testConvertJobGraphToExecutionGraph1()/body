{
  createInputFile();
  createJarFile("GrepTask1Input1Output");
  JobGraph jg=new JobGraph("Job Graph 1");
  JobID jobID=jg.getJobID();
  JobFileInputVertex i1=new JobFileInputVertex("Input 1",jg);
  i1.setFileInputClass(FileLineReader.class);
  i1.setFilePath(new Path("file://" + PATHNAME + INPUTFILENAME));
  JobTaskVertex t1=new JobTaskVertex("Task 1",jg);
  t1.setTaskClass(GrepTask1Input1Output.class);
  JobFileOutputVertex o1=new JobFileOutputVertex("Output 1",jg);
  o1.setFileOutputClass(FileLineWriter.class);
  o1.setFilePath(new Path("file://" + PATHNAME + OUTPUTFILENAME));
  o1.setVertexToShareInstancesWith(i1);
  i1.setVertexToShareInstancesWith(t1);
  try {
    i1.connectTo(t1);
    t1.connectTo(o1);
  }
 catch (  JobGraphDefinitionException e) {
    e.printStackTrace();
  }
  jg.addJar(new Path("file://" + PATHNAME + "GrepTask1Input1Output.jar"));
  Path[] paths={new Path("file://" + PATHNAME + "GrepTask1Input1Output.jar")};
  try {
    LibraryCacheManager.addLibrary(jobID,new Path("file://" + PATHNAME + "GrepTask1Input1Output.jar"),new File(PATHNAME + "GrepTask1Input1Output.jar").length(),new DataInputStream(new FileInputStream(new File(PATHNAME + "GrepTask1Input1Output.jar"))));
    LibraryCacheManager.register(jobID,paths);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  assertEquals(3,jg.getAllJobVertices().length);
  assertEquals(3,jg.getAllReachableJobVertices().length);
  assertTrue(jg.getInputVertices().hasNext());
  assertEquals(1,jg.getJars().length);
  assertEquals(new Path("file://" + PATHNAME + "GrepTask1Input1Output.jar"),jg.getJars()[0]);
  assertNotNull(jg.getJobConfiguration());
  assertEquals("Job Graph 1",jg.getName());
  assertEquals(1,jg.getNumberOfInputVertices());
  assertEquals(1,jg.getNumberOfOutputVertices());
  assertEquals(1,jg.getNumberOfTaskVertices());
  assertEquals(3,jg.getNumberOfVertices());
  assertTrue(jg.getOutputVertices().hasNext());
  assertNotNull(jg.getTaskmanagerConfiguration());
  assertTrue(jg.getTaskVertices().hasNext());
  assertTrue(jg.isAcyclic());
  assertTrue(jg.isWeaklyConnected());
  JobInputVertex jiv1=jg.getInputVertices().next();
  assertNotNull(jiv1.getConfiguration());
  try {
    assertEquals(1,jiv1.getInputSplits().length);
  }
 catch (  IllegalConfigurationException e) {
    e.printStackTrace();
  }
  assertNull(jiv1.getBackwardConnection(0));
  assertNotNull(jiv1.getForwardConnection(0));
  assertNull(jiv1.getForwardConnection(1));
  assertNull(jiv1.getInstanceType());
  assertEquals(FileLineReader.class,jiv1.getInvokableClass());
  assertEquals(jg,jiv1.getJobGraph());
  assertEquals("Input 1",jiv1.getName());
  assertEquals(0,jiv1.getNumberOfBackwardConnections());
  assertEquals(1,jiv1.getNumberOfForwardConnections());
  assertEquals(-1,jiv1.getNumberOfSubtasks());
  assertEquals(-1,jiv1.getNumberOfSubtasksPerInstance());
  assertEquals("Task 1",jiv1.getVertexToShareInstancesWith().getName());
  JobOutputVertex jov1=jg.getOutputVertices().next();
  assertNotNull(jov1.getConfiguration());
  assertNotNull(jov1.getBackwardConnection(0));
  assertNull(jov1.getBackwardConnection(1));
  assertNull(jov1.getForwardConnection(0));
  assertEquals(FileLineWriter.class,jov1.getInvokableClass());
  assertEquals(jg,jov1.getJobGraph());
  assertEquals("Output 1",jov1.getName());
  assertEquals(1,jov1.getNumberOfBackwardConnections());
  assertEquals(0,jov1.getNumberOfForwardConnections());
  assertEquals(-1,jov1.getNumberOfSubtasks());
  assertEquals(-1,jov1.getNumberOfSubtasksPerInstance());
  assertEquals("Input 1",jov1.getVertexToShareInstancesWith().getName());
  JobTaskVertex jtv1=jg.getTaskVertices().next();
  assertNotNull(jtv1.getConfiguration());
  assertNotNull(jtv1.getBackwardConnection(0));
  assertNull(jtv1.getBackwardConnection(1));
  assertNotNull(jtv1.getForwardConnection(0));
  assertNull(jtv1.getForwardConnection(1));
  assertEquals(GrepTask1Input1Output.class,jtv1.getInvokableClass());
  assertEquals(jg,jtv1.getJobGraph());
  assertEquals("Task 1",jtv1.getName());
  assertEquals(1,jtv1.getNumberOfBackwardConnections());
  assertEquals(1,jtv1.getNumberOfForwardConnections());
  assertEquals(-1,jtv1.getNumberOfSubtasks());
  assertEquals(-1,jtv1.getNumberOfSubtasksPerInstance());
  assertEquals(GrepTask1Input1Output.class,jtv1.getTaskClass());
  assertNull(jtv1.getVertexToShareInstancesWith());
  final String confDir=System.getProperty("user.dir") + "/correct-conf";
  GlobalConfiguration.loadConfiguration(confDir);
  MyInstanceListener myInstanceListener=new MyInstanceListener();
  LocalInstanceManager lim=new LocalInstanceManager(confDir);
  lim.setInstanceListener(myInstanceListener);
  try {
    ExecutionGraph eg=new ExecutionGraph(jg,lim);
    final Iterator<ExecutionVertex> it=new ExecutionGraphIterator(eg,true);
    while (it.hasNext()) {
      it.next().setExecutionState(ExecutionState.SCHEDULED);
    }
    assertEquals(1,eg.getInstanceTypesRequiredForCurrentStage().size());
    assertEquals(1,(int)eg.getInstanceTypesRequiredForCurrentStage().get(lim.getInstanceTypeByName("test")));
    assertEquals(jobID,eg.getJobID());
    assertEquals(0,eg.getIndexOfCurrentExecutionStage());
    assertEquals(1,eg.getNumberOfInputVertices());
    assertEquals(1,eg.getNumberOfOutputVertices());
    assertEquals(1,eg.getNumberOfStages());
    assertNotNull(eg.getInputVertex(0));
    assertNull(eg.getInputVertex(1));
    assertNotNull(eg.getOutputVertex(0));
    assertNull(eg.getOutputVertex(1));
    assertNotNull(eg.getStage(0));
    assertNull(eg.getStage(1));
    ExecutionStage es=eg.getStage(0);
    assertEquals(3,es.getNumberOfStageMembers());
    assertEquals(0,es.getStageNumber());
    assertNotNull(es.getStageMember(0));
    assertNotNull(es.getStageMember(1));
    assertNotNull(es.getStageMember(2));
    assertNull(es.getStageMember(3));
    ExecutionGroupVertex egv0=null;
    ExecutionGroupVertex egv1=null;
    ExecutionGroupVertex egv2=null;
    if (es.getStageMember(0).getName().equals("Input 1")) {
      egv0=es.getStageMember(0);
    }
 else     if (es.getStageMember(0).getName().equals("Output 1")) {
      egv1=es.getStageMember(0);
    }
 else {
      egv2=es.getStageMember(0);
    }
    if (es.getStageMember(1).getName().equals("Input 1")) {
      egv0=es.getStageMember(1);
    }
 else     if (es.getStageMember(1).getName().equals("Output 1")) {
      egv1=es.getStageMember(1);
    }
 else {
      egv2=es.getStageMember(1);
    }
    if (es.getStageMember(2).getName().equals("Input 1")) {
      egv0=es.getStageMember(2);
    }
 else     if (es.getStageMember(2).getName().equals("Output 1")) {
      egv1=es.getStageMember(2);
    }
 else {
      egv2=es.getStageMember(2);
    }
    assertNull(egv0.getBackwardEdge(0));
    assertNotNull(egv0.getConfiguration());
    assertEquals(1,egv0.getCurrentNumberOfGroupMembers());
    assertNotNull(egv0.getExecutionSignature());
    assertEquals(es,egv0.getExecutionStage());
    assertNotNull(egv0.getForwardEdge(0));
    assertNull(egv0.getForwardEdge(1));
    assertNotNull(egv0.getForwardEdges(egv2));
    assertNotNull(egv0.getGroupMember(0));
    assertNull(egv0.getGroupMember(1));
    assertEquals(1,egv0.getInputSplits().length);
    assertEquals(-1,egv0.getMaximumNumberOfGroupMembers());
    assertEquals(1,egv0.getMinimumNumberOfGroupMember());
    assertEquals("Input 1",egv0.getName());
    assertEquals(0,egv0.getNumberOfBackwardLinks());
    assertEquals(1,egv0.getNumberOfForwardLinks());
    assertEquals(1,egv0.getNumberOfSubtasksPerInstance());
    assertEquals(0,egv0.getStageNumber());
    assertEquals(-1,egv0.getUserDefinedNumberOfMembers());
    assertEquals(lim.getDefaultInstanceType(),egv0.getInstanceType());
    assertEquals("Task 1",egv0.getVertexToShareInstancesWith().getName());
    assertNotNull(egv1.getBackwardEdge(0));
    assertNull(egv1.getBackwardEdge(1));
    assertNotNull(egv1.getBackwardEdges(egv2));
    assertNotNull(egv1.getConfiguration());
    assertEquals(1,egv1.getCurrentNumberOfGroupMembers());
    assertNotNull(egv1.getExecutionSignature());
    assertEquals(es,egv1.getExecutionStage());
    assertNull(egv1.getForwardEdge(0));
    assertNotNull(egv1.getGroupMember(0));
    assertNull(egv1.getGroupMember(1));
    assertEquals(1,egv1.getMaximumNumberOfGroupMembers());
    assertEquals(1,egv1.getMinimumNumberOfGroupMember());
    assertEquals("Output 1",egv1.getName());
    assertEquals(1,egv1.getNumberOfBackwardLinks());
    assertEquals(0,egv1.getNumberOfForwardLinks());
    assertEquals(1,egv1.getNumberOfSubtasksPerInstance());
    assertEquals(0,egv1.getStageNumber());
    assertEquals(-1,egv1.getUserDefinedNumberOfMembers());
    assertEquals(lim.getInstanceTypeByName("test"),egv1.getInstanceType());
    assertEquals("Input 1",egv1.getVertexToShareInstancesWith().getName());
    assertNotNull(egv2.getBackwardEdge(0));
    assertNull(egv2.getBackwardEdge(1));
    assertNotNull(egv2.getBackwardEdges(egv0));
    assertNotNull(egv2.getConfiguration());
    assertEquals(1,egv2.getCurrentNumberOfGroupMembers());
    assertNotNull(egv2.getExecutionSignature());
    assertEquals(es,egv2.getExecutionStage());
    assertNotNull(egv2.getForwardEdge(0));
    assertNull(egv2.getForwardEdge(1));
    assertNotNull(egv2.getForwardEdges(egv1));
    assertNotNull(egv2.getGroupMember(0));
    assertNull(egv2.getGroupMember(1));
    assertEquals(-1,egv2.getMaximumNumberOfGroupMembers());
    assertEquals(1,egv2.getMinimumNumberOfGroupMember());
    assertEquals("Task 1",egv2.getName());
    assertEquals(1,egv2.getNumberOfBackwardLinks());
    assertEquals(1,egv2.getNumberOfForwardLinks());
    assertEquals(1,egv2.getNumberOfSubtasksPerInstance());
    assertEquals(0,egv2.getStageNumber());
    assertEquals(-1,egv2.getUserDefinedNumberOfMembers());
    assertEquals(lim.getInstanceTypeByName("test"),egv2.getInstanceType());
    assertNull(egv2.getVertexToShareInstancesWith());
    ExecutionVertex ev0=egv0.getGroupMember(0);
    ExecutionVertex ev1=egv1.getGroupMember(0);
    ExecutionVertex ev2=egv2.getGroupMember(0);
    assertNotNull(ev0.getEnvironment());
    assertEquals(egv0,ev0.getGroupVertex());
    assertNotNull(ev0.getID());
    assertEquals("Input 1",ev0.getName());
    assertEquals(lim.getInstanceTypeByName("test"),ev0.getAllocatedResource().getInstance().getType());
    assertNotNull(ev1.getEnvironment());
    assertEquals(egv1,ev1.getGroupVertex());
    assertNotNull(ev1.getID());
    assertEquals("Output 1",ev1.getName());
    assertEquals(lim.getInstanceTypeByName("test"),ev1.getAllocatedResource().getInstance().getType());
    assertNotNull(ev2.getEnvironment());
    assertEquals(egv2,ev2.getGroupVertex());
    assertNotNull(ev2.getID());
    assertEquals("Task 1",ev2.getName());
    assertEquals(lim.getInstanceTypeByName("test"),ev2.getAllocatedResource().getInstance().getType());
    assertEquals(ev0.getAllocatedResource(),ev1.getAllocatedResource());
    assertEquals(ev0.getAllocatedResource(),ev2.getAllocatedResource());
    assertEquals(ChannelType.NETWORK,eg.getChannelType(ev0,ev2));
    assertEquals(ChannelType.NETWORK,eg.getChannelType(ev2,ev1));
  }
 catch (  GraphConversionException e) {
    e.printStackTrace();
  }
 finally {
    lim.shutdown();
  }
}
