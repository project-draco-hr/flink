{
  File inputFile=null;
  JobID jobID=null;
  try {
    inputFile=ServerTestUtils.createInputFile(0);
    final JobGraph jg=new JobGraph("Job Graph 1");
    jobID=jg.getJobID();
    final JobFileInputVertex i1=new JobFileInputVertex("Input 1",jg);
    i1.setFileInputClass(FileLineReader.class);
    i1.setFilePath(new Path(inputFile.toURI()));
    final JobTaskVertex t1=new JobTaskVertex("Task 1",jg);
    t1.setTaskClass(ForwardTask1Input1Output.class);
    final JobFileOutputVertex o1=new JobFileOutputVertex("Output 1",jg);
    o1.setFileOutputClass(FileLineWriter.class);
    o1.setFilePath(new Path(new File(ServerTestUtils.getRandomFilename()).toURI()));
    i1.connectTo(t1,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    t1.connectTo(o1,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    LibraryCacheManager.register(jobID,new String[0]);
    final ExecutionGraph eg=new ExecutionGraph(jg,INSTANCE_MANAGER);
    final InstanceRequestMap instanceRequestMap=new InstanceRequestMap();
    final ExecutionStage executionStage=eg.getCurrentExecutionStage();
    executionStage.collectRequiredInstanceTypes(instanceRequestMap,ExecutionState.CREATED);
    assertEquals(1,instanceRequestMap.size());
    assertEquals(1,(int)instanceRequestMap.getMaximumNumberOfInstances(INSTANCE_MANAGER.getDefaultInstanceType()));
    ExecutionStage es=eg.getStage(0);
    ExecutionGroupVertex egv0=null;
    ExecutionGroupVertex egv1=null;
    ExecutionGroupVertex egv2=null;
    if (es.getStageMember(0).getName().equals("Input 1")) {
      egv0=es.getStageMember(0);
    }
 else     if (es.getStageMember(0).getName().equals("Output 1")) {
      egv1=es.getStageMember(0);
    }
 else {
      egv2=es.getStageMember(0);
    }
    if (es.getStageMember(1).getName().equals("Input 1")) {
      egv0=es.getStageMember(1);
    }
 else     if (es.getStageMember(1).getName().equals("Output 1")) {
      egv1=es.getStageMember(1);
    }
 else {
      egv2=es.getStageMember(1);
    }
    if (es.getStageMember(2).getName().equals("Input 1")) {
      egv0=es.getStageMember(2);
    }
 else     if (es.getStageMember(2).getName().equals("Output 1")) {
      egv1=es.getStageMember(2);
    }
 else {
      egv2=es.getStageMember(2);
    }
    ExecutionVertex ev0=egv0.getGroupMember(0);
    ExecutionVertex ev1=egv1.getGroupMember(0);
    ExecutionVertex ev2=egv2.getGroupMember(0);
    assertEquals(INSTANCE_MANAGER.getDefaultInstanceType(),ev0.getAllocatedResource().getInstance().getType());
    assertEquals(INSTANCE_MANAGER.getDefaultInstanceType(),ev1.getAllocatedResource().getInstance().getType());
    assertEquals(INSTANCE_MANAGER.getDefaultInstanceType(),ev2.getAllocatedResource().getInstance().getType());
    assertEquals(ev0.getAllocatedResource(),ev1.getAllocatedResource());
    assertEquals(ev0.getAllocatedResource(),ev2.getAllocatedResource());
  }
 catch (  GraphConversionException e) {
    fail(e.getMessage());
  }
catch (  IOException e) {
    fail(e.getMessage());
  }
catch (  JobGraphDefinitionException e) {
    fail(e.getMessage());
  }
 finally {
    if (inputFile != null) {
      inputFile.delete();
    }
    if (jobID != null) {
      try {
        LibraryCacheManager.unregister(jobID);
      }
 catch (      IOException e) {
      }
    }
  }
}
