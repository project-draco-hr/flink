{
  File inputFile1=null;
  File inputFile2=null;
  JobID jobID=null;
  try {
    inputFile1=ServerTestUtils.createInputFile(0);
    inputFile2=ServerTestUtils.createInputFile(0);
    final JobGraph jg=new JobGraph("Job Graph 1");
    jobID=jg.getJobID();
    final JobFileInputVertex i1=new JobFileInputVertex("Input 1",jg);
    i1.setFileInputClass(FileLineReader.class);
    i1.setFilePath(new Path("file://" + inputFile1.getAbsolutePath()));
    i1.setNumberOfSubtasks(2);
    final JobFileInputVertex i2=new JobFileInputVertex("Input 2",jg);
    i2.setFileInputClass(FileLineReader.class);
    i2.setFilePath(new Path("file://" + inputFile2.getAbsolutePath()));
    i2.setNumberOfSubtasks(2);
    final JobTaskVertex t1=new JobTaskVertex("Task 1",jg);
    t1.setTaskClass(ForwardTask1Input1Output.class);
    t1.setNumberOfSubtasks(2);
    final JobTaskVertex t2=new JobTaskVertex("Task 2",jg);
    t2.setTaskClass(ForwardTask1Input1Output.class);
    t2.setNumberOfSubtasks(2);
    final JobTaskVertex t3=new JobTaskVertex("Task 3",jg);
    t3.setTaskClass(ForwardTask2Inputs1Output.class);
    t3.setNumberOfSubtasks(2);
    final JobFileOutputVertex o1=new JobFileOutputVertex("Output 1",jg);
    o1.setFileOutputClass(FileLineWriter.class);
    o1.setFilePath(new Path("file://" + ServerTestUtils.getRandomFilename()));
    o1.setNumberOfSubtasks(2);
    i1.setVertexToShareInstancesWith(t1);
    t1.setVertexToShareInstancesWith(t3);
    i2.setVertexToShareInstancesWith(t2);
    t2.setVertexToShareInstancesWith(t3);
    t3.setVertexToShareInstancesWith(o1);
    i1.connectTo(t1);
    i2.connectTo(t2);
    t1.connectTo(t3);
    t2.connectTo(t3);
    t3.connectTo(o1);
    LibraryCacheManager.register(jobID,new String[0]);
    final ExecutionGraph eg=new ExecutionGraph(jg,INSTANCE_MANAGER);
    final InstanceRequestMap instanceRequestMap=new InstanceRequestMap();
    final ExecutionStage executionStage=eg.getCurrentExecutionStage();
    executionStage.collectRequiredInstanceTypes(instanceRequestMap,ExecutionState.CREATED);
    assertEquals(1,instanceRequestMap.size());
    assertEquals(2,(int)instanceRequestMap.getMaximumNumberOfInstances(INSTANCE_MANAGER.getDefaultInstanceType()));
    final ExecutionStage es=eg.getStage(0);
    ExecutionGroupVertex egv0=null;
    ExecutionGroupVertex egv1=null;
    ExecutionGroupVertex egv2=null;
    ExecutionGroupVertex egv3=null;
    ExecutionGroupVertex egv4=null;
    ExecutionGroupVertex egv5=null;
    if (es.getStageMember(0).getName().equals("Input 1")) {
      egv0=es.getStageMember(0);
    }
 else     if (es.getStageMember(0).getName().equals("Input 2")) {
      egv1=es.getStageMember(0);
    }
 else     if (es.getStageMember(0).getName().equals("Task 1")) {
      egv2=es.getStageMember(0);
    }
 else     if (es.getStageMember(0).getName().equals("Task 2")) {
      egv3=es.getStageMember(0);
    }
 else     if (es.getStageMember(0).getName().equals("Task 3")) {
      egv4=es.getStageMember(0);
    }
 else {
      egv5=es.getStageMember(0);
    }
    if (es.getStageMember(1).getName().equals("Input 1")) {
      egv0=es.getStageMember(1);
    }
 else     if (es.getStageMember(1).getName().equals("Input 2")) {
      egv1=es.getStageMember(1);
    }
 else     if (es.getStageMember(1).getName().equals("Task 1")) {
      egv2=es.getStageMember(1);
    }
 else     if (es.getStageMember(1).getName().equals("Task 2")) {
      egv3=es.getStageMember(1);
    }
 else     if (es.getStageMember(1).getName().equals("Task 3")) {
      egv4=es.getStageMember(1);
    }
 else {
      egv5=es.getStageMember(1);
    }
    if (es.getStageMember(2).getName().equals("Input 1")) {
      egv0=es.getStageMember(2);
    }
 else     if (es.getStageMember(2).getName().equals("Input 2")) {
      egv1=es.getStageMember(2);
    }
 else     if (es.getStageMember(2).getName().equals("Task 1")) {
      egv2=es.getStageMember(2);
    }
 else     if (es.getStageMember(2).getName().equals("Task 2")) {
      egv3=es.getStageMember(2);
    }
 else     if (es.getStageMember(2).getName().equals("Task 3")) {
      egv4=es.getStageMember(2);
    }
 else {
      egv5=es.getStageMember(2);
    }
    if (es.getStageMember(3).getName().equals("Input 1")) {
      egv0=es.getStageMember(3);
    }
 else     if (es.getStageMember(3).getName().equals("Input 2")) {
      egv1=es.getStageMember(3);
    }
 else     if (es.getStageMember(3).getName().equals("Task 1")) {
      egv2=es.getStageMember(3);
    }
 else     if (es.getStageMember(3).getName().equals("Task 2")) {
      egv3=es.getStageMember(3);
    }
 else     if (es.getStageMember(3).getName().equals("Task 3")) {
      egv4=es.getStageMember(3);
    }
 else {
      egv5=es.getStageMember(3);
    }
    if (es.getStageMember(4).getName().equals("Input 1")) {
      egv0=es.getStageMember(4);
    }
 else     if (es.getStageMember(4).getName().equals("Input 2")) {
      egv1=es.getStageMember(4);
    }
 else     if (es.getStageMember(4).getName().equals("Task 1")) {
      egv2=es.getStageMember(4);
    }
 else     if (es.getStageMember(4).getName().equals("Task 2")) {
      egv3=es.getStageMember(4);
    }
 else     if (es.getStageMember(4).getName().equals("Task 3")) {
      egv4=es.getStageMember(4);
    }
 else {
      egv5=es.getStageMember(4);
    }
    if (es.getStageMember(5).getName().equals("Input 1")) {
      egv0=es.getStageMember(5);
    }
 else     if (es.getStageMember(5).getName().equals("Input 2")) {
      egv1=es.getStageMember(5);
    }
 else     if (es.getStageMember(5).getName().equals("Task 1")) {
      egv2=es.getStageMember(5);
    }
 else     if (es.getStageMember(5).getName().equals("Task 2")) {
      egv3=es.getStageMember(5);
    }
 else     if (es.getStageMember(5).getName().equals("Task 3")) {
      egv4=es.getStageMember(5);
    }
 else {
      egv5=es.getStageMember(5);
    }
    final ExecutionVertex i1_0=egv0.getGroupMember(0);
    final ExecutionVertex i1_1=egv0.getGroupMember(1);
    final ExecutionVertex i2_0=egv1.getGroupMember(0);
    final ExecutionVertex i2_1=egv1.getGroupMember(1);
    final ExecutionVertex t1_0=egv2.getGroupMember(0);
    final ExecutionVertex t1_1=egv2.getGroupMember(1);
    final ExecutionVertex t2_0=egv3.getGroupMember(0);
    final ExecutionVertex t2_1=egv3.getGroupMember(1);
    final ExecutionVertex t3_0=egv4.getGroupMember(0);
    final ExecutionVertex t3_1=egv4.getGroupMember(1);
    final ExecutionVertex o1_0=egv5.getGroupMember(0);
    final ExecutionVertex o1_1=egv5.getGroupMember(1);
    assertTrue((t1_0.getAllocatedResource().equals(i1_0.getAllocatedResource()) && !t1_0.getAllocatedResource().equals(i1_1.getAllocatedResource())) || (!t1_0.getAllocatedResource().equals(i1_0.getAllocatedResource()) && t1_0.getAllocatedResource().equals(i1_1.getAllocatedResource())));
    assertTrue((t1_0.getAllocatedResource().equals(i2_0.getAllocatedResource()) && !t1_0.getAllocatedResource().equals(i2_1.getAllocatedResource())) || (!t1_0.getAllocatedResource().equals(i2_0.getAllocatedResource()) && t1_0.getAllocatedResource().equals(i2_1.getAllocatedResource())));
    assertTrue((t1_0.getAllocatedResource().equals(t2_0.getAllocatedResource()) && !t1_0.getAllocatedResource().equals(t2_1.getAllocatedResource())) || (!t1_0.getAllocatedResource().equals(t2_0.getAllocatedResource()) && t1_0.getAllocatedResource().equals(t2_1.getAllocatedResource())));
    assertTrue((t1_0.getAllocatedResource().equals(t3_0.getAllocatedResource()) && !t1_0.getAllocatedResource().equals(t3_1.getAllocatedResource())) || (!t1_0.getAllocatedResource().equals(t3_0.getAllocatedResource()) && t1_0.getAllocatedResource().equals(t3_1.getAllocatedResource())));
    assertTrue((t1_0.getAllocatedResource().equals(o1_0.getAllocatedResource()) && !t1_0.getAllocatedResource().equals(o1_1.getAllocatedResource())) || (!t1_0.getAllocatedResource().equals(o1_0.getAllocatedResource()) && t1_0.getAllocatedResource().equals(o1_1.getAllocatedResource())));
    assertTrue((t1_1.getAllocatedResource().equals(i1_0.getAllocatedResource()) && !t1_1.getAllocatedResource().equals(i1_1.getAllocatedResource())) || (!t1_1.getAllocatedResource().equals(i1_0.getAllocatedResource()) && t1_1.getAllocatedResource().equals(i1_1.getAllocatedResource())));
    assertTrue((t1_1.getAllocatedResource().equals(i2_0.getAllocatedResource()) && !t1_1.getAllocatedResource().equals(i2_1.getAllocatedResource())) || (!t1_1.getAllocatedResource().equals(i2_0.getAllocatedResource()) && t1_1.getAllocatedResource().equals(i2_1.getAllocatedResource())));
    assertTrue((t1_1.getAllocatedResource().equals(t2_0.getAllocatedResource()) && !t1_1.getAllocatedResource().equals(t2_1.getAllocatedResource())) || (!t1_1.getAllocatedResource().equals(t2_0.getAllocatedResource()) && t1_1.getAllocatedResource().equals(t2_1.getAllocatedResource())));
    assertTrue((t1_1.getAllocatedResource().equals(t3_0.getAllocatedResource()) && !t1_1.getAllocatedResource().equals(t3_1.getAllocatedResource())) || (!t1_1.getAllocatedResource().equals(t3_0.getAllocatedResource()) && t1_1.getAllocatedResource().equals(t3_1.getAllocatedResource())));
    assertTrue((t1_1.getAllocatedResource().equals(o1_0.getAllocatedResource()) && !t1_1.getAllocatedResource().equals(o1_1.getAllocatedResource())) || (!t1_1.getAllocatedResource().equals(o1_0.getAllocatedResource()) && t1_1.getAllocatedResource().equals(o1_1.getAllocatedResource())));
  }
 catch (  GraphConversionException e) {
    fail(e.getMessage());
  }
catch (  IOException e) {
    fail(e.getMessage());
  }
catch (  JobGraphDefinitionException e) {
    fail(e.getMessage());
  }
 finally {
    if (inputFile1 != null) {
      inputFile1.delete();
    }
    if (inputFile2 != null) {
      inputFile2.delete();
    }
    if (jobID != null) {
      try {
        LibraryCacheManager.unregister(jobID);
      }
 catch (      IOException ioe) {
      }
    }
  }
}
