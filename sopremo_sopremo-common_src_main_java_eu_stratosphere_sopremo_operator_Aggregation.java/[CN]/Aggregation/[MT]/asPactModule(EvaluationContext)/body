{
  if (this.getInputOperators().size() > 2)   throw new UnsupportedOperationException();
  PactModule module=new PactModule(this.getInputOperators().size(),1);
  List<Contract> keyExtractors=new ArrayList<Contract>();
  for (  EvaluableExpression grouping : this.groupings)   keyExtractors.add(PactUtil.addKeyExtraction(module,grouping,context));
switch (this.groupings.size()) {
case 0:
    keyExtractors.add(PactUtil.addKeyExtraction(module,new Path(new Input(0),new Constant(1L)),context));
  addSingleSourceAggregation(context,module,keyExtractors);
break;
case 1:
addSingleSourceAggregation(context,module,keyExtractors);
break;
default :
CoGroupContract<PactJsonObject.Key,PactJsonObject,PactJsonObject,Key,PactJsonObject> aggregationCoGroup=new CoGroupContract<PactJsonObject.Key,PactJsonObject,PactJsonObject,Key,PactJsonObject>(TwoSourceAggregationStub.class);
module.getOutput(0).setInput(aggregationCoGroup);
aggregationCoGroup.setFirstInput(keyExtractors.get(0));
aggregationCoGroup.setSecondInput(keyExtractors.get(1));
PactUtil.setTransformationAndContext(aggregationCoGroup.getStubParameters(),this.getEvaluableExpression(),context);
break;
}
return module;
}
