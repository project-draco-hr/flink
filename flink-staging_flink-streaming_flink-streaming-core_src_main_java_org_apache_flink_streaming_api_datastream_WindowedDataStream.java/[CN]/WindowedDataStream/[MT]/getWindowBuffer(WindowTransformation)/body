{
  TriggerPolicy<T> trigger=getTrigger();
  EvictionPolicy<T> eviction=getEviction();
  if (transformation == WindowTransformation.REDUCEWINDOW) {
    if (WindowUtils.isTumblingPolicy(trigger,eviction)) {
      if (eviction instanceof KeepAllEvictionPolicy) {
        if (keyByKey == null) {
          return new TumblingPreReducer<T>((ReduceFunction<T>)transformation.getUDF(),getType().createSerializer(getExecutionConfig())).noEvict();
        }
 else {
          return new TumblingGroupedPreReducer<T>((ReduceFunction<T>)transformation.getUDF(),keyByKey,getType().createSerializer(getExecutionConfig())).noEvict();
        }
      }
 else {
        if (keyByKey == null) {
          return new TumblingPreReducer<T>((ReduceFunction<T>)transformation.getUDF(),getType().createSerializer(getExecutionConfig()));
        }
 else {
          return new TumblingGroupedPreReducer<T>((ReduceFunction<T>)transformation.getUDF(),keyByKey,getType().createSerializer(getExecutionConfig()));
        }
      }
    }
 else     if (WindowUtils.isSlidingCountPolicy(trigger,eviction)) {
      if (keyByKey == null) {
        return new SlidingCountPreReducer<T>(clean((ReduceFunction<T>)transformation.getUDF()),dataStream.getType().createSerializer(getExecutionConfig()),WindowUtils.getWindowSize(eviction),WindowUtils.getSlideSize(trigger),((CountTriggerPolicy<?>)trigger).getStart());
      }
 else {
        return new SlidingCountGroupedPreReducer<T>(clean((ReduceFunction<T>)transformation.getUDF()),dataStream.getType().createSerializer(getExecutionConfig()),keyByKey,WindowUtils.getWindowSize(eviction),WindowUtils.getSlideSize(trigger),((CountTriggerPolicy<?>)trigger).getStart());
      }
    }
 else     if (WindowUtils.isSlidingTimePolicy(trigger,eviction)) {
      if (keyByKey == null) {
        return new SlidingTimePreReducer<T>((ReduceFunction<T>)transformation.getUDF(),dataStream.getType().createSerializer(getExecutionConfig()),WindowUtils.getWindowSize(eviction),WindowUtils.getSlideSize(trigger),WindowUtils.getTimeStampWrapper(trigger));
      }
 else {
        return new SlidingTimeGroupedPreReducer<T>((ReduceFunction<T>)transformation.getUDF(),dataStream.getType().createSerializer(getExecutionConfig()),keyByKey,WindowUtils.getWindowSize(eviction),WindowUtils.getSlideSize(trigger),WindowUtils.getTimeStampWrapper(trigger));
      }
    }
 else     if (WindowUtils.isJumpingCountPolicy(trigger,eviction)) {
      if (keyByKey == null) {
        return new JumpingCountPreReducer<T>((ReduceFunction<T>)transformation.getUDF(),getType().createSerializer(getExecutionConfig()),WindowUtils.getSlideSize(trigger) - WindowUtils.getWindowSize(eviction));
      }
 else {
        return new JumpingCountGroupedPreReducer<T>((ReduceFunction<T>)transformation.getUDF(),keyByKey,getType().createSerializer(getExecutionConfig()),WindowUtils.getSlideSize(trigger) - WindowUtils.getWindowSize(eviction));
      }
    }
 else     if (WindowUtils.isJumpingTimePolicy(trigger,eviction)) {
      if (keyByKey == null) {
        return new JumpingTimePreReducer<T>((ReduceFunction<T>)transformation.getUDF(),getType().createSerializer(getExecutionConfig()),WindowUtils.getSlideSize(trigger),WindowUtils.getWindowSize(eviction),WindowUtils.getTimeStampWrapper(trigger));
      }
 else {
        return new JumpingTimeGroupedPreReducer<T>((ReduceFunction<T>)transformation.getUDF(),keyByKey,getType().createSerializer(getExecutionConfig()),WindowUtils.getSlideSize(trigger),WindowUtils.getWindowSize(eviction),WindowUtils.getTimeStampWrapper(trigger));
      }
    }
  }
  if (eviction instanceof KeepAllEvictionPolicy) {
    throw new RuntimeException("Full stream policy can only be used with operations that support preaggregations, such as reduce or aggregations");
  }
 else {
    return new BasicWindowBuffer<T>();
  }
}
