{
  if (transformation == WindowTransformation.REDUCEWINDOW) {
    if (getTrigger() instanceof TumblingEvictionPolicy) {
      if (groupByKey == null) {
        return new TumblingPreReducer<OUT>(clean((ReduceFunction<OUT>)transformation.getUDF()),getType().createSerializer(getExecutionConfig()));
      }
 else {
        return new TumblingGroupedPreReducer<OUT>(clean((ReduceFunction<OUT>)transformation.getUDF()),groupByKey,getType().createSerializer(getExecutionConfig()));
      }
    }
 else     if (getTrigger() instanceof CountTriggerPolicy && getEviction() instanceof CountEvictionPolicy && groupByKey == null) {
      int slide=((CountTriggerPolicy<OUT>)getTrigger()).getSlideSize();
      int window=((CountEvictionPolicy<OUT>)getEviction()).getWindowSize();
      int start=((CountEvictionPolicy<OUT>)getEviction()).getStart();
      if (slide < window) {
        return new SlidingCountPreReducer<OUT>(clean((ReduceFunction<OUT>)transformation.getUDF()),dataStream.getType().createSerializer(getExecutionConfig()),window,slide,start);
      }
    }
 else     if (getTrigger() instanceof TimeTriggerPolicy && getEviction() instanceof TimeEvictionPolicy && groupByKey == null) {
      int slide=(int)((TimeTriggerPolicy<OUT>)getTrigger()).getSlideSize();
      int window=(int)((TimeEvictionPolicy<OUT>)getEviction()).getWindowSize();
      TimestampWrapper<OUT> wrapper=((TimeEvictionPolicy<OUT>)getEviction()).getTimeStampWrapper();
      if (slide < window) {
        return new SlidingTimePreReducer<OUT>(clean((ReduceFunction<OUT>)transformation.getUDF()),dataStream.getType().createSerializer(getExecutionConfig()),window,slide,wrapper);
      }
    }
  }
  return new BasicWindowBuffer<OUT>();
}
