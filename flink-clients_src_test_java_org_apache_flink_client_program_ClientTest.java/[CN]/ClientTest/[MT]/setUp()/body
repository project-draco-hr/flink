{
  final int freePort=NetUtils.getAvailablePort();
  config=new Configuration();
  config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,"localhost");
  config.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,freePort);
  config.setString(ConfigConstants.AKKA_ASK_TIMEOUT,ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT);
  program=mock(PackagedProgram.class);
  compilerMock=mock(Optimizer.class);
  generatorMock=mock(JobGraphGenerator.class);
  JobWithJars planWithJarsMock=mock(JobWithJars.class);
  Plan planMock=mock(Plan.class);
  OptimizedPlan optimizedPlanMock=mock(OptimizedPlan.class);
  when(planMock.getJobName()).thenReturn("MockPlan");
  when(program.getPlanWithJars()).thenReturn(planWithJarsMock);
  when(planWithJarsMock.getPlan()).thenReturn(planMock);
  whenNew(Optimizer.class).withArguments(any(DataStatistics.class),any(CostEstimator.class)).thenReturn(this.compilerMock);
  when(compilerMock.compile(planMock)).thenReturn(optimizedPlanMock);
  whenNew(JobGraphGenerator.class).withNoArguments().thenReturn(generatorMock);
  when(generatorMock.compileJobGraph(optimizedPlanMock)).thenReturn(jobGraph);
  try {
    Tuple2<String,Object> address=new Tuple2<String,Object>("localhost",freePort);
    jobManagerSystem=AkkaUtils.createActorSystem(config,new Some<Tuple2<String,Object>>(address));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Setup of test actor system failed.");
  }
}
