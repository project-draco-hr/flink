{
  ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment();
  env.generateSequence(1,1000).output(new DiscardingOutputFormat<Long>());
  Plan plan=env.createProgramPlan();
  JobWithJars jobWithJars=new JobWithJars(plan,Collections.<URL>emptyList(),Collections.<URL>emptyList());
  program=mock(PackagedProgram.class);
  when(program.getPlanWithJars()).thenReturn(jobWithJars);
  final int freePort=NetUtils.getAvailablePort();
  config=new Configuration();
  config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,"localhost");
  config.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,freePort);
  config.setString(ConfigConstants.AKKA_ASK_TIMEOUT,ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT);
  try {
    scala.Tuple2<String,Object> address=new scala.Tuple2<String,Object>("localhost",freePort);
    jobManagerSystem=AkkaUtils.createActorSystem(config,new scala.Some<scala.Tuple2<String,Object>>(address));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Setup of test actor system failed.");
  }
}
