{
  int keyCnt=100;
  int valCnt=20;
  super.initEnvironment(3 * 1024 * 1024);
  super.addInput(new RegularlyGeneratedInputGenerator(keyCnt,valCnt,false),1);
  DataSinkTask testTask=new DataSinkTask();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.SORT);
  super.getTaskConfig().setMemorySize(3 * 1024 * 1024);
  super.getTaskConfig().setNumFilehandles(4);
  super.getConfiguration().setString(DataSinkTask.SORT_ORDER,Order.DESCENDING.name());
  super.registerFileOutputTask(testTask,MockOutputFormat.class,"file://" + this.tempTestPath);
  try {
    testTask.invoke();
  }
 catch (  Exception e) {
    LOG.debug(e);
    e.printStackTrace();
    Assert.fail("Invoke method caused exception.");
  }
  File tempTestFile=new File(this.tempTestPath);
  Assert.assertTrue("Temp output file does not exist",tempTestFile.exists());
  try {
    FileReader fr=new FileReader(tempTestFile);
    BufferedReader br=new BufferedReader(fr);
    Integer oldKey=null;
    while (br.ready()) {
      String line=br.readLine();
      Integer key=Integer.parseInt(line.substring(0,line.indexOf("_")));
      if (oldKey != null) {
        Assert.assertTrue("Data is not written in correct order",oldKey.intValue() >= key.intValue());
      }
      oldKey=key;
    }
  }
 catch (  FileNotFoundException e) {
    Assert.fail("Out file got lost...");
  }
catch (  IOException ioe) {
    Assert.fail("Caught IOE while reading out file");
  }
}
