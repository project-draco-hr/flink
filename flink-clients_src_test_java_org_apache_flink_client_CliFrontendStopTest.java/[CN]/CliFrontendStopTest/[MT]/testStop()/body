{
{
    String[] parameters={"-v","-l"};
    CliFrontend testFrontend=new CliFrontend(CliFrontendTestUtils.getConfigDir());
    int retCode=testFrontend.stop(parameters);
    assertTrue(retCode != 0);
  }
{
    String[] parameters={};
    CliFrontend testFrontend=new CliFrontend(CliFrontendTestUtils.getConfigDir());
    int retCode=testFrontend.stop(parameters);
    assertTrue(retCode != 0);
  }
{
    JobID jid=new JobID();
    String jidString=jid.toString();
    final UUID leaderSessionID=UUID.randomUUID();
    final ActorRef jm=actorSystem.actorOf(Props.create(CliJobManager.class,jid,leaderSessionID));
    final ActorGateway gateway=new AkkaActorGateway(jm,leaderSessionID);
    String[] parameters={jidString};
    StopTestCliFrontend testFrontend=new StopTestCliFrontend(gateway);
    int retCode=testFrontend.stop(parameters);
    assertTrue(retCode == 0);
  }
{
    JobID jid1=new JobID();
    JobID jid2=new JobID();
    final UUID leaderSessionID=UUID.randomUUID();
    final ActorRef jm=actorSystem.actorOf(Props.create(CliJobManager.class,jid1,leaderSessionID));
    final ActorGateway gateway=new AkkaActorGateway(jm,leaderSessionID);
    String[] parameters={jid2.toString()};
    StopTestCliFrontend testFrontend=new StopTestCliFrontend(gateway);
    assertTrue(testFrontend.stop(parameters) != 0);
  }
}
