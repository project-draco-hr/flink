{
  try {
    final int PAIRS=50000000;
    final RandomIntPairGenerator generator=new RandomIntPairGenerator(12345678,PAIRS);
    final TypeSerializerFactory<IntPair> serializerFactory=new IntPairSerializer.IntPairSerializerFactory();
    final TypeComparator<IntPair> comparator=new IntPairComparator();
    LOG.debug("Initializing sortmerger...");
    Sorter<IntPair> merger=new UnilateralSortMerger<IntPair>(this.memoryManager,this.ioManager,generator,this.parentTask,serializerFactory,comparator,(double)64 / 78,4,0.7f);
    LOG.debug("Emitting data...");
    MutableObjectIterator<IntPair> iterator=merger.getIterator();
    LOG.debug("Checking results...");
    int pairsRead=1;
    int nextStep=PAIRS / 20;
    IntPair rec1=new IntPair();
    IntPair rec2=new IntPair();
    Assert.assertTrue((rec1=iterator.next(rec1)) != null);
    while ((rec2=iterator.next(rec2)) != null) {
      final int k1=rec1.getKey();
      final int k2=rec2.getKey();
      pairsRead++;
      Assert.assertTrue(k1 - k2 <= 0);
      IntPair tmp=rec1;
      rec1=rec2;
      rec2=tmp;
      if (pairsRead == nextStep) {
        nextStep+=PAIRS / 20;
      }
    }
    Assert.assertEquals("Not all pairs were read back in.",PAIRS,pairsRead);
    merger.close();
  }
 catch (  Exception e) {
    failed=true;
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
