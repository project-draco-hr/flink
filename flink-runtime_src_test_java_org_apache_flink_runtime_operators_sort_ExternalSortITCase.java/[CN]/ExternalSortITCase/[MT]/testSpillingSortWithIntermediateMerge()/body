{
  try {
    final int PAIRS=10000000;
    final TypeComparator<Integer> keyComparator=new IntComparator(true);
    final TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.FIX_LENGTH);
    final MutableObjectIterator<Tuple2<Integer,String>> source=new TestData.TupleGeneratorIterator(generator,PAIRS);
    LOG.debug("Initializing sortmerger...");
    Sorter<Tuple2<Integer,String>> merger=new UnilateralSortMerger<>(this.memoryManager,this.ioManager,source,this.parentTask,this.pactRecordSerializer,this.pactRecordComparator,(double)64 / 78,16,0.7f,false);
    LOG.debug("Emitting data...");
    MutableObjectIterator<Tuple2<Integer,String>> iterator=merger.getIterator();
    LOG.debug("Checking results...");
    int pairsRead=1;
    int nextStep=PAIRS / 20;
    Tuple2<Integer,String> rec1=new Tuple2<>();
    Tuple2<Integer,String> rec2=new Tuple2<>();
    Assert.assertTrue((rec1=iterator.next(rec1)) != null);
    while ((rec2=iterator.next(rec2)) != null) {
      pairsRead++;
      Assert.assertTrue(keyComparator.compare(rec1.f0,rec2.f0) <= 0);
      Tuple2<Integer,String> tmp=rec1;
      rec1=rec2;
      rec2=tmp;
      if (pairsRead == nextStep) {
        nextStep+=PAIRS / 20;
      }
    }
    Assert.assertEquals("Not all pairs were read back in.",PAIRS,pairsRead);
    merger.close();
    testSuccess=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
