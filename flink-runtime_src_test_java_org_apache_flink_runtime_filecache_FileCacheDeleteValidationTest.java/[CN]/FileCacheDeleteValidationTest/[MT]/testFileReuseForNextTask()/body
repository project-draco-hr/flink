{
  try {
    final JobID jobID=new JobID();
    final String fileName="test_file";
    final String filePath=f.toURI().toString();
    Future<Path> copyResult=fileCache.createTmpFile(fileName,new DistributedCacheEntry(filePath,false),jobID);
    copyResult.get();
    Future<Path> copyResult2=fileCache.createTmpFile(fileName,new DistributedCacheEntry(filePath,false),jobID);
    assertTrue(copyResult2.isDone());
    fileCache.deleteTmpFile(fileName,jobID);
    assertTrue(fileCache.holdsStillReference(fileName,jobID));
    fileCache.deleteTmpFile(fileName,jobID);
    assertTrue(fileCache.holdsStillReference(fileName,jobID));
    fileCache.createTmpFile(fileName,new DistributedCacheEntry(filePath,false),jobID);
    fileCache.deleteTmpFile(fileName,jobID);
    long deadline=System.currentTimeMillis() + 20000;
    do {
      Thread.sleep(5500);
    }
 while (fileCache.holdsStillReference(fileName,jobID) && System.currentTimeMillis() < deadline);
    assertFalse(fileCache.holdsStillReference(fileName,jobID));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
