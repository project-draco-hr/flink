{
  Collection<W> elementWindows=windowAssigner.assignWindows(element.getValue(),element.getTimestamp(),windowAssignerContext);
  final K key=(K)getKeyedStateBackend().getCurrentKey();
  if (windowAssigner instanceof MergingWindowAssigner) {
    MergingWindowSet<W> mergingWindows=getMergingWindowSet();
    for (    W window : elementWindows) {
      final Tuple1<TriggerResult> mergeTriggerResult=new Tuple1<>(TriggerResult.CONTINUE);
      W actualWindow=mergingWindows.addWindow(window,new MergingWindowSet.MergeFunction<W>(){
        @Override public void merge(        W mergeResult,        Collection<W> mergedWindows,        W stateWindowResult,        Collection<W> mergedStateWindows) throws Exception {
          context.key=key;
          context.window=mergeResult;
          mergeTriggerResult.f0=context.onMerge(mergedWindows);
          for (          W m : mergedWindows) {
            context.window=m;
            context.clear();
            deleteCleanupTimer(m);
          }
          getKeyedStateBackend().mergePartitionedStates(stateWindowResult,mergedStateWindows,windowSerializer,(StateDescriptor<? extends MergingState<?,?>,?>)windowStateDescriptor);
        }
      }
);
      if (isLate(actualWindow)) {
        mergingWindows.retireWindow(actualWindow);
        continue;
      }
      W stateWindow=mergingWindows.getStateWindow(actualWindow);
      if (stateWindow == null) {
        throw new IllegalStateException("Window " + window + " is not in in-flight window set.");
      }
      AppendingState<IN,ACC> windowState=getPartitionedState(stateWindow,windowSerializer,windowStateDescriptor);
      windowState.add(element.getValue());
      context.key=key;
      context.window=actualWindow;
      TriggerResult triggerResult=context.onElement(element);
      TriggerResult combinedTriggerResult=TriggerResult.merge(triggerResult,mergeTriggerResult.f0);
      if (combinedTriggerResult.isFire()) {
        ACC contents=windowState.get();
        if (contents == null) {
          continue;
        }
        fire(actualWindow,contents);
      }
      if (combinedTriggerResult.isPurge()) {
        cleanup(actualWindow,windowState,mergingWindows);
      }
 else {
        registerCleanupTimer(actualWindow);
      }
    }
  }
 else {
    for (    W window : elementWindows) {
      if (isLate(window)) {
        continue;
      }
      AppendingState<IN,ACC> windowState=getPartitionedState(window,windowSerializer,windowStateDescriptor);
      windowState.add(element.getValue());
      context.key=key;
      context.window=window;
      TriggerResult triggerResult=context.onElement(element);
      if (triggerResult.isFire()) {
        ACC contents=windowState.get();
        if (contents == null) {
          continue;
        }
        fire(window,contents);
      }
      if (triggerResult.isPurge()) {
        cleanup(window,windowState,null);
      }
 else {
        registerCleanupTimer(window);
      }
    }
  }
}
