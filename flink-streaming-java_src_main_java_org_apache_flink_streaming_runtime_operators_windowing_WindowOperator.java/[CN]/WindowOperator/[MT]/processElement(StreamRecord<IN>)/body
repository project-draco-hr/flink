{
  Collection<W> elementWindows=windowAssigner.assignWindows(element.getValue(),element.getTimestamp());
  K key=(K)getStateBackend().getCurrentKey();
  if (windowAssigner instanceof MergingWindowAssigner) {
    MergingWindowSet<W> mergingWindows=mergingWindowsByKey.get(getStateBackend().getCurrentKey());
    if (mergingWindows == null) {
      mergingWindows=new MergingWindowSet<>((MergingWindowAssigner<? super IN,W>)windowAssigner);
      mergingWindowsByKey.put(key,mergingWindows);
    }
    for (    W window : elementWindows) {
      final Tuple1<TriggerResult> mergeTriggerResult=new Tuple1<>(TriggerResult.CONTINUE);
      W actualWindow=mergingWindows.addWindow(window,new MergingWindowSet.MergeFunction<W>(){
        @Override public void merge(        W mergeResult,        Collection<W> mergedWindows,        W stateWindowResult,        Collection<W> mergedStateWindows) throws Exception {
          context.window=mergeResult;
          mergeTriggerResult.f0=context.onMerge(mergedWindows);
          for (          W m : mergedWindows) {
            context.window=m;
            context.clear();
          }
          getStateBackend().mergePartitionedStates(stateWindowResult,mergedStateWindows,windowSerializer,(StateDescriptor<? extends MergingState<?,?>,?>)windowStateDescriptor);
        }
      }
);
      W stateWindow=mergingWindows.getStateWindow(actualWindow);
      AppendingState<IN,ACC> windowState=getPartitionedState(stateWindow,windowSerializer,windowStateDescriptor);
      windowState.add(element.getValue());
      context.key=key;
      context.window=actualWindow;
      TriggerResult triggerResult=context.onElement(element);
      TriggerResult combinedTriggerResult=TriggerResult.merge(triggerResult,mergeTriggerResult.f0);
      processTriggerResult(combinedTriggerResult,key,actualWindow);
    }
  }
 else {
    for (    W window : elementWindows) {
      AppendingState<IN,ACC> windowState=getPartitionedState(window,windowSerializer,windowStateDescriptor);
      windowState.add(element.getValue());
      context.key=key;
      context.window=window;
      TriggerResult triggerResult=context.onElement(element);
      processTriggerResult(triggerResult,key,window);
    }
  }
}
