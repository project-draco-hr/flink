{
  Collection<W> elementWindows=windowAssigner.assignWindows(element.getValue(),element.getTimestamp(),windowAssignerContext);
  final K key=(K)getStateBackend().getCurrentKey();
  if (windowAssigner instanceof MergingWindowAssigner) {
    MergingWindowSet<W> mergingWindows=getMergingWindowSet();
    for (    W window : elementWindows) {
      final Tuple1<TriggerResult> mergeTriggerResult=new Tuple1<>(TriggerResult.CONTINUE);
      W actualWindow=mergingWindows.addWindow(window,new MergingWindowSet.MergeFunction<W>(){
        @Override public void merge(        W mergeResult,        Collection<W> mergedWindows,        W stateWindowResult,        Collection<W> mergedStateWindows) throws Exception {
          context.key=key;
          context.window=mergeResult;
          mergeTriggerResult.f0=context.onMerge(mergedWindows);
          for (          W m : mergedWindows) {
            context.window=m;
            context.clear();
            deleteCleanupTimer(m);
          }
          getStateBackend().mergePartitionedStates(stateWindowResult,mergedStateWindows,windowSerializer,(StateDescriptor<? extends MergingState<?,?>,?>)windowStateDescriptor);
        }
      }
);
      if (isLate(actualWindow)) {
        LOG.info("Dropped element " + element + " for window "+ actualWindow+ " due to lateness.");
        mergingWindows.retireWindow(actualWindow);
        continue;
      }
      W stateWindow=mergingWindows.getStateWindow(actualWindow);
      AppendingState<IN,ACC> windowState=getPartitionedState(stateWindow,windowSerializer,windowStateDescriptor);
      windowState.add(element.getValue());
      context.key=key;
      context.window=actualWindow;
      TriggerResult triggerResult=context.onElement(element);
      TriggerResult combinedTriggerResult=TriggerResult.merge(triggerResult,mergeTriggerResult.f0);
      fireOrContinue(combinedTriggerResult,actualWindow,windowState);
      if (combinedTriggerResult.isPurge()) {
        cleanup(actualWindow,windowState,mergingWindows);
      }
 else {
        registerCleanupTimer(actualWindow);
      }
    }
  }
 else {
    for (    W window : elementWindows) {
      if (isLate(window)) {
        LOG.info("Dropped element " + element + " for window "+ window+ " due to lateness.");
        continue;
      }
      AppendingState<IN,ACC> windowState=getPartitionedState(window,windowSerializer,windowStateDescriptor);
      windowState.add(element.getValue());
      context.key=key;
      context.window=window;
      TriggerResult triggerResult=context.onElement(element);
      fireOrContinue(triggerResult,window,windowState);
      if (triggerResult.isPurge()) {
        cleanup(window,windowState,null);
      }
 else {
        registerCleanupTimer(window);
      }
    }
  }
}
