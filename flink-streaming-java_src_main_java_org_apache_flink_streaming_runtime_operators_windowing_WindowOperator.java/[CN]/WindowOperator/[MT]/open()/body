{
  super.open();
  timestampedCollector=new TimestampedCollector<>(output);
  if (inputSerializer == null) {
    throw new IllegalStateException("Input serializer was not set.");
  }
  if (watermarkTimers == null) {
    watermarkTimers=new HashSet<>();
    watermarkTimersQueue=new PriorityQueue<>(100);
  }
  if (processingTimeTimers == null) {
    processingTimeTimers=new HashSet<>();
    processingTimeTimerTimestamps=HashMultiset.create();
    processingTimeTimersQueue=new PriorityQueue<>(100);
  }
  processingTimeTimerFutures=new HashMap<>();
  context=new Context(null,null);
  windowAssignerContext=new WindowAssignerContext(){
    @Override public long getCurrentProcessingTime(){
      return WindowOperator.this.getCurrentProcessingTime();
    }
  }
;
  if (windowAssigner instanceof MergingWindowAssigner) {
    mergingWindowsByKey=new HashMap<>();
  }
  currentWatermark=Long.MIN_VALUE;
}
