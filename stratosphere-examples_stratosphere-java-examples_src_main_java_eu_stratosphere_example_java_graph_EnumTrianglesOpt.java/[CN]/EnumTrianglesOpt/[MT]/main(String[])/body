{
  parseParameters(args);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Edge> edges=getEdgeDataSet(env);
  DataSet<EdgeWithDegrees> edgesWithDegrees=edges.flatMap(new EdgeDuplicator()).groupBy(Edge.V1).sortGroup(Edge.V2,Order.ASCENDING).reduceGroup(new DegreeCounter()).groupBy(EdgeWithDegrees.V1,EdgeWithDegrees.V2).reduce(new DegreeJoiner());
  DataSet<Edge> edgesByDegree=edgesWithDegrees.map(new EdgeByDegreeProjector());
  DataSet<Edge> edgesById=edgesByDegree.map(new EdgeByIdProjector());
  DataSet<Triad> triangles=edgesByDegree.groupBy(Edge.V1).sortGroup(Edge.V2,Order.ASCENDING).reduceGroup(new TriadBuilder()).join(edgesById).where(Triad.V2,Triad.V3).equalTo(Edge.V1,Edge.V2).with(new TriadFilter());
  if (fileOutput) {
    triangles.writeAsCsv(outputPath,"\n",",");
  }
 else {
    triangles.print();
  }
  env.execute("Triangle Enumeration Example");
}
