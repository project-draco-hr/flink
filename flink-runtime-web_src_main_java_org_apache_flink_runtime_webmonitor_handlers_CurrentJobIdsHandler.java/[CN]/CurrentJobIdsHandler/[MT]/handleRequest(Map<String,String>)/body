{
  try {
    Future<Object> future=target.ask(RequestJobsWithIDsOverview.getInstance(),timeout);
    JobsWithIDsOverview overview=(JobsWithIDsOverview)Await.result(future,timeout);
    StringWriter writer=new StringWriter();
    JsonGenerator gen=JsonFactory.jacksonFactory.createJsonGenerator(writer);
    gen.writeStartObject();
    gen.writeArrayFieldStart("jobs-running");
    for (    JobID jid : overview.getJobsRunningOrPending()) {
      gen.writeString(jid.toString());
    }
    gen.writeEndArray();
    gen.writeArrayFieldStart("jobs-finished");
    for (    JobID jid : overview.getJobsFinished()) {
      gen.writeString(jid.toString());
    }
    gen.writeEndArray();
    gen.writeArrayFieldStart("jobs-cancelled");
    for (    JobID jid : overview.getJobsCancelled()) {
      gen.writeString(jid.toString());
    }
    gen.writeEndArray();
    gen.writeArrayFieldStart("jobs-failed");
    for (    JobID jid : overview.getJobsFailed()) {
      gen.writeString(jid.toString());
    }
    gen.writeEndArray();
    gen.writeEndObject();
    gen.close();
    return writer.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to fetch list of all running jobs: " + e.getMessage(),e);
  }
}
