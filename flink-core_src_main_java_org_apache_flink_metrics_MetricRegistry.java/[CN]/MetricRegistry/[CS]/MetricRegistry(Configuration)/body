{
  ScopeFormats scopeFormats;
  try {
    scopeFormats=createScopeConfig(config);
  }
 catch (  Exception e) {
    LOG.warn("Failed to parse scope format, using default scope formats",e);
    scopeFormats=new ScopeFormats();
  }
  this.scopeFormats=scopeFormats;
  char delim;
  try {
    delim=config.getString(ConfigConstants.METRICS_SCOPE_DELIMITER,".").charAt(0);
  }
 catch (  Exception e) {
    LOG.warn("Failed to parse delimiter, using default delimiter.",e);
    delim='.';
  }
  this.delimiter=delim;
  final String className=config.getString(ConfigConstants.METRICS_REPORTER_CLASS,null);
  if (className == null) {
    LOG.info("No metrics reporter configured, no metrics will be exposed/reported.");
    this.reporter=null;
    this.executor=null;
  }
 else {
    MetricReporter reporter;
    ScheduledExecutorService executor=null;
    try {
      String configuredPeriod=config.getString(ConfigConstants.METRICS_REPORTER_INTERVAL,null);
      TimeUnit timeunit=TimeUnit.SECONDS;
      long period=10;
      if (configuredPeriod != null) {
        try {
          String[] interval=configuredPeriod.split(" ");
          period=Long.parseLong(interval[0]);
          timeunit=TimeUnit.valueOf(interval[1]);
        }
 catch (        Exception e) {
          LOG.error("Cannot parse report interval from config: " + configuredPeriod + " - please use values like '10 SECONDS' or '500 MILLISECONDS'. "+ "Using default reporting interval.");
        }
      }
      Configuration reporterConfig=createReporterConfig(config,timeunit,period);
      Class<?> reporterClass=Class.forName(className);
      reporter=(MetricReporter)reporterClass.newInstance();
      reporter.open(reporterConfig);
      if (reporter instanceof Scheduled) {
        executor=Executors.newSingleThreadScheduledExecutor();
        LOG.info("Periodically reporting metrics in intervals of {} {}",period,timeunit.name());
        executor.scheduleWithFixedDelay(new ReporterTask((Scheduled)reporter),period,period,timeunit);
      }
    }
 catch (    Throwable t) {
      shutdownExecutor();
      LOG.error("Could not instantiate metrics reporter. No metrics will be exposed/reported.",t);
      reporter=null;
    }
    this.reporter=reporter;
    this.executor=executor;
  }
}
