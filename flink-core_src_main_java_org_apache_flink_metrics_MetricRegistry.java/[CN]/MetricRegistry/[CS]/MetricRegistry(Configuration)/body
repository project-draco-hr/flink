{
  ScopeFormats scopeFormats;
  try {
    scopeFormats=createScopeConfig(config);
  }
 catch (  Exception e) {
    LOG.warn("Failed to parse scopeName format, using default scopeName formats",e);
    scopeFormats=new ScopeFormats();
  }
  this.scopeFormats=scopeFormats;
  final String className=config.getString(KEY_METRICS_REPORTER_CLASS,null);
  if (className == null) {
    LOG.info("No metrics reporter configured, exposing metrics via JMX");
    this.reporter=new JMXReporter();
    this.timer=null;
  }
 else {
    MetricReporter reporter;
    java.util.Timer timer;
    try {
      String configuredPeriod=config.getString(KEY_METRICS_REPORTER_INTERVAL,null);
      TimeUnit timeunit=TimeUnit.SECONDS;
      long period=10;
      if (configuredPeriod != null) {
        try {
          String[] interval=configuredPeriod.split(" ");
          period=Long.parseLong(interval[0]);
          timeunit=TimeUnit.valueOf(interval[1]);
        }
 catch (        Exception e) {
          LOG.error("Cannot parse report interval from config: " + configuredPeriod + " - please use values like '10 SECONDS' or '500 MILLISECONDS'. "+ "Using default reporting interval.");
        }
      }
      Configuration reporterConfig=createReporterConfig(config,timeunit,period);
      Class<?> reporterClass=Class.forName(className);
      reporter=(MetricReporter)reporterClass.newInstance();
      reporter.open(reporterConfig);
      if (reporter instanceof Scheduled) {
        LOG.info("Periodically reporting metrics in intervals of {} {}",period,timeunit.name());
        long millis=timeunit.toMillis(period);
        timer=new java.util.Timer("Periodic Metrics Reporter",true);
        timer.schedule(new ReporterTask((Scheduled)reporter),millis,millis);
      }
 else {
        timer=null;
      }
    }
 catch (    Throwable t) {
      reporter=new JMXReporter();
      timer=null;
      LOG.error("Could not instantiate custom metrics reporter. Defaulting to JMX metrics export.",t);
    }
    this.reporter=reporter;
    this.timer=timer;
  }
}
