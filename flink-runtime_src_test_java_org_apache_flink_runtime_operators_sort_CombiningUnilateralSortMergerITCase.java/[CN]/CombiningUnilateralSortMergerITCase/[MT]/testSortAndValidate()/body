{
  final Hashtable<Integer,Integer> countTable=new Hashtable<>(KEY_MAX);
  for (int i=1; i <= KEY_MAX; i++) {
    countTable.put(i,0);
  }
  final TypeComparator<Integer> keyComparator=new IntComparator(true);
  TestData.MockTuple2Reader<Tuple2<Integer,String>> reader=TestData.getIntStringTupleReader();
  LOG.debug("initializing sortmerger");
  TestCountCombiner2 comb=new TestCountCombiner2();
  Sorter<Tuple2<Integer,String>> merger=new CombiningUnilateralSortMerger<>(comb,this.memoryManager,this.ioManager,reader,this.parentTask,this.serializerFactory1,this.comparator1,0.25,2,0.7f,true,false);
  LOG.debug("emitting data");
  TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.FIX_LENGTH);
  Tuple2<Integer,String> rec=new Tuple2<>();
  for (int i=0; i < NUM_PAIRS; i++) {
    Assert.assertTrue((rec=generator.next(rec)) != null);
    final Integer key=rec.f0;
    rec.setField("1",1);
    reader.emit(rec);
    countTable.put(key,countTable.get(key) + 1);
  }
  reader.close();
  MutableObjectIterator<Tuple2<Integer,String>> iterator=merger.getIterator();
  LOG.debug("checking results");
  Tuple2<Integer,String> rec1=new Tuple2<>();
  Tuple2<Integer,String> rec2=new Tuple2<>();
  Assert.assertTrue((rec1=iterator.next(rec1)) != null);
  countTable.put(rec1.f0,countTable.get(rec1.f0) - (Integer.parseInt(rec1.f1)));
  while ((rec2=iterator.next(rec2)) != null) {
    int k1=rec1.f0;
    int k2=rec2.f0;
    Assert.assertTrue(keyComparator.compare(k1,k2) <= 0);
    countTable.put(k2,countTable.get(k2) - (Integer.parseInt(rec2.f1)));
    rec1=rec2;
  }
  for (  Integer cnt : countTable.values()) {
    Assert.assertTrue(cnt == 0);
  }
  merger.close();
  Assert.assertTrue(comb.opened == comb.closed);
}
