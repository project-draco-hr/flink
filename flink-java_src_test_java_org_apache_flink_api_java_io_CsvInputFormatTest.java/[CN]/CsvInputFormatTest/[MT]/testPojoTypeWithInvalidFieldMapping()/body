{
  File tempFile=File.createTempFile("CsvReaderPojoType","tmp");
  tempFile.deleteOnExit();
  tempFile.setWritable(true);
  @SuppressWarnings("unchecked") TypeInformation<PojoItem> typeInfo=(TypeInformation<PojoItem>)TypeExtractor.createTypeInfo(PojoItem.class);
  CsvInputFormat<PojoItem> inputFormat=new CsvInputFormat<PojoItem>(new Path(tempFile.toURI().toString()),typeInfo);
  try {
    inputFormat.setOrderOfPOJOFields(new String[]{"field1","field2"});
    fail("The number of POJO fields cannot be same as that of selected CSV fields");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    inputFormat.setOrderOfPOJOFields(new String[]{"field1","field2",null,"field4"});
    fail("Fields mapping cannot contain null.");
  }
 catch (  NullPointerException e) {
  }
  try {
    inputFormat.setOrderOfPOJOFields(new String[]{"field1","field2","field3","field5"});
    fail("Invalid field name");
  }
 catch (  IllegalArgumentException e) {
  }
}
