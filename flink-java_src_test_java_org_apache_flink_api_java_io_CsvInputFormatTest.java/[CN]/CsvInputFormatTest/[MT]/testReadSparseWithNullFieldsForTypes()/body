{
  try {
    final String fileContent="111|x|222|x|333|x|444|x|555|x|666|x|777|x|888|x|999|x|000|x|\n" + "000|x|999|x|888|x|777|x|666|x|555|x|444|x|333|x|222|x|111|x|";
    final FileInputSplit split=createTempFile(fileContent);
    final TupleTypeInfo<Tuple3<Integer,Integer,Integer>> typeInfo=TupleTypeInfo.getBasicTupleTypeInfo(Integer.class,Integer.class,Integer.class);
    final CsvInputFormat<Tuple3<Integer,Integer,Integer>> format=new TupleCsvInputFormat<Tuple3<Integer,Integer,Integer>>(PATH,typeInfo,new boolean[]{true,false,false,true,false,false,false,true});
    format.setFieldDelimiter("|x|");
    format.configure(new Configuration());
    format.open(split);
    Tuple3<Integer,Integer,Integer> result=new Tuple3<Integer,Integer,Integer>();
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals(Integer.valueOf(111),result.f0);
    assertEquals(Integer.valueOf(444),result.f1);
    assertEquals(Integer.valueOf(888),result.f2);
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals(Integer.valueOf(000),result.f0);
    assertEquals(Integer.valueOf(777),result.f1);
    assertEquals(Integer.valueOf(333),result.f2);
    result=format.nextRecord(result);
    assertNull(result);
    assertTrue(format.reachedEnd());
  }
 catch (  Exception ex) {
    fail("Test failed due to a " + ex.getClass().getName() + ": "+ ex.getMessage());
  }
}
