{
  try {
    final String fileContent="11.1|22.2|33.3|44.4|55.5\n66.6|77.7|88.8|99.9|00.0|\n";
    final FileInputSplit split=createTempFile(fileContent);
    final TupleTypeInfo<Tuple5<Double,Double,Double,Double,Double>> typeInfo=TupleTypeInfo.getBasicTupleTypeInfo(Double.class,Double.class,Double.class,Double.class,Double.class);
    final CsvInputFormat<Tuple5<Double,Double,Double,Double,Double>> format=new TupleCsvInputFormat<Tuple5<Double,Double,Double,Double,Double>>(PATH,typeInfo);
    format.setFieldDelimiter("|");
    format.configure(new Configuration());
    format.open(split);
    Tuple5<Double,Double,Double,Double,Double> result=new Tuple5<Double,Double,Double,Double,Double>();
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals(Double.valueOf(11.1),result.f0);
    assertEquals(Double.valueOf(22.2),result.f1);
    assertEquals(Double.valueOf(33.3),result.f2);
    assertEquals(Double.valueOf(44.4),result.f3);
    assertEquals(Double.valueOf(55.5),result.f4);
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals(Double.valueOf(66.6),result.f0);
    assertEquals(Double.valueOf(77.7),result.f1);
    assertEquals(Double.valueOf(88.8),result.f2);
    assertEquals(Double.valueOf(99.9),result.f3);
    assertEquals(Double.valueOf(00.0),result.f4);
    result=format.nextRecord(result);
    assertNull(result);
    assertTrue(format.reachedEnd());
  }
 catch (  Exception ex) {
    fail("Test failed due to a " + ex.getClass().getName() + ": "+ ex.getMessage());
  }
}
