{
  try {
    final String fileContent="111&&222&&333&&444&&555&&666&&777&&888&&999&&000&&\n" + "000&&999&&888&&777&&666&&555&&444&&333&&222&&111&&";
    final FileInputSplit split=createTempFile(fileContent);
    final TupleTypeInfo<Tuple3<Integer,Integer,Integer>> typeInfo=TupleTypeInfo.getBasicTupleTypeInfo(Integer.class,Integer.class,Integer.class);
    final CsvInputFormat<Tuple3<Integer,Integer,Integer>> format=new CsvInputFormat<Tuple3<Integer,Integer,Integer>>(PATH,typeInfo);
    format.setFieldDelimiter("&&");
    format.setFields(new boolean[]{true,false,false,true,false,false,false,true},new Class<?>[]{Integer.class,Integer.class,Integer.class});
    format.configure(new Configuration());
    format.open(split);
    Tuple3<Integer,Integer,Integer> result=new Tuple3<Integer,Integer,Integer>();
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals(Integer.valueOf(111),result.f0);
    assertEquals(Integer.valueOf(444),result.f1);
    assertEquals(Integer.valueOf(888),result.f2);
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals(Integer.valueOf(000),result.f0);
    assertEquals(Integer.valueOf(777),result.f1);
    assertEquals(Integer.valueOf(333),result.f2);
    result=format.nextRecord(result);
    assertNull(result);
    assertTrue(format.reachedEnd());
  }
 catch (  Exception ex) {
    fail("Test failed due to a " + ex.getClass().getName() + ": "+ ex.getMessage());
  }
}
