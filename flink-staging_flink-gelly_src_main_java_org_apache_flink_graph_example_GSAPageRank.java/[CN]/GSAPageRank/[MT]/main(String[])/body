{
  if (!parseParameters(args)) {
    return;
  }
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Edge<Long,Double>> links=getLinksDataSet(env);
  Graph<Long,Double,Double> network=Graph.fromDataSet(links,new MapFunction<Long,Double>(){
    @Override public Double map(    Long value) throws Exception {
      return 1.0;
    }
  }
,env);
  DataSet<Tuple2<Long,Long>> vertexOutDegrees=network.outDegrees();
  Graph<Long,Double,Double> networkWithWeights=network.joinWithEdgesOnSource(vertexOutDegrees,new MapFunction<Tuple2<Double,Long>,Double>(){
    @Override public Double map(    Tuple2<Double,Long> value){
      return value.f0 / value.f1;
    }
  }
);
  long numberOfVertices=networkWithWeights.numberOfVertices();
  Graph<Long,Double,Double> result=networkWithWeights.runGatherSumApplyIteration(new GatherRanks(numberOfVertices),new SumRanks(),new UpdateRanks(numberOfVertices),maxIterations);
  DataSet<Vertex<Long,Double>> pageRanks=result.getVertices();
  if (fileOutput) {
    pageRanks.writeAsCsv(outputPath,"\n","\t");
    env.execute("GSA Page Ranks");
  }
 else {
    pageRanks.print();
  }
}
