{
  try {
    final Future<Object> response=Patterns.ask(jobManager,new JobManagerMessages.RequestNextInputSplit(jobId,vertexId,executionID),new Timeout(timeout));
    final Object result=Await.result(response,timeout);
    if (result == null) {
      return null;
    }
    if (!(result instanceof TaskManagerMessages.NextInputSplit)) {
      throw new RuntimeException("RequestNextInputSplit requires a response of type " + "NextInputSplit. Instead response is of type " + result.getClass() + ".");
    }
 else {
      final TaskManagerMessages.NextInputSplit nextInputSplit=(TaskManagerMessages.NextInputSplit)result;
      byte[] serializedData=nextInputSplit.splitData();
      Object deserialized=InstantiationUtil.deserializeObject(serializedData,usercodeClassLoader);
      return (InputSplit)deserialized;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Requesting the next InputSplit failed.",e);
  }
}
