{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    @SuppressWarnings("unchecked") DataSet<Tuple3<Long,Long,Long>> input=env.fromElements(new Tuple3<Long,Long,Long>(0L,0L,0L));
    input.partitionByHash(0).map(new IdentityMapper<Tuple3<Long,Long,Long>>()).withConstantSet("0","1","2").groupBy(0,1).reduceGroup(new IdentityGroupReducer<Tuple3<Long,Long,Long>>()).withConstantSet("0","1","2").groupBy(0).reduceGroup(new IdentityGroupReducer<Tuple3<Long,Long,Long>>()).print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    SingleInputPlanNode reducer2=(SingleInputPlanNode)sink.getInput().getSource();
    SingleInputPlanNode reducer1=(SingleInputPlanNode)reducer2.getInput().getSource();
    assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy());
    assertEquals(ShipStrategyType.FORWARD,reducer2.getInput().getShipStrategy());
    assertEquals(LocalStrategy.NONE,reducer2.getInput().getLocalStrategy());
    assertEquals(ShipStrategyType.FORWARD,reducer1.getInput().getShipStrategy());
    assertEquals(LocalStrategy.COMBININGSORT,reducer1.getInput().getLocalStrategy());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
