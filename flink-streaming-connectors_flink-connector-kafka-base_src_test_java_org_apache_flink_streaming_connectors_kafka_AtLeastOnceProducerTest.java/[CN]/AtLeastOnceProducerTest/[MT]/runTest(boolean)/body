{
  Properties props=new Properties();
  final AtomicBoolean snapshottingFinished=new AtomicBoolean(false);
  final TestingKafkaProducer<String> producer=new TestingKafkaProducer<>("someTopic",new KeyedSerializationSchemaWrapper<>(new SimpleStringSchema()),props,snapshottingFinished);
  producer.setFlushOnCheckpoint(flushOnCheckpoint);
  producer.setRuntimeContext(new MockRuntimeContext(0,1));
  producer.open(new Configuration());
  for (int i=0; i < 100; i++) {
    producer.invoke("msg-" + i);
  }
  final Tuple1<Throwable> runnableError=new Tuple1<>(null);
  final Thread threadA=Thread.currentThread();
  Runnable confirmer=new Runnable(){
    @Override public void run(){
      try {
        MockProducer mp=producer.getProducerInstance();
        List<Callback> pending=mp.getPending();
synchronized (threadA) {
          threadA.wait(500L);
        }
        Assert.assertEquals(100,pending.size());
        Assert.assertFalse("Snapshot method returned before all records were confirmed",snapshottingFinished.get());
        for (        Callback c : pending) {
          c.onCompletion(null,null);
        }
        pending.clear();
      }
 catch (      Throwable t) {
        runnableError.f0=t;
      }
    }
  }
;
  Thread threadB=new Thread(confirmer);
  threadB.start();
  producer.snapshotState(0,0);
synchronized (threadA) {
    threadA.notifyAll();
  }
  Assert.assertEquals(0,producer.getProducerInstance().getPending().size());
  Deadline deadline=FiniteDuration.apply(5,"s").fromNow();
  while (deadline.hasTimeLeft() && threadB.isAlive()) {
    threadB.join(500);
  }
  Assert.assertFalse("Thread A is expected to be finished at this point. If not, the test is prone to fail",threadB.isAlive());
  if (runnableError.f0 != null) {
    throw runnableError.f0;
  }
  producer.close();
}
