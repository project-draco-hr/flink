{
  JobID jid=graph.getJobID();
  String name=graph.getJobName();
  long startTime=graph.getStatusTimestamp(JobStatus.CREATED);
  long endTime=graph.getState().isTerminalState() ? graph.getStatusTimestamp(graph.getState()) : -1;
  long duration=endTime == -1 ? System.currentTimeMillis() - startTime : endTime - startTime;
  String startTimeString;
  String endTimeTimeString;
  String durationString=duration + " msecs";
synchronized (dateFormatter) {
    startTimeString=dateFormatter.format(new Date(startTime));
    endTimeTimeString=endTime == -1 ? "(pending)" : dateFormatter.format(new Date(endTime));
  }
  String status=graph.getState().name();
  int pending=0;
  int running=0;
  int finished=0;
  int canceling=0;
  int canceled=0;
  int failed=0;
  for (  ExecutionJobVertex vertex : graph.getVerticesTopologically()) {
    ExecutionState aggState=vertex.getAggregateState();
switch (aggState) {
case FINISHED:
      finished++;
    break;
case FAILED:
  failed++;
break;
case CANCELED:
canceled++;
break;
case RUNNING:
running++;
break;
case CANCELING:
canceling++;
break;
default :
pending++;
}
}
int total=pending + running + finished+ canceling+ canceled+ failed;
return JsonFactory.createJobSummaryJSON(jid,name,status,startTimeString,endTimeTimeString,durationString,total,pending,running,finished,canceling,canceled,failed);
}
