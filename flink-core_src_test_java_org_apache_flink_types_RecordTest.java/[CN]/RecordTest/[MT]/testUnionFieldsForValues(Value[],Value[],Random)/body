{
  Record rec1=createRecord(rec1fields);
  Record rec2=createRecord(rec2fields);
  rec1.updateBinaryRepresenation();
  rec2.updateBinaryRepresenation();
  rec1.unionFields(rec2);
  checkUnionedRecord(rec1,rec1fields,rec2fields);
  rec1=createRecord(rec1fields);
  rec2=createRecord(rec2fields);
  rec1.unionFields(rec2);
  checkUnionedRecord(rec1,rec1fields,rec2fields);
  rec1=createRecord(rec1fields);
  rec2=createRecord(rec2fields);
  rec1.updateBinaryRepresenation();
  rec1.unionFields(rec2);
  checkUnionedRecord(rec1,rec1fields,rec2fields);
  rec1=createRecord(rec1fields);
  rec2=createRecord(rec2fields);
  rec2.updateBinaryRepresenation();
  rec1.unionFields(rec2);
  checkUnionedRecord(rec1,rec1fields,rec2fields);
  rec1=new Record();
  int[] permutation1=createPermutation(rnd,rec1fields.length);
  int[] permutation2=createPermutation(rnd,rec2fields.length);
  int updatePos=rnd.nextInt(rec1fields.length + 1);
  for (int i=0; i < rec1fields.length; i++) {
    if (i == updatePos) {
      rec1.updateBinaryRepresenation();
    }
    final int pos=permutation1[i];
    rec1.setField(pos,rec1fields[pos]);
  }
  if (updatePos == rec1fields.length) {
    rec1.updateBinaryRepresenation();
  }
  updatePos=rnd.nextInt(rec2fields.length + 1);
  for (int i=0; i < rec2fields.length; i++) {
    if (i == updatePos) {
      rec2.updateBinaryRepresenation();
    }
    final int pos=permutation2[i];
    rec2.setField(pos,rec2fields[pos]);
  }
  if (updatePos == rec2fields.length) {
    rec2.updateBinaryRepresenation();
  }
  rec1.unionFields(rec2);
  checkUnionedRecord(rec1,rec1fields,rec2fields);
}
