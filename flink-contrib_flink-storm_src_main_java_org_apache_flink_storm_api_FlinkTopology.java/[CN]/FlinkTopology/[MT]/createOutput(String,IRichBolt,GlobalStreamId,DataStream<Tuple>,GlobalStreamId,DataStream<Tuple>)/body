{
  assert(boltId != null);
  assert(streamId != null);
  assert(inputStream != null);
  Preconditions.checkArgument((streamId2 == null) == (inputStream2 == null));
  String producerId=streamId.get_componentId();
  String inputStreamId=streamId.get_streamId();
  final HashMap<String,Fields> boltOutputs=this.outputStreams.get(boltId);
  final FlinkOutputFieldsDeclarer declarer=declarers.get(boltId);
  final SingleOutputStreamOperator<?,?> outputStream;
  if (boltOutputs.size() < 2) {
    String outputStreamId;
    if (boltOutputs.size() == 1) {
      outputStreamId=(String)boltOutputs.keySet().toArray()[0];
    }
 else {
      outputStreamId=null;
    }
    final TypeInformation<Tuple> outType=declarer.getOutputType(outputStreamId);
    final SingleOutputStreamOperator<Tuple,?> outStream;
    if (streamId2 == null) {
      BoltWrapper<Tuple,Tuple> boltWrapper=new BoltWrapper<>(bolt,boltId,producerId,inputStreamId,this.outputStreams.get(producerId).get(inputStreamId),null);
      boltWrapper.setStormTopology(stormTopology);
      outStream=inputStream.transform(boltId,outType,boltWrapper);
    }
 else {
      String producerId2=streamId2.get_componentId();
      String inputStreamId2=streamId2.get_streamId();
      final BoltWrapperTwoInput<Tuple,Tuple,Tuple> boltWrapper=new BoltWrapperTwoInput<>(bolt,boltId,inputStreamId,inputStreamId2,producerId,producerId2,this.outputStreams.get(producerId).get(inputStreamId),this.outputStreams.get(producerId2).get(inputStreamId2));
      boltWrapper.setStormTopology(stormTopology);
      outStream=inputStream.connect(inputStream2).transform(boltId,outType,boltWrapper);
    }
    if (outType != null) {
      final HashMap<String,DataStream<Tuple>> op=new HashMap<>();
      op.put(outputStreamId,outStream);
      availableInputs.put(boltId,op);
    }
    outputStream=outStream;
  }
 else {
    @SuppressWarnings({"unchecked","rawtypes"}) final TypeInformation<SplitStreamType<Tuple>> outType=(TypeInformation)TypeExtractor.getForClass(SplitStreamType.class);
    final SingleOutputStreamOperator<SplitStreamType<Tuple>,?> multiStream;
    if (streamId2 == null) {
      final BoltWrapper<Tuple,SplitStreamType<Tuple>> boltWrapperMultipleOutputs=new BoltWrapper<>(bolt,boltId,inputStreamId,producerId,this.outputStreams.get(producerId).get(inputStreamId),null);
      boltWrapperMultipleOutputs.setStormTopology(stormTopology);
      multiStream=inputStream.transform(boltId,outType,boltWrapperMultipleOutputs);
    }
 else {
      String producerId2=streamId2.get_componentId();
      String inputStreamId2=streamId2.get_streamId();
      final BoltWrapperTwoInput<Tuple,Tuple,SplitStreamType<Tuple>> boltWrapper=new BoltWrapperTwoInput<>(bolt,boltId,inputStreamId,inputStreamId2,producerId,producerId2,this.outputStreams.get(producerId).get(inputStreamId),this.outputStreams.get(producerId2).get(inputStreamId2));
      boltWrapper.setStormTopology(stormTopology);
      multiStream=inputStream.connect(inputStream2).transform(boltId,outType,boltWrapper);
    }
    final SplitStream<SplitStreamType<Tuple>> splitStream=multiStream.split(new StormStreamSelector<Tuple>());
    final HashMap<String,DataStream<Tuple>> op=new HashMap<>();
    for (    String outputStreamId : boltOutputs.keySet()) {
      op.put(outputStreamId,splitStream.select(outputStreamId).map(new SplitStreamMapper<Tuple>()));
      SingleOutputStreamOperator<Tuple,?> outStream=splitStream.select(outputStreamId).map(new SplitStreamMapper<Tuple>());
      outStream.getTransformation().setOutputType(declarer.getOutputType(outputStreamId));
      op.put(outputStreamId,outStream);
    }
    availableInputs.put(boltId,op);
    outputStream=multiStream;
  }
  return outputStream;
}
