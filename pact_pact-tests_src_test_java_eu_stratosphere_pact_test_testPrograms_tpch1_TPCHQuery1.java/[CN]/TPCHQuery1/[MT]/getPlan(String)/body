{
  if (args.length != 3) {
    this.degreeOfParallelism=1;
    this.lineItemInputPath="";
    this.outputPath="";
  }
 else {
    this.degreeOfParallelism=Integer.parseInt(args[0]);
    this.lineItemInputPath=args[1];
    this.outputPath=args[2];
  }
  FileDataSourceContract<PactInteger,Tuple> lineItems=new FileDataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,this.lineItemInputPath,"LineItems");
  lineItems.setDegreeOfParallelism(this.degreeOfParallelism);
  FileDataSinkContract<PactString,Tuple> result=new FileDataSinkContract<PactString,Tuple>(StringTupleDataOutFormat.class,this.outputPath,"Output");
  result.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract<PactInteger,Tuple,PactString,Tuple> lineItemFilter=new MapContract<PactInteger,Tuple,PactString,Tuple>(LineItemFilter.class,"LineItem Filter");
  lineItemFilter.setDegreeOfParallelism(this.degreeOfParallelism);
  ReduceContract<PactString,Tuple,PactString,Tuple> groupByReturnFlag=new ReduceContract<PactString,Tuple,PactString,Tuple>(GroupByReturnFlag.class,"groupyBy");
  lineItemFilter.addInput(lineItems);
  groupByReturnFlag.addInput(lineItemFilter);
  result.addInput(groupByReturnFlag);
  return new Plan(result,"TPC-H 1");
}
