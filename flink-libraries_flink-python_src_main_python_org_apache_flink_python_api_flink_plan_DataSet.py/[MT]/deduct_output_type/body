def deduct_output_type(dataset):
    skip = set([_Identifier.GROUP, _Identifier.SORT, _Identifier.UNION])
    source = set([_Identifier.SOURCE_CSV, _Identifier.SOURCE_TEXT, _Identifier.SOURCE_VALUE])
    default = set([_Identifier.CROSS, _Identifier.CROSSH, _Identifier.CROSST, _Identifier.JOINT, _Identifier.JOINH, _Identifier.JOIN])
    while True:
        dataset_type = dataset.identifier
        if (dataset_type in skip):
            dataset = dataset.parent
            continue
        if (dataset_type in source):
            if (dataset_type == _Identifier.SOURCE_TEXT):
                return STRING
            if (dataset_type == _Identifier.SOURCE_VALUE):
                return dataset.values[0]
            if (dataset_type == _Identifier.SOURCE_CSV):
                return dataset.types
        if (dataset_type == _Identifier.PROJECTION):
            return tuple([deduct_output_type(dataset.parent)[k] for k in dataset.keys])
        if (dataset_type in default):
            if (dataset.operator is not None):
                return dataset.types
            if (len(dataset.projections) == 0):
                return (deduct_output_type(dataset.parent), deduct_output_type(dataset.other))
            else:
                t1 = deduct_output_type(dataset.parent)
                t2 = deduct_output_type(dataset.other)
                out_type = []
                for prj in dataset.projections:
                    if (len(prj[1]) == 0):
                        if (prj[0] == 'first'):
                            out_type.append(t1)
                        else:
                            out_type.append(t2)
                    else:
                        for key in prj[1]:
                            if (prj[0] == 'first'):
                                out_type.append(t1[key])
                            else:
                                out_type.append(t2[key])
                return tuple(out_type)
        return dataset.types
