def equal_to(self, *fields):
    '\n        Continues a Join transformation.\n\n        Defines the Tuple fields of the second join DataSet that should be used as join keys.\n        Note: Fields can only be selected as join keys on Tuple DataSets.\n\n        :param fields:The indexes of the Tuple fields of the second join DataSet that should be used as keys.\n        :return:An incomplete Join Transformation.\n        '
    f = None
    if isinstance(fields[0], TYPES.FunctionType):
        f = (lambda x: (fields[0](x),))
    if isinstance(fields[0], KeySelectorFunction):
        f = (lambda x: (fields[0].get_key(x),))
    if (f is None):
        f = (lambda x: tuple([x[key] for key in fields]))
    new_other_set = self._info.other_set.map((lambda x: (f(x), x)))
    new_other_set._info.types = _createKeyValueTypeInfo(len(fields))
    self._info.other = new_other_set._info
    self._info.other.parallelism = self._info.parallelism
    self._info.other.children.append(self._info)
    self._info.key2 = tuple([x for x in range(len(fields))])
    self._env._sets.append(self._info)
    return JoinOperator(self._env, self._info)
