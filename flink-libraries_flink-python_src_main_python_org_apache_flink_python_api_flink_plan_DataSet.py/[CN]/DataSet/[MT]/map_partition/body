def map_partition(self, operator, types):
    '\n        Applies a MapPartition transformation on a DataSet.\n\n        The transformation calls a MapPartitionFunction once per parallel partition of the DataSet.\n        The entire partition is available through the given Iterator.\n        Each MapPartitionFunction may return an arbitrary number of results.\n\n        The number of elements that each instance of the MapPartition function\n        sees is non deterministic and depends on the degree of parallelism of the operation.\n\n        :param operator: The MapFunction that is called for each element of the DataSet.\n        :param types: The type of the resulting DataSet\n        :return:A MapOperator that represents the transformed DataSet\n        '
    if isinstance(operator, TYPES.FunctionType):
        f = operator
        operator = MapPartitionFunction()
        operator.map_partition = f
    child = dict()
    child_set = OperatorSet(self._env, child)
    child[_Fields.IDENTIFIER] = _Identifier.MAPPARTITION
    child[_Fields.PARENT] = self._info
    child[_Fields.OPERATOR] = operator
    child[_Fields.META] = ((str(inspect.getmodule(operator)) + '|') + str(operator.__class__.__name__))
    child[_Fields.TYPES] = types
    child[_Fields.NAME] = 'PythonMapPartition'
    self._info[_Fields.CHILDREN].append(child)
    self._env._sets.append(child)
    return child_set
