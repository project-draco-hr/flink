def filter(self, operator):
    '\n        Applies a Filter transformation on a DataSet.\n\n        he transformation calls a FilterFunction for each element of the DataSet and retains only those element\n        for which the function returns true. Elements for which the function returns false are filtered.\n\n        :param operator: The FilterFunction that is called for each element of the DataSet.\n        :return:A FilterOperator that represents the filtered DataSet.\n        '
    if isinstance(operator, TYPES.FunctionType):
        f = operator
        operator = FilterFunction()
        operator.filter = f
    child = OperationInfo()
    child_set = OperatorSet(self._env, child)
    child.identifier = _Identifier.FILTER
    child.parent = self._info
    child.operator = operator
    child.meta = ((str(inspect.getmodule(operator)) + '|') + str(operator.__class__.__name__))
    child.name = 'PythonFilter'
    child.types = deduct_output_type(self._info)
    self._info.children.append(child)
    self._env._sets.append(child)
    return child_set
