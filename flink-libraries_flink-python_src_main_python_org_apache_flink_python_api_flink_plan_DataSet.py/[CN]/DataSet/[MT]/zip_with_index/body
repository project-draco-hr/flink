def zip_with_index(self):
    '\n        Method that assigns a unique Long value to all elements of the DataSet. The generated values are consecutive.\n        :return: A DataSet of Tuples consisting of consecutive ids and initial values.\n        '
    element_count = self.count_elements_per_partition()


    class ZipWithIndexMapper(MapPartitionFunction):
        start = (-1)

        def _run(self):
            offsets = self.context.get_broadcast_variable('counts')
            offsets = sorted(offsets, key=(lambda t: t[0]))
            offsets = collections.deque(offsets)
            for i in range(self.context.get_index_of_this_subtask()):
                self.start += offsets[i][1]
            super(ZipWithIndexMapper, self)._run()

        def map_partition(self, iterator, collector):
            for value in iterator:
                self.start += 1
                collector.collect((self.start, value))
    return self.map_partition(ZipWithIndexMapper()).with_broadcast_set('counts', element_count)
