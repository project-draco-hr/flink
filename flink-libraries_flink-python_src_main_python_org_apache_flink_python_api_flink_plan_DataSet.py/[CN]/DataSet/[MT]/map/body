def map(self, operator, types):
    '\n        Applies a Map transformation on a DataSet.\n\n        The transformation calls a MapFunction for each element of the DataSet.\n        Each MapFunction call returns exactly one element.\n\n        :param operator: The MapFunction that is called for each element of the DataSet.\n        :param types: The type of the resulting DataSet\n        :return:A MapOperator that represents the transformed DataSet\n        '
    if isinstance(operator, TYPES.FunctionType):
        f = operator
        operator = MapFunction()
        operator.map = f
    child = dict()
    child_set = OperatorSet(self._env, child)
    child[_Fields.IDENTIFIER] = _Identifier.MAP
    child[_Fields.PARENT] = self._info
    child[_Fields.OPERATOR] = operator
    child[_Fields.META] = ((str(inspect.getmodule(operator)) + '|') + str(operator.__class__.__name__))
    child[_Fields.TYPES] = types
    child[_Fields.NAME] = 'PythonMap'
    self._info[_Fields.CHILDREN].append(child)
    self._env._sets.append(child)
    return child_set
