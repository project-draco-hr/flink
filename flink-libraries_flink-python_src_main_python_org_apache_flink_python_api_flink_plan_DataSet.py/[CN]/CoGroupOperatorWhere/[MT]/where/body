def where(self, *fields):
    '\n        Continues a CoGroup transformation.\n\n        Defines the Tuple fields of the first co-grouped DataSet that should be used as grouping keys.\n        Note: Fields can only be selected as grouping keys on Tuple DataSets.\n\n        :param fields: The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys.\n        :return: An incomplete CoGroup transformation.\n        '
    f = None
    if isinstance(fields[0], TYPES.FunctionType):
        f = (lambda x: (fields[0](x),))
    if isinstance(fields[0], KeySelectorFunction):
        f = (lambda x: (fields[0].get_key(x),))
    if (f is None):
        f = (lambda x: tuple([x[key] for key in fields]))
    new_parent_set = self._info.parent_set.map((lambda x: (f(x), x)))
    new_parent_set._info.types = _createKeyValueTypeInfo(len(fields))
    self._info.parent = new_parent_set._info
    self._info.parent.children.append(self._info)
    self._info.key1 = fields
    return CoGroupOperatorTo(self._env, self._info)
