def reduce_group(self, operator, types, combinable=False):
    '\n        Applies a GroupReduce transformation.\n\n        The transformation calls a GroupReduceFunction once for each group of the DataSet, or one when applied on a\n        non-grouped DataSet.\n        The GroupReduceFunction can iterate over all elements of the DataSet and\n        emit any number of output elements including none.\n\n        :param operator: The GroupReduceFunction that is applied on the DataSet.\n        :param types: The type of the resulting DataSet.\n        :return:A GroupReduceOperator that represents the reduced DataSet.\n        '
    if isinstance(operator, TYPES.FunctionType):
        f = operator
        operator = GroupReduceFunction()
        operator.reduce = f
    operator._set_grouping_keys(self._child_chain[0].keys)
    operator._set_sort_ops([(x.field, x.order) for x in self._child_chain[1:]])
    child = OperationInfo()
    child_set = OperatorSet(self._env, child)
    child.identifier = _Identifier.GROUPREDUCE
    child.parent = self._info
    child.operator = copy.deepcopy(operator)
    child.operator._combine = False
    child.meta = ((str(inspect.getmodule(operator)) + '|') + str(operator.__class__.__name__))
    child.types = types
    child.combine = combinable
    child.combineop = operator
    child.combineop._combine = True
    child.name = 'PythonGroupReduce'
    self._info.children.append(child)
    self._env._sets.append(child)
    return child_set
