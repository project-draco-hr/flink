{
  final String HELP="Available commands:\n" + "help - show these commands\n" + "stop - stop the YARN session";
  int numTaskmanagers=0;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
    label:     while (true) {
      GetClusterStatusResponse status=yarnCluster.getClusterStatus();
      if (status != null && numTaskmanagers != status.numRegisteredTaskManagers()) {
        System.err.println("Number of connected TaskManagers changed to " + status.numRegisteredTaskManagers() + ". "+ "Slots available: "+ status.totalNumberOfSlots());
        numTaskmanagers=status.numRegisteredTaskManagers();
      }
      List<String> messages=yarnCluster.getNewMessages();
      if (messages != null && messages.size() > 0) {
        System.err.println("New messages from the YARN cluster: ");
        for (        String msg : messages) {
          System.err.println(msg);
        }
      }
      if (yarnCluster.hasFailed()) {
        System.err.println("The YARN cluster has failed");
        yarnCluster.shutdown(true);
      }
      long startTime=System.currentTimeMillis();
      while ((System.currentTimeMillis() - startTime) < CLIENT_POLLING_INTERVALL * 1000 && !in.ready()) {
        Thread.sleep(200);
      }
      if (in.ready()) {
        String command=in.readLine();
switch (command) {
case "quit":
case "stop":
          break label;
case "help":
        System.err.println(HELP);
      break;
default :
    System.err.println("Unknown command '" + command + "'. Showing help: \n"+ HELP);
  break;
}
}
if (yarnCluster.hasBeenStopped()) {
LOG.info("Stopping interactive command line interface, YARN cluster has been stopped.");
break;
}
}
}
 catch (Exception e) {
LOG.warn("Exception while running the interactive command line interface",e);
}
}
