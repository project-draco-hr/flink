{
  AbstractFlinkYarnClient flinkYarnClient=getFlinkYarnClient();
  if (flinkYarnClient == null) {
    return null;
  }
  if (!cmd.hasOption(CONTAINER.getOpt())) {
    LOG.error("Missing required argument " + CONTAINER.getOpt());
    printUsage();
    return null;
  }
  flinkYarnClient.setTaskManagerCount(Integer.valueOf(cmd.getOptionValue(CONTAINER.getOpt())));
  Path localJarPath;
  if (cmd.hasOption(FLINK_JAR.getOpt())) {
    String userPath=cmd.getOptionValue(FLINK_JAR.getOpt());
    if (!userPath.startsWith("file://")) {
      userPath="file://" + userPath;
    }
    localJarPath=new Path(userPath);
  }
 else {
    LOG.info("No path for the flink jar passed. Using the location of " + flinkYarnClient.getClass() + " to locate the jar");
    localJarPath=new Path("file://" + flinkYarnClient.getClass().getProtectionDomain().getCodeSource().getLocation().getPath());
  }
  flinkYarnClient.setLocalJarPath(localJarPath);
  String confDirPath=CliFrontend.getConfigurationDirectoryFromEnv();
  GlobalConfiguration.loadConfiguration(confDirPath);
  Configuration flinkConfiguration=GlobalConfiguration.getConfiguration();
  flinkYarnClient.setFlinkConfigurationObject(flinkConfiguration);
  flinkYarnClient.setConfigurationDirectory(confDirPath);
  File confFile=new File(confDirPath + File.separator + CONFIG_FILE_NAME);
  if (!confFile.exists()) {
    LOG.error("Unable to locate configuration file in " + confFile);
    return null;
  }
  Path confPath=new Path(confFile.getAbsolutePath());
  flinkYarnClient.setConfigurationFilePath(confPath);
  List<File> shipFiles=new ArrayList<File>();
  if (cmd.hasOption(SHIP_PATH.getOpt())) {
    String shipPath=cmd.getOptionValue(SHIP_PATH.getOpt());
    File shipDir=new File(shipPath);
    if (shipDir.isDirectory()) {
      shipFiles=new ArrayList<File>(Arrays.asList(shipDir.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          return !(name.equals(".") || name.equals(".."));
        }
      }
)));
    }
 else {
      LOG.warn("Ship directory is not a directory. Ignoring it.");
    }
  }
  if (confDirPath.length() > 0) {
    File logback=new File(confDirPath + File.pathSeparator + CONFIG_FILE_LOGBACK_NAME);
    if (logback.exists()) {
      shipFiles.add(logback);
      flinkYarnClient.setFlinkLoggingConfigurationPath(new Path(logback.toURI()));
    }
    File log4j=new File(confDirPath + File.pathSeparator + CONFIG_FILE_LOG4J_NAME);
    if (log4j.exists()) {
      shipFiles.add(log4j);
      if (flinkYarnClient.getFlinkLoggingConfigurationPath() != null) {
        LOG.warn("The configuration directory ('" + confDirPath + "') contains both LOG4J and "+ "Logback configuration files. Please delete or rename one of them.");
      }
      flinkYarnClient.setFlinkLoggingConfigurationPath(new Path(log4j.toURI()));
    }
  }
  flinkYarnClient.setShipFiles(shipFiles);
  if (cmd.hasOption(QUEUE.getOpt())) {
    flinkYarnClient.setQueue(cmd.getOptionValue(QUEUE.getOpt()));
  }
  if (cmd.hasOption(JM_MEMORY.getOpt())) {
    int jmMemory=Integer.valueOf(cmd.getOptionValue(JM_MEMORY.getOpt()));
    flinkYarnClient.setJobManagerMemory(jmMemory);
  }
  if (cmd.hasOption(TM_MEMORY.getOpt())) {
    int tmMemory=Integer.valueOf(cmd.getOptionValue(TM_MEMORY.getOpt()));
    flinkYarnClient.setTaskManagerMemory(tmMemory);
  }
  if (cmd.hasOption(SLOTS.getOpt())) {
    int slots=Integer.valueOf(cmd.getOptionValue(SLOTS.getOpt()));
    flinkYarnClient.setTaskManagerSlots(slots);
  }
  String[] dynamicProperties=null;
  if (cmd.hasOption(DYNAMIC_PROPERTIES.getOpt())) {
    dynamicProperties=cmd.getOptionValues(DYNAMIC_PROPERTIES.getOpt());
  }
  String dynamicPropertiesEncoded=StringUtils.join(dynamicProperties,CliFrontend.YARN_DYNAMIC_PROPERTIES_SEPARATOR);
  flinkYarnClient.setDynamicPropertiesEncoded(dynamicPropertiesEncoded);
  if (cmd.hasOption(DETACHED.getOpt())) {
    detachedMode=true;
    flinkYarnClient.setDetachedMode(detachedMode);
  }
  return flinkYarnClient;
}
