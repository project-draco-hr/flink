{
  final int keyCnt=100;
  final int valCnt=20;
  final double memoryFraction=1.0;
  try {
    initEnvironment(MEMORY_MANAGER_SIZE,NETWORK_BUFFER_SIZE);
    mockEnv.getExecutionConfig().enableObjectReuse();
    addInput(new UniformRecordGenerator(keyCnt,valCnt,false),0);
    addOutput(this.outList);
{
      final TaskConfig reduceConfig=new TaskConfig(new Configuration());
      reduceConfig.addInputToGroup(0);
      reduceConfig.setInputSerializer(serFact,0);
      reduceConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
      reduceConfig.setOutputSerializer(serFact);
      reduceConfig.setDriverStrategy(DriverStrategy.ALL_REDUCE);
      reduceConfig.setDriverComparator(compFact,0);
      reduceConfig.setDriverComparator(compFact,1);
      reduceConfig.setRelativeMemoryDriver(memoryFraction);
      reduceConfig.setStubWrapper(new UserCodeClassWrapper<>(MockReduceStub.class));
      getTaskConfig().addChainedTask(ChainedAllReduceDriver.class,reduceConfig,"reduce");
    }
{
      BatchTask<FlatMapFunction<Record,Record>,Record> testTask=new BatchTask<>();
      registerTask(testTask,FlatMapDriver.class,MockMapStub.class);
      try {
        testTask.invoke();
      }
 catch (      Exception e) {
        e.printStackTrace();
        Assert.fail("Invoke method caused exception.");
      }
    }
    int sumTotal=valCnt * keyCnt * (keyCnt - 1) / 2;
    Assert.assertEquals(1,this.outList.size());
    Assert.assertEquals(sumTotal,this.outList.get(0).getField(0,IntValue.class).getValue());
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
