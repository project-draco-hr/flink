{
  final SharedSlot sharedSlot=new SharedSlot(slot,this);
  final Instance location=slot.getInstance();
synchronized (allSlots) {
    allSlots.add(sharedSlot);
    SubSlot subslot=sharedSlot.allocateSubSlot(jid);
    boolean entryForNewJidExists=false;
    for (    Map.Entry<JobVertexID,Map<Instance,List<SharedSlot>>> entry : availableSlotsPerJid.entrySet()) {
      if (entry.getKey().equals(jid)) {
        entryForNewJidExists=true;
        continue;
      }
      Map<Instance,List<SharedSlot>> available=entry.getValue();
      putIntoMultiMap(available,location,sharedSlot);
    }
    if (!entryForNewJidExists) {
      availableSlotsPerJid.put(jid,new LinkedHashMap<Instance,List<SharedSlot>>());
    }
    return subslot;
  }
}
