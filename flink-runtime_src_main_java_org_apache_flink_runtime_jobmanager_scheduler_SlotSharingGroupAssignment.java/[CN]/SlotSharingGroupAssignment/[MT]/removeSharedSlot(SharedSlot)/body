{
  if (!allSlots.contains(sharedSlot)) {
    throw new IllegalArgumentException("Slot was not associated with this SlotSharingGroup before.");
  }
  allSlots.remove(sharedSlot);
  Instance location=sharedSlot.getInstance();
  for (  Map.Entry<AbstractID,Map<Instance,List<SharedSlot>>> mapEntry : availableSlotsPerJid.entrySet()) {
    Map<Instance,List<SharedSlot>> map=mapEntry.getValue();
    List<SharedSlot> list=map.get(location);
    if (list == null || !list.remove(sharedSlot)) {
      throw new IllegalStateException("Bug: SharedSlot was not available to another vertex type that it was not allocated for before.");
    }
    if (list.isEmpty()) {
      map.remove(location);
    }
  }
  sharedSlot.markCancelled();
  returnAllocatedSlot(sharedSlot);
}
