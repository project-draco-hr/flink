{
  minNumSplits=Math.max(minNumSplits,this.numSplits);
  final Path path=this.filePath;
  final List<FileInputSplit> inputSplits=new ArrayList<FileInputSplit>(minNumSplits);
  List<FileStatus> files=new ArrayList<FileStatus>();
  long totalLength=0;
  final FileSystem fs=path.getFileSystem();
  final FileStatus pathFile=fs.getFileStatus(path);
  if (!acceptFile(pathFile)) {
    throw new IOException("The given file does not pass the file-filter");
  }
  if (pathFile.isDir()) {
    final FileStatus[] dir=fs.listStatus(path);
    for (int i=0; i < dir.length; i++) {
      if (!dir[i].isDir() && acceptFile(dir[i])) {
        files.add(dir[i]);
        totalLength+=dir[i].getLen();
      }
    }
  }
 else {
    files.add(pathFile);
    totalLength+=pathFile.getLen();
  }
  final long maxSplitSize=(minNumSplits < 1) ? Long.MAX_VALUE : (totalLength / minNumSplits + (totalLength % minNumSplits == 0 ? 0 : 1));
  int splitNum=0;
  for (  final FileStatus file : files) {
    final long len=file.getLen();
    final long blockSize=file.getBlockSize();
    final long minSplitSize;
    if (this.minSplitSize <= blockSize) {
      minSplitSize=this.minSplitSize;
    }
 else {
      if (LOG.isWarnEnabled())       LOG.warn("Minimal split size of " + this.minSplitSize + " is larger than the block size of "+ blockSize+ ". Decreasing minimal split size to block size.");
      minSplitSize=blockSize;
    }
    final long splitSize=Math.max(minSplitSize,Math.min(maxSplitSize,blockSize));
    final long halfSplit=splitSize >>> 1;
    final long maxBytesForLastSplit=(long)(splitSize * MAX_SPLIT_SIZE_DISCREPANCY);
    if (len > 0) {
      final BlockLocation[] blocks=fs.getFileBlockLocations(file,0,len);
      Arrays.sort(blocks);
      long bytesUnassigned=len;
      long position=0;
      int blockIndex=0;
      while (bytesUnassigned > maxBytesForLastSplit) {
        blockIndex=getBlockIndexForPosition(blocks,position,halfSplit,blockIndex);
        FileInputSplit fis=new FileInputSplit(splitNum++,file.getPath(),position,splitSize,blocks[blockIndex].getHosts());
        inputSplits.add(fis);
        position+=splitSize;
        bytesUnassigned-=splitSize;
      }
      if (bytesUnassigned > 0) {
        blockIndex=getBlockIndexForPosition(blocks,position,halfSplit,blockIndex);
        final FileInputSplit fis=new FileInputSplit(splitNum++,file.getPath(),position,bytesUnassigned,blocks[blockIndex].getHosts());
        inputSplits.add(fis);
      }
    }
 else {
      final BlockLocation[] blocks=fs.getFileBlockLocations(file,0,0);
      String[] hosts;
      if (blocks.length > 0) {
        hosts=blocks[0].getHosts();
      }
 else {
        hosts=new String[0];
      }
      final FileInputSplit fis=new FileInputSplit(splitNum++,file.getPath(),0,0,hosts);
      inputSplits.add(fis);
    }
  }
  return inputSplits.toArray(new FileInputSplit[inputSplits.size()]);
}
