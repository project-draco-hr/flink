{
  ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(DEFAULT_PARALLELISM);
  DataSource<Tuple2<Long,String>> data1=env.readCsvFile("/some/path").types(Long.class,String.class);
  data1.getSplitDataProperties().splitsPartitionedBy("byCountry",0);
  DataSource<Tuple2<Long,String>> data2=env.readCsvFile("/some/path").types(Long.class,String.class);
  data2.getSplitDataProperties().splitsPartitionedBy("byDate",0);
  data1.union(data2).print();
  JavaPlan plan=env.createProgramPlan();
  OptimizedPlan oPlan=compileNoStats(plan);
  SinkPlanNode sinkNode=oPlan.getDataSinks().iterator().next();
  SourcePlanNode sourceNode1=(SourcePlanNode)((NAryUnionPlanNode)sinkNode.getPredecessor()).getListOfInputs().get(0).getSource();
  SourcePlanNode sourceNode2=(SourcePlanNode)((NAryUnionPlanNode)sinkNode.getPredecessor()).getListOfInputs().get(1).getSource();
  GlobalProperties gprops1=sourceNode1.getGlobalProperties();
  LocalProperties lprops1=sourceNode1.getLocalProperties();
  GlobalProperties gprops2=sourceNode2.getGlobalProperties();
  LocalProperties lprops2=sourceNode2.getLocalProperties();
  Assert.assertTrue((new FieldSet(gprops1.getPartitioningFields().toArray())).equals(new FieldSet(0)));
  Assert.assertTrue(gprops1.getPartitioning() == PartitioningProperty.CUSTOM_PARTITIONING);
  Assert.assertTrue(lprops1.getGroupedFields() == null);
  Assert.assertTrue(lprops1.getOrdering() == null);
  Assert.assertTrue((new FieldSet(gprops2.getPartitioningFields().toArray())).equals(new FieldSet(0)));
  Assert.assertTrue(gprops2.getPartitioning() == PartitioningProperty.CUSTOM_PARTITIONING);
  Assert.assertTrue(lprops2.getGroupedFields() == null);
  Assert.assertTrue(lprops2.getOrdering() == null);
  Assert.assertTrue(!gprops1.getCustomPartitioner().equals(gprops2.getCustomPartitioner()));
}
