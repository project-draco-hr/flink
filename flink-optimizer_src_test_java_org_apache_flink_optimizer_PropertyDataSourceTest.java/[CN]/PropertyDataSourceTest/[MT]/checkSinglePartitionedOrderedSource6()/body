{
  ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(DEFAULT_PARALLELISM);
  DataSource<Tuple3<Long,SomePojo,String>> data=env.fromCollection(tuple3PojoData,tuple3PojoType);
  data.getSplitDataProperties().splitsPartitionedBy("f1.intField").splitsOrderedBy("f1",new Order[]{Order.DESCENDING});
  data.output(new DiscardingOutputFormat<Tuple3<Long,SomePojo,String>>());
  JavaPlan plan=env.createProgramPlan();
  OptimizedPlan oPlan=compileNoStats(plan);
  SinkPlanNode sinkNode=oPlan.getDataSinks().iterator().next();
  SourcePlanNode sourceNode=(SourcePlanNode)sinkNode.getPredecessor();
  GlobalProperties gprops=sourceNode.getGlobalProperties();
  LocalProperties lprops=sourceNode.getLocalProperties();
  Assert.assertTrue((new FieldSet(gprops.getPartitioningFields().toArray())).equals(new FieldSet(2)));
  Assert.assertTrue(gprops.getPartitioning() == PartitioningProperty.ANY_PARTITIONING);
  Assert.assertTrue(new FieldSet(lprops.getGroupedFields().toArray()).equals(new FieldSet(1,2,3)));
  Assert.assertTrue(lprops.getOrdering() == null);
}
