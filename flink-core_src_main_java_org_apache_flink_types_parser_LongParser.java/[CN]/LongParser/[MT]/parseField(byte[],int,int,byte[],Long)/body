{
  long val=0;
  boolean neg=false;
  final int delimLimit=limit - delimiter.length + 1;
  if (bytes[startPos] == '-') {
    neg=true;
    startPos++;
    if (startPos == limit || (startPos < delimLimit && delimiterNext(bytes,startPos,delimiter))) {
      setErrorState(ParseErrorState.NUMERIC_VALUE_ORPHAN_SIGN);
      return -1;
    }
  }
  for (int i=startPos; i < limit; i++) {
    if (i < delimLimit && delimiterNext(bytes,i,delimiter)) {
      this.result=neg ? -val : val;
      return i + delimiter.length;
    }
    if (bytes[i] < 48 || bytes[i] > 57) {
      setErrorState(ParseErrorState.NUMERIC_VALUE_ILLEGAL_CHARACTER);
      return -1;
    }
    val*=10;
    val+=bytes[i] - 48;
    if (val < 0) {
      if (neg && val == Long.MIN_VALUE) {
        this.result=Long.MIN_VALUE;
        if (i + 1 >= limit) {
          return limit;
        }
 else         if (i + 1 < delimLimit && delimiterNext(bytes,i + 1,delimiter)) {
          return i + 1 + delimiter.length;
        }
 else {
          setErrorState(ParseErrorState.NUMERIC_VALUE_OVERFLOW_UNDERFLOW);
          return -1;
        }
      }
 else {
        setErrorState(ParseErrorState.NUMERIC_VALUE_OVERFLOW_UNDERFLOW);
        return -1;
      }
    }
  }
  this.result=neg ? -val : val;
  return limit;
}
