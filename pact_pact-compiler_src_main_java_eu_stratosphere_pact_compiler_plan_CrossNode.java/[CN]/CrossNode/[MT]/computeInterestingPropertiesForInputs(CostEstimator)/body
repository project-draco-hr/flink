{
  List<InterestingProperties> thisNodesIntProps=getInterestingProperties();
  List<InterestingProperties> props=null;
switch (getOutputContract()) {
case SameKeyFirst:
case SuperKeyFirst:
    props=InterestingProperties.filterByOutputContract(thisNodesIntProps,getOutputContract());
  if (!props.isEmpty()) {
    input1.addAllInterestingProperties(props);
  }
 else {
    input1.setNoInterestingProperties();
  }
break;
case SameKeySecond:
case SuperKeySecond:
props=InterestingProperties.filterByOutputContract(thisNodesIntProps,getOutputContract());
if (!props.isEmpty()) {
input2.addAllInterestingProperties(props);
}
 else {
input2.setNoInterestingProperties();
}
break;
default :
input1.setNoInterestingProperties();
input2.setNoInterestingProperties();
break;
}
}
