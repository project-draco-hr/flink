{
  List<InterestingProperties> thisNodesIntProps=getInterestingProperties();
  List<InterestingProperties> props=null;
switch (getOutputContract()) {
case SameKeyFirst:
case SuperKeyFirst:
    props=InterestingProperties.filterByOutputContract(thisNodesIntProps,getOutputContract());
  for (  PactConnection c : this.input1) {
    if (!props.isEmpty()) {
      c.addAllInterestingProperties(props);
    }
 else {
      c.setNoInterestingProperties();
    }
  }
break;
case SameKeySecond:
case SuperKeySecond:
props=InterestingProperties.filterByOutputContract(thisNodesIntProps,getOutputContract());
for (PactConnection c : this.input2) {
if (!props.isEmpty()) {
c.addAllInterestingProperties(props);
}
 else {
c.setNoInterestingProperties();
}
}
break;
default :
for (PactConnection c : this.input1) c.setNoInterestingProperties();
for (PactConnection c : this.input2) c.setNoInterestingProperties();
break;
}
}
