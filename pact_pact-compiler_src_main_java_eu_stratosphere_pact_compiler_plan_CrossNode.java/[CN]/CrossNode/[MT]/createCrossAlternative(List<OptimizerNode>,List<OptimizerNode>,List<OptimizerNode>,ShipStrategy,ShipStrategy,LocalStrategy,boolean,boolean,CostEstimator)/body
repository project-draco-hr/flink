{
  GlobalProperties gp;
  LocalProperties lp;
  if (pred1.size() == 1) {
    gp=PactConnection.getGlobalPropertiesAfterConnection(pred1.get(0),this,ss1);
    lp=PactConnection.getLocalPropertiesAfterConnection(pred1.get(0),this,ss1);
  }
 else {
    gp=new GlobalProperties();
    lp=new LocalProperties();
  }
  if (keepFirstOrder == false) {
    gp.setOrdering(null);
    lp.setOrdering(null);
  }
  CrossNode n=new CrossNode(this,pred1,pred2,input1,input2,gp,lp);
  for (  PactConnection c : n.input1)   c.setShipStrategy(ss1);
  for (  PactConnection c : n.input2)   c.setShipStrategy(ss2);
  n.setLocalStrategy(ls);
  n.getGlobalProperties().filterByNodesConstantSet(this,0);
  n.getLocalProperties().filterByNodesConstantSet(this,0);
  estimator.costOperator(n);
  target.add(n);
  if (pred2.size() == 1) {
    gp=PactConnection.getGlobalPropertiesAfterConnection(pred2.get(0),this,ss2);
    lp=PactConnection.getLocalPropertiesAfterConnection(pred2.get(0),this,ss2);
  }
 else {
    gp=new GlobalProperties();
    lp=new LocalProperties();
  }
  if (keepSecondOrder == false) {
    gp.setOrdering(null);
    lp.setOrdering(null);
  }
  n=new CrossNode(this,pred1,pred2,input1,input2,gp,lp);
  for (  PactConnection c : n.input1)   c.setShipStrategy(ss1);
  for (  PactConnection c : n.input2)   c.setShipStrategy(ss2);
  n.setLocalStrategy(ls);
  n.getGlobalProperties().filterByNodesConstantSet(this,1);
  n.getLocalProperties().filterByNodesConstantSet(this,1);
  estimator.costOperator(n);
  target.add(n);
}
