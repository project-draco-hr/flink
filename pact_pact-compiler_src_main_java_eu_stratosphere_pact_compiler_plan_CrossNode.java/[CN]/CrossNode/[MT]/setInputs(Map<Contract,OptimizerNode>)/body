{
  super.setInputs(contractToNode);
  PactConnection other=null;
  PactConnection toAdjust=null;
  if (getFirstInputConnection().getShipStrategy() != ShipStrategy.NONE) {
    if (getSecondInputConnection().getShipStrategy() == ShipStrategy.NONE) {
      toAdjust=getSecondInputConnection();
      other=getFirstInputConnection();
    }
 else {
      if (!((getFirstInputConnection().getShipStrategy() == ShipStrategy.BROADCAST && getSecondInputConnection().getShipStrategy() == ShipStrategy.FORWARD) || (getFirstInputConnection().getShipStrategy() == ShipStrategy.FORWARD && getSecondInputConnection().getShipStrategy() == ShipStrategy.BROADCAST) || (getFirstInputConnection().getShipStrategy() == ShipStrategy.SFR && getSecondInputConnection().getShipStrategy() == ShipStrategy.SFR))) {
        throw new CompilerException("Invalid combination of fixed shipping strategies for Cross contract '" + getPactContract().getName() + "'.");
      }
    }
  }
 else   if (getSecondInputConnection().getShipStrategy() != ShipStrategy.NONE) {
    if (getFirstInputConnection().getShipStrategy() == ShipStrategy.NONE) {
      toAdjust=getFirstInputConnection();
      other=getSecondInputConnection();
    }
  }
  if (toAdjust != null) {
    if (other.getShipStrategy() == ShipStrategy.BROADCAST) {
      toAdjust.setShipStrategy(ShipStrategy.FORWARD);
    }
 else     if (other.getShipStrategy() == ShipStrategy.FORWARD) {
      toAdjust.setShipStrategy(ShipStrategy.BROADCAST);
    }
 else     if (other.getShipStrategy() == ShipStrategy.SFR) {
      toAdjust.setShipStrategy(ShipStrategy.SFR);
    }
 else {
      throw new CompilerException("Invalid shipping strategy for Cross contract '" + getPactContract().getName() + "': "+ other.getShipStrategy());
    }
  }
}
