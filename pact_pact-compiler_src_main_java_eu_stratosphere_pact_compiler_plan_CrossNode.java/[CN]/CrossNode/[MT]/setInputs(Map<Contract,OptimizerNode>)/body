{
  super.setInputs(contractToNode);
  ShipStrategy firstSS=this.input1.getShipStrategy();
  ShipStrategy secondSS=this.input2.getShipStrategy();
  PactConnection fixed=null;
  PactConnection toAdjust=null;
  if (firstSS.type() != ShipStrategyType.NONE) {
    if (secondSS.type() == ShipStrategyType.NONE) {
      fixed=this.input1;
      toAdjust=this.input2;
    }
 else {
      if (!((firstSS.type() == ShipStrategyType.BROADCAST && secondSS.type() == ShipStrategyType.FORWARD) || (firstSS.type() == ShipStrategyType.FORWARD && secondSS.type() == ShipStrategyType.BROADCAST) || (firstSS.type() == ShipStrategyType.SFR && secondSS.type() == ShipStrategyType.SFR))) {
        throw new CompilerException("Invalid combination of fixed shipping strategies for Cross contract '" + getPactContract().getName() + "'.");
      }
    }
  }
 else   if (secondSS.type() != ShipStrategyType.NONE) {
    fixed=this.input2;
    toAdjust=this.input1;
  }
  if (toAdjust != null) {
    if (fixed.getShipStrategy().type() == ShipStrategyType.BROADCAST) {
      toAdjust.setShipStrategy(new ForwardSS());
    }
 else     if (fixed.getShipStrategy().type() == ShipStrategyType.FORWARD) {
      toAdjust.setShipStrategy(new BroadcastSS());
    }
 else     if (fixed.getShipStrategy().type() == ShipStrategyType.SFR) {
      toAdjust.setShipStrategy(new SFRSS());
    }
 else {
      throw new CompilerException("Invalid shipping strategy for Cross contract '" + getPactContract().getName() + "': "+ fixed.getShipStrategy());
    }
  }
}
