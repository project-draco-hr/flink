{
  Iterator<ExecutionVertex> it=new ExecutionGraphIterator(this,true);
  while (it.hasNext()) {
    final ExecutionVertex sourceVertex=it.next();
    for (int i=0; i < sourceVertex.getNumberOfOutputGates(); ++i) {
      final ExecutionGate outputGate=sourceVertex.getOutputGate(i);
      final ChannelType channelType=outputGate.getChannelType();
      if (channelType == ChannelType.FILE || channelType == ChannelType.INMEMORY) {
        final int numberOfOutputChannels=outputGate.getNumberOfEdges();
        for (int j=0; j < numberOfOutputChannels; ++j) {
          final ExecutionEdge outputChannel=outputGate.getEdge(j);
          outputChannel.getInputGate().getVertex().setAllocatedResource(sourceVertex.getAllocatedResource());
        }
      }
    }
  }
  it=new ExecutionGraphIterator(this,false);
  while (it.hasNext()) {
    final ExecutionVertex targetVertex=it.next();
    for (int i=0; i < targetVertex.getNumberOfInputGates(); ++i) {
      final ExecutionGate inputGate=targetVertex.getInputGate(i);
      final ChannelType channelType=inputGate.getChannelType();
      if (channelType == ChannelType.FILE || channelType == ChannelType.INMEMORY) {
        final int numberOfInputChannels=inputGate.getNumberOfEdges();
        for (int j=0; j < numberOfInputChannels; ++j) {
          final ExecutionEdge inputChannel=inputGate.getEdge(j);
          inputChannel.getOutputGate().getVertex().setAllocatedResource(targetVertex.getAllocatedResource());
        }
      }
    }
  }
}
