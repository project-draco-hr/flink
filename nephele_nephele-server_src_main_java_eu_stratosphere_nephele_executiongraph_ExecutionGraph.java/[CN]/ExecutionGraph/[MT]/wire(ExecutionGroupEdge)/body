{
  final ExecutionGroupVertex source=groupEdge.getSourceVertex();
  final int indexOfOutputGate=groupEdge.getIndexOfOutputGate();
  final ExecutionGroupVertex target=groupEdge.getTargetVertex();
  final int indexOfInputGate=groupEdge.getIndexOfInputGate();
  for (int i=0; i < source.getCurrentNumberOfGroupMembers(); i++) {
    final ExecutionVertex sourceVertex=source.getGroupMember(i);
    final ExecutionGate outputGate=sourceVertex.getOutputGate(indexOfOutputGate);
    if (outputGate == null) {
      throw new GraphConversionException("wire: " + sourceVertex.getName() + " has no output gate with index "+ indexOfOutputGate);
    }
    if (outputGate.getNumberOfEdges() > 0) {
      throw new GraphConversionException("wire: wire called on source " + sourceVertex.getName() + " ("+ i+ "), but number of output channels is "+ outputGate.getNumberOfEdges()+ "!");
    }
    for (int j=0; j < target.getCurrentNumberOfGroupMembers(); j++) {
      final ExecutionVertex targetVertex=target.getGroupMember(j);
      final ExecutionGate inputGate=targetVertex.getInputGate(indexOfInputGate);
      if (inputGate == null) {
        throw new GraphConversionException("wire: " + targetVertex.getName() + " has no input gate with index "+ indexOfInputGate);
      }
      if (inputGate.getNumberOfEdges() > 0 && i == 0) {
        throw new GraphConversionException("wire: wire called on target " + targetVertex.getName() + " ("+ j+ "), but number of input channels is "+ inputGate.getNumberOfEdges()+ "!");
      }
      if (DistributionPatternProvider.createWire(source.getForwardEdge(indexOfOutputGate).getDistributionPattern(),i,j,source.getCurrentNumberOfGroupMembers(),target.getCurrentNumberOfGroupMembers())) {
        createChannel(outputGate,inputGate,groupEdge);
      }
    }
  }
}
