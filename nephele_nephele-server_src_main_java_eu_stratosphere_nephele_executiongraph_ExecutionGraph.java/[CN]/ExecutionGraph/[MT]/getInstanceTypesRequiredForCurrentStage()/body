{
  final Map<InstanceType,Integer> instanceTypeMap=new HashMap<InstanceType,Integer>();
  if (this.indexToCurrentExecutionStage >= this.stages.size()) {
    return instanceTypeMap;
  }
  final ExecutionStage nextStage=this.stages.get(this.indexToCurrentExecutionStage);
  if (nextStage == null) {
    LOG.warn("Stage " + this.indexToCurrentExecutionStage + " is not a valid execution stage");
  }
  final Set<AbstractInstance> collectedInstances=new HashSet<AbstractInstance>();
  for (int i=0; i < nextStage.getNumberOfStageMembers(); i++) {
    final ExecutionGroupVertex groupVertex=nextStage.getStageMember(i);
    for (int j=0; j < groupVertex.getCurrentNumberOfGroupMembers(); j++) {
      final ExecutionVertex vertex=groupVertex.getGroupMember(j);
      if (vertex.getExecutionState() == ExecutionState.SCHEDULED) {
        final AbstractInstance instance=vertex.getAllocatedResource().getInstance();
        if (collectedInstances.contains(instance)) {
          continue;
        }
 else {
          collectedInstances.add(instance);
        }
        if (instance instanceof DummyInstance) {
          Integer num=instanceTypeMap.get(instance.getType());
          num=(num == null) ? new Integer(1) : new Integer(num.intValue() + 1);
          instanceTypeMap.put(instance.getType(),num);
        }
 else {
          LOG.debug("Execution Vertex " + vertex.getName() + " ("+ vertex.getID()+ ") is already assigned to non-dummy instance, skipping...");
        }
      }
    }
  }
  return instanceTypeMap;
}
