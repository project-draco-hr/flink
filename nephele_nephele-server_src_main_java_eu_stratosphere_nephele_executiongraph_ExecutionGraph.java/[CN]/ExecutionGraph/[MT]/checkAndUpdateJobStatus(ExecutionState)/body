{
switch (this.jobStatus) {
case CREATED:
    if (jobHasScheduledStatus()) {
      this.jobStatus=InternalJobStatus.SCHEDULED;
    }
  break;
case SCHEDULED:
if (latestStateChange == ExecutionState.RUNNING) {
  this.jobStatus=InternalJobStatus.RUNNING;
  return;
}
break;
case RUNNING:
if (latestStateChange == ExecutionState.CANCELING || latestStateChange == ExecutionState.CANCELED) {
this.jobStatus=InternalJobStatus.CANCELING;
return;
}
if (latestStateChange == ExecutionState.FAILED) {
final Iterator<ExecutionVertex> it=new ExecutionGraphIterator(this,true);
while (it.hasNext()) {
final ExecutionVertex vertex=it.next();
if (vertex.getExecutionState() == ExecutionState.FAILED && !vertex.hasRetriesLeft()) {
this.jobStatus=InternalJobStatus.FAILING;
return;
}
}
}
if (jobHasFinishedStatus()) {
this.jobStatus=InternalJobStatus.FINISHED;
}
break;
case FAILING:
if (jobHasFailedOrCanceledStatus()) {
this.jobStatus=InternalJobStatus.FAILED;
}
break;
case FAILED:
LOG.error("Received update of execute state in job status FAILED");
break;
case CANCELING:
if (jobHasFailedOrCanceledStatus()) {
this.jobStatus=InternalJobStatus.CANCELED;
}
break;
case CANCELED:
LOG.error("Received update of execute state in job status CANCELED");
break;
case FINISHED:
LOG.error("Received update of execute state in job status FINISHED");
break;
}
}
