{
  ExecutionVertex ev;
  if (!vertexMap.containsKey(jobVertex)) {
    throw new GraphConversionException("Cannot find mapping for vertex " + jobVertex.getName());
  }
  ev=vertexMap.get(jobVertex);
  if (jobVertex.getNumberOfForwardConnections() != ev.getEnvironment().getNumberOfOutputGates()) {
    throw new GraphConversionException("Job and execution vertex " + jobVertex.getName() + " have different number of outputs");
  }
  if (jobVertex.getNumberOfBackwardConnections() != ev.getEnvironment().getNumberOfInputGates()) {
    throw new GraphConversionException("Job and execution vertex " + jobVertex.getName() + " have different number of inputs");
  }
  for (int j=0; j < jobVertex.getNumberOfForwardConnections(); j++) {
    final JobEdge edge=jobVertex.getForwardConnection(j);
    final AbstractJobVertex target=edge.getConnectedVertex();
    final OutputGate<? extends Record> eog=ev.getEnvironment().getOutputGate(j);
    if (eog == null) {
      throw new GraphConversionException("Cannot retrieve output gate " + j + " from vertex "+ jobVertex.getName());
    }
    final ExecutionVertex executionTarget=vertexMap.get(target);
    if (executionTarget == null) {
      throw new GraphConversionException("Cannot find mapping for vertex " + target.getName());
    }
    final InputGate<? extends Record> eig=executionTarget.getEnvironment().getInputGate(edge.getIndexOfInputGate());
    if (eig == null) {
      throw new GraphConversionException("Cannot retrieve input gate " + edge.getIndexOfInputGate() + " from vertex "+ target.getName());
    }
    ChannelType channelType=ChannelType.NETWORK;
    CompressionLevel compressionLevel=CompressionLevel.NO_COMPRESSION;
    boolean userDefinedChannelType=false;
    boolean userDefinedCompressionLevel=false;
    createChannel(ev,eog,executionTarget,eig,channelType,compressionLevel);
    if (edge.getChannelType() != null) {
      channelType=edge.getChannelType();
      userDefinedChannelType=true;
    }
    if (edge.getCompressionLevel() != null) {
      compressionLevel=edge.getCompressionLevel();
      userDefinedCompressionLevel=true;
    }
    ev.getGroupVertex().wireTo(executionTarget.getGroupVertex(),edge.getIndexOfInputGate(),j,channelType,userDefinedChannelType,compressionLevel,userDefinedCompressionLevel);
  }
}
