{
  if (stageNumber >= this.stages.size()) {
    throw new IllegalArgumentException("removeUnnecessaryNetworkChannels called on an illegal stage (" + stageNumber + ")");
  }
  final ExecutionStage executionStage=this.stages.get(stageNumber);
  for (int i=0; i < executionStage.getNumberOfStageMembers(); i++) {
    final ExecutionGroupVertex groupVertex=executionStage.getStageMember(i);
    for (int j=0; j < groupVertex.getCurrentNumberOfGroupMembers(); j++) {
      final ExecutionVertex sourceVertex=groupVertex.getGroupMember(j);
      for (int k=0; k < sourceVertex.getEnvironment().getNumberOfOutputGates(); k++) {
        final OutputGate<? extends Record> outputGate=sourceVertex.getEnvironment().getOutputGate(k);
        for (int l=0; l < outputGate.getNumberOfOutputChannels(); l++) {
          final AbstractOutputChannel<? extends Record> oldOutputChannel=outputGate.getOutputChannel(l);
          if (!(oldOutputChannel instanceof NetworkOutputChannel<?>)) {
            continue;
          }
          final ExecutionVertex targetVertex=this.channelToVertexMap.get(oldOutputChannel.getConnectedChannelID());
          if (targetVertex == null) {
            throw new RuntimeException("Cannot find target vertex: Inconsistency...");
          }
          if (!targetVertex.getAllocatedResource().getInstance().equals(sourceVertex.getAllocatedResource().getInstance())) {
            continue;
          }
          final AbstractInputChannel<? extends Record> oldInputChannel=getInputChannelByID(oldOutputChannel.getConnectedChannelID());
          final InputGate<? extends Record> inputGate=oldInputChannel.getInputGate();
          final AbstractOutputChannel<? extends Record> newOutputChannel=outputGate.replaceChannel(oldOutputChannel.getID(),ChannelType.INMEMORY,false);
          final AbstractInputChannel<? extends Record> newInputChannel=inputGate.replaceChannel(oldInputChannel.getID(),ChannelType.INMEMORY);
          this.outputChannelMap.put(newOutputChannel.getID(),newOutputChannel);
          this.inputChannelMap.put(newInputChannel.getID(),newInputChannel);
        }
      }
    }
  }
}
