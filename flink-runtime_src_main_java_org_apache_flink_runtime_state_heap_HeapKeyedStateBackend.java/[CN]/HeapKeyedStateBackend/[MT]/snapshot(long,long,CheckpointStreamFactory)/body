{
  if (stateTables.isEmpty()) {
    return new DoneFuture<>(null);
  }
  try (CheckpointStreamFactory.CheckpointStateOutputStream stream=streamFactory.createCheckpointStateOutputStream(checkpointId,timestamp)){
    DataOutputViewStreamWrapper outView=new DataOutputViewStreamWrapper(stream);
    Preconditions.checkState(stateTables.size() <= Short.MAX_VALUE,"Too many KV-States: " + stateTables.size() + ". Currently at most "+ Short.MAX_VALUE+ " states are supported");
    outView.writeShort(stateTables.size());
    Map<String,Integer> kVStateToId=new HashMap<>(stateTables.size());
    for (    Map.Entry<String,StateTable<K,?,?>> kvState : stateTables.entrySet()) {
      outView.writeUTF(kvState.getKey());
      TypeSerializer<?> namespaceSerializer=kvState.getValue().getNamespaceSerializer();
      TypeSerializer<?> stateSerializer=kvState.getValue().getStateSerializer();
      InstantiationUtil.serializeObject(stream,namespaceSerializer);
      InstantiationUtil.serializeObject(stream,stateSerializer);
      kVStateToId.put(kvState.getKey(),kVStateToId.size());
    }
    int offsetCounter=0;
    long[] keyGroupRangeOffsets=new long[keyGroupRange.getNumberOfKeyGroups()];
    for (int keyGroupIndex=keyGroupRange.getStartKeyGroup(); keyGroupIndex <= keyGroupRange.getEndKeyGroup(); keyGroupIndex++) {
      keyGroupRangeOffsets[offsetCounter++]=stream.getPos();
      outView.writeInt(keyGroupIndex);
      for (      Map.Entry<String,StateTable<K,?,?>> kvState : stateTables.entrySet()) {
        outView.writeShort(kVStateToId.get(kvState.getKey()));
        writeStateTableForKeyGroup(outView,kvState.getValue(),keyGroupIndex);
      }
    }
    StreamStateHandle streamStateHandle=stream.closeAndGetHandle();
    KeyGroupRangeOffsets offsets=new KeyGroupRangeOffsets(keyGroupRange,keyGroupRangeOffsets);
    final KeyGroupsStateHandle keyGroupsStateHandle=new KeyGroupsStateHandle(offsets,streamStateHandle);
    return new DoneFuture<>(keyGroupsStateHandle);
  }
 }
