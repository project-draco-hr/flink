{
  try {
    TPCHQuery3 query=new TPCHQuery3();
    Plan p=query.getPlan(DEFAULT_PARALLELISM_STRING,IN_FILE,IN_FILE,OUT_FILE);
    final OptimizedPlan plan=compileNoStats(p);
    final OptimizerPlanNodeResolver or=getOptimizerPlanNodeResolver(plan);
    final SinkPlanNode sink=or.getNode("Output");
    final SingleInputPlanNode reducer=or.getNode("AggLio");
    final SingleInputPlanNode combiner=reducer.getPredecessor() instanceof SingleInputPlanNode ? (SingleInputPlanNode)reducer.getPredecessor() : null;
    final DualInputPlanNode join=or.getNode("JoinLiO");
    final SingleInputPlanNode filteringMapper=or.getNode("FilterO");
    checkStandardStrategies(filteringMapper,join,combiner,reducer,sink);
    Assert.assertTrue(checkRepartitionShipStrategies(join,reducer,combiner));
    Assert.assertTrue(checkHashJoinStrategies(join,reducer,true) || checkHashJoinStrategies(join,reducer,true));
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
