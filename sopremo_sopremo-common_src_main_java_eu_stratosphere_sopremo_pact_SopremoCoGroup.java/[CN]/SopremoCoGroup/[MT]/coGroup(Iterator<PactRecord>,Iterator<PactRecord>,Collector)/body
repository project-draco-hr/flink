{
  this.context.increaseInputCounter();
  this.cachedIterator1.setIterator(records1);
  this.cachedIterator2.setIterator(records2);
  Iterator<JsonNode> values1=this.cachedIterator1;
  Iterator<JsonNode> values2=this.cachedIterator2;
  if (SopremoUtil.LOG.isTraceEnabled()) {
    final ArrayList<JsonNode> cached1=new ArrayList<JsonNode>(), cached2=new ArrayList<JsonNode>();
    while (values1.hasNext())     cached1.add(values1.next());
    while (values2.hasNext())     cached2.add(values2.next());
    SopremoUtil.LOG.trace(String.format("%s %s/%s",this.getContext().operatorTrace(),cached1,cached2));
    values1=cached1.iterator();
    values2=cached2.iterator();
  }
  ArrayNode array1=JsonUtil.wrapWithNode(this.needsResettableIterator(0,values1),values1);
  ArrayNode array2=JsonUtil.wrapWithNode(this.needsResettableIterator(0,values1),values1);
  try {
    this.coGroup(array1,array2,this.collector);
  }
 catch (  final RuntimeException e) {
    SopremoUtil.LOG.error(String.format("Error occurred @ %s with %s/%s: %s",this.getContext().operatorTrace(),array1,array2,e));
    throw e;
  }
}
