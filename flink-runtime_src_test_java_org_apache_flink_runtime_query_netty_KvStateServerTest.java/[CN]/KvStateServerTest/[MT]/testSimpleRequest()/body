{
  KvStateServer server=null;
  Bootstrap bootstrap=null;
  try {
    KvStateRegistry registry=new KvStateRegistry();
    KvStateRequestStats stats=new AtomicKvStateRequestStats();
    server=new KvStateServer(InetAddress.getLocalHost(),0,1,1,registry,stats);
    server.start();
    KvStateServerAddress serverAddress=server.getAddress();
    int numKeyGroups=1;
    AbstractStateBackend abstractBackend=new MemoryStateBackend();
    DummyEnvironment dummyEnv=new DummyEnvironment("test",1,0);
    dummyEnv.setKvStateRegistry(registry);
    AbstractKeyedStateBackend<Integer> backend=abstractBackend.createKeyedStateBackend(dummyEnv,new JobID(),"test_op",IntSerializer.INSTANCE,numKeyGroups,new KeyGroupRange(0,0),registry.createTaskRegistry(new JobID(),new JobVertexID()));
    final KvStateServerHandlerTest.TestRegistryListener registryListener=new KvStateServerHandlerTest.TestRegistryListener();
    registry.registerListener(registryListener);
    ValueStateDescriptor<Integer> desc=new ValueStateDescriptor<>("any",IntSerializer.INSTANCE,null);
    desc.setQueryable("vanilla");
    ValueState<Integer> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
    int expectedValue=712828289;
    int key=99812822;
    backend.setCurrentKey(key);
    state.update(expectedValue);
    byte[] serializedKeyAndNamespace=KvStateRequestSerializer.serializeKeyAndNamespace(key,IntSerializer.INSTANCE,VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE);
    final BlockingQueue<ByteBuf> responses=new LinkedBlockingQueue<>();
    bootstrap=createBootstrap(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,0,4,0,4),new ChannelInboundHandlerAdapter(){
      @Override public void channelRead(      ChannelHandlerContext ctx,      Object msg) throws Exception {
        responses.add((ByteBuf)msg);
      }
    }
);
    Channel channel=bootstrap.connect(serverAddress.getHost(),serverAddress.getPort()).sync().channel();
    long requestId=Integer.MAX_VALUE + 182828L;
    assertTrue(registryListener.registrationName.equals("vanilla"));
    ByteBuf request=KvStateRequestSerializer.serializeKvStateRequest(channel.alloc(),requestId,registryListener.kvStateId,serializedKeyAndNamespace);
    channel.writeAndFlush(request);
    ByteBuf buf=responses.poll(TIMEOUT_MILLIS,TimeUnit.MILLISECONDS);
    assertEquals(KvStateRequestType.REQUEST_RESULT,KvStateRequestSerializer.deserializeHeader(buf));
    KvStateRequestResult response=KvStateRequestSerializer.deserializeKvStateRequestResult(buf);
    assertEquals(requestId,response.getRequestId());
    int actualValue=KvStateRequestSerializer.deserializeValue(response.getSerializedResult(),IntSerializer.INSTANCE);
    assertEquals(expectedValue,actualValue);
  }
  finally {
    if (server != null) {
      server.shutDown();
    }
    if (bootstrap != null) {
      EventLoopGroup group=bootstrap.group();
      if (group != null) {
        group.shutdownGracefully();
      }
    }
  }
}
