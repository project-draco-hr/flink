{
  final PactRecord[] valBuffer=new PactRecord[VALUE_BUFFER_SIZE];
  int bufferValCnt;
  for (bufferValCnt=0; bufferValCnt < VALUE_BUFFER_SIZE; bufferValCnt++) {
    if (values.hasNext()) {
      valBuffer[bufferValCnt]=values.next().createCopy();
    }
 else {
      break;
    }
  }
  for (int i=0; i < bufferValCnt; i++) {
    if (!this.running)     return;
    for (int j=i + 1; j < bufferValCnt; j++) {
      if (!this.running)       return;
      stub.match(valBuffer[i].createCopy(),valBuffer[j].createCopy(),out);
    }
  }
  if (this.running && values.hasNext()) {
    MutableObjectIterator<PactRecord> valReader=new MutableObjectIterator<PactRecord>(){
      @Override public boolean next(      PactRecord target) throws IOException {
        if (!running || !values.hasNext()) {
          return false;
        }
        values.next().copyTo(target);
        for (int i=0; i < VALUE_BUFFER_SIZE; i++) {
          try {
            stub.match(valBuffer[i].createCopy(),target.createCopy(),out);
          }
 catch (          Exception e) {
            exceptionInMatchForValReader=e;
            return false;
          }
        }
        return true;
      }
    }
;
    outerValResettableIterator=null;
    innerValResettableIterator=null;
    try {
      outerValResettableIterator=new SpillingResettableMutableObjectIterator(memoryManager,ioManager,valReader,(long)(availableMemory * (MEMORY_SHARE_RATIO / 2)),this);
      outerValResettableIterator.open();
      if (exceptionInMatchForValReader != null) {
        throw exceptionInMatchForValReader;
      }
      PactRecord outerRecord=new PactRecord();
      PactRecord innerRecord=new PactRecord();
      if (this.running) {
        innerValResettableIterator=new SpillingResettableMutableObjectIterator(memoryManager,ioManager,outerValResettableIterator,(long)(availableMemory * (MEMORY_SHARE_RATIO / 2)),this);
        innerValResettableIterator.open();
        outerValResettableIterator.reset();
        int outerConsumedRecordCnt=0;
        bufferValCnt=0;
        while (this.running && outerValResettableIterator.next(outerRecord)) {
          outerConsumedRecordCnt+=bufferValCnt;
          bufferValCnt=0;
          do {
            outerRecord.copyTo(valBuffer[bufferValCnt++]);
          }
 while (this.running && bufferValCnt < VALUE_BUFFER_SIZE && outerValResettableIterator.next(outerRecord));
          if (bufferValCnt == 0)           break;
          int innerConsumedRecordCnt=0;
          while (this.running && innerValResettableIterator.next(innerRecord)) {
            for (int i=0; i < bufferValCnt; i++) {
              if (outerConsumedRecordCnt + i < innerConsumedRecordCnt) {
                stub.match(valBuffer[i].createCopy(),innerRecord,out);
                if (i < bufferValCnt - 1)                 innerValResettableIterator.repeatLast(innerRecord);
              }
            }
            innerConsumedRecordCnt++;
          }
          innerValResettableIterator.reset();
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      if (innerValResettableIterator != null) {
        innerValResettableIterator.close();
      }
      if (outerValResettableIterator != null) {
        outerValResettableIterator.close();
      }
    }
  }
}
