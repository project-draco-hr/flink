{
  config=new TaskConfig(getRuntimeConfiguration());
  this.availableMemory=config.getMemorySize();
  this.maxFileHandles=config.getNumFilehandles();
  this.spillThreshold=config.getSortSpillingTreshold();
  long strategyMinMem=0;
switch (config.getLocalStrategy()) {
case SORT_SELF_NESTEDLOOP:
    strategyMinMem=MIN_REQUIRED_MEMORY * 2;
  break;
case SELF_NESTEDLOOP:
strategyMinMem=MIN_REQUIRED_MEMORY;
break;
}
if (this.availableMemory < strategyMinMem) {
throw new RuntimeException("The SelfMatch task was initialized with too little memory for local strategy " + config.getLocalStrategy() + " : "+ this.availableMemory+ " bytes."+ "Required is at least "+ strategyMinMem+ " bytes.");
}
try {
ClassLoader cl=LibraryCacheManager.getClassLoader(getEnvironment().getJobID());
Class<? extends MatchStub> stubClass=config.getStubClass(MatchStub.class,cl);
stub=stubClass.newInstance();
config.getStubParameters().setInteger(TASK_ID,getEnvironment().getIndexInSubtaskGroup());
stub.configure(config.getStubParameters());
this.keySerialization=new WritableSerializationFactory<Key>(stub.getFirstInKeyType());
this.valSerialization=new WritableSerializationFactory<Value>(stub.getFirstInValueType());
}
 catch (IOException ioe) {
throw new RuntimeException("Library cache manager could not be instantiated.",ioe);
}
catch (ClassNotFoundException cnfe) {
throw new RuntimeException("Stub implementation class was not found.",cnfe);
}
catch (InstantiationException ie) {
throw new RuntimeException("Stub implementation could not be instanciated.",ie);
}
catch (IllegalAccessException iae) {
throw new RuntimeException("Stub implementations nullary constructor is not accessible.",iae);
}
}
