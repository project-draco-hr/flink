{
  final PactRecord[] valBuffer=new PactRecord[VALUE_BUFFER_SIZE];
  final Environment env=getEnvironment();
  final OutputCollector oc=(OutputCollector)out;
  int bufferValCnt;
  for (bufferValCnt=0; bufferValCnt < VALUE_BUFFER_SIZE; bufferValCnt++) {
    if (values.hasNext()) {
      valBuffer[bufferValCnt]=values.next().createCopy();
    }
 else {
      break;
    }
  }
  for (int i=0; i < bufferValCnt; i++) {
    if (!this.running)     return;
    for (int j=0; j < bufferValCnt; j++) {
      if (!this.running)       return;
      final PactRecord copy1=valBuffer[i].createCopy();
      final PactRecord copy2=valBuffer[j].createCopy();
      final long r1=copy1.getBinaryLength();
      final long r2=copy2.getBinaryLength();
      stub.match(copy1,copy2,out);
      env.reportPACTDataStatistics(r1 + r2,oc.getCollectedPactRecordsInBytes());
    }
  }
  if (this.running && values.hasNext()) {
    MutableObjectIterator<PactRecord> valReader=new MutableObjectIterator<PactRecord>(){
      @Override public boolean next(      PactRecord target) throws IOException {
        if (!running || !values.hasNext()) {
          return false;
        }
        values.next().copyTo(target);
        for (int i=0; i < VALUE_BUFFER_SIZE; i++) {
          try {
            final PactRecord copy1=valBuffer[i].createCopy();
            final PactRecord copy2=target.createCopy();
            final long r1=copy1.getBinaryLength();
            final long r2=copy2.getBinaryLength();
            stub.match(copy1,copy2,out);
            env.reportPACTDataStatistics(r1 + r2,oc.getCollectedPactRecordsInBytes());
          }
 catch (          Exception e) {
            exceptionInMatchForValReader=e;
            return false;
          }
        }
        return true;
      }
    }
;
    outerValResettableIterator=null;
    innerValResettableIterator=null;
    try {
      outerValResettableIterator=new SpillingResettableMutableObjectIterator(memoryManager,ioManager,valReader,(long)(availableMemory * (MEMORY_SHARE_RATIO / 2)),this);
      outerValResettableIterator.open();
      if (exceptionInMatchForValReader != null) {
        throw exceptionInMatchForValReader;
      }
      BufferIncludingIterator bii=new BufferIncludingIterator(valBuffer,outerValResettableIterator);
      PactRecord outerRecord=new PactRecord();
      PactRecord innerRecord=new PactRecord();
      if (this.running) {
        innerValResettableIterator=new SpillingResettableMutableObjectIterator(memoryManager,ioManager,bii,(long)(availableMemory * (MEMORY_SHARE_RATIO / 2)),this);
        innerValResettableIterator.open();
        outerValResettableIterator.reset();
        while (this.running && outerValResettableIterator.next(outerRecord)) {
          bufferValCnt=0;
          do {
            outerRecord.copyTo(valBuffer[bufferValCnt++]);
          }
 while (this.running && bufferValCnt < VALUE_BUFFER_SIZE && outerValResettableIterator.next(outerRecord));
          if (bufferValCnt == 0)           break;
          while (this.running && innerValResettableIterator.next(innerRecord)) {
            for (int i=0; i < bufferValCnt; i++) {
              final PactRecord copy1=valBuffer[i].createCopy();
              final long r1=copy1.getBinaryLength();
              final long r2=innerRecord.getBinaryLength();
              stub.match(copy1,innerRecord,out);
              env.reportPACTDataStatistics(r1 + r2,oc.getCollectedPactRecordsInBytes());
              if (i < bufferValCnt - 1)               innerValResettableIterator.repeatLast(innerRecord);
            }
          }
          innerValResettableIterator.reset();
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      if (innerValResettableIterator != null) {
        innerValResettableIterator.close();
      }
      if (outerValResettableIterator != null) {
        outerValResettableIterator.close();
      }
    }
  }
}
