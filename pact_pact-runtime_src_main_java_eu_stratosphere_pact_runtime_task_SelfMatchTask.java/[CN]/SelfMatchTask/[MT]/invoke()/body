{
  if (LOG.isInfoEnabled())   LOG.info(getLogString("Start PACT code"));
  if (LOG.isDebugEnabled())   LOG.debug(getLogString("Start obtaining iterator"));
  CloseableInputProvider<KeyValuePair<Key,Value>> sortedInputProvider=null;
  try {
    sortedInputProvider=obtainInput();
    if (LOG.isDebugEnabled())     LOG.debug(getLogString("Iterator obtained"));
    stub.open();
    KeyGroupedIterator<Key,Value> it=new KeyGroupedIterator<Key,Value>(sortedInputProvider.getIterator());
    while (!this.taskCanceled && it.nextKey()) {
      crossValues(it.getKey(),it.getValues(),output);
    }
  }
 catch (  Exception ex) {
    if (!this.taskCanceled) {
      if (LOG.isErrorEnabled())       LOG.error(getLogString("Unexpected ERROR in PACT code"));
      throw ex;
    }
  }
 finally {
    if (sortedInputProvider != null) {
      sortedInputProvider.close();
    }
    try {
      stub.close();
    }
 catch (    Throwable t) {
      if (LOG.isErrorEnabled())       LOG.error(getLogString("Error while closing the Match user function"),t);
    }
    output.close();
  }
  if (this.taskCanceled) {
    if (LOG.isWarnEnabled())     LOG.warn(getLogString("PACT code cancelled"));
  }
 else {
    if (LOG.isInfoEnabled())     LOG.info(getLogString("Finished PACT code"));
  }
}
