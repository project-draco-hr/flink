{
  final PactRecord[] valBuffer=new PactRecord[VALUE_BUFFER_SIZE];
  int bufferValCnt;
  for (bufferValCnt=0; bufferValCnt < VALUE_BUFFER_SIZE; bufferValCnt++) {
    if (values.hasNext()) {
      valBuffer[bufferValCnt]=values.next();
    }
 else {
      break;
    }
  }
  for (int i=0; i < bufferValCnt; i++) {
    if (!this.running)     return;
    for (int j=0; j < bufferValCnt; j++) {
      if (!this.running)       return;
      stub.match(valBuffer[i].createCopy(),valBuffer[j].createCopy(),out);
    }
  }
  if (this.running && values.hasNext()) {
    Iterator<Value> valReader=new Iterator<Value>(){
      @Override public boolean hasNext(){
        if (!running)         return false;
 else         return values.hasNext();
      }
      @Override public PactRecord next(){
        PactRecord nextVal=values.next();
        for (int i=0; i < VALUE_BUFFER_SIZE; i++) {
          stub.match(valBuffer[i].createCopy(),nextVal.createCopy(),out);
        }
        return nextVal;
      }
      @Override public void remove(){
        throw new UnsupportedOperationException();
      }
    }
;
    SpillingResettableIterator<Value> outerValResettableIterator=null;
    SpillingResettableIterator<Value> innerValResettableIterator=null;
    try {
      outerValResettableIterator=new SpillingResettableIterator<Value>(getEnvironment().getMemoryManager(),getEnvironment().getIOManager(),valReader,(long)(this.availableMemory * (MEMORY_SHARE_RATIO / 2)),v1Deserializer,this);
      outerValResettableIterator.open();
      BufferIncludingIterator bii=new BufferIncludingIterator(valBuffer,outerValResettableIterator);
      if (!this.taskCanceled && outerValResettableIterator.hasNext()) {
        innerValResettableIterator=new SpillingResettableIterator<Value>(getEnvironment().getMemoryManager(),getEnvironment().getIOManager(),bii,(long)(this.availableMemory * (MEMORY_SHARE_RATIO / 2)),v1Deserializer,this);
        innerValResettableIterator.open();
        outerValResettableIterator.reset();
        while (!this.taskCanceled && outerValResettableIterator.hasNext()) {
          bufferValCnt=0;
          while (!this.taskCanceled && outerValResettableIterator.hasNext() && bufferValCnt < VALUE_BUFFER_SIZE) {
            valBuffer[bufferValCnt++].setCopy(outerValResettableIterator.next());
          }
          if (bufferValCnt == 0)           break;
          while (!this.taskCanceled && innerValResettableIterator.hasNext()) {
            innerVal=innerValResettableIterator.next();
            for (int i=0; i < bufferValCnt; i++) {
              copyKey=keySerialization.newInstance();
              keyCopier.getCopy(copyKey);
              outerVal=valSerialization.newInstance();
              valBuffer[i].getCopy(outerVal);
              stub.match(copyKey,outerVal,innerVal,out);
              if (i < bufferValCnt - 1)               innerVal=innerValResettableIterator.repeatLast();
            }
          }
          innerValResettableIterator.reset();
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      if (innerValResettableIterator != null) {
        innerValResettableIterator.close();
      }
      if (outerValResettableIterator != null) {
        outerValResettableIterator.close();
      }
    }
  }
}
