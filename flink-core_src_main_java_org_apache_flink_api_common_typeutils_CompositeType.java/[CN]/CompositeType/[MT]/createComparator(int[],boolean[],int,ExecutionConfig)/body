{
  TypeComparatorBuilder<T> builder=createTypeComparatorBuilder();
  builder.initializeTypeComparatorBuilder(logicalKeyFields.length);
  for (int logicalKeyFieldIndex=0; logicalKeyFieldIndex < logicalKeyFields.length; logicalKeyFieldIndex++) {
    int logicalKeyField=logicalKeyFields[logicalKeyFieldIndex];
    int logicalField=logicalFieldOffset;
    boolean comparatorAdded=false;
    for (int localFieldId=0; localFieldId < this.getArity() && logicalField <= logicalKeyField && !comparatorAdded; localFieldId++) {
      TypeInformation<?> localFieldType=this.getTypeAt(localFieldId);
      if (localFieldType instanceof AtomicType && logicalField == logicalKeyField) {
        builder.addComparatorField(localFieldId,((AtomicType<?>)localFieldType).createComparator(orders[logicalKeyFieldIndex],config));
        comparatorAdded=true;
      }
 else       if (localFieldType instanceof CompositeType && logicalField <= logicalKeyField && logicalKeyField <= logicalField + (localFieldType.getTotalFields() - 1)) {
        builder.addComparatorField(localFieldId,((CompositeType<?>)localFieldType).createComparator(new int[]{logicalKeyField},new boolean[]{orders[logicalKeyFieldIndex]},logicalField,config));
        comparatorAdded=true;
      }
      if (localFieldType instanceof CompositeType) {
        logicalField+=localFieldType.getTotalFields() - 1;
      }
      logicalField++;
    }
    if (!comparatorAdded) {
      throw new IllegalArgumentException("Could not add a comparator for the logical" + "key field index " + logicalKeyFieldIndex + ".");
    }
  }
  return builder.createTypeComparator(config);
}
