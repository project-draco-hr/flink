{
  try {
    ActorGateway jobManager=retriever.getJobManagerGateway();
    if (jobManager != null) {
      Future<Object> future=jobManager.ask(JobManagerMessages.getRequestRegisteredTaskManagers(),timeout);
      RegisteredTaskManagers taskManagers=(RegisteredTaskManagers)Await.result(future,timeout);
      final List<Instance> instances=new ArrayList<Instance>(taskManagers.asJavaCollection());
      StringWriter writer=new StringWriter();
      JsonGenerator gen=JsonFactory.jacksonFactory.createJsonGenerator(writer);
      gen.writeStartObject();
      gen.writeArrayFieldStart("taskmanagers");
      for (      Instance instance : instances) {
        gen.writeStartObject();
        gen.writeStringField("id",instance.getId().toString());
        gen.writeStringField("path",instance.getActorGateway().path());
        gen.writeNumberField("dataPort",instance.getInstanceConnectionInfo().dataPort());
        gen.writeNumberField("timeSinceLastHeartbeat",instance.getLastHeartBeat());
        gen.writeNumberField("slotsNumber",instance.getTotalNumberOfSlots());
        gen.writeNumberField("freeSlots",instance.getNumberOfAvailableSlots());
        gen.writeNumberField("cpuCores",instance.getResources().getNumberOfCPUCores());
        gen.writeNumberField("physicalMemory",instance.getResources().getSizeOfPhysicalMemory());
        gen.writeNumberField("freeMemory",instance.getResources().getSizeOfJvmHeap());
        gen.writeNumberField("managedMemory",instance.getResources().getSizeOfManagedMemory());
        byte[] report=instance.getLastMetricsReport();
        if (report != null) {
          gen.writeFieldName("metrics");
          gen.writeRawValue(new String(report,"utf-8"));
        }
        gen.writeEndObject();
      }
      gen.writeEndArray();
      gen.writeEndObject();
      gen.close();
      return writer.toString();
    }
 else {
      throw new Exception("No connection to the leading JobManager.");
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to fetch list of all task managers: " + e.getMessage(),e);
  }
}
