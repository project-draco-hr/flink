{
  if (logicalKeyFields == null || orders == null || logicalKeyFields.length != orders.length || logicalKeyFields.length > fields.length) {
    throw new IllegalArgumentException();
  }
  TypeComparator<?>[] fieldComparators=new TypeComparator<?>[logicalKeyFields.length];
  Field[] keyFields=new Field[logicalKeyFields.length];
  for (int i=0; i < logicalKeyFields.length; i++) {
    int field=logicalKeyFields[i];
    if (field < 0 || field >= fields.length) {
      throw new IllegalArgumentException("The field position " + field + " is out of range [0,"+ fields.length+ ")");
    }
    if (fields[field].type.isKeyType() && fields[field].type instanceof AtomicType) {
      fieldComparators[i]=((AtomicType<?>)fields[field].type).createComparator(orders[i]);
      keyFields[i]=fields[field].field;
      keyFields[i].setAccessible(true);
    }
 else {
      throw new IllegalArgumentException("The field at position " + field + " ("+ fields[field].type+ ") is no atomic key type.");
    }
  }
  return new PojoComparator<T>(keyFields,fieldComparators,createSerializer(),typeClass);
}
