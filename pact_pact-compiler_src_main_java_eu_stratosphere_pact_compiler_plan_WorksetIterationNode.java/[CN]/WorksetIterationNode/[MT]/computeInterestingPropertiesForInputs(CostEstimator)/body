{
  RequestedGlobalProperties partitionedProperties=new RequestedGlobalProperties();
  partitionedProperties.setHashPartitioned(this.solutionSetKeyFields);
  InterestingProperties partitionedIP=new InterestingProperties();
  partitionedIP.addGlobalProperties(partitionedProperties);
  this.nextWorksetRootConnection.setInterestingProperties(new InterestingProperties());
  this.solutionSetDeltaRootConnection.setInterestingProperties(partitionedIP.clone());
  InterestingPropertyVisitor ipv=new InterestingPropertyVisitor(estimator);
  this.nextWorkset.accept(ipv);
  this.solutionSetDelta.accept(ipv);
  InterestingProperties worksetIntProps=this.worksetNode.getInterestingProperties();
  InterestingProperties intProps=new InterestingProperties();
  intProps.getGlobalProperties().addAll(worksetIntProps.getGlobalProperties());
  intProps.getLocalProperties().addAll(worksetIntProps.getLocalProperties());
  this.nextWorksetRootConnection.clearInterestingProperties();
  this.nextWorkset.accept(InterestingPropertiesClearer.INSTANCE);
  this.nextWorksetRootConnection.setInterestingProperties(intProps);
  this.nextWorkset.accept(ipv);
  final InterestingProperties inProps=this.worksetNode.getInterestingProperties().clone();
  inProps.addGlobalProperties(new RequestedGlobalProperties());
  inProps.addLocalProperties(new RequestedLocalProperties());
  this.input2.setInterestingProperties(inProps);
  this.input1.setInterestingProperties(partitionedIP);
}
