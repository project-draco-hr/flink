{
  final SopremoPlan actualPlan=this.parseScript("$employees = read from 'employees.json';\n" + "$depts = read from 'departments.json';\n" + "$result = group $es in $employees by $es.dept,\n"+ "	$ds in $depts by $ds.did into {\n"+ "	dept: $ds.did,\n"+ "	deptName: $ds[0].name,\n"+ "	emps: $es[*].id,\n"+ "	numEmps: count($es) \n"+ "};\n"+ "write $result to 'output.json'; ");
  final SopremoPlan expectedPlan=new SopremoPlan();
  final Source employees=new Source("employees.json");
  final Source depts=new Source("departments.json");
  final Grouping selection=new Grouping().withInputs(employees,depts).withGroupingKey(0,JsonUtil.createPath("0","dept")).withGroupingKey(1,JsonUtil.createPath("1","did")).withResultProjection(new ObjectCreation(new ObjectCreation.FieldAssignment("dept",JsonUtil.createPath("1","did")),new ObjectCreation.FieldAssignment("deptName",JsonUtil.createPath("1","[0]","name")),new ObjectCreation.FieldAssignment("emps",JsonUtil.createPath("0","[*]","id")),new ObjectCreation.FieldAssignment("numEmps",new MethodCall("count",JsonUtil.createPath("0")))));
  final Sink output=new Sink("output.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
