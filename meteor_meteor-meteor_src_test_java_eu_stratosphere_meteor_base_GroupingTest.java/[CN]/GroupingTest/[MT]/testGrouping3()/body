{
  final SopremoPlan actualPlan=this.parseScript("$employees = read from 'employees.json';\n" + "$result = group $employee in $employees by $employee.dept into {\n" + "	$employee[0].dept, \n"+ "	total: sum($employee[*].income) \n"+ "};\n"+ "write $result to 'output.json'; ");
  final SopremoPlan expectedPlan=new SopremoPlan();
  final EvaluationContext context=expectedPlan.getEvaluationContext();
  context.getFunctionRegistry().put(CoreFunctions.class);
  final Source input=new Source("employees.json");
  final Grouping selection=new Grouping().withInputs(input).withGroupingKey(JsonUtil.createPath("0","dept")).withResultProjection(new ObjectCreation(new ObjectCreation.FieldAssignment("dept",JsonUtil.createPath("0","[0]","dept")),new ObjectCreation.FieldAssignment("total",new FunctionCall("sum",context,JsonUtil.createPath("0","[*]","income")))));
  final Sink output=new Sink("output.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
