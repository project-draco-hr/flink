{
  final Object groupObject=this.channelGroupMap.get(sourceChannelID);
  if (groupObject == null) {
    if (this.canceledChannels.contains(sourceChannelID)) {
      return;
    }
 else {
      throw new IOException("Cannot find input gate for source channel ID " + sourceChannelID);
    }
  }
  WritableSpillingFile writableSpillingFile=null;
  boolean removed=false;
synchronized (this.writableSpillingFileMap) {
    writableSpillingFile=this.writableSpillingFileMap.get(groupObject);
    if (writableSpillingFile == null) {
      throw new IOException("Cannot find writable spilling file for group object " + groupObject);
    }
    writableSpillingFile.unlockWritableFileChannel(currentFileSize);
    if (writableSpillingFile.isReadRequested() && writableSpillingFile.isSafeToClose()) {
      this.writableSpillingFileMap.remove(groupObject);
      removed=true;
    }
  }
  if (removed) {
    writableSpillingFile.close();
    Queue<ReadableSpillingFile> queue=null;
synchronized (this.readableSpillingFileMap) {
      queue=this.readableSpillingFileMap.get(groupObject);
      if (queue == null) {
        queue=new ArrayDeque<ReadableSpillingFile>(1);
        this.readableSpillingFileMap.put(groupObject,queue);
      }
    }
synchronized (queue) {
      queue.add(new ReadableSpillingFile(writableSpillingFile.getPhysicalFile()));
      queue.notify();
    }
  }
}
