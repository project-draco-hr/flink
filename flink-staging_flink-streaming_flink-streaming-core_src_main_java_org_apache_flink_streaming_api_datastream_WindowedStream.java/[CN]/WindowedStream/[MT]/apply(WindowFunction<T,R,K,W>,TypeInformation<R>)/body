{
  function=input.getExecutionEnvironment().clean(function);
  String callLocation=Utils.getCallLocationName();
  String udfName="WindowApply at " + callLocation;
  SingleOutputStreamOperator<R,?> result=createFastTimeOperatorIfValid(function,resultType,udfName);
  if (result != null) {
    return result;
  }
  String opName="TriggerWindow(" + windowAssigner + ", "+ trigger+ ", "+ udfName+ ")";
  KeySelector<T,K> keySel=input.getKeySelector();
  WindowOperator<K,T,R,W> operator;
  boolean setProcessingTime=input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime;
  if (evictor != null) {
    operator=new EvictingWindowOperator<>(windowAssigner,windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),keySel,input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),new HeapWindowBuffer.Factory<T>(),function,trigger,evictor).enableSetProcessingTime(setProcessingTime);
  }
 else {
    operator=new WindowOperator<>(windowAssigner,windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),keySel,input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),new HeapWindowBuffer.Factory<T>(),function,trigger).enableSetProcessingTime(setProcessingTime);
  }
  return input.transform(opName,resultType,operator);
}
