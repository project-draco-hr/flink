{
  if (windowAssigner instanceof SlidingTimeWindows && trigger instanceof ProcessingTimeTrigger && evictor == null) {
    SlidingTimeWindows timeWindows=(SlidingTimeWindows)windowAssigner;
    final long windowLength=timeWindows.getSize();
    final long windowSlide=timeWindows.getSlide();
    String opName="Fast " + timeWindows + " of "+ functionName;
    if (function instanceof ReduceFunction) {
      @SuppressWarnings("unchecked") ReduceFunction<T> reducer=(ReduceFunction<T>)function;
      @SuppressWarnings("unchecked") OneInputStreamOperator<T,R> op=(OneInputStreamOperator<T,R>)new AggregatingProcessingTimeWindowOperator<>(reducer,input.getKeySelector(),windowLength,windowSlide);
      return input.transform(opName,resultType,op);
    }
 else     if (function instanceof WindowFunction) {
      @SuppressWarnings("unchecked") WindowFunction<T,R,K,TimeWindow> wf=(WindowFunction<T,R,K,TimeWindow>)function;
      OneInputStreamOperator<T,R> op=new AccumulatingProcessingTimeWindowOperator<>(wf,input.getKeySelector(),windowLength,windowSlide);
      return input.transform(opName,resultType,op);
    }
  }
 else   if (windowAssigner instanceof TumblingTimeWindows && trigger instanceof ProcessingTimeTrigger && evictor == null) {
    TumblingTimeWindows timeWindows=(TumblingTimeWindows)windowAssigner;
    final long windowLength=timeWindows.getSize();
    final long windowSlide=timeWindows.getSize();
    String opName="Fast " + timeWindows + " of "+ functionName;
    if (function instanceof ReduceFunction) {
      @SuppressWarnings("unchecked") ReduceFunction<T> reducer=(ReduceFunction<T>)function;
      @SuppressWarnings("unchecked") OneInputStreamOperator<T,R> op=(OneInputStreamOperator<T,R>)new AggregatingProcessingTimeWindowOperator<>(reducer,input.getKeySelector(),windowLength,windowSlide);
      return input.transform(opName,resultType,op);
    }
 else     if (function instanceof WindowFunction) {
      @SuppressWarnings("unchecked") WindowFunction<T,R,K,TimeWindow> wf=(WindowFunction<T,R,K,TimeWindow>)function;
      OneInputStreamOperator<T,R> op=new AccumulatingProcessingTimeWindowOperator<>(wf,input.getKeySelector(),windowLength,windowSlide);
      return input.transform(opName,resultType,op);
    }
  }
  return null;
}
