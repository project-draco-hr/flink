{
  if (this.headSequenceNumber == -1) {
    return 0;
  }
  if (this.headSequenceNumber == this.tailSequenceNumber) {
    final Buffer buffer=(Buffer)this.bufferRef;
    if (buffer == null) {
      return 0;
    }
    if (buffer.isBackedByMemory()) {
      return 0;
    }
    final int size=buffer.size();
    final Buffer memBuffer=bufferProvider.requestEmptyBuffer(size);
    if (memBuffer == null) {
      return 0;
    }
    buffer.copyToBuffer(memBuffer);
    this.bufferRef=memBuffer;
    buffer.recycleBuffer();
    return size;
  }
  @SuppressWarnings("unchecked") final Queue<Object> bufferQueue=(Queue<Object>)this.bufferRef;
  final int queueSize=bufferQueue.size();
  int usedMemory=0;
  int count=0;
  while (count++ < queueSize) {
    final Object obj=bufferQueue.poll();
    if (obj == NULL_OBJECT) {
      bufferQueue.add(obj);
      continue;
    }
    final Buffer buffer=(Buffer)obj;
    if (buffer.isBackedByMemory()) {
      bufferQueue.add(buffer);
      continue;
    }
    final int size=buffer.size();
    final Buffer memBuffer=bufferProvider.requestEmptyBuffer(size);
    if (memBuffer != null) {
      buffer.copyToBuffer(memBuffer);
      bufferQueue.add(memBuffer);
      buffer.recycleBuffer();
    }
 else {
      bufferQueue.add(buffer);
      continue;
    }
    usedMemory+=size;
  }
  return usedMemory;
}
