{
  if (this.headSequenceNumber == -1) {
    return 0;
  }
  if (this.headSequenceNumber == this.tailSequenceNumber) {
    final Buffer buffer=(Buffer)this.bufferRef;
    if (buffer == null) {
      return 0;
    }
    if (!buffer.isBackedByMemory()) {
      return 0;
    }
    final int size=buffer.size();
    final Buffer fileBuffer=BufferFactory.createFromFile(size,ownerID,fileBufferManager);
    buffer.copyToBuffer(fileBuffer);
    this.bufferRef=fileBuffer;
    buffer.recycleBuffer();
    return size;
  }
  @SuppressWarnings("unchecked") final Queue<Object> bufferQueue=(Queue<Object>)this.bufferRef;
  final int queueSize=bufferQueue.size();
  int reclaimedMemory=0;
  int count=0;
  while (count++ < queueSize) {
    final Object obj=bufferQueue.poll();
    if (obj == NULL_OBJECT) {
      bufferQueue.add(obj);
      continue;
    }
    final Buffer buffer=(Buffer)obj;
    if (!buffer.isBackedByMemory()) {
      bufferQueue.add(buffer);
      continue;
    }
    final int size=buffer.size();
    final Buffer fileBuffer=BufferFactory.createFromFile(size,ownerID,fileBufferManager);
    buffer.copyToBuffer(fileBuffer);
    bufferQueue.add(fileBuffer);
    buffer.recycleBuffer();
    reclaimedMemory+=size;
  }
  return reclaimedMemory;
}
