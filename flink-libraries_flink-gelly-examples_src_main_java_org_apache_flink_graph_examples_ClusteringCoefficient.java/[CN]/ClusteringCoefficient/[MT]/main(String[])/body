{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().enableObjectReuse();
  ParameterTool parameters=ParameterTool.fromArgs(args);
  if (!parameters.has("directed")) {
    printUsage();
    return;
  }
  boolean directedAlgorithm=parameters.getBoolean("directed");
  int little_parallelism=parameters.getInt("little_parallelism",PARALLELISM_DEFAULT);
  GraphAnalytic gcc;
  DataSet lcc;
switch (parameters.get("input","")) {
case "csv":
{
      String lineDelimiter=StringEscapeUtils.unescapeJava(parameters.get("input_line_delimiter",CsvOutputFormat.DEFAULT_LINE_DELIMITER));
      String fieldDelimiter=StringEscapeUtils.unescapeJava(parameters.get("input_field_delimiter",CsvOutputFormat.DEFAULT_FIELD_DELIMITER));
      GraphCsvReader reader=Graph.fromCsvReader(parameters.get("input_filename"),env).ignoreCommentsEdges("#").lineDelimiterEdges(lineDelimiter).fieldDelimiterEdges(fieldDelimiter);
switch (parameters.get("type","")) {
case "integer":
{
          Graph<LongValue,NullValue,NullValue> graph=reader.keyType(LongValue.class);
          if (directedAlgorithm) {
            gcc=graph.run(new org.apache.flink.graph.library.clustering.directed.GlobalClusteringCoefficient<LongValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
            lcc=graph.run(new org.apache.flink.graph.library.clustering.directed.LocalClusteringCoefficient<LongValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
          }
 else {
            gcc=graph.run(new org.apache.flink.graph.library.clustering.undirected.GlobalClusteringCoefficient<LongValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
            lcc=graph.run(new org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient<LongValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
          }
        }
      break;
case "string":
{
      Graph<StringValue,NullValue,NullValue> graph=reader.keyType(StringValue.class);
      if (directedAlgorithm) {
        gcc=graph.run(new org.apache.flink.graph.library.clustering.directed.GlobalClusteringCoefficient<StringValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
        lcc=graph.run(new org.apache.flink.graph.library.clustering.directed.LocalClusteringCoefficient<StringValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
      }
 else {
        gcc=graph.run(new org.apache.flink.graph.library.clustering.undirected.GlobalClusteringCoefficient<StringValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
        lcc=graph.run(new org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient<StringValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
      }
    }
  break;
default :
printUsage();
return;
}
}
break;
case "rmat":
{
int scale=parameters.getInt("scale",DEFAULT_SCALE);
int edgeFactor=parameters.getInt("edge_factor",DEFAULT_EDGE_FACTOR);
RandomGenerableFactory<JDKRandomGenerator> rnd=new JDKRandomGeneratorFactory();
long vertexCount=1L << scale;
long edgeCount=vertexCount * edgeFactor;
Graph<LongValue,NullValue,NullValue> graph=new RMatGraph<>(env,rnd,vertexCount,edgeCount).setParallelism(little_parallelism).generate();
if (directedAlgorithm) {
if (scale > 32) {
Graph<LongValue,NullValue,NullValue> newGraph=graph.run(new org.apache.flink.graph.asm.simple.directed.Simplify<LongValue,NullValue,NullValue>().setParallelism(little_parallelism));
gcc=newGraph.run(new org.apache.flink.graph.library.clustering.directed.GlobalClusteringCoefficient<LongValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
lcc=newGraph.run(new org.apache.flink.graph.library.clustering.directed.LocalClusteringCoefficient<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(false).setLittleParallelism(little_parallelism));
}
 else {
Graph<IntValue,NullValue,NullValue> newGraph=graph.run(new TranslateGraphIds<LongValue,IntValue,NullValue,NullValue>(new LongValueToUnsignedIntValue()).setParallelism(little_parallelism)).run(new org.apache.flink.graph.asm.simple.directed.Simplify<IntValue,NullValue,NullValue>().setParallelism(little_parallelism));
gcc=newGraph.run(new org.apache.flink.graph.library.clustering.directed.GlobalClusteringCoefficient<IntValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
lcc=newGraph.run(new org.apache.flink.graph.library.clustering.directed.LocalClusteringCoefficient<IntValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(false).setLittleParallelism(little_parallelism));
}
}
 else {
boolean clipAndFlip=parameters.getBoolean("clip_and_flip",DEFAULT_CLIP_AND_FLIP);
if (scale > 32) {
Graph<LongValue,NullValue,NullValue> newGraph=graph.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<LongValue,NullValue,NullValue>(clipAndFlip).setParallelism(little_parallelism));
gcc=newGraph.run(new org.apache.flink.graph.library.clustering.undirected.GlobalClusteringCoefficient<LongValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
lcc=newGraph.run(new org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient<LongValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(false).setLittleParallelism(little_parallelism));
}
 else {
Graph<IntValue,NullValue,NullValue> newGraph=graph.run(new TranslateGraphIds<LongValue,IntValue,NullValue,NullValue>(new LongValueToUnsignedIntValue()).setParallelism(little_parallelism)).run(new org.apache.flink.graph.asm.simple.undirected.Simplify<IntValue,NullValue,NullValue>(clipAndFlip).setParallelism(little_parallelism));
gcc=newGraph.run(new org.apache.flink.graph.library.clustering.undirected.GlobalClusteringCoefficient<IntValue,NullValue,NullValue>().setLittleParallelism(little_parallelism));
lcc=newGraph.run(new org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient<IntValue,NullValue,NullValue>().setIncludeZeroDegreeVertices(false).setLittleParallelism(little_parallelism));
}
}
}
break;
default :
printUsage();
return;
}
switch (parameters.get("output","")) {
case "print":
if (directedAlgorithm) {
for (Object e : lcc.collect()) {
org.apache.flink.graph.library.clustering.directed.LocalClusteringCoefficient.Result result=(org.apache.flink.graph.library.clustering.directed.LocalClusteringCoefficient.Result)e;
System.out.println(result.toVerboseString());
}
}
 else {
for (Object e : lcc.collect()) {
org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient.Result result=(org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient.Result)e;
System.out.println(result.toVerboseString());
}
}
System.out.println(gcc.getResult());
break;
case "hash":
System.out.println(DataSetUtils.checksumHashCode(lcc));
System.out.println(gcc.getResult());
break;
case "csv":
String filename=parameters.get("output_filename");
String lineDelimiter=StringEscapeUtils.unescapeJava(parameters.get("output_line_delimiter",CsvOutputFormat.DEFAULT_LINE_DELIMITER));
String fieldDelimiter=StringEscapeUtils.unescapeJava(parameters.get("output_field_delimiter",CsvOutputFormat.DEFAULT_FIELD_DELIMITER));
lcc.writeAsCsv(filename,lineDelimiter,fieldDelimiter);
System.out.println(gcc.execute());
break;
default :
printUsage();
return;
}
JobExecutionResult result=env.getLastJobExecutionResult();
NumberFormat nf=NumberFormat.getInstance();
System.out.println("Execution runtime: " + nf.format(result.getNetRuntime()) + " ms");
}
