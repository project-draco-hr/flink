{
  final TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
  final ArrayList<MemorySegment> memory=new ArrayList<MemorySegment>(NUM_MEMORY_SEGMENTS);
  this.memoryManager.allocatePages(this.parentTask,memory,NUM_MEMORY_SEGMENTS);
  final SpillingBuffer outView=new SpillingBuffer(this.ioManager,new ListMemorySegmentSource(memory),this.memoryManager.getPageSize());
  final PactRecord rec=new PactRecord();
  for (int i=0; i < NUM_PAIRS_INMEM; i++) {
    generator.next(rec);
    rec.write(outView);
  }
  DataInputViewV2 inView=outView.flip();
  generator.reset();
  final PactRecord readRec=new PactRecord();
  try {
    for (int i=0; i < NUM_PAIRS_INMEM + 1; i++) {
      generator.next(rec);
      readRec.read(inView);
      Key k1=rec.getField(0,Key.class);
      Value v1=rec.getField(1,Value.class);
      Key k2=readRec.getField(0,Key.class);
      Value v2=readRec.getField(1,Value.class);
      Assert.assertTrue("The re-generated and the read record do not match.",k1.equals(k2) && v1.equals(v2));
    }
    Assert.fail("Read too much, expected EOFException.");
  }
 catch (  EOFException eofex) {
  }
  inView=outView.flip();
  generator.reset();
  for (int i=0; i < NUM_PAIRS_INMEM; i++) {
    generator.next(rec);
    readRec.read(inView);
    Key k1=rec.getField(0,Key.class);
    Value v1=rec.getField(1,Value.class);
    Key k2=readRec.getField(0,Key.class);
    Value v2=readRec.getField(1,Value.class);
    Assert.assertTrue("The re-generated and the read record do not match.",k1.equals(k2) && v1.equals(v2));
  }
  this.memoryManager.release(outView.close());
  this.memoryManager.release(memory);
}
