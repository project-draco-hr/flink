{
  checkNotClosed();
  LOG.debug("Requesting subpartition {} of partition {} with {} ms delay.",subpartitionIndex,partitionId,delayMs);
  partitionRequestHandler.addInputChannel(inputChannel);
  final PartitionRequest request=new PartitionRequest(partitionId,subpartitionIndex,inputChannel.getInputChannelId());
  final ChannelFutureListener listener=new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      if (!future.isSuccess()) {
        partitionRequestHandler.removeInputChannel(inputChannel);
        inputChannel.onError(new LocalTransportException("Sending the partition request failed.",future.cause()));
      }
    }
  }
;
  if (delayMs == 0) {
    ChannelFuture f=tcpChannel.writeAndFlush(request);
    f.addListener(listener);
    return f;
  }
 else {
    final ChannelFuture[] f=new ChannelFuture[1];
    tcpChannel.eventLoop().schedule(new Runnable(){
      @Override public void run(){
        f[0]=tcpChannel.writeAndFlush(request);
        f[0].addListener(listener);
      }
    }
,delayMs,TimeUnit.MILLISECONDS);
    return f[0];
  }
}
