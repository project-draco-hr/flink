{
  HadoopTupleUnwrappingIterator<IntWritable,IntWritable> valIt=new HadoopTupleUnwrappingIterator<IntWritable,IntWritable>(new WritableSerializer<IntWritable>(IntWritable.class));
  ArrayList<Tuple2<IntWritable,IntWritable>> tList=new ArrayList<Tuple2<IntWritable,IntWritable>>();
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(1),new IntWritable(1)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(1),new IntWritable(2)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(1),new IntWritable(3)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(1),new IntWritable(4)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(1),new IntWritable(5)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(1),new IntWritable(6)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(1),new IntWritable(7)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(1),new IntWritable(8)));
  int expectedKey=1;
  int[] expectedValues=new int[]{1,2,3,4,5,6,7,8};
  valIt.set(tList.iterator());
  Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  for (  int expectedValue : expectedValues) {
    Assert.assertTrue(valIt.hasNext());
    Assert.assertTrue(valIt.hasNext());
    Assert.assertTrue(valIt.next().get() == expectedValue);
    Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  }
  Assert.assertFalse(valIt.hasNext());
  Assert.assertFalse(valIt.hasNext());
  Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  tList.clear();
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(2),new IntWritable(10)));
  expectedKey=2;
  expectedValues=new int[]{10};
  valIt.set(tList.iterator());
  Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  for (  int expectedValue : expectedValues) {
    Assert.assertTrue(valIt.hasNext());
    Assert.assertTrue(valIt.hasNext());
    Assert.assertTrue(valIt.next().get() == expectedValue);
    Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  }
  Assert.assertFalse(valIt.hasNext());
  Assert.assertFalse(valIt.hasNext());
  Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  tList.clear();
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(3),new IntWritable(10)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(3),new IntWritable(4)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(3),new IntWritable(7)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(3),new IntWritable(9)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(4),new IntWritable(21)));
  expectedKey=3;
  expectedValues=new int[]{10,4,7,9,21};
  valIt.set(tList.iterator());
  Assert.assertTrue(valIt.hasNext());
  Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  for (  int expectedValue : expectedValues) {
    Assert.assertTrue(valIt.hasNext());
    Assert.assertTrue(valIt.hasNext());
    Assert.assertTrue(valIt.next().get() == expectedValue);
    Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  }
  Assert.assertFalse(valIt.hasNext());
  Assert.assertFalse(valIt.hasNext());
  Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  tList.clear();
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(4),new IntWritable(5)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(4),new IntWritable(8)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(4),new IntWritable(42)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(4),new IntWritable(-1)));
  tList.add(new Tuple2<IntWritable,IntWritable>(new IntWritable(4),new IntWritable(0)));
  expectedKey=4;
  expectedValues=new int[]{5,8,42,-1,0};
  valIt.set(tList.iterator());
  Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
  for (  int expectedValue : expectedValues) {
    Assert.assertTrue(valIt.next().get() == expectedValue);
  }
  try {
    valIt.next();
    Assert.fail();
  }
 catch (  NoSuchElementException nsee) {
  }
  Assert.assertFalse(valIt.hasNext());
  Assert.assertTrue(valIt.getCurrentKey().get() == expectedKey);
}
