{
  CompilerHints hints=getPactContract().getCompilerHints();
  OutputContract oc=getOutputContract();
  if (oc == OutputContract.UniqueKey) {
    hints.setAvgNumValuesPerKey(1.0f);
  }
  this.estimatedOutputSize=-1;
  this.estimatedNumRecords=-1;
  this.estimatedKeyCardinality=-1;
  if (statistics != null) {
    InputFormat<?,?,?> format=null;
    String inFormatDescription="<unknown>";
    try {
      Class<? extends InputFormat<?,?,?>> formatClass=getPactContract().getFormatClass();
      format=formatClass.newInstance();
      format.configure(getPactContract().getParameters());
    }
 catch (    Throwable t) {
      if (PactCompiler.LOG.isWarnEnabled())       PactCompiler.LOG.warn("Could not instantiate input format to obtain statistics." + " Limited statistics will be available.",t);
      return;
    }
    try {
      inFormatDescription=format.toString();
    }
 catch (    Throwable t) {
    }
    final String statisticsKey=getPactContract().getParameters().getString(InputFormat.STATISTICS_CACHE_KEY,null);
    final BaseStatistics cachedStatistics=statistics.getBaseStatistics(statisticsKey);
    BaseStatistics bs=null;
    try {
      bs=format.getStatistics(cachedStatistics);
    }
 catch (    Throwable t) {
      if (PactCompiler.LOG.isWarnEnabled())       PactCompiler.LOG.warn("Error obtaining statistics from input format: " + t.getMessage(),t);
    }
    if (bs != null) {
      final long len=bs.getTotalInputSize();
      if (len == BaseStatistics.UNKNOWN) {
        if (PactCompiler.LOG.isWarnEnabled())         PactCompiler.LOG.warn("Pact compiler could not determine the size of input '" + inFormatDescription + "'.");
      }
 else       if (len >= 0) {
        this.estimatedOutputSize=len;
      }
      final float avgBytes=bs.getAverageRecordWidth();
      if (avgBytes > 0.0f && hints.getAvgBytesPerRecord() < 1.0f) {
        hints.setAvgBytesPerRecord(avgBytes);
      }
      final long card=bs.getNumberOfRecords();
      if (card != BaseStatistics.UNKNOWN) {
        this.estimatedNumRecords=card;
      }
    }
  }
  if (this.estimatedNumRecords == -1 && hints.getAvgBytesPerRecord() >= 1.0f && this.estimatedOutputSize > 0) {
    this.estimatedNumRecords=(long)(this.estimatedOutputSize / hints.getAvgBytesPerRecord()) + 1;
  }
  if (hints.getKeyCardinality() < 1) {
    this.estimatedKeyCardinality=this.estimatedNumRecords;
  }
 else {
    this.estimatedKeyCardinality=hints.getKeyCardinality();
    if (this.estimatedNumRecords == -1 && hints.getAvgNumValuesPerKey() >= 1.0f) {
      this.estimatedNumRecords=(long)(this.estimatedKeyCardinality * hints.getAvgNumValuesPerKey()) + 1;
      if (this.estimatedOutputSize == -1 && hints.getAvgBytesPerRecord() >= 1.0f) {
        this.estimatedOutputSize=(long)(this.estimatedNumRecords * hints.getAvgBytesPerRecord()) + 1;
      }
    }
  }
}
