{
  CompilerHints hints=getPactContract().getCompilerHints();
  this.estimatedOutputSize=-1;
  this.inputSize=-1;
  this.estimatedNumRecords=-1;
  if (statistics != null) {
    InputFormat<?,?> format=null;
    String inFormatDescription="<unknown>";
    try {
      Class<? extends InputFormat<?,?>> formatClass=getPactContract().getFormatClass();
      format=formatClass.newInstance();
      format.configure(getPactContract().getParameters());
    }
 catch (    Throwable t) {
      if (PactCompiler.LOG.isWarnEnabled())       PactCompiler.LOG.warn("Could not instantiate input format to obtain statistics." + " Limited statistics will be available.",t);
      return;
    }
    try {
      inFormatDescription=format.toString();
    }
 catch (    Throwable t) {
    }
    final String statisticsKey=getPactContract().getParameters().getString(InputFormat.STATISTICS_CACHE_KEY,null);
    final BaseStatistics cachedStatistics=statistics.getBaseStatistics(statisticsKey);
    BaseStatistics bs=null;
    try {
      bs=format.getStatistics(cachedStatistics);
    }
 catch (    Throwable t) {
      if (PactCompiler.LOG.isWarnEnabled())       PactCompiler.LOG.warn("Error obtaining statistics from input format: " + t.getMessage(),t);
    }
    if (bs != null) {
      final long len=bs.getTotalInputSize();
      if (len == BaseStatistics.UNKNOWN) {
        if (PactCompiler.LOG.isWarnEnabled())         PactCompiler.LOG.warn("Pact compiler could not determine the size of input '" + inFormatDescription + "'.");
      }
 else       if (len >= 0) {
        this.inputSize=len;
      }
      final float avgBytes=bs.getAverageRecordWidth();
      if (avgBytes > 0.0f && hints.getAvgBytesPerRecord() < 1.0f) {
        hints.setAvgBytesPerRecord(avgBytes);
      }
      final long card=bs.getNumberOfRecords();
      if (card != BaseStatistics.UNKNOWN) {
        this.estimatedNumRecords=card;
      }
    }
  }
  if (this.estimatedNumRecords == -1 && hints.getAvgBytesPerRecord() != -1.0f && this.inputSize > 0) {
    this.estimatedNumRecords=(long)(this.inputSize / hints.getAvgBytesPerRecord()) + 1;
  }
  this.estimatedCardinality.putAll(hints.getDistinctCounts());
  if (this.estimatedNumRecords != -1) {
    for (    Entry<FieldSet,Float> avgNumValues : hints.getAvgNumRecordsPerDistinctFields().entrySet()) {
      if (estimatedCardinality.get(avgNumValues.getKey()) == null) {
        long estimatedCard=(this.estimatedNumRecords / avgNumValues.getValue() >= 1) ? (long)(this.estimatedNumRecords / avgNumValues.getValue()) : 1;
        estimatedCardinality.put(avgNumValues.getKey(),estimatedCard);
      }
    }
  }
 else {
    this.estimatedNumRecords=0;
    int count=0;
    for (    Entry<FieldSet,Long> cardinality : hints.getDistinctCounts().entrySet()) {
      float avgNumValues=hints.getAvgNumRecordsPerDistinctFields(cardinality.getKey());
      if (avgNumValues != -1) {
        this.estimatedNumRecords+=cardinality.getValue() * avgNumValues;
        count++;
      }
    }
    if (count > 0) {
      this.estimatedNumRecords=(this.estimatedNumRecords / count) >= 1 ? (this.estimatedNumRecords / count) : 1;
    }
 else {
      this.estimatedNumRecords=-1;
    }
  }
  if (this.estimatedNumRecords != -1 && hints.getAvgBytesPerRecord() != -1.0f) {
    this.estimatedOutputSize=(this.estimatedNumRecords * hints.getAvgBytesPerRecord()) >= 1 ? (long)(this.estimatedNumRecords * hints.getAvgBytesPerRecord()) : 1;
  }
 else {
    this.estimatedOutputSize=this.inputSize;
  }
}
