{
  MapFunction<?,?> function=new MapFunction<Tuple2<Long,CustomType>,Tuple2<Long,CustomType>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<Long,CustomType> map(    Tuple2<Long,CustomType> value) throws Exception {
      return null;
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getMapReturnTypes(function,(TypeInformation)TypeInfoParser.parse("Tuple2<Long,org.apache.flink.api.java.type.extractor.TypeExtractorTest$CustomType>"));
  Assert.assertTrue(ti.isTupleType());
  Assert.assertEquals(2,ti.getArity());
  TupleTypeInfo<?> tti=(TupleTypeInfo<?>)ti;
  Assert.assertEquals(Tuple2.class,tti.getTypeClass());
  Assert.assertEquals(Long.class,tti.getTypeAt(0).getTypeClass());
  Assert.assertTrue(tti.getTypeAt(1) instanceof PojoTypeInfo);
  Assert.assertEquals(CustomType.class,tti.getTypeAt(1).getTypeClass());
  Tuple2<?,?> t=new Tuple2<Long,CustomType>(1L,new CustomType("Hello",1));
  TypeInformation<?> ti2=TypeExtractor.getForObject(t);
  Assert.assertTrue(ti2.isTupleType());
  Assert.assertEquals(2,ti2.getArity());
  TupleTypeInfo<?> tti2=(TupleTypeInfo<?>)ti2;
  Assert.assertEquals(Tuple2.class,tti2.getTypeClass());
  Assert.assertEquals(Long.class,tti2.getTypeAt(0).getTypeClass());
  Assert.assertTrue(tti2.getTypeAt(1) instanceof PojoTypeInfo);
  Assert.assertEquals(CustomType.class,tti2.getTypeAt(1).getTypeClass());
}
