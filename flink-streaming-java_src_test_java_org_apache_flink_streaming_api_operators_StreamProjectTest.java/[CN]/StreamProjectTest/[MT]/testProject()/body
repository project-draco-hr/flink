{
  TypeInformation<Tuple5<Integer,String,Integer,String,Integer>> inType=TypeExtractor.getForObject(new Tuple5<Integer,String,Integer,String,Integer>(2,"a",3,"b",4));
  int[] fields=new int[]{4,4,3};
  TupleSerializer<Tuple3<Integer,Integer,String>> serializer=new TupleTypeInfo<Tuple3<Integer,Integer,String>>(StreamProjection.extractFieldTypes(fields,inType)).createSerializer(new ExecutionConfig());
  @SuppressWarnings("unchecked") StreamProject<Tuple5<Integer,String,Integer,String,Integer>,Tuple3<Integer,Integer,String>> operator=new StreamProject<Tuple5<Integer,String,Integer,String,Integer>,Tuple3<Integer,Integer,String>>(fields,serializer);
  OneInputStreamOperatorTestHarness<Tuple5<Integer,String,Integer,String,Integer>,Tuple3<Integer,Integer,String>> testHarness=new OneInputStreamOperatorTestHarness<Tuple5<Integer,String,Integer,String,Integer>,Tuple3<Integer,Integer,String>>(operator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<Tuple5<Integer,String,Integer,String,Integer>>(new Tuple5<Integer,String,Integer,String,Integer>(2,"a",3,"b",4),initialTime + 1));
  testHarness.processElement(new StreamRecord<Tuple5<Integer,String,Integer,String,Integer>>(new Tuple5<Integer,String,Integer,String,Integer>(2,"s",3,"c",2),initialTime + 2));
  testHarness.processElement(new StreamRecord<Tuple5<Integer,String,Integer,String,Integer>>(new Tuple5<Integer,String,Integer,String,Integer>(2,"a",3,"c",2),initialTime + 3));
  testHarness.processWatermark(new Watermark(initialTime + 2));
  testHarness.processElement(new StreamRecord<Tuple5<Integer,String,Integer,String,Integer>>(new Tuple5<Integer,String,Integer,String,Integer>(2,"a",3,"a",7),initialTime + 4));
  expectedOutput.add(new StreamRecord<Tuple3<Integer,Integer,String>>(new Tuple3<Integer,Integer,String>(4,4,"b"),initialTime + 1));
  expectedOutput.add(new StreamRecord<Tuple3<Integer,Integer,String>>(new Tuple3<Integer,Integer,String>(2,2,"c"),initialTime + 2));
  expectedOutput.add(new StreamRecord<Tuple3<Integer,Integer,String>>(new Tuple3<Integer,Integer,String>(2,2,"c"),initialTime + 3));
  expectedOutput.add(new Watermark(initialTime + 2));
  expectedOutput.add(new StreamRecord<Tuple3<Integer,Integer,String>>(new Tuple3<Integer,Integer,String>(7,7,"a"),initialTime + 4));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
}
