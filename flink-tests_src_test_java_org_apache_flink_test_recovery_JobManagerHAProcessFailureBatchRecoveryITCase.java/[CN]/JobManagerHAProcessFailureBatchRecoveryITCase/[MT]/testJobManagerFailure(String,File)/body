{
  Configuration config=new Configuration();
  config.setString(ConfigConstants.HIGH_AVAILABILITY,"ZOOKEEPER");
  config.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY,zkQuorum);
  ExecutionEnvironment env=ExecutionEnvironment.createRemoteEnvironment("leader",1,config);
  env.setParallelism(PARALLELISM);
  env.setNumberOfExecutionRetries(1);
  env.getConfig().setExecutionMode(executionMode);
  env.getConfig().disableSysoutLogging();
  final long NUM_ELEMENTS=100000L;
  final DataSet<Long> result=env.generateSequence(1,NUM_ELEMENTS).rebalance().map(new RichMapFunction<Long,Long>(){
    private final File proceedFile=new File(coordinateDir,PROCEED_MARKER_FILE);
    private boolean markerCreated=false;
    private boolean checkForProceedFile=true;
    @Override public Long map(    Long value) throws Exception {
      if (!markerCreated) {
        int taskIndex=getRuntimeContext().getIndexOfThisSubtask();
        AbstractTaskManagerProcessFailureRecoveryTest.touchFile(new File(coordinateDir,READY_MARKER_FILE_PREFIX + taskIndex));
        markerCreated=true;
      }
      if (checkForProceedFile) {
        if (proceedFile.exists()) {
          checkForProceedFile=false;
        }
 else {
          Thread.sleep(100);
        }
      }
      return value;
    }
  }
).reduce(new ReduceFunction<Long>(){
    @Override public Long reduce(    Long value1,    Long value2){
      return value1 + value2;
    }
  }
).flatMap(new RichFlatMapFunction<Long,Long>(){
    @Override public void flatMap(    Long value,    Collector<Long> out) throws Exception {
      assertEquals(NUM_ELEMENTS * (NUM_ELEMENTS + 1L) / 2L,(long)value);
      int taskIndex=getRuntimeContext().getIndexOfThisSubtask();
      AbstractTaskManagerProcessFailureRecoveryTest.touchFile(new File(coordinateDir,FINISH_MARKER_FILE_PREFIX + taskIndex));
    }
  }
);
  result.output(new DiscardingOutputFormat<Long>());
  env.execute();
}
