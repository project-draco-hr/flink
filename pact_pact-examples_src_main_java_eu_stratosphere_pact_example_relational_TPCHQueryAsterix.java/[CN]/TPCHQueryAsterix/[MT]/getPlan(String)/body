{
  int noSubtasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String ordersPath=(args.length > 1 ? args[1] : "");
  String customerPath=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  DataSourceContract<PactInteger,Tuple> orders=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,ordersPath,"Orders");
  orders.setFormatParameter("delimiter","\n");
  orders.setDegreeOfParallelism(noSubtasks);
  orders.setOutputContract(UniqueKey.class);
  orders.getCompilerHints().setAvgNumValuesPerKey(1);
  DataSourceContract<PactInteger,Tuple> customers=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,customerPath,"Customers");
  customers.setFormatParameter("delimiter","\n");
  customers.setDegreeOfParallelism(noSubtasks);
  customers.setOutputContract(UniqueKey.class);
  MapContract<PactInteger,Tuple,PactInteger,PactNull> projectO=new MapContract<PactInteger,Tuple,PactInteger,PactNull>(ProjectOrder.class,"ProjectO");
  projectO.setDegreeOfParallelism(noSubtasks);
  projectO.getCompilerHints().setAvgBytesPerRecord(5);
  projectO.getCompilerHints().setAvgNumValuesPerKey(10);
  MapContract<PactInteger,Tuple,PactInteger,PactString> projectC=new MapContract<PactInteger,Tuple,PactInteger,PactString>(ProjectCust.class,"ProjectC");
  projectC.setDegreeOfParallelism(noSubtasks);
  projectC.getCompilerHints().setAvgNumValuesPerKey(1);
  projectC.getCompilerHints().setAvgBytesPerRecord(20);
  MatchContract<PactInteger,PactNull,PactString,PactString,PactNull> joinCO=new MatchContract<PactInteger,PactNull,PactString,PactString,PactNull>(JoinCO.class,"JoinCO");
  joinCO.setDegreeOfParallelism(noSubtasks);
  joinCO.getCompilerHints().setAvgBytesPerRecord(17);
  ReduceContract<PactString,PactNull,PactString,PactInteger> aggCO=new ReduceContract<PactString,PactNull,PactString,PactInteger>(AggCO.class,"AggCo");
  aggCO.setDegreeOfParallelism(noSubtasks);
  aggCO.getCompilerHints().setAvgBytesPerRecord(17);
  aggCO.getCompilerHints().setAvgNumValuesPerKey(1);
  DataSinkContract<PactString,PactInteger> result=new DataSinkContract<PactString,PactInteger>(StringIntOutFormat.class,output,"Output");
  result.setDegreeOfParallelism(noSubtasks);
  result.setInput(aggCO);
  aggCO.setInput(joinCO);
  joinCO.setFirstInput(projectO);
  projectO.setInput(orders);
  joinCO.setSecondInput(projectC);
  projectC.setInput(customers);
  return new Plan(result,"TPCH Benchmark");
}
