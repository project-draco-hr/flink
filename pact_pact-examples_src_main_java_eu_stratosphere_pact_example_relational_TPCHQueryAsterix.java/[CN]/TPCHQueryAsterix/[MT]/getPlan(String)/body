{
  int noSubtasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String ordersPath=(args.length > 1 ? args[1] : "");
  String customerPath=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  FileDataSource orders=new FileDataSource(IntTupleDataInFormat.class,ordersPath,"Orders");
  orders.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  orders.setDegreeOfParallelism(noSubtasks);
  orders.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(new int[]{0}),1);
  FileDataSource customers=new FileDataSource(IntTupleDataInFormat.class,customerPath,"Customers");
  customers.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  customers.setDegreeOfParallelism(noSubtasks);
  MapContract projectO=new MapContract(ProjectOrder.class,"ProjectO");
  projectO.setDegreeOfParallelism(noSubtasks);
  projectO.getCompilerHints().setAvgBytesPerRecord(5);
  projectO.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(new int[]{0}),10);
  MapContract projectC=new MapContract(ProjectCust.class,"ProjectC");
  projectC.setDegreeOfParallelism(noSubtasks);
  projectC.getCompilerHints().setAvgBytesPerRecord(20);
  projectC.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(new int[]{0}),1);
  MatchContract joinCO=new MatchContract(JoinCO.class,PactInteger.class,0,0,"JoinCO");
  joinCO.setDegreeOfParallelism(noSubtasks);
  joinCO.getCompilerHints().setAvgBytesPerRecord(17);
  ReduceContract aggCO=new ReduceContract(AggCO.class,PactString.class,0,"AggCo");
  aggCO.setDegreeOfParallelism(noSubtasks);
  aggCO.getCompilerHints().setAvgBytesPerRecord(17);
  aggCO.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(new int[]{0}),1);
  FileDataSink result=new FileDataSink(StringIntOutFormat.class,output,"Output");
  result.setDegreeOfParallelism(noSubtasks);
  result.setInput(aggCO);
  aggCO.setInput(joinCO);
  joinCO.setFirstInput(projectO);
  projectO.setInput(orders);
  joinCO.setSecondInput(projectC);
  projectC.setInput(customers);
  return new Plan(result,"TPCH Asterix");
}
