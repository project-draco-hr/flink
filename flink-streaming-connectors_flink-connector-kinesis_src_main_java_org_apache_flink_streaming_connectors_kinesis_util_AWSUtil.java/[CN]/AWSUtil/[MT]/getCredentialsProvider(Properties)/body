{
  CredentialProviderType credentialProviderType=CredentialProviderType.valueOf(configProps.getProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_TYPE,CredentialProviderType.BASIC.toString()));
  AWSCredentialsProvider credentialsProvider;
switch (credentialProviderType) {
case ENV_VAR:
    credentialsProvider=new EnvironmentVariableCredentialsProvider();
  break;
case SYS_PROP:
credentialsProvider=new SystemPropertiesCredentialsProvider();
break;
case PROFILE:
String profileName=configProps.getProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_PROFILE_NAME,null);
String profileConfigPath=configProps.getProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_PROFILE_PATH,null);
credentialsProvider=(profileConfigPath == null) ? new ProfileCredentialsProvider(profileName) : new ProfileCredentialsProvider(profileConfigPath,profileName);
break;
default :
case BASIC:
credentialsProvider=new AWSCredentialsProvider(){
@Override public AWSCredentials getCredentials(){
return new BasicAWSCredentials(configProps.getProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_ACCESSKEYID),configProps.getProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_SECRETKEY));
}
@Override public void refresh(){
}
}
;
}
return credentialsProvider;
}
