{
  int s=this.availableMemory.size();
  if (s > 0) {
    return this.availableMemory.remove(s - 1);
  }
  if (this.writeBehindBuffersAvailable > 0) {
    MemorySegment toReturn;
    try {
      toReturn=this.writeBehindBuffers.take();
    }
 catch (    InterruptedException iex) {
      throw new RuntimeException("Hybrid Hash Join was interrupted while taking a buffer.");
    }
    this.writeBehindBuffersAvailable--;
    MemorySegment currBuff;
    while (this.writeBehindBuffersAvailable > 0 && (currBuff=this.writeBehindBuffers.poll()) != null) {
      this.availableMemory.add(currBuff);
      this.writeBehindBuffersAvailable--;
    }
    return toReturn;
  }
 else {
    return null;
  }
}
