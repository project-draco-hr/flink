{
  final int posHashCode=hashCode % this.numBuckets;
  final int bucketArrayPos=posHashCode >> this.bucketsPerSegmentBits;
  final int bucketInSegmentPos=(posHashCode & this.bucketsPerSegmentMask) << NUM_INTRA_BUCKET_BITS;
  final MemorySegment bucket=this.buckets[bucketArrayPos];
  final int partitionNumber=bucket.get(bucketInSegmentPos + HEADER_PARTITION_OFFSET);
  if (partitionNumber < 0 || partitionNumber >= this.partitionsBeingBuilt.size()) {
    throw new RuntimeException("Error: Hash structures in Hash-Join are corrupt. Invalid partition number for bucket.");
  }
  final HashPartition<BT,PT> p=this.partitionsBeingBuilt.get(partitionNumber);
  long pointer=p.insertIntoBuildBuffer(record);
  if (pointer != -1) {
    insertBucketEntry(p,bucket,bucketInSegmentPos,hashCode,pointer,true);
  }
 else {
    byte status=bucket.get(bucketInSegmentPos + HEADER_STATUS_OFFSET);
    if (status == BUCKET_STATUS_IN_FILTER) {
      this.bloomFilter.setBitsLocation(bucket,bucketInSegmentPos + BUCKET_HEADER_LENGTH);
      this.bloomFilter.addHash(hashCode);
    }
  }
}
