{
  int buffersAvailable=0;
  for (int i=0; i < this.partitionsBeingBuilt.size(); i++) {
    final HashPartition<BT,PT> p=this.partitionsBeingBuilt.get(i);
    p.setFurtherPatitioning(this.furtherPartitioning);
    buffersAvailable+=p.finalizeProbePhase(this.availableMemory,this.partitionsPending);
  }
  this.partitionsBeingBuilt.clear();
  this.writeBehindBuffersAvailable+=buffersAvailable;
  releaseTable();
  if (this.currentSpilledProbeSide != null) {
    this.currentSpilledProbeSide.closeAndDelete();
    this.currentSpilledProbeSide=null;
  }
  if (!this.partitionsPending.isEmpty()) {
    final HashPartition<BT,PT> p=this.partitionsPending.get(0);
    buildTableFromSpilledPartition(p);
    LinkedBlockingQueue<MemorySegment> returnQueue=new LinkedBlockingQueue<MemorySegment>();
    this.currentSpilledProbeSide=this.ioManager.createBlockChannelReader(p.getProbeSideChannel().getChannelID(),returnQueue);
    List<MemorySegment> memory=new ArrayList<MemorySegment>();
    memory.add(getNextBuffer());
    MemorySegment nextBuffer=getNextBuffer();
    if (nextBuffer != null) {
      memory.add(nextBuffer);
    }
    ChannelReaderInputViewIterator<PT> probeReader=new ChannelReaderInputViewIterator<PT>(this.currentSpilledProbeSide,returnQueue,memory,this.availableMemory,this.probeSideSerializer,p.getProbeSideBlockCount());
    this.probeIterator.set(probeReader);
    this.partitionsPending.remove(0);
    this.currentRecursionDepth=p.getRecursionLevel() + 1;
    return nextRecord();
  }
 else {
    return false;
  }
}
