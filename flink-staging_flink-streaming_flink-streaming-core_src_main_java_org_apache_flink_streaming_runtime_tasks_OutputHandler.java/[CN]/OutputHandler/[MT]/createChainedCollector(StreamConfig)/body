{
  OutputSelectorWrapper<?> outputSelectorWrapper=chainedTaskConfig.getOutputSelectorWrapper(cl);
  CollectorWrapper wrapper=new CollectorWrapper(outputSelectorWrapper);
  for (  StreamEdge outputEdge : chainedTaskConfig.getNonChainedOutputs(cl)) {
    Collector<?> outCollector=outputMap.get(outputEdge);
    wrapper.addCollector(outCollector,outputEdge);
  }
  for (  StreamEdge outputEdge : chainedTaskConfig.getChainedOutputs(cl)) {
    Integer output=outputEdge.getTargetID();
    Collector<?> outCollector=createChainedCollector(chainedConfigs.get(output));
    wrapper.addCollector(outCollector,outputEdge);
  }
  if (chainedTaskConfig.isChainStart()) {
    return (Output<X>)wrapper;
  }
 else {
    OneInputStreamOperator chainableOperator=chainedTaskConfig.getStreamOperator(vertex.getUserCodeClassLoader());
    StreamingRuntimeContext chainedContext=vertex.createRuntimeContext(chainedTaskConfig);
    vertex.contexts.add(chainedContext);
    chainableOperator.setup(wrapper,chainedContext);
    chainedOperators.add(chainableOperator);
    return new OperatorCollector<X>(chainableOperator);
  }
}
