{
  List<Node> copy=new ArrayList<Node>(nodes);
  Collections.shuffle(copy);
  this.nodes=Collections.unmodifiableList(copy);
  this.nodesById=new HashMap<Integer,Node>();
  for (  Node node : nodes)   this.nodesById.put(node.id(),node);
  this.partitionsByTopicPartition=new HashMap<TopicPartition,PartitionInfo>(partitions.size());
  for (  PartitionInfo p : partitions)   this.partitionsByTopicPartition.put(new TopicPartition(p.topic(),p.partition()),p);
  HashMap<String,List<PartitionInfo>> partsForTopic=new HashMap<String,List<PartitionInfo>>();
  HashMap<Integer,List<PartitionInfo>> partsForNode=new HashMap<Integer,List<PartitionInfo>>();
  for (  Node n : this.nodes) {
    partsForNode.put(n.id(),new ArrayList<PartitionInfo>());
  }
  for (  PartitionInfo p : partitions) {
    if (!partsForTopic.containsKey(p.topic()))     partsForTopic.put(p.topic(),new ArrayList<PartitionInfo>());
    List<PartitionInfo> psTopic=partsForTopic.get(p.topic());
    psTopic.add(p);
    if (p.leader() != null) {
      List<PartitionInfo> psNode=Utils.notNull(partsForNode.get(p.leader().id()));
      psNode.add(p);
    }
  }
  this.partitionsByTopic=new HashMap<String,List<PartitionInfo>>(partsForTopic.size());
  this.availablePartitionsByTopic=new HashMap<String,List<PartitionInfo>>(partsForTopic.size());
  for (  Map.Entry<String,List<PartitionInfo>> entry : partsForTopic.entrySet()) {
    String topic=entry.getKey();
    List<PartitionInfo> partitionList=entry.getValue();
    this.partitionsByTopic.put(topic,Collections.unmodifiableList(partitionList));
    List<PartitionInfo> availablePartitions=new ArrayList<PartitionInfo>();
    for (    PartitionInfo part : partitionList) {
      if (part.leader() != null)       availablePartitions.add(part);
    }
    this.availablePartitionsByTopic.put(topic,Collections.unmodifiableList(availablePartitions));
  }
  this.partitionsByNode=new HashMap<Integer,List<PartitionInfo>>(partsForNode.size());
  for (  Map.Entry<Integer,List<PartitionInfo>> entry : partsForNode.entrySet())   this.partitionsByNode.put(entry.getKey(),Collections.unmodifiableList(entry.getValue()));
}
