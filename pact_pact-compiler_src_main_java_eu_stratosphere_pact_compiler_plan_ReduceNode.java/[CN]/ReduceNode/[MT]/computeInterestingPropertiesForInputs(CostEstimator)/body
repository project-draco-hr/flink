{
  List<InterestingProperties> thisNodesIntProps=getInterestingProperties();
  List<InterestingProperties> props=InterestingProperties.createInterestingPropertiesForInput(thisNodesIntProps,this,0);
  InterestingProperties ip1=new InterestingProperties();
  ip1.getGlobalProperties().setPartitioning(PartitionProperty.ANY,(FieldList)this.keyList.clone());
  ip1.getLocalProperties().setGroupedFields(new FieldSet(this.keyList));
  ip1.getMaximalCosts().setNetworkCost(0);
  ip1.getMaximalCosts().setSecondaryStorageCost(0);
  Costs cost=new Costs();
  estimator.getHashPartitioningCost(this.inConn,cost);
  ip1.getMaximalCosts().addCosts(cost);
  cost=new Costs();
  estimator.getLocalSortCost(this,this.inConn,cost);
  ip1.getMaximalCosts().addCosts(cost);
  InterestingProperties ip2=new InterestingProperties();
  ip2.getGlobalProperties().setPartitioning(PartitionProperty.ANY,(FieldList)this.keyList.clone());
  ip2.getMaximalCosts().setNetworkCost(0);
  ip2.getMaximalCosts().setSecondaryStorageCost(0);
  estimator.getHashPartitioningCost(this.inConn,cost);
  ip2.getMaximalCosts().addCosts(cost);
  InterestingProperties.mergeUnionOfInterestingProperties(props,ip1);
  InterestingProperties.mergeUnionOfInterestingProperties(props,ip2);
  inConn.addAllInterestingProperties(props);
}
