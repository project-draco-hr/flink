{
  List<InterestingProperties> thisNodesIntProps=getInterestingProperties();
  List<InterestingProperties> props=InterestingProperties.filterByConstantSet(thisNodesIntProps,this,0);
  FieldSet keyFields=new FieldSet(getPactContract().getKeyColumnNumbers(0));
  InterestingProperties ip1=new InterestingProperties();
  ip1.getGlobalProperties().setPartitioning(PartitionProperty.ANY,keyFields);
  ip1.getLocalProperties().setGrouped(true,keyFields);
  for (  PactConnection c : this.input) {
    Costs cost=new Costs();
    estimator.getHashPartitioningCost(c,cost);
    ip1.getMaximalCosts().addCosts(cost);
    cost=new Costs();
    estimator.getLocalSortCost(this,Collections.<PactConnection>singletonList(c),cost);
    ip1.getMaximalCosts().addCosts(cost);
  }
  InterestingProperties ip2=new InterestingProperties();
  ip2.getGlobalProperties().setPartitioning(PartitionProperty.ANY,keyFields);
  for (  PactConnection c : this.input) {
    Costs cost=new Costs();
    estimator.getHashPartitioningCost(c,cost);
    ip2.getMaximalCosts().addCosts(cost);
  }
  InterestingProperties.mergeUnionOfInterestingProperties(props,ip1);
  InterestingProperties.mergeUnionOfInterestingProperties(props,ip2);
  for (  PactConnection c : this.input) {
    c.addAllInterestingProperties(props);
  }
}
