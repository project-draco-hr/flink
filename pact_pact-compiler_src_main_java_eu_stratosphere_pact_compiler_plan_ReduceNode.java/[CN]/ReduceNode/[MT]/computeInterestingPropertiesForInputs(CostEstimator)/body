{
  List<InterestingProperties> thisNodesIntProps=getInterestingProperties();
  List<InterestingProperties> props=InterestingProperties.filterByKeepSet(thisNodesIntProps,getKeepSet(0));
  FieldSet keyFields=new FieldSet(getPactContract().getKeyColumnNumbers(0));
  InterestingProperties ip1=new InterestingProperties();
  ip1.getGlobalProperties().setPartitioning(PartitionProperty.ANY,keyFields);
  ip1.getLocalProperties().setGrouped(true,keyFields);
  estimator.getHashPartitioningCost(this.input,ip1.getMaximalCosts());
  Costs c=new Costs();
  estimator.getLocalSortCost(this,this.input,c);
  ip1.getMaximalCosts().addCosts(c);
  InterestingProperties ip2=new InterestingProperties();
  ip2.getGlobalProperties().setPartitioning(PartitionProperty.ANY,keyFields);
  estimator.getHashPartitioningCost(this.input,ip2.getMaximalCosts());
  InterestingProperties.mergeUnionOfInterestingProperties(props,ip1);
  InterestingProperties.mergeUnionOfInterestingProperties(props,ip2);
  input.addAllInterestingProperties(props);
}
