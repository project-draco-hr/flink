{
  List<InterestingProperties> inheritedIntProps=getInterestingProperties();
  List<InterestingProperties> props=InterestingProperties.filterInterestingPropertiesForInput(inheritedIntProps,this,0);
  InterestingProperties ip1=new InterestingProperties();
  ip1.getGlobalProperties().setPartitioning(PartitioningProperty.ANY,this.keys);
  ip1.getLocalProperties().setGroupedFields(this.keys);
  estimator.addHashPartitioningCost(this.inConn,ip1.getMaximalCosts());
  estimator.addLocalSortCost(this.inConn,-1,ip1.getMaximalCosts());
  InterestingProperties ip2=new InterestingProperties();
  ip2.getGlobalProperties().setPartitioning(PartitioningProperty.ANY,this.keys);
  estimator.addHashPartitioningCost(this.inConn,ip2.getMaximalCosts());
  InterestingProperties.mergeUnionOfInterestingProperties(props,ip1);
  InterestingProperties.mergeUnionOfInterestingProperties(props,ip2);
  this.inConn.addAllInterestingProperties(props);
}
