{
  OptimizerNode pred=input == null ? null : input.getSourcePact();
  CompilerHints hints=getPactContract().getCompilerHints();
  if (pred != null) {
    if (hints.getKeyCardinality() > 0) {
      this.estimatedKeyCardinality=hints.getKeyCardinality();
    }
 else     if (getOutputContract() == OutputContract.SameKey) {
      this.estimatedKeyCardinality=pred.estimatedKeyCardinality;
    }
    this.estimatedNumRecords=-1;
    if (hints.getKeyCardinality() > 0 && hints.getAvgNumValuesPerKey() >= 1.0f) {
      this.estimatedNumRecords=(long)(this.estimatedKeyCardinality * hints.getAvgNumValuesPerKey()) + 1;
    }
 else     if (pred.estimatedNumRecords != -1 && hints.getSelectivity() > 0.0f) {
      this.estimatedNumRecords=(long)(pred.estimatedNumRecords * hints.getSelectivity()) + 1;
    }
 else     if (pred.estimatedKeyCardinality != -1) {
      this.estimatedNumRecords=pred.estimatedKeyCardinality;
    }
    if (this.estimatedKeyCardinality == -1 && this.estimatedNumRecords != -1) {
      if (hints.getAvgNumValuesPerKey() >= 1.0f) {
        this.estimatedKeyCardinality=(long)(this.estimatedNumRecords / hints.getAvgNumValuesPerKey()) + 1;
      }
 else {
        this.estimatedKeyCardinality=this.estimatedNumRecords;
      }
    }
    this.estimatedOutputSize=-1;
    if (this.estimatedNumRecords != -1) {
      if (hints.getAvgBytesPerRecord() > 0.0f) {
        this.estimatedOutputSize=(long)(this.estimatedNumRecords * hints.getAvgBytesPerRecord()) + 1;
      }
 else       if (pred.estimatedOutputSize > 0 && pred.estimatedNumRecords > 0) {
        float avgBytes=pred.estimatedOutputSize / ((float)pred.estimatedNumRecords);
        this.estimatedOutputSize=(long)(this.estimatedNumRecords * avgBytes) + 1;
      }
    }
 else {
      this.estimatedOutputSize=pred.estimatedOutputSize;
    }
    if (this.estimatedKeyCardinality > this.estimatedNumRecords) {
      this.estimatedKeyCardinality=this.estimatedNumRecords;
    }
    if (isCombineable() && pred.estimatedNumRecords >= 1 && pred.estimatedKeyCardinality >= 1 && pred.estimatedOutputSize >= -1) {
      int parallelism=pred.getDegreeOfParallelism();
      parallelism=parallelism >= 1 ? parallelism : 32;
      float inValsPerKey=((float)pred.estimatedNumRecords) / pred.estimatedKeyCardinality;
      float valsPerNode=inValsPerKey / parallelism;
      valsPerNode=valsPerNode >= 1.0f ? valsPerNode : 1.0f;
      this.combinerReducingFactor=1.0f / valsPerNode;
    }
  }
 else {
    this.estimatedKeyCardinality=hints.getKeyCardinality();
    this.estimatedNumRecords=-1;
    this.estimatedOutputSize=-1;
  }
}
