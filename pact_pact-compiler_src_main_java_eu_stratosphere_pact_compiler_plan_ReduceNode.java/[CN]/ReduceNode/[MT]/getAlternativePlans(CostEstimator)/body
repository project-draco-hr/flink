{
  if (this.cachedPlans != null) {
    return this.cachedPlans;
  }
  List<ReduceNode> outputPlans=new ArrayList<ReduceNode>();
  getAlternativePlansRecursively(new ArrayList<OptimizerNode>(0),estimator,outputPlans);
  if (outputPlans.isEmpty()) {
    throw new CompilerException("Could not create a valid plan for the reduce contract '" + getPactContract().getName() + "'. The compiler hints specified incompatible shipping strategies.");
  }
  prunePlanAlternatives(outputPlans);
  if (this.getOutgoingConnections() != null && this.getOutgoingConnections().size() > 1) {
    this.cachedPlans=outputPlans;
  }
  return outputPlans;
}
