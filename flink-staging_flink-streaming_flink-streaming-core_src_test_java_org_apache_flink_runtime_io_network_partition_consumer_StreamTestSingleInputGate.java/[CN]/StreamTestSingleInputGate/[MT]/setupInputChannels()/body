{
  for (int i=0; i < numInputChannels; i++) {
    final int channelIndex=i;
    final RecordSerializer<SerializationDelegate<Object>> recordSerializer=new SpanningRecordSerializer<SerializationDelegate<Object>>();
    final SerializationDelegate<Object> delegate=new SerializationDelegate(new MultiplexingStreamRecordSerializer<T>(serializer));
    inputQueues[channelIndex]=new ConcurrentLinkedQueue<InputValue<Object>>();
    inputChannels[channelIndex]=new TestInputChannel(inputGate,i);
    final Answer<Buffer> answer=new Answer<Buffer>(){
      @Override public Buffer answer(      InvocationOnMock invocationOnMock) throws Throwable {
        InputValue<Object> input=inputQueues[channelIndex].poll();
        if (input != null && input.isStreamEnd()) {
          when(inputChannels[channelIndex].getInputChannel().isReleased()).thenReturn(true);
          return EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE);
        }
 else         if (input != null && input.isStreamRecord()) {
          Object inputElement=input.getStreamRecord();
          final Buffer buffer=new Buffer(new MemorySegment(new byte[bufferSize]),mock(BufferRecycler.class));
          recordSerializer.setNextBuffer(buffer);
          delegate.setInstance(inputElement);
          recordSerializer.addRecord(delegate);
          return recordSerializer.getCurrentBuffer();
        }
 else         if (input != null && input.isEvent()) {
          AbstractEvent event=input.getEvent();
          return EventSerializer.toBuffer(event);
        }
 else {
synchronized (inputQueues[channelIndex]) {
            inputQueues[channelIndex].wait();
            return answer(invocationOnMock);
          }
        }
      }
    }
;
    when(inputChannels[channelIndex].getInputChannel().getNextBuffer()).thenAnswer(answer);
    inputGate.setInputChannel(new IntermediateResultPartitionID(),inputChannels[channelIndex].getInputChannel());
  }
}
