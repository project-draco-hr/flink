{
  NettyProtocol protocol=new NettyProtocol(){
    @Override public ChannelHandler[] getServerChannelHandlers(){
      return new ChannelHandler[]{new ChannelInboundHandlerAdapter(){
        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg) throws Exception {
          ctx.channel().close();
        }
      }
};
    }
    @Override public ChannelHandler[] getClientChannelHandlers(){
      return new PartitionRequestProtocol(mock(ResultPartitionProvider.class),mock(TaskEventDispatcher.class),mock(NetworkBufferPool.class)).getClientChannelHandlers();
    }
  }
;
  NettyServerAndClient serverAndClient=initServerAndClient(protocol,createConfig());
  Channel ch=connect(serverAndClient);
  PartitionRequestClientHandler handler=getClientHandler(ch);
  RemoteInputChannel[] rich=new RemoteInputChannel[]{createRemoteInputChannel(),createRemoteInputChannel()};
  final CountDownLatch sync=new CountDownLatch(rich.length);
  Answer<Void> countDownLatch=new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      sync.countDown();
      return null;
    }
  }
;
  for (  RemoteInputChannel r : rich) {
    doAnswer(countDownLatch).when(r).onError(any(Throwable.class));
    handler.addInputChannel(r);
  }
  ch.writeAndFlush(Unpooled.buffer().writerIndex(16));
  if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(),TimeUnit.MILLISECONDS)) {
    fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() + " ms to be notified about remote connection close.");
  }
  for (  RemoteInputChannel r : rich) {
    verify(r).onError(isA(RemoteTransportException.class));
  }
  shutdown(serverAndClient);
}
