{
  super.registerInputOutput();
  inputDeserializer1=configuration.getTypeSerializerIn1(userClassLoader);
  inputDeserializer2=configuration.getTypeSerializerIn2(userClassLoader);
  int numberOfInputs=configuration.getNumberOfInputs();
  ArrayList<InputGate> inputList1=new ArrayList<InputGate>();
  ArrayList<InputGate> inputList2=new ArrayList<InputGate>();
  List<StreamEdge> inEdges=configuration.getInPhysicalEdges(userClassLoader);
  for (int i=0; i < numberOfInputs; i++) {
    int inputType=inEdges.get(i).getTypeNumber();
    InputGate reader=getEnvironment().getInputGate(i);
switch (inputType) {
case 1:
      inputList1.add(reader);
    break;
case 2:
  inputList2.add(reader);
break;
default :
throw new RuntimeException("Invalid input type number: " + inputType);
}
}
final InputGate reader1=InputGateFactory.createInputGate(inputList1);
final InputGate reader2=InputGateFactory.createInputGate(inputList2);
coReader=new CoRecordReader<DeserializationDelegate<StreamRecord<IN1>>,DeserializationDelegate<StreamRecord<IN2>>>(reader1,reader2);
coIter=new CoReaderIterator<StreamRecord<IN1>,StreamRecord<IN2>>(coReader,inputDeserializer1,inputDeserializer2);
}
