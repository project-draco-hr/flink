{
  final FiniteDuration askTimeout=new FiniteDuration(10,TimeUnit.SECONDS);
  final long deadline=System.currentTimeMillis() + 30000;
  JobID jobId=null;
  do {
    Future<Object> response=Patterns.ask(jobManager,JobManagerMessages.getRequestRunningJobsStatus(),new Timeout(askTimeout));
    Object result;
    try {
      result=Await.result(response,askTimeout);
    }
 catch (    Exception e) {
      throw new Exception("Could not retrieve running jobs from the JobManager.",e);
    }
    if (result instanceof JobManagerMessages.RunningJobsStatus) {
      List<JobStatusMessage> jobs=((JobManagerMessages.RunningJobsStatus)result).getStatusMessages();
      if (jobs.size() == 1) {
        jobId=jobs.get(0).getJobId();
        break;
      }
    }
  }
 while (System.currentTimeMillis() < deadline);
  if (jobId == null) {
    return;
  }
  jobManager.tell(new JobManagerMessages.CancelJob(jobId),ActorRef.noSender());
}
