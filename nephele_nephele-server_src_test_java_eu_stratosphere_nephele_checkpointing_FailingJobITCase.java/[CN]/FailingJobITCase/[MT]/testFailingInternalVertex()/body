{
  final JobGraph jobGraph=new JobGraph("Job with failing inner vertex");
  final JobGenericInputVertex input=new JobGenericInputVertex("Input",jobGraph);
  input.setInputClass(InputTask.class);
  input.setNumberOfSubtasks(DEGREE_OF_PARALLELISM);
  input.setNumberOfSubtasksPerInstance(DEGREE_OF_PARALLELISM);
  final JobTaskVertex innerVertex1=new JobTaskVertex("Inner vertex 1",jobGraph);
  innerVertex1.setTaskClass(InnerTask.class);
  innerVertex1.setNumberOfSubtasks(DEGREE_OF_PARALLELISM);
  innerVertex1.setNumberOfSubtasksPerInstance(DEGREE_OF_PARALLELISM);
  final JobTaskVertex innerVertex2=new JobTaskVertex("Inner vertex 2",jobGraph);
  innerVertex2.setTaskClass(InnerTask.class);
  innerVertex2.setNumberOfSubtasks(DEGREE_OF_PARALLELISM);
  innerVertex2.setNumberOfSubtasksPerInstance(DEGREE_OF_PARALLELISM);
  innerVertex2.getConfiguration().setBoolean(FAILURE_KEY,true);
  innerVertex2.getConfiguration().setInteger(FAILURE_INDEX_KEY,FAILURE_INDEX);
  final JobTaskVertex innerVertex3=new JobTaskVertex("Inner vertex 3",jobGraph);
  innerVertex3.setTaskClass(InnerTask.class);
  innerVertex3.setNumberOfSubtasks(DEGREE_OF_PARALLELISM);
  innerVertex3.setNumberOfSubtasksPerInstance(DEGREE_OF_PARALLELISM);
  final JobGenericOutputVertex output=new JobGenericOutputVertex("Output",jobGraph);
  output.setOutputClass(OutputTask.class);
  output.setNumberOfSubtasks(DEGREE_OF_PARALLELISM);
  output.setNumberOfSubtasksPerInstance(DEGREE_OF_PARALLELISM);
  innerVertex1.setVertexToShareInstancesWith(input);
  innerVertex2.setVertexToShareInstancesWith(input);
  innerVertex3.setVertexToShareInstancesWith(input);
  output.setVertexToShareInstancesWith(input);
  try {
    input.connectTo(innerVertex1,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    innerVertex1.connectTo(innerVertex2,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    innerVertex2.connectTo(innerVertex3,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    innerVertex3.connectTo(output,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
  }
 catch (  JobGraphDefinitionException e) {
    fail(StringUtils.stringifyException(e));
  }
  FAILED_ONCE.set(false);
  try {
    JobClient jobClient=new JobClient(jobGraph,configuration);
    jobClient.submitJobAndWait();
  }
 catch (  IOException ioe) {
    fail(StringUtils.stringifyException(ioe));
  }
catch (  JobExecutionException e) {
    fail(StringUtils.stringifyException(e));
  }
}
