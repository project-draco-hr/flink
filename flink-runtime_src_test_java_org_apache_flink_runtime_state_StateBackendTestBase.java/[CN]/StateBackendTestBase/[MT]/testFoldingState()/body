{
  try {
    backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
    FoldingStateDescriptor<Integer,String> kvId=new FoldingStateDescriptor<>("id","Fold-Initial:",new AppendingFold(),String.class);
    FoldingState<Integer,String> state=backend.getPartitionedState(null,VoidSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    assertEquals("Fold-Initial:",state.get());
    state.add(1);
    backend.setCurrentKey(2);
    assertEquals("Fold-Initial:",state.get());
    state.add(2);
    backend.setCurrentKey(1);
    assertEquals("Fold-Initial:,1",state.get());
    HashMap<String,KvStateSnapshot<?,?,?,?,?>> snapshot1=backend.snapshotPartitionedState(682375462378L,2);
    for (    String key : snapshot1.keySet()) {
      if (snapshot1.get(key) instanceof AsynchronousKvStateSnapshot) {
        snapshot1.put(key,((AsynchronousKvStateSnapshot<?,?,?,?,?>)snapshot1.get(key)).materialize());
      }
    }
    backend.setCurrentKey(1);
    state.clear();
    state.add(101);
    backend.setCurrentKey(2);
    state.add(102);
    backend.setCurrentKey(3);
    state.add(103);
    HashMap<String,KvStateSnapshot<?,?,?,?,?>> snapshot2=backend.snapshotPartitionedState(682375462379L,4);
    for (    String key : snapshot2.keySet()) {
      if (snapshot2.get(key) instanceof AsynchronousKvStateSnapshot) {
        snapshot2.put(key,((AsynchronousKvStateSnapshot<?,?,?,?,?>)snapshot2.get(key)).materialize());
      }
    }
    backend.setCurrentKey(1);
    assertEquals("Fold-Initial:,101",state.get());
    backend.setCurrentKey(2);
    assertEquals("Fold-Initial:,2,102",state.get());
    backend.setCurrentKey(3);
    assertEquals("Fold-Initial:,103",state.get());
    backend.dispose();
    backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
    backend.injectKeyValueStateSnapshots((HashMap)snapshot1);
    for (    String key : snapshot1.keySet()) {
      snapshot1.get(key).discardState();
    }
    FoldingState<Integer,String> restored1=backend.getPartitionedState(null,VoidSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    assertEquals("Fold-Initial:,1",restored1.get());
    backend.setCurrentKey(2);
    assertEquals("Fold-Initial:,2",restored1.get());
    backend.dispose();
    backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
    backend.injectKeyValueStateSnapshots((HashMap)snapshot2);
    for (    String key : snapshot2.keySet()) {
      snapshot2.get(key).discardState();
    }
    @SuppressWarnings("unchecked") FoldingState<Integer,String> restored2=backend.getPartitionedState(null,VoidSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    assertEquals("Fold-Initial:,101",restored2.get());
    backend.setCurrentKey(2);
    assertEquals("Fold-Initial:,2,102",restored2.get());
    backend.setCurrentKey(3);
    assertEquals("Fold-Initial:,103",restored2.get());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
