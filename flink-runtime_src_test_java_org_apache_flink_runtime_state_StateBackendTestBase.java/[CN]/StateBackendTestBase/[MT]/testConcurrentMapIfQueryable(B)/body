{
{
    ValueStateDescriptor<Integer> desc=new ValueStateDescriptor<>("value-state",Integer.class,-1);
    desc.setQueryable("my-query");
    desc.initializeSerializerUnlessSet(new ExecutionConfig());
    ValueState<Integer> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
    KvState<Integer,VoidNamespace,?,?,?> kvState=(KvState<Integer,VoidNamespace,?,?,?>)state;
    assertTrue(kvState instanceof AbstractHeapState);
    Map<VoidNamespace,Map<Integer,?>> stateMap=((AbstractHeapState)kvState).getStateMap();
    assertTrue(stateMap instanceof ConcurrentHashMap);
    kvState.setCurrentNamespace(VoidNamespace.INSTANCE);
    kvState.setCurrentKey(1);
    state.update(121818273);
    Map<Integer,?> namespaceMap=stateMap.get(VoidNamespace.INSTANCE);
    assertNotNull("Value not set",namespaceMap);
    assertTrue(namespaceMap instanceof ConcurrentHashMap);
  }
{
    ListStateDescriptor<Integer> desc=new ListStateDescriptor<>("list-state",Integer.class);
    desc.setQueryable("my-query");
    desc.initializeSerializerUnlessSet(new ExecutionConfig());
    ListState<Integer> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
    KvState<Integer,VoidNamespace,?,?,?> kvState=(KvState<Integer,VoidNamespace,?,?,?>)state;
    assertTrue(kvState instanceof AbstractHeapState);
    Map<VoidNamespace,Map<Integer,?>> stateMap=((AbstractHeapState)kvState).getStateMap();
    assertTrue(stateMap instanceof ConcurrentHashMap);
    kvState.setCurrentNamespace(VoidNamespace.INSTANCE);
    kvState.setCurrentKey(1);
    state.add(121818273);
    Map<Integer,?> namespaceMap=stateMap.get(VoidNamespace.INSTANCE);
    assertNotNull("List not set",namespaceMap);
    assertTrue(namespaceMap instanceof ConcurrentHashMap);
  }
{
    ReducingStateDescriptor<Integer> desc=new ReducingStateDescriptor<>("reducing-state",new ReduceFunction<Integer>(){
      @Override public Integer reduce(      Integer value1,      Integer value2) throws Exception {
        return value1 + value2;
      }
    }
,Integer.class);
    desc.setQueryable("my-query");
    desc.initializeSerializerUnlessSet(new ExecutionConfig());
    ReducingState<Integer> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
    KvState<Integer,VoidNamespace,?,?,?> kvState=(KvState<Integer,VoidNamespace,?,?,?>)state;
    assertTrue(kvState instanceof AbstractHeapState);
    Map<VoidNamespace,Map<Integer,?>> stateMap=((AbstractHeapState)kvState).getStateMap();
    assertTrue(stateMap instanceof ConcurrentHashMap);
    kvState.setCurrentNamespace(VoidNamespace.INSTANCE);
    kvState.setCurrentKey(1);
    state.add(121818273);
    Map<Integer,?> namespaceMap=stateMap.get(VoidNamespace.INSTANCE);
    assertNotNull("List not set",namespaceMap);
    assertTrue(namespaceMap instanceof ConcurrentHashMap);
  }
{
    FoldingStateDescriptor<Integer,Integer> desc=new FoldingStateDescriptor<>("folding-state",0,new FoldFunction<Integer,Integer>(){
      @Override public Integer fold(      Integer accumulator,      Integer value) throws Exception {
        return accumulator + value;
      }
    }
,Integer.class);
    desc.setQueryable("my-query");
    desc.initializeSerializerUnlessSet(new ExecutionConfig());
    FoldingState<Integer,Integer> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
    KvState<Integer,VoidNamespace,?,?,?> kvState=(KvState<Integer,VoidNamespace,?,?,?>)state;
    assertTrue(kvState instanceof AbstractHeapState);
    Map<VoidNamespace,Map<Integer,?>> stateMap=((AbstractHeapState)kvState).getStateMap();
    assertTrue(stateMap instanceof ConcurrentHashMap);
    kvState.setCurrentNamespace(VoidNamespace.INSTANCE);
    kvState.setCurrentKey(1);
    state.add(121818273);
    Map<Integer,?> namespaceMap=stateMap.get(VoidNamespace.INSTANCE);
    assertNotNull("List not set",namespaceMap);
    assertTrue(namespaceMap instanceof ConcurrentHashMap);
  }
}
