{
  final int MAX_PARALLELISM=10;
  CheckpointStreamFactory streamFactory=createStreamFactory();
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE,MAX_PARALLELISM,new KeyGroupRange(0,MAX_PARALLELISM - 1),new DummyEnvironment("test",1,0));
  ValueStateDescriptor<String> kvId=new ValueStateDescriptor<>("id",String.class,null);
  kvId.initializeSerializerUnlessSet(new ExecutionConfig());
  ValueState<String> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  int keyInFirstHalf=17;
  int keyInSecondHalf=42;
  Random rand=new Random(0);
  int firstKeyHalf=KeyGroupRangeAssignment.assignKeyToParallelOperator(keyInFirstHalf,MAX_PARALLELISM,2);
  int secondKeyHalf=KeyGroupRangeAssignment.assignKeyToParallelOperator(keyInFirstHalf,MAX_PARALLELISM,2);
  while (firstKeyHalf == secondKeyHalf) {
    keyInSecondHalf=rand.nextInt();
    secondKeyHalf=KeyGroupRangeAssignment.assignKeyToParallelOperator(keyInSecondHalf,MAX_PARALLELISM,2);
  }
  backend.setCurrentKey(keyInFirstHalf);
  state.update("ShouldBeInFirstHalf");
  backend.setCurrentKey(keyInSecondHalf);
  state.update("ShouldBeInSecondHalf");
  KeyGroupsStateHandle snapshot=runSnapshot(backend.snapshot(0,0,streamFactory));
  List<KeyGroupsStateHandle> firstHalfKeyGroupStates=CheckpointCoordinator.getKeyGroupsStateHandles(Collections.singletonList(snapshot),KeyGroupRangeAssignment.computeKeyGroupRangeForOperatorIndex(MAX_PARALLELISM,2,0));
  List<KeyGroupsStateHandle> secondHalfKeyGroupStates=CheckpointCoordinator.getKeyGroupsStateHandles(Collections.singletonList(snapshot),KeyGroupRangeAssignment.computeKeyGroupRangeForOperatorIndex(MAX_PARALLELISM,2,1));
  backend.dispose();
  AbstractKeyedStateBackend<Integer> firstHalfBackend=restoreKeyedBackend(IntSerializer.INSTANCE,MAX_PARALLELISM,new KeyGroupRange(0,4),firstHalfKeyGroupStates,new DummyEnvironment("test",1,0));
  AbstractKeyedStateBackend<Integer> secondHalfBackend=restoreKeyedBackend(IntSerializer.INSTANCE,MAX_PARALLELISM,new KeyGroupRange(5,9),secondHalfKeyGroupStates,new DummyEnvironment("test",1,0));
  ValueState<String> firstHalfState=firstHalfBackend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  firstHalfBackend.setCurrentKey(keyInFirstHalf);
  assertTrue(firstHalfState.value().equals("ShouldBeInFirstHalf"));
  firstHalfBackend.setCurrentKey(keyInSecondHalf);
  assertTrue(firstHalfState.value() == null);
  ValueState<String> secondHalfState=secondHalfBackend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  secondHalfBackend.setCurrentKey(keyInFirstHalf);
  assertTrue(secondHalfState.value() == null);
  secondHalfBackend.setCurrentKey(keyInSecondHalf);
  assertTrue(secondHalfState.value().equals("ShouldBeInSecondHalf"));
  firstHalfBackend.dispose();
  secondHalfBackend.dispose();
}
