{
  backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
  ValueStateDescriptor<String> kvId=new ValueStateDescriptor<>("id",String.class,null);
  kvId.initializeSerializerUnlessSet(new ExecutionConfig());
  TypeSerializer<Integer> keySerializer=IntSerializer.INSTANCE;
  TypeSerializer<VoidNamespace> namespaceSerializer=VoidNamespaceSerializer.INSTANCE;
  TypeSerializer<String> valueSerializer=kvId.getSerializer();
  ValueState<String> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  @SuppressWarnings("unchecked") KvState<Integer,VoidNamespace,?,?,B> kvState=(KvState<Integer,VoidNamespace,?,?,B>)state;
  backend.setCurrentKey(1);
  assertNull(state.value());
  assertNull(getSerializedValue(kvState,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  state.update("1");
  backend.setCurrentKey(2);
  assertNull(state.value());
  assertNull(getSerializedValue(kvState,2,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  state.update("2");
  backend.setCurrentKey(1);
  assertEquals("1",state.value());
  assertEquals("1",getSerializedValue(kvState,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  HashMap<String,KvStateSnapshot<?,?,?,?,?>> snapshot1=backend.snapshotPartitionedState(682375462378L,2);
  for (  String key : snapshot1.keySet()) {
    if (snapshot1.get(key) instanceof AsynchronousKvStateSnapshot) {
      snapshot1.put(key,((AsynchronousKvStateSnapshot<?,?,?,?,?>)snapshot1.get(key)).materialize());
    }
  }
  backend.setCurrentKey(1);
  state.update("u1");
  backend.setCurrentKey(2);
  state.update("u2");
  backend.setCurrentKey(3);
  state.update("u3");
  HashMap<String,KvStateSnapshot<?,?,?,?,?>> snapshot2=backend.snapshotPartitionedState(682375462379L,4);
  for (  String key : snapshot2.keySet()) {
    if (snapshot2.get(key) instanceof AsynchronousKvStateSnapshot) {
      snapshot2.put(key,((AsynchronousKvStateSnapshot<?,?,?,?,?>)snapshot2.get(key)).materialize());
    }
  }
  backend.setCurrentKey(1);
  assertEquals("u1",state.value());
  assertEquals("u1",getSerializedValue(kvState,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  backend.setCurrentKey(2);
  assertEquals("u2",state.value());
  assertEquals("u2",getSerializedValue(kvState,2,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  backend.setCurrentKey(3);
  assertEquals("u3",state.value());
  assertEquals("u3",getSerializedValue(kvState,3,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  backend.dispose();
  backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
  backend.injectKeyValueStateSnapshots((HashMap)snapshot1);
  for (  String key : snapshot1.keySet()) {
    snapshot1.get(key).discardState();
  }
  ValueState<String> restored1=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  @SuppressWarnings("unchecked") KvState<Integer,VoidNamespace,?,?,B> restoredKvState1=(KvState<Integer,VoidNamespace,?,?,B>)restored1;
  backend.setCurrentKey(1);
  assertEquals("1",restored1.value());
  assertEquals("1",getSerializedValue(restoredKvState1,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  backend.setCurrentKey(2);
  assertEquals("2",restored1.value());
  assertEquals("2",getSerializedValue(restoredKvState1,2,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  backend.dispose();
  backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
  backend.injectKeyValueStateSnapshots((HashMap)snapshot2);
  for (  String key : snapshot2.keySet()) {
    snapshot2.get(key).discardState();
  }
  ValueState<String> restored2=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  @SuppressWarnings("unchecked") KvState<Integer,VoidNamespace,?,?,B> restoredKvState2=(KvState<Integer,VoidNamespace,?,?,B>)restored2;
  backend.setCurrentKey(1);
  assertEquals("u1",restored2.value());
  assertEquals("u1",getSerializedValue(restoredKvState2,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  backend.setCurrentKey(2);
  assertEquals("u2",restored2.value());
  assertEquals("u2",getSerializedValue(restoredKvState2,2,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  backend.setCurrentKey(3);
  assertEquals("u3",restored2.value());
  assertEquals("u3",getSerializedValue(restoredKvState2,3,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
}
