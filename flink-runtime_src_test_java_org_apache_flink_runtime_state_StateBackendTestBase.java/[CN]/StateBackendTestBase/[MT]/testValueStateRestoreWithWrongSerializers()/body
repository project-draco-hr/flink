{
  try {
    backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
    ValueStateDescriptor<String> kvId=new ValueStateDescriptor<>("id",String.class,null);
    kvId.initializeSerializerUnlessSet(new ExecutionConfig());
    ValueState<String> state=backend.getPartitionedState(null,VoidSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    state.update("1");
    backend.setCurrentKey(2);
    state.update("2");
    HashMap<String,KvStateSnapshot<?,?,?,?,?>> snapshot1=backend.snapshotPartitionedState(682375462378L,2);
    for (    String key : snapshot1.keySet()) {
      if (snapshot1.get(key) instanceof AsynchronousKvStateSnapshot) {
        snapshot1.put(key,((AsynchronousKvStateSnapshot<?,?,?,?,?>)snapshot1.get(key)).materialize());
      }
    }
    backend.dispose();
    backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
    backend.injectKeyValueStateSnapshots((HashMap)snapshot1);
    for (    String key : snapshot1.keySet()) {
      snapshot1.get(key).discardState();
    }
    @SuppressWarnings("unchecked") TypeSerializer<String> fakeStringSerializer=(TypeSerializer<String>)(TypeSerializer<?>)FloatSerializer.INSTANCE;
    try {
      kvId=new ValueStateDescriptor<>("id",fakeStringSerializer,null);
      state=backend.getPartitionedState(null,VoidSerializer.INSTANCE,kvId);
      state.value();
      fail("should recognize wrong serializers");
    }
 catch (    RuntimeException e) {
      if (!e.getMessage().contains("Trying to access state using wrong StateDescriptor")) {
        fail("wrong exception " + e);
      }
    }
catch (    Exception e) {
      fail("wrong exception " + e);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
