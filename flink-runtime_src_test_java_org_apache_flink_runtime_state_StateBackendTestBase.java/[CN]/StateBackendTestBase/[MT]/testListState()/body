{
  try {
    backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
    ListStateDescriptor<String> kvId=new ListStateDescriptor<>("id",String.class);
    ListState<String> state=backend.getPartitionedState(null,VoidSerializer.INSTANCE,kvId);
    Joiner joiner=Joiner.on(",");
    backend.setCurrentKey(1);
    assertEquals(null,state.get());
    state.add("1");
    backend.setCurrentKey(2);
    assertEquals(null,state.get());
    state.add("2");
    backend.setCurrentKey(1);
    assertEquals("1",joiner.join(state.get()));
    HashMap<String,KvStateSnapshot<?,?,?,?,?>> snapshot1=backend.snapshotPartitionedState(682375462378L,2);
    for (    String key : snapshot1.keySet()) {
      if (snapshot1.get(key) instanceof AsynchronousKvStateSnapshot) {
        snapshot1.put(key,((AsynchronousKvStateSnapshot<?,?,?,?,?>)snapshot1.get(key)).materialize());
      }
    }
    backend.setCurrentKey(1);
    state.add("u1");
    backend.setCurrentKey(2);
    state.add("u2");
    backend.setCurrentKey(3);
    state.add("u3");
    HashMap<String,KvStateSnapshot<?,?,?,?,?>> snapshot2=backend.snapshotPartitionedState(682375462379L,4);
    for (    String key : snapshot2.keySet()) {
      if (snapshot2.get(key) instanceof AsynchronousKvStateSnapshot) {
        snapshot2.put(key,((AsynchronousKvStateSnapshot<?,?,?,?,?>)snapshot2.get(key)).materialize());
      }
    }
    backend.setCurrentKey(1);
    assertEquals("1,u1",joiner.join(state.get()));
    backend.setCurrentKey(2);
    assertEquals("2,u2",joiner.join(state.get()));
    backend.setCurrentKey(3);
    assertEquals("u3",joiner.join(state.get()));
    backend.dispose();
    backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
    backend.injectKeyValueStateSnapshots((HashMap)snapshot1);
    for (    String key : snapshot1.keySet()) {
      snapshot1.get(key).discardState();
    }
    ListState<String> restored1=backend.getPartitionedState(null,VoidSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    assertEquals("1",joiner.join(restored1.get()));
    backend.setCurrentKey(2);
    assertEquals("2",joiner.join(restored1.get()));
    backend.dispose();
    backend.initializeForJob(new DummyEnvironment("test",1,0),"test_op",IntSerializer.INSTANCE);
    backend.injectKeyValueStateSnapshots((HashMap)snapshot2);
    for (    String key : snapshot2.keySet()) {
      snapshot2.get(key).discardState();
    }
    ListState<String> restored2=backend.getPartitionedState(null,VoidSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    assertEquals("1,u1",joiner.join(restored2.get()));
    backend.setCurrentKey(2);
    assertEquals("2,u2",joiner.join(restored2.get()));
    backend.setCurrentKey(3);
    assertEquals("u3",joiner.join(restored2.get()));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
