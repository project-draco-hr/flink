{
  final File file=File.createTempFile("jsonInputFormatTest",null);
  file.delete();
  final OutputStreamWriter jsonWriter=new OutputStreamWriter(new FileOutputStream(file));
  jsonWriter.write("[{\"id\": 1}, {\"id\": 2}, {\"id\": 3}, {\"id\": 4}, {\"id\": 5}]");
  jsonWriter.close();
  Configuration config=new Configuration();
  final EvaluationContext context=new EvaluationContext();
  context.setSchema(SCHEMA);
  SopremoUtil.serialize(config,SopremoUtil.CONTEXT,context);
  final JsonInputFormat inputFormat=FormatUtil.openInput(JsonInputFormat.class,file.toURI().toString(),config);
  final PactRecord record=new PactRecord();
  for (int index=1; index <= 5; index++) {
    Assert.assertFalse("more pairs expected @ " + index,inputFormat.reachedEnd());
    Assert.assertTrue("valid pair expected @ " + index,inputFormat.nextRecord(record));
    Assert.assertEquals("other order expected",index,((IntNode)((IObjectNode)SCHEMA.recordToJson(record,null)).get("id")).getIntValue());
  }
  if (!inputFormat.reachedEnd()) {
    Assert.assertTrue("no more pairs but reachedEnd did not return false",inputFormat.nextRecord(record));
    Assert.fail("pair unexpected: " + SCHEMA.recordToJson(record,null));
  }
}
