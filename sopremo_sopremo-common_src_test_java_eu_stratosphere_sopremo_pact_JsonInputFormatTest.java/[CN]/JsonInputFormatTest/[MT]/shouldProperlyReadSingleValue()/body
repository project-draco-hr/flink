{
  final File file=File.createTempFile("jsonInputFormatTest",null);
  file.delete();
  final OutputStreamWriter jsonWriter=new OutputStreamWriter(new FileOutputStream(file));
  jsonWriter.write("{\"array\": [{\"id\": 1}, {\"id\": 2}, {\"id\": 3}, {\"id\": 4}, {\"id\": 5}]}");
  jsonWriter.close();
  final JsonInputFormat inputFormat=FormatUtil.createInputFormat(JsonInputFormat.class,file.toURI().toString(),null);
  final KeyValuePair<PactJsonObject.Key,PactJsonObject> pair=inputFormat.createPair();
  if (!inputFormat.reachedEnd())   if (!inputFormat.nextRecord(pair))   Assert.fail("one value expected expected: " + pair);
  if (!inputFormat.reachedEnd()) {
    Assert.assertTrue("no more values but reachedEnd did not return false",inputFormat.nextRecord(pair));
    Assert.fail("value unexpected: " + pair);
  }
  final JsonNode arrayNode=((ObjectNode)pair.getValue().getValue()).get("array");
  Assert.assertNotNull("could not find top level node",arrayNode);
  for (int index=1; index <= 5; index++) {
    Assert.assertNotNull("could not find array element " + index,((ArrayNode)arrayNode).get(index - 1));
    Assert.assertEquals("other order expected",Integer.valueOf(index),((IntNode)((ObjectNode)((ArrayNode)arrayNode).get(index - 1)).get("id")).getIntValue());
  }
}
