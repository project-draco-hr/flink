{
  final int NUM_RECORDS=2 * MEMORY_PAGE_SIZE / 8;
  final List<MemorySegment> memory=this.memoryManager.allocatePages(new DummyInvokable(),3);
  FixedLengthRecordSorter<IntPair> sorter=newSortBuffer(memory);
  UniformIntPairGenerator generator=new UniformIntPairGenerator(Integer.MAX_VALUE,1,false);
  IntPair record=new IntPair();
  int num=-1;
  do {
    generator.next(record);
    num++;
  }
 while (sorter.write(record) && num < NUM_RECORDS);
  FileIOChannel.ID channelID=this.ioManager.createChannelEnumerator().next();
  BlockChannelWriter<MemorySegment> blockChannelWriter=this.ioManager.createBlockChannelWriter(channelID);
  final List<MemorySegment> writeBuffer=this.memoryManager.allocatePages(new DummyInvokable(),3);
  ChannelWriterOutputView outputView=new ChannelWriterOutputView(blockChannelWriter,writeBuffer,writeBuffer.get(0).size());
  sorter.writeToOutput(outputView,0,NUM_RECORDS);
  this.memoryManager.release(outputView.close());
  BlockChannelReader<MemorySegment> blockChannelReader=this.ioManager.createBlockChannelReader(channelID);
  final List<MemorySegment> readBuffer=this.memoryManager.allocatePages(new DummyInvokable(),3);
  ChannelReaderInputView readerInputView=new ChannelReaderInputView(blockChannelReader,readBuffer,false);
  final List<MemorySegment> dataBuffer=this.memoryManager.allocatePages(new DummyInvokable(),3);
  ChannelReaderInputViewIterator<IntPair> iterator=new ChannelReaderInputViewIterator(readerInputView,dataBuffer,this.serializer);
  record=iterator.next(record);
  int i=0;
  while (record != null) {
    Assert.assertEquals(i,record.getKey());
    record=iterator.next(record);
    i++;
  }
  Assert.assertEquals(NUM_RECORDS,i);
  this.memoryManager.release(dataBuffer);
  sorter.dispose();
  this.memoryManager.release(memory);
}
