{
  int noSubtasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String ordersPath=(args.length > 1 ? args[1] : "");
  String lineitemsPath=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  DataSourceContract<PactInteger,Tuple> orders=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,ordersPath,"Orders");
  orders.setFormatParameter("delimiter","\n");
  orders.setDegreeOfParallelism(noSubtasks);
  orders.setOutputContract(UniqueKey.class);
  orders.getCompilerHints().setAvgNumValuesPerKey(1);
  DataSourceContract<PactInteger,Tuple> lineitems=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,lineitemsPath,"LineItems");
  lineitems.setFormatParameter("delimiter","\n");
  lineitems.setDegreeOfParallelism(noSubtasks);
  lineitems.getCompilerHints().setAvgNumValuesPerKey(4);
  MapContract<PactInteger,Tuple,PactInteger,Tuple> filterO=new MapContract<PactInteger,Tuple,PactInteger,Tuple>(FilterO.class,"FilterO");
  filterO.setDegreeOfParallelism(noSubtasks);
  filterO.getCompilerHints().setAvgBytesPerRecord(32);
  filterO.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.05f);
  filterO.getCompilerHints().setAvgNumValuesPerKey(1);
  MapContract<PactInteger,Tuple,PactInteger,Tuple> projectLi=new MapContract<PactInteger,Tuple,PactInteger,Tuple>(ProjectLi.class,"ProjectLi");
  projectLi.setDegreeOfParallelism(noSubtasks);
  projectLi.getCompilerHints().setAvgBytesPerRecord(48);
  projectLi.getCompilerHints().setAvgRecordsEmittedPerStubCall(1.0f);
  projectLi.getCompilerHints().setAvgNumValuesPerKey(4);
  MatchContract<PactInteger,Tuple,Tuple,N_IntStringPair,Tuple> joinLiO=new MatchContract<PactInteger,Tuple,Tuple,N_IntStringPair,Tuple>(JoinLiO.class,"JoinLiO");
  joinLiO.setDegreeOfParallelism(noSubtasks);
  joinLiO.getCompilerHints().setAvgBytesPerRecord(64);
  joinLiO.getCompilerHints().setAvgNumValuesPerKey(4);
  ReduceContract<N_IntStringPair,Tuple,PactInteger,Tuple> aggLiO=new ReduceContract<N_IntStringPair,Tuple,PactInteger,Tuple>(AggLiO.class,"AggLio");
  aggLiO.setDegreeOfParallelism(noSubtasks);
  aggLiO.getCompilerHints().setAvgBytesPerRecord(64);
  aggLiO.getCompilerHints().setAvgRecordsEmittedPerStubCall(1.0f);
  aggLiO.getCompilerHints().setAvgNumValuesPerKey(1);
  DataSinkContract<PactString,Tuple> result=new DataSinkContract<PactString,Tuple>(StringTupleDataOutFormat.class,output,"Output");
  result.setDegreeOfParallelism(noSubtasks);
  result.setInput(aggLiO);
  aggLiO.setInput(joinLiO);
  joinLiO.setFirstInput(filterO);
  filterO.setInput(orders);
  joinLiO.setSecondInput(projectLi);
  projectLi.setInput(lineitems);
  return new Plan(result,"TPCH Q3");
}
