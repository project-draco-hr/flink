{
  int noSubtasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String ordersPath=(args.length > 1 ? args[1] : "");
  String lineitemsPath=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  int waves=(args.length > 4 ? Integer.parseInt(args[4]) : 1);
  FileDataSource orders=new FileDataSource(TupleInFormat.class,ordersPath,"Orders");
  orders.setDegreeOfParallelism(noSubtasks);
  orders.setParameter(TupleInFormat.RECORD_DELIMITER,"\n");
  orders.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(0),1);
  FileDataSource lineitems=new FileDataSource(TupleInFormat.class,lineitemsPath,"LineItems");
  lineitems.setDegreeOfParallelism(noSubtasks);
  lineitems.setParameter(TupleInFormat.RECORD_DELIMITER,"\n");
  lineitems.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(0),4);
  MapContract filterO=new MapContract(FilterO.class,orders,"FilterO");
  filterO.setDegreeOfParallelism(noSubtasks);
  filterO.setParameter(YEAR_FILTER,1993);
  filterO.setParameter(PRIO_FILTER,"5");
  filterO.getCompilerHints().setAvgBytesPerRecord(16);
  filterO.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.05f);
  filterO.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(0),1);
  MapContract projectLi=new MapContract(ProjectLi.class,lineitems,"ProjectLi");
  projectLi.setDegreeOfParallelism(noSubtasks);
  projectLi.getCompilerHints().setAvgBytesPerRecord(20);
  projectLi.getCompilerHints().setAvgRecordsEmittedPerStubCall(1.0f);
  projectLi.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(0),4);
  MatchContract joinLiO=new MatchContract(JoinLiO.class,PactLong.class,0,0,filterO,projectLi,"JoinLiO");
  joinLiO.setDegreeOfParallelism(noSubtasks * waves);
  joinLiO.getCompilerHints().setAvgBytesPerRecord(24);
  joinLiO.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(new int[]{0,1}),4);
  joinLiO.setParameter("INPUT_LEFT_SHIP_STRATEGY","SHIP_BROADCAST");
  joinLiO.setParameter("LOCAL_STRATEGY","LOCAL_STRATEGY_HASH_BUILD_FIRST");
  @SuppressWarnings("unchecked") ReduceContract aggLiO=new ReduceContract(AggLiO.class,new Class[]{PactLong.class,PactString.class},new int[]{0,1},joinLiO,"AggLio");
  aggLiO.setDegreeOfParallelism(noSubtasks);
  aggLiO.getCompilerHints().setAvgBytesPerRecord(30);
  aggLiO.getCompilerHints().setAvgRecordsEmittedPerStubCall(1.0f);
  aggLiO.getCompilerHints().setAvgNumValuesPerDistinctValue(new FieldSet(new int[]{0,1}),1);
  FileDataSink result=new FileDataSink(RecordOutputFormat.class,output,aggLiO,"Output");
  result.setDegreeOfParallelism(noSubtasks);
  result.getParameters().setString(RecordOutputFormat.RECORD_DELIMITER_PARAMETER,"\n");
  result.getParameters().setString(RecordOutputFormat.FIELD_DELIMITER_PARAMETER,"|");
  result.getParameters().setInteger(RecordOutputFormat.NUM_FIELDS_PARAMETER,3);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 0,PactLong.class);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 1,PactString.class);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 2,PactDouble.class);
  Plan plan=new Plan(result,"TPCH Q3");
  plan.setDefaultParallelism(noSubtasks);
  return plan;
}
