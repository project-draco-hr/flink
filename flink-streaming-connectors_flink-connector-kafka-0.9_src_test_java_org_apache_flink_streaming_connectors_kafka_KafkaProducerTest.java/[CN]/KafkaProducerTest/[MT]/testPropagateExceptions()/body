{
  try {
    KafkaProducer<?,?> kafkaProducerMock=mock(KafkaProducer.class);
    when(kafkaProducerMock.partitionsFor(anyString())).thenReturn(Collections.singletonList(new PartitionInfo("mock_topic",42,null,null,null)));
    when(kafkaProducerMock.send(any(ProducerRecord.class),any(Callback.class))).thenAnswer(new Answer<Future<RecordMetadata>>(){
      @Override public Future<RecordMetadata> answer(      InvocationOnMock invocation) throws Throwable {
        Callback callback=(Callback)invocation.getArguments()[1];
        callback.onCompletion(null,new Exception("Test error"));
        return null;
      }
    }
);
    whenNew(KafkaProducer.class).withAnyArguments().thenReturn(kafkaProducerMock);
    FlinkKafkaProducer09<String> producerPropagating=new FlinkKafkaProducer09<>("mock_topic",new SimpleStringSchema(),new Properties(),null);
    producerPropagating.setRuntimeContext(new MockRuntimeContext(17,3));
    producerPropagating.open(new Configuration());
    try {
      producerPropagating.invoke("value");
      producerPropagating.invoke("value");
      fail("This should fail with an exception");
    }
 catch (    Exception e) {
      assertNotNull(e.getCause());
      assertNotNull(e.getCause().getMessage());
      assertTrue(e.getCause().getMessage().contains("Test error"));
    }
    FlinkKafkaProducer09<String> producerLogging=new FlinkKafkaProducer09<>("mock_topic",new SimpleStringSchema(),new Properties(),null);
    producerLogging.setLogFailuresOnly(true);
    producerLogging.setRuntimeContext(new MockRuntimeContext(17,3));
    producerLogging.open(new Configuration());
    producerLogging.invoke("value");
    producerLogging.invoke("value");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
