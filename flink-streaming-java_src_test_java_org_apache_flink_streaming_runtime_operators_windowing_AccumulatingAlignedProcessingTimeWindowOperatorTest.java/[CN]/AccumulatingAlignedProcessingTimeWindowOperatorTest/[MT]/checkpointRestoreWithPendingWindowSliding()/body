{
  try {
    final int factor=4;
    final int windowSlide=50;
    final int windowSize=factor * windowSlide;
    TestTimeServiceProvider timerService=new TestTimeServiceProvider();
    AccumulatingProcessingTimeWindowOperator<Integer,Integer,Integer> op=new AccumulatingProcessingTimeWindowOperator<>(validatingIdentityFunction,identitySelector,IntSerializer.INSTANCE,IntSerializer.INSTANCE,windowSize,windowSlide);
    OneInputStreamOperatorTestHarness<Integer,Integer> testHarness=new OneInputStreamOperatorTestHarness<>(op,new ExecutionConfig(),timerService);
    timerService.setCurrentTime(0);
    testHarness.setup();
    testHarness.open();
    final int numElements=1000;
    final int numElementsFirst=700;
    for (int i=0; i < numElementsFirst; i++) {
      testHarness.processElement(new StreamRecord<>(i));
    }
    List<Integer> resultAtSnapshot=extractFromStreamRecords(testHarness.getOutput());
    int beforeSnapShot=testHarness.getOutput().size();
    StreamStateHandle state=testHarness.snapshot(1L,System.currentTimeMillis());
    int afterSnapShot=testHarness.getOutput().size();
    assertEquals("operator performed computation during snapshot",beforeSnapShot,afterSnapShot);
    assertTrue(resultAtSnapshot.size() <= factor * numElementsFirst);
    for (int i=numElementsFirst; i < numElements; i++) {
      testHarness.processElement(new StreamRecord<>(i));
    }
    testHarness.close();
    op.dispose();
    op=new AccumulatingProcessingTimeWindowOperator<>(validatingIdentityFunction,identitySelector,IntSerializer.INSTANCE,IntSerializer.INSTANCE,windowSize,windowSlide);
    timerService=new TestTimeServiceProvider();
    testHarness=new OneInputStreamOperatorTestHarness<>(op,new ExecutionConfig(),timerService);
    testHarness.setup();
    testHarness.restore(state);
    testHarness.open();
    for (int i=numElementsFirst; i < numElements; i++) {
      testHarness.processElement(new StreamRecord<>(i));
    }
    timerService.setCurrentTime(50);
    timerService.setCurrentTime(100);
    timerService.setCurrentTime(150);
    timerService.setCurrentTime(200);
    timerService.setCurrentTime(250);
    timerService.setCurrentTime(300);
    timerService.setCurrentTime(350);
    List<Integer> finalResult=new ArrayList<>(resultAtSnapshot);
    List<Integer> finalPartialResult=extractFromStreamRecords(testHarness.getOutput());
    finalResult.addAll(finalPartialResult);
    assertEquals(factor * numElements,finalResult.size());
    Collections.sort(finalResult);
    for (int i=0; i < factor * numElements; i++) {
      assertEquals(i / factor,finalResult.get(i).intValue());
    }
    testHarness.close();
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
