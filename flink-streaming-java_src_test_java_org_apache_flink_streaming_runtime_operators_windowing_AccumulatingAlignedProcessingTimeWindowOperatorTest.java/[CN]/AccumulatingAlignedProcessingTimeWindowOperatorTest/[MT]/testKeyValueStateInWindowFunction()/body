{
  try {
    StatefulFunction.globalCounts.clear();
    AccumulatingProcessingTimeWindowOperator<Integer,Integer,Integer> op=new AccumulatingProcessingTimeWindowOperator<>(new StatefulFunction(),identitySelector,IntSerializer.INSTANCE,IntSerializer.INSTANCE,50,50);
    TestTimeServiceProvider timerService=new TestTimeServiceProvider();
    OneInputStreamOperatorTestHarness<Integer,Integer> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(op,new ExecutionConfig(),timerService,identitySelector,BasicTypeInfo.INT_TYPE_INFO);
    testHarness.open();
    timerService.setCurrentTime(0);
    testHarness.processElement(new StreamRecord<>(1));
    testHarness.processElement(new StreamRecord<>(2));
    op.processElement(new StreamRecord<>(1));
    op.processElement(new StreamRecord<>(2));
    op.processElement(new StreamRecord<>(1));
    op.processElement(new StreamRecord<>(1));
    op.processElement(new StreamRecord<>(2));
    op.processElement(new StreamRecord<>(2));
    timerService.setCurrentTime(1000);
    List<Integer> result=extractFromStreamRecords(testHarness.getOutput());
    assertEquals(8,result.size());
    Collections.sort(result);
    assertEquals(Arrays.asList(1,1,1,1,2,2,2,2),result);
    assertEquals(4,StatefulFunction.globalCounts.get(1).intValue());
    assertEquals(4,StatefulFunction.globalCounts.get(2).intValue());
    testHarness.close();
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
