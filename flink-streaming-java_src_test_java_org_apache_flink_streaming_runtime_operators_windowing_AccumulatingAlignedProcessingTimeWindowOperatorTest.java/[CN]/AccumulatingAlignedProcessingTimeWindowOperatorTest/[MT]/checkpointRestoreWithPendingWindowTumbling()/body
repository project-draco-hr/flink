{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final int windowSize=200;
    final CollectingOutput<Integer> out=new CollectingOutput<>(windowSize);
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    AccumulatingProcessingTimeWindowOperator<Integer,Integer,Integer> op=new AccumulatingProcessingTimeWindowOperator<>(validatingIdentityFunction,identitySelector,IntSerializer.INSTANCE,IntSerializer.INSTANCE,windowSize,windowSize);
    op.setup(mockTask,new StreamConfig(new Configuration()),out);
    op.open();
    final int numElementsFirst=700;
    for (int i=0; i < numElementsFirst; i++) {
synchronized (lock) {
        op.processElement(new StreamRecord<Integer>(i));
      }
      Thread.sleep(1);
    }
    StreamTaskState state;
    List<Integer> resultAtSnapshot;
synchronized (lock) {
      int beforeSnapShot=out.getElements().size();
      state=op.snapshotOperatorState(1L,System.currentTimeMillis());
      resultAtSnapshot=new ArrayList<>(out.getElements());
      int afterSnapShot=out.getElements().size();
      assertEquals("operator performed computation during snapshot",beforeSnapShot,afterSnapShot);
    }
    for (int i=0; i < 300; i++) {
synchronized (lock) {
        op.processElement(new StreamRecord<Integer>(i + numElementsFirst));
      }
      Thread.sleep(1);
    }
    op.dispose();
    final CollectingOutput<Integer> out2=new CollectingOutput<>(windowSize);
    op=new AccumulatingProcessingTimeWindowOperator<>(validatingIdentityFunction,identitySelector,IntSerializer.INSTANCE,IntSerializer.INSTANCE,windowSize,windowSize);
    op.setup(mockTask,new StreamConfig(new Configuration()),out2);
    op.restoreState(state);
    op.open();
    final int numElements=1000;
    for (int i=numElementsFirst; i < numElements; i++) {
synchronized (lock) {
        op.processElement(new StreamRecord<Integer>(i));
      }
      Thread.sleep(1);
    }
synchronized (lock) {
      op.close();
    }
    op.dispose();
    List<Integer> finalResult=new ArrayList<>(resultAtSnapshot);
    finalResult.addAll(out2.getElements());
    assertEquals(numElements,finalResult.size());
    Collections.sort(finalResult);
    for (int i=0; i < numElements; i++) {
      assertEquals(i,finalResult.get(i).intValue());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdown();
  }
}
