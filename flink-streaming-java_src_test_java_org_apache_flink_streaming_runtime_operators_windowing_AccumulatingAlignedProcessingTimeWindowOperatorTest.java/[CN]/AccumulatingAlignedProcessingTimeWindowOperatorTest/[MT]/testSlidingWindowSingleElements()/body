{
  final Object lock=new Object();
  final AtomicReference<Throwable> error=new AtomicReference<>();
  final TimeServiceProvider timerService=new DefaultTimeServiceProvider(new ReferenceSettingExceptionHandler(error),lock);
  try {
    final CollectingOutput<Integer> out=new CollectingOutput<>(50);
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    AccumulatingProcessingTimeWindowOperator<Integer,Integer,Integer> op=new AccumulatingProcessingTimeWindowOperator<>(validatingIdentityFunction,identitySelector,IntSerializer.INSTANCE,IntSerializer.INSTANCE,150,50);
    op.setup(mockTask,new StreamConfig(new Configuration()),out);
    op.open();
synchronized (lock) {
      op.processElement(new StreamRecord<Integer>(1));
      op.processElement(new StreamRecord<Integer>(2));
    }
    out.waitForNElements(6,120000);
    List<Integer> result=out.getElements();
    assertEquals(6,result.size());
    Collections.sort(result);
    assertEquals(Arrays.asList(1,1,1,2,2,2),result);
synchronized (lock) {
      op.close();
    }
    shutdownTimerServiceAndWait(timerService);
    op.dispose();
    if (error.get() != null) {
      throw new Exception(error.get());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdownService();
  }
}
