{
  AbstractInputChannel<T> oldInputChannel=null;
  for (int i=0; i < this.inputChannels.size(); i++) {
    final AbstractInputChannel<T> inputChannel=this.inputChannels.get(i);
    if (inputChannel.getID().equals(oldChannelID)) {
      oldInputChannel=inputChannel;
      break;
    }
  }
  if (oldInputChannel == null) {
    return null;
  }
  AbstractInputChannel<T> newInputChannel=null;
switch (newChannelType) {
case FILE:
    newInputChannel=new FileInputChannel<T>(this,oldInputChannel.getChannelIndex(),deserializer,oldInputChannel.getID(),oldInputChannel.getCompressionLevel());
  break;
case INMEMORY:
newInputChannel=new InMemoryInputChannel<T>(this,oldInputChannel.getChannelIndex(),deserializer,oldInputChannel.getID(),oldInputChannel.getCompressionLevel());
break;
case NETWORK:
newInputChannel=new NetworkInputChannel<T>(this,oldInputChannel.getChannelIndex(),deserializer,oldInputChannel.getID(),oldInputChannel.getCompressionLevel());
break;
default :
LOG.error("Unknown input channel type");
return null;
}
newInputChannel.setConnectedChannelID(oldInputChannel.getConnectedChannelID());
this.inputChannels.set(newInputChannel.getChannelIndex(),newInputChannel);
return newInputChannel;
}
