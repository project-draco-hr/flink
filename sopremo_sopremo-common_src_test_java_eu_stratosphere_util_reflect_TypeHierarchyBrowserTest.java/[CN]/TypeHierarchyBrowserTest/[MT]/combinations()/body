{
  final ArrayList<Object[]> cases=new ArrayList<Object[]>();
  cases.add(new Object[]{Object.class,Mode.CLASS_FIRST,Integer.MAX_VALUE,null,new ExpectedValues()});
  cases.add(new Object[]{A.class,Mode.CLASS_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(Object.class,1)});
  cases.add(new Object[]{B.class,Mode.CLASS_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(A.class,1).add(Object.class,2)});
  cases.add(new Object[]{C.class,Mode.CLASS_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(B.class,1).add(A.class,2).add(Object.class,3)});
  cases.add(new Object[]{AI.class,Mode.CLASS_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(Object.class,1).add(I.class,1)});
  cases.add(new Object[]{BI.class,Mode.CLASS_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(A.class,1).add(I.class,1).add(Object.class,2)});
  cases.add(new Object[]{CI.class,Mode.CLASS_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(B.class,1).add(J.class,1).add(A.class,2).add(I.class,2).add(Object.class,3)});
  cases.add(new Object[]{DI.class,Mode.CLASS_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(CI.class,1).add(I.class,1).add(B.class,2).add(J.class,2).add(A.class,3).add(I.class,3).add(Object.class,4)});
  cases.add(new Object[]{AI.class,Mode.CLASS_ONLY,Integer.MAX_VALUE,null,new ExpectedValues().add(Object.class,1)});
  cases.add(new Object[]{BI.class,Mode.CLASS_ONLY,Integer.MAX_VALUE,null,new ExpectedValues().add(A.class,1).add(Object.class,2)});
  cases.add(new Object[]{CI.class,Mode.CLASS_ONLY,Integer.MAX_VALUE,null,new ExpectedValues().add(B.class,1).add(A.class,2).add(Object.class,3)});
  cases.add(new Object[]{DI.class,Mode.CLASS_ONLY,Integer.MAX_VALUE,null,new ExpectedValues().add(CI.class,1).add(B.class,2).add(A.class,3).add(Object.class,4)});
  cases.add(new Object[]{AI.class,Mode.INTERFACE_ONLY,Integer.MAX_VALUE,null,new ExpectedValues().add(I.class,1)});
  cases.add(new Object[]{BI.class,Mode.INTERFACE_ONLY,Integer.MAX_VALUE,null,new ExpectedValues().add(I.class,1)});
  cases.add(new Object[]{CI.class,Mode.INTERFACE_ONLY,Integer.MAX_VALUE,null,new ExpectedValues().add(J.class,1).add(I.class,2)});
  cases.add(new Object[]{DI.class,Mode.INTERFACE_ONLY,Integer.MAX_VALUE,null,new ExpectedValues().add(I.class,1).add(J.class,2).add(I.class,3)});
  cases.add(new Object[]{AI.class,Mode.ALL,Integer.MAX_VALUE,null,new ExpectedValues().add(Object.class,1).add(I.class,1)});
  cases.add(new Object[]{BI.class,Mode.ALL,Integer.MAX_VALUE,null,new ExpectedValues().add(A.class,1).add(I.class,1).add(Object.class,2)});
  cases.add(new Object[]{CI.class,Mode.ALL,Integer.MAX_VALUE,null,new ExpectedValues().add(B.class,1).add(J.class,1).add(A.class,2).add(I.class,2).add(Object.class,3)});
  cases.add(new Object[]{DI.class,Mode.ALL,Integer.MAX_VALUE,null,new ExpectedValues().add(CI.class,1).add(I.class,1).add(B.class,2).add(J.class,2).add(A.class,3).add(I.class,3).add(Object.class,4)});
  cases.add(new Object[]{AI.class,Mode.INTERFACE_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(I.class,1).add(Object.class,1)});
  cases.add(new Object[]{BI.class,Mode.INTERFACE_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(I.class,1).add(A.class,1).add(Object.class,2)});
  cases.add(new Object[]{CI.class,Mode.INTERFACE_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(J.class,1).add(B.class,1).add(I.class,2).add(A.class,2).add(Object.class,3)});
  cases.add(new Object[]{DI.class,Mode.INTERFACE_FIRST,Integer.MAX_VALUE,null,new ExpectedValues().add(I.class,1).add(CI.class,1).add(J.class,2).add(B.class,2).add(I.class,3).add(A.class,3).add(Object.class,4)});
  cases.add(new Object[]{DI.class,Mode.ALL,2,null,new ExpectedValues().add(CI.class,1).add(I.class,1).add(B.class,2).add(J.class,2)});
  cases.add(new Object[]{DI.class,Mode.ALL,3,null,new ExpectedValues().add(CI.class,1).add(I.class,1).add(B.class,2).add(J.class,2).add(A.class,3).add(I.class,3)});
  cases.add(new Object[]{DI.class,Mode.INTERFACE_FIRST,Integer.MAX_VALUE,new Visitor<Class<?>>(){
    @Override public boolean visited(    final Class<?> node,    final int distance){
      return node != J.class;
    }
  }
,new ExpectedValues().add(I.class,1).add(CI.class,1).add(J.class,2)});
  return cases;
}
