{
  Preconditions.checkArgument(userCodeObject instanceof Serializable,"User code object is not serializable: " + userCodeObject.getClass());
  this.userCodeObject=userCodeObject;
  Object current=userCodeObject;
  try {
    while (null != current) {
      Object newCurrent=null;
      for (      Field f : current.getClass().getDeclaredFields()) {
        f.setAccessible(true);
        if (f.getName().contains("$outer")) {
          newCurrent=f.get(current);
        }
        if (!Modifier.isTransient(f.getModifiers()) && !Modifier.isStatic(f.getModifiers()) && f.get(current) != null && !(f.get(current) instanceof Serializable)) {
          throw new RuntimeException("User code object " + userCodeObject + " contains non-serializable field "+ f.getName()+ " = "+ f.get(current));
        }
      }
      current=newCurrent;
    }
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
}
