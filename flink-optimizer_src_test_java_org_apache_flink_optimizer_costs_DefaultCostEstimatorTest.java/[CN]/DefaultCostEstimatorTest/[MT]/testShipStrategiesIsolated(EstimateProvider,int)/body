{
  Costs random=new Costs();
  costEstimator.addRandomPartitioningCost(estimates,random);
  Costs hash=new Costs();
  costEstimator.addHashPartitioningCost(estimates,hash);
  Costs range=new Costs();
  costEstimator.addRangePartitionCost(estimates,range);
  Costs broadcast=new Costs();
  costEstimator.addBroadcastCost(estimates,targetParallelism,broadcast);
  int randomVsHash=random.compareTo(hash);
  int hashVsRange=hash.compareTo(range);
  int hashVsBroadcast=hash.compareTo(broadcast);
  int rangeVsBroadcast=range.compareTo(broadcast);
  assertTrue(randomVsHash <= 0);
  assertTrue(hashVsRange < 0);
  if (targetParallelism > 1) {
    assertTrue(hashVsBroadcast < 0);
  }
 else {
    assertTrue(hashVsBroadcast <= 0);
  }
  if (targetParallelism > 1) {
    assertTrue(rangeVsBroadcast < 0);
  }
}
