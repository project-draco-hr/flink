{
  Assert.assertTrue(typeInformation instanceof PojoTypeInfo);
  Assert.assertEquals(10,typeInformation.getArity());
  Assert.assertEquals(12,typeInformation.getTotalFields());
  boolean arrayListSeen=false, multisetSeen=false, strArraySeen=false;
  PojoTypeInfo<?> pojoTypeForClass=(PojoTypeInfo<?>)typeInformation;
  for (int i=0; i < pojoTypeForClass.getArity(); i++) {
    PojoField field=pojoTypeForClass.getPojoFieldAt(i);
    String name=field.getField().getName();
    if (name.equals("somethingFancy")) {
      if (arrayListSeen) {
        Assert.fail("already seen");
      }
      arrayListSeen=true;
      Assert.assertTrue(field.getTypeInformation() instanceof GenericTypeInfo);
      Assert.assertEquals(ArrayList.class,field.getTypeInformation().getTypeClass());
    }
 else     if (name.equals("fancyIds")) {
      if (multisetSeen) {
        Assert.fail("already seen");
      }
      multisetSeen=true;
      Assert.assertTrue(field.getTypeInformation() instanceof GenericTypeInfo);
      Assert.assertEquals(FancyCollectionSubtype.class,field.getTypeInformation().getTypeClass());
    }
 else     if (name.equals("fancyArray")) {
      if (strArraySeen) {
        Assert.fail("already seen");
      }
      strArraySeen=true;
      Assert.assertEquals(BasicArrayTypeInfo.STRING_ARRAY_TYPE_INFO,field.getTypeInformation());
      Assert.assertEquals(String[].class,field.getTypeInformation().getTypeClass());
    }
 else     if (Arrays.asList("date","someNumberWith??nic??deN??me","someFloat","word","nothing","valueType","collection").contains(name)) {
    }
 else {
      Assert.fail("field " + field + " is not expected");
    }
  }
  Assert.assertTrue("Field was not present",arrayListSeen);
  Assert.assertTrue("Field was not present",multisetSeen);
  Assert.assertTrue("Field was not present",strArraySeen);
}
