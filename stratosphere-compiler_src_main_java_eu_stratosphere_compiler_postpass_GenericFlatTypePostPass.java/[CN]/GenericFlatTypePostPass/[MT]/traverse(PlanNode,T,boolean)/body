{
  if (node instanceof SinkPlanNode) {
    SinkPlanNode sn=(SinkPlanNode)node;
    Channel inchannel=sn.getInput();
    T schema=createEmptySchema();
    sn.postPassHelper=schema;
    try {
      getSinkSchema(sn,schema);
    }
 catch (    ConflictingFieldTypeInfoException e) {
      throw new CompilerPostPassException("Conflicting type infomation for the data sink '" + sn.getSinkNode().getPactContract().getName() + "'.");
    }
    try {
      propagateToChannel(schema,inchannel,createUtilities);
    }
 catch (    MissingFieldTypeInfoException ex) {
      throw new CompilerPostPassException("Missing type infomation for the channel that inputs to the data sink '" + sn.getSinkNode().getPactContract().getName() + "'.");
    }
  }
 else   if (node instanceof SourcePlanNode) {
    if (createUtilities) {
      ((SourcePlanNode)node).setSerializer(createSerializer(parentSchema,node));
    }
  }
 else   if (node instanceof BulkIterationPlanNode) {
    BulkIterationPlanNode iterationNode=(BulkIterationPlanNode)node;
    T schema;
    if (iterationNode.postPassHelper == null) {
      schema=createEmptySchema();
      iterationNode.postPassHelper=schema;
    }
 else {
      schema=(T)iterationNode.postPassHelper;
    }
    schema.increaseNumConnectionsThatContributed();
    if (propagateParentSchemaDown) {
      addSchemaToSchema(parentSchema,schema,iterationNode.getPactContract().getName());
    }
    if (schema.getNumConnectionsThatContributed() < iterationNode.getOutgoingChannels().size()) {
      return;
    }
    if (iterationNode.getRootOfStepFunction() instanceof NAryUnionPlanNode) {
      throw new CompilerException("Optimizer cannot compile an iteration step function where next partial solution is created by a Union node.");
    }
    if (iterationNode.getRootOfTerminationCriterion() != null) {
      SingleInputPlanNode addMapper=(SingleInputPlanNode)iterationNode.getRootOfTerminationCriterion();
      traverse(addMapper.getInput().getSource(),createEmptySchema(),false);
      try {
        addMapper.getInput().setSerializer(createSerializer(createEmptySchema()));
      }
 catch (      MissingFieldTypeInfoException e) {
        throw new RuntimeException(e);
      }
    }
    traverse(iterationNode.getRootOfStepFunction(),schema,false);
    T pss=(T)iterationNode.getPartialSolutionPlanNode().postPassHelper;
    if (pss == null) {
      throw new CompilerException("Error in Optimizer Post Pass: Partial solution schema is null after first traversal of the step function.");
    }
    traverse(iterationNode.getRootOfStepFunction(),pss,createUtilities);
    if (iterationNode.getRootOfTerminationCriterion() != null) {
      SingleInputPlanNode addMapper=(SingleInputPlanNode)iterationNode.getRootOfTerminationCriterion();
      traverse(addMapper.getInput().getSource(),createEmptySchema(),createUtilities);
      try {
        addMapper.getInput().setSerializer(createSerializer(createEmptySchema()));
      }
 catch (      MissingFieldTypeInfoException e) {
        throw new RuntimeException(e);
      }
    }
    addSchemaToSchema(pss,schema,iterationNode.getPactContract().getName());
    if (createUtilities) {
      iterationNode.setSerializerForIterationChannel(createSerializer(pss,iterationNode.getPartialSolutionPlanNode()));
    }
    try {
      propagateToChannel(schema,iterationNode.getInput(),createUtilities);
    }
 catch (    MissingFieldTypeInfoException e) {
      throw new CompilerPostPassException("Could not set up runtime strategy for input channel to node '" + iterationNode.getPactContract().getName() + "'. Missing type information for key field "+ e.getFieldNumber());
    }
  }
 else   if (node instanceof WorksetIterationPlanNode) {
    WorksetIterationPlanNode iterationNode=(WorksetIterationPlanNode)node;
    T schema;
    if (iterationNode.postPassHelper == null) {
      schema=createEmptySchema();
      iterationNode.postPassHelper=schema;
    }
 else {
      schema=(T)iterationNode.postPassHelper;
    }
    schema.increaseNumConnectionsThatContributed();
    if (propagateParentSchemaDown) {
      addSchemaToSchema(parentSchema,schema,iterationNode.getPactContract().getName());
    }
    if (schema.getNumConnectionsThatContributed() < iterationNode.getOutgoingChannels().size()) {
      return;
    }
    if (iterationNode.getNextWorkSetPlanNode() instanceof NAryUnionPlanNode) {
      throw new CompilerException("Optimizer cannot compile a workset iteration step function where the next workset is produced by a Union node.");
    }
    if (iterationNode.getSolutionSetDeltaPlanNode() instanceof NAryUnionPlanNode) {
      throw new CompilerException("Optimizer cannot compile a workset iteration step function where the solution set delta is produced by a Union node.");
    }
    traverse(iterationNode.getNextWorkSetPlanNode(),createEmptySchema(),false);
    traverse(iterationNode.getSolutionSetDeltaPlanNode(),schema,false);
    T wss=(T)iterationNode.getWorksetPlanNode().postPassHelper;
    T sss=(T)iterationNode.getSolutionSetPlanNode().postPassHelper;
    if (wss == null) {
      throw new CompilerException("Error in Optimizer Post Pass: Workset schema is null after first traversal of the step function.");
    }
    if (sss == null) {
      throw new CompilerException("Error in Optimizer Post Pass: Solution set schema is null after first traversal of the step function.");
    }
    traverse(iterationNode.getNextWorkSetPlanNode(),wss,createUtilities);
    traverse(iterationNode.getSolutionSetDeltaPlanNode(),sss,createUtilities);
    try {
      for (      Map.Entry<Integer,X> entry : sss) {
        Integer pos=entry.getKey();
        schema.addType(pos,entry.getValue());
      }
    }
 catch (    ConflictingFieldTypeInfoException e) {
      throw new CompilerPostPassException("Conflicting type information for field " + e.getFieldNumber() + " in node '"+ iterationNode.getPactContract().getName()+ "'. Contradicting types between the "+ "result of the iteration and the solution set schema: "+ e.getPreviousType()+ " and "+ e.getNewType()+ ". Most probable cause: Invalid constant field annotations.");
    }
    if (createUtilities) {
      WorksetIterationNode optNode=iterationNode.getIterationNode();
      iterationNode.setWorksetSerializer(createSerializer(wss,iterationNode.getWorksetPlanNode()));
      iterationNode.setSolutionSetSerializer(createSerializer(sss,iterationNode.getSolutionSetPlanNode()));
      try {
        iterationNode.setSolutionSetComparator(createComparator(optNode.getSolutionSetKeyFields(),null,sss));
      }
 catch (      MissingFieldTypeInfoException ex) {
        throw new CompilerPostPassException("Could not set up the solution set for workset iteration '" + optNode.getPactContract().getName() + "'. Missing type information for key field "+ ex.getFieldNumber()+ '.');
      }
    }
    try {
      propagateToChannel(schema,iterationNode.getInitialSolutionSetInput(),createUtilities);
      propagateToChannel(wss,iterationNode.getInitialWorksetInput(),createUtilities);
    }
 catch (    MissingFieldTypeInfoException ex) {
      throw new CompilerPostPassException("Could not set up runtime strategy for input channel to node '" + iterationNode.getPactContract().getName() + "'. Missing type information for key field "+ ex.getFieldNumber());
    }
  }
 else   if (node instanceof SingleInputPlanNode) {
    SingleInputPlanNode sn=(SingleInputPlanNode)node;
    T schema;
    if (sn.postPassHelper == null) {
      schema=createEmptySchema();
      sn.postPassHelper=schema;
    }
 else {
      schema=(T)sn.postPassHelper;
    }
    schema.increaseNumConnectionsThatContributed();
    SingleInputNode optNode=sn.getSingleInputNode();
    if (propagateParentSchemaDown) {
      addSchemaToSchema(parentSchema,schema,optNode,0);
    }
    if (schema.getNumConnectionsThatContributed() < sn.getOutgoingChannels().size()) {
      return;
    }
    try {
      getSingleInputNodeSchema(sn,schema);
    }
 catch (    ConflictingFieldTypeInfoException e) {
      throw new CompilerPostPassException(getConflictingTypeErrorMessage(e,optNode.getPactContract().getName()));
    }
    if (createUtilities) {
      if (sn.getDriverStrategy().requiresComparator()) {
        try {
          sn.setComparator(createComparator(sn.getKeys(),sn.getSortOrders(),schema));
        }
 catch (        MissingFieldTypeInfoException e) {
          throw new CompilerPostPassException("Could not set up runtime strategy for node '" + optNode.getPactContract().getName() + "'. Missing type information for key field "+ e.getFieldNumber());
        }
      }
    }
    try {
      propagateToChannel(schema,sn.getInput(),createUtilities);
    }
 catch (    MissingFieldTypeInfoException e) {
      throw new CompilerPostPassException("Could not set up runtime strategy for input channel to node '" + optNode.getPactContract().getName() + "'. Missing type information for field "+ e.getFieldNumber());
    }
    for (    Channel c : sn.getBroadcastInputs()) {
      try {
        propagateToChannel(createEmptySchema(),c,createUtilities);
      }
 catch (      MissingFieldTypeInfoException e) {
        throw new CompilerPostPassException("Could not set up runtime strategy for broadcast channel in node '" + optNode.getPactContract().getName() + "'. Missing type information for field "+ e.getFieldNumber());
      }
    }
  }
 else   if (node instanceof DualInputPlanNode) {
    DualInputPlanNode dn=(DualInputPlanNode)node;
    T schema1;
    T schema2;
    if (dn.postPassHelper1 == null) {
      schema1=createEmptySchema();
      schema2=createEmptySchema();
      dn.postPassHelper1=schema1;
      dn.postPassHelper2=schema2;
    }
 else {
      schema1=(T)dn.postPassHelper1;
      schema2=(T)dn.postPassHelper2;
    }
    schema1.increaseNumConnectionsThatContributed();
    schema2.increaseNumConnectionsThatContributed();
    TwoInputNode optNode=dn.getTwoInputNode();
    if (propagateParentSchemaDown) {
      addSchemaToSchema(parentSchema,schema1,optNode,0);
      addSchemaToSchema(parentSchema,schema2,optNode,1);
    }
    if (schema1.getNumConnectionsThatContributed() < dn.getOutgoingChannels().size()) {
      return;
    }
    try {
      getDualInputNodeSchema(dn,schema1,schema2);
    }
 catch (    ConflictingFieldTypeInfoException e) {
      throw new CompilerPostPassException(getConflictingTypeErrorMessage(e,optNode.getPactContract().getName()));
    }
    if (createUtilities) {
      if (dn.getDriverStrategy().requiresComparator()) {
        try {
          dn.setComparator1(createComparator(dn.getKeysForInput1(),dn.getSortOrders(),schema1));
          dn.setComparator2(createComparator(dn.getKeysForInput2(),dn.getSortOrders(),schema2));
        }
 catch (        MissingFieldTypeInfoException e) {
          throw new CompilerPostPassException("Could not set up runtime strategy for node '" + optNode.getPactContract().getName() + "'. Missing type information for field "+ e.getFieldNumber());
        }
        try {
          dn.setPairComparator(createPairComparator(dn.getKeysForInput1(),dn.getKeysForInput2(),dn.getSortOrders(),schema1,schema2));
        }
 catch (        MissingFieldTypeInfoException e) {
          throw new CompilerPostPassException("Could not set up runtime strategy for node '" + optNode.getPactContract().getName() + "'. Missing type information for field "+ e.getFieldNumber());
        }
      }
    }
    try {
      propagateToChannel(schema1,dn.getInput1(),createUtilities);
    }
 catch (    MissingFieldTypeInfoException e) {
      throw new CompilerPostPassException("Could not set up runtime strategy for the first input channel to node '" + optNode.getPactContract().getName() + "'. Missing type information for field "+ e.getFieldNumber());
    }
    try {
      propagateToChannel(schema2,dn.getInput2(),createUtilities);
    }
 catch (    MissingFieldTypeInfoException e) {
      throw new CompilerPostPassException("Could not set up runtime strategy for the second input channel to node '" + optNode.getPactContract().getName() + "'. Missing type information for field "+ e.getFieldNumber());
    }
    for (    Channel c : dn.getBroadcastInputs()) {
      try {
        propagateToChannel(createEmptySchema(),c,createUtilities);
      }
 catch (      MissingFieldTypeInfoException e) {
        throw new CompilerPostPassException("Could not set up runtime strategy for broadcast channel in node '" + optNode.getPactContract().getName() + "'. Missing type information for field "+ e.getFieldNumber());
      }
    }
  }
 else   if (node instanceof NAryUnionPlanNode) {
    try {
      for (      Channel channel : node.getInputs()) {
        propagateToChannel(parentSchema,channel,createUtilities);
      }
    }
 catch (    MissingFieldTypeInfoException ex) {
      throw new CompilerPostPassException("Could not set up runtime strategy for the input channel to " + " a union node. Missing type information for field " + ex.getFieldNumber());
    }
  }
 else   if (node instanceof BulkPartialSolutionPlanNode || node instanceof SolutionSetPlanNode || node instanceof WorksetPlanNode) {
    T schema;
    String name;
    if (node instanceof BulkPartialSolutionPlanNode) {
      BulkPartialSolutionPlanNode psn=(BulkPartialSolutionPlanNode)node;
      if (psn.postPassHelper == null) {
        schema=createEmptySchema();
        psn.postPassHelper=schema;
      }
 else {
        schema=(T)psn.postPassHelper;
      }
      name="partial solution of bulk iteration '" + psn.getPartialSolutionNode().getIterationNode().getPactContract().getName() + "'";
    }
 else     if (node instanceof SolutionSetPlanNode) {
      SolutionSetPlanNode ssn=(SolutionSetPlanNode)node;
      if (ssn.postPassHelper == null) {
        schema=createEmptySchema();
        ssn.postPassHelper=schema;
      }
 else {
        schema=(T)ssn.postPassHelper;
      }
      name="solution set of workset iteration '" + ssn.getSolutionSetNode().getIterationNode().getPactContract().getName() + "'";
    }
 else     if (node instanceof WorksetPlanNode) {
      WorksetPlanNode wsn=(WorksetPlanNode)node;
      if (wsn.postPassHelper == null) {
        schema=createEmptySchema();
        wsn.postPassHelper=schema;
      }
 else {
        schema=(T)wsn.postPassHelper;
      }
      name="workset of workset iteration '" + wsn.getWorksetNode().getIterationNode().getPactContract().getName() + "'";
    }
 else {
      throw new CompilerException();
    }
    schema.increaseNumConnectionsThatContributed();
    addSchemaToSchema(parentSchema,schema,name);
  }
 else {
    throw new CompilerPostPassException("Unknown node type encountered: " + node.getClass().getName());
  }
}
