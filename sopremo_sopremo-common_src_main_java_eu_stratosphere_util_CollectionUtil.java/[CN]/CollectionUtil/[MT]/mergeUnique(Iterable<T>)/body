{
switch (iterables.length) {
case 0:
    return Collections.emptyList();
case 1:
  return iterables[0];
default :
return new WrappingIterable<T,T>(new ConcatenatingIterable<T>(iterables)){
  @Override protected Iterator<T> wrap(  Iterator<T> iterator){
    final Set<T> alreadySeen=new HashSet<T>();
    return new FilteringIterator<T>(iterator,new Predicate<T>(){
      @Override public boolean isTrue(      T param){
        return alreadySeen.add(param);
      }
    }
);
  }
}
;
}
}
