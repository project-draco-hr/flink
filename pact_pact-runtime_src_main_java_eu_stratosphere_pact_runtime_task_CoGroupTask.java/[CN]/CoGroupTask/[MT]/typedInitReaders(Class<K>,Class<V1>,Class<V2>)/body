{
  RecordDeserializer<KeyValuePair<K,V1>> deserializer1=new KeyValuePairDeserializer<K,V1>(ikClass,iv1Class);
  RecordDeserializer<KeyValuePair<K,V2>> deserializer2=new KeyValuePairDeserializer<K,V2>(ikClass,iv2Class);
  DistributionPattern dp1=null;
switch (this.config.getInputShipStrategy(0)) {
case FORWARD:
    dp1=new PointwiseDistributionPattern();
  break;
case PARTITION_HASH:
dp1=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No input ship strategy provided for second input of CoGroupTask.");
}
DistributionPattern dp2=null;
switch (this.config.getInputShipStrategy(1)) {
case FORWARD:
dp2=new PointwiseDistributionPattern();
break;
case PARTITION_HASH:
dp2=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No input ship strategy provided for second input of CoGroupTask.");
}
final int groupSizeOne=this.config.getGroupSize(1);
if (groupSizeOne == 1) {
this.reader1=new RecordReader<KeyValuePair<K,V1>>(this,deserializer1,dp1);
}
 else {
@SuppressWarnings("unchecked") RecordReader<KeyValuePair<K,V1>>[] readers=new RecordReader[groupSizeOne];
for (int i=0; i < groupSizeOne; ++i) {
readers[i]=new RecordReader<KeyValuePair<K,V1>>(this,deserializer1,dp1);
}
this.reader1=new UnionRecordReader<KeyValuePair<K,V1>>(readers);
}
final int groupSizeTwo=this.config.getGroupSize(2);
if (groupSizeTwo == 1) {
this.reader2=new RecordReader<KeyValuePair<K,V2>>(this,deserializer2,dp2);
}
 else {
@SuppressWarnings("unchecked") RecordReader<KeyValuePair<K,V2>>[] readers=new RecordReader[groupSizeTwo];
for (int i=0; i < groupSizeTwo; ++i) {
readers[i]=new RecordReader<KeyValuePair<K,V2>>(this,deserializer2,dp2);
}
this.reader2=new UnionRecordReader<KeyValuePair<K,V2>>(readers);
}
}
