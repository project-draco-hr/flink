{
  GlobalProperties inProps1=join.getInput1().getGlobalProperties();
  GlobalProperties inProps2=join.getInput2().getGlobalProperties();
  if (inProps1.getPartitioning() == PartitioningProperty.HASH_PARTITIONED && inProps2.getPartitioning() == PartitioningProperty.HASH_PARTITIONED) {
    FieldList pFields1=inProps1.getPartitioningFields();
    FieldList pFields2=inProps2.getPartitioningFields();
    assertTrue("Inputs are not the same number of fields. Input 1: " + pFields1 + ", Input 2: "+ pFields2,pFields1.size() == pFields2.size());
    FieldList reqPFields1=join.getKeysForInput1();
    FieldList reqPFields2=join.getKeysForInput2();
    for (int i=0; i < pFields1.size(); i++) {
      int f1=pFields1.get(i);
      int f2=pFields2.get(i);
      int pos1=getPosInFieldList(f1,reqPFields1);
      int pos2=getPosInFieldList(f2,reqPFields2);
      if (pos1 < 0) {
        fail("Input 1 is partitioned on field " + f1 + " which is not contained in the key set "+ reqPFields1);
      }
      if (pos2 < 0) {
        fail("Input 2 is partitioned on field " + f2 + " which is not contained in the key set "+ reqPFields2);
      }
      if (pos1 != pos2) {
        fail("Inputs are not partitioned on the same key fields");
      }
    }
  }
 else   if (inProps1.getPartitioning() == PartitioningProperty.FULL_REPLICATION && inProps2.getPartitioning() == PartitioningProperty.RANDOM_PARTITIONED) {
  }
 else   if (inProps1.getPartitioning() == PartitioningProperty.RANDOM_PARTITIONED && inProps2.getPartitioning() == PartitioningProperty.FULL_REPLICATION) {
  }
 else {
    throw new UnsupportedOperationException("This method has only been implemented to check for hash partitioned coGroupinputs");
  }
}
