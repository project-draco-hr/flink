def reduce(self, iterator, collector):
    other_vertices = []
    data = iterator.next()
    edge = (data[0], data[1])
    group_vertex = edge[0]
    other_vertices.append(edge[1])
    while iterator.has_next():
        data = iterator.next()
        edge = [data[0], data[1]]
        other_vertex = edge[1]
        contained = False
        for v in other_vertices:
            if (v == other_vertex):
                contained = True
                break
        if ((not contained) and (not (other_vertex == group_vertex))):
            other_vertices.append(other_vertex)
    degree = len(other_vertices)
    for other_vertex in other_vertices:
        if (group_vertex < other_vertex):
            output_edge = (group_vertex, degree, other_vertex, 0)
        else:
            output_edge = (other_vertex, 0, group_vertex, degree)
        collector.collect(output_edge)
