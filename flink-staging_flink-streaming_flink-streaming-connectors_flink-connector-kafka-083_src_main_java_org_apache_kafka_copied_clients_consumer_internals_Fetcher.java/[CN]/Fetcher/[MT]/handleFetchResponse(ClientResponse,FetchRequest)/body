{
  if (resp.wasDisconnected()) {
    int correlation=resp.request().request().header().correlationId();
    log.debug("Cancelled fetch request {} with correlation id {} due to node {} being disconnected",resp.request(),correlation,resp.request().request().destination());
  }
 else {
    int totalBytes=0;
    int totalCount=0;
    FetchResponse response=new FetchResponse(resp.responseBody());
    for (    Map.Entry<TopicPartition,FetchResponse.PartitionData> entry : response.responseData().entrySet()) {
      TopicPartition tp=entry.getKey();
      FetchResponse.PartitionData partition=entry.getValue();
      if (!subscriptions.assignedPartitions().contains(tp)) {
        log.debug("Ignoring fetched data for partition {} which is no longer assigned.",tp);
      }
 else       if (partition.errorCode == Errors.NONE.code()) {
        int bytes=0;
        ByteBuffer buffer=partition.recordSet;
        MemoryRecords records=MemoryRecords.readableRecords(buffer);
        long fetchOffset=request.fetchData().get(tp).offset;
        List<ConsumerRecord<K,V>> parsed=new ArrayList<ConsumerRecord<K,V>>();
        for (        LogEntry logEntry : records) {
          parsed.add(parseRecord(tp,logEntry));
          bytes+=logEntry.size();
        }
        if (parsed.size() > 0) {
          ConsumerRecord<K,V> record=parsed.get(parsed.size() - 1);
          this.subscriptions.fetched(tp,record.offset() + 1);
          this.records.add(new PartitionRecords<K,V>(fetchOffset,tp,parsed));
          this.sensors.recordsFetchLag.record(partition.highWatermark - record.offset());
        }
        this.sensors.recordTopicFetchMetrics(tp.topic(),bytes,parsed.size());
        totalBytes+=bytes;
        totalCount+=parsed.size();
      }
 else       if (partition.errorCode == Errors.NOT_LEADER_FOR_PARTITION.code() || partition.errorCode == Errors.UNKNOWN_TOPIC_OR_PARTITION.code()) {
        this.metadata.requestUpdate();
      }
 else       if (partition.errorCode == Errors.OFFSET_OUT_OF_RANGE.code()) {
        log.info("Fetch offset {} is out of range, resetting offset",subscriptions.fetched(tp));
        subscriptions.needOffsetReset(tp);
      }
 else       if (partition.errorCode == Errors.UNKNOWN.code()) {
        log.warn("Unknown error fetching data for topic-partition {}",tp);
      }
 else {
        throw new IllegalStateException("Unexpected error code " + partition.errorCode + " while fetching data");
      }
    }
    this.sensors.bytesFetched.record(totalBytes);
    this.sensors.recordsFetched.record(totalCount);
  }
  this.sensors.fetchLatency.record(resp.requestLatencyMs());
}
