{
switch (mapValueType) {
case STRING:
    StringMapValue sm=new StringMapValue();
  for (  Map.Entry<CharSequence,?> entry : avroMap.entrySet())   sm.put(new StringValue((CharSequence)entry.getKey()),new StringValue((String)entry.getValue()));
return sm;
case INT:
IntMapValue im=new IntMapValue();
for (Map.Entry<CharSequence,?> entry : avroMap.entrySet()) im.put(new StringValue((CharSequence)entry.getKey()),new IntValue((Integer)entry.getValue()));
return im;
case BOOLEAN:
BooleanMapValue bm=new BooleanMapValue();
for (Map.Entry<CharSequence,?> entry : avroMap.entrySet()) bm.put(new StringValue((CharSequence)entry.getKey()),new BooleanValue((Boolean)entry.getValue()));
return bm;
case DOUBLE:
DoubleMapValue dm=new DoubleMapValue();
for (Map.Entry<CharSequence,?> entry : avroMap.entrySet()) dm.put(new StringValue((CharSequence)entry.getKey()),new DoubleValue((Double)entry.getValue()));
return dm;
case FLOAT:
FloatMapValue fm=new FloatMapValue();
for (Map.Entry<CharSequence,?> entry : avroMap.entrySet()) fm.put(new StringValue((CharSequence)entry.getKey()),new FloatValue((Float)entry.getValue()));
return fm;
case LONG:
LongMapValue lm=new LongMapValue();
for (Map.Entry<CharSequence,?> entry : avroMap.entrySet()) lm.put(new StringValue((CharSequence)entry.getKey()),new LongValue((Long)entry.getValue()));
return lm;
default :
throw new RuntimeException("Map values of type " + mapValueType + " are not supported for Avro map.");
}
}
