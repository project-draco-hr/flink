{
  if (avroRecord == null) {
    return null;
  }
  final Type type=checkTypeConstraintsAndGetType(field.schema());
switch (type) {
case ARRAY:
    final Type elementType=field.schema().getElementType().getType();
  final List<?> avroList=(List<?>)avroRecord;
return convertAvroArrayToListValue(elementType,avroList);
case ENUM:
final List<String> symbols=field.schema().getEnumSymbols();
final String avroRecordString=avroRecord.toString();
if (!symbols.contains(avroRecordString)) {
throw new RuntimeException("The given Avro file contains field with a invalid enum symbol");
}
sString.setValue(avroRecordString);
return sString;
case MAP:
final Type valueType=field.schema().getValueType().getType();
final Map<CharSequence,?> avroMap=(Map<CharSequence,?>)avroRecord;
return convertAvroMapToMapValue(valueType,avroMap);
default :
return convertAvroPrimitiveToValue(type,avroRecord);
}
}
