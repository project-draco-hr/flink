{
  File tmpOutPath=null;
  File tmpOutFile=null;
  try {
    tmpOutPath=File.createTempFile("fileOutputFormatTest","Test1");
    tmpOutFile=new File(tmpOutPath.getAbsolutePath() + "/1");
  }
 catch (  IOException e) {
    throw new RuntimeException("Test in error",e);
  }
  String tmpFilePath=tmpOutPath.toURI().toString();
  DummyFileOutputFormat dfof=new DummyFileOutputFormat();
  dfof.setOutputFilePath(new Path(tmpFilePath));
  dfof.setWriteMode(WriteMode.NO_OVERWRITE);
  dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
  dfof.configure(new Configuration());
  boolean exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(exception);
  tmpOutPath.delete();
  Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
  dfof=new DummyFileOutputFormat();
  dfof.setOutputFilePath(new Path(tmpFilePath));
  dfof.setWriteMode(WriteMode.NO_OVERWRITE);
  dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
  dfof.configure(new Configuration());
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(exception);
  tmpOutPath.delete();
  dfof=new DummyFileOutputFormat();
  dfof.setOutputFilePath(new Path(tmpFilePath));
  dfof.setWriteMode(WriteMode.NO_OVERWRITE);
  dfof.setOutputDirectoryMode(OutputDirectoryMode.PARONLY);
  dfof.configure(new Configuration());
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
  dfof=new DummyFileOutputFormat();
  dfof.setOutputFilePath(new Path(tmpFilePath));
  dfof.setWriteMode(WriteMode.NO_OVERWRITE);
  dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
  dfof.configure(new Configuration());
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(exception);
  tmpOutPath.delete();
  Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
  dfof=new DummyFileOutputFormat();
  dfof.setOutputFilePath(new Path(tmpFilePath));
  dfof.setWriteMode(WriteMode.NO_OVERWRITE);
  dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
  dfof.configure(new Configuration());
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
  Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
  (new File(tmpOutPath.getAbsoluteFile() + "/1")).delete();
  dfof=new DummyFileOutputFormat();
  dfof.setOutputFilePath(new Path(tmpFilePath));
  dfof.setWriteMode(WriteMode.NO_OVERWRITE);
  dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
  dfof.testFileName=true;
  Configuration c=new Configuration();
  dfof.configure(c);
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  File customOutFile=new File(tmpOutPath.getAbsolutePath() + "/fancy-1-0.avro");
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
  Assert.assertTrue(customOutFile.exists() && customOutFile.isFile());
  customOutFile.delete();
  customOutFile=new File(tmpOutPath.getAbsolutePath() + "/1");
  try {
    customOutFile.createNewFile();
  }
 catch (  IOException e) {
    Assert.fail("Error creating file");
  }
  dfof=new DummyFileOutputFormat();
  dfof.setOutputFilePath(new Path(tmpFilePath));
  dfof.setWriteMode(WriteMode.NO_OVERWRITE);
  dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
  dfof.configure(new Configuration());
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(exception);
  (new File(tmpOutPath.getAbsoluteFile() + "/1")).delete();
  tmpOutPath.delete();
  dfof=new DummyFileOutputFormat();
  dfof.setOutputFilePath(new Path(tmpFilePath));
  dfof.setWriteMode(WriteMode.NO_OVERWRITE);
  dfof.setOutputDirectoryMode(OutputDirectoryMode.ALWAYS);
  dfof.configure(new Configuration());
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
  Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
  (new File(tmpOutPath.getAbsoluteFile() + "/1")).delete();
  tmpOutPath.delete();
}
