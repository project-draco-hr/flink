{
  if (super.mode == TestExecutionMode.COLLECTION) {
    throw new InvalidProgramException("Does not apply for collection execution");
  }
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSource<Long> source=env.generateSequence(0,10000);
  DataSet<Tuple2<Long,String>> tuples=source.map(new MapFunction<Long,Tuple2<Long,String>>(){
    @Override public Tuple2<Long,String> map(    Long v) throws Exception {
      return new Tuple2<>(v,Long.toString(v));
    }
  }
);
  DeltaIteration<Tuple2<Long,String>,Tuple2<Long,String>> it=tuples.iterateDelta(tuples,10,0);
  DataSet<Tuple2<Long,String>> body=it.getWorkset().partitionByRange(1).join(it.getSolutionSet()).where(0).equalTo(0).projectFirst(0).projectSecond(1);
  DataSet<Tuple2<Long,String>> result=it.closeWith(body,body);
  result.collect();
}
