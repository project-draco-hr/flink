{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple2<Long,Long>> dataSet=env.generateSequence(0,10000).map(new MapFunction<Long,Tuple2<Long,Long>>(){
    @Override public Tuple2<Long,Long> map(    Long value) throws Exception {
      return new Tuple2<>(value / 5000,value % 5000);
    }
  }
);
  final Tuple2Comparator<Long> tuple2Comparator=new Tuple2Comparator<>(new LongComparator(true),new LongComparator(false));
  MinMaxSelector<Tuple2<Long,Long>> minMaxSelector=new MinMaxSelector<>(tuple2Comparator);
  final List<Tuple2<Tuple2<Long,Long>,Tuple2<Long,Long>>> collected=dataSet.partitionByRange(0,1).withOrders(Order.ASCENDING,Order.DESCENDING).mapPartition(minMaxSelector).collect();
  Collections.sort(collected,new Tuple2Comparator<>(tuple2Comparator));
  Tuple2<Long,Long> previousMax=null;
  for (  Tuple2<Tuple2<Long,Long>,Tuple2<Long,Long>> tuple2 : collected) {
    assertTrue("Min element in each partition should be smaller than max.",tuple2Comparator.compare(tuple2.f0,tuple2.f1) <= 0);
    if (previousMax == null) {
      previousMax=tuple2.f1;
    }
 else {
      assertTrue("Partitions overlap. Previous max should be smaller than current min.",tuple2Comparator.compare(previousMax,tuple2.f0) < 0);
      if (previousMax.f0.equals(tuple2.f0.f0)) {
        assertEquals("Ordering on the second field should be continous.",previousMax.f1 - 1,tuple2.f0.f1.longValue());
      }
      previousMax=tuple2.f1;
    }
  }
}
