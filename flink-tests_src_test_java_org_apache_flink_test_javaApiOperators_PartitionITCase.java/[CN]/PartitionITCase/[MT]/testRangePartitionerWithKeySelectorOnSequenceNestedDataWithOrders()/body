{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  final DataSet<Tuple2<ComparablePojo,Long>> dataSet=env.generateSequence(0,10000).map(new MapFunction<Long,Tuple2<ComparablePojo,Long>>(){
    @Override public Tuple2<ComparablePojo,Long> map(    Long value) throws Exception {
      return new Tuple2<>(new ComparablePojo(value / 5000,value % 5000),value);
    }
  }
);
  final List<Tuple2<ComparablePojo,ComparablePojo>> collected=dataSet.partitionByRange(new KeySelector<Tuple2<ComparablePojo,Long>,ComparablePojo>(){
    @Override public ComparablePojo getKey(    Tuple2<ComparablePojo,Long> value) throws Exception {
      return value.f0;
    }
  }
).withOrders(Order.ASCENDING).mapPartition(new MinMaxSelector<>(new ComparablePojoComparator())).mapPartition(new ExtractComparablePojo()).collect();
  final Comparator<Tuple2<ComparablePojo,ComparablePojo>> pojoComparator=new Comparator<Tuple2<ComparablePojo,ComparablePojo>>(){
    @Override public int compare(    Tuple2<ComparablePojo,ComparablePojo> o1,    Tuple2<ComparablePojo,ComparablePojo> o2){
      return o1.f0.compareTo(o2.f1);
    }
  }
;
  Collections.sort(collected,pojoComparator);
  ComparablePojo previousMax=null;
  for (  Tuple2<ComparablePojo,ComparablePojo> element : collected) {
    assertTrue("Min element in each partition should be smaller than max.",element.f0.compareTo(element.f1) <= 0);
    if (previousMax == null) {
      previousMax=element.f1;
    }
 else {
      assertTrue("Partitions overlap. Previous max should be smaller than current min.",previousMax.compareTo(element.f0) < 0);
      if (previousMax.first.equals(element.f0.first)) {
        assertEquals("Ordering on the second field should be continous.",previousMax.second - 1,element.f0.second.longValue());
      }
      previousMax=element.f1;
    }
  }
}
