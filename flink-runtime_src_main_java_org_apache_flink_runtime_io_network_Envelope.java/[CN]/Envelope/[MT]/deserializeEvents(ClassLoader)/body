{
  if (this.serializedEventList == null) {
    return Collections.emptyList();
  }
  try {
    DataInputDeserializer deserializer=new DataInputDeserializer(this.serializedEventList);
    int numEvents=deserializer.readInt();
    ArrayList<AbstractEvent> events=new ArrayList<AbstractEvent>(numEvents);
    for (int i=0; i < numEvents; i++) {
      String className=deserializer.readUTF();
      Class<? extends AbstractEvent> clazz;
      try {
        clazz=Class.forName(className).asSubclass(AbstractEvent.class);
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException("Could not load event class '" + className + "'.",e);
      }
catch (      ClassCastException e) {
        throw new RuntimeException("The class '" + className + "' is no valid subclass of '"+ AbstractEvent.class.getName()+ "'.",e);
      }
      AbstractEvent evt=InstantiationUtil.instantiate(clazz,AbstractEvent.class);
      evt.read(deserializer);
      events.add(evt);
    }
    return events;
  }
 catch (  IOException e) {
    throw new RuntimeException("Error while deserializing the events.",e);
  }
}
