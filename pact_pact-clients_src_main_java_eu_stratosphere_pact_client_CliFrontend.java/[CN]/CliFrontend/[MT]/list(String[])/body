{
  boolean running;
  boolean scheduled;
  CommandLine line=null;
  try {
    line=parser.parse(this.options.get(ACTION_LIST),args,false);
  }
 catch (  Exception e) {
    handleError(e);
  }
  running=line.hasOption(RUNNING_OPTION.getOpt());
  scheduled=line.hasOption(SCHEDULED_OPTION.getOpt());
  if (!running && !scheduled) {
    System.err.println("Error: Specify the status of the jobs to list.");
    printHelp();
    System.exit(1);
  }
  ExtendedManagementProtocol jmConn=null;
  try {
    jmConn=getJMConnection();
    List<NewJobEvent> recentJobs=jmConn.getRecentJobs();
    ArrayList<NewJobEvent> runningJobs=null;
    ArrayList<NewJobEvent> scheduledJobs=null;
    if (running) {
      runningJobs=new ArrayList<NewJobEvent>();
    }
    if (scheduled) {
      scheduledJobs=new ArrayList<NewJobEvent>();
    }
    for (    NewJobEvent je : recentJobs) {
      if (running) {
      }
      if (scheduled) {
        scheduledJobs.add(je);
      }
    }
    SimpleDateFormat df=new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
    if (running) {
      if (runningJobs.size() == 0) {
        System.out.println("No running jobs.");
      }
 else {
        Collections.sort(runningJobs,new Comparator<NewJobEvent>(){
          @Override public int compare(          NewJobEvent o1,          NewJobEvent o2){
            return (int)(o1.getTimestamp() - o2.getTimestamp());
          }
        }
);
        System.out.println("--------------------------------------------------------------");
        System.out.println("Running Jobs: ");
        for (        NewJobEvent je : runningJobs) {
          System.out.println(df.format(new Date(je.getTimestamp())) + " : " + je.getJobID().toString()+ " : "+ je.getJobName());
        }
        System.out.println("--------------------------------------------------------------");
      }
    }
    if (scheduled) {
      if (scheduledJobs.size() == 0) {
        System.out.println("No scheduled jobs.");
      }
 else {
        Collections.sort(scheduledJobs,new Comparator<NewJobEvent>(){
          @Override public int compare(          NewJobEvent o1,          NewJobEvent o2){
            return (int)(o1.getTimestamp() - o2.getTimestamp());
          }
        }
);
        System.out.println("--------------------------------------------------------------");
        System.out.println("Scheduled Jobs: ");
        for (        NewJobEvent je : scheduledJobs) {
          System.out.println(df.format(new Date(je.getTimestamp())) + " : " + je.getJobID().toString()+ " : "+ je.getJobName());
        }
        System.out.println("--------------------------------------------------------------");
      }
    }
  }
 catch (  Throwable t) {
    handleError(t);
  }
 finally {
    if (jmConn != null) {
      try {
        RPC.stopProxy(jmConn);
      }
 catch (      Throwable t) {
        System.err.println("Could not cleanly shut down connection from compiler to job manager");
      }
    }
    jmConn=null;
  }
}
