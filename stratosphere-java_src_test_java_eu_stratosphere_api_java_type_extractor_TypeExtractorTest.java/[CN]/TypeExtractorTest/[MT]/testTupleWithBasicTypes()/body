{
  MapFunction<?,?> function=new MapFunction<Tuple9<Integer,Long,Double,Float,Boolean,String,Character,Short,Byte>,Tuple9<Integer,Long,Double,Float,Boolean,String,Character,Short,Byte>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple9<Integer,Long,Double,Float,Boolean,String,Character,Short,Byte> map(    Tuple9<Integer,Long,Double,Float,Boolean,String,Character,Short,Byte> value) throws Exception {
      return null;
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getMapReturnTypes(function,null);
  Assert.assertTrue(ti.isTupleType());
  Assert.assertEquals(9,ti.getArity());
  Assert.assertTrue(ti instanceof TupleTypeInfo);
  TupleTypeInfo<?> tti=(TupleTypeInfo<?>)ti;
  Assert.assertEquals(Tuple9.class,tti.getTypeClass());
  for (int i=0; i < 9; i++) {
    Assert.assertTrue(tti.getTypeAt(i) instanceof BasicTypeInfo);
  }
  Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO,tti.getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO,tti.getTypeAt(1));
  Assert.assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO,tti.getTypeAt(2));
  Assert.assertEquals(BasicTypeInfo.FLOAT_TYPE_INFO,tti.getTypeAt(3));
  Assert.assertEquals(BasicTypeInfo.BOOLEAN_TYPE_INFO,tti.getTypeAt(4));
  Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO,tti.getTypeAt(5));
  Assert.assertEquals(BasicTypeInfo.CHAR_TYPE_INFO,tti.getTypeAt(6));
  Assert.assertEquals(BasicTypeInfo.SHORT_TYPE_INFO,tti.getTypeAt(7));
  Assert.assertEquals(BasicTypeInfo.BYTE_TYPE_INFO,tti.getTypeAt(8));
  Tuple9<Integer,Long,Double,Float,Boolean,String,Character,Short,Byte> t=new Tuple9<Integer,Long,Double,Float,Boolean,String,Character,Short,Byte>(1,1L,1.0,1.0F,false,"Hello World",'w',(short)1,(byte)1);
  Assert.assertTrue(TypeExtractor.getForObject(t) instanceof TupleTypeInfo);
  TupleTypeInfo<?> tti2=(TupleTypeInfo<?>)TypeExtractor.getForObject(t);
  Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO,tti2.getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO,tti2.getTypeAt(1));
  Assert.assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO,tti2.getTypeAt(2));
  Assert.assertEquals(BasicTypeInfo.FLOAT_TYPE_INFO,tti2.getTypeAt(3));
  Assert.assertEquals(BasicTypeInfo.BOOLEAN_TYPE_INFO,tti2.getTypeAt(4));
  Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO,tti2.getTypeAt(5));
  Assert.assertEquals(BasicTypeInfo.CHAR_TYPE_INFO,tti2.getTypeAt(6));
  Assert.assertEquals(BasicTypeInfo.SHORT_TYPE_INFO,tti2.getTypeAt(7));
  Assert.assertEquals(BasicTypeInfo.BYTE_TYPE_INFO,tti2.getTypeAt(8));
  try {
    TypeExtractor.getForClass(Tuple9.class);
    Assert.fail("Exception expected here");
  }
 catch (  InvalidTypesException e) {
  }
}
