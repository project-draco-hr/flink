{
  MapFunction<?,?> function=new MapFunction<Tuple2<StringValue,IntValue>,Tuple2<StringValue,IntValue>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<StringValue,IntValue> map(    Tuple2<StringValue,IntValue> value) throws Exception {
      return null;
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getMapReturnTypes(function,(TypeInformation)TypeInformation.parse("Tuple2<StringValue, IntValue>"));
  Assert.assertFalse(ti.isBasicType());
  Assert.assertTrue(ti.isTupleType());
  Assert.assertEquals(StringValue.class,((TupleTypeInfo<?>)ti).getTypeAt(0).getTypeClass());
  Assert.assertEquals(IntValue.class,((TupleTypeInfo<?>)ti).getTypeAt(1).getTypeClass());
  Tuple2<StringValue,IntValue> t=new Tuple2<StringValue,IntValue>(new StringValue("x"),new IntValue(1));
  TypeInformation<?> ti2=TypeExtractor.getForObject(t);
  Assert.assertFalse(ti2.isBasicType());
  Assert.assertTrue(ti2.isTupleType());
  Assert.assertEquals(((TupleTypeInfo<?>)ti2).getTypeAt(0).getTypeClass(),StringValue.class);
  Assert.assertEquals(((TupleTypeInfo<?>)ti2).getTypeAt(1).getTypeClass(),IntValue.class);
}
