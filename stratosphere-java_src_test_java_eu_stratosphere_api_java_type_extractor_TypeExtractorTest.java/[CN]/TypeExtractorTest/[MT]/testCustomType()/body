{
  CrossFunction<?,?,?> function=new CrossFunction<CustomType,Integer,CustomType>(){
    private static final long serialVersionUID=1L;
    @Override public CustomType cross(    CustomType first,    Integer second) throws Exception {
      return null;
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getCrossReturnTypes(function,(TypeInformation)TypeInformation.parse("eu.stratosphere.api.java.type.extractor.TypeExtractorTest$CustomType"),(TypeInformation)TypeInformation.parse("Integer"));
  Assert.assertFalse(ti.isBasicType());
  Assert.assertFalse(ti.isTupleType());
  Assert.assertTrue(ti instanceof GenericTypeInfo);
  Assert.assertEquals(ti.getTypeClass(),CustomType.class);
  Assert.assertTrue(TypeExtractor.getForClass(CustomType.class) instanceof GenericTypeInfo);
  Assert.assertEquals(TypeExtractor.getForClass(CustomType.class).getTypeClass(),ti.getTypeClass());
  CustomType t=new CustomType("World",1);
  TypeInformation<?> ti2=TypeExtractor.getForObject(t);
  Assert.assertFalse(ti2.isBasicType());
  Assert.assertFalse(ti2.isTupleType());
  Assert.assertTrue(ti2 instanceof GenericTypeInfo);
  Assert.assertEquals(ti2.getTypeClass(),CustomType.class);
}
