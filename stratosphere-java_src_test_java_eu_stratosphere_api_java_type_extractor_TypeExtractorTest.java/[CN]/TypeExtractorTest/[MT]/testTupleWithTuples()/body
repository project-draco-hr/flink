{
  FlatMapFunction<?,?> function=new FlatMapFunction<Tuple3<Tuple1<String>,Tuple1<Integer>,Tuple2<Long,Long>>,Tuple3<Tuple1<String>,Tuple1<Integer>,Tuple2<Long,Long>>>(){
    private static final long serialVersionUID=1L;
    @Override public void flatMap(    Tuple3<Tuple1<String>,Tuple1<Integer>,Tuple2<Long,Long>> value,    Collector<Tuple3<Tuple1<String>,Tuple1<Integer>,Tuple2<Long,Long>>> out) throws Exception {
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getFlatMapReturnTypes(function,(TypeInformation)TypeInformation.parse("Tuple3<Tuple1<String>, Tuple1<Integer>, Tuple2<Long, Long>>"));
  Assert.assertTrue(ti.isTupleType());
  Assert.assertEquals(3,ti.getArity());
  Assert.assertTrue(ti instanceof TupleTypeInfo);
  TupleTypeInfo<?> tti=(TupleTypeInfo<?>)ti;
  Assert.assertEquals(Tuple3.class,tti.getTypeClass());
  Assert.assertTrue(tti.getTypeAt(0).isTupleType());
  Assert.assertTrue(tti.getTypeAt(1).isTupleType());
  Assert.assertTrue(tti.getTypeAt(2).isTupleType());
  Assert.assertEquals(Tuple1.class,tti.getTypeAt(0).getTypeClass());
  Assert.assertEquals(Tuple1.class,tti.getTypeAt(1).getTypeClass());
  Assert.assertEquals(Tuple2.class,tti.getTypeAt(2).getTypeClass());
  Assert.assertEquals(1,tti.getTypeAt(0).getArity());
  Assert.assertEquals(1,tti.getTypeAt(1).getArity());
  Assert.assertEquals(2,tti.getTypeAt(2).getArity());
  Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO,((TupleTypeInfo<?>)tti.getTypeAt(0)).getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO,((TupleTypeInfo<?>)tti.getTypeAt(1)).getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO,((TupleTypeInfo<?>)tti.getTypeAt(2)).getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO,((TupleTypeInfo<?>)tti.getTypeAt(2)).getTypeAt(1));
  Tuple3<Tuple1<String>,Tuple1<Integer>,Tuple2<Long,Long>> t=new Tuple3<Tuple1<String>,Tuple1<Integer>,Tuple2<Long,Long>>(new Tuple1<String>("hello"),new Tuple1<Integer>(1),new Tuple2<Long,Long>(2L,3L));
  Assert.assertTrue(TypeExtractor.getForObject(t) instanceof TupleTypeInfo);
  TupleTypeInfo<?> tti2=(TupleTypeInfo<?>)TypeExtractor.getForObject(t);
  Assert.assertEquals(1,tti2.getTypeAt(0).getArity());
  Assert.assertEquals(1,tti2.getTypeAt(1).getArity());
  Assert.assertEquals(2,tti2.getTypeAt(2).getArity());
  Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO,((TupleTypeInfo<?>)tti2.getTypeAt(0)).getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO,((TupleTypeInfo<?>)tti2.getTypeAt(1)).getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO,((TupleTypeInfo<?>)tti2.getTypeAt(2)).getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO,((TupleTypeInfo<?>)tti2.getTypeAt(2)).getTypeAt(1));
}
