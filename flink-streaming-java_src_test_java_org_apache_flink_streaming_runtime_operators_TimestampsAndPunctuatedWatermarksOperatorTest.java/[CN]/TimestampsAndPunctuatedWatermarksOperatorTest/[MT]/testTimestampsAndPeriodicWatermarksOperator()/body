{
  final TimestampsAndPunctuatedWatermarksOperator<Tuple2<Long,Boolean>> operator=new TimestampsAndPunctuatedWatermarksOperator<>(new PunctuatedExtractor());
  OneInputStreamOperatorTestHarness<Tuple2<Long,Boolean>,Tuple2<Long,Boolean>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(3L,true),0L));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(5L,false),0L));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(4L,false),0L));
  testHarness.processWatermark(new Watermark(10));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(4L,false),0L));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(4L,true),0L));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(9L,false),0L));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(5L,false),0L));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(7L,true),0L));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(10L,false),0L));
  testHarness.processWatermark(new Watermark(Long.MAX_VALUE));
  ConcurrentLinkedQueue<Object> output=testHarness.getOutput();
  assertEquals(3L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(3L,((Watermark)output.poll()).getTimestamp());
  assertEquals(5L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(4L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(4L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(4L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(4L,((Watermark)output.poll()).getTimestamp());
  assertEquals(9L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(5L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(7L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(7L,((Watermark)output.poll()).getTimestamp());
  assertEquals(10L,((StreamRecord<Tuple2<Long,Boolean>>)output.poll()).getTimestamp());
  assertEquals(Long.MAX_VALUE,((Watermark)output.poll()).getTimestamp());
}
