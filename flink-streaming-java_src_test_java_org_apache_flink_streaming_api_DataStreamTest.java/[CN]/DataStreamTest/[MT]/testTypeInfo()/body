{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Long> src1=env.generateSequence(0,0);
  assertEquals(TypeExtractor.getForClass(Long.class),src1.getType());
  DataStream<Tuple2<Integer,String>> map=src1.map(new MapFunction<Long,Tuple2<Integer,String>>(){
    @Override public Tuple2<Integer,String> map(    Long value) throws Exception {
      return null;
    }
  }
);
  assertEquals(TypeExtractor.getForObject(new Tuple2<>(0,"")),map.getType());
  DataStream<String> window=map.windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(5))).apply(new AllWindowFunction<Iterable<Tuple2<Integer,String>>,String,GlobalWindow>(){
    @Override public void apply(    GlobalWindow window,    Iterable<Tuple2<Integer,String>> values,    Collector<String> out) throws Exception {
    }
  }
);
  assertEquals(TypeExtractor.getForClass(String.class),window.getType());
  DataStream<CustomPOJO> flatten=window.windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(5))).fold(new CustomPOJO(),new FoldFunction<String,CustomPOJO>(){
    private static final long serialVersionUID=1L;
    @Override public CustomPOJO fold(    CustomPOJO accumulator,    String value) throws Exception {
      return null;
    }
  }
);
  assertEquals(TypeExtractor.getForClass(CustomPOJO.class),flatten.getType());
}
