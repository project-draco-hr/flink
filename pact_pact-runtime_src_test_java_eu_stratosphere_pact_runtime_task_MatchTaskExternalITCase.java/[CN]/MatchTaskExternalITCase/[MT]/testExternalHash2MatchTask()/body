{
  int keyCnt1=32768;
  int valCnt1=8;
  int keyCnt2=65536;
  int valCnt2=8;
  addInput(new UniformPactRecordGenerator(keyCnt1,valCnt1,false));
  addInput(new UniformPactRecordGenerator(keyCnt2,valCnt2,false));
  super.addOutput(outList);
  final MatchDriver<PactRecord,PactRecord,PactRecord> testTask=new MatchDriver<PactRecord,PactRecord,PactRecord>();
  super.getTaskConfig().setMemorySize(4 * 1024 * 1024);
  super.getTaskConfig().setLocalStrategy(LocalStrategy.HYBRIDHASH_SECOND);
  final int[] keyPos1=new int[]{0};
  final int[] keyPos2=new int[]{0};
  @SuppressWarnings("unchecked") final Class<? extends Key>[] keyClasses=(Class<? extends Key>[])new Class[]{PactInteger.class};
  addInputComparator(new PactRecordComparator(keyPos1,keyClasses));
  addInputComparator(new PactRecordComparator(keyPos2,keyClasses));
  try {
    testDriver(testTask,MockMatchStub.class);
  }
 catch (  Exception e) {
    LOG.debug(e);
  }
  int expCnt=valCnt1 * valCnt2 * Math.min(keyCnt1,keyCnt2);
  Assert.assertTrue("Resultset size was " + outList.size() + ". Expected was "+ expCnt,outList.size() == expCnt);
  outList.clear();
}
