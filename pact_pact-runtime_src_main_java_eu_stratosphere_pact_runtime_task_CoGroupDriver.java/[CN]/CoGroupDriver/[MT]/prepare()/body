{
  final TaskConfig config=this.taskContext.getTaskConfig();
  final long availableMemory=config.getMemorySize();
  final int maxFileHandles=config.getNumFilehandles();
  final float spillThreshold=config.getSortSpillingTreshold();
  final LocalStrategy ls=config.getLocalStrategy();
  long strategyMinMem=0;
switch (ls) {
case SORT_BOTH_MERGE:
    strategyMinMem=MIN_REQUIRED_MEMORY * 2;
  break;
case SORT_FIRST_MERGE:
case SORT_SECOND_MERGE:
strategyMinMem=MIN_REQUIRED_MEMORY;
break;
case MERGE:
strategyMinMem=0;
break;
}
if (availableMemory < strategyMinMem) {
throw new RuntimeException("The CoGroup task was initialized with too little memory for local strategy " + config.getLocalStrategy() + " : "+ availableMemory+ " bytes."+ "Required is at least "+ strategyMinMem+ " bytes.");
}
final MutableObjectIterator<IT1> in1=this.taskContext.getInput(0);
final MutableObjectIterator<IT2> in2=this.taskContext.getInput(1);
final TypeSerializer<IT1> serializer1=this.taskContext.getInputSerializer(0);
final TypeSerializer<IT2> serializer2=this.taskContext.getInputSerializer(1);
final TypeComparator<IT1> comparator1=this.taskContext.getInputComparator(0);
final TypeComparator<IT2> comparator2=this.taskContext.getInputComparator(1);
final TypePairComparatorFactory<IT1,IT2> pairComparatorFactory;
try {
final Class<? extends TypePairComparatorFactory<IT1,IT2>> factoryClass=config.getPairComparatorFactory(this.taskContext.getUserCodeClassLoader());
if (factoryClass == null) {
@SuppressWarnings("unchecked") TypePairComparatorFactory<IT1,IT2> pactRecordFactory=(TypePairComparatorFactory<IT1,IT2>)PactRecordPairComparatorFactory.get();
pairComparatorFactory=pactRecordFactory;
}
 else {
@SuppressWarnings("unchecked") final Class<TypePairComparatorFactory<IT1,IT2>> clazz=(Class<TypePairComparatorFactory<IT1,IT2>>)(Class<?>)TypePairComparatorFactory.class;
pairComparatorFactory=InstantiationUtil.instantiate(factoryClass,clazz);
}
}
 catch (ClassNotFoundException cnfex) {
throw new Exception("The class registered as TypePairComparatorFactory cloud not be loaded.",cnfex);
}
final MemoryManager memoryManager=this.taskContext.getMemoryManager();
final IOManager ioManager=this.taskContext.getIOManager();
switch (ls) {
case SORT_BOTH_MERGE:
case SORT_FIRST_MERGE:
case SORT_SECOND_MERGE:
case MERGE:
this.coGroupIterator=new SortMergeCoGroupIterator<IT1,IT2>(memoryManager,ioManager,in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),availableMemory,maxFileHandles,spillThreshold,ls,this.taskContext.getOwningNepheleTask());
break;
default :
throw new Exception("Unsupported local strategy for CoGropuTask: " + ls.name());
}
this.coGroupIterator.open();
if (LOG.isDebugEnabled()) LOG.debug(this.taskContext.formatLogString("CoGroup task iterator ready."));
}
