{
  Class<RecordWriter<KeyValuePair<PactInteger,PactInteger>>> rwC=(Class<RecordWriter<KeyValuePair<PactInteger,PactInteger>>>)((Class<?>)RecordWriter.class);
  Class<KeyValuePair<PactInteger,PactInteger>> kvpC=(Class<KeyValuePair<PactInteger,PactInteger>>)((Class<?>)KeyValuePair.class);
  RecordWriter<KeyValuePair<PactInteger,PactInteger>> rwMock1=new RecordWriter<KeyValuePair<PactInteger,PactInteger>>(new MockTask(),kvpC);
  RecordWriter<KeyValuePair<PactInteger,PactInteger>> rwMock2=new RecordWriter<KeyValuePair<PactInteger,PactInteger>>(new MockTask(),kvpC);
  RecordWriter<KeyValuePair<PactInteger,PactInteger>> rwMock3=new RecordWriter<KeyValuePair<PactInteger,PactInteger>>(new MockTask(),kvpC);
  RecordWriter<KeyValuePair<PactInteger,PactInteger>> rwMock4=new RecordWriter<KeyValuePair<PactInteger,PactInteger>>(new MockTask(),kvpC);
  RecordWriter<KeyValuePair<PactInteger,PactInteger>> rwMock5=new RecordWriter<KeyValuePair<PactInteger,PactInteger>>(new MockTask(),kvpC);
  RecordWriter<KeyValuePair<PactInteger,PactInteger>> rwMock6=new RecordWriter<KeyValuePair<PactInteger,PactInteger>>(new MockTask(),kvpC);
  rwMock1=Mockito.mock(rwC);
  rwMock2=Mockito.mock(rwC);
  rwMock3=Mockito.mock(rwC);
  rwMock4=Mockito.mock(rwC);
  rwMock5=Mockito.mock(rwC);
  rwMock6=Mockito.mock(rwC);
  ArgumentCaptor<KeyValuePair<PactInteger,PactInteger>> captor1=ArgumentCaptor.forClass(kvpC);
  ArgumentCaptor<KeyValuePair<PactInteger,PactInteger>> captor2=ArgumentCaptor.forClass(kvpC);
  ArgumentCaptor<KeyValuePair<PactInteger,PactInteger>> captor3=ArgumentCaptor.forClass(kvpC);
  ArgumentCaptor<KeyValuePair<PactInteger,PactInteger>> captor4=ArgumentCaptor.forClass(kvpC);
  ArgumentCaptor<KeyValuePair<PactInteger,PactInteger>> captor5=ArgumentCaptor.forClass(kvpC);
  ArgumentCaptor<KeyValuePair<PactInteger,PactInteger>> captor6=ArgumentCaptor.forClass(kvpC);
  OutputCollector<PactInteger,PactInteger> oc=new OutputCollector<PactInteger,PactInteger>();
  oc.addWriter(rwMock1,false);
  oc.addWriter(rwMock2,true);
  oc.addWriter(rwMock3,true);
  oc.addWriter(rwMock4,true);
  oc.addWriter(rwMock5,false);
  oc.addWriter(rwMock6,true);
  oc.collect(new PactInteger(1),new PactInteger(123));
  oc.collect(new PactInteger(23),new PactInteger(672));
  oc.collect(new PactInteger(1673),new PactInteger(-12));
  try {
    Mockito.verify(rwMock1,Mockito.times(3)).emit(captor1.capture());
    Mockito.verify(rwMock2,Mockito.times(3)).emit(captor2.capture());
    Mockito.verify(rwMock3,Mockito.times(3)).emit(captor3.capture());
    Mockito.verify(rwMock4,Mockito.times(3)).emit(captor4.capture());
    Mockito.verify(rwMock5,Mockito.times(3)).emit(captor5.capture());
    Mockito.verify(rwMock6,Mockito.times(3)).emit(captor6.capture());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  HashSet<Integer> refs=new HashSet<Integer>();
  refs.add(System.identityHashCode(captor2.getAllValues().get(0)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor3.getAllValues().get(0))));
  refs.add(System.identityHashCode(captor3.getAllValues().get(0)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor4.getAllValues().get(0))));
  refs.add(System.identityHashCode(captor4.getAllValues().get(0)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor6.getAllValues().get(0))));
  refs.add(System.identityHashCode(captor6.getAllValues().get(0)));
  Assert.assertTrue(refs.contains(System.identityHashCode(captor5.getAllValues().get(0))));
  refs.clear();
  refs.add(System.identityHashCode(captor2.getAllValues().get(1)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor3.getAllValues().get(1))));
  refs.add(System.identityHashCode(captor3.getAllValues().get(1)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor4.getAllValues().get(1))));
  refs.add(System.identityHashCode(captor4.getAllValues().get(1)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor6.getAllValues().get(1))));
  refs.add(System.identityHashCode(captor6.getAllValues().get(1)));
  Assert.assertTrue(refs.contains(System.identityHashCode(captor5.getAllValues().get(1))));
  refs.clear();
  refs.add(System.identityHashCode(captor2.getAllValues().get(2)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor3.getAllValues().get(2))));
  refs.add(System.identityHashCode(captor3.getAllValues().get(2)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor4.getAllValues().get(2))));
  refs.add(System.identityHashCode(captor4.getAllValues().get(2)));
  Assert.assertFalse(refs.contains(System.identityHashCode(captor6.getAllValues().get(2))));
  refs.add(System.identityHashCode(captor6.getAllValues().get(2)));
  Assert.assertTrue(refs.contains(System.identityHashCode(captor5.getAllValues().get(2))));
  refs.clear();
}
