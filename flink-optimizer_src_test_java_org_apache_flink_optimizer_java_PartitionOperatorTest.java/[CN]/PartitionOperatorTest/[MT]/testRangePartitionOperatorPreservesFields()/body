{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple2<Long,Long>> data=env.fromCollection(Collections.singleton(new Tuple2<>(0L,0L)));
    data.partitionByRange(1).groupBy(1).reduceGroup(new IdentityGroupReducerCombinable<Tuple2<Long,Long>>()).output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    SingleInputPlanNode reducer=(SingleInputPlanNode)sink.getInput().getSource();
    SingleInputPlanNode partitionNode=(SingleInputPlanNode)reducer.getInput().getSource();
    SingleInputPlanNode partitionIDRemover=(SingleInputPlanNode)partitionNode.getInput().getSource();
    assertEquals(ShipStrategyType.FORWARD,reducer.getInput().getShipStrategy());
    assertEquals(ShipStrategyType.FORWARD,partitionNode.getInput().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_CUSTOM,partitionIDRemover.getInput().getShipStrategy());
    SourcePlanNode sourcePlanNode=op.getDataSources().iterator().next();
    List<Channel> sourceOutgoingChannels=sourcePlanNode.getOutgoingChannels();
    assertEquals(2,sourceOutgoingChannels.size());
    assertEquals(ShipStrategyType.FORWARD,sourceOutgoingChannels.get(0).getShipStrategy());
    assertEquals(ShipStrategyType.FORWARD,sourceOutgoingChannels.get(1).getShipStrategy());
    assertEquals(DataExchangeMode.PIPELINED,sourceOutgoingChannels.get(0).getDataExchangeMode());
    assertEquals(DataExchangeMode.BATCH,sourceOutgoingChannels.get(1).getDataExchangeMode());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
