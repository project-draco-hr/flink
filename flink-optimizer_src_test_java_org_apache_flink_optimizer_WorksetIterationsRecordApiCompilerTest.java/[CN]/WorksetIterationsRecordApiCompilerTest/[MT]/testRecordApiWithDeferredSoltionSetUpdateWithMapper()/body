{
  Plan plan=getRecordTestPlan(false,true);
  OptimizedPlan oPlan;
  try {
    oPlan=compileNoStats(plan);
  }
 catch (  CompilerException ce) {
    ce.printStackTrace();
    fail("The pact compiler is unable to compile this plan correctly.");
    return;
  }
  OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(oPlan);
  DualInputPlanNode joinWithInvariantNode=resolver.getNode(JOIN_WITH_INVARIANT_NAME);
  DualInputPlanNode joinWithSolutionSetNode=resolver.getNode(JOIN_WITH_SOLUTION_SET);
  SingleInputPlanNode worksetReducer=resolver.getNode(NEXT_WORKSET_REDUCER_NAME);
  SingleInputPlanNode deltaMapper=resolver.getNode(SOLUTION_DELTA_MAPPER_NAME);
  assertEquals(ShipStrategyType.FORWARD,joinWithInvariantNode.getInput1().getShipStrategy());
  assertEquals(ShipStrategyType.PARTITION_HASH,joinWithInvariantNode.getInput2().getShipStrategy());
  assertEquals(list0,joinWithInvariantNode.getKeysForInput1());
  assertEquals(list0,joinWithInvariantNode.getKeysForInput2());
  assertEquals(ShipStrategyType.FORWARD,joinWithSolutionSetNode.getInput1().getShipStrategy());
  assertEquals(ShipStrategyType.FORWARD,joinWithSolutionSetNode.getInput2().getShipStrategy());
  assertEquals(ShipStrategyType.PARTITION_HASH,worksetReducer.getInput().getShipStrategy());
  assertEquals(list0,worksetReducer.getKeys(0));
  ShipStrategyType ss1=deltaMapper.getInput().getShipStrategy();
  ShipStrategyType ss2=deltaMapper.getOutgoingChannels().get(0).getShipStrategy();
  assertTrue((ss1 == ShipStrategyType.FORWARD && ss2 == ShipStrategyType.PARTITION_HASH) || (ss2 == ShipStrategyType.FORWARD && ss1 == ShipStrategyType.PARTITION_HASH));
  new JobGraphGenerator().compileJobGraph(oPlan);
}
