{
  KvStateRegistry registry=new KvStateRegistry();
  KvStateRequestStats stats=new AtomicKvStateRequestStats();
  KvStateServerHandler handler=new KvStateServerHandler(registry,TEST_THREAD_POOL,stats);
  EmbeddedChannel channel=new EmbeddedChannel(getFrameDecoder(),handler);
  int numKeyGroups=1;
  AbstractStateBackend abstractBackend=new MemoryStateBackend();
  DummyEnvironment dummyEnv=new DummyEnvironment("test",1,0);
  dummyEnv.setKvStateRegistry(registry);
  AbstractKeyedStateBackend<Integer> backend=abstractBackend.createKeyedStateBackend(dummyEnv,new JobID(),"test_op",IntSerializer.INSTANCE,numKeyGroups,new KeyGroupRange(0,0),registry.createTaskRegistry(dummyEnv.getJobID(),dummyEnv.getJobVertexId()));
  final TestRegistryListener registryListener=new TestRegistryListener();
  registry.registerListener(registryListener);
  ValueStateDescriptor<byte[]> desc=new ValueStateDescriptor<>("any",BytePrimitiveArraySerializer.INSTANCE,null);
  desc.setQueryable("vanilla");
  ValueState<byte[]> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
  byte[] bytes=new byte[2 * channel.config().getWriteBufferHighWaterMark()];
  byte current=0;
  for (int i=0; i < bytes.length; i++) {
    bytes[i]=current++;
  }
  int key=99812822;
  backend.setCurrentKey(key);
  state.update(bytes);
  byte[] serializedKeyAndNamespace=KvStateRequestSerializer.serializeKeyAndNamespace(key,IntSerializer.INSTANCE,VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE);
  long requestId=Integer.MAX_VALUE + 182828L;
  assertTrue(registryListener.registrationName.equals("vanilla"));
  ByteBuf request=KvStateRequestSerializer.serializeKvStateRequest(channel.alloc(),requestId,registryListener.kvStateId,serializedKeyAndNamespace);
  channel.writeInbound(request);
  Object msg=readInboundBlocking(channel);
  assertTrue("Not ChunkedByteBuf",msg instanceof ChunkedByteBuf);
}
