{
  KvStateRegistry registry=new KvStateRegistry();
  AtomicKvStateRequestStats stats=new AtomicKvStateRequestStats();
  ExecutorService closedExecutor=Executors.newSingleThreadExecutor();
  closedExecutor.shutdown();
  assertTrue(closedExecutor.isShutdown());
  KvStateServerHandler handler=new KvStateServerHandler(registry,closedExecutor,stats);
  EmbeddedChannel channel=new EmbeddedChannel(getFrameDecoder(),handler);
  AbstractStateBackend abstractBackend=new MemoryStateBackend();
  DummyEnvironment dummyEnv=new DummyEnvironment("test",1,0);
  dummyEnv.setKvStateRegistry(registry);
  KeyedStateBackend<Integer> backend=abstractBackend.createKeyedStateBackend(dummyEnv,new JobID(),"test_op",IntSerializer.INSTANCE,new HashKeyGroupAssigner<Integer>(1),new KeyGroupRange(0,0),registry.createTaskRegistry(dummyEnv.getJobID(),dummyEnv.getJobVertexId()));
  final TestRegistryListener registryListener=new TestRegistryListener();
  registry.registerListener(registryListener);
  ValueStateDescriptor<Integer> desc=new ValueStateDescriptor<>("any",IntSerializer.INSTANCE,null);
  desc.setQueryable("vanilla");
  backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
  assertTrue(registryListener.registrationName.equals("vanilla"));
  ByteBuf request=KvStateRequestSerializer.serializeKvStateRequest(channel.alloc(),282872,registryListener.kvStateId,new byte[0]);
  channel.writeInbound(request);
  ByteBuf buf=(ByteBuf)readInboundBlocking(channel);
  buf.skipBytes(4);
  assertEquals(KvStateRequestType.REQUEST_FAILURE,KvStateRequestSerializer.deserializeHeader(buf));
  KvStateRequestFailure response=KvStateRequestSerializer.deserializeKvStateRequestFailure(buf);
  assertTrue(response.getCause().getMessage().contains("RejectedExecutionException"));
  assertEquals(1,stats.getNumRequests());
  assertEquals(1,stats.getNumFailed());
}
