{
  final GenericMatcher<IT1,IT2,OT> matchStub=this.taskContext.getStub();
  final Collector<OT> collector=this.taskContext.getOutputCollector();
  if (getBuildSideIndex() == 0) {
    final TypeSerializer<IT1> buildSideSerializer=taskContext.<IT1>getInputSerializer(0);
    final TypeSerializer<IT2> probeSideSerializer=taskContext.<IT2>getInputSerializer(1);
    final IT1 buildSideRecordFirst=buildSideSerializer.createInstance();
    final IT1 buildSideRecordOther=buildSideSerializer.createInstance();
    final IT2 probeSideRecord=probeSideSerializer.createInstance();
    final IT2 probeSideRecordCopy=probeSideSerializer.createInstance();
    @SuppressWarnings("unchecked") final MutableHashTable<IT1,IT2> join=(MutableHashTable<IT1,IT2>)this.hashJoin;
    final MutableObjectIterator<IT2> probeSideInput=taskContext.<IT2>getInput(1);
    while (this.running && probeSideInput.next(probeSideRecord)) {
      final MutableHashTable.HashBucketIterator<IT1,IT2> bucket=join.getMatchesFor(probeSideRecord);
      if (bucket.next(buildSideRecordFirst)) {
        while (bucket.next(buildSideRecordOther)) {
          probeSideSerializer.copyTo(probeSideRecord,probeSideRecordCopy);
          matchStub.match(buildSideRecordOther,probeSideRecordCopy,collector);
        }
        matchStub.match(buildSideRecordFirst,probeSideRecord,collector);
      }
    }
  }
 else   if (getBuildSideIndex() == 1) {
    final TypeSerializer<IT2> buildSideSerializer=taskContext.<IT2>getInputSerializer(1);
    final TypeSerializer<IT1> probeSideSerializer=taskContext.<IT1>getInputSerializer(0);
    final IT2 buildSideRecordFirst=buildSideSerializer.createInstance();
    final IT2 buildSideRecordOther=buildSideSerializer.createInstance();
    final IT1 probeSideRecord=probeSideSerializer.createInstance();
    final IT1 probeSideRecordCopy=probeSideSerializer.createInstance();
    @SuppressWarnings("unchecked") final MutableHashTable<IT2,IT1> join=(MutableHashTable<IT2,IT1>)this.hashJoin;
    final MutableObjectIterator<IT1> probeSideInput=taskContext.<IT1>getInput(0);
    while (this.running && probeSideInput.next(probeSideRecord)) {
      final MutableHashTable.HashBucketIterator<IT2,IT1> bucket=join.getMatchesFor(probeSideRecord);
      if (bucket.next(buildSideRecordFirst)) {
        while (bucket.next(buildSideRecordOther)) {
          probeSideSerializer.copyTo(probeSideRecord,probeSideRecordCopy);
          matchStub.match(probeSideRecordCopy,buildSideRecordOther,collector);
        }
        matchStub.match(probeSideRecord,buildSideRecordFirst,collector);
      }
    }
  }
 else {
    throw new Exception();
  }
}
