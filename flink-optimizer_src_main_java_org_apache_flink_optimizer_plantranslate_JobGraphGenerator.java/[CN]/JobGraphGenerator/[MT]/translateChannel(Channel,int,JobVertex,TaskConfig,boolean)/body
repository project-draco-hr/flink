{
  final PlanNode inputPlanNode=input.getSource();
  final Iterator<Channel> allInChannels;
  if (inputPlanNode instanceof NAryUnionPlanNode) {
    allInChannels=((NAryUnionPlanNode)inputPlanNode).getListOfInputs().iterator();
  }
 else   if (inputPlanNode instanceof BulkPartialSolutionPlanNode) {
    if (this.vertices.get(inputPlanNode) == null) {
      final BulkPartialSolutionPlanNode pspn=(BulkPartialSolutionPlanNode)inputPlanNode;
      final BulkIterationPlanNode iterationNode=pspn.getContainingIterationNode();
      if (iterationNode.getInput().getSource() instanceof NAryUnionPlanNode) {
        allInChannels=((NAryUnionPlanNode)iterationNode.getInput().getSource()).getInputs().iterator();
      }
 else {
        allInChannels=Collections.singletonList(iterationNode.getInput()).iterator();
      }
      targetVertexConfig.setIterationHeadPartialSolutionOrWorksetInputIndex(inputIndex);
    }
 else {
      allInChannels=Collections.singletonList(input).iterator();
    }
  }
 else   if (inputPlanNode instanceof WorksetPlanNode) {
    if (this.vertices.get(inputPlanNode) == null) {
      final WorksetPlanNode wspn=(WorksetPlanNode)inputPlanNode;
      final WorksetIterationPlanNode iterationNode=wspn.getContainingIterationNode();
      if (iterationNode.getInput2().getSource() instanceof NAryUnionPlanNode) {
        allInChannels=((NAryUnionPlanNode)iterationNode.getInput2().getSource()).getInputs().iterator();
      }
 else {
        allInChannels=Collections.singletonList(iterationNode.getInput2()).iterator();
      }
      targetVertexConfig.setIterationHeadPartialSolutionOrWorksetInputIndex(inputIndex);
    }
 else {
      allInChannels=Collections.singletonList(input).iterator();
    }
  }
 else   if (inputPlanNode instanceof SolutionSetPlanNode) {
    return 0;
  }
 else {
    allInChannels=Collections.singletonList(input).iterator();
  }
  TypeSerializerFactory<?> typeSerFact=null;
  int numChannelsTotal=0;
  int numChannelsDynamicPath=0;
  int numDynamicSenderTasksTotal=0;
  while (allInChannels.hasNext()) {
    final Channel inConn=allInChannels.next();
    if (typeSerFact == null) {
      typeSerFact=inConn.getSerializer();
    }
 else     if (!typeSerFact.equals(inConn.getSerializer())) {
      throw new CompilerException("Conflicting types in union operator.");
    }
    final PlanNode sourceNode=inConn.getSource();
    JobVertex sourceVertex=this.vertices.get(sourceNode);
    TaskConfig sourceVertexConfig;
    if (sourceVertex == null) {
      final TaskInChain chainedTask;
      final IterationDescriptor iteration;
      if ((chainedTask=this.chainedTasks.get(sourceNode)) != null) {
        if (chainedTask.getContainingVertex() == null) {
          throw new IllegalStateException("Bug: Chained task has not been assigned its containing vertex when connecting.");
        }
        sourceVertex=chainedTask.getContainingVertex();
        sourceVertexConfig=chainedTask.getTaskConfig();
      }
 else       if ((iteration=this.iterations.get(sourceNode)) != null) {
        sourceVertex=iteration.getHeadTask();
        sourceVertexConfig=iteration.getHeadFinalResultConfig();
      }
 else {
        throw new CompilerException("Bug: Could not resolve source node for a channel.");
      }
    }
 else {
      sourceVertexConfig=new TaskConfig(sourceVertex.getConfiguration());
    }
    DistributionPattern pattern=connectJobVertices(inConn,inputIndex,sourceVertex,sourceVertexConfig,targetVertex,targetVertexConfig,isBroadcast);
    numChannelsTotal++;
    if (inConn.isOnDynamicPath()) {
      numChannelsDynamicPath++;
      numDynamicSenderTasksTotal+=getNumberOfSendersPerReceiver(pattern,sourceVertex.getParallelism(),targetVertex.getParallelism());
    }
  }
  if (numChannelsDynamicPath > 0 && numChannelsTotal != numChannelsDynamicPath) {
    throw new CompilerException("Error: It is currently not supported to union between dynamic and static path in an iteration.");
  }
  if (numDynamicSenderTasksTotal > 0) {
    if (isBroadcast) {
      targetVertexConfig.setBroadcastGateIterativeWithNumberOfEventsUntilInterrupt(inputIndex,numDynamicSenderTasksTotal);
    }
 else {
      targetVertexConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(inputIndex,numDynamicSenderTasksTotal);
    }
  }
  addLocalInfoFromChannelToConfig(input,targetVertexConfig,inputIndex,isBroadcast);
  return 1;
}
