{
  try {
    if (node instanceof SourcePlanNode || node instanceof NAryUnionPlanNode || node instanceof SolutionSetPlanNode) {
      return;
    }
    if (node instanceof IterationPlanNode) {
      if (node.isOnDynamicPath()) {
        throw new CompilerException("Nested Iterations are not possible at the moment!");
      }
      if (this.currentIteration != null) {
        this.iterationStack.add(this.currentIteration);
      }
      this.currentIteration=(IterationPlanNode)node;
      this.currentIteration.acceptForStepFunction(this);
      if (this.iterationStack.isEmpty()) {
        this.currentIteration=null;
      }
 else {
        this.currentIteration=this.iterationStack.remove(this.iterationStack.size() - 1);
      }
      if (node instanceof WorksetIterationPlanNode) {
        WorksetIterationPlanNode wsNode=(WorksetIterationPlanNode)node;
        JobVertex headVertex=this.iterations.get(wsNode).getHeadTask();
        TaskConfig headConfig=new TaskConfig(headVertex.getConfiguration());
        int inputIndex=headConfig.getDriverStrategy().getNumInputs();
        headConfig.setIterationHeadSolutionSetInputIndex(inputIndex);
        translateChannel(wsNode.getInitialSolutionSetInput(),inputIndex,headVertex,headConfig,false);
      }
      return;
    }
    final JobVertex targetVertex=this.vertices.get(node);
    if (targetVertex == null) {
      final TaskInChain chainedTask;
      if ((chainedTask=this.chainedTasks.get(node)) != null) {
        final Iterator<Channel> inConns=node.getInputs().iterator();
        if (!inConns.hasNext()) {
          throw new CompilerException("Bug: Found chained task with no input.");
        }
        final Channel inConn=inConns.next();
        if (inConns.hasNext()) {
          throw new CompilerException("Bug: Found a chained task with more than one input!");
        }
        if (inConn.getLocalStrategy() != null && inConn.getLocalStrategy() != LocalStrategy.NONE) {
          throw new CompilerException("Bug: Found a chained task with an input local strategy.");
        }
        if (inConn.getShipStrategy() != null && inConn.getShipStrategy() != ShipStrategyType.FORWARD) {
          throw new CompilerException("Bug: Found a chained task with an input ship strategy other than FORWARD.");
        }
        JobVertex container=chainedTask.getContainingVertex();
        if (container == null) {
          final PlanNode sourceNode=inConn.getSource();
          container=this.vertices.get(sourceNode);
          if (container == null) {
            container=this.chainedTasks.get(sourceNode).getContainingVertex();
            if (container == null) {
              throw new IllegalStateException("Bug: Chained task predecessor has not been assigned its containing vertex.");
            }
          }
 else {
            new TaskConfig(container.getConfiguration()).addOutputShipStrategy(ShipStrategyType.FORWARD);
          }
          chainedTask.setContainingVertex(container);
        }
        chainedTask.getTaskConfig().setInputSerializer(inConn.getSerializer(),0);
        String containerTaskName=container.getName();
        if (containerTaskName.startsWith("CHAIN ")) {
          container.setName(containerTaskName + " -> " + chainedTask.getTaskName());
        }
 else {
          container.setName("CHAIN " + containerTaskName + " -> "+ chainedTask.getTaskName());
        }
        this.chainedTasksInSequence.add(chainedTask);
        return;
      }
 else       if (node instanceof BulkPartialSolutionPlanNode || node instanceof WorksetPlanNode) {
        return;
      }
 else {
        throw new CompilerException("Bug: Unrecognized merged task vertex.");
      }
    }
    if (this.currentIteration != null) {
      JobVertex head=this.iterations.get(this.currentIteration).getHeadTask();
      if (node.isOnDynamicPath()) {
        targetVertex.setStrictlyCoLocatedWith(head);
      }
    }
    final TaskConfig targetVertexConfig=new TaskConfig(targetVertex.getConfiguration());
    final Iterator<Channel> inConns;
    if (node instanceof BulkPartialSolutionPlanNode) {
      inConns=((BulkPartialSolutionPlanNode)node).getContainingIterationNode().getInputs().iterator();
      targetVertexConfig.setIterationHeadPartialSolutionOrWorksetInputIndex(0);
    }
 else     if (node instanceof WorksetPlanNode) {
      WorksetPlanNode wspn=(WorksetPlanNode)node;
      inConns=Collections.singleton(wspn.getContainingIterationNode().getInput2()).iterator();
      targetVertexConfig.setIterationHeadPartialSolutionOrWorksetInputIndex(0);
      targetVertexConfig.setIterationHeadSolutionSetInputIndex(1);
    }
 else {
      inConns=node.getInputs().iterator();
    }
    if (!inConns.hasNext()) {
      throw new CompilerException("Bug: Found a non-source task with no input.");
    }
    int inputIndex=0;
    while (inConns.hasNext()) {
      Channel input=inConns.next();
      inputIndex+=translateChannel(input,inputIndex,targetVertex,targetVertexConfig,false);
    }
    int broadcastInputIndex=0;
    for (    NamedChannel broadcastInput : node.getBroadcastInputs()) {
      int broadcastInputIndexDelta=translateChannel(broadcastInput,broadcastInputIndex,targetVertex,targetVertexConfig,true);
      targetVertexConfig.setBroadcastInputName(broadcastInput.getName(),broadcastInputIndex);
      targetVertexConfig.setBroadcastInputSerializer(broadcastInput.getSerializer(),broadcastInputIndex);
      broadcastInputIndex+=broadcastInputIndexDelta;
    }
  }
 catch (  Exception e) {
    throw new CompilerException("An error occurred while translating the optimized plan to a nephele JobGraph: " + e.getMessage(),e);
  }
}
