{
  if (LOG.isInfoEnabled()) {
    LOG.info("Running remotely at {}:{}",host,port);
  }
  for (  File file : jarFiles) {
    jobGraph.addJar(new Path(file.getAbsolutePath()));
  }
  Configuration configuration=jobGraph.getJobConfiguration();
  Client client=new Client(new InetSocketAddress(host,port),configuration,JobWithJars.buildUserCodeClassLoader(jarFiles,JobWithJars.class.getClassLoader()),-1);
  client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());
  try {
    JobSubmissionResult result=client.run(jobGraph,true);
    if (result instanceof JobExecutionResult) {
      return (JobExecutionResult)result;
    }
 else {
      LOG.warn("The Client didn't return a JobExecutionResult");
      return new JobExecutionResult(result.getJobID(),-1,null);
    }
  }
 catch (  ProgramInvocationException e) {
    throw new RuntimeException("Cannot execute job due to ProgramInvocationException",e);
  }
}
