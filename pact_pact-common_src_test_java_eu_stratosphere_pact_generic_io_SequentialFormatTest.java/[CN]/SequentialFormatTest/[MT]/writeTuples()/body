{
  this.tempFile=File.createTempFile("SequentialInputFormat",null);
  this.tempFile.deleteOnExit();
  Configuration configuration=new Configuration();
  configuration.setLong(BinaryOutputFormat.BLOCK_SIZE_PARAMETER_KEY,this.blockSize);
  if (this.degreeOfParallelism == 1) {
    SequentialOutputFormat output=FormatUtil.openOutput(SequentialOutputFormat.class,"file://" + this.tempFile.getAbsolutePath(),configuration);
    for (int index=0; index < this.numberOfTuples; index++)     output.writeRecord(this.getRecord(index));
    output.close();
  }
 else {
    this.tempFile.delete();
    this.tempFile.mkdir();
    int recordIndex=0;
    for (int fileIndex=0; fileIndex < this.degreeOfParallelism; fileIndex++) {
      SequentialOutputFormat output=FormatUtil.openOutput(SequentialOutputFormat.class,"file://" + this.tempFile.getAbsolutePath() + "/"+ (fileIndex + 1),configuration);
      for (int fileCount=0; fileCount < this.getNumberOfTuplesPerFile(fileIndex); fileCount++, recordIndex++)       output.writeRecord(this.getRecord(recordIndex));
      output.close();
    }
  }
}
