{
  checkState(bootstrap == null,"Netty server has already been initialized.");
  long start=System.currentTimeMillis();
  bootstrap=new ServerBootstrap();
switch (config.getTransportType()) {
case NIO:
    initNioBootstrap();
  break;
case EPOLL:
initEpollBootstrap();
break;
case AUTO:
if (Epoll.isAvailable()) {
initEpollBootstrap();
LOG.info("Transport type 'auto': using EPOLL.");
}
 else {
initNioBootstrap();
LOG.info("Transport type 'auto': using NIO.");
}
}
bootstrap.localAddress(config.getServerAddress(),config.getServerPort());
bootstrap.option(ChannelOption.ALLOCATOR,nettyBufferPool);
bootstrap.childOption(ChannelOption.ALLOCATOR,nettyBufferPool);
if (config.getServerConnectBacklog() > 0) {
bootstrap.option(ChannelOption.SO_BACKLOG,config.getServerConnectBacklog());
}
int receiveAndSendBufferSize=config.getSendAndReceiveBufferSize();
if (receiveAndSendBufferSize > 0) {
bootstrap.childOption(ChannelOption.SO_SNDBUF,receiveAndSendBufferSize);
bootstrap.childOption(ChannelOption.SO_RCVBUF,receiveAndSendBufferSize);
}
bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK,config.getMemorySegmentSize() + 1);
bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK,2 * config.getMemorySegmentSize());
bootstrap.childHandler(new ChannelInitializer<SocketChannel>(){
@Override public void initChannel(SocketChannel channel) throws Exception {
channel.pipeline().addLast(protocol.getServerChannelHandlers());
}
}
);
bindFuture=bootstrap.bind().syncUninterruptibly();
localAddress=(InetSocketAddress)bindFuture.channel().localAddress();
long end=System.currentTimeMillis();
LOG.info("Successful initialization (took {} ms). Listening on SocketAddress {}.",(end - start),bindFuture.channel().localAddress().toString());
}
