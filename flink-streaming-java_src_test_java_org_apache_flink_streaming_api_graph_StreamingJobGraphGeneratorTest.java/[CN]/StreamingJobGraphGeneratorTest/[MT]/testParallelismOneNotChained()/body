{
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  DataStream<Tuple2<String,String>> input=env.fromElements("a","b","c","d","e","f").map(new MapFunction<String,Tuple2<String,String>>(){
    private static final long serialVersionUID=471891682418382583L;
    @Override public Tuple2<String,String> map(    String value){
      return new Tuple2<>(value,value);
    }
  }
);
  DataStream<Tuple2<String,String>> result=input.keyBy(0).map(new MapFunction<Tuple2<String,String>,Tuple2<String,String>>(){
    private static final long serialVersionUID=3583760206245136188L;
    @Override public Tuple2<String,String> map(    Tuple2<String,String> value){
      return value;
    }
  }
);
  result.addSink(new SinkFunction<Tuple2<String,String>>(){
    private static final long serialVersionUID=-5614849094269539342L;
    @Override public void invoke(    Tuple2<String,String> value){
    }
  }
);
  StreamGraph streamGraph=env.getStreamGraph();
  streamGraph.setJobName("test job");
  JobGraph jobGraph=streamGraph.getJobGraph();
  assertEquals(2,jobGraph.getNumberOfVertices());
  assertEquals(1,jobGraph.getVerticesAsArray()[0].getParallelism());
  assertEquals(1,jobGraph.getVerticesAsArray()[1].getParallelism());
}
