{
  int maxParallelism=42;
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Integer> input1=env.fromElements(1,2,3,4).setMaxParallelism(128).name("input1");
  DataStream<Integer> input2=env.fromElements(1,2,3,4).setMaxParallelism(129).name("input2");
  env.getConfig().setMaxParallelism(maxParallelism);
  DataStream<Integer> keyedResult=input1.connect(input2).keyBy(new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=-6908614081449363419L;
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
,new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=3195683453223164931L;
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
).map(new StreamGraphGeneratorTest.NoOpIntCoMap());
  keyedResult.addSink(new DiscardingSink<Integer>());
  JobGraph jobGraph=env.getStreamGraph().getJobGraph();
  List<JobVertex> jobVertices=jobGraph.getVerticesSortedTopologicallyFromSources();
  JobVertex input1JV=jobVertices.get(0);
  JobVertex input2JV=jobVertices.get(1);
  JobVertex connectedJV=jobVertices.get(2);
  if (input1JV.getName().equals("Source: input1")) {
    assertEquals(128,input1JV.getMaxParallelism());
    assertEquals(129,input2JV.getMaxParallelism());
  }
 else {
    assertEquals(128,input2JV.getMaxParallelism());
    assertEquals(129,input1JV.getMaxParallelism());
  }
  assertEquals(maxParallelism,connectedJV.getMaxParallelism());
  HashKeyGroupAssigner<Integer> hashKeyGroupAssigner=extractHashKeyGroupAssigner(connectedJV);
  assertEquals(maxParallelism,hashKeyGroupAssigner.getNumberKeyGroups());
}
