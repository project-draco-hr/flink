{
  if (numSamples == 0) {
    return EMPTY_ITERABLE;
  }
  PriorityQueue<IntermediateSampleData<T>> reservoir=new PriorityQueue<IntermediateSampleData<T>>(numSamples);
  int index=0;
  IntermediateSampleData<T> smallest=null;
  while (input.hasNext()) {
    IntermediateSampleData<T> element=input.next();
    if (index < numSamples) {
      reservoir.add(element);
      smallest=reservoir.peek();
    }
 else {
      if (element.getWeight() > smallest.getWeight()) {
        reservoir.remove();
        reservoir.add(element);
        smallest=reservoir.peek();
      }
    }
    index++;
  }
  final Iterator<IntermediateSampleData<T>> itr=reservoir.iterator();
  return new Iterator<T>(){
    @Override public boolean hasNext(){
      return itr.hasNext();
    }
    @Override public T next(){
      return itr.next().getElement();
    }
    @Override public void remove(){
      itr.remove();
    }
  }
;
}
