{
  final TestInstanceManager tim=new TestInstanceManager();
  final TestDeploymentManager tdm=new TestDeploymentManager();
  final QueueScheduler scheduler=new QueueScheduler(tdm,tim);
  final ExecutionGraph executionGraph=createExecutionGraph(ChannelType.INMEMORY,tim);
  try {
    try {
      scheduler.schedulJob(executionGraph);
    }
 catch (    SchedulingException e) {
      fail(StringUtils.stringifyException(e));
    }
    tdm.waitForDeployment();
    assertEquals(executionGraph.getJobID(),tdm.getIDOfLastDeployedJob());
    final List<ExecutionVertex> listOfDeployedVertices=tdm.getListOfLastDeployedVertices();
    assertNotNull(listOfDeployedVertices);
    assertEquals(2,listOfDeployedVertices.size());
    assertEquals(0,tim.getNumberOfReleaseMethodCalls());
    for (    final ExecutionVertex vertex : listOfDeployedVertices) {
      vertex.updateExecutionState(ExecutionState.STARTING);
      vertex.updateExecutionState(ExecutionState.RUNNING);
      vertex.updateExecutionState(ExecutionState.FINISHING);
      vertex.updateExecutionState(ExecutionState.FINISHED);
    }
    assertEquals(1,tim.getNumberOfReleaseMethodCalls());
  }
  finally {
    try {
      LibraryCacheManager.unregister(executionGraph.getJobID());
    }
 catch (    IOException ioe) {
    }
  }
}
