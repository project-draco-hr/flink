{
  final JobGraph jobGraph=new JobGraph("Job Graph");
  final JobInputVertex inputVertex=new JobInputVertex("Input 1",jobGraph);
  inputVertex.setInputClass(InputTask.class);
  inputVertex.setNumberOfSubtasks(1);
  final JobOutputVertex outputVertex=new JobOutputVertex("Output 1",jobGraph);
  outputVertex.setOutputClass(OutputTask.class);
  outputVertex.setNumberOfSubtasks(1);
  try {
    inputVertex.connectTo(outputVertex,channelType);
  }
 catch (  JobGraphDefinitionException e) {
    fail(StringUtils.stringifyException(e));
  }
  try {
    LibraryCacheManager.register(jobGraph.getJobID(),new String[0]);
    return new ExecutionGraph(jobGraph,instanceManager);
  }
 catch (  GraphConversionException e) {
    fail(StringUtils.stringifyException(e));
  }
catch (  IOException e) {
    fail(StringUtils.stringifyException(e));
  }
  return null;
}
