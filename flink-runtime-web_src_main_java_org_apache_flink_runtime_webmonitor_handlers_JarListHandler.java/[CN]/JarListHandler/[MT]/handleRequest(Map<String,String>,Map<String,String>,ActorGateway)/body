{
  try {
    StringWriter writer=new StringWriter();
    JsonGenerator gen=JsonFactory.jacksonFactory.createGenerator(writer);
    gen.writeStartObject();
    gen.writeStringField("address",queryParams.get(RuntimeMonitorHandler.WEB_MONITOR_ADDRESS_KEY));
    gen.writeArrayFieldStart("files");
    File[] list=jarDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.endsWith(".jar");
      }
    }
);
    for (    File f : list) {
      String id=f.getName();
      int startIndex=id.indexOf("_");
      if (startIndex < 0) {
        continue;
      }
      String name=id.substring(startIndex + 1);
      if (name.length() < 5 || !name.endsWith(".jar")) {
        continue;
      }
      gen.writeStartObject();
      gen.writeStringField("id",id);
      gen.writeStringField("name",name);
      gen.writeNumberField("uploaded",f.lastModified());
      gen.writeArrayFieldStart("entry");
      String[] classes=new String[0];
      try {
        JarFile jar=new JarFile(f);
        Manifest manifest=jar.getManifest();
        String assemblerClass=null;
        if (manifest != null) {
          assemblerClass=manifest.getMainAttributes().getValue(PackagedProgram.MANIFEST_ATTRIBUTE_ASSEMBLER_CLASS);
          if (assemblerClass == null) {
            assemblerClass=manifest.getMainAttributes().getValue(PackagedProgram.MANIFEST_ATTRIBUTE_MAIN_CLASS);
          }
        }
        if (assemblerClass != null) {
          classes=assemblerClass.split(",");
        }
      }
 catch (      IOException ignored) {
      }
      PackagedProgram program;
      for (      String clazz : classes) {
        clazz=clazz.trim();
        try {
          program=new PackagedProgram(f,clazz,new String[0]);
          gen.writeStartObject();
          gen.writeStringField("name",clazz);
          String desc=program.getDescription();
          gen.writeStringField("description",desc == null ? "No description provided" : desc);
          gen.writeEndObject();
        }
 catch (        ProgramInvocationException e) {
        }
      }
      gen.writeEndArray();
      gen.writeEndObject();
    }
    gen.writeEndArray();
    gen.writeEndObject();
    gen.close();
    return writer.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to fetch jar list: " + e.getMessage(),e);
  }
}
