{
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(baos);
    YarnClient yarnClient=getYarnClient();
    YarnClusterMetrics metrics=yarnClient.getYarnClusterMetrics();
    ps.append("NodeManagers in the ClusterClient " + metrics.getNumNodeManagers());
    List<NodeReport> nodes=yarnClient.getNodeReports(NodeState.RUNNING);
    final String format="|%-16s |%-16s %n";
    ps.printf("|Property         |Value          %n");
    ps.println("+---------------------------------------+");
    int totalMemory=0;
    int totalCores=0;
    for (    NodeReport rep : nodes) {
      final Resource res=rep.getCapability();
      totalMemory+=res.getMemory();
      totalCores+=res.getVirtualCores();
      ps.format(format,"NodeID",rep.getNodeId());
      ps.format(format,"Memory",res.getMemory() + " MB");
      ps.format(format,"vCores",res.getVirtualCores());
      ps.format(format,"HealthReport",rep.getHealthReport());
      ps.format(format,"Containers",rep.getNumContainers());
      ps.println("+---------------------------------------+");
    }
    ps.println("Summary: totalMemory " + totalMemory + " totalCores "+ totalCores);
    List<QueueInfo> qInfo=yarnClient.getAllQueues();
    for (    QueueInfo q : qInfo) {
      ps.println("Queue: " + q.getQueueName() + ", Current Capacity: "+ q.getCurrentCapacity()+ " Max Capacity: "+ q.getMaximumCapacity()+ " Applications: "+ q.getApplications().size());
    }
    yarnClient.stop();
    return baos.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException("Couldn't get cluster description",e);
  }
}
