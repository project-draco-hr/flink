{
  super(parent,SWT.NONE);
  setLayout(new FillLayout());
  final Menu treeContextMenu=new Menu(getShell());
  this.addItem=new MenuItem(treeContextMenu,SWT.PUSH);
  this.addItem.setText("Add...");
  this.addItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      treeListener.addFailurePattern();
    }
  }
);
  new MenuItem(treeContextMenu,SWT.SEPARATOR);
  this.removeItem=new MenuItem(treeContextMenu,SWT.PUSH);
  this.removeItem.setText("Remove...");
  this.removeItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      final TreeItem[] selectedItems=jobTree.getSelection();
      if (selectedItems == null) {
        return;
      }
      for (      final TreeItem selectedItem : selectedItems) {
        treeListener.removeFailurePattern(selectedItem);
      }
    }
  }
);
  new MenuItem(treeContextMenu,SWT.SEPARATOR);
  this.saveItem=new MenuItem(treeContextMenu,SWT.PUSH);
  this.saveItem.setText("Save...");
  this.saveItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      final TreeItem[] selectedItems=jobTree.getSelection();
      if (selectedItems == null) {
        return;
      }
      for (      final TreeItem selectedItem : selectedItems) {
        treeListener.saveFailurePattern(selectedItem);
      }
    }
  }
);
  this.loadItem=new MenuItem(treeContextMenu,SWT.PUSH);
  this.loadItem.setText("Load...");
  this.loadItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      treeListener.loadFailurePattern();
    }
  }
);
  this.jobTree=new Tree(this,style);
  this.jobTree.setMenu(treeContextMenu);
  this.jobTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    final MouseEvent arg0){
      final boolean itemSelected=(jobTree.getItem(new Point(arg0.x,arg0.y)) != null);
      addItem.setEnabled(!itemSelected);
      removeItem.setEnabled(itemSelected);
      saveItem.setEnabled(itemSelected);
      loadItem.setEnabled(!itemSelected);
    }
  }
);
  this.jobTree.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent arg0){
      if (arg0.keyCode == SWT.DEL) {
        final TreeItem[] selectedItems=jobTree.getSelection();
        if (selectedItems == null) {
          return;
        }
        for (        final TreeItem selectedItem : selectedItems) {
          treeListener.removeFailurePattern(selectedItem);
        }
      }
    }
  }
);
  this.jobTree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      final TreeItem[] selectedItems=jobTree.getSelection();
      if (selectedItems == null) {
        return;
      }
      for (      final TreeItem selectedItem : selectedItems) {
        treeListener.jobFailurePatternSelected(selectedItem);
      }
    }
  }
);
}
