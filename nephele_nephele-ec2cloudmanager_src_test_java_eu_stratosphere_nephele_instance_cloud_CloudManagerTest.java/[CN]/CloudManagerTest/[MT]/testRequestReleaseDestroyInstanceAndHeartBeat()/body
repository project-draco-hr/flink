{
  GlobalConfiguration.loadConfiguration(System.getProperty("user.dir") + "/correct-conf");
  MyInstanceListener myInstanceListener=new MyInstanceListener();
  CloudManager cm=new CloudManager();
  cm.setInstanceListener(myInstanceListener);
  JobID jobID=new JobID();
  Configuration conf=new Configuration();
  File f=new File(System.getProperty("user.dir") + "/correct-conf/ec2-account.xml");
  if (!f.exists()) {
    System.err.println("Please create an XML file \"ec2-account.xml\" for EC2 account in the folder " + System.getProperty("user.dir") + "/correct-conf\n"+ "Three keys must be included: job.cloud.username, job.cloud.awsaccessid, job.cloud.awssecretkey\n"+ "The format is:\n"+ "<property>\n"+ "	<key>...</key>\n"+ "	<value>...</value>\n"+ "</property>");
    return;
  }
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(System.getProperty("user.dir") + "/correct-conf/ec2-account.xml");
    NodeList nl=doc.getElementsByTagName("property");
    for (int i=0; i < nl.getLength(); i++) {
      Element property=(Element)nl.item(i);
      Node nodeKey=property.getElementsByTagName("key").item(0);
      Node nodeValue=property.getElementsByTagName("value").item(0);
      String key=nodeKey.getFirstChild().getNodeValue();
      String value=nodeValue.getFirstChild().getNodeValue();
      conf.setString(key,value);
    }
  }
 catch (  ParserConfigurationException e1) {
    e1.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  if (conf.getString("job.cloud.username",null) == null) {
    System.err.println("Please set the key job.cloud.username in " + System.getProperty("user.dir") + "/correct-conf/ec2-account.xml");
    return;
  }
  if (conf.getString("job.cloud.awsaccessid",null) == null) {
    System.err.println("Please set the key job.cloud.awsaccessid in " + System.getProperty("user.dir") + "/correct-conf/ec2-account.xml");
    return;
  }
  if (conf.getString("job.cloud.awssecretkey",null) == null) {
    System.err.println("Please set the key job.cloud.awssecretkey in " + System.getProperty("user.dir") + "/correct-conf/ec2-account.xml");
    return;
  }
  Object reservedInstances=new Object();
  Object cloudInstances=new Object();
  Object floatingInstances=new Object();
  Object floatingInstanceIDs=new Object();
  Object jobToInstancesMap=new Object();
  try {
    Field f1=CloudManager.class.getDeclaredField("reservedInstances");
    f1.setAccessible(true);
    reservedInstances=f1.get(cm);
    Field f2=CloudManager.class.getDeclaredField("cloudInstances");
    f2.setAccessible(true);
    cloudInstances=f2.get(cm);
    Field f3=CloudManager.class.getDeclaredField("floatingInstances");
    f3.setAccessible(true);
    floatingInstances=f3.get(cm);
    Field f4=CloudManager.class.getDeclaredField("floatingInstanceIDs");
    f4.setAccessible(true);
    floatingInstanceIDs=f4.get(cm);
    Field f5=CloudManager.class.getDeclaredField("jobToInstancesMap");
    f5.setAccessible(true);
    jobToInstancesMap=f5.get(cm);
  }
 catch (  SecurityException e1) {
    e1.printStackTrace();
  }
catch (  NoSuchFieldException e1) {
    e1.printStackTrace();
  }
catch (  IllegalArgumentException e1) {
    e1.printStackTrace();
  }
catch (  IllegalAccessException e1) {
    e1.printStackTrace();
  }
  assertEquals(0,((Map<String,JobID>)reservedInstances).size());
  assertEquals(0,((List<CloudInstance>)cloudInstances).size());
  assertEquals(0,((Map<InstanceConnectionInfo,FloatingInstance>)floatingInstances).size());
  assertEquals(0,((Map<String,Configuration>)floatingInstanceIDs).size());
  assertEquals(0,((Map<JobID,JobToInstancesMapping>)jobToInstancesMap).size());
  try {
    cm.requestInstance(jobID,conf,InstanceTypeFactory.constructFromDescription("m1.small,1,1,2048,40,10"));
  }
 catch (  InstanceException e) {
    e.printStackTrace();
  }
  assertEquals(1,((Map<String,JobID>)reservedInstances).size());
  assertEquals(0,((List<CloudInstance>)cloudInstances).size());
  assertEquals(0,((Map<InstanceConnectionInfo,FloatingInstance>)floatingInstances).size());
  assertEquals(0,((Map<String,Configuration>)floatingInstanceIDs).size());
  assertEquals(1,((Map<JobID,JobToInstancesMapping>)jobToInstancesMap).size());
  String instanceID=null;
  try {
    Method m1=CloudManager.class.getDeclaredMethod("describeInstances",new Class[]{String.class,String.class,String.class});
    m1.setAccessible(true);
    Object instanceList=m1.invoke(cm,new Object[]{conf.getString("job.cloud.username",null),conf.getString("job.cloud.awsaccessid",null),conf.getString("job.cloud.awssecretkey",null)});
    assertEquals(1,((List<com.xerox.amazonws.ec2.ReservationDescription.Instance>)instanceList).size());
    com.xerox.amazonws.ec2.ReservationDescription.Instance instance=((List<com.xerox.amazonws.ec2.ReservationDescription.Instance>)instanceList).get(0);
    instanceID=instance.getInstanceId();
    final HardwareDescription hardwareDescription=HardwareDescriptionFactory.construct(8,32L * 1024L * 1024L* 1024L,32L * 1024L * 1024L* 1024L);
    cm.reportHeartBeat(new InstanceConnectionInfo(InetAddress.getByName(instance.getDnsName()),10000,20000),hardwareDescription);
  }
 catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  assertEquals(0,((Map<String,JobID>)reservedInstances).size());
  assertEquals(1,((List<CloudInstance>)cloudInstances).size());
  assertEquals(0,((Map<InstanceConnectionInfo,FloatingInstance>)floatingInstances).size());
  assertEquals(0,((Map<String,Configuration>)floatingInstanceIDs).size());
  assertEquals(1,((Map<JobID,JobToInstancesMapping>)jobToInstancesMap).size());
  CloudInstance ci=((List<CloudInstance>)cloudInstances).get(0);
  cm.releaseAllocatedResource(jobID,conf,ci.asAllocatedResource());
  assertEquals(0,((Map<String,JobID>)reservedInstances).size());
  assertEquals(0,((List<CloudInstance>)cloudInstances).size());
  assertEquals(1,((Map<InstanceConnectionInfo,FloatingInstance>)floatingInstances).size());
  assertEquals(1,((Map<String,Configuration>)floatingInstanceIDs).size());
  assertEquals(1,((Map<JobID,JobToInstancesMapping>)jobToInstancesMap).size());
  assertNotNull(instanceID);
  try {
    Method m2=CloudManager.class.getDeclaredMethod("destroyCloudInstance",new Class[]{Configuration.class,String.class});
    m2.setAccessible(true);
    Object terminatedID=m2.invoke(cm,new Object[]{conf,instanceID});
    assertEquals(instanceID,terminatedID);
  }
 catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}
