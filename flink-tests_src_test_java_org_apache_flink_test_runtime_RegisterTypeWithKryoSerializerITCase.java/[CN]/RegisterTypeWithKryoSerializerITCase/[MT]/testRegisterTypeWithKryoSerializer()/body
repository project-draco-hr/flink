{
  int numElements=10;
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.registerTypeWithKryoSerializer(TestClass.class,new TestClassSerializer());
  DataSet<Long> input=env.generateSequence(0,numElements - 1);
  DataSet<TestClass> mapped=input.map(new MapFunction<Long,TestClass>(){
    private static final long serialVersionUID=-529116076312998262L;
    @Override public TestClass map(    Long value) throws Exception {
      return new TestClass(value);
    }
  }
);
  List<TestClass> expected=new ArrayList<>(numElements);
  for (int i=0; i < numElements; i++) {
    expected.add(new TestClass(42));
  }
  compareResultCollections(expected,mapped.collect(),new Comparator<TestClass>(){
    @Override public int compare(    TestClass o1,    TestClass o2){
      return (int)(o1.getValue() - o2.getValue());
    }
  }
);
}
