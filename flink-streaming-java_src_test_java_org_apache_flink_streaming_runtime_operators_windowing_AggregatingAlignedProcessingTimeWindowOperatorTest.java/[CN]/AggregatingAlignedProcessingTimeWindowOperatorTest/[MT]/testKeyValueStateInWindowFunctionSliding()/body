{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final int factor=2;
    final int windowSlide=50;
    final int windowSize=factor * windowSlide;
    final CollectingOutput<Tuple2<Integer,Integer>> out=new CollectingOutput<>();
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    StatefulFunction.globalCounts.clear();
    AggregatingProcessingTimeWindowOperator<Integer,Tuple2<Integer,Integer>> op=new AggregatingProcessingTimeWindowOperator<>(new StatefulFunction(),fieldOneSelector,IntSerializer.INSTANCE,tupleSerializer,windowSize,windowSlide);
    op.setup(mockTask,createTaskConfig(fieldOneSelector,IntSerializer.INSTANCE),out);
    op.open();
    final int numElements=100;
    for (int i=0; i < numElements; i++) {
      StreamRecord<Tuple2<Integer,Integer>> next1=new StreamRecord<>(new Tuple2<>(1,i));
      StreamRecord<Tuple2<Integer,Integer>> next2=new StreamRecord<>(new Tuple2<>(2,i));
      StreamRecord<Tuple2<Integer,Integer>> next3=new StreamRecord<>(new Tuple2<>(1,i));
      StreamRecord<Tuple2<Integer,Integer>> next4=new StreamRecord<>(new Tuple2<>(2,i));
synchronized (lock) {
        op.setKeyContextElement1(next1);
        op.processElement(next1);
        op.setKeyContextElement1(next2);
        op.processElement(next2);
        op.setKeyContextElement1(next3);
        op.processElement(next3);
        op.setKeyContextElement1(next4);
        op.processElement(next4);
      }
      Thread.sleep(1);
    }
synchronized (lock) {
      op.close();
    }
    int count1=StatefulFunction.globalCounts.get(1);
    int count2=StatefulFunction.globalCounts.get(2);
    assertTrue(count1 >= 2 && count1 <= 2 * numElements);
    assertEquals(count1,count2);
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdown();
  }
}
