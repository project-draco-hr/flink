{
  final Object lock=new Object();
  TimeServiceProvider timerService=DefaultTimeServiceProvider.createForTesting(Executors.newSingleThreadScheduledExecutor(),lock);
  try {
    @SuppressWarnings("unchecked") final Output<StreamRecord<String>> mockOut=mock(Output.class);
    StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    AggregatingProcessingTimeWindowOperator<String,String> op;
    op=new AggregatingProcessingTimeWindowOperator<>(mockFunction,mockKeySelector,StringSerializer.INSTANCE,StringSerializer.INSTANCE,5000,1000);
    op.setup(mockTask,createTaskConfig(mockKeySelector,StringSerializer.INSTANCE,10),mockOut);
    op.open();
    assertTrue(op.getNextSlideTime() % 1000 == 0);
    assertTrue(op.getNextEvaluationTime() % 1000 == 0);
    op.dispose();
    timerService.shutdownService();
    timerService=DefaultTimeServiceProvider.createForTesting(Executors.newSingleThreadScheduledExecutor(),lock);
    mockTask=createMockTaskWithTimer(timerService,lock);
    op=new AggregatingProcessingTimeWindowOperator<>(mockFunction,mockKeySelector,StringSerializer.INSTANCE,StringSerializer.INSTANCE,1000,1000);
    op.setup(mockTask,new StreamConfig(new Configuration()),mockOut);
    op.open();
    assertTrue(op.getNextSlideTime() % 1000 == 0);
    assertTrue(op.getNextEvaluationTime() % 1000 == 0);
    op.dispose();
    timerService.shutdownService();
    timerService=DefaultTimeServiceProvider.createForTesting(Executors.newSingleThreadScheduledExecutor(),lock);
    mockTask=createMockTaskWithTimer(timerService,lock);
    op=new AggregatingProcessingTimeWindowOperator<>(mockFunction,mockKeySelector,StringSerializer.INSTANCE,StringSerializer.INSTANCE,1500,1000);
    op.setup(mockTask,new StreamConfig(new Configuration()),mockOut);
    op.open();
    assertTrue(op.getNextSlideTime() % 500 == 0);
    assertTrue(op.getNextEvaluationTime() % 1000 == 0);
    op.dispose();
    timerService.shutdownService();
    timerService=DefaultTimeServiceProvider.createForTesting(Executors.newSingleThreadScheduledExecutor(),lock);
    mockTask=createMockTaskWithTimer(timerService,lock);
    op=new AggregatingProcessingTimeWindowOperator<>(mockFunction,mockKeySelector,StringSerializer.INSTANCE,StringSerializer.INSTANCE,1200,1100);
    op.setup(mockTask,new StreamConfig(new Configuration()),mockOut);
    op.open();
    assertTrue(op.getNextSlideTime() % 100 == 0);
    assertTrue(op.getNextEvaluationTime() % 1100 == 0);
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdownService();
  }
}
