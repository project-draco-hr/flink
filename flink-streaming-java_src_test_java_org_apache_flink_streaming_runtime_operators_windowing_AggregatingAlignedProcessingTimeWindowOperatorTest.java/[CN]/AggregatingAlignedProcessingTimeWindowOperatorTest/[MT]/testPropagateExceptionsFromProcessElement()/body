{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final CollectingOutput<Tuple2<Integer,Integer>> out=new CollectingOutput<>();
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    ReduceFunction<Tuple2<Integer,Integer>> failingFunction=new FailingFunction(100);
    final long hundredYears=100L * 365 * 24* 60* 60* 1000;
    AggregatingProcessingTimeWindowOperator<Integer,Tuple2<Integer,Integer>> op=new AggregatingProcessingTimeWindowOperator<>(failingFunction,fieldOneSelector,IntSerializer.INSTANCE,tupleSerializer,hundredYears,hundredYears);
    op.setup(mockTask,createTaskConfig(fieldOneSelector,IntSerializer.INSTANCE,new HashKeyGroupAssigner<Object>(10)),out);
    op.open();
    for (int i=0; i < 100; i++) {
synchronized (lock) {
        StreamRecord<Tuple2<Integer,Integer>> next=new StreamRecord<>(new Tuple2<>(1,1));
        op.setKeyContextElement1(next);
        op.processElement(next);
      }
    }
    try {
      StreamRecord<Tuple2<Integer,Integer>> next=new StreamRecord<>(new Tuple2<>(1,1));
      op.setKeyContextElement1(next);
      op.processElement(next);
      fail("This fail with an exception");
    }
 catch (    Exception e) {
      assertTrue(e.getMessage().contains("Artificial Test Exception"));
    }
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdown();
  }
}
