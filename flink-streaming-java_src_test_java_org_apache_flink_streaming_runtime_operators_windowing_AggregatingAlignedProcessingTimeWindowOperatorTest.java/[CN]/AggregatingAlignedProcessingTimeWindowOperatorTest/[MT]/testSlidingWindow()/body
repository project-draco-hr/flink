{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final CollectingOutput<Tuple2<Integer,Integer>> out=new CollectingOutput<>(50);
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    AggregatingProcessingTimeWindowOperator<Integer,Tuple2<Integer,Integer>> op=new AggregatingProcessingTimeWindowOperator<>(sumFunction,fieldOneSelector,IntSerializer.INSTANCE,tupleSerializer,150,50);
    op.setup(mockTask,createTaskConfig(fieldOneSelector,IntSerializer.INSTANCE,10),out);
    op.open();
    final int numElements=1000;
    for (int i=0; i < numElements; i++) {
synchronized (lock) {
        StreamRecord<Tuple2<Integer,Integer>> next=new StreamRecord<>(new Tuple2<>(i,i));
        op.setKeyContextElement1(next);
        op.processElement(next);
      }
      Thread.sleep(1);
    }
synchronized (lock) {
      op.close();
    }
    op.dispose();
    List<Tuple2<Integer,Integer>> result=out.getElements();
    if (result.size() < numElements || result.size() > 3 * numElements) {
      System.out.println(result);
      fail("Wrong number of results: " + result.size());
    }
    Collections.sort(result,tupleComparator);
    int lastNum=-1;
    int lastCount=-1;
    for (    Tuple2<Integer,Integer> val : result) {
      assertEquals(val.f0,val.f1);
      if (val.f0 == lastNum) {
        lastCount++;
        assertTrue(lastCount <= 3);
      }
 else {
        lastNum=val.f0;
        lastCount=1;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdownNow();
  }
}
