{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final int windowSize=200;
    final CollectingOutput<Tuple2<Integer,Integer>> out=new CollectingOutput<>(windowSize);
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    AggregatingProcessingTimeWindowOperator<Integer,Tuple2<Integer,Integer>> op=new AggregatingProcessingTimeWindowOperator<>(sumFunction,fieldOneSelector,IntSerializer.INSTANCE,tupleSerializer,windowSize,windowSize);
    op.setup(mockTask,new StreamConfig(new Configuration()),out);
    op.open();
    final int numElementsFirst=700;
    final int numElements=1000;
    for (int i=0; i < numElementsFirst; i++) {
synchronized (lock) {
        StreamRecord<Tuple2<Integer,Integer>> next=new StreamRecord<>(new Tuple2<>(i,i));
        op.setKeyContextElement(next);
        op.processElement(next);
      }
      Thread.sleep(1);
    }
    StreamTaskState state;
    List<Tuple2<Integer,Integer>> resultAtSnapshot;
synchronized (lock) {
      int beforeSnapShot=out.getElements().size();
      state=op.snapshotOperatorState(1L,System.currentTimeMillis());
      resultAtSnapshot=new ArrayList<>(out.getElements());
      int afterSnapShot=out.getElements().size();
      assertEquals("operator performed computation during snapshot",beforeSnapShot,afterSnapShot);
    }
    assertTrue(resultAtSnapshot.size() <= numElementsFirst);
    for (int i=numElementsFirst; i < numElements; i++) {
synchronized (lock) {
        StreamRecord<Tuple2<Integer,Integer>> next=new StreamRecord<>(new Tuple2<>(i,i));
        op.setKeyContextElement(next);
        op.processElement(next);
      }
      Thread.sleep(1);
    }
    op.dispose();
    final CollectingOutput<Tuple2<Integer,Integer>> out2=new CollectingOutput<>(windowSize);
    op=new AggregatingProcessingTimeWindowOperator<>(sumFunction,fieldOneSelector,IntSerializer.INSTANCE,tupleSerializer,windowSize,windowSize);
    op.setup(mockTask,new StreamConfig(new Configuration()),out2);
    op.restoreState(state);
    op.open();
    for (int i=numElementsFirst; i < numElements; i++) {
synchronized (lock) {
        StreamRecord<Tuple2<Integer,Integer>> next=new StreamRecord<>(new Tuple2<>(i,i));
        op.setKeyContextElement(next);
        op.processElement(next);
      }
      Thread.sleep(1);
    }
synchronized (lock) {
      op.close();
    }
    op.dispose();
    List<Tuple2<Integer,Integer>> finalResult=new ArrayList<>(resultAtSnapshot);
    finalResult.addAll(out2.getElements());
    assertEquals(numElements,finalResult.size());
    Collections.sort(finalResult,tupleComparator);
    for (int i=0; i < numElements; i++) {
      assertEquals(i,finalResult.get(i).f0.intValue());
      assertEquals(i,finalResult.get(i).f1.intValue());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdown();
  }
}
