{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final int windowSize=50;
    final CollectingOutput<Tuple2<Integer,Integer>> out=new CollectingOutput<>(windowSize);
    AggregatingProcessingTimeWindowOperator<Integer,Tuple2<Integer,Integer>> op=new AggregatingProcessingTimeWindowOperator<>(sumFunction,fieldOneSelector,IntSerializer.INSTANCE,tupleSerializer,windowSize,windowSize);
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    op.setup(mockTask,new StreamConfig(new Configuration()),out);
    op.open();
    final int numElements=1000;
    for (int i=0; i < numElements; i++) {
synchronized (lock) {
        StreamRecord<Tuple2<Integer,Integer>> next=new StreamRecord<>(new Tuple2<>(i,i));
        op.setKeyContextElement(next);
        op.processElement(next);
      }
      Thread.sleep(1);
    }
synchronized (lock) {
      op.close();
    }
    op.dispose();
    List<Tuple2<Integer,Integer>> result=out.getElements();
    assertEquals(numElements,result.size());
    Collections.sort(result,tupleComparator);
    for (int i=0; i < numElements; i++) {
      assertEquals(i,result.get(i).f0.intValue());
      assertEquals(i,result.get(i).f1.intValue());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdownNow();
  }
}
