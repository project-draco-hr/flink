{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final long twoSeconds=2000;
    final CollectingOutput<Tuple2<Integer,Integer>> out=new CollectingOutput<>();
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    StatefulFunction.globalCounts.clear();
    AggregatingProcessingTimeWindowOperator<Integer,Tuple2<Integer,Integer>> op=new AggregatingProcessingTimeWindowOperator<>(new StatefulFunction(),fieldOneSelector,IntSerializer.INSTANCE,tupleSerializer,twoSeconds,twoSeconds);
    op.setup(mockTask,createTaskConfig(fieldOneSelector,IntSerializer.INSTANCE,new HashKeyGroupAssigner<Object>(10)),out);
    op.open();
synchronized (lock) {
      for (int i=0; i < 10; i++) {
        StreamRecord<Tuple2<Integer,Integer>> next1=new StreamRecord<>(new Tuple2<>(1,i));
        op.setKeyContextElement1(next1);
        op.processElement(next1);
        StreamRecord<Tuple2<Integer,Integer>> next2=new StreamRecord<>(new Tuple2<>(2,i));
        op.setKeyContextElement1(next2);
        op.processElement(next2);
      }
    }
    while (StatefulFunction.globalCounts.get(1) < 10 || StatefulFunction.globalCounts.get(2) < 10) {
      Thread.sleep(50);
    }
    op.close();
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdown();
  }
}
