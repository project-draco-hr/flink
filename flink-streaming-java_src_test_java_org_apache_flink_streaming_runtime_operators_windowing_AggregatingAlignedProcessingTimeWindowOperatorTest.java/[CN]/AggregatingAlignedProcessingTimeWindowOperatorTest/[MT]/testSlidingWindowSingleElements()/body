{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final CollectingOutput<Tuple2<Integer,Integer>> out=new CollectingOutput<>(50);
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    AggregatingProcessingTimeWindowOperator<Integer,Tuple2<Integer,Integer>> op=new AggregatingProcessingTimeWindowOperator<>(sumFunction,fieldOneSelector,IntSerializer.INSTANCE,tupleSerializer,150,50);
    op.setup(mockTask,new StreamConfig(new Configuration()),out);
    op.open();
synchronized (lock) {
      StreamRecord<Tuple2<Integer,Integer>> next1=new StreamRecord<>(new Tuple2<>(1,1));
      op.setKeyContextElement1(next1);
      op.processElement(next1);
      StreamRecord<Tuple2<Integer,Integer>> next2=new StreamRecord<>(new Tuple2<>(2,2));
      op.setKeyContextElement1(next2);
      op.processElement(next2);
    }
    out.waitForNElements(6,120000);
    List<Tuple2<Integer,Integer>> result=out.getElements();
    assertEquals(6,result.size());
    Collections.sort(result,tupleComparator);
    assertEquals(Arrays.asList(new Tuple2<>(1,1),new Tuple2<>(1,1),new Tuple2<>(1,1),new Tuple2<>(2,2),new Tuple2<>(2,2),new Tuple2<>(2,2)),result);
synchronized (lock) {
      op.close();
    }
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdown();
  }
}
