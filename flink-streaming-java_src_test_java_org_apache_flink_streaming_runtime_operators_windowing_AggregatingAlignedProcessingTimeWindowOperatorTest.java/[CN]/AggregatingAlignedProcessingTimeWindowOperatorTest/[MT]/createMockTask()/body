{
  Configuration configuration=new Configuration();
  configuration.setString(ConfigConstants.STATE_BACKEND,"jobmanager");
  StreamTask<?,?> task=mock(StreamTask.class);
  when(task.getAccumulatorMap()).thenReturn(new HashMap<String,Accumulator<?,?>>());
  when(task.getName()).thenReturn("Test task name");
  when(task.getExecutionConfig()).thenReturn(new ExecutionConfig());
  final TaskManagerRuntimeInfo mockTaskManagerRuntimeInfo=mock(TaskManagerRuntimeInfo.class);
  when(mockTaskManagerRuntimeInfo.getConfiguration()).thenReturn(configuration);
  final Environment env=new DummyEnvironment("Test task name",1,0);
  when(task.getEnvironment()).thenReturn(env);
  try {
    doAnswer(new Answer<AbstractStateBackend>(){
      @Override public AbstractStateBackend answer(      InvocationOnMock invocationOnMock) throws Throwable {
        final String operatorIdentifier=(String)invocationOnMock.getArguments()[0];
        final TypeSerializer<?> keySerializer=(TypeSerializer<?>)invocationOnMock.getArguments()[1];
        MemoryStateBackend backend=MemoryStateBackend.create();
        backend.initializeForJob(env,operatorIdentifier,keySerializer);
        return backend;
      }
    }
).when(task).createStateBackend(any(String.class),any(TypeSerializer.class));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return task;
}
