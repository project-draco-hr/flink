{
  super(input,input.getType());
  if (keys == null) {
    if (input.getType().isTupleType()) {
      TupleTypeInfoBase<?> tupleType=(TupleTypeInfoBase<?>)input.getType();
      int[] allFields=new int[tupleType.getArity()];
      for (int i=0; i < tupleType.getArity(); i++) {
        allFields[i]=i;
      }
      keys=new Keys.ExpressionKeys<T>(allFields,input.getType(),true);
    }
 else {
      throw new InvalidProgramException("Distinction on all fields is only possible on tuple data types.");
    }
  }
  if (keys instanceof Keys.ExpressionKeys && !input.getType().isTupleType()) {
    throw new InvalidProgramException("Distinction on field positions is only possible on tuple data types.");
  }
  this.keys=keys;
}
