{
  try {
    final ActionQueue queue=new ActionQueue();
    final JobVertexID jid=new JobVertexID();
    final Instance instance=spy(getInstance(ActorRef.noSender()));
    doNothing().when(instance).checkLibraryAvailability(Matchers.<JobID>any());
    final AllocatedSlot slot=instance.allocateSlot(new JobID());
    final ExecutionJobVertex ejv=getJobVertexExecutingTriggered(jid,queue);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0]);
    final ExecutionAttemptID eid=vertex.getCurrentExecutionAttempt().getAttemptId();
    doReturn(new TaskOperationResult(eid,true)).when(instance).submitTask(Matchers.<TaskDeploymentDescriptor>any());
    doReturn(new TaskOperationResult(eid,false)).doReturn(new TaskOperationResult(eid,true)).when(instance).cancelTask(Matchers.<ExecutionAttemptID>any());
    assertEquals(ExecutionState.CREATED,vertex.getExecutionState());
    vertex.deployToSlot(slot);
    assertEquals(ExecutionState.DEPLOYING,vertex.getExecutionState());
    Exception testError=new Exception("test error");
    vertex.fail(testError);
    assertEquals(ExecutionState.FAILED,vertex.getExecutionState());
    Runnable deploy=queue.popNextAction();
    Runnable cancel1=queue.popNextAction();
    cancel1.run();
    deploy.run();
    assertEquals(ExecutionState.FAILED,vertex.getExecutionState());
    queue.triggerNextAction();
    assertEquals(testError,vertex.getFailureCause());
    assertTrue(vertex.getStateTimestamp(ExecutionState.CREATED) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.DEPLOYING) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.FAILED) > 0);
    verify(instance,times(2)).cancelTask(eid);
    verify(instance,times(1)).submitTask(any(TaskDeploymentDescriptor.class));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
