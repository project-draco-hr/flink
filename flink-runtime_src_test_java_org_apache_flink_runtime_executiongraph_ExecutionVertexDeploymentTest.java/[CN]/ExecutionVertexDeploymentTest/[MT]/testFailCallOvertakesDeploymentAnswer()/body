{
  try {
    final TestingUtils.QueuedActionExecutionContext context=TestingUtils.queuedActionExecutionContext();
    final TestingUtils.ActionQueue queue=context.actionQueue();
    final JobVertexID jid=new JobVertexID();
    final ExecutionJobVertex ejv=getExecutionVertex(jid,context);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0],AkkaUtils.getDefaultTimeout());
    final ExecutionAttemptID eid=vertex.getCurrentExecutionAttempt().getAttemptId();
    final Instance instance=getInstance(new ExecutionVertexCancelTest.CancelSequenceInstanceGateway(context,new TaskOperationResult(eid,false),new TaskOperationResult(eid,true)));
    final SimpleSlot slot=instance.allocateSimpleSlot(ejv.getJobId());
    assertEquals(ExecutionState.CREATED,vertex.getExecutionState());
    vertex.deployToSlot(slot);
    assertEquals(ExecutionState.DEPLOYING,vertex.getExecutionState());
    Exception testError=new Exception("test error");
    vertex.fail(testError);
    assertEquals(ExecutionState.FAILED,vertex.getExecutionState());
    Runnable deploy=queue.popNextAction();
    Runnable cancel1=queue.popNextAction();
    cancel1.run();
    queue.triggerNextAction();
    deploy.run();
    queue.triggerNextAction();
    assertEquals(ExecutionState.FAILED,vertex.getExecutionState());
    assertEquals(testError,vertex.getFailureCause());
    assertTrue(vertex.getStateTimestamp(ExecutionState.CREATED) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.DEPLOYING) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.FAILED) > 0);
    assertTrue(queue.isEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
