{
  try {
    final JobVertexID jid=new JobVertexID();
    final TestActorRef simpleTaskManager=TestActorRef.create(system,Props.create(SimpleAcknowledgingTaskManager.class));
    final Instance instance=getInstance(simpleTaskManager);
    final AllocatedSlot slot=instance.allocateSlot(new JobID());
    final ExecutionJobVertex ejv=getExecutionVertex(jid);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0],AkkaUtils.DEFAULT_TIMEOUT());
    assertEquals(ExecutionState.CREATED,vertex.getExecutionState());
    vertex.deployToSlot(slot);
    try {
      vertex.deployToSlot(slot);
      fail("Scheduled from wrong state");
    }
 catch (    IllegalStateException e) {
    }
    for (int i=0; i < 100; i++) {
      if (vertex.getExecutionState() != ExecutionState.RUNNING) {
        Thread.sleep(10);
      }
    }
    assertEquals(ExecutionState.RUNNING,vertex.getExecutionState());
    try {
      vertex.deployToSlot(slot);
      fail("Scheduled from wrong state");
    }
 catch (    IllegalStateException e) {
    }
    assertTrue(vertex.getStateTimestamp(ExecutionState.CREATED) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.DEPLOYING) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.RUNNING) > 0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
