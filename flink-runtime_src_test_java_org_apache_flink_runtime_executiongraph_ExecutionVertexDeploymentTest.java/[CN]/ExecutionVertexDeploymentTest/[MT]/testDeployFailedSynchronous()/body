{
  final String ERROR_MESSAGE="test_failure_error_message";
  try {
    final JobVertexID jid=new JobVertexID();
    final TaskOperationProtocol taskManager=mock(TaskOperationProtocol.class);
    final Instance instance=getInstance(taskManager);
    final AllocatedSlot slot=instance.allocateSlot(new JobID());
    final ExecutionJobVertex ejv=getJobVertexExecutingSynchronously(jid);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0]);
    when(taskManager.submitTask(Matchers.any(TaskDeploymentDescriptor.class))).thenReturn(new TaskOperationResult(vertex.getCurrentExecutionAttempt().getAttemptId(),false,ERROR_MESSAGE));
    assertEquals(ExecutionState.CREATED,vertex.getExecutionState());
    LibraryCacheManager.register(vertex.getJobId(),new String[0]);
    vertex.deployToSlot(slot);
    assertEquals(ExecutionState.FAILED,vertex.getExecutionState());
    assertNotNull(vertex.getFailureCause());
    assertTrue(vertex.getFailureCause().getMessage().contains(ERROR_MESSAGE));
    assertTrue(vertex.getStateTimestamp(ExecutionState.CREATED) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.DEPLOYING) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.FAILED) > 0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
