{
  final String ERROR_MESSAGE="test_failure_error_message";
  try {
    final JobVertexID jid=new JobVertexID();
    final Instance instance=spy(getInstance(ActorRef.noSender()));
    doNothing().when(instance).checkLibraryAvailability(Matchers.<JobID>any());
    final AllocatedSlot slot=instance.allocateSlot(new JobID());
    final ExecutionJobVertex ejv=getJobVertexExecutingSynchronously(jid);
    final ExecutionVertex vertex=new ExecutionVertex(ejv,0,new IntermediateResult[0]);
    doReturn(new TaskOperationResult(vertex.getCurrentExecutionAttempt().getAttemptId(),false,ERROR_MESSAGE)).when(instance).submitTask(Matchers.<TaskDeploymentDescriptor>any());
    assertEquals(ExecutionState.CREATED,vertex.getExecutionState());
    vertex.deployToSlot(slot);
    assertEquals(ExecutionState.FAILED,vertex.getExecutionState());
    assertNotNull(vertex.getFailureCause());
    assertTrue(vertex.getFailureCause().getMessage().contains(ERROR_MESSAGE));
    assertTrue(vertex.getStateTimestamp(ExecutionState.CREATED) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.DEPLOYING) > 0);
    assertTrue(vertex.getStateTimestamp(ExecutionState.FAILED) > 0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
