{
  PojoTypeInfo<TestUserClass> pType=(PojoTypeInfo<TestUserClass>)type;
  List<FlatFieldDescriptor> result=new ArrayList<FlatFieldDescriptor>();
  pType.getKey("nestedClass.dumm2",0,result);
  int[] fields=new int[1];
  fields[0]=result.get(0).getPosition();
  TypeComparator<TestUserClass> pojoComp=pType.createComparator(fields,new boolean[]{true},0);
  TestUserClass pojoTestRecord=new TestUserClass(0,"abc",3d,new int[]{1,2,3},new NestedTestUserClass(1,"haha",4d,new int[]{5,4,3}));
  int pHash=pojoComp.hash(pojoTestRecord);
  Tuple1<String> tupleTest=new Tuple1<String>("haha");
  TupleTypeInfo<Tuple1<String>> tType=(TupleTypeInfo<Tuple1<String>>)TypeExtractor.getForObject(tupleTest);
  TypeComparator<Tuple1<String>> tupleComp=tType.createComparator(new int[]{0},new boolean[]{true},0);
  int tHash=tupleComp.hash(tupleTest);
  Assert.assertTrue("The hashing for tuples and pojos must be the same, so that they are mixable",pHash == tHash);
  Tuple3<Integer,String,Double> multiTupleTest=new Tuple3<Integer,String,Double>(1,"haha",4d);
  TupleTypeInfo<Tuple3<Integer,String,Double>> multiTupleType=(TupleTypeInfo<Tuple3<Integer,String,Double>>)TypeExtractor.getForObject(multiTupleTest);
  ExpressionKeys fieldKey=new ExpressionKeys(new int[]{1,0,2},multiTupleType);
  ExpressionKeys expressKey=new ExpressionKeys(new String[]{"nestedClass.dumm2","nestedClass.dumm1","nestedClass.dumm3"},pType);
  try {
    Assert.assertTrue("Expecting the keys to be compatible",fieldKey.areCompatible(expressKey));
  }
 catch (  IncompatibleKeysException e) {
    e.printStackTrace();
    Assert.fail("Keys must be compatible: " + e.getMessage());
  }
  TypeComparator<TestUserClass> multiPojoComp=pType.createComparator(expressKey.computeLogicalKeyPositions(),new boolean[]{true,true,true},0);
  int multiPojoHash=multiPojoComp.hash(pojoTestRecord);
  TypeComparator<Tuple3<Integer,String,Double>> multiTupleComp=multiTupleType.createComparator(fieldKey.computeLogicalKeyPositions(),new boolean[]{true,true,true},0);
  int multiTupleHash=multiTupleComp.hash(multiTupleTest);
  Assert.assertTrue("The hashing for tuples and pojos must be the same, so that they are mixable. Also for those with multiple key fields",multiPojoHash == multiTupleHash);
}
