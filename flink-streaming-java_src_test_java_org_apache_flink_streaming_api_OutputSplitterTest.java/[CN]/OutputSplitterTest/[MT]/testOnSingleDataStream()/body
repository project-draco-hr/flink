{
  TestListResultSink<Integer> splitterResultSink1=new TestListResultSink<Integer>();
  TestListResultSink<Integer> splitterResultSink2=new TestListResultSink<Integer>();
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  env.setBufferTimeout(1);
  DataStream<Integer> ds=env.fromElements(0,1,2,3,4,5,6,7,8,9);
  ds.split(new OutputSelector<Integer>(){
    private static final long serialVersionUID=2524335410904414121L;
    @Override public Iterable<String> select(    Integer value){
      List<String> s=new ArrayList<String>();
      if (value % 2 == 0) {
        s.add("even");
      }
 else {
        s.add("odd");
      }
      return s;
    }
  }
).select("even").addSink(splitterResultSink1);
  ds.split(new OutputSelector<Integer>(){
    private static final long serialVersionUID=-511693919586034092L;
    @Override public Iterable<String> select(    Integer value){
      List<String> s=new ArrayList<String>();
      if (value % 4 == 0) {
        s.add("yes");
      }
 else {
        s.add("no");
      }
      return s;
    }
  }
).select("yes").addSink(splitterResultSink2);
  env.execute();
  expectedSplitterResult.clear();
  expectedSplitterResult.addAll(Arrays.asList(0,2,4,6,8));
  assertEquals(expectedSplitterResult,splitterResultSink1.getSortedResult());
  expectedSplitterResult.clear();
  expectedSplitterResult.addAll(Arrays.asList(0,4,8));
  assertEquals(expectedSplitterResult,splitterResultSink2.getSortedResult());
}
