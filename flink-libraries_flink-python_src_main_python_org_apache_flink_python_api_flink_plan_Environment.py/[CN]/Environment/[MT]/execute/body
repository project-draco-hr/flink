def execute(self, local=False):
    '\n        Triggers the program execution.\n\n        The environment will execute all parts of the program that have resulted in a "sink" operation.\n        '
    self._local_mode = local
    self._optimize_plan()
    plan_mode = (sys.stdin.readline().rstrip('\n') == 'plan')
    if plan_mode:
        port = int(sys.stdin.readline().rstrip('\n'))
        self._connection = Connection.PureTCPConnection(port)
        self._iterator = Iterator.PlanIterator(self._connection, self)
        self._collector = Collector.PlanCollector(self._connection, self)
        self._send_plan()
        result = self._receive_result()
        self._connection.close()
        return result
    else:
        import struct
        operator = None
        try:
            port = int(sys.stdin.readline().rstrip('\n'))
            id = int(sys.stdin.readline().rstrip('\n'))
            subtask_index = int(sys.stdin.readline().rstrip('\n'))
            input_path = sys.stdin.readline().rstrip('\n')
            output_path = sys.stdin.readline().rstrip('\n')
            used_set = None
            operator = None
            for set in self._sets:
                if (set.id == id):
                    used_set = set
                    operator = set.operator
            operator._configure(input_path, output_path, port, self, used_set, subtask_index)
            operator._go()
            operator._close()
            sys.stdout.flush()
            sys.stderr.flush()
        except:
            sys.stdout.flush()
            sys.stderr.flush()
            if (operator is not None):
                operator._connection._socket.send(struct.pack('>i', (-2)))
            else:
                socket = SOCKET.socket(family=SOCKET.AF_INET, type=SOCKET.SOCK_STREAM)
                socket.connect((SOCKET.gethostbyname('localhost'), port))
                socket.send(struct.pack('>i', (-2)))
                socket.close()
            raise
