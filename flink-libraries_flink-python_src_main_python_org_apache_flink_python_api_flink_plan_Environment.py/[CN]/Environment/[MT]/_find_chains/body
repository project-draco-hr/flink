def _find_chains(self):
    chainable = set([_Identifier.MAP, _Identifier.FILTER, _Identifier.FLATMAP])
    dual_input = set([_Identifier.JOIN, _Identifier.JOINH, _Identifier.JOINT, _Identifier.CROSS, _Identifier.CROSSH, _Identifier.CROSST, _Identifier.COGROUP, _Identifier.UNION])
    x = (len(self._sets) - 1)
    while (x > (-1)):
        child = self._sets[x]
        child_type = child.identifier
        if (child_type in chainable):
            parent = child.parent
            if ((parent.operator is not None) and (len(parent.children) == 1) and (len(parent.sinks) == 0) and (parent not in self._broadcast) and (child not in parent.bcvars)):
                parent.chained_info = child
                parent.name += (' -> ' + child.name)
                parent.types = child.types
                for grand_child in child.children:
                    if (grand_child.identifier in dual_input):
                        if (grand_child.parent.id == child.id):
                            grand_child.parent = parent
                        else:
                            grand_child.other = parent
                    else:
                        grand_child.parent = parent
                    parent.children.append(grand_child)
                for s in self._sets:
                    if (child in s.bcvars):
                        s.bcvars.remove(child)
                        s.bcvars.append(parent)
                for bcvar in self._broadcast:
                    if (bcvar.other.id == child.id):
                        bcvar.other = parent
                for sink in child.sinks:
                    sink.parent = parent
                    parent.sinks.append(sink)
                for bcvar in child.bcvars:
                    bcvar.parent = parent
                    parent.bcvars.append(bcvar)
                parent.children.remove(child)
                self._remove_set(child)
        x -= 1
