{
  Map<Integer,SlotSharingGroup> slotSharingGroups=new HashMap<Integer,SlotSharingGroup>();
  for (  Entry<Integer,AbstractJobVertex> entry : jobVertices.entrySet()) {
    int slotSharingID=streamGraph.getStreamNode(entry.getKey()).getSlotSharingID();
    if (slotSharingID != -1) {
      SlotSharingGroup group=slotSharingGroups.get(slotSharingID);
      if (group == null) {
        group=new SlotSharingGroup();
        slotSharingGroups.put(slotSharingID,group);
      }
      entry.getValue().setSlotSharingGroup(group);
    }
  }
  for (  StreamLoop loop : streamGraph.getStreamLoops()) {
    CoLocationGroup ccg=new CoLocationGroup();
    AbstractJobVertex tail=jobVertices.get(loop.getSink().getID());
    AbstractJobVertex head=jobVertices.get(loop.getSource().getID());
    ccg.addVertex(head);
    ccg.addVertex(tail);
    tail.updateCoLocationGroup(ccg);
    head.updateCoLocationGroup(ccg);
  }
}
