{
  ArrayList<String> resultFiles=new ArrayList<String>();
  if (getFilesystemProvider().isDir(resultPath)) {
    for (    String file : getFilesystemProvider().listFiles(resultPath)) {
      if (!getFilesystemProvider().isDir(file)) {
        resultFiles.add(resultPath + "/" + file);
      }
    }
  }
 else {
    resultFiles.add(resultPath);
  }
  PriorityQueue<String> computedResult=new PriorityQueue<String>();
  for (  String resultFile : resultFiles) {
    InputStream is=getFilesystemProvider().getInputStream(resultFile);
    BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    String line=reader.readLine();
    while (line != null) {
      computedResult.add(line);
      line=reader.readLine();
    }
    reader.close();
  }
  PriorityQueue<String> expectedResult=new PriorityQueue<String>();
  StringTokenizer st=new StringTokenizer(expectedResultStr,"\n");
  while (st.hasMoreElements()) {
    expectedResult.add(st.nextToken());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Expected: " + expectedResult);
    LOG.debug("Computed: " + computedResult);
  }
  Assert.assertEquals("Computed and expected results have different size",expectedResult.size(),computedResult.size());
  while (!expectedResult.isEmpty()) {
    String expectedLine=expectedResult.poll();
    String computedLine=computedResult.poll();
    if (LOG.isDebugEnabled())     LOG.debug("expLine: <" + expectedLine + ">\t\t: compLine: <"+ computedLine+ ">");
    Assert.assertEquals("Computed and expected lines differ",expectedLine,computedLine);
  }
}
