{
  if (replayRequests.isEmpty()) {
    LOG.error("Method 'replayCheckpoints' called but list of checkpoints to be replayed is empty");
    return;
  }
  final Runnable deploymentRunnable=new Runnable(){
    /** 
 * {@inheritDoc}
 */
    @Override public void run(){
      List<CheckpointReplayResult> checkpointResultList=null;
      try {
        checkpointResultList=instance.replayCheckpoints(replayRequests);
      }
 catch (      final IOException ioe) {
        final String errorMsg=StringUtils.stringifyException(ioe);
        LOG.error(errorMsg);
      }
      if (replayRequests.size() != checkpointResultList.size()) {
        LOG.error("size of submission result list does not match size of list with checkpoints to be deployed");
      }
      for (      final CheckpointReplayResult ccr : checkpointResultList) {
        if (ccr.getReturnCode() == AbstractTaskResult.ReturnCode.ERROR) {
          LOG.error(ccr.getDescription());
        }
      }
    }
  }
;
  this.executorService.execute(deploymentRunnable);
}
