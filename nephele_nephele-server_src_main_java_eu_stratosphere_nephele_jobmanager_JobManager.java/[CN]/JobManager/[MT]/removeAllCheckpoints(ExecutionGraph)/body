{
  final JobStatus jobStatus=executionGraph.getJobStatus();
  if (jobStatus != JobStatus.FINISHED) {
    LOG.error("removeAllCheckpoints called for an unsuccesfull job, ignoring request");
  }
  final List<ExecutionVertex> verticesWithCheckpoints=executionGraph.getVerticesWithCheckpoints();
  final Map<AbstractInstance,SerializableArrayList<ExecutionVertexID>> instanceMap=new HashMap<AbstractInstance,SerializableArrayList<ExecutionVertexID>>();
  final Iterator<ExecutionVertex> it=verticesWithCheckpoints.iterator();
  while (it.hasNext()) {
    final ExecutionVertex vertex=it.next();
    final AllocatedResource allocatedResource=vertex.getAllocatedResource();
    if (allocatedResource == null) {
      continue;
    }
    final AbstractInstance abstractInstance=allocatedResource.getInstance();
    if (abstractInstance == null) {
      continue;
    }
    SerializableArrayList<ExecutionVertexID> vertexIDs=instanceMap.get(abstractInstance);
    if (vertexIDs == null) {
      vertexIDs=new SerializableArrayList<ExecutionVertexID>();
      instanceMap.put(abstractInstance,vertexIDs);
    }
    vertexIDs.add(vertex.getID());
  }
  final Iterator<Map.Entry<AbstractInstance,SerializableArrayList<ExecutionVertexID>>> it2=instanceMap.entrySet().iterator();
  while (it2.hasNext()) {
    final Map.Entry<AbstractInstance,SerializableArrayList<ExecutionVertexID>> entry=it2.next();
    final AbstractInstance abstractInstance=entry.getKey();
    if (abstractInstance == null) {
      LOG.error("Cannot remove checkpoint: abstractInstance is null");
      continue;
    }
    try {
      abstractInstance.removeCheckpoints(entry.getValue());
    }
 catch (    IOException ioe) {
      LOG.error(StringUtils.stringifyException(ioe));
    }
  }
}
