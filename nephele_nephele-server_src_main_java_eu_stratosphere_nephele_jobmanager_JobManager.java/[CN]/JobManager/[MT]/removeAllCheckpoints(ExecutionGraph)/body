{
  final Map<AbstractInstance,ArrayList<ExecutionVertexID>> instanceMap=new HashMap<AbstractInstance,ArrayList<ExecutionVertexID>>();
  final Iterator<ExecutionVertex> it=new ExecutionGraphIterator(executionGraph,true);
  while (it.hasNext()) {
    final ExecutionVertex vertex=it.next();
    final AllocatedResource allocatedResource=vertex.getAllocatedResource();
    if (allocatedResource == null) {
      continue;
    }
    final AbstractInstance abstractInstance=allocatedResource.getInstance();
    if (abstractInstance == null) {
      continue;
    }
    ArrayList<ExecutionVertexID> vertexIDs=instanceMap.get(abstractInstance);
    if (vertexIDs == null) {
      vertexIDs=new ArrayList<ExecutionVertexID>();
      instanceMap.put(abstractInstance,vertexIDs);
    }
    vertexIDs.add(vertex.getID());
  }
  final Iterator<Map.Entry<AbstractInstance,ArrayList<ExecutionVertexID>>> it2=instanceMap.entrySet().iterator();
  while (it2.hasNext()) {
    final Map.Entry<AbstractInstance,ArrayList<ExecutionVertexID>> entry=it2.next();
    final AbstractInstance abstractInstance=entry.getKey();
    if (abstractInstance == null) {
      LOG.error("Cannot remove checkpoint: abstractInstance is null");
      continue;
    }
    if (abstractInstance instanceof DummyInstance) {
      continue;
    }
    final Runnable runnable=new Runnable(){
      @Override public void run(){
        try {
          abstractInstance.removeCheckpoints(entry.getValue());
        }
 catch (        IOException ioe) {
          LOG.error(StringUtils.stringifyException(ioe));
        }
      }
    }
;
    this.executorService.execute(runnable);
  }
}
