{
  GlobalConfiguration.loadConfiguration(configDir);
  final String ipcAddressString=GlobalConfiguration.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null);
  InetAddress ipcAddress=null;
  if (ipcAddressString != null) {
    try {
      ipcAddress=InetAddress.getByName(ipcAddressString);
    }
 catch (    UnknownHostException e) {
      LOG.fatal("Cannot convert " + ipcAddressString + " to an IP address: "+ StringUtils.stringifyException(e));
      System.exit(FAILURERETURNCODE);
    }
  }
  final int ipcPort=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
  try {
    DiscoveryService.startDiscoveryService(ipcAddress,ipcPort);
  }
 catch (  DiscoveryException e) {
    LOG.fatal("Cannot start discovery manager: " + StringUtils.stringifyException(e));
    System.exit(FAILURERETURNCODE);
  }
  this.recommendedClientPollingInterval=GlobalConfiguration.getInteger("jobclient.polling.internval",5);
  this.eventCollector=new EventCollector(this.recommendedClientPollingInterval);
  this.inputSplitManager=new InputSplitManager();
  final InetSocketAddress rpcServerAddress=new InetSocketAddress(ipcAddress,ipcPort);
  RPCService rpcService=null;
  try {
    final int handlerCount=GlobalConfiguration.getInteger("jobmanager.rpc.numhandler",3);
    rpcService=new RPCService(rpcServerAddress.getPort(),handlerCount,ServerTypeUtils.getRPCTypesToRegister());
  }
 catch (  IOException ioe) {
    LOG.fatal("Cannot start RPC server: " + StringUtils.stringifyException(ioe));
    System.exit(FAILURERETURNCODE);
  }
  this.rpcService=rpcService;
  this.rpcService.setProtocolCallbackHandler(ChannelLookupProtocol.class,this);
  this.rpcService.setProtocolCallbackHandler(ExtendedManagementProtocol.class,this);
  this.rpcService.setProtocolCallbackHandler(InputSplitProviderProtocol.class,this);
  this.rpcService.setProtocolCallbackHandler(JobManagementProtocol.class,this);
  this.rpcService.setProtocolCallbackHandler(JobManagerProtocol.class,this);
  LOG.info("Starting job manager in " + executionMode + " mode");
  this.jobManagerPlugins=PluginManager.getJobManagerPlugins(configDir);
  if ("local".equals(executionMode)) {
    try {
      this.instanceManager=new LocalInstanceManager(configDir,this.rpcService);
    }
 catch (    RuntimeException rte) {
      LOG.fatal("Cannot instantiate local instance manager: " + StringUtils.stringifyException(rte));
      System.exit(FAILURERETURNCODE);
    }
  }
 else {
    final String instanceManagerClassName=JobManagerUtils.getInstanceManagerClassName(executionMode);
    LOG.info("Trying to load " + instanceManagerClassName + " as instance manager");
    this.instanceManager=JobManagerUtils.loadInstanceManager(instanceManagerClassName,this.rpcService);
    if (this.instanceManager == null) {
      LOG.fatal("Unable to load instance manager " + instanceManagerClassName);
      System.exit(FAILURERETURNCODE);
    }
  }
  final String schedulerClassName=JobManagerUtils.getSchedulerClassName(executionMode);
  LOG.info("Trying to load " + schedulerClassName + " as scheduler");
  this.scheduler=JobManagerUtils.loadScheduler(schedulerClassName,this,this.instanceManager);
  if (this.scheduler == null) {
    LOG.fatal("Unable to load scheduler " + schedulerClassName);
    System.exit(FAILURERETURNCODE);
  }
  this.multicastManager=new MulticastManager(this.scheduler);
  if (GlobalConfiguration.getBoolean(ProfilingUtils.ENABLE_PROFILING_KEY,false)) {
    final String profilerClassName=GlobalConfiguration.getString(ProfilingUtils.JOBMANAGER_CLASSNAME_KEY,null);
    if (profilerClassName == null) {
      LOG.fatal("Cannot find class name for the profiler");
      System.exit(FAILURERETURNCODE);
    }
    this.profiler=ProfilingUtils.loadJobManagerProfiler(profilerClassName,ipcAddress);
    if (this.profiler == null) {
      LOG.fatal("Cannot load profiler");
      System.exit(FAILURERETURNCODE);
    }
  }
 else {
    this.profiler=null;
    LOG.debug("Profiler disabled");
  }
  Runtime.getRuntime().addShutdownHook(new JobManagerCleanUp(this));
}
