{
  GlobalConfiguration.loadConfiguration(configDir);
  final String ipcAddressString=GlobalConfiguration.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null);
  InetAddress ipcAddress=null;
  if (ipcAddressString != null) {
    try {
      ipcAddress=InetAddress.getByName(ipcAddressString);
    }
 catch (    UnknownHostException e) {
      LOG.error("Cannot convert " + ipcAddressString + " to an IP address: "+ StringUtils.stringifyException(e));
      System.exit(FAILURERETURNCODE);
    }
  }
  final int ipcPort=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
  try {
    DiscoveryService.startDiscoveryService(ipcAddress,ipcPort);
  }
 catch (  DiscoveryException e) {
    LOG.error("Cannot start discovery manager: " + StringUtils.stringifyException(e));
    System.exit(FAILURERETURNCODE);
  }
  this.recommendedClientPollingInterval=GlobalConfiguration.getInteger("jobclient.polling.internval",5);
  final InetSocketAddress rpcServerAddress=new InetSocketAddress(ipcAddress,ipcPort);
  try {
    final int handlerCount=GlobalConfiguration.getInteger("jobmanager.rpc.numhandler",3);
    this.jobManagerServer=RPC.getServer(this,rpcServerAddress.getHostName(),rpcServerAddress.getPort(),handlerCount,false);
    this.jobManagerServer.start();
  }
 catch (  IOException ioe) {
    LOG.error("Cannot start RPC server: " + StringUtils.stringifyException(ioe));
    System.exit(FAILURERETURNCODE);
  }
  LOG.info("Starting job manager in " + executionMode + " mode");
  if ("local".equals(executionMode)) {
    try {
      LibraryCacheManager.setLocalMode();
    }
 catch (    IOException e) {
      LOG.error(e);
    }
    this.instanceManager=new LocalInstanceManager(configDir);
  }
 else {
    final String instanceManagerClassName=JobManagerUtils.getInstanceManagerClassName(executionMode);
    LOG.info("Trying to load " + instanceManagerClassName + " as instance manager");
    this.instanceManager=JobManagerUtils.loadInstanceManager(instanceManagerClassName);
    if (this.instanceManager == null) {
      LOG.error("UNable to load instance manager " + instanceManagerClassName);
      System.exit(FAILURERETURNCODE);
    }
  }
  final String schedulerClassName=JobManagerUtils.getSchedulerClassName(executionMode);
  LOG.info("Trying to load " + schedulerClassName + " as scheduler");
  this.scheduler=JobManagerUtils.loadScheduler(schedulerClassName,this,this.instanceManager);
  if (this.scheduler == null) {
    LOG.error("Unable to load scheduler " + schedulerClassName);
    System.exit(FAILURERETURNCODE);
  }
  if (GlobalConfiguration.getBoolean(ProfilingUtils.ENABLE_PROFILING_KEY,false)) {
    final String profilerClassName=GlobalConfiguration.getString(ProfilingUtils.JOBMANAGER_CLASSNAME_KEY,null);
    if (profilerClassName == null) {
      LOG.error("Cannot find class name for the profiler");
      System.exit(FAILURERETURNCODE);
    }
    this.profiler=ProfilingUtils.loadJobManagerProfiler(profilerClassName,ipcAddress);
    if (this.profiler == null) {
      LOG.error("Cannot load profiler");
      System.exit(FAILURERETURNCODE);
    }
  }
 else {
    this.profiler=null;
    LOG.debug("Profiler disabled");
  }
  if (GlobalConfiguration.getBoolean("jobmanager.optimizer.enable",false)) {
    final String optimizerClassName=GlobalConfiguration.getString("jobmanager.optimizer.classname",null);
    if (optimizerClassName == null) {
      LOG.error("Cannot find class name for the optimizer");
      System.exit(FAILURERETURNCODE);
    }
    this.optimizer=loadOptimizer(optimizerClassName);
  }
 else {
    this.optimizer=null;
    LOG.debug("Optimizer disabled");
  }
  this.eventCollector=new EventCollector(this.recommendedClientPollingInterval);
  Runtime.getRuntime().addShutdownHook(new JobManagerCleanUp(this));
}
