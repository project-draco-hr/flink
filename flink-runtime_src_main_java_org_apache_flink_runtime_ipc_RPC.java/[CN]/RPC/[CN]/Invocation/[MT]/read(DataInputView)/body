{
  this.methodName=StringRecord.readString(in);
  this.parameters=new Object[in.readInt()];
  this.parameterClasses=new Class[parameters.length];
  for (int i=0; i < parameters.length; i++) {
    final String className=StringRecord.readString(in);
    try {
      parameterClasses[i]=ClassUtils.resolveClassPrimitiveAware(className);
    }
 catch (    ClassNotFoundException e) {
      throw new IOException(e);
    }
    if (in.readBoolean()) {
      IOReadableWritable value;
      try {
        final String parameterClassName=StringRecord.readString(in);
        final Class<? extends IOReadableWritable> parameterClass=(Class<? extends IOReadableWritable>)ClassUtils.resolveClassPrimitiveAware(parameterClassName);
        value=parameterClass.newInstance();
        parameters[i]=value;
      }
 catch (      Exception e) {
        throw new IOException(e);
      }
      value.read(in);
    }
 else {
      parameters[i]=null;
    }
  }
}
