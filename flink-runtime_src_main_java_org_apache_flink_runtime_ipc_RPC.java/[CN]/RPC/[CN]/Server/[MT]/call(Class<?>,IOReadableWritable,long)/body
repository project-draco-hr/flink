{
  try {
    final Invocation call=(Invocation)param;
    call.undoTypeConversion();
    final Method method=protocol.getMethod(call.getMethodName(),call.getParameterClasses());
    method.setAccessible(true);
    final Object value=method.invoke((Object)instance,(Object[])call.getParameters());
    final Class<?> retType=method.getReturnType();
    if (value == null || retType == null || retType == void.class || retType == Void.class) {
      return null;
    }
    if (ClassUtils.isPrimitiveOrBoxedOrString(method.getReturnType())) {
      return JavaToValueConverter.convertBoxedJavaType(value);
    }
 else     if (value instanceof IOReadableWritable) {
      return (IOReadableWritable)value;
    }
 else {
      throw new IOException("The return type of method " + method.getName() + " is not a primitive type (or boxed primitive) and not of type IOReadableWriteable");
    }
  }
 catch (  InvocationTargetException e) {
    final Throwable target=e.getTargetException();
    if (target instanceof IOException) {
      throw (IOException)target;
    }
 else {
      final IOException ioe=new IOException(target.toString());
      ioe.setStackTrace(target.getStackTrace());
      throw ioe;
    }
  }
catch (  Throwable e) {
    final IOException ioe=new IOException(e.toString());
    ioe.setStackTrace(e.getStackTrace());
    throw ioe;
  }
}
