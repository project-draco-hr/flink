{
  RandomGenerator rng=blockInfo.getRandomGenerable().generator();
  long edgesToGenerate=blockInfo.getElementCount();
  while (edgesToGenerate > 0) {
    long x=0;
    long y=0;
    float a=A;
    float b=B;
    float c=C;
    float d=D;
    for (int bit=0; bit < scale; bit++) {
      x<<=1;
      y<<=1;
      float random=rng.nextFloat();
      if (random <= a) {
      }
 else       if (random <= a + b) {
        y+=1;
      }
 else       if (random <= a + b + c) {
        x+=1;
      }
 else {
        x+=1;
        y+=1;
      }
      if (noiseEnabled) {
        a*=1.0 - noise / 2 + rng.nextFloat() * noise;
        b*=1.0 - noise / 2 + rng.nextFloat() * noise;
        c*=1.0 - noise / 2 + rng.nextFloat() * noise;
        d*=1.0 - noise / 2 + rng.nextFloat() * noise;
        float norm=1.0f / (a + b + c+ d);
        a*=norm;
        b*=norm;
        c*=norm;
        d=1.0f - a - b- c;
      }
    }
    if (x < vertexCount && y < vertexCount) {
      source.setValue(x);
      target.setValue(y);
      if (simpleGraph) {
        if ((clipAndFlip && x > y) || (!clipAndFlip && x != y)) {
          out.collect(sourceToTarget);
          out.collect(targetToSource);
        }
      }
 else {
        out.collect(sourceToTarget);
      }
      edgesToGenerate--;
    }
  }
}
