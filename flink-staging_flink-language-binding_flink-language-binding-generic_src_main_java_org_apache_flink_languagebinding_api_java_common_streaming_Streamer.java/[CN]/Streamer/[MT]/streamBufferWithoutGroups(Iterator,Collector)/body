{
  try {
    int size;
    if (i.hasNext()) {
      while (true) {
        socket.receive(packet);
        int sig=getInt(buffer,0);
switch (sig) {
case SIGNAL_BUFFER_REQUEST:
          if (i.hasNext() || sender.hasRemaining(0)) {
            size=sender.sendBuffer(i,0);
            sendWriteNotification(size,sender.hasRemaining(0) || i.hasNext());
          }
        break;
case SIGNAL_FINISHED:
      return;
case SIGNAL_ERROR:
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException ex) {
    }
  throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error."+ msg);
default :
receiver.collectBuffer(c,sig);
sendReadConfirmation();
break;
}
}
}
}
 catch (SocketTimeoutException ste) {
throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding."+ msg);
}
}
