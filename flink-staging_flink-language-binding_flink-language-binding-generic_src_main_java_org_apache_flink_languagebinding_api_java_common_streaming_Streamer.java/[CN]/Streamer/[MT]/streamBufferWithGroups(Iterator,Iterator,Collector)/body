{
  try {
    int size;
    if (i1.hasNext() || i2.hasNext()) {
      while (true) {
        socket.receive(packet);
        int sig=getInt(buffer,0);
switch (sig) {
case SIGNAL_BUFFER_REQUEST_G0:
          if (i1.hasNext() || sender.hasRemaining(0)) {
            size=sender.sendBuffer(i1,0);
            sendWriteNotification(size,sender.hasRemaining(0) || i1.hasNext());
          }
        break;
case SIGNAL_BUFFER_REQUEST_G1:
      if (i2.hasNext() || sender.hasRemaining(1)) {
        size=sender.sendBuffer(i2,1);
        sendWriteNotification(size,sender.hasRemaining(1) || i2.hasNext());
      }
    break;
case SIGNAL_FINISHED:
  return;
case SIGNAL_ERROR:
try {
  Thread.sleep(2000);
}
 catch (InterruptedException ex) {
}
throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error."+ msg);
default :
receiver.collectBuffer(c,sig);
sendReadConfirmation();
break;
}
}
}
}
 catch (SocketTimeoutException ste) {
throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding."+ msg);
}
}
