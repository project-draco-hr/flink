{
  DataSet<Tuple2<K,K>> filteredByID=input.getEdges().flatMap(new FilterByID<K,EV>()).setParallelism(littleParallelism).name("Filter by ID");
  DataSet<Edge<K,Tuple3<EV,LongValue,LongValue>>> pairDegree=input.run(new EdgeDegreePair<K,VV,EV>().setParallelism(littleParallelism));
  DataSet<Tuple2<K,K>> filteredByDegree=pairDegree.flatMap(new FilterByDegree<K,EV>()).setParallelism(littleParallelism).name("Filter by degree");
  DataSet<Tuple3<K,K,K>> triplets=filteredByDegree.groupBy(0).sortGroup(1,Order.ASCENDING).reduceGroup(new GenerateTriplets<K>()).setParallelism(littleParallelism).name("Generate triplets");
  DataSet<Tuple3<K,K,K>> triangles=triplets.join(filteredByID,JoinOperatorBase.JoinHint.REPARTITION_HASH_SECOND).where(1,2).equalTo(0,1).with(new ProjectTriangles<K>()).setParallelism(littleParallelism).name("Triangle listing");
  if (sortTriangleVertices) {
    triangles=triangles.map(new SortTriangleVertices<K>()).name("Sort triangle vertices");
  }
  return triangles;
}
