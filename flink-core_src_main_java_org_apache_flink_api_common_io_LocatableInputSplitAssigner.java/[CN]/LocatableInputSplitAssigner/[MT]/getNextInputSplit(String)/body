{
  if (host == null) {
synchronized (this.remoteSplitChooser) {
synchronized (this.unassigned) {
        LocatableInputSplitWithCount split=this.remoteSplitChooser.getNextUnassignedMinLocalCountSplit(this.unassigned);
        if (split != null) {
          if (this.unassigned.remove(split)) {
            if (LOG.isInfoEnabled()) {
              LOG.info("Assigning split to null host (random assignment).");
            }
            remoteAssignments++;
            return split.getSplit();
          }
 else {
            throw new IllegalStateException("Chosen InputSplit has already been assigned. This should not happen!");
          }
        }
 else {
          if (LOG.isDebugEnabled()) {
            LOG.debug("No more unassigned input splits remaining.");
          }
          return null;
        }
      }
    }
  }
  host=host.toLowerCase(Locale.US);
  LocatableInputSplitChooser localSplits=this.localPerHost.get(host);
  if (localSplits == null) {
    localSplits=new LocatableInputSplitChooser();
synchronized (localSplits) {
      LocatableInputSplitChooser prior=this.localPerHost.putIfAbsent(host,localSplits);
      if (prior == null) {
        LocatableInputSplitWithCount[] remaining;
synchronized (this.unassigned) {
          remaining=this.unassigned.toArray(new LocatableInputSplitWithCount[this.unassigned.size()]);
        }
        for (        LocatableInputSplitWithCount isw : remaining) {
          if (isLocal(host,isw.getSplit().getHostnames())) {
            isw.incrementLocalCount();
            localSplits.addInputSplit(isw);
          }
        }
      }
 else {
        localSplits=prior;
      }
    }
  }
synchronized (localSplits) {
synchronized (this.unassigned) {
      LocatableInputSplitWithCount split=localSplits.getNextUnassignedMinLocalCountSplit(this.unassigned);
      if (split != null) {
        if (this.unassigned.remove(split)) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Assigning local split to host " + host);
          }
          localAssignments++;
          return split.getSplit();
        }
 else {
          throw new IllegalStateException("Chosen InputSplit has already been assigned. This should not happen!");
        }
      }
    }
  }
synchronized (this.remoteSplitChooser) {
synchronized (this.unassigned) {
      LocatableInputSplitWithCount split=this.remoteSplitChooser.getNextUnassignedMinLocalCountSplit(this.unassigned);
      if (split != null) {
        if (this.unassigned.remove(split)) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Assigning remote split to host " + host);
          }
          remoteAssignments++;
          return split.getSplit();
        }
 else {
          throw new IllegalStateException("Chosen InputSplit has already been assigned. This should not happen!");
        }
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("No more input splits remaining.");
        }
        return null;
      }
    }
  }
}
