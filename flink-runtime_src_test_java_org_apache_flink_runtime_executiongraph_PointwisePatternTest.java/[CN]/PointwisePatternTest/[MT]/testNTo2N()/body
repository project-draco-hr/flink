{
  final int N=41;
  JobVertex v1=new JobVertex("vertex1");
  JobVertex v2=new JobVertex("vertex2");
  v1.setParallelism(N);
  v2.setParallelism(2 * N);
  v2.connectNewDataSetAsInput(v1,DistributionPattern.POINTWISE);
  List<JobVertex> ordered=new ArrayList<JobVertex>(Arrays.asList(v1,v2));
  ExecutionGraph eg=new ExecutionGraph(TestingUtils.defaultExecutionContext(),jobId,jobName,cfg,new SerializedValue<>(new ExecutionConfig()),AkkaUtils.getDefaultTimeout(),new NoRestartStrategy());
  try {
    eg.attachJobGraph(ordered);
  }
 catch (  JobException e) {
    e.printStackTrace();
    fail("Job failed with exception: " + e.getMessage());
  }
  ExecutionJobVertex target=eg.getAllVertices().get(v2.getID());
  for (  ExecutionVertex ev : target.getTaskVertices()) {
    assertEquals(1,ev.getNumberOfInputs());
    ExecutionEdge[] inEdges=ev.getInputEdges(0);
    assertEquals(1,inEdges.length);
    assertEquals(ev.getParallelSubtaskIndex() / 2,inEdges[0].getSource().getPartitionNumber());
  }
}
