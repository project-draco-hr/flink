{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  env.setBufferTimeout(1);
  TestListResultSink<Tuple2<Tuple2<Integer,String>,Integer>> joinResultSink=new TestListResultSink<Tuple2<Tuple2<Integer,String>,Integer>>();
  TestListResultSink<Tuple2<Tuple2<Integer,String>,Integer>> crossResultSink=new TestListResultSink<Tuple2<Tuple2<Integer,String>,Integer>>();
  ArrayList<Tuple2<Integer,String>> in1=new ArrayList<Tuple2<Integer,String>>();
  ArrayList<Tuple1<Integer>> in2=new ArrayList<Tuple1<Integer>>();
  in1.add(new Tuple2<Integer,String>(10,"a"));
  in1.add(new Tuple2<Integer,String>(20,"b"));
  in1.add(new Tuple2<Integer,String>(20,"x"));
  in1.add(new Tuple2<Integer,String>(0,"y"));
  in2.add(new Tuple1<Integer>(0));
  in2.add(new Tuple1<Integer>(5));
  in2.add(new Tuple1<Integer>(20));
  joinExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(20,"b"),20));
  joinExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(20,"x"),20));
  joinExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(0,"y"),0));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(10,"a"),0));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(10,"a"),5));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(10,"a"),20));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(20,"b"),0));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(20,"b"),5));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(20,"b"),20));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(20,"x"),0));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(20,"x"),5));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(20,"x"),20));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(0,"y"),0));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(0,"y"),5));
  crossExpectedResults.add(new Tuple2<Tuple2<Integer,String>,Integer>(new Tuple2<Integer,String>(0,"y"),20));
  DataStream<Tuple2<Integer,String>> inStream1=env.fromCollection(in1);
  DataStream<Tuple1<Integer>> inStream2=env.fromCollection(in2);
  inStream1.join(inStream2).onWindow(1000,new MyTimestamp<Tuple2<Integer,String>>(),new MyTimestamp<Tuple1<Integer>>(),100).where(0).equalTo(0).map(new ResultMap()).addSink(joinResultSink);
  inStream1.cross(inStream2).onWindow(1000,new MyTimestamp<Tuple2<Integer,String>>(),new MyTimestamp<Tuple1<Integer>>(),100).with(new CrossFunction<Tuple2<Integer,String>,Tuple1<Integer>,Tuple2<Tuple2<Integer,String>,Tuple1<Integer>>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<Tuple2<Integer,String>,Tuple1<Integer>> cross(    Tuple2<Integer,String> val1,    Tuple1<Integer> val2) throws Exception {
      return new Tuple2<Tuple2<Integer,String>,Tuple1<Integer>>(val1,val2);
    }
  }
).map(new ResultMap()).addSink(crossResultSink);
  env.execute();
  assertEquals(new HashSet<Tuple2<Tuple2<Integer,String>,Integer>>(joinExpectedResults),new HashSet<Tuple2<Tuple2<Integer,String>,Integer>>(joinResultSink.getResult()));
  assertEquals(new HashSet<Tuple2<Tuple2<Integer,String>,Integer>>(crossExpectedResults),new HashSet<Tuple2<Tuple2<Integer,String>,Integer>>(crossResultSink.getResult()));
}
