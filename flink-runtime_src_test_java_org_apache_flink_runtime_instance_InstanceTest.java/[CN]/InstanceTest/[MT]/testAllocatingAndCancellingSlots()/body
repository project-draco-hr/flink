{
  try {
    HardwareDescription hardwareDescription=new HardwareDescription(4,2L * 1024 * 1024* 1024,1024 * 1024 * 1024,512 * 1024 * 1024);
    InetAddress address=InetAddress.getByName("127.0.0.1");
    InstanceConnectionInfo connection=new InstanceConnectionInfo(address,10001);
    Instance instance=new Instance(DummyActorGateway.INSTANCE,connection,new InstanceID(),hardwareDescription,4);
    assertEquals(4,instance.getTotalNumberOfSlots());
    assertEquals(4,instance.getNumberOfAvailableSlots());
    assertEquals(0,instance.getNumberOfAllocatedSlots());
    SimpleSlot slot1=instance.allocateSimpleSlot(new JobID());
    SimpleSlot slot2=instance.allocateSimpleSlot(new JobID());
    SimpleSlot slot3=instance.allocateSimpleSlot(new JobID());
    SimpleSlot slot4=instance.allocateSimpleSlot(new JobID());
    assertNotNull(slot1);
    assertNotNull(slot2);
    assertNotNull(slot3);
    assertNotNull(slot4);
    assertEquals(0,instance.getNumberOfAvailableSlots());
    assertEquals(4,instance.getNumberOfAllocatedSlots());
    assertEquals(6,slot1.getSlotNumber() + slot2.getSlotNumber() + slot3.getSlotNumber()+ slot4.getSlotNumber());
    assertNull(instance.allocateSimpleSlot(new JobID()));
    try {
      instance.returnAllocatedSlot(slot2);
      fail("instance accepted a non-cancelled slot.");
    }
 catch (    IllegalArgumentException e) {
    }
    slot1.releaseSlot();
    slot2.releaseSlot();
    slot3.releaseSlot();
    slot4.releaseSlot();
    assertEquals(4,instance.getNumberOfAvailableSlots());
    assertEquals(0,instance.getNumberOfAllocatedSlots());
    assertFalse(instance.returnAllocatedSlot(slot1));
    assertFalse(instance.returnAllocatedSlot(slot2));
    assertFalse(instance.returnAllocatedSlot(slot3));
    assertFalse(instance.returnAllocatedSlot(slot4));
    assertEquals(4,instance.getNumberOfAvailableSlots());
    assertEquals(0,instance.getNumberOfAllocatedSlots());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
