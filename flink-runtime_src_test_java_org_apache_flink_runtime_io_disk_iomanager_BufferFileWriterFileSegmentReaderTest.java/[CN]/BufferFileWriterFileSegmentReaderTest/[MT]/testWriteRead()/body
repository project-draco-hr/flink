{
  int numBuffers=1024;
  int currentNumber=0;
  final int minBufferSize=BUFFER_SIZE / 4;
  for (int i=0; i < numBuffers; i++) {
    final Buffer buffer=createBuffer();
    int size=getNextMultipleOf(getRandomNumberInRange(minBufferSize,BUFFER_SIZE),4);
    buffer.setSize(size);
    currentNumber=fillBufferWithAscendingNumbers(buffer,currentNumber);
    writer.writeBlock(buffer);
  }
  writer.close();
  for (int i=0; i < numBuffers; i++) {
    assertFalse(reader.hasReachedEndOfFile());
    reader.read();
  }
  final CountDownLatch sync=new CountDownLatch(1);
  final NotificationListener listener=new NotificationListener(){
    @Override public void onNotification(){
      sync.countDown();
    }
  }
;
  if (reader.registerAllRequestsProcessedListener(listener)) {
    sync.await();
  }
  assertTrue(reader.hasReachedEndOfFile());
  assertEquals("Read less buffers than written.",numBuffers,returnedFileSegments.size());
  currentNumber=0;
  FileSegment fileSegment;
  ByteBuffer buffer=ByteBuffer.allocate(BUFFER_SIZE);
  while ((fileSegment=returnedFileSegments.poll()) != null) {
    buffer.position(0);
    buffer.limit(fileSegment.getLength());
    fileSegment.getFileChannel().read(buffer,fileSegment.getPosition());
    currentNumber=verifyBufferFilledWithAscendingNumbers(new Buffer(MemorySegmentFactory.wrap(buffer.array()),BUFFER_RECYCLER),currentNumber,fileSegment.getLength());
  }
  reader.close();
}
