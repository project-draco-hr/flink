{
  final SopremoPlan actualPlan=this.parseScript("using cleansing;\n" + "$sponsors = read hdfs('EarmarkSponsors.json');\n" + "$members = read hdfs('CongressMembers.json');\n"+ "$linkedPersons = cluster records\n"+ "		$sponsor in $sponsors, $member in $members\n"+ "	where jaccard($.lastName) >= 0.9 &&\n"+ "		[ 5 * jaroWinkler($.firstName),\n"+ "		  5 * jaroWinkler($.lastName)] >= 0.8\n"+ "	partition on \n"+ "		[ removeVowels($.lastName)[0:3],\n"+ "		  $.state + $.firstName[0:2] ]\n"+ "	into { $sponsor, $member  };\n"+ "write $linkedPersons to hdfs('Links.json');");
  final SopremoPlan expectedPlan=new SopremoPlan();
  final Source input=new Source("input.json");
  final Selection selection=new Selection().withCondition(new OrExpression(new UnaryExpression(JsonUtil.createPath("$","mgr")),new ComparativeExpression(JsonUtil.createPath("$","income"),BinaryOperator.GREATER,new ConstantExpression(30000)))).withInputs(input);
  final Sink output=new Sink("output.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
