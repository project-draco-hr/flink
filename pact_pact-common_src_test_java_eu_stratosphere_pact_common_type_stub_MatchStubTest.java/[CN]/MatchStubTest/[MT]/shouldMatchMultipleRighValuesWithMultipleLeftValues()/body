{
  when(valueIteratorMock1.hasNext()).thenReturn(true,true,true,true,false);
  when(valueIteratorMock1.next()).thenReturn(leftValue,leftValue2,leftValue3,leftValue4);
  when(valueIteratorMock2.hasNext()).thenReturn(true,true,true,true,false);
  when(valueIteratorMock2.next()).thenReturn(rightValue,rightValue2,rightValue3,rightValue4);
  this.matcher.run(null,valueIteratorMock1,valueIteratorMock2,collectorMock);
  assertThat(this.matcher.matchCount,is(equalTo(16)));
  assertThat(this.matcher.matchPairs.size(),is(equalTo(16)));
  List<TupleMock> firstPair=this.matcher.matchPairs.get(0);
  assertThat(firstPair.get(0),is(equalTo(leftValue)));
  assertThat(firstPair.get(1),is(equalTo(rightValue)));
  List<TupleMock> secondPair=this.matcher.matchPairs.get(1);
  assertThat(secondPair.get(0),is(equalTo(leftValue2)));
  assertThat(secondPair.get(1),is(equalTo(rightValue)));
  List<TupleMock> thirdPair=this.matcher.matchPairs.get(2);
  assertThat(thirdPair.get(0),is(equalTo(leftValue3)));
  assertThat(thirdPair.get(1),is(equalTo(rightValue)));
  List<TupleMock> fourthPair=this.matcher.matchPairs.get(3);
  assertThat(fourthPair.get(0),is(equalTo(leftValue4)));
  assertThat(fourthPair.get(1),is(equalTo(rightValue)));
  List<TupleMock> fifthPair=this.matcher.matchPairs.get(4);
  assertThat(fifthPair.get(0),is(equalTo(leftValue)));
  assertThat(fifthPair.get(1),is(equalTo(rightValue2)));
  List<TupleMock> sixthPair=this.matcher.matchPairs.get(5);
  assertThat(sixthPair.get(0),is(equalTo(leftValue2)));
  assertThat(sixthPair.get(1),is(equalTo(rightValue2)));
  List<TupleMock> seventhPair=this.matcher.matchPairs.get(6);
  assertThat(seventhPair.get(0),is(equalTo(leftValue3)));
  assertThat(seventhPair.get(1),is(equalTo(rightValue2)));
  List<TupleMock> eighthPair=this.matcher.matchPairs.get(7);
  assertThat(eighthPair.get(0),is(equalTo(leftValue4)));
  assertThat(eighthPair.get(1),is(equalTo(rightValue2)));
  List<TupleMock> ninethPair=this.matcher.matchPairs.get(8);
  assertThat(ninethPair.get(0),is(equalTo(leftValue)));
  assertThat(ninethPair.get(1),is(equalTo(rightValue3)));
  List<TupleMock> tenthPair=this.matcher.matchPairs.get(9);
  assertThat(tenthPair.get(0),is(equalTo(leftValue2)));
  assertThat(tenthPair.get(1),is(equalTo(rightValue3)));
  List<TupleMock> eleventhPair=this.matcher.matchPairs.get(10);
  assertThat(eleventhPair.get(0),is(equalTo(leftValue3)));
  assertThat(eleventhPair.get(1),is(equalTo(rightValue3)));
  List<TupleMock> twelvethPair=this.matcher.matchPairs.get(11);
  assertThat(twelvethPair.get(0),is(equalTo(leftValue4)));
  assertThat(twelvethPair.get(1),is(equalTo(rightValue3)));
  List<TupleMock> thirteenthPair=this.matcher.matchPairs.get(12);
  assertThat(thirteenthPair.get(0),is(equalTo(leftValue)));
  assertThat(thirteenthPair.get(1),is(equalTo(rightValue4)));
  List<TupleMock> fourteenthPair=this.matcher.matchPairs.get(13);
  assertThat(fourteenthPair.get(0),is(equalTo(leftValue2)));
  assertThat(fourteenthPair.get(1),is(equalTo(rightValue4)));
  List<TupleMock> fifteenthPair=this.matcher.matchPairs.get(14);
  assertThat(fifteenthPair.get(0),is(equalTo(leftValue3)));
  assertThat(fifteenthPair.get(1),is(equalTo(rightValue4)));
  List<TupleMock> sixteenthPair=this.matcher.matchPairs.get(15);
  assertThat(sixteenthPair.get(0),is(equalTo(leftValue4)));
  assertThat(sixteenthPair.get(1),is(equalTo(rightValue4)));
}
