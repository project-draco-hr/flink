{
  WorksetConnectedComponentsWithCoGroup cc=new WorksetConnectedComponentsWithCoGroup();
  Plan plan=cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),IN_FILE,IN_FILE,OUT_FILE,String.valueOf(100));
  OptimizedPlan optPlan=compileNoStats(plan);
  OptimizerPlanNodeResolver or=getOptimizerPlanNodeResolver(optPlan);
  if (PRINT_PLAN) {
    PlanJSONDumpGenerator dumper=new PlanJSONDumpGenerator();
    String json=dumper.getOptimizerPlanAsJSON(optPlan);
    System.out.println(json);
  }
  SourcePlanNode vertexSource=or.getNode(VERTEX_SOURCE);
  SourcePlanNode edgesSource=or.getNode(EDGES_SOURCE);
  SinkPlanNode sink=or.getNode(SINK);
  WorksetIterationPlanNode iter=or.getNode(ITERATION_NAME);
  DualInputPlanNode neighborsJoin=or.getNode(JOIN_NEIGHBORS_MATCH);
  DualInputPlanNode cogroup=or.getNode(MIN_ID_AND_UPDATE);
  Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy());
  Assert.assertEquals(DriverStrategy.NONE,vertexSource.getDriverStrategy());
  Assert.assertEquals(DriverStrategy.NONE,edgesSource.getDriverStrategy());
  Assert.assertEquals(set0,neighborsJoin.getKeysForInput1());
  Assert.assertEquals(set0,neighborsJoin.getKeysForInput2());
  Assert.assertEquals(set0,cogroup.getKeysForInput1());
  Assert.assertEquals(set0,cogroup.getKeysForInput2());
  Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy());
  Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialSolutionSetInput().getShipStrategy());
  Assert.assertEquals(set0,iter.getInitialSolutionSetInput().getShipStrategyKeys());
  Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iter.getInitialWorksetInput().getShipStrategy());
  Assert.assertEquals(set0,iter.getInitialWorksetInput().getShipStrategyKeys());
  Assert.assertEquals(ShipStrategyType.FORWARD,neighborsJoin.getInput1().getShipStrategy());
  Assert.assertEquals(ShipStrategyType.PARTITION_HASH,neighborsJoin.getInput2().getShipStrategy());
  Assert.assertEquals(set0,neighborsJoin.getInput2().getShipStrategyKeys());
  Assert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());
  Assert.assertEquals(ShipStrategyType.PARTITION_HASH,cogroup.getInput1().getShipStrategy());
  Assert.assertEquals(ShipStrategyType.FORWARD,cogroup.getInput2().getShipStrategy());
  Assert.assertEquals(LocalStrategy.NONE,sink.getInput().getLocalStrategy());
  Assert.assertEquals(LocalStrategy.NONE,iter.getInitialSolutionSetInput().getLocalStrategy());
  Assert.assertEquals(LocalStrategy.NONE,neighborsJoin.getInput1().getLocalStrategy());
  Assert.assertEquals(LocalStrategy.NONE,neighborsJoin.getInput2().getLocalStrategy());
  Assert.assertEquals(LocalStrategy.SORT,cogroup.getInput1().getLocalStrategy());
  Assert.assertEquals(LocalStrategy.NONE,cogroup.getInput2().getLocalStrategy());
  Assert.assertTrue(TempMode.PIPELINE_BREAKER == iter.getInitialWorksetInput().getTempMode() || LocalStrategy.SORT == iter.getInitialWorksetInput().getLocalStrategy());
  NepheleJobGraphGenerator jgg=new NepheleJobGraphGenerator();
  jgg.compileJobGraph(optPlan);
}
