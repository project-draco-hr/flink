{
  final AccessibleConcurrentHashMap<Integer,ParallelTriangleEntry> map=this.map;
  final Iterator<Map.Entry<Integer,ParallelTriangleEntry>> entryIter=this.entryIter;
  while (entryIter.hasNext()) {
    final Map.Entry<Integer,ParallelTriangleEntry> kv=entryIter.next();
    final ParallelTriangleEntry entry=kv.getValue();
    final int key=kv.getKey().intValue();
    final int degree=entry.size();
    for (int i=0; i < degree; i++) {
      final int toNotifyId=entry.getId(i);
      final int toNotifyDegree=entry.getDegree(i);
      if (toNotifyDegree < degree || (toNotifyDegree == degree && toNotifyId > key))       continue;
      final ParallelTriangleEntry toNotify=map.get(Integer.valueOf(toNotifyId));
      toNotify.addTriangles(entry.getAllIds(),i,key,toNotifyId,out);
    }
  }
  out.close();
}
