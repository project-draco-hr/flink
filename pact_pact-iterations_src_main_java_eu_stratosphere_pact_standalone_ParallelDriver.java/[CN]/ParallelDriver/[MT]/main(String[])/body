{
  final int numThreads=Integer.parseInt(args[0]);
  final String[] filePaths=args[1].split(";");
  for (  String path : filePaths) {
    System.out.println("Using file '" + path + "'");
  }
  final long totalStart=System.nanoTime();
  final AccessibleConcurrentHashMap<Integer,ParallelTriangleEntry> map=new AccessibleConcurrentHashMap<Integer,ParallelTriangleEntry>(900000,0.85f,numThreads * 4);
  final Task[] tasks=new Task[numThreads];
{
    long readingStart=System.nanoTime();
    if (filePaths.length == numThreads) {
      for (int i=0; i < tasks.length; i++) {
        tasks[i]=new ReadAndBuildTask(map,filePaths[i],i);
      }
      runTasks(tasks);
    }
 else {
      Task[] t=new Task[filePaths.length];
      for (int i=0; i < t.length; i++) {
        t[i]=new ReadAndBuildTask(map,filePaths[i],i);
      }
      runTasks(t);
    }
    long readingElapsed=System.nanoTime() - readingStart;
    System.out.println("Reading took: " + (readingElapsed / 1000000) + "msecs");
  }
{
    long sortingStart=System.nanoTime();
    final Iterator<Map.Entry<Integer,ParallelTriangleEntry>>[] iters=map.getIterators(numThreads);
    for (int i=0; i < tasks.length; i++) {
      tasks[i]=new FinalizingTask(iters[i],i);
    }
    runTasks(tasks);
    long sortingElapsed=System.nanoTime() - sortingStart;
    System.out.println("Finalizing took: " + (sortingElapsed / 1000000) + "msecs");
  }
{
    long degreeComputationStart=System.nanoTime();
    final Iterator<Map.Entry<Integer,ParallelTriangleEntry>>[] iters=map.getIterators(numThreads);
    for (int i=0; i < tasks.length; i++) {
      tasks[i]=new DegreeComputationTask(map,iters[i],i);
    }
    runTasks(tasks);
    long degreeComputationElapsed=System.nanoTime() - degreeComputationStart;
    System.out.println("Degree computation took: " + (degreeComputationElapsed / 1000000) + "msecs");
  }
{
    long enumerationStart=System.nanoTime();
    final Iterator<Map.Entry<Integer,ParallelTriangleEntry>>[] iters=map.getIterators(numThreads);
    for (int i=0; i < tasks.length; i++) {
      tasks[i]=new BuildTrianglesTask(map,iters[i],i);
    }
    runTasks(tasks);
    long enumerationElapsed=System.nanoTime() - enumerationStart;
    System.out.println("Enumeration took: " + (enumerationElapsed / 1000000) + "msecs");
  }
{
    long countingStart=System.nanoTime();
    long numTriangles=0;
    Iterator<Map.Entry<Integer,ParallelTriangleEntry>> entryIter=map.entrySet().iterator();
    while (entryIter.hasNext()) {
      final Map.Entry<Integer,ParallelTriangleEntry> kv=entryIter.next();
      numTriangles+=kv.getValue().getNumTriangles();
    }
    long countingElapsed=System.nanoTime() - countingStart;
    System.out.println("Triangle Counting took: " + (countingElapsed / 1000000) + "msecs");
    System.out.println("FOUND " + numTriangles + " TRIANGLES.");
  }
  long totalElapsed=System.nanoTime() - totalStart;
  System.out.println("TOTAL TIME: " + (totalElapsed / 1000000) + "msecs");
}
