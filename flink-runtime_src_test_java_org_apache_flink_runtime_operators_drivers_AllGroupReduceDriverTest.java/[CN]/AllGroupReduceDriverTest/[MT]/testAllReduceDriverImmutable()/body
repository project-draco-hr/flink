{
  try {
    TestTaskContext<GroupReduceFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>,Tuple2<String,Integer>> context=new TestTaskContext<GroupReduceFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>,Tuple2<String,Integer>>();
    List<Tuple2<String,Integer>> data=DriverTestData.createReduceImmutableData();
    TypeInformation<Tuple2<String,Integer>> typeInfo=TypeExtractor.getForObject(data.get(0));
    MutableObjectIterator<Tuple2<String,Integer>> input=new RegularToMutableObjectIterator<Tuple2<String,Integer>>(data.iterator(),typeInfo.createSerializer(new ExecutionConfig()));
    GatheringCollector<Tuple2<String,Integer>> result=new GatheringCollector<Tuple2<String,Integer>>(typeInfo.createSerializer(new ExecutionConfig()));
    context.setDriverStrategy(DriverStrategy.ALL_GROUP_REDUCE);
    context.setInput1(input,typeInfo.createSerializer(new ExecutionConfig()));
    context.setCollector(result);
    context.setUdf(new ConcatSumReducer());
    AllGroupReduceDriver<Tuple2<String,Integer>,Tuple2<String,Integer>> driver=new AllGroupReduceDriver<Tuple2<String,Integer>,Tuple2<String,Integer>>();
    driver.setup(context);
    driver.prepare();
    driver.run();
    Tuple2<String,Integer> res=result.getList().get(0);
    char[] foundString=res.f0.toCharArray();
    Arrays.sort(foundString);
    char[] expectedString="abcddeeeffff".toCharArray();
    Arrays.sort(expectedString);
    Assert.assertArrayEquals(expectedString,foundString);
    Assert.assertEquals(78,res.f1.intValue());
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
