{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(4);
  env.disableOperatorChaining();
  DataStream<String> src=env.addSource(new NoOpSourceFunction()).name("source").uid("source");
  src.map(new NoOpMapFunction()).addSink(new NoOpSinkFunction()).name("sink0").uid("sink0");
  src.map(new NoOpMapFunction()).addSink(new NoOpSinkFunction()).name("sink1").uid("sink1");
  JobGraph jobGraph=env.getStreamGraph().getJobGraph();
  Set<JobVertexID> ids=new HashSet<>();
  for (  JobVertex vertex : jobGraph.getVertices()) {
    assertTrue(ids.add(vertex.getID()));
  }
  env=StreamExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(4);
  env.disableOperatorChaining();
  src=env.addSource(new NoOpSourceFunction()).map(new NoOpMapFunction()).name("source").uid("source");
  src.map(new NoOpMapFunction()).keyBy(new NoOpKeySelector()).reduce(new NoOpReduceFunction()).addSink(new NoOpSinkFunction()).name("sink0").uid("sink0");
  src.map(new NoOpMapFunction()).keyBy(new NoOpKeySelector()).reduce(new NoOpReduceFunction()).addSink(new NoOpSinkFunction()).name("sink1").uid("sink1");
  JobGraph newJobGraph=env.getStreamGraph().getJobGraph();
  assertNotEquals(jobGraph.getJobID(),newJobGraph.getJobID());
  for (  JobVertex vertex : newJobGraph.getVertices()) {
    if (vertex.getName().endsWith("source") || vertex.getName().endsWith("sink0") || vertex.getName().endsWith("sink1")) {
      assertTrue(ids.contains(vertex.getID()));
    }
  }
}
