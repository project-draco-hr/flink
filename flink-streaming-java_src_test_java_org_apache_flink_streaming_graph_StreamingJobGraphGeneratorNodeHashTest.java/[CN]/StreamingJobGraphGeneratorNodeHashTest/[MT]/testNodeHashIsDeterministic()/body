{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(4);
  DataStream<String> src0=env.addSource(new NoOpSourceFunction(),"src0").map(new NoOpMapFunction()).filter(new NoOpFilterFunction()).keyBy(new NoOpKeySelector()).reduce(new NoOpReduceFunction()).name("reduce");
  DataStream<String> src1=env.addSource(new NoOpSourceFunction(),"src1").filter(new NoOpFilterFunction());
  DataStream<String> src2=env.addSource(new NoOpSourceFunction(),"src2").filter(new NoOpFilterFunction());
  src0.map(new NoOpMapFunction()).union(src1,src2).addSink(new NoOpSinkFunction()).name("sink");
  JobGraph jobGraph=env.getStreamGraph().getJobGraph();
  final Map<JobVertexID,String> ids=rememberIds(jobGraph);
  env=StreamExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(4);
  src0=env.addSource(new NoOpSourceFunction(),"src0").map(new NoOpMapFunction()).filter(new NoOpFilterFunction()).keyBy(new NoOpKeySelector()).reduce(new NoOpReduceFunction()).name("reduce");
  src1=env.addSource(new NoOpSourceFunction(),"src1").filter(new NoOpFilterFunction());
  src2=env.addSource(new NoOpSourceFunction(),"src2").filter(new NoOpFilterFunction());
  src0.map(new NoOpMapFunction()).union(src1,src2).addSink(new NoOpSinkFunction()).name("sink");
  jobGraph=env.getStreamGraph().getJobGraph();
  verifyIdsEqual(jobGraph,ids);
}
