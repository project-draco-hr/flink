{
  String name=getName() != null ? getName() : "Reduce at " + defaultName;
  if (grouper == null) {
    UnaryOperatorInformation<IN,IN> operatorInfo=new UnaryOperatorInformation<IN,IN>(getInputType(),getInputType());
    ReduceOperatorBase<IN,ReduceFunction<IN>> po=new ReduceOperatorBase<IN,ReduceFunction<IN>>(function,operatorInfo,new int[0],name);
    po.setInput(input);
    po.setDegreeOfParallelism(1);
    return po;
  }
  if (grouper.getKeys() instanceof Keys.SelectorFunctionKeys) {
    @SuppressWarnings("unchecked") Keys.SelectorFunctionKeys<IN,?> selectorKeys=(Keys.SelectorFunctionKeys<IN,?>)grouper.getKeys();
    MapOperatorBase<?,IN,?> po=translateSelectorFunctionReducer(selectorKeys,function,getInputType(),name,input,getParallelism());
    ((PlanUnwrappingReduceOperator<?,?>)po.getInput()).setCustomPartitioner(grouper.getCustomPartitioner());
    return po;
  }
 else   if (grouper.getKeys() instanceof Keys.ExpressionKeys) {
    int[] logicalKeyPositions=grouper.getKeys().computeLogicalKeyPositions();
    UnaryOperatorInformation<IN,IN> operatorInfo=new UnaryOperatorInformation<IN,IN>(getInputType(),getInputType());
    ReduceOperatorBase<IN,ReduceFunction<IN>> po=new ReduceOperatorBase<IN,ReduceFunction<IN>>(function,operatorInfo,logicalKeyPositions,name);
    po.setCustomPartitioner(grouper.getCustomPartitioner());
    po.setInput(input);
    po.setDegreeOfParallelism(getParallelism());
    return po;
  }
 else {
    throw new UnsupportedOperationException("Unrecognized key type.");
  }
}
