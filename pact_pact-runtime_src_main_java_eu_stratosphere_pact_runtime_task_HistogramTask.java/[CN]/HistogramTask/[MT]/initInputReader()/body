{
  RecordDeserializer<KeyValuePair<Key,Value>> deserializer=new KeyValuePairDeserializer(this.keyType,PactNull.class);
  DistributionPattern dp=null;
switch (this.config.getInputShipStrategy(0)) {
case FORWARD:
    dp=new PointwiseDistributionPattern();
  break;
case PARTITION_HASH:
dp=new BipartiteDistributionPattern();
break;
case BROADCAST:
dp=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No input ship strategy provided for ReduceTask.");
}
final int numberOfInputs=this.config.getNumInputs();
if (numberOfInputs == 1) {
this.reader=new CountingRecordReader(this,deserializer,dp);
this.allReaders=new CountingRecordReader[]{(CountingRecordReader)this.reader};
}
 else {
this.allReaders=new CountingRecordReader[numberOfInputs];
for (int i=0; i < numberOfInputs; ++i) {
this.allReaders[i]=new CountingRecordReader(this,deserializer,dp);
}
this.reader=new UnionRecordReader<KeyValuePair<Key,Value>>(this.allReaders);
}
}
