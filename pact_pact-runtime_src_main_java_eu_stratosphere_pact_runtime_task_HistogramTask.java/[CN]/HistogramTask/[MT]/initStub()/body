{
  config=new TaskConfig(getRuntimeConfiguration());
  this.availableMemory=config.getMemorySize();
  this.maxFileHandles=config.getNumFilehandles();
  this.spillThreshold=config.getSortSpillingTreshold();
  numBuckets=config.getStubParameters().getInteger(NUMBER_OF_BUCKETS,-1);
  long strategyMinMem=0;
switch (config.getLocalStrategy()) {
case SORT:
    strategyMinMem=MIN_REQUIRED_MEMORY;
  break;
case COMBININGSORT:
strategyMinMem=MIN_REQUIRED_MEMORY;
break;
case NONE:
strategyMinMem=0;
break;
}
if (this.availableMemory < strategyMinMem) {
throw new RuntimeException("The Reduce task was initialized with too little memory for local strategy " + config.getLocalStrategy() + " : "+ this.availableMemory+ " bytes."+ "Required is at least "+ strategyMinMem+ " bytes.");
}
try {
ClassLoader cl=LibraryCacheManager.getClassLoader(getEnvironment().getJobID());
Class<?> userClass=config.getStubClass(Object.class,cl);
if (Stub.class.isAssignableFrom(userClass)) {
Stub stub=(Stub)userClass.newInstance();
keyType=stub.getOutKeyType();
}
 else if (InputFormat.class.isAssignableFrom(userClass)) {
InputFormat format=(InputFormat)userClass.newInstance();
KeyValuePair pair=format.createPair();
keyType=(Class<Key>)pair.getKey().getClass();
}
 else {
throw new RuntimeException("Unsupported task type " + userClass);
}
}
 catch (IOException ioe) {
throw new RuntimeException("Library cache manager could not be instantiated.",ioe);
}
catch (ClassNotFoundException cnfe) {
throw new RuntimeException("Stub implementation class was not found.",cnfe);
}
catch (InstantiationException ie) {
throw new RuntimeException("Stub implementation could not be instanciated.",ie);
}
catch (IllegalAccessException iae) {
throw new RuntimeException("Stub implementations nullary constructor is not accessible.",iae);
}
}
