{
  if (this.cachedPlans != null) {
    return this.cachedPlans;
  }
  final List<? extends PlanNode> subPlans1=getFirstPredecessorNode().getAlternativePlans(estimator);
  final List<? extends PlanNode> subPlans2=getSecondPredecessorNode().getAlternativePlans(estimator);
  final List<Set<? extends NamedChannel>> broadcastPlanChannels=new ArrayList<Set<? extends NamedChannel>>();
  List<PactConnection> broadcastConnections=getBroadcastConnections();
  List<String> broadcastConnectionNames=getBroadcastConnectionNames();
  for (int i=0; i < broadcastConnections.size(); i++) {
    PactConnection broadcastConnection=broadcastConnections.get(i);
    String broadcastConnectionName=broadcastConnectionNames.get(i);
    List<PlanNode> broadcastPlanCandidates=broadcastConnection.getSource().getAlternativePlans(estimator);
    HashSet<NamedChannel> broadcastChannels=new HashSet<NamedChannel>(broadcastPlanCandidates.size());
    for (    PlanNode plan : broadcastPlanCandidates) {
      final NamedChannel c=new NamedChannel(broadcastConnectionName,plan);
      c.setShipStrategy(ShipStrategyType.BROADCAST);
      broadcastChannels.add(c);
    }
    broadcastPlanChannels.add(broadcastChannels);
  }
  final ArrayList<PlanNode> outputPlans=new ArrayList<PlanNode>();
  final BinaryUnionOpDescriptor operator=new BinaryUnionOpDescriptor();
  final RequestedLocalProperties noLocalProps=new RequestedLocalProperties();
  final int dop=getDegreeOfParallelism();
  final int inDop1=getFirstPredecessorNode().getDegreeOfParallelism();
  final int inDop2=getSecondPredecessorNode().getDegreeOfParallelism();
  final boolean dopChange1=dop != inDop1;
  final boolean dopChange2=dop != inDop2;
  for (  PlanNode child1 : subPlans1) {
    for (    PlanNode child2 : subPlans2) {
      if (!areBranchCompatible(child1,child2)) {
        continue;
      }
      for (      RequestedGlobalProperties igps : this.channelProps) {
        Channel c1=new Channel(child1,this.input1.getMaterializationMode());
        if (this.input1.getShipStrategy() == null) {
          igps.parameterizeChannel(c1,dopChange1);
          if (dopChange1 && !c1.getShipStrategy().isNetworkStrategy()) {
            c1.getGlobalProperties().reset();
          }
        }
 else {
          if (this.keys1 != null) {
            c1.setShipStrategy(this.input1.getShipStrategy(),this.keys1.toFieldList());
          }
 else {
            c1.setShipStrategy(this.input1.getShipStrategy());
          }
          if (dopChange1) {
            c1.adjustGlobalPropertiesForFullParallelismChange();
          }
        }
        Channel c2=new Channel(child2,this.input2.getMaterializationMode());
        if (this.input2.getShipStrategy() == null) {
          igps.parameterizeChannel(c2,dopChange2);
          if (dopChange2 && !c2.getShipStrategy().isNetworkStrategy()) {
            c2.getGlobalProperties().reset();
          }
        }
 else {
          if (this.keys2 != null) {
            c2.setShipStrategy(this.input2.getShipStrategy(),this.keys2.toFieldList());
          }
 else {
            c2.setShipStrategy(this.input2.getShipStrategy());
          }
          if (dopChange2) {
            c2.adjustGlobalPropertiesForFullParallelismChange();
          }
        }
        GlobalProperties p1=c1.getGlobalProperties();
        GlobalProperties p2=c2.getGlobalProperties();
        p1.clearUniqueFieldCombinations();
        p2.clearUniqueFieldCombinations();
        if (!igps.isTrivial() && !(p1.equals(p2))) {
          if (c1.getShipStrategy() == ShipStrategyType.FORWARD && c2.getShipStrategy() != ShipStrategyType.FORWARD) {
            c2=c2.clone();
            p1.parameterizeChannel(c2,dopChange2);
          }
 else           if (c2.getShipStrategy() == ShipStrategyType.FORWARD && c1.getShipStrategy() != ShipStrategyType.FORWARD) {
            c1=c1.clone();
            p2.parameterizeChannel(c1,dopChange1);
          }
 else           if (c1.getShipStrategy() == ShipStrategyType.FORWARD && c2.getShipStrategy() == ShipStrategyType.FORWARD) {
            boolean adjustC1=c1.getEstimatedOutputSize() <= 0 || c2.getEstimatedOutputSize() <= 0 || c1.getEstimatedOutputSize() <= c2.getEstimatedOutputSize();
            if (adjustC1) {
              c2=c2.clone();
              p1.parameterizeChannel(c2,dopChange2);
            }
 else {
              c1=c1.clone();
              p2.parameterizeChannel(c1,dopChange1);
            }
          }
 else {
            throw new CompilerException("Bug in Plan Enumeration for Union Node.");
          }
        }
        instantiate(operator,c1,c2,broadcastPlanChannels,outputPlans,estimator,igps,igps,noLocalProps,noLocalProps);
      }
    }
  }
  for (  PlanNode node : outputPlans) {
    estimator.costOperator(node);
  }
  prunePlanAlternatives(outputPlans);
  outputPlans.trimToSize();
  this.cachedPlans=outputPlans;
  return outputPlans;
}
