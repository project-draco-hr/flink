{
  List<Integer> batchSizesOfNotPartitioned=new ArrayList<Integer>();
  List<Integer> batchSizesOfPartitioned=new ArrayList<Integer>();
  batchSizesOfPartitioned.add(2);
  batchSizesOfPartitioned.add(3);
  List<Integer> parallelismOfOutput=new ArrayList<Integer>();
  parallelismOfOutput.add(2);
  parallelismOfOutput.add(2);
  int keyPosition=0;
  long batchTimeout=1000;
  int channelID=1;
  List<RecordWriter<StreamRecord>> fOut=new ArrayList<RecordWriter<StreamRecord>>();
  MockRecordWriter rw1=MockRecordWriterFactory.create();
  MockRecordWriter rw2=MockRecordWriterFactory.create();
  fOut.add(rw1);
  fOut.add(rw2);
  collector=new StreamCollectorManager<Tuple>(batchSizesOfNotPartitioned,batchSizesOfPartitioned,parallelismOfOutput,keyPosition,batchTimeout,channelID,null,fOut,fOut);
  Tuple1<Integer> t=new Tuple1<Integer>();
  t.f0=0;
  collector.collect(t);
  t.f0=1;
  collector.collect(t);
  t.f0=0;
  collector.collect(t);
  StreamRecord r1=rw1.emittedRecords.get(0);
  assertEquals(1,rw1.emittedRecords.size());
  assertEquals(0,r1.getTuple(0).getField(0));
  assertEquals(0,r1.getTuple(1).getField(0));
  t.f0=1;
  collector.collect(t);
  StreamRecord r2=rw1.emittedRecords.get(1);
  assertEquals(2,rw1.emittedRecords.size());
  assertEquals(1,r2.getTuple(0).getField(0));
  assertEquals(1,r2.getTuple(1).getField(0));
  assertEquals(0,rw2.emittedRecords.size());
  t.f0=5;
  collector.collect(t);
  assertEquals(2,rw1.emittedRecords.size());
  assertEquals(1,rw2.emittedRecords.size());
}
