{
  if (args == null || args.length != 4) {
    LOG.warn("number of arguments do not match!");
    this.ordersInputPath="";
    this.lineItemInputPath="";
    this.outputPath="";
  }
 else {
    setArgs(args);
  }
  FileDataSource orders=new FileDataSource(new IntTupleDataInFormat(),this.ordersInputPath,"Orders");
  orders.setParallelism(this.parallelism);
  FileDataSource lineItems=new FileDataSource(new IntTupleDataInFormat(),this.lineItemInputPath,"LineItems");
  lineItems.setParallelism(this.parallelism);
  FileDataSink result=new FileDataSink(new StringTupleDataOutFormat(),this.outputPath,"Output");
  result.setParallelism(parallelism);
  MapOperator lineFilter=MapOperator.builder(LiFilter.class).name("LineItemFilter").build();
  lineFilter.setParallelism(parallelism);
  MapOperator ordersFilter=MapOperator.builder(OFilter.class).name("OrdersFilter").build();
  ordersFilter.setParallelism(parallelism);
  JoinOperator join=JoinOperator.builder(JoinLiO.class,IntValue.class,0,0).name("OrdersLineitemsJoin").build();
  join.setParallelism(parallelism);
  ReduceOperator aggregation=ReduceOperator.builder(CountAgg.class,StringValue.class,0).name("AggregateGroupBy").build();
  aggregation.setParallelism(this.parallelism);
  lineFilter.setInput(lineItems);
  ordersFilter.setInput(orders);
  join.setFirstInput(ordersFilter);
  join.setSecondInput(lineFilter);
  aggregation.setInput(join);
  result.setInput(aggregation);
  return new Plan(result,"TPC-H 4");
}
