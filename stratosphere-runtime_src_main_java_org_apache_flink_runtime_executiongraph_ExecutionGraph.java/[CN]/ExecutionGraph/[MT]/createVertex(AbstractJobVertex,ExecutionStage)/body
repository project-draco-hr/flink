{
  final Class<? extends AbstractInvokable> invokableClass=jobVertex.getInvokableClass();
  if (invokableClass == null) {
    throw new GraphConversionException("JobVertex " + jobVertex.getID() + " ("+ jobVertex.getName()+ ") does not specify a task");
  }
  final ExecutionSignature signature=ExecutionSignature.createSignature(jobVertex.getInvokableClass(),jobVertex.getJobGraph().getJobID());
  ExecutionGroupVertex groupVertex=null;
  try {
    groupVertex=new ExecutionGroupVertex(jobVertex.getName(),jobVertex.getID(),this,jobVertex.getNumberOfSubtasks(),jobVertex.getVertexToShareInstancesWith() != null ? true : false,jobVertex.getNumberOfExecutionRetries(),jobVertex.getConfiguration(),signature,invokableClass);
  }
 catch (  Throwable t) {
    throw new GraphConversionException(t);
  }
  if (jobVertex instanceof AbstractJobInputVertex) {
    final AbstractJobInputVertex jobInputVertex=(AbstractJobInputVertex)jobVertex;
    if (jobVertex instanceof JobInputVertex) {
      try {
        ClassLoader cl=LibraryCacheManager.getClassLoader(jobVertex.getJobGraph().getJobID());
        ((JobInputVertex)jobVertex).initializeInputFormatFromTaskConfig(cl);
      }
 catch (      Throwable t) {
        throw new GraphConversionException("Could not deserialize input format.",t);
      }
    }
    final Class<? extends InputSplit> inputSplitType=jobInputVertex.getInputSplitType();
    InputSplit[] inputSplits;
    try {
      inputSplits=jobInputVertex.getInputSplits(jobVertex.getNumberOfSubtasks());
    }
 catch (    Throwable t) {
      throw new GraphConversionException("Cannot compute input splits for " + groupVertex.getName(),t);
    }
    if (inputSplits == null) {
      inputSplits=new InputSplit[0];
    }
    LOG.info("Job input vertex " + jobVertex.getName() + " generated "+ inputSplits.length+ " input splits");
    groupVertex.setInputSplits(inputSplits);
    groupVertex.setInputSplitType(inputSplitType);
  }
  if (jobVertex instanceof JobOutputVertex) {
    final JobOutputVertex jobOutputVertex=(JobOutputVertex)jobVertex;
    try {
      ClassLoader cl=LibraryCacheManager.getClassLoader(jobVertex.getJobGraph().getJobID());
      jobOutputVertex.initializeOutputFormatFromTaskConfig(cl);
    }
 catch (    Throwable t) {
      throw new GraphConversionException("Could not deserialize output format.",t);
    }
    OutputFormat<?> outputFormat=jobOutputVertex.getOutputFormat();
    if (outputFormat != null && outputFormat instanceof InitializeOnMaster) {
      try {
        ((InitializeOnMaster)outputFormat).initializeGlobal(jobVertex.getNumberOfSubtasks());
      }
 catch (      Throwable t) {
        throw new GraphConversionException(t);
      }
    }
  }
  initialExecutionStage.addStageMember(groupVertex);
  final ExecutionVertex ev=new ExecutionVertex(this,groupVertex,jobVertex.getNumberOfForwardConnections(),jobVertex.getNumberOfBackwardConnections());
  ev.setAllocatedResource(new AllocatedResource(DummyInstance.createDummyInstance(),null));
  return ev;
}
