{
  if (!this.iterator1.nextKey() || !this.iterator2.nextKey()) {
    while (this.iterator1.nextKey())     ;
    while (this.iterator2.nextKey())     ;
    return false;
  }
  final TypePairComparator<T1,T2> comparator=this.pairComparator;
  comparator.setReference(this.iterator1.getCurrent());
  T2 current2=this.iterator2.getCurrent();
  while (true) {
    final int comp=comparator.compareToReference(current2);
    if (comp == 0) {
      break;
    }
    if (comp < 0) {
      if (!this.iterator2.nextKey()) {
        return false;
      }
      current2=this.iterator2.getCurrent();
    }
 else {
      if (!this.iterator1.nextKey()) {
        return false;
      }
      comparator.setReference(this.iterator1.getCurrent());
    }
  }
  final Iterator<T1> values1=this.iterator1.getValues();
  final Iterator<T2> values2=this.iterator2.getValues();
  crossMatchingGroup(values1,values2,joinFunction,collector);
  return true;
}
