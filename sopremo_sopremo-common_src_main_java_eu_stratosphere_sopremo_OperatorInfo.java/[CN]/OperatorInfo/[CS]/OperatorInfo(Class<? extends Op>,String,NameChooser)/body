{
  this.operatorClass=operatorClass;
  this.name=opName;
  try {
    final PropertyDescriptor[] propertyDescriptors=Introspector.getBeanInfo(operatorClass).getPropertyDescriptors();
    for (    final PropertyDescriptor propertyDescriptor : propertyDescriptors)     if (propertyDescriptor.getWriteMethod() != null || propertyDescriptor instanceof IndexedPropertyDescriptor && ((IndexedPropertyDescriptor)propertyDescriptor).getIndexedWriteMethod() != null) {
      String name=propertyNameChooser.choose((String[])propertyDescriptor.getValue(Operator.Info.NAME_NOUNS),(String[])propertyDescriptor.getValue(Operator.Info.NAME_VERB),(String[])propertyDescriptor.getValue(Operator.Info.NAME_ADJECTIVE),(String[])propertyDescriptor.getValue(Operator.Info.NAME_PREPOSITION));
      if (name == null)       name=propertyDescriptor.getName();
      if (propertyDescriptor.getValue(Operator.Info.INPUT) == Boolean.TRUE)       this.inputProperties.put(name,new InputPropertyInfo(name,(IndexedPropertyDescriptor)propertyDescriptor));
 else       this.operatorProperties.put(name,new OperatorPropertyInfo(name,propertyDescriptor));
    }
  }
 catch (  final IntrospectionException e) {
    e.printStackTrace();
  }
}
