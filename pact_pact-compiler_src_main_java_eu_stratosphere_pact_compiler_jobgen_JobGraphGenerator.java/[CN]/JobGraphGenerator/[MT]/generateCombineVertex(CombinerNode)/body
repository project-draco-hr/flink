{
  final ReduceContract rc=combineNode.getPactContract();
  final JobTaskVertex combineVertex;
  final TaskConfig combineConfig;
  if (isChainable(combineNode)) {
    combineVertex=null;
    combineConfig=new TaskConfig(new Configuration());
    this.chainedTasks.put(combineNode,new TaskInChain(ChainedCombineDriver.class,combineConfig,"Combiner for " + rc.getName()));
  }
 else {
    combineVertex=new JobTaskVertex("Combiner for " + combineNode.getPactContract().getName(),this.jobGraph);
    combineConfig=new TaskConfig(combineVertex.getConfiguration());
    combineVertex.setTaskClass(RegularPactTask.class);
    combineConfig.setDriver(CombineDriver.class);
  }
  combineConfig.setStubClass(combineNode.getPactContract().getUserCodeClass());
  combineConfig.setLocalStrategy(LocalStrategy.COMBININGSORT);
  final Ordering secondaryOrder=combineNode.getPactContract().getGroupOrder();
  if (secondaryOrder == null) {
    PactRecordComparatorFactory.writeComparatorSetupToConfig(combineConfig.getConfigForInputParameters(0),combineNode.getPactContract().getKeyColumnNumbers(0),combineNode.getPactContract().getKeyClasses(),getTrueArrayOfSize(combineNode.getPactContract().getKeyClasses().length));
  }
 else {
    PactRecordComparatorFactory.writeComparatorSetupToConfig(combineConfig.getConfigForInputParameters(0),combineNode.getPactContract().getKeyColumnNumbers(0),combineNode.getPactContract().getKeyClasses(),getTrueArrayOfSize(combineNode.getPactContract().getKeyClasses().length),secondaryOrder.getFieldPositions(),secondaryOrder.getTypes(),secondaryOrder.getFieldSortDirections());
  }
  assignMemory(combineConfig,combineNode.getMemoryPerTask());
  combineConfig.setStubParameters(combineNode.getPactContract().getParameters());
  return combineVertex;
}
