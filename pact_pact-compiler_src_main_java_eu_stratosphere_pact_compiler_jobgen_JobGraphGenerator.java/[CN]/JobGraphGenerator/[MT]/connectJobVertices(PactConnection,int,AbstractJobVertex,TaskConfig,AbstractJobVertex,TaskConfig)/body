{
  ChannelType channelType=null;
  DistributionPattern distributionPattern=null;
switch (connection.getShipStrategy()) {
case FORWARD:
case PARTITION_LOCAL_HASH:
    int sourceDOP=connection.getSourcePact().getDegreeOfParallelism();
  int sourceInnerDOP=connection.getSourcePact().getInstancesPerMachine();
int sourceNumInstances=(int)Math.ceil((double)sourceDOP / (double)sourceInnerDOP);
int targetDOP=connection.getTargetPact().getDegreeOfParallelism();
int targetInnerDOP=connection.getTargetPact().getInstancesPerMachine();
int targetNumInstances=(int)Math.ceil((double)targetDOP / (double)targetInnerDOP);
channelType=sourceNumInstances == targetNumInstances ? ChannelType.INMEMORY : ChannelType.NETWORK;
distributionPattern=DistributionPattern.POINTWISE;
break;
case PARTITION_HASH:
case BROADCAST:
case SFR:
channelType=ChannelType.NETWORK;
distributionPattern=DistributionPattern.BIPARTITE;
break;
default :
throw new IllegalArgumentException("Unsupported ship-strategy: " + connection.getShipStrategy().name());
}
TaskConfig tempConfig=null;
final int[] keyPositions;
final Class<? extends Key>[] keyTypes;
final Contract targetContract=connection.getTargetPact().getPactContract();
if (targetContract instanceof AbstractPact<?>) {
AbstractPact<?> pact=(AbstractPact<?>)targetContract;
if (connection.getScramblePartitionedFields() != null) {
int[] originalKeyPositions=pact.getKeyColumnNumbers(inputNumber - 1);
Class<? extends Key>[] originalKeyTypes=pact.getKeyClasses();
int[] scrambleArray=connection.getScramblePartitionedFields();
keyTypes=new Class[scrambleArray.length];
keyPositions=new int[scrambleArray.length];
for (int i=0; i < scrambleArray.length; i++) {
keyPositions[i]=originalKeyPositions[scrambleArray[i]];
keyTypes[i]=originalKeyTypes[scrambleArray[i]];
}
}
 else {
keyPositions=pact.getKeyColumnNumbers(inputNumber - 1);
keyTypes=pact.getKeyClasses();
}
}
 else {
keyPositions=null;
keyTypes=null;
}
final TaskConfig configForOutpuShipStrategy;
switch (connection.getTempMode()) {
case NONE:
outputVertex.connectTo(inputVertex,channelType,CompressionLevel.NO_COMPRESSION,distributionPattern);
configForOutpuShipStrategy=outputConfig;
break;
case TEMP_SENDER_SIDE:
int degreeOfParallelism=connection.getSourcePact().getDegreeOfParallelism();
int instancesPerMachine=connection.getSourcePact().getInstancesPerMachine();
JobTaskVertex tempVertex=generateTempVertex(connection.getSourcePact().getPactContract().getUserCodeClass(),degreeOfParallelism,instancesPerMachine);
outputVertex.connectTo(tempVertex,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION,DistributionPattern.POINTWISE);
tempVertex.connectTo(inputVertex,channelType,CompressionLevel.NO_COMPRESSION,distributionPattern);
tempVertex.setVertexToShareInstancesWith(outputVertex);
tempConfig=new TaskConfig(tempVertex.getConfiguration());
outputConfig.addOutputShipStrategy(ShipStrategy.FORWARD);
configForOutpuShipStrategy=tempConfig;
break;
case TEMP_RECEIVER_SIDE:
degreeOfParallelism=connection.getTargetPact().getDegreeOfParallelism();
instancesPerMachine=connection.getTargetPact().getInstancesPerMachine();
tempVertex=generateTempVertex(connection.getSourcePact().getPactContract().getUserCodeClass(),degreeOfParallelism,instancesPerMachine);
outputVertex.connectTo(tempVertex,channelType,CompressionLevel.NO_COMPRESSION,distributionPattern);
tempVertex.connectTo(inputVertex,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION,DistributionPattern.POINTWISE);
tempVertex.setVertexToShareInstancesWith(inputVertex);
tempConfig=new TaskConfig(tempVertex.getConfiguration());
tempConfig.addOutputShipStrategy(ShipStrategy.FORWARD);
configForOutpuShipStrategy=outputConfig;
break;
default :
throw new CompilerException("Invalid connection temp mode: " + connection.getTempMode());
}
configForOutpuShipStrategy.addOutputShipStrategy(connection.getShipStrategy());
if (!(keyPositions == null || keyTypes == null || keyPositions.length == 0 || keyTypes.length == 0)) {
final int outputNum=configForOutpuShipStrategy.getNumOutputs() - 1;
configForOutpuShipStrategy.setComparatorFactoryForOutput(PactRecordComparatorFactory.class,outputNum);
PactRecordComparatorFactory.writeComparatorSetupToConfig(configForOutpuShipStrategy.getConfiguration(),configForOutpuShipStrategy.getPrefixForOutputParameters(outputNum),keyPositions,keyTypes);
}
}
