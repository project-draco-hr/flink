{
  TaskConfig inputConfig=new TaskConfig(inputVertex.getConfiguration());
  TaskConfig outputConfig=new TaskConfig(outputVertex.getConfiguration());
  int sourceDOP=connection.getSourcePact().getDegreeOfParallelism();
  int sourceIPM=connection.getSourcePact().getInstancesPerMachine();
  int targetDOP=connection.getTargetPact().getDegreeOfParallelism();
  int targetIPM=connection.getTargetPact().getInstancesPerMachine();
  Class<? extends Stub<?,?>> sourceStub=connection.getSourcePact().getPactContract().getStubClass();
  if (targetDOP == 1) {
    if (sourceDOP == 1) {
      outputVertex.connectTo(inputVertex,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    }
 else {
      outputVertex.connectTo(inputVertex,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
    }
    outputConfig.addOutputShipStrategy(ShipStrategy.FORWARD);
    inputConfig.addInputShipStrategy(ShipStrategy.FORWARD);
    return;
  }
  JobTaskVertex sampleVertex=new JobTaskVertex("Range partition - sampling",this.jobGraph);
  auxVertices.add(sampleVertex);
  sampleVertex.setTaskClass(SampleTask.class);
  TaskConfig sampleConfig=new TaskConfig(sampleVertex.getConfiguration());
  sampleVertex.setNumberOfSubtasks(sourceDOP);
  if (sourceIPM >= 1) {
    sampleVertex.setNumberOfSubtasksPerInstance(sourceIPM);
  }
  sampleConfig.setStubClass(sourceStub);
  outputVertex.connectTo(sampleVertex,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
  outputConfig.addOutputShipStrategy(ShipStrategy.FORWARD);
  sampleConfig.addInputShipStrategy(ShipStrategy.FORWARD);
  JobTaskVertex histogramVertex=new JobTaskVertex("Range partition - histograming",this.jobGraph);
  auxVertices.add(histogramVertex);
  histogramVertex.setTaskClass(HistogramTask.class);
  histogramVertex.setNumberOfSubtasks(1);
  histogramVertex.setNumberOfSubtasksPerInstance(1);
  TaskConfig histogramConfig=new TaskConfig(histogramVertex.getConfiguration());
  histogramConfig.setStubClass(sourceStub);
  histogramConfig.setLocalStrategy(LocalStrategy.SORT);
  Configuration histogramStubConfig=new Configuration();
  histogramStubConfig.setInteger(HistogramTask.NUMBER_OF_BUCKETS,targetDOP);
  histogramConfig.setStubParameters(histogramStubConfig);
  assignMemory(histogramConfig,32);
  histogramConfig.addInputShipStrategy(ShipStrategy.FORWARD);
  sampleConfig.addOutputShipStrategy(ShipStrategy.FORWARD);
  sampleVertex.connectTo(histogramVertex,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
  JobTaskVertex partitionVertex=new JobTaskVertex("Range partition - partitioning",this.jobGraph);
  auxVertices.add(partitionVertex);
  partitionVertex.setTaskClass(PartitionTask.class);
  partitionVertex.setNumberOfSubtasks(sourceDOP);
  if (sourceIPM >= 1) {
    partitionVertex.setNumberOfSubtasksPerInstance(sourceIPM);
  }
  TaskConfig partitionConfig=new TaskConfig(partitionVertex.getConfiguration());
  partitionConfig.setStubClass(sourceStub);
  histogramVertex.connectTo(partitionVertex,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
  partitionConfig.addInputShipStrategy(ShipStrategy.BROADCAST);
  histogramConfig.addOutputShipStrategy(ShipStrategy.BROADCAST);
  outputVertex.connectTo(partitionVertex,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
  partitionConfig.addInputShipStrategy(ShipStrategy.FORWARD);
  outputConfig.addOutputShipStrategy(ShipStrategy.FORWARD);
  partitionVertex.connectTo(inputVertex,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
  inputConfig.addInputShipStrategy(ShipStrategy.PARTITION_RANGE);
  partitionConfig.addOutputShipStrategy(ShipStrategy.PARTITION_RANGE);
}
