{
  try {
    AbstractJobVertex inputVertex=this.vertices.get(node);
    List<List<PactConnection>> incomingConns=node.getIncomingConnections();
    if (incomingConns == null) {
      return;
    }
    int inputIndex=1;
    for (    List<PactConnection> cl : incomingConns) {
      boolean firstRun=true;
      for (      PactConnection connection : cl) {
        AbstractJobVertex outputVertex=this.vertices.get(connection.getSourcePact());
        if (outputVertex == null) {
          throw new Exception("Parent vertex was not initialized");
        }
switch (connection.getShipStrategy()) {
case FORWARD:
          connectWithForwardStrategy(connection,outputVertex,inputVertex,inputIndex);
        break;
case PARTITION_LOCAL_HASH:
case PARTITION_HASH:
      connectWithPartitionStrategy(connection,outputVertex,inputVertex,inputIndex);
    break;
case BROADCAST:
  connectWithBroadcastStrategy(connection,outputVertex,inputVertex,inputIndex);
break;
case PARTITION_RANGE:
if (isDistributionGiven(connection)) {
connectWithGivenDistributionPartitionRangeStrategy(connection,outputVertex,inputVertex,inputIndex);
}
 else {
connectWithSamplingPartitionRangeStrategy(connection,outputVertex,inputVertex,inputIndex,firstRun);
}
break;
case SFR:
connectWithSFRStrategy(connection,outputVertex,inputVertex,inputIndex);
default :
throw new Exception("Invalid ship strategy: " + connection.getShipStrategy());
}
firstRun=false;
}
++inputIndex;
}
}
 catch (Exception e) {
throw new CompilerException("An error occurred while translating the optimized plan to a nephele JobGraph: " + e.getMessage(),e);
}
}
