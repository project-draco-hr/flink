{
  final int endPos=nextStringEndPos(bytes,startPos,limit,delimiter);
  if (endPos < 0) {
    return -1;
  }
  try {
    final int length=endPos - startPos;
    if (reuse == null || reuse.length < length) {
      reuse=new char[length];
    }
    for (int j=0; j < length; j++) {
      final byte b=bytes[startPos + j];
      if ((b < '0' || b > '9') && b != '-' && b != '+' && b != '.' && b != 'E' && b != 'e') {
        setErrorState(ParseErrorState.NUMERIC_VALUE_ILLEGAL_CHARACTER);
        return -1;
      }
      reuse[j]=(char)bytes[startPos + j];
    }
    this.result=new BigDecimal(reuse,0,length);
    return (endPos == limit) ? limit : endPos + delimiter.length;
  }
 catch (  NumberFormatException e) {
    setErrorState(ParseErrorState.NUMERIC_VALUE_FORMAT_ERROR);
    return -1;
  }
}
