{
  try {
    MutableObjectIterator<IntPair> input1=new UniformIntPairGenerator(500,40,false);
    final Generator generator2=new Generator(SEED2,500,2048,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TestData.GeneratorIterator input2=new TestData.GeneratorIterator(generator2,INPUT_2_SIZE);
    final Map<TestData.Key,Collection<RecordIntPairMatch>> expectedMatchesMap=matchRecordIntPairValues(collectIntPairData(input1),collectRecordData(input2));
    final FlatJoinFunction<IntPair,Record,Record> matcher=new RecordIntPairMatchRemovingMatcher(expectedMatchesMap);
    final Collector<Record> collector=new DiscardingOutputCollector<Record>();
    input1=new UniformIntPairGenerator(500,40,false);
    generator2.reset();
    input2.reset();
    NonReusingBuildSecondHashMatchIterator<IntPair,Record,Record> iterator=new NonReusingBuildSecondHashMatchIterator<IntPair,Record,Record>(input1,input2,this.pairSerializer,this.pairComparator,this.recordSerializer,this.record2Comparator,this.pairRecordPairComparator,this.memoryManager,this.ioManager,this.parentTask,1.0,true);
    iterator.open();
    while (iterator.callWithNextKey(matcher,collector))     ;
    iterator.close();
    for (    Entry<TestData.Key,Collection<RecordIntPairMatch>> entry : expectedMatchesMap.entrySet()) {
      if (!entry.getValue().isEmpty()) {
        Assert.fail("Collection for key " + entry.getKey() + " is not empty");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
