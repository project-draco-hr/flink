{
  final LocalBufferPool bufferPool=new LocalBufferPool(GLOBAL_BUFFER_POOL,NUM_BUFFERS);
  final Buffer[] requestedBuffers=new Buffer[NUM_BUFFERS];
  for (int i=0; i < NUM_BUFFERS; i++) {
    requestedBuffers[i]=bufferPool.requestBuffer(BUFFER_SIZE);
  }
  final Buffer[] bufferFromBlockingRequest=new Buffer[1];
  Assert.assertEquals(NUM_BUFFERS,bufferPool.numRequestedBuffers());
  Assert.assertEquals(0,bufferPool.numAvailableBuffers());
  Thread blockingBufferRequestThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        bufferFromBlockingRequest[0]=bufferPool.requestBufferBlocking(BUFFER_SIZE);
        Assert.fail("Unexpected return from blocking buffer request.");
      }
 catch (      IOException e) {
        Assert.fail("Unexpected IOException during test.");
      }
catch (      InterruptedException e) {
      }
    }
  }
);
  blockingBufferRequestThread.start();
  Thread.sleep(500);
  blockingBufferRequestThread.interrupt();
  Assert.assertNull(bufferFromBlockingRequest[0]);
  Assert.assertEquals(NUM_BUFFERS,bufferPool.numRequestedBuffers());
  Assert.assertEquals(0,bufferPool.numAvailableBuffers());
  new Timer().schedule(new TimerTask(){
    @Override public void run(){
      requestedBuffers[0].recycleBuffer();
    }
  }
,500);
  try {
    Buffer buffer=bufferPool.requestBufferBlocking(BUFFER_SIZE);
    Assert.assertNotNull(buffer);
    buffer.recycleBuffer();
  }
 catch (  InterruptedException e) {
    Assert.fail("Unexpected InterruptedException during test.");
  }
  for (int i=1; i < requestedBuffers.length; i++) {
    requestedBuffers[i].recycleBuffer();
  }
  bufferPool.destroy();
}
