{
  final LocalBufferPool bufferPool=new LocalBufferPool(GLOBAL_BUFFER_POOL,NUM_BUFFERS);
  Buffer[] requestedBuffers=new Buffer[NUM_BUFFERS];
  for (int i=0; i < NUM_BUFFERS; i++) {
    requestedBuffers[i]=bufferPool.requestBuffer(BUFFER_SIZE);
  }
  Assert.assertEquals(NUM_BUFFERS,bufferPool.numRequestedBuffers());
  Assert.assertEquals(0,bufferPool.numAvailableBuffers());
  for (int i=0; i < NUM_BUFFERS / 2; i++) {
    requestedBuffers[i].recycleBuffer();
  }
  Assert.assertEquals(NUM_BUFFERS,bufferPool.numRequestedBuffers());
  Assert.assertEquals(NUM_BUFFERS / 2,bufferPool.numAvailableBuffers());
  bufferPool.setNumDesignatedBuffers((NUM_BUFFERS / 2) - (NUM_BUFFERS / 4));
  Assert.assertEquals(NUM_BUFFERS / 2,bufferPool.numRequestedBuffers());
  Assert.assertEquals(0,bufferPool.numAvailableBuffers());
  for (int i=NUM_BUFFERS / 2; i < NUM_BUFFERS; i++) {
    requestedBuffers[i].recycleBuffer();
  }
  Assert.assertEquals("Expected current number of requested buffers to be equal to the number of designated buffers.",bufferPool.numDesignatedBuffers(),bufferPool.numRequestedBuffers());
  Assert.assertEquals("Expected current number of requested and available buffers to be equal, " + "because all requested buffers have been recycled and become available again.",bufferPool.numRequestedBuffers(),bufferPool.numAvailableBuffers());
  int remaining=bufferPool.numRequestedBuffers();
  for (int i=0; i < remaining; i++) {
    requestedBuffers[i]=bufferPool.requestBuffer(BUFFER_SIZE);
  }
  BufferAvailabilityListener listener=mock(BufferAvailabilityListener.class);
  doAnswer(RECYCLING_BUFFER_AVAILABLE_ANSWER).when(listener).bufferAvailable(Matchers.<Buffer>anyObject());
  BufferAvailabilityRegistration registration=bufferPool.registerBufferAvailabilityListener(listener);
  Assert.assertEquals(BufferAvailabilityRegistration.SUCCEEDED_REGISTERED,registration);
  bufferPool.setNumDesignatedBuffers(bufferPool.numDesignatedBuffers() - 1);
  for (int i=0; i < remaining; i++) {
    requestedBuffers[i].recycleBuffer();
  }
  Assert.assertEquals(remaining - 1,bufferPool.numRequestedBuffers());
  Assert.assertEquals(remaining - 1,bufferPool.numAvailableBuffers());
  bufferPool.destroy();
}
