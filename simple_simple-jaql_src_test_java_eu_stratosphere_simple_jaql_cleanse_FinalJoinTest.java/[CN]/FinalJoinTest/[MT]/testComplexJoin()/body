{
  SopremoPlan actualPlan=parseScript("using cleansing;" + "$persons = read 'persons.json';" + "$funds = read 'funds.json';"+ "$legal_entity = read 'legal_entity.json';"+ ""+ "$result = join"+ "	$sponsor in $persons,"+ "	$relative in $persons,"+ "	$fund in $funds,"+ "	$recipient in $legal_entity,"+ "	$subsidiary in $legal_entity"+ "	where"+ "	($relative.id in $sponsor.relatives[*].id or"+ "	 $relative.id == $sponsor.id) and"+ "	 $fund.id in $sponsor.enacted_funds[*].id and"+ "	($subsidiary.id in $recipient.subsidiaries[*].id"+ "	or $subsidiary.id == $recipient.id) and"+ "	 $subsidiary.id in $relative.worksFor"+ "	into {"+ "	$sponsor.*,"+ "	$relative.*"+ "};"+ "write $result to hdfs('result.json');");
  SopremoPlan expectedPlan=new SopremoPlan();
  Source input=new Source("input.json");
  Selection selection=new Selection().withCondition(new OrExpression(new UnaryExpression(JsonUtil.createPath("$","mgr")),new ComparativeExpression(JsonUtil.createPath("$","income"),BinaryOperator.GREATER,new ConstantExpression(30000)))).withInputs(input);
  Sink output=new Sink("output.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
