{
  SopremoPlan actualPlan=parseScript("using cleansing;\n" + "$persons = read 'persons.json';\n" + "$funds = read 'funds.json';\n"+ "$legal_entity = read 'legal_entity.json';\n"+ "\n"+ "$result = join\n"+ "	$sponsor in $persons,\n"+ "	$relative in $persons,\n"+ "	$fund in $funds,\n"+ "	$recipient in $legal_entity,\n"+ "	$subsidiary in $legal_entity\n"+ "	where\n"+ "	($relative.id in $sponsor.relatives[*].id or\n"+ "	 $relative.id == $sponsor.id) and\n"+ "	 $fund.id in $sponsor.enacted_funds[*].id and\n"+ "	($subsidiary.id in $recipient.subsidiaries[*].id\n"+ "	or $subsidiary.id == $recipient.id) and\n"+ "	 $subsidiary.id in $relative.worksFor\n"+ "	into {\n"+ "	$sponsor.*,\n"+ "	$relative.*\n"+ "};\n"+ "write $result to hdfs('result.json');");
  SopremoPlan expectedPlan=new SopremoPlan();
  Source input=new Source("input.json");
  Selection selection=new Selection().withCondition(new OrExpression(new UnaryExpression(JsonUtil.createPath("$","mgr")),new ComparativeExpression(JsonUtil.createPath("$","income"),BinaryOperator.GREATER,new ConstantExpression(30000)))).withInputs(input);
  Sink output=new Sink("output.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
