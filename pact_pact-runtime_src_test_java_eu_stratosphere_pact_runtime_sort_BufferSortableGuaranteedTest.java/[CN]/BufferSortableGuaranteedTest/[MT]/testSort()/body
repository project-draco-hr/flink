{
  final MemorySegment memory=this.memoryManager.allocate(new DummyInvokable(),MEMORY_SIZE);
  BufferSortableGuaranteed sorter=newSortBuffer(memory);
  TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
  long writeStart=System.nanoTime();
  PactRecord record=new PactRecord();
  do {
    generator.next(record);
  }
 while (sorter.write(record));
  long writeStop=System.nanoTime();
  System.out.println("Writing took: " + (writeStop - writeStart) / 1000000 + " msec");
  long sortStart=System.nanoTime();
  QuickSort qs=new QuickSort();
  qs.sort(sorter);
  long sortStop=System.nanoTime();
  System.out.println("Sorting took: " + (sortStop - sortStart) / 1000000 + " msec");
  MutableObjectIterator<PactRecord> iter=sorter.getIterator();
  PactRecord readTarget=new PactRecord();
  Key current=new Key();
  Key last=new Key();
  iter.next(readTarget);
  readTarget.getFieldInto(0,last);
  while (iter.next(readTarget)) {
    readTarget.getFieldInto(0,current);
    final int cmp=last.compareTo(current);
    if (cmp > 0)     Assert.fail("Next key is not larger or equal to previous key.");
    Key tmp=current;
    current=last;
    last=tmp;
  }
  this.memoryManager.release(sorter.unbind());
}
