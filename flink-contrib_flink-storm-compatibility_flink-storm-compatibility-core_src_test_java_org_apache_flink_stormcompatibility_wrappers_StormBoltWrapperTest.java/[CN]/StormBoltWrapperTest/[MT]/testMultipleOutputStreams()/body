{
  final boolean rawOutType1=super.r.nextBoolean();
  final boolean rawOutType2=super.r.nextBoolean();
  final StreamRecord record=mock(StreamRecord.class);
  when(record.getValue()).thenReturn(2).thenReturn(3);
  final StreamingRuntimeContext taskContext=mock(StreamingRuntimeContext.class);
  when(taskContext.getExecutionConfig()).thenReturn(mock(ExecutionConfig.class));
  final Output output=mock(Output.class);
  final TestBolt bolt=new TestBolt();
  final HashSet<String> raw=new HashSet<String>();
  if (rawOutType1) {
    raw.add("stream1");
  }
  if (rawOutType2) {
    raw.add("stream2");
  }
  final StormBoltWrapper wrapper=new StormBoltWrapper(bolt,(Fields)null,raw);
  wrapper.setup(output,taskContext);
  wrapper.open(null);
  final SplitStreamType splitRecord=new SplitStreamType<Integer>();
  if (rawOutType1) {
    splitRecord.streamId="stream1";
    splitRecord.value=2;
  }
 else {
    splitRecord.streamId="stream1";
    splitRecord.value=new Tuple1<Integer>(2);
  }
  wrapper.processElement(record);
  verify(output).collect(new StreamRecord<SplitStreamType>(splitRecord,0));
  if (rawOutType2) {
    splitRecord.streamId="stream2";
    splitRecord.value=3;
  }
 else {
    splitRecord.streamId="stream2";
    splitRecord.value=new Tuple1<Integer>(3);
  }
  wrapper.processElement(record);
  verify(output,times(2)).collect(new StreamRecord<SplitStreamType>(splitRecord,0));
}
