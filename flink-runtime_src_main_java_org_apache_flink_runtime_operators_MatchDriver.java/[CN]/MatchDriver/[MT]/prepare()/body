{
  final TaskConfig config=this.taskContext.getTaskConfig();
  final MemoryManager memoryManager=this.taskContext.getMemoryManager();
  final IOManager ioManager=this.taskContext.getIOManager();
  final double fractionAvailableMemory=config.getRelativeMemoryDriver();
  final int numPages=memoryManager.computeNumberOfPages(fractionAvailableMemory);
  final DriverStrategy ls=config.getDriverStrategy();
  final MutableObjectIterator<IT1> in1=this.taskContext.getInput(0);
  final MutableObjectIterator<IT2> in2=this.taskContext.getInput(1);
  final TypeSerializer<IT1> serializer1=this.taskContext.<IT1>getInputSerializer(0).getSerializer();
  final TypeSerializer<IT2> serializer2=this.taskContext.<IT2>getInputSerializer(1).getSerializer();
  final TypeComparator<IT1> comparator1=this.taskContext.getDriverComparator(0);
  final TypeComparator<IT2> comparator2=this.taskContext.getDriverComparator(1);
  final TypePairComparatorFactory<IT1,IT2> pairComparatorFactory=config.getPairComparatorFactory(this.taskContext.getUserCodeClassLoader());
  if (pairComparatorFactory == null) {
    throw new Exception("Missing pair comparator factory for Match driver");
  }
  ExecutionConfig executionConfig=taskContext.getExecutionConfig();
  this.objectReuseEnabled=executionConfig.isObjectReuseEnabled();
  if (LOG.isDebugEnabled()) {
    LOG.debug("MatchDriver object reuse: " + (this.objectReuseEnabled ? "ENABLED" : "DISABLED") + ".");
  }
  if (this.objectReuseEnabled) {
switch (ls) {
case MERGE:
      this.matchIterator=new ReusingMergeMatchIterator<IT1,IT2,OT>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,numPages,this.taskContext.getOwningNepheleTask());
    break;
case HYBRIDHASH_BUILD_FIRST:
  this.matchIterator=new ReusingBuildFirstHashMatchIterator<IT1,IT2,OT>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator21(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getOwningNepheleTask(),fractionAvailableMemory);
break;
case HYBRIDHASH_BUILD_SECOND:
this.matchIterator=new ReusingBuildSecondHashMatchIterator<IT1,IT2,OT>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getOwningNepheleTask(),fractionAvailableMemory);
break;
default :
throw new Exception("Unsupported driver strategy for Match driver: " + ls.name());
}
}
 else {
switch (ls) {
case MERGE:
this.matchIterator=new NonReusingMergeMatchIterator<IT1,IT2,OT>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,numPages,this.taskContext.getOwningNepheleTask());
break;
case HYBRIDHASH_BUILD_FIRST:
this.matchIterator=new NonReusingBuildFirstHashMatchIterator<IT1,IT2,OT>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator21(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getOwningNepheleTask(),fractionAvailableMemory);
break;
case HYBRIDHASH_BUILD_SECOND:
this.matchIterator=new NonReusingBuildSecondHashMatchIterator<IT1,IT2,OT>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getOwningNepheleTask(),fractionAvailableMemory);
break;
default :
throw new Exception("Unsupported driver strategy for Match driver: " + ls.name());
}
}
this.matchIterator.open();
if (LOG.isDebugEnabled()) {
LOG.debug(this.taskContext.formatLogString("Match task iterator ready."));
}
}
