{
  if (!parseParameters(args)) {
    return;
  }
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Edge<Long,Double>> edges=getEdgesDataSet(env);
  Graph<Long,HashSet<Long>,Double> graph=Graph.fromDataSet(edges,new MapFunction<Long,HashSet<Long>>(){
    @Override public HashSet<Long> map(    Long id) throws Exception {
      HashSet<Long> neighbors=new HashSet<Long>();
      neighbors.add(id);
      return new HashSet<Long>(neighbors);
    }
  }
,env);
  DataSet<Tuple2<Long,HashSet<Long>>> computedNeighbors=graph.reduceOnNeighbors(new GatherNeighbors(),EdgeDirection.ALL);
  Graph<Long,HashSet<Long>,Double> graphWithVertexValues=graph.joinWithVertices(computedNeighbors,new VertexJoinFunction<HashSet<Long>,HashSet<Long>>(){
    public HashSet<Long> vertexJoin(    HashSet<Long> vertexValue,    HashSet<Long> inputValue){
      return inputValue;
    }
  }
);
  DataSet<Edge<Long,Double>> edgesWithJaccardValues=graphWithVertexValues.getTriplets().map(new ComputeJaccard());
  if (fileOutput) {
    edgesWithJaccardValues.writeAsCsv(outputPath,"\n",",");
    env.execute("Executing Jaccard Similarity Measure");
  }
 else {
    edgesWithJaccardValues.print();
  }
}
