{
  StreamRecord record=new StreamRecord(5,2);
  Tuple5<String,Integer,Long,Boolean,Double> tuple=new Tuple5<String,Integer,Long,Boolean,Double>("Stratosphere",1,2L,true,3.5);
  record.addTuple(tuple);
  tuple.setField("",0);
  tuple.setField(0,1);
  tuple.setField(0L,2);
  tuple.setField(false,3);
  tuple.setField(0.,4);
  record.addTuple(tuple);
  try {
    record.addTuple(new Tuple1<String>("4"));
    fail();
  }
 catch (  TupleSizeMismatchException e) {
  }
  assertEquals(5,record.getNumOfFields());
  assertEquals(2,record.getNumOfTuples());
  assertEquals("Stratosphere",record.getString(0,0));
  assertEquals((Integer)1,record.getInteger(0,1));
  assertEquals((Long)2L,record.getLong(0,2));
  assertEquals(true,record.getBoolean(0,3));
  assertEquals((Double)3.5,record.getDouble(0,4));
  assertEquals("",record.getString(1,0));
  assertEquals((Integer)0,record.getInteger(1,1));
  assertEquals((Long)0L,record.getLong(1,2));
  assertEquals(false,record.getBoolean(1,3));
  assertEquals((Double)0.,record.getDouble(1,4));
  record.setTuple(new Tuple5<String,Integer,Long,Boolean,Double>("",0,0L,false,0.));
  assertEquals(5,record.getNumOfFields());
  assertEquals(2,record.getNumOfTuples());
  assertEquals("",record.getString(0,0));
  assertEquals((Integer)0,record.getInteger(0,1));
  assertEquals((Long)0L,record.getLong(0,2));
  assertEquals(false,record.getBoolean(0,3));
  assertEquals((Double)0.,record.getDouble(0,4));
  record.setTuple(1,new Tuple5<String,Integer,Long,Boolean,Double>("Stratosphere",1,2L,true,3.5));
  assertEquals("Stratosphere",record.getString(1,0));
  assertEquals((Integer)1,record.getInteger(1,1));
  assertEquals((Long)2L,record.getLong(1,2));
  assertEquals(true,record.getBoolean(1,3));
  assertEquals((Double)3.5,record.getDouble(1,4));
  record.removeTuple(1);
  assertEquals(1,record.getNumOfTuples());
  assertEquals("",record.getString(0,0));
  assertEquals((Integer)0,record.getInteger(0,1));
  assertEquals((Long)0L,record.getLong(0,2));
  assertEquals(false,record.getBoolean(0,3));
  assertEquals((Double)0.,record.getDouble(0,4));
}
