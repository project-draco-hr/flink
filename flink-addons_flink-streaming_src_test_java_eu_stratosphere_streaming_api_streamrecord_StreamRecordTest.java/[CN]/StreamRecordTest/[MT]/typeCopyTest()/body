{
  StreamRecord rec=new StreamRecord(new Tuple9<Boolean,Byte,Character,Double,Float,Integer,Long,Short,String>((Boolean)true,(Byte)(byte)12,(Character)'a',(Double)12.5,(Float)(float)13.5,(Integer)1234,(Long)12345678900l,(Short)(short)12345,"something"));
  @SuppressWarnings("rawtypes") Class[] types=new Class[9];
  assertEquals(new Class[]{Boolean.class,Byte.class,Character.class,Double.class,Float.class,Integer.class,Long.class,Short.class,String.class},rec.tupleBasicTypesFromLong(rec.tupleBasicTypesToLong(rec.getTuple()),9));
  assertEquals(new Class[]{Boolean.class,Byte.class,Character.class,Double.class,Float.class,Integer.class,Long.class,Short.class,String.class},rec.tupleBasicTypesFromString(rec.tupleBasicTypesToString(rec.getTuple()),9));
  assertEquals(new Class[]{Boolean.class,Byte.class,Character.class,Double.class,Float.class,Integer.class,Long.class,Short.class,String.class},rec.tupleBasicTypesFromByteArray(rec.tupleBasicTypesToByteArray(rec.getTuple()),9));
  ByteArrayOutputStream buff=new ByteArrayOutputStream();
  DataOutputStream out=new DataOutputStream(buff);
  long start=System.nanoTime();
  for (int i=0; i < 1000; i++) {
    out.writeLong(rec.tupleBasicTypesToLong(rec.getTuple()));
  }
  DataInputStream in=new DataInputStream(new ByteArrayInputStream(buff.toByteArray()));
  for (int i=0; i < 1000; i++) {
    rec.tupleBasicTypesFromLong(in.readLong(),9);
  }
  System.out.println("Type copy with Long:\t\t" + (System.nanoTime() - start) + " ns");
  ByteArrayOutputStream buff2=new ByteArrayOutputStream();
  DataOutputStream out2=new DataOutputStream(buff2);
  start=System.nanoTime();
  for (int i=0; i < 1000; i++) {
    StringValue sv=new StringValue(rec.tupleBasicTypesToString(rec.getTuple()));
    sv.write(out2);
  }
  DataInputStream in2=new DataInputStream(new ByteArrayInputStream(buff2.toByteArray()));
  for (int i=0; i < 1000; i++) {
    StringValue sv=new StringValue("");
    sv.read(in2);
    Class[] types2=rec.tupleBasicTypesFromString(sv.getValue(),9);
  }
  System.out.println("Type copy with String:\t\t" + (System.nanoTime() - start) + " ns");
  ByteArrayOutputStream buff3=new ByteArrayOutputStream();
  DataOutputStream out3=new DataOutputStream(buff3);
  start=System.nanoTime();
  for (int i=0; i < 1000; i++) {
    out3.write(rec.tupleBasicTypesToByteArray(rec.getTuple()));
  }
  DataInputStream in3=new DataInputStream(new ByteArrayInputStream(buff3.toByteArray()));
  for (int i=0; i < 1000; i++) {
    byte[] byteTypes=new byte[9];
    in3.read(byteTypes);
    Class[] types2=rec.tupleBasicTypesFromByteArray(byteTypes,9);
  }
  System.out.println("Type copy with ByteArray:\t" + (System.nanoTime() - start) + " ns");
}
