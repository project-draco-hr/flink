{
  final JobID jobID=tdd.getJobID();
  final JobVertexID vertexId=tdd.getVertexID();
  final ExecutionAttemptID executionId=tdd.getExecutionId();
  final int taskIndex=tdd.getIndexInSubtaskGroup();
  final int numSubtasks=tdd.getCurrentNumberOfSubtasks();
  Task task=null;
  boolean jarsRegistered=false;
  boolean success=false;
  try {
    libraryCacheManager.register(jobID,tdd.getRequiredJarFiles());
    jarsRegistered=true;
    final ClassLoader userCodeClassLoader=libraryCacheManager.getClassLoader(jobID);
    if (userCodeClassLoader == null) {
      throw new Exception("No user code ClassLoader available.");
    }
    task=new Task(jobID,vertexId,taskIndex,numSubtasks,executionId,tdd.getTaskName(),this);
    if (this.runningTasks.putIfAbsent(executionId,task) != null) {
      throw new Exception("TaskManager contains already a task with executionId " + executionId);
    }
    final InputSplitProvider splitProvider=new TaskInputSplitProvider(this.globalInputSplitProvider,jobID,vertexId);
    final RuntimeEnvironment env=new RuntimeEnvironment(task,tdd,userCodeClassLoader,this.memoryManager,this.ioManager,splitProvider,this.accumulatorProtocolProxy);
    task.setEnvironment(env);
    this.channelManager.register(task);
    final Configuration jobConfig=tdd.getJobConfiguration();
    boolean enableProfiling=this.profiler != null && jobConfig.getBoolean(ProfilingUtils.PROFILE_JOB_KEY,true);
    if (enableProfiling) {
      task.registerProfiler(this.profiler,jobConfig);
    }
    Map<String,FutureTask<Path>> cpTasks=new HashMap<String,FutureTask<Path>>();
    for (    Entry<String,DistributedCacheEntry> e : DistributedCache.readFileInfoFromConfig(tdd.getJobConfiguration())) {
      FutureTask<Path> cp=this.fileCache.createTmpFile(e.getKey(),e.getValue(),jobID);
      cpTasks.put(e.getKey(),cp);
    }
    env.addCopyTasksForCacheFile(cpTasks);
    if (!task.startExecution()) {
      return new TaskOperationResult(executionId,false,"Task was canceled or failed.");
    }
    if (shutdownStarted.get()) {
      throw new Exception("Task Manager is shut down.");
    }
    success=true;
    return new TaskOperationResult(executionId,true);
  }
 catch (  Throwable t) {
    LOG.error("Could not instantiate task",t);
    return new TaskOperationResult(executionId,false,ExceptionUtils.stringifyException(t));
  }
 finally {
    if (!success) {
      this.runningTasks.remove(executionId);
      if (task != null) {
        removeAllTaskResources(task);
      }
      if (jarsRegistered) {
        libraryCacheManager.unregister(jobID);
      }
    }
  }
}
