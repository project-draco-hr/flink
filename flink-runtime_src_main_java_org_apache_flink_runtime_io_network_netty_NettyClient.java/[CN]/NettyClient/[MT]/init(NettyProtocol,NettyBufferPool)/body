{
  checkState(bootstrap == null,"Netty client has already been initialized.");
  long start=System.currentTimeMillis();
  bootstrap=new Bootstrap();
switch (config.getTransportType()) {
case NIO:
    initNioBootstrap();
  break;
case EPOLL:
initEpollBootstrap();
break;
case AUTO:
if (Epoll.isAvailable()) {
initEpollBootstrap();
LOG.info("Transport type 'auto': using EPOLL.");
}
 else {
initNioBootstrap();
LOG.info("Transport type 'auto': using NIO.");
}
}
bootstrap.option(ChannelOption.TCP_NODELAY,true);
bootstrap.option(ChannelOption.SO_KEEPALIVE,true);
bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,config.getClientConnectTimeoutSeconds() * 1000);
bootstrap.option(ChannelOption.ALLOCATOR,nettyBufferPool);
int receiveAndSendBufferSize=config.getSendAndReceiveBufferSize();
if (receiveAndSendBufferSize > 0) {
bootstrap.option(ChannelOption.SO_SNDBUF,receiveAndSendBufferSize);
bootstrap.option(ChannelOption.SO_RCVBUF,receiveAndSendBufferSize);
}
bootstrap.handler(new ChannelInitializer<SocketChannel>(){
@Override public void initChannel(SocketChannel channel) throws Exception {
channel.pipeline().addLast(protocol.getClientChannelHandlers());
}
}
);
long end=System.currentTimeMillis();
LOG.info("Successful initialization (took {} ms).",(end - start));
}
