{
  final int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String dataPointInput=(args.length > 1 ? args[1] : "");
  final String clusterInput=(args.length > 2 ? args[2] : "");
  final String output=(args.length > 3 ? args[3] : "");
  final int numIterations=(args.length > 4 ? Integer.parseInt(args[4]) : 2);
  final String centersOutput=output + "/" + CENTERS_RESULT_SUBDIRECTORY;
  final String taggedPointsOutput=output + "/" + POINTS_RESULT_SUBDIRECTORY;
  FileDataSource pointsSource=new FileDataSource(new CsvInputFormat('|',IntValue.class,DoubleValue.class,DoubleValue.class),dataPointInput,"Data Points");
  FileDataSource clustersSource=new FileDataSource(new CsvInputFormat('|',IntValue.class,DoubleValue.class,DoubleValue.class),clusterInput,"Centers");
  MapOperator dataPoints=MapOperator.builder(new PointBuilder()).name("Build data points").input(pointsSource).build();
  MapOperator clusterPoints=MapOperator.builder(new PointBuilder()).name("Build cluster points").input(clustersSource).build();
  BulkIteration iter=new BulkIteration("k-means loop");
  iter.setInput(clusterPoints);
  iter.setMaximumNumberOfIterations(numIterations);
  MapOperator findNearestClusterCenters=MapOperator.builder(new SelectNearestCenter()).setBroadcastVariable("centers",iter.getPartialSolution()).input(dataPoints).name("Find Nearest Centers").build();
  ReduceOperator recomputeClusterCenter=ReduceOperator.builder(new RecomputeClusterCenter(),IntValue.class,0).input(findNearestClusterCenters).name("Recompute Center Positions").build();
  iter.setNextPartialSolution(recomputeClusterCenter);
  MapOperator findNearestFinalCluster=MapOperator.builder(new SelectNearestCenter()).setBroadcastVariable("centers",iter).input(dataPoints).name("Tag points with final centroid").build();
  FileDataSink newClusterPoints=new FileDataSink(new PointOutFormat(),centersOutput,iter,"Cluster Positions");
  FileDataSink clusterAssignments=new FileDataSink(new PointOutFormat(),taggedPointsOutput,findNearestFinalCluster,"Cluster Assignments");
  Plan plan=new Plan(newClusterPoints,"KMeans Iteration");
  plan.addDataSink(clusterAssignments);
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
