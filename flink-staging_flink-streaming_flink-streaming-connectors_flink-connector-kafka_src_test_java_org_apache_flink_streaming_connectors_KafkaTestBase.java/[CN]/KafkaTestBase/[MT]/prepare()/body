{
  LOG.info("-------------------------------------------------------------------------");
  LOG.info("    Starting KafkaITCase ");
  LOG.info("-------------------------------------------------------------------------");
  LOG.info("Starting KafkaITCase.prepare()");
  File tempDir=new File(System.getProperty("java.io.tmpdir"));
  tmpZkDir=new File(tempDir,"kafkaITcase-zk-dir-" + (UUID.randomUUID().toString()));
  assertTrue("cannot create zookeeper temp dir",tmpZkDir.mkdirs());
  tmpKafkaParent=new File(tempDir,"kafkaITcase-kafka-dir*" + (UUID.randomUUID().toString()));
  assertTrue("cannot create kafka temp dir",tmpKafkaParent.mkdirs());
  List<File> tmpKafkaDirs=new ArrayList<>(NUMBER_OF_KAFKA_SERVERS);
  for (int i=0; i < NUMBER_OF_KAFKA_SERVERS; i++) {
    File tmpDir=new File(tmpKafkaParent,"server-" + i);
    assertTrue("cannot create kafka temp dir",tmpDir.mkdir());
    tmpKafkaDirs.add(tmpDir);
  }
  String kafkaHost="localhost";
  int zkPort=NetUtils.getAvailablePort();
  zookeeperConnectionString="localhost:" + zkPort;
  zookeeper=null;
  brokers=null;
  try {
    LOG.info("Starting Zookeeper");
    zookeeper=new TestingServer(zkPort,tmpZkDir);
    LOG.info("Starting KafkaServer");
    brokers=new ArrayList<>(NUMBER_OF_KAFKA_SERVERS);
    for (int i=0; i < NUMBER_OF_KAFKA_SERVERS; i++) {
      brokers.add(getKafkaServer(i,tmpKafkaDirs.get(i),kafkaHost,zookeeperConnectionString));
      SocketServer socketServer=brokers.get(i).socketServer();
      String host=socketServer.host() == null ? "localhost" : socketServer.host();
      brokerConnectionStrings+=host + ":" + socketServer.port()+ ",";
    }
    LOG.info("ZK and KafkaServer started.");
  }
 catch (  Throwable t) {
    t.printStackTrace();
    fail("Test setup failed: " + t.getMessage());
  }
  standardProps=new Properties();
  standardProps.setProperty("zookeeper.connect",zookeeperConnectionString);
  standardProps.setProperty("bootstrap.servers",brokerConnectionStrings);
  standardProps.setProperty("group.id","flink-tests");
  standardProps.setProperty("auto.commit.enable","false");
  standardProps.setProperty("zookeeper.session.timeout.ms","12000");
  standardProps.setProperty("auto.offset.reset","earliest");
  standardProps.setProperty("fetch.message.max.bytes","256");
  Properties consumerConfigProps=new Properties();
  consumerConfigProps.putAll(standardProps);
  consumerConfigProps.setProperty("auto.offset.reset","smallest");
  standardCC=new ConsumerConfig(consumerConfigProps);
  Configuration flinkConfig=new Configuration();
  flinkConfig.setInteger(ConfigConstants.LOCAL_INSTANCE_MANAGER_NUMBER_TASK_MANAGER,1);
  flinkConfig.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,8);
  flinkConfig.setInteger(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,16);
  flinkConfig.setString(ConfigConstants.DEFAULT_EXECUTION_RETRY_DELAY_KEY,"0 s");
  flink=new ForkableFlinkMiniCluster(flinkConfig,false,StreamingMode.STREAMING);
  flinkPort=flink.getJobManagerRPCPort();
}
