{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(43);
    DataSet<Tuple2<Long,Long>> input=env.generateSequence(1,20).map(new MapFunction<Long,Tuple2<Long,Long>>(){
      @Override public Tuple2<Long,Long> map(      Long value){
        return null;
      }
    }
);
    DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iter=input.iterateDelta(input,100,0);
    iter.closeWith(iter.getWorkset().map(new IdentityMapper<Tuple2<Long,Long>>()).union(iter.getWorkset().map(new IdentityMapper<Tuple2<Long,Long>>())),iter.getWorkset().map(new IdentityMapper<Tuple2<Long,Long>>()).union(iter.getWorkset().map(new IdentityMapper<Tuple2<Long,Long>>()))).print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    WorksetIterationPlanNode iterNode=(WorksetIterationPlanNode)sink.getInput().getSource();
    SingleInputPlanNode nextWorksetNoop=(SingleInputPlanNode)iterNode.getNextWorkSetPlanNode();
    SingleInputPlanNode solutionDeltaNoop=(SingleInputPlanNode)iterNode.getSolutionSetDeltaPlanNode();
    NAryUnionPlanNode nextWorksetUnion=(NAryUnionPlanNode)nextWorksetNoop.getInput().getSource();
    NAryUnionPlanNode solutionDeltaUnion=(NAryUnionPlanNode)solutionDeltaNoop.getInput().getSource();
    assertTrue(nextWorksetNoop.isOnDynamicPath());
    assertTrue(nextWorksetNoop.getCostWeight() >= 1);
    assertTrue(solutionDeltaNoop.isOnDynamicPath());
    assertTrue(solutionDeltaNoop.getCostWeight() >= 1);
    assertTrue(nextWorksetUnion.isOnDynamicPath());
    assertTrue(nextWorksetUnion.getCostWeight() >= 1);
    assertTrue(solutionDeltaUnion.isOnDynamicPath());
    assertTrue(solutionDeltaUnion.getCostWeight() >= 1);
    new JobGraphGenerator().compileJobGraph(op);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
