{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(43);
    IterativeDataSet<Long> iteration=env.generateSequence(-4,1000).iterate(100);
    iteration.closeWith(iteration.map(new IdentityMapper<Long>()).union(iteration.map(new IdentityMapper<Long>()))).print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    BulkIterationPlanNode iterNode=(BulkIterationPlanNode)sink.getInput().getSource();
    SingleInputPlanNode noop=(SingleInputPlanNode)iterNode.getRootOfStepFunction();
    NAryUnionPlanNode union=(NAryUnionPlanNode)noop.getInput().getSource();
    assertTrue(noop.isOnDynamicPath());
    assertTrue(noop.getCostWeight() >= 1);
    assertTrue(union.isOnDynamicPath());
    assertTrue(union.getCostWeight() >= 1);
    new JobGraphGenerator().compileJobGraph(op);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
