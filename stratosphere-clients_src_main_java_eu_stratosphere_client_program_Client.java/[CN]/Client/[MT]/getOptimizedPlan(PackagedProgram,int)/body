{
  Thread.currentThread().setContextClassLoader(prog.getUserCodeClassLoader());
  if (prog.isUsingProgramEntryPoint()) {
    return getOptimizedPlan(prog.getPlanWithJars(),parallelism);
  }
 else   if (prog.isUsingInteractiveMode()) {
    OptimizerPlanEnvironment env=new OptimizerPlanEnvironment(this.compiler);
    if (parallelism > 0) {
      env.setDegreeOfParallelism(parallelism);
    }
    env.setAsContext();
    PrintStream originalOut=System.out;
    PrintStream originalErr=System.err;
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    ByteArrayOutputStream baes=new ByteArrayOutputStream();
    System.setErr(new PrintStream(baes));
    try {
      prog.invokeInteractiveModeForExecution();
    }
 catch (    ProgramInvocationException e) {
      System.setOut(originalOut);
      System.setErr(originalErr);
      System.err.println(baes);
      System.out.println(baos);
      throw e;
    }
catch (    Throwable t) {
      System.setOut(originalOut);
      System.setErr(originalErr);
      System.err.println(baes);
      System.out.println(baos);
      if (env.optimizerPlan != null) {
        return env.optimizerPlan;
      }
 else {
        throw new ProgramInvocationException("The program caused an error: ",t);
      }
    }
 finally {
      System.setOut(originalOut);
      System.setErr(originalErr);
      System.err.println(baes);
      System.out.println(baos);
    }
    throw new ProgramInvocationException("The program plan could not be fetched. The program silently swallowed the control flow exceptions.\n" + "System.err: " + StringEscapeUtils.escapeHtml(baes.toString()) + " \n"+ "System.out: "+ StringEscapeUtils.escapeHtml(baos.toString())+ " \n");
  }
 else {
    throw new RuntimeException();
  }
}
