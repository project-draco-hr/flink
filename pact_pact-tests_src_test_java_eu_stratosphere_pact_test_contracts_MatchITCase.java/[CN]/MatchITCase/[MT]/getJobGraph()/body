{
  String pathPrefix=getFilesystemProvider().getURIPrefix() + getFilesystemProvider().getTempDirPath();
  FileDataSource input_left=new FileDataSource(ContractITCaseInputFormat.class,pathPrefix + "/match_left");
  DelimitedInputFormat.configureDelimitedFormat(input_left).recordDelimiter('\n');
  input_left.setDegreeOfParallelism(config.getInteger("MatchTest#NoSubtasks",1));
  FileDataSource input_right=new FileDataSource(ContractITCaseInputFormat.class,pathPrefix + "/match_right");
  DelimitedInputFormat.configureDelimitedFormat(input_right).recordDelimiter('\n');
  input_right.setDegreeOfParallelism(config.getInteger("MatchTest#NoSubtasks",1));
  MatchContract testMatcher=MatchContract.builder(TestMatcher.class,PactString.class,0,0).build();
  testMatcher.setDegreeOfParallelism(config.getInteger("MatchTest#NoSubtasks",1));
  testMatcher.getParameters().setString(PactCompiler.HINT_LOCAL_STRATEGY,config.getString("MatchTest#LocalStrategy",""));
  if (config.getString("MatchTest#ShipStrategy","").equals("BROADCAST_FIRST")) {
    testMatcher.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY_FIRST_INPUT,PactCompiler.HINT_SHIP_STRATEGY_BROADCAST);
    testMatcher.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY_SECOND_INPUT,PactCompiler.HINT_SHIP_STRATEGY_FORWARD);
  }
 else   if (config.getString("MatchTest#ShipStrategy","").equals("BROADCAST_SECOND")) {
    testMatcher.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY_FIRST_INPUT,PactCompiler.HINT_SHIP_STRATEGY_FORWARD);
    testMatcher.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY_SECOND_INPUT,PactCompiler.HINT_SHIP_STRATEGY_BROADCAST);
  }
 else {
    testMatcher.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY,config.getString("MatchTest#ShipStrategy",""));
  }
  FileDataSink output=new FileDataSink(ContractITCaseOutputFormat.class,pathPrefix + "/result.txt");
  output.setDegreeOfParallelism(1);
  output.addInput(testMatcher);
  testMatcher.addFirstInput(input_left);
  testMatcher.addSecondInput(input_right);
  Plan plan=new Plan(output);
  PactCompiler pc=new PactCompiler();
  OptimizedPlan op=pc.compile(plan);
  NepheleJobGraphGenerator jgg=new NepheleJobGraphGenerator();
  return jgg.compileJobGraph(op);
}
