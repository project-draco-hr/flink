{
  try {
    Future<Object> future=jobManager.ask(new RequestJobDetails(includeRunningJobs,includeFinishedJobs),timeout);
    MultipleJobsDetails result=(MultipleJobsDetails)Await.result(future,timeout);
    if (includeRunningJobs && includeFinishedJobs) {
      return JsonFactory.generateRunningAndFinishedJobDetailsJSON(result.getRunningJobs(),result.getFinishedJobs());
    }
 else {
      return JsonFactory.generateMultipleJobsDetailsJSON(includeRunningJobs ? result.getRunningJobs() : result.getFinishedJobs());
    }
  }
 catch (  Exception e) {
    throw new Exception("Failed to fetch the status overview: " + e.getMessage(),e);
  }
}
