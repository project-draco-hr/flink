{
  this.statistics=stats;
  this.costEstimator=estimator;
  Configuration config=GlobalConfiguration.getConfiguration();
  this.maxMachines=config.getInteger(PactConfigConstants.MAXIMUM_NUMBER_MACHINES_KEY,PactConfigConstants.DEFAULT_MAX_NUMBER_MACHINES);
  this.defaultDegreeOfParallelism=config.getInteger(PactConfigConstants.DEFAULT_PARALLELIZATION_DEGREE_KEY,PactConfigConstants.DEFAULT_PARALLELIZATION_DEGREE);
  int maxInNodePar=config.getInteger(PactConfigConstants.PARALLELIZATION_MAX_INTRA_NODE_DEGREE_KEY,PactConfigConstants.DEFAULT_MAX_INTRA_NODE_PARALLELIZATION_DEGREE);
  if (maxInNodePar == 0 || maxInNodePar < -1) {
    LOG.error("Invalid maximum degree of intra-node parallelism: " + maxInNodePar + ". Ignoring parameter.");
    maxInNodePar=PactConfigConstants.DEFAULT_MAX_INTRA_NODE_PARALLELIZATION_DEGREE;
  }
  this.maxIntraNodeParallelism=maxInNodePar;
  if (jobManagerConnection != null) {
    this.jobManagerAddress=jobManagerConnection;
  }
 else {
    final String address=config.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null);
    if (address == null) {
      throw new CompilerException("Cannot find address to job manager's RPC service in the global configuration.");
    }
    final int port=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
    if (port < 0) {
      throw new CompilerException("Cannot find port to job manager's RPC service in the global configuration.");
    }
    this.jobManagerAddress=new InetSocketAddress(address,port);
  }
}
