{
  if (!this.allNodes.add(visitable)) {
    return false;
  }
  if (visitable instanceof SinkPlanNode) {
    this.sinks.add((SinkPlanNode)visitable);
  }
 else   if (visitable instanceof SourcePlanNode) {
    this.sources.add((SourcePlanNode)visitable);
  }
 else   if (visitable instanceof BulkPartialSolutionPlanNode) {
    final BulkPartialSolutionPlanNode pspn=(BulkPartialSolutionPlanNode)visitable;
    final IterationPlanNode iteration=this.stackOfIterationNodes.peekLast();
    if (iteration == null || !(iteration instanceof BulkIterationPlanNode)) {
      throw new CompilerException("Bug: Error finalizing the plan. " + "Cannot associate the node for a partial solutions with its containing iteration.");
    }
    pspn.setContainingIterationNode((BulkIterationPlanNode)iteration);
  }
 else   if (visitable instanceof WorksetPlanNode) {
    final WorksetPlanNode wspn=(WorksetPlanNode)visitable;
    final IterationPlanNode iteration=this.stackOfIterationNodes.peekLast();
    if (iteration == null || !(iteration instanceof WorksetIterationPlanNode)) {
      throw new CompilerException("Bug: Error finalizing the plan. " + "Cannot associate the node for a partial solutions with its containing iteration.");
    }
    wspn.setContainingIterationNode((WorksetIterationPlanNode)iteration);
  }
 else   if (visitable instanceof SolutionSetPlanNode) {
    final SolutionSetPlanNode sspn=(SolutionSetPlanNode)visitable;
    final IterationPlanNode iteration=this.stackOfIterationNodes.peekLast();
    if (iteration == null || !(iteration instanceof WorksetIterationPlanNode)) {
      throw new CompilerException("Bug: Error finalizing the plan. " + "Cannot associate the node for a partial solutions with its containing iteration.");
    }
    sspn.setContainingIterationNode((WorksetIterationPlanNode)iteration);
  }
  for (Iterator<Channel> iter=visitable.getInputs(); iter.hasNext(); ) {
    final Channel conn=iter.next();
    conn.setTarget(visitable);
    conn.getSource().addOutgoingChannel(conn);
  }
  for (  Channel c : visitable.getBroadcastInputs()) {
    c.setTarget(visitable);
    c.getSource().addOutgoingChannel(c);
  }
  this.memoryConsumerWeights+=visitable.getMemoryConsumerWeight();
  for (Iterator<Channel> channels=visitable.getInputs(); channels.hasNext(); ) {
    final Channel c=channels.next();
    if (c.getLocalStrategy().dams()) {
      this.memoryConsumerWeights++;
    }
    if (c.getTempMode() != TempMode.NONE) {
      this.memoryConsumerWeights++;
    }
  }
  for (  Channel c : visitable.getBroadcastInputs()) {
    if (c.getLocalStrategy().dams()) {
      this.memoryConsumerWeights++;
    }
    if (c.getTempMode() != TempMode.NONE) {
      this.memoryConsumerWeights++;
    }
  }
  if (visitable instanceof IterationPlanNode) {
    final IterationPlanNode iterNode=(IterationPlanNode)visitable;
    this.stackOfIterationNodes.addLast(iterNode);
    ((IterationPlanNode)visitable).acceptForStepFunction(this);
    this.stackOfIterationNodes.removeLast();
  }
  return true;
}
