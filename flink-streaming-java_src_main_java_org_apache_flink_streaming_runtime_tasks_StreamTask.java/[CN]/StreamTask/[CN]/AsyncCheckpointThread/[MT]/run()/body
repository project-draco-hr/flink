{
  try {
    for (    StreamTaskState state : states) {
      if (state != null) {
        if (state.getFunctionState() instanceof AsynchronousStateHandle) {
          AsynchronousStateHandle<Serializable> asyncState=(AsynchronousStateHandle<Serializable>)state.getFunctionState();
          state.setFunctionState(asyncState.materialize());
        }
        if (state.getOperatorState() instanceof AsynchronousStateHandle) {
          AsynchronousStateHandle<?> asyncState=(AsynchronousStateHandle<?>)state.getOperatorState();
          state.setOperatorState(asyncState.materialize());
        }
        if (state.getKvStates() != null) {
          Set<String> keys=state.getKvStates().keySet();
          HashMap<String,KvStateSnapshot<?,?,?,?,?>> kvStates=state.getKvStates();
          for (          String key : keys) {
            if (kvStates.get(key) instanceof AsynchronousKvStateSnapshot) {
              AsynchronousKvStateSnapshot<?,?,?,?,?> asyncHandle=(AsynchronousKvStateSnapshot<?,?,?,?,?>)kvStates.get(key);
              kvStates.put(key,asyncHandle.materialize());
            }
          }
        }
      }
    }
    StreamTaskStateList allStates=new StreamTaskStateList(states);
    owner.lastCheckpointSize=allStates.getStateSize();
    owner.getEnvironment().acknowledgeCheckpoint(checkpointId,allStates);
    LOG.debug("Finished asynchronous checkpoints for checkpoint {} on task {}",checkpointId,getName());
  }
 catch (  Exception e) {
    if (owner.isRunning()) {
      LOG.error("Caught exception while materializing asynchronous checkpoints.",e);
    }
    if (owner.asyncException == null) {
      owner.asyncException=new AsynchronousException(e);
    }
  }
 finally {
synchronized (cancelables) {
      cancelables.remove(this);
    }
  }
}
