{
  StateBackend<?> configuredBackend=configuration.getStateBackend(userClassLoader);
  if (configuredBackend != null) {
    LOG.info("Using user-defined state backend: " + configuredBackend);
    return configuredBackend;
  }
 else {
    Configuration flinkConfig=getEnvironment().getTaskManagerInfo().getConfiguration();
    String backendName=flinkConfig.getString(ConfigConstants.STATE_BACKEND,null);
    if (backendName == null) {
      LOG.warn("No state backend has been specified, using default state backend (Memory / JobManager)");
      backendName="jobmanager";
    }
    backendName=backendName.toLowerCase();
switch (backendName) {
case "jobmanager":
      LOG.info("State backend is set to heap memory (checkpoint to jobmanager)");
    return MemoryStateBackend.defaultInstance();
case "filesystem":
  FsStateBackend backend=new FsStateBackendFactory().createFromConfig(flinkConfig);
LOG.info("State backend is set to filesystem (checkpoints to filesystem \"" + backend.getBasePath() + "\")");
return backend;
default :
try {
@SuppressWarnings("rawtypes") Class<? extends StateBackendFactory> clazz=Class.forName(backendName,false,userClassLoader).asSubclass(StateBackendFactory.class);
return clazz.newInstance().createFromConfig(flinkConfig);
}
 catch (ClassNotFoundException e) {
throw new IllegalConfigurationException("Cannot find configured state backend: " + backendName);
}
catch (ClassCastException e) {
throw new IllegalConfigurationException("The class configured under '" + ConfigConstants.STATE_BACKEND + "' is not a valid state backend factory ("+ backendName+ ')');
}
catch (Throwable t) {
throw new IllegalConfigurationException("Cannot create configured state backend",t);
}
}
}
}
