{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().enableObjectReuse();
  ParameterTool parameters=ParameterTool.fromArgs(args);
  int scale=parameters.getInt("scale",DEFAULT_SCALE);
  int edgeFactor=parameters.getInt("edge_factor",DEFAULT_EDGE_FACTOR);
  RandomGenerableFactory<JDKRandomGenerator> rnd=new JDKRandomGeneratorFactory();
  long vertexCount=1 << scale;
  long edgeCount=vertexCount * edgeFactor;
  boolean simplify=parameters.getBoolean("simplify",DEFAULT_SIMPLIFY);
  boolean clipAndFlip=parameters.getBoolean("clip_and_flip",DEFAULT_CLIP_AND_FLIP);
  DataSet<Tuple2<LongValue,LongValue>> edges=new RMatGraph<>(env,rnd,vertexCount,edgeCount).setSimpleGraph(simplify,clipAndFlip).generate().getEdges().project(0,1);
switch (parameters.get("output","")) {
case "print":
    edges.print();
  break;
case "hash":
System.out.println(DataSetUtils.checksumHashCode(edges));
break;
case "csv":
String filename=parameters.get("filename");
String row_delimiter=parameters.get("row_delimiter",CsvOutputFormat.DEFAULT_LINE_DELIMITER);
String field_delimiter=parameters.get("field_delimiter",CsvOutputFormat.DEFAULT_FIELD_DELIMITER);
edges.writeAsCsv(filename,row_delimiter,field_delimiter);
env.execute();
break;
default :
System.out.println("A Graph500 generator using the Recursive Matrix (RMat) graph generator.");
System.out.println();
System.out.println("The graph matrix contains 2^scale vertices although not every vertex will");
System.out.println("be represented in an edge. The number of edges is edge_factor * 2^scale edges");
System.out.println("although some edges may be duplicates.");
System.out.println();
System.out.println("Note: this does not yet implement permutation of vertex labels or edges.");
System.out.println();
System.out.println("usage:");
System.out.println("  Graph500 [--scale SCALE] [--edge_factor EDGE_FACTOR] --output print");
System.out.println("  Graph500 [--scale SCALE] [--edge_factor EDGE_FACTOR] --output hash");
System.out.println("  Graph500 [--scale SCALE] [--edge_factor EDGE_FACTOR] --output csv" + " --filename FILENAME [--row_delimiter ROW_DELIMITER] [--field_delimiter FIELD_DELIMITER]");
return;
}
JobExecutionResult result=env.getLastJobExecutionResult();
NumberFormat nf=NumberFormat.getInstance();
System.out.println("Execution runtime: " + nf.format(result.getNetRuntime()) + " ms");
}
