{
  TypeWrapper<Tuple5<Integer,String,Integer,String,Integer>> inTypeWrapper=new ObjectTypeWrapper<Tuple5<Integer,String,Integer,String,Integer>>(new Tuple5<Integer,String,Integer,String,Integer>(2,"a",3,"b",4));
  int[] fields=new int[]{4,4,3};
  Class<?>[] classes=new Class<?>[]{Integer.class,Integer.class,String.class};
  TypeWrapper<Tuple3<Integer,Integer,String>> outTypeWrapper=new ProjectTypeWrapper<Tuple5<Integer,String,Integer,String,Integer>,Tuple3<Integer,Integer,String>>(inTypeWrapper,fields,classes);
  ProjectInvokable<Tuple5<Integer,String,Integer,String,Integer>,Tuple3<Integer,Integer,String>> invokable=new ProjectInvokable<Tuple5<Integer,String,Integer,String,Integer>,Tuple3<Integer,Integer,String>>(fields,outTypeWrapper);
  List<Tuple5<Integer,String,Integer,String,Integer>> input=new ArrayList<Tuple5<Integer,String,Integer,String,Integer>>();
  input.add(new Tuple5<Integer,String,Integer,String,Integer>(2,"a",3,"b",4));
  input.add(new Tuple5<Integer,String,Integer,String,Integer>(2,"s",3,"c",2));
  input.add(new Tuple5<Integer,String,Integer,String,Integer>(2,"a",3,"c",2));
  input.add(new Tuple5<Integer,String,Integer,String,Integer>(2,"a",3,"a",7));
  List<Tuple3<Integer,Integer,String>> expected=new ArrayList<Tuple3<Integer,Integer,String>>();
  expected.add(new Tuple3<Integer,Integer,String>(4,4,"b"));
  expected.add(new Tuple3<Integer,Integer,String>(2,2,"c"));
  expected.add(new Tuple3<Integer,Integer,String>(2,2,"c"));
  expected.add(new Tuple3<Integer,Integer,String>(7,7,"a"));
  assertEquals(expected,MockInvokable.createAndExecute(invokable,input));
}
