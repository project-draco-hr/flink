{
  final PlanNode inputSource1=in1.getSource();
  final PlanNode inputSource2=in2.getSource();
  for (  List<NamedChannel> broadcastChannelsCombination : Sets.cartesianProduct(broadcastPlanChannels)) {
    boolean validCombination=true;
    for (int i=0; i < broadcastChannelsCombination.size(); i++) {
      NamedChannel nc=broadcastChannelsCombination.get(i);
      PlanNode bcSource=nc.getSource();
      if (!(areBranchCompatible(bcSource,inputSource1) || areBranchCompatible(bcSource,inputSource2))) {
        validCombination=false;
        break;
      }
      for (int k=0; k < i; k++) {
        PlanNode otherBcSource=broadcastChannelsCombination.get(k).getSource();
        if (!areBranchCompatible(bcSource,otherBcSource)) {
          validCombination=false;
          break;
        }
      }
    }
    if (!validCombination) {
      continue;
    }
    placePipelineBreakersIfNecessary(operator.getStrategy(),in1,in2);
    DualInputPlanNode node=operator.instantiate(in1,in2,this);
    node.setBroadcastInputs(broadcastChannelsCombination);
    SemanticProperties semPropsGlobalPropFiltering=getSemanticPropertiesForGlobalPropertyFiltering();
    GlobalProperties gp1=in1.getGlobalProperties().clone().filterBySemanticProperties(semPropsGlobalPropFiltering,0);
    GlobalProperties gp2=in2.getGlobalProperties().clone().filterBySemanticProperties(semPropsGlobalPropFiltering,1);
    GlobalProperties combined=operator.computeGlobalProperties(gp1,gp2);
    SemanticProperties semPropsLocalPropFiltering=getSemanticPropertiesForLocalPropertyFiltering();
    LocalProperties lp1=in1.getLocalProperties().clone().filterBySemanticProperties(semPropsLocalPropFiltering,0);
    LocalProperties lp2=in2.getLocalProperties().clone().filterBySemanticProperties(semPropsLocalPropFiltering,1);
    LocalProperties locals=operator.computeLocalProperties(lp1,lp2);
    node.initProperties(combined,locals);
    node.updatePropertiesWithUniqueSets(getUniqueFields());
    target.add(node);
  }
}
