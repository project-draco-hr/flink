{
  final Configuration conf=getOperator().getParameters();
  ShipStrategyType preSet1=null;
  ShipStrategyType preSet2=null;
  String shipStrategy=conf.getString(Optimizer.HINT_SHIP_STRATEGY,null);
  if (shipStrategy != null) {
    if (Optimizer.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      preSet1=preSet2=ShipStrategyType.FORWARD;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      preSet1=preSet2=ShipStrategyType.BROADCAST;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_REPARTITION_HASH.equals(shipStrategy)) {
      preSet1=preSet2=ShipStrategyType.PARTITION_HASH;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_REPARTITION_RANGE.equals(shipStrategy)) {
      preSet1=preSet2=ShipStrategyType.PARTITION_RANGE;
    }
 else     if (shipStrategy.equalsIgnoreCase(Optimizer.HINT_SHIP_STRATEGY_REPARTITION)) {
      preSet1=preSet2=ShipStrategyType.PARTITION_RANDOM;
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy: " + shipStrategy);
    }
  }
  shipStrategy=conf.getString(Optimizer.HINT_SHIP_STRATEGY_FIRST_INPUT,null);
  if (shipStrategy != null) {
    if (Optimizer.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      preSet1=ShipStrategyType.FORWARD;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      preSet1=ShipStrategyType.BROADCAST;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_REPARTITION_HASH.equals(shipStrategy)) {
      preSet1=ShipStrategyType.PARTITION_HASH;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_REPARTITION_RANGE.equals(shipStrategy)) {
      preSet1=ShipStrategyType.PARTITION_RANGE;
    }
 else     if (shipStrategy.equalsIgnoreCase(Optimizer.HINT_SHIP_STRATEGY_REPARTITION)) {
      preSet1=ShipStrategyType.PARTITION_RANDOM;
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy of input one: " + shipStrategy);
    }
  }
  shipStrategy=conf.getString(Optimizer.HINT_SHIP_STRATEGY_SECOND_INPUT,null);
  if (shipStrategy != null) {
    if (Optimizer.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      preSet2=ShipStrategyType.FORWARD;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      preSet2=ShipStrategyType.BROADCAST;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_REPARTITION_HASH.equals(shipStrategy)) {
      preSet2=ShipStrategyType.PARTITION_HASH;
    }
 else     if (Optimizer.HINT_SHIP_STRATEGY_REPARTITION_RANGE.equals(shipStrategy)) {
      preSet2=ShipStrategyType.PARTITION_RANGE;
    }
 else     if (shipStrategy.equalsIgnoreCase(Optimizer.HINT_SHIP_STRATEGY_REPARTITION)) {
      preSet2=ShipStrategyType.PARTITION_RANDOM;
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy of input two: " + shipStrategy);
    }
  }
  DualInputOperator<?,?,?,?> contr=getOperator();
  Operator<?> leftPred=contr.getFirstInput();
  Operator<?> rightPred=contr.getSecondInput();
  OptimizerNode pred1;
  DagConnection conn1;
  if (leftPred == null) {
    throw new CompilerException("Error: Node for '" + getOperator().getName() + "' has no input set for first input.");
  }
 else {
    pred1=contractToNode.get(leftPred);
    conn1=new DagConnection(pred1,this,defaultExecutionMode);
    if (preSet1 != null) {
      conn1.setShipStrategy(preSet1);
    }
  }
  this.input1=conn1;
  pred1.addOutgoingConnection(conn1);
  OptimizerNode pred2;
  DagConnection conn2;
  if (rightPred == null) {
    throw new CompilerException("Error: Node for '" + getOperator().getName() + "' has no input set for second input.");
  }
 else {
    pred2=contractToNode.get(rightPred);
    conn2=new DagConnection(pred2,this,defaultExecutionMode);
    if (preSet2 != null) {
      conn2.setShipStrategy(preSet2);
    }
  }
  this.input2=conn2;
  pred2.addOutgoingConnection(conn2);
}
