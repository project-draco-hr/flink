{
  ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment();
  DataSet<Tuple3<Integer,Long,String>> input=CollectionDataSets.get3TupleDataSet(env);
  final TestDataDist1 dist=new TestDataDist1();
  env.setParallelism(dist.getParallelism());
  DataSet<Boolean> result=DataSetUtils.partitionByRange(input,dist,0).mapPartition(new RichMapPartitionFunction<Tuple3<Integer,Long,String>,Boolean>(){
    @Override public void mapPartition(    Iterable<Tuple3<Integer,Long,String>> values,    Collector<Boolean> out) throws Exception {
      int pIdx=getRuntimeContext().getIndexOfThisSubtask();
      for (      Tuple3<Integer,Long,String> s : values) {
        boolean correctlyPartitioned=true;
        if (pIdx == 0) {
          Integer[] upper=dist.boundaries[0];
          if (s.f0.compareTo(upper[0]) > 0) {
            correctlyPartitioned=false;
          }
        }
 else         if (pIdx > 0 && pIdx < dist.getParallelism() - 1) {
          Integer[] lower=dist.boundaries[pIdx - 1];
          Integer[] upper=dist.boundaries[pIdx];
          if (s.f0.compareTo(upper[0]) > 0 || (s.f0.compareTo(lower[0]) <= 0)) {
            correctlyPartitioned=false;
          }
        }
 else {
          Integer[] lower=dist.boundaries[pIdx - 1];
          if ((s.f0.compareTo(lower[0]) <= 0)) {
            correctlyPartitioned=false;
          }
        }
        if (!correctlyPartitioned) {
          fail("Record was not correctly partitioned: " + s.toString());
        }
      }
    }
  }
);
  result.output(new DiscardingOutputFormat<Boolean>());
  env.execute();
}
