{
  try {
    AtomicInteger methodCounter=new AtomicInteger();
    CoGroupOperator coGroupOp=CoGroupOperator.builder(new TestCoGroupFunction(methodCounter),LongValue.class,1,2).build();
    RichFunction cogrouper=(RichFunction)coGroupOp.getUserCodeWrapper().getUserCodeObject();
    cogrouper.close();
    cogrouper.open(new Configuration());
    assertEquals(2,methodCounter.get());
    final List<Record> target=new ArrayList<Record>();
    Collector<Record> collector=new Collector<Record>(){
      @Override public void collect(      Record record){
        target.add(record);
      }
      @Override public void close(){
      }
    }
;
    List<Record> source1=new ArrayList<Record>();
    source1.add(new Record(new IntValue(42)));
    source1.add(new Record(new IntValue(13)));
    List<Record> source2=new ArrayList<Record>();
    source2.add(new Record(new LongValue(11)));
    source2.add(new Record(new LongValue(17)));
    ((org.apache.flink.api.common.functions.CoGroupFunction<Record,Record,Record>)cogrouper).coGroup(source1,source2,collector);
    assertEquals(4,target.size());
    assertEquals(new IntValue(42),target.get(0).getField(0,IntValue.class));
    assertEquals(new IntValue(13),target.get(1).getField(0,IntValue.class));
    assertEquals(new LongValue(11),target.get(2).getField(0,LongValue.class));
    assertEquals(new LongValue(17),target.get(3).getField(0,LongValue.class));
    target.clear();
    SerializationUtils.clone((java.io.Serializable)cogrouper);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
