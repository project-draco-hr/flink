{
  final KeyGroupedIterator<Record> groupIter=new KeyGroupedIterator<Record>(data,serializer,comparator);
  return new Iterator<Integer>(){
    private boolean hasNext=false;
    @Override public boolean hasNext(){
      if (hasNext) {
        return true;
      }
      try {
        hasNext=groupIter.nextKey();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      return hasNext;
    }
    @Override public Integer next(){
      if (hasNext()) {
        hasNext=false;
        Iterator<Record> values=groupIter.getValues();
        Record rec=null;
        int cnt=0;
        while (values.hasNext()) {
          rec=values.next();
          cnt+=rec.getField(1,IntValue.class).getValue();
        }
        return cnt;
      }
 else {
        throw new NoSuchElementException();
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
