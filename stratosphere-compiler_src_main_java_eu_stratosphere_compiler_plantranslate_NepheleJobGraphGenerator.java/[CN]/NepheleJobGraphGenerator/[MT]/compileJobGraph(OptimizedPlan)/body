{
  this.jobGraph=new JobGraph(program.getJobName());
  this.vertices=new HashMap<PlanNode,AbstractJobVertex>();
  this.chainedTasks=new HashMap<PlanNode,TaskInChain>();
  this.chainedTasksInSequence=new ArrayList<TaskInChain>();
  this.auxVertices=new ArrayList<AbstractJobVertex>();
  this.iterations=new HashMap<IterationPlanNode,IterationDescriptor>();
  this.maxDegreeVertex=null;
  program.accept(this);
  for (  IterationDescriptor iteration : this.iterations.values()) {
    if (iteration.getIterationNode() instanceof BulkIterationPlanNode) {
      finalizeBulkIteration(iteration);
    }
 else     if (iteration.getIterationNode() instanceof WorksetIterationPlanNode) {
      finalizeWorksetIteration(iteration);
    }
 else {
      throw new CompilerException();
    }
  }
  for (int i=0; i < this.chainedTasksInSequence.size(); i++) {
    TaskInChain tic=this.chainedTasksInSequence.get(i);
    TaskConfig t=new TaskConfig(tic.getContainingVertex().getConfiguration());
    t.addChainedTask(tic.getChainedTask(),tic.getTaskConfig(),tic.getTaskName());
  }
  if (program.getInstanceTypeName() != null) {
    this.maxDegreeVertex.setInstanceType(program.getInstanceTypeName());
  }
 else {
    LOG.warn("No instance type assigned to JobVertex.");
  }
  for (  AbstractJobVertex vertex : this.vertices.values()) {
    if (vertex != this.maxDegreeVertex) {
      vertex.setVertexToShareInstancesWith(this.maxDegreeVertex);
    }
  }
  for (  AbstractJobVertex vertex : this.auxVertices) {
    if (vertex != this.maxDegreeVertex) {
      vertex.setVertexToShareInstancesWith(this.maxDegreeVertex);
    }
  }
  for (  Entry<String,DistributedCacheEntry> e : program.getOriginalPactPlan().getCachedFiles()) {
    DistributedCache.writeFileInfoToConfig(e.getKey(),e.getValue(),this.jobGraph.getJobConfiguration());
  }
  JobGraph graph=this.jobGraph;
  this.maxDegreeVertex=null;
  this.vertices=null;
  this.chainedTasks=null;
  this.chainedTasksInSequence=null;
  this.auxVertices=null;
  this.iterations=null;
  this.jobGraph=null;
  return graph;
}
