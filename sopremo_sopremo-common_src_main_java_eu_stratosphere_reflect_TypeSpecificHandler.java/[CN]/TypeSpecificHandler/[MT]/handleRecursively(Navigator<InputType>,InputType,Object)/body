{
  List<OutputBase> childTypes=new ArrayList<OutputBase>();
  for (  InputType child : navigator.getConnectedNodes(in)) {
    OutputBase handledResult=this.handleRecursively(navigator,child,params);
    if (this.flattenCollection && handledResult instanceof Collection<?>)     childTypes.addAll((Collection<? extends OutputBase>)handledResult);
 else     if (handledResult != null)     childTypes.add(handledResult);
  }
  Object[] parameters=new Object[params.length + 1];
  parameters[0]=childTypes;
  System.arraycopy(params,0,parameters,1,params.length);
  OutputBase convertedType=this.handle(in,parameters);
  if (convertedType == null && this.passthroughChildren) {
    if (Collection.class.isAssignableFrom(this.outputBase))     return (OutputBase)childTypes;
    return childTypes.isEmpty() ? null : childTypes.get(0);
  }
  return convertedType;
}
