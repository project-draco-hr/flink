{
  this.handler=(Handler)handler;
  Class<?> handlerClass=handler.getClass();
  BoundType bindings=ReflectUtil.getBindingOfSuperclass(handler.getClass(),TypeHandler.class);
  Method callback;
  try {
    callback=handlerClass.getDeclaredMethod("convert",new Class[]{bindings.getParameters()[0].getType(),List.class});
  }
 catch (  NoSuchMethodException e) {
    throw new IllegalStateException("class should have implemented the given method");
  }
  AppendChildren annotation=this.getAnnotation(handlerClass,callback,AppendChildren.class);
  if (annotation != null)   this.appendIndex=annotation.fromIndex();
  this.stopRecursion=this.getAnnotation(handlerClass,callback,Leaf.class) != null;
}
