{
  final Configuration configuration=GlobalConfiguration.getConfiguration();
  if (this.timeout != null) {
    configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT,this.timeout);
  }
  try {
    final ActorRef jobManager=this.getJobManager();
    final FiniteDuration askTimeout=this.getTimeout();
    final Future<Object> response=Patterns.ask(jobManager,JobManagerMessages.getRequestRunningJobsStatus(),new Timeout(askTimeout));
    Object result;
    try {
      result=Await.result(response,askTimeout);
    }
 catch (    final Exception e) {
      throw new RuntimeException("Could not retrieve running jobs from the JobManager",e);
    }
    if (result instanceof RunningJobsStatus) {
      final List<JobStatusMessage> jobs=((RunningJobsStatus)result).getStatusMessages();
      for (      final JobStatusMessage status : jobs) {
        if (status.getJobName().equals(id)) {
          return status.getJobId();
        }
      }
    }
 else {
      throw new RuntimeException("ReqeustRunningJobs requires a response of type " + "RunningJobs. Instead the response is of type " + result.getClass() + ".");
    }
  }
 catch (  final IOException e) {
    throw new RuntimeException("Could not connect to Flink JobManager with address " + this.jobManagerHost + ":"+ this.jobManagerPort,e);
  }
  return null;
}
