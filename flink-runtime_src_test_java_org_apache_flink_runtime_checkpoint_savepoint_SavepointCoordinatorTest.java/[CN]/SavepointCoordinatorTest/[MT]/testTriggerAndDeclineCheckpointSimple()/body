{
  JobID jobId=new JobID();
  long checkpointTimeout=60 * 1000;
  long timestamp=1272635;
  ExecutionVertex[] vertices=new ExecutionVertex[]{mockExecutionVertex(jobId),mockExecutionVertex(jobId)};
  MockCheckpointIdCounter checkpointIdCounter=new MockCheckpointIdCounter();
  SavepointStore savepointStore=new HeapSavepointStore();
  SavepointCoordinator coordinator=createSavepointCoordinator(jobId,checkpointTimeout,vertices,vertices,vertices,checkpointIdCounter,savepointStore);
  Future<String> savepointPathFuture=coordinator.triggerSavepoint(timestamp);
  assertFalse(savepointPathFuture.isCompleted());
  long checkpointId=checkpointIdCounter.getLastReturnedCount();
  assertEquals(0,checkpointId);
  for (  ExecutionVertex vertex : vertices) {
    verifyTriggerCheckpoint(vertex,checkpointId,timestamp);
  }
  PendingCheckpoint pendingCheckpoint=coordinator.getPendingCheckpoints().get(checkpointId);
  verifyPendingCheckpoint(pendingCheckpoint,jobId,checkpointId,timestamp,0,2,0,false,false);
  coordinator.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jobId,vertices[0].getCurrentExecutionAttempt().getAttemptId(),checkpointId,createSerializedStateHandle(vertices[0]),0));
  coordinator.receiveDeclineMessage(new DeclineCheckpoint(jobId,vertices[1].getCurrentExecutionAttempt().getAttemptId(),checkpointId,0));
  assertTrue(pendingCheckpoint.isDiscarded());
  assertEquals(0,coordinator.getSuccessfulCheckpoints().size());
  assertTrue(savepointPathFuture.isCompleted());
  try {
    Await.result(savepointPathFuture.failed(),FiniteDuration.Zero());
    fail("Did not throw expected exception");
  }
 catch (  Throwable ignored) {
  }
  assertEquals(0,getSavepointPromises(coordinator).size());
  coordinator.shutdown();
}
