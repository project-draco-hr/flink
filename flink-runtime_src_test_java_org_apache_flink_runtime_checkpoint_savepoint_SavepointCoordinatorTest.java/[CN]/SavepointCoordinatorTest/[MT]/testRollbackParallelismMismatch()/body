{
  JobID jobId=new JobID();
  ExecutionJobVertex[] jobVertices=new ExecutionJobVertex[]{mockExecutionJobVertex(jobId,new JobVertexID(),4),mockExecutionJobVertex(jobId,new JobVertexID(),4)};
  ExecutionVertex[] triggerVertices=jobVertices[0].getTaskVertices();
  ExecutionVertex[] ackVertices=new ExecutionVertex[8];
  int index=0;
  for (  ExecutionJobVertex jobVertex : jobVertices) {
    for (    ExecutionVertex vertex : jobVertex.getTaskVertices()) {
      ackVertices[index++]=vertex;
    }
  }
  HeapSavepointStore savepointStore=new HeapSavepointStore();
  SavepointCoordinator coordinator=createSavepointCoordinator(jobId,60 * 1000,triggerVertices,ackVertices,new ExecutionVertex[]{},new MockCheckpointIdCounter(),savepointStore);
  Future<String> savepointPathFuture=coordinator.triggerSavepoint(1231273123);
  for (  ExecutionVertex vertex : ackVertices) {
    ExecutionAttemptID attemptId=vertex.getCurrentExecutionAttempt().getAttemptId();
    coordinator.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jobId,attemptId,0,createSerializedStateHandle(vertex),0));
  }
  String savepointPath=Await.result(savepointPathFuture,FiniteDuration.Zero());
  assertNotNull(savepointPath);
  for (int i=0; i < jobVertices.length; i++) {
    jobVertices[i]=mockExecutionJobVertex(jobId,jobVertices[i].getJobVertexId(),2);
  }
  try {
    coordinator.restoreSavepoint(createExecutionJobVertexMap(jobVertices),savepointPath);
    fail("Did not throw expected Exception after rollback with parallelism mismatch.");
  }
 catch (  Exception ignored) {
  }
  assertEquals(0,getSavepointPromises(coordinator).size());
  coordinator.shutdown();
}
