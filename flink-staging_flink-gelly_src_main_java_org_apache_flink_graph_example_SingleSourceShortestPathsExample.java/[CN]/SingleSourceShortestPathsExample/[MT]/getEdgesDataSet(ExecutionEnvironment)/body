{
  if (fileOutput) {
    return env.readCsvFile(edgesInputPath).lineDelimiter("\n").types(Long.class,Long.class,Double.class).map(new MapFunction<Tuple3<Long,Long,Double>,Edge<Long,Double>>(){
      @Override public Edge<Long,Double> map(      Tuple3<Long,Long,Double> tuple3) throws Exception {
        return new Edge<Long,Double>(tuple3.f0,tuple3.f1,tuple3.f2);
      }
    }
);
  }
 else {
    System.err.println("Usage: SingleSourceShortestPaths <source vertex id>" + " <input vertices path> <input edges path> <output path> <num iterations>");
    return SingleSourceShortestPathsData.getDefaultEdgeDataSet(env);
  }
}
