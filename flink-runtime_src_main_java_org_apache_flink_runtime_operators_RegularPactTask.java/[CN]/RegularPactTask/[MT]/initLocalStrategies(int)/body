{
  final MemoryManager memMan=getMemoryManager();
  final IOManager ioMan=getIOManager();
  this.localStrategies=new CloseableInputProvider<?>[numInputs];
  this.inputs=new MutableObjectIterator<?>[numInputs];
  this.excludeFromReset=new boolean[numInputs];
  this.inputIsCached=new boolean[numInputs];
  this.inputIsAsyncMaterialized=new boolean[numInputs];
  this.materializationMemory=new int[numInputs];
  for (int i=0; i < numInputs; i++) {
    initInputLocalStrategy(i);
  }
  this.resettableInputs=new SpillingResettableMutableObjectIterator<?>[numInputs];
  this.tempBarriers=new TempBarrier<?>[numInputs];
  for (int i=0; i < numInputs; i++) {
    final int memoryPages;
    final boolean async=this.config.isInputAsynchronouslyMaterialized(i);
    final boolean cached=this.config.isInputCached(i);
    this.inputIsAsyncMaterialized[i]=async;
    this.inputIsCached[i]=cached;
    if (async || cached) {
      memoryPages=memMan.computeNumberOfPages(this.config.getRelativeInputMaterializationMemory(i));
      if (memoryPages <= 0) {
        throw new Exception("Input marked as materialized/cached, but no memory for materialization provided.");
      }
      this.materializationMemory[i]=memoryPages;
    }
 else {
      memoryPages=0;
    }
    if (async) {
      @SuppressWarnings({"unchecked","rawtypes"}) TempBarrier<?> barrier=new TempBarrier(this,getInput(i),this.inputSerializers[i],memMan,ioMan,memoryPages);
      barrier.startReading();
      this.tempBarriers[i]=barrier;
      this.inputs[i]=null;
    }
 else     if (cached) {
      @SuppressWarnings({"unchecked","rawtypes"}) SpillingResettableMutableObjectIterator<?> iter=new SpillingResettableMutableObjectIterator(getInput(i),this.inputSerializers[i].getSerializer(),getMemoryManager(),getIOManager(),memoryPages,this);
      this.resettableInputs[i]=iter;
      this.inputs[i]=iter;
    }
  }
}
