{
  this.input=input;
  if (cache.containsKey(this)) {
    for (    GraphAlgorithmWrappingGraph<IN_K,IN_VV,IN_EV,OUT_K,OUT_VV,OUT_EV> other : cache.get(this)) {
      if (mergeConfiguration(other)) {
        Graph<OUT_K,OUT_VV,OUT_EV> output=runInternal(input);
        other.verticesWrappingOperator.setInput(output.getVertices());
        other.edgesWrappingOperator.setInput(output.getEdges());
        verticesWrappingOperator=other.verticesWrappingOperator;
        edgesWrappingOperator=other.edgesWrappingOperator;
        return Graph.fromDataSet(verticesWrappingOperator,edgesWrappingOperator,output.getContext());
      }
    }
  }
  Graph<OUT_K,OUT_VV,OUT_EV> output=runInternal(input);
  verticesWrappingOperator=new NoOpOperator<>(output.getVertices(),output.getVertices().getType());
  edgesWrappingOperator=new NoOpOperator<>(output.getEdges(),output.getEdges().getType());
  if (cache.containsKey(this)) {
    cache.get(this).add(this);
  }
 else {
    cache.put(this,new ArrayList(Collections.singletonList(this)));
  }
  return Graph.fromDataSet(verticesWrappingOperator,edgesWrappingOperator,output.getContext());
}
