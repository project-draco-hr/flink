{
  int degreeOfParallelism=2;
  JobGraph jobGraph=new JobGraph();
  JobInputVertex input=new JobInputVertex("FileInput",jobGraph);
  Class<AbstractInputTask<?>> clazz=(Class<AbstractInputTask<?>>)(Class<?>)DataSourceTask.class;
  input.setInputClass(clazz);
  input.setNumberOfSubtasks(degreeOfParallelism);
  input.setNumberOfSubtasksPerInstance(degreeOfParallelism);
  TaskConfig inputConfig=new TaskConfig(input.getConfiguration());
  inputConfig.setStubClass(TextInputFormat.class);
  inputConfig.setLocalStrategy(TaskConfig.LocalStrategy.NONE);
  inputConfig.setStubParameter(FileInputFormat.FILE_PARAMETER_KEY,"file:///home/ssc/Desktop/iterations/");
  JobTaskVertex head=createTask(BulkIterationHeadPactTask.class,"BulkIterationHead",jobGraph,degreeOfParallelism);
  TaskConfig headConfig=new TaskConfig(head.getConfiguration());
  headConfig.setDriver(MapDriver.class);
  headConfig.setStubClass(AppendMapper.AppendHeadMapper.class);
  headConfig.setMemorySize(10 * MEGABYTE);
  JobTaskVertex intermediate=createTask(BulkIterationIntermediatePactTask.class,"BulkIntermediate",jobGraph,degreeOfParallelism);
  TaskConfig intermediateConfig=new TaskConfig(intermediate.getConfiguration());
  intermediateConfig.setDriver(MapDriver.class);
  intermediateConfig.setStubClass(AppendMapper.AppendIntermediateMapper.class);
  JobTaskVertex tail=createTask(BulkIterationTailPactTask.class,"BulkIterationTail",jobGraph,degreeOfParallelism);
  TaskConfig tailConfig=new TaskConfig(tail.getConfiguration());
  tailConfig.setDriver(MapDriver.class);
  tailConfig.setStubClass(AppendMapper.AppendTailMapper.class);
  JobTaskVertex sync=createSingletonTask(BulkIterationSynchronizationPactTask.class,"BulkIterationSync",jobGraph);
  TaskConfig syncConfig=new TaskConfig(sync.getConfiguration());
  syncConfig.setDriver(MapDriver.class);
  syncConfig.setStubClass(EmptyMapStub.class);
  syncConfig.setNumberOfBulkIterationHeads(degreeOfParallelism);
  JobOutputVertex output=createFileOutput(jobGraph,"FinalOutput",degreeOfParallelism);
  TaskConfig outputConfig=new TaskConfig(output.getConfiguration());
  outputConfig.setStubClass(PlayOutFormat.class);
  outputConfig.setStubParameter(FileOutputFormat.FILE_PARAMETER_KEY,"file:///tmp/stratosphere/iterations");
  JobOutputVertex fakeTailOutput=createFakeOutput(jobGraph,"FakeTailOutput",degreeOfParallelism);
  JobOutputVertex fakeSyncOutput=createSingletonFakeOutput(jobGraph,"FakeSyncOutput");
  connectLocal(input,head,inputConfig);
  connectLocal(head,intermediate,headConfig);
  connectLocal(head,sync,headConfig);
  connectLocal(head,output,headConfig);
  connectLocal(intermediate,tail,intermediateConfig);
  connectLocal(tail,fakeTailOutput,tailConfig);
  connectLocal(sync,fakeSyncOutput,syncConfig);
  head.setVertexToShareInstancesWith(tail);
  GlobalConfiguration.loadConfiguration("/home/ssc/Entwicklung/projects/stratosphere-iterations/stratosphere-dist/src/main/stratosphere-bin/conf");
  Configuration conf=GlobalConfiguration.getConfiguration();
  submit(jobGraph,conf);
}
