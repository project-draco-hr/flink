{
  final S3BucketObjectPair bop=this.directoryStructure.toBucketObjectPair(f);
  if (!bop.hasBucket() && !bop.hasObject()) {
    return false;
  }
  boolean retCode=false;
  try {
    if (bop.hasBucket()) {
      if (this.s3Client.doesBucketExist(bop.getBucket())) {
      }
 else {
        this.s3Client.createBucket(bop.getBucket());
        retCode=true;
      }
    }
    if (bop.hasObject()) {
      String object=bop.getObject();
      if (!object.isEmpty()) {
        if (object.charAt(object.length() - 1) != S3_DIRECTORY_SEPARATOR) {
          object=object.concat(Character.toString(S3_DIRECTORY_SEPARATOR));
        }
      }
      while (true) {
        try {
          this.s3Client.getObjectMetadata(bop.getBucket(),object);
        }
 catch (        AmazonServiceException e) {
          if (e.getStatusCode() == HTTP_RESOURCE_NOT_FOUND_CODE) {
            createEmptyObject(bop.getBucket(),object);
            if (object.length() > 1) {
              final int nextPos=object.lastIndexOf(S3_DIRECTORY_SEPARATOR,object.length() - 2);
              if (nextPos >= 0) {
                object=object.substring(0,nextPos + 1);
                continue;
              }
            }
          }
 else {
            throw e;
          }
        }
        break;
      }
    }
  }
 catch (  AmazonClientException e) {
    throw new IOException(StringUtils.stringifyException(e));
  }
  return retCode;
}
