{
  ObjectListing listing=null;
  final List<S3FileStatus> resultList=new ArrayList<S3FileStatus>();
  final int depth=(bop.hasObject() ? getDepth(bop.getObject()) + 1 : 0);
  while (true) {
    if (listing == null) {
      if (bop.hasObject()) {
        listing=this.s3Client.listObjects(bop.getBucket(),bop.getObject());
      }
 else {
        listing=this.s3Client.listObjects(bop.getBucket());
      }
    }
 else {
      listing=this.s3Client.listNextBatchOfObjects(listing);
    }
    final List<S3ObjectSummary> list=listing.getObjectSummaries();
    final Iterator<S3ObjectSummary> it=list.iterator();
    while (it.hasNext()) {
      final S3ObjectSummary os=it.next();
      String key=os.getKey();
      final int childDepth=getDepth(os.getKey());
      if (childDepth != depth) {
        continue;
      }
      if (bop.hasObject()) {
        if (key.startsWith(bop.getObject())) {
          key=key.substring(bop.getObject().length());
        }
        if (key.isEmpty()) {
          continue;
        }
      }
      final long modificationDate=dateToLong(os.getLastModified());
      S3FileStatus fileStatus;
      if (objectRepresentsDirectory(os)) {
        fileStatus=new S3FileStatus(extendPath(f,key),0,true,modificationDate,0L);
      }
 else {
        fileStatus=new S3FileStatus(extendPath(f,key),os.getSize(),false,modificationDate,0L);
      }
      resultList.add(fileStatus);
    }
    if (!listing.isTruncated()) {
      break;
    }
  }
  return resultList.toArray(new S3FileStatus[0]);
}
