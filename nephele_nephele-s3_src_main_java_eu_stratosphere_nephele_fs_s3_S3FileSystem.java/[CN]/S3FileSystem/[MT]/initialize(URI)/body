{
  this.host=name.getHost();
  if (this.host == null) {
    LOG.debug("Provided URI does not provide a host to connect to, using configuration...");
    this.host=GlobalConfiguration.getString(S3_HOST_KEY,DEFAULT_S3_HOST);
  }
  this.port=name.getPort();
  if (this.port == -1) {
    LOG.debug("Provided URI does not provide a port to connect to, using configuration...");
    this.port=GlobalConfiguration.getInteger(S3_PORT_KEY,DEFAULT_S3_PORT);
  }
  final String userInfo=name.getUserInfo();
  String awsAccessKey=null;
  String awsSecretKey=null;
  if (userInfo != null) {
    final String[] splits=userInfo.split(":");
    if (splits.length > 1) {
      awsAccessKey=splits[0];
      awsSecretKey=splits[1];
    }
  }
  if (awsAccessKey == null) {
    LOG.debug("Provided URI does not provide an access key to Amazon S3, using configuration...");
    awsAccessKey=GlobalConfiguration.getString(S3_ACCESS_KEY_KEY,null);
    if (awsAccessKey == null) {
      throw new IOException("Cannot determine access key to Amazon S3");
    }
  }
  if (awsSecretKey == null) {
    LOG.debug("Provided URI does not provide a secret key to Amazon S3, using configuration...");
    awsSecretKey=GlobalConfiguration.getString(S3_SECRET_KEY_KEY,null);
    if (awsSecretKey == null) {
      throw new IOException("Cannot determine secret key to Amazon S3");
    }
  }
  final AWSCredentials credentials=new BasicAWSCredentials(awsAccessKey,awsSecretKey);
  this.s3Client=new AmazonS3Client(credentials);
  initializeDirectoryStructure(name);
}
