{
  final S3BucketObjectPair bop=this.directoryStructure.toBucketObjectPair(f);
  if (!bop.hasBucket() && !bop.hasObject()) {
    return new S3FileStatus(f,0L,true,0L,0L);
  }
  try {
    if (bop.hasBucket() && !bop.hasObject()) {
      final List<Bucket> buckets=this.s3Client.listBuckets();
      final Iterator<Bucket> it=buckets.iterator();
      while (it.hasNext()) {
        final Bucket bucket=it.next();
        if (bop.getBucket().equals(bucket.getName())) {
          final long creationDate=dateToLong(bucket.getCreationDate());
          return new S3FileStatus(f,0L,true,creationDate,0L);
        }
      }
      throw new FileNotFoundException("Cannot find " + f.toUri());
    }
    try {
      final ObjectMetadata om=this.s3Client.getObjectMetadata(bop.getBucket(),bop.getObject());
      final long modificationDate=dateToLong(om.getLastModified());
      if (objectRepresentsDirectory(bop.getObject(),om.getContentLength())) {
        return new S3FileStatus(f,0L,true,modificationDate,0L);
      }
 else {
        return new S3FileStatus(f,om.getContentLength(),false,modificationDate,0L);
      }
    }
 catch (    AmazonServiceException e) {
      if (e.getStatusCode() == HTTP_RESOURCE_NOT_FOUND_CODE) {
        throw new FileNotFoundException("Cannot find " + f.toUri());
      }
 else {
        throw e;
      }
    }
  }
 catch (  AmazonClientException e) {
    throw new IOException(StringUtils.stringifyException(e));
  }
}
