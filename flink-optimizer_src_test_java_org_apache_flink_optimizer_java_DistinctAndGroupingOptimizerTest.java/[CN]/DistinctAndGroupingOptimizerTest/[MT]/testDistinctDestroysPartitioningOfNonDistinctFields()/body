{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(4);
    @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Long>> data=env.fromElements(new Tuple2<Long,Long>(0L,0L),new Tuple2<Long,Long>(1L,1L)).map(new IdentityMapper<Tuple2<Long,Long>>()).setParallelism(4);
    data.distinct(1).groupBy(0).sum(1).print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    SingleInputPlanNode reducer=(SingleInputPlanNode)sink.getInput().getSource();
    SingleInputPlanNode combiner=(SingleInputPlanNode)reducer.getInput().getSource();
    SingleInputPlanNode distinctReducer=(SingleInputPlanNode)combiner.getInput().getSource();
    assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_HASH,reducer.getInput().getShipStrategy());
    assertEquals(ShipStrategyType.FORWARD,combiner.getInput().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_HASH,distinctReducer.getInput().getShipStrategy());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
