{
  this.availableInstanceTypes=populateInstanceTypeArray();
  long tmpCleanUpInterval=(long)GlobalConfiguration.getInteger(ConfigConstants.INSTANCE_MANAGER_CLEANUP_INTERVAL_KEY,DEFAULT_CLEANUP_INTERVAL) * 1000;
  if ((tmpCleanUpInterval % BASE_INTERVAL) != 0) {
    LOG.warn("Invalid clean up interval. Reverting to default cleanup interval of " + DEFAULT_CLEANUP_INTERVAL + " secs.");
    tmpCleanUpInterval=DEFAULT_CLEANUP_INTERVAL;
  }
  this.cleanUpInterval=tmpCleanUpInterval;
  int tmpDefaultInstanceTypeIndex=GlobalConfiguration.getInteger(ConfigConstants.INSTANCE_MANAGER_DEFAULT_INSTANCE_TYPE_INDEX_KEY,ConfigConstants.DEFAULT_DEFAULT_INSTANCE_TYPE_INDEX);
  if (tmpDefaultInstanceTypeIndex > this.availableInstanceTypes.length) {
    LOG.warn("Incorrect index to for default instance type (" + tmpDefaultInstanceTypeIndex + "), switching to default index "+ ConfigConstants.DEFAULT_DEFAULT_INSTANCE_TYPE_INDEX);
    tmpDefaultInstanceTypeIndex=ConfigConstants.DEFAULT_DEFAULT_INSTANCE_TYPE_INDEX;
  }
  this.defaultInstanceType=this.availableInstanceTypes[tmpDefaultInstanceTypeIndex - 1];
  sortAvailableInstancesByNumberOfCPUCores();
  this.networkTopology=loadNetworkTopology();
  final boolean runTimerAsDaemon=true;
  new Timer(runTimerAsDaemon).schedule(cleanupStaleMachines,BASE_INTERVAL,BASE_INTERVAL);
}
