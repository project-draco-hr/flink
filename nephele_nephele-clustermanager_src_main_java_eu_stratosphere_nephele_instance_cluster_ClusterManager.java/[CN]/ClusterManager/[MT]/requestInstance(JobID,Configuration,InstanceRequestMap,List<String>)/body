{
  final List<AllocatedResource> allocatedResources=new ArrayList<AllocatedResource>();
  final Iterator<Map.Entry<InstanceType,Integer>> it=instanceRequestMap.getMaximumIterator();
  while (it.hasNext()) {
    final Map.Entry<InstanceType,Integer> entry=it.next();
    final int maximumNumberOfInstances=entry.getValue().intValue();
    for (int i=0; i < maximumNumberOfInstances; i++) {
      LOG.info("Trying to allocate instance of type " + entry.getKey().getIdentifier());
      final AllocatedSlice slice=getSliceOfType(jobID,entry.getKey());
      if (slice == null) {
        if (i < instanceRequestMap.getMinimumNumberOfInstances(entry.getKey())) {
          removeAllSlicesOfJob(jobID);
          throw new InstanceException("Could not find a suitable instance");
        }
 else {
          final int numberOfRemainingInstances=maximumNumberOfInstances - i;
          if (numberOfRemainingInstances > 0) {
            PendingRequestsMap pendingRequests=this.pendingRequestsOfJob.get(jobID);
            if (pendingRequests == null) {
              pendingRequests=new PendingRequestsMap();
              this.pendingRequestsOfJob.put(jobID,pendingRequests);
            }
            pendingRequests.addRequest(entry.getKey(),numberOfRemainingInstances);
          }
          break;
        }
      }
      List<AllocatedSlice> allocatedSlices=this.slicesOfJobs.get(jobID);
      if (allocatedSlices == null) {
        allocatedSlices=new ArrayList<AllocatedSlice>();
        this.slicesOfJobs.put(jobID,allocatedSlices);
      }
      allocatedSlices.add(slice);
      allocatedResources.add(new AllocatedResource(slice.getHostingInstance(),slice.getType(),slice.getAllocationID()));
    }
  }
  if (this.instanceListener != null) {
    final ClusterInstanceNotifier clusterInstanceNotifier=new ClusterInstanceNotifier(this.instanceListener,jobID,allocatedResources);
    clusterInstanceNotifier.start();
  }
}
