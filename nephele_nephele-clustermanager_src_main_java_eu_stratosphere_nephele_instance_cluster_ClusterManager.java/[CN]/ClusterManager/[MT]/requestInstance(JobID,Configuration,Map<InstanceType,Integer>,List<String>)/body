{
  final Iterator<Map.Entry<InstanceType,Integer>> it=instanceMap.entrySet().iterator();
  while (it.hasNext()) {
    final Map.Entry<InstanceType,Integer> entry=it.next();
    LOG.info("Needing " + entry.getValue().intValue() + "of"+ entry.getKey());
    for (int i=0; i < entry.getValue().intValue(); i++) {
      LOG.info("Trying to allocate instance " + i + " / "+ entry.getValue().intValue()+ "  of type "+ entry.getKey().getIdentifier());
      AllocatedSlice slice=null;
      for (      final ClusterInstance host : this.registeredHosts.values()) {
        if (host.getType().equals(entry.getKey())) {
          slice=host.createSlice(entry.getKey(),jobID);
          LOG.info("Created Slice on " + host.getName());
          if (slice != null) {
            break;
          }
        }
      }
      if (slice == null) {
        for (        final ClusterInstance host : this.registeredHosts.values()) {
          slice=host.createSlice(entry.getKey(),jobID);
          LOG.info("Created Slice on " + host.getName());
          if (slice != null) {
            break;
          }
        }
      }
      if (slice == null) {
        throw new InstanceException("Could not find a suitable instance");
      }
      List<AllocatedSlice> allocatedSlices=this.slicesOfJobs.get(jobID);
      if (allocatedSlices == null) {
        allocatedSlices=new ArrayList<AllocatedSlice>();
        this.slicesOfJobs.put(jobID,allocatedSlices);
      }
      allocatedSlices.add(slice);
      if (this.instanceListener != null) {
        ClusterInstanceNotifier clusterInstanceNotifier=new ClusterInstanceNotifier(this.instanceListener,slice);
        clusterInstanceNotifier.start();
      }
 else {
        LOG.error("InstanceListener is null");
      }
    }
  }
  return;
}
