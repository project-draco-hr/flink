{
  if (keyPositions.length != keyTypes.length || directions.length != keyTypes.length) {
    throw new IllegalArgumentException("The number of key positions, key type classes, and key sort directions must be identical.");
  }
  for (int i=0; i < keyPositions.length; i++) {
    if (keyPositions[i] < 0) {
      throw new IllegalArgumentException("The key position " + i + " is invalid: "+ keyPositions[i]);
    }
    if (keyTypes[i] == null || !Key.class.isAssignableFrom(keyTypes[i])) {
      throw new IllegalArgumentException("The key type " + i + " is null or not implenting the interface "+ Key.class.getName()+ ".");
    }
  }
  config.setInteger(NUM_KEYS,keyPositions.length);
  for (int i=0; i < keyPositions.length; i++) {
    config.setInteger(KEY_POS_PREFIX + i,keyPositions[i]);
    config.setString(KEY_CLASS_PREFIX + i,keyTypes[i].getName());
    config.setBoolean(KEY_SORT_DIRECTION_PREFIX,directions[i]);
  }
  if (secondarySortKeyPositions.length != secondarySortKeyTypes.length || secondarySortDirections.length != secondarySortKeyTypes.length) {
    throw new IllegalArgumentException("The number of key positions, key type classes, and key sort directions must be identical.");
  }
  for (int i=0; i < secondarySortKeyPositions.length; i++) {
    if (secondarySortKeyPositions[i] < 0) {
      throw new IllegalArgumentException("The key position " + i + " is invalid: "+ secondarySortKeyPositions[i]);
    }
    if (secondarySortKeyTypes[i] == null || !Key.class.isAssignableFrom(secondarySortKeyTypes[i])) {
      throw new IllegalArgumentException("The key type " + i + " is null or not implenting the interface "+ Key.class.getName()+ ".");
    }
  }
  config.setInteger(NUM_SS_KEYS,secondarySortKeyPositions.length);
  for (int i=0; i < secondarySortKeyPositions.length; i++) {
    config.setInteger(SS_KEY_POS_PREFIX + i,secondarySortKeyPositions[i]);
    config.setString(SS_KEY_CLASS_PREFIX + i,secondarySortKeyTypes[i].getName());
    config.setBoolean(SS_KEY_SORT_DIRECTION_PREFIX,secondarySortDirections[i]);
  }
}
