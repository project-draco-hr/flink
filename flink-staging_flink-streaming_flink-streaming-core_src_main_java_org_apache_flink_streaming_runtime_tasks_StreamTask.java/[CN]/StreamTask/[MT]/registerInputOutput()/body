{
  LOG.debug("Begin initialization for {}",getName());
  userClassLoader=getUserCodeClassLoader();
  configuration=new StreamConfig(getTaskConfiguration());
  streamOperator=configuration.getStreamOperator(userClassLoader);
  AccumulatorRegistry accumulatorRegistry=getEnvironment().getAccumulatorRegistry();
  Map<String,Accumulator<?,?>> accumulatorMap=accumulatorRegistry.getUserMap();
  AccumulatorRegistry.Reporter reporter=accumulatorRegistry.getReadWriteReporter();
  outputHandler=new OutputHandler<>(this,accumulatorMap,reporter);
  if (streamOperator != null) {
    headContext=createRuntimeContext(configuration,accumulatorMap);
    this.contexts.add(headContext);
    streamOperator.setup(outputHandler.getOutput(),headContext);
  }
  hasChainedOperators=outputHandler.getChainedOperators().size() != 1;
  this.timerService=Executors.newSingleThreadScheduledExecutor(new DispatcherThreadFactory(TRIGGER_THREAD_GROUP,"Time Trigger for " + getName()));
  init();
  LOG.debug("Finish initialization for {}",getName());
}
