{
  StateHandleProvider<Serializable> provider=configuration.getStateHandleProvider(userClassLoader);
  if (provider == null) {
    String backendName=GlobalConfiguration.getString(ConfigConstants.STATE_BACKEND,ConfigConstants.DEFAULT_STATE_BACKEND).toUpperCase();
    StateBackend backend;
    try {
      backend=StateBackend.valueOf(backendName);
    }
 catch (    Exception e) {
      throw new RuntimeException(backendName + " is not a valid state backend.\nSupported backends: jobmanager, filesystem.");
    }
switch (backend) {
case JOBMANAGER:
      LOG.info("State backend for state checkpoints is set to jobmanager.");
    return new LocalStateHandle.LocalStateHandleProvider<Serializable>();
case FILESYSTEM:
  String checkpointDir=GlobalConfiguration.getString(ConfigConstants.STATE_BACKEND_FS_DIR,null);
if (checkpointDir != null) {
  LOG.info("State backend for state checkpoints is set to filesystem with directory: " + checkpointDir);
  return FileStateHandle.createProvider(checkpointDir);
}
 else {
  throw new RuntimeException("For filesystem checkpointing, a checkpoint directory needs to be specified.\nFor example: \"state.backend.dir: hdfs://checkpoints\"");
}
default :
throw new RuntimeException("Backend " + backend + " is not supported yet.");
}
}
 else {
LOG.info("Using user defined state backend for streaming checkpoitns.");
return provider;
}
}
