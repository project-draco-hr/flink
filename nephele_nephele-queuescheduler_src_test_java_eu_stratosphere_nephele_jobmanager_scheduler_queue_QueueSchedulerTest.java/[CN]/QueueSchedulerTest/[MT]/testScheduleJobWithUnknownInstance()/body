{
  when(this.executionGraph.getNumberOfStages()).thenReturn(1);
  when(this.executionGraph.getStage(0)).thenReturn(this.stage1);
  when(this.executionGraph.getCurrentExecutionStage()).thenReturn(this.stage1);
  when(this.instanceManager.getMapOfAvailableInstanceTypes()).thenReturn(availableInstances);
  when(this.stage1.getExecutionGraph()).thenReturn(this.executionGraph);
  final QueueScheduler toTest=new QueueScheduler(deploymentManager,this.instanceManager);
  availableInstances.clear();
  try {
    toTest.schedulJob(this.executionGraph);
    fail();
  }
 catch (  SchedulingException e) {
    Deque<ExecutionGraph> jobQueue=Whitebox.getInternalState(toTest,"jobQueue");
    assertEquals("Job should not be in list",false,jobQueue.contains(this.executionGraph));
  }
}
