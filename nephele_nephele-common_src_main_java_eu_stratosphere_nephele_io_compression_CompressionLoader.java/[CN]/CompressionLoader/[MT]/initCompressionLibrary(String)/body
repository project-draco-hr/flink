{
  Class<? extends CompressionLibrary> compressionLibraryClass;
  try {
    compressionLibraryClass=(Class<? extends CompressionLibrary>)Class.forName(libraryClass);
  }
 catch (  ClassNotFoundException e1) {
    LOG.error(e1);
    return null;
  }
  if (compressionLibraryClass == null) {
    LOG.error("Cannot load compression library " + libraryClass);
    return null;
  }
  Constructor<? extends CompressionLibrary> constructor;
  try {
    constructor=compressionLibraryClass.getConstructor(String.class);
  }
 catch (  SecurityException e) {
    LOG.error(e);
    return null;
  }
catch (  NoSuchMethodException e) {
    LOG.error(e);
    return null;
  }
  if (constructor == null) {
    LOG.error("Cannot find matching constructor for class " + compressionLibraryClass.toString());
    return null;
  }
  CompressionLibrary compressionLibrary;
  try {
    compressionLibrary=constructor.newInstance(getNativeLibraryPath());
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
    LOG.error(e);
    return null;
  }
catch (  InstantiationException e) {
    e.printStackTrace();
    LOG.error(e);
    return null;
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
    LOG.error(e);
    return null;
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
    LOG.error(e);
    return null;
  }
  return compressionLibrary;
}
