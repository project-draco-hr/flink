{
  System.out.println("PACT input/output for task " + this.environment.getTaskNameWithIndex() + ": "+ getPACTInputOutputRatio());
  final long timestamp=System.currentTimeMillis();
  if (this.environment.getInputGate(0) != null && this.environment.getInputGate(0).getExecutionStart() < timestamp) {
    this.startTime=this.environment.getInputGate(0).getExecutionStart();
  }
  ThreadMXBean threadBean=ManagementFactory.getThreadMXBean();
  long userCPU=(threadBean.getCurrentThreadUserTime() / NANO_TO_MILLISECONDS) * 100 / (timestamp - this.startTime);
  LOG.info("USER CPU for " + this.getTaskName() + " : "+ userCPU);
  final Map<ChannelID,Long> channelUtilization=new HashMap<ChannelID,Long>();
  long totalOutputAmount=0;
  for (int i=0; i < this.environment.getNumberOfOutputGates(); ++i) {
    final OutputGate<? extends Record> outputGate=this.environment.getOutputGate(i);
    for (int j=0; j < outputGate.getNumberOfOutputChannels(); ++j) {
      final AbstractOutputChannel<? extends Record> outputChannel=outputGate.getOutputChannel(j);
      channelUtilization.put(outputChannel.getID(),Long.valueOf(outputChannel.getAmountOfDataTransmitted()));
      totalOutputAmount+=outputChannel.getAmountOfDataTransmitted();
    }
  }
  long totalInputAmount=0;
  for (int i=0; i < this.environment.getNumberOfInputGates(); ++i) {
    final InputGate<? extends Record> inputGate=this.environment.getInputGate(i);
    for (int j=0; j < inputGate.getNumberOfInputChannels(); ++j) {
      final AbstractInputChannel<? extends Record> inputChannel=inputGate.getInputChannel(j);
      channelUtilization.put(inputChannel.getID(),Long.valueOf(inputChannel.getAmountOfDataTransmitted()));
      totalInputAmount+=inputChannel.getAmountOfDataTransmitted();
    }
  }
  Boolean force=null;
  if (this.environment.getInvokable().getClass().isAnnotationPresent(Stateful.class) && !this.environment.getInvokable().getClass().isAnnotationPresent(Stateless.class)) {
    force=false;
  }
 else {
    ForceCheckpoint forced=this.environment.getInvokable().getClass().getAnnotation(ForceCheckpoint.class);
    if (forced != null) {
      force=forced.checkpoint();
    }
  }
  final ResourceUtilizationSnapshot rus=new ResourceUtilizationSnapshot(timestamp,channelUtilization,userCPU,force,totalInputAmount,totalOutputAmount);
  final Iterator<ExecutionListener> it=this.registeredListeners.iterator();
  while (it.hasNext()) {
    it.next().initialExecutionResourcesExhausted(this.environment.getJobID(),this.vertexID,rus);
  }
  this.taskManager.initialExecutionResourcesExhausted(this.environment.getJobID(),this.vertexID,rus);
}
