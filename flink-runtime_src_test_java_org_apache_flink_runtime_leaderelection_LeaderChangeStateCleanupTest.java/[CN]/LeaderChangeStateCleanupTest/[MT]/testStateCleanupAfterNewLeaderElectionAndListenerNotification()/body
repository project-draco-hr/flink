{
  UUID leaderSessionID1=UUID.randomUUID();
  UUID leaderSessionID2=UUID.randomUUID();
  cluster.grantLeadership(0,leaderSessionID1);
  cluster.notifyRetrievalListeners(0,leaderSessionID1);
  cluster.waitForTaskManagersToBeRegistered(timeout);
  cluster.submitJobDetached(job);
  ActorGateway jm=cluster.getLeaderGateway(timeout);
  Future<Object> wait=jm.ask(new WaitForAllVerticesToBeRunningOrFinished(job.getJobID()),timeout);
  Await.ready(wait,timeout);
  Future<Object> jobRemoval=jm.ask(new NotifyWhenJobRemoved(job.getJobID()),timeout);
  cluster.grantLeadership(1,leaderSessionID2);
  cluster.notifyRetrievalListeners(1,leaderSessionID2);
  Await.ready(jobRemoval,timeout);
  cluster.waitForTaskManagersToBeRegistered(timeout);
  ActorGateway jm2=cluster.getLeaderGateway(timeout);
  Future<Object> futureNumberSlots=jm2.ask(JobManagerMessages.getRequestTotalNumberOfSlots(),timeout);
  int numberSlots=(Integer)Await.result(futureNumberSlots,timeout);
  assertEquals(parallelism,numberSlots);
  Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false);
  cluster.submitJobAndWait(job,false,timeout,new TestingLeaderRetrievalService(jm2.path(),jm2.leaderSessionID()));
}
