{
  UUID leaderSessionID=UUID.randomUUID();
  UUID newLeaderSessionID=UUID.randomUUID();
  FiniteDuration shortTimeout=new FiniteDuration(20,TimeUnit.SECONDS);
  cluster.grantLeadership(0,leaderSessionID);
  cluster.notifyRetrievalListeners(0,leaderSessionID);
  cluster.waitForTaskManagersToBeRegistered();
  cluster.submitJobDetached(job);
  ActorGateway jm=cluster.getLeaderGateway(timeout);
  Future<Object> wait=jm.ask(new WaitForAllVerticesToBeRunningOrFinished(job.getJobID()),timeout);
  Await.ready(wait,timeout);
  Future<Object> jobRemoval=jm.ask(new NotifyWhenJobRemoved(job.getJobID()),timeout);
  cluster.grantLeadership(0,newLeaderSessionID);
  Await.ready(jobRemoval,timeout);
  try {
    cluster.waitForTaskManagersToBeRegistered(shortTimeout);
    fail("TaskManager should not be able to register at JobManager.");
  }
 catch (  TimeoutException e) {
  }
  cluster.notifyRetrievalListeners(0,newLeaderSessionID);
  cluster.waitForTaskManagersToBeRegistered();
  Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false);
  cluster.submitJobAndWait(job,false,timeout);
}
