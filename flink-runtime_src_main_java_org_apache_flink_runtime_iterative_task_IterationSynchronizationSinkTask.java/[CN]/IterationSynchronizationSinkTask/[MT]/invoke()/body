{
  this.headEventReader=new MutableRecordReader<IntValue>(getEnvironment().getInputGate(0),getEnvironment().getTaskManagerInfo().getTmpDirectories());
  TaskConfig taskConfig=new TaskConfig(getTaskConfiguration());
  this.aggregators=new HashMap<String,Aggregator<?>>();
  for (  AggregatorWithName<?> aggWithName : taskConfig.getIterationAggregators(getUserCodeClassLoader())) {
    aggregators.put(aggWithName.getName(),aggWithName.getAggregator());
  }
  if (taskConfig.usesConvergenceCriterion()) {
    convergenceCriterion=taskConfig.getConvergenceCriterion(getUserCodeClassLoader());
    convergenceAggregatorName=taskConfig.getConvergenceCriterionAggregatorName();
    Preconditions.checkNotNull(convergenceAggregatorName);
  }
  maxNumberOfIterations=taskConfig.getNumberOfIterations();
  int numEventsTillEndOfSuperstep=taskConfig.getNumberOfEventsUntilInterruptInIterativeGate(0);
  eventHandler=new SyncEventHandler(numEventsTillEndOfSuperstep,aggregators,getEnvironment().getUserClassLoader());
  headEventReader.registerTaskEventListener(eventHandler,WorkerDoneEvent.class);
  IntValue dummy=new IntValue();
  while (!terminationRequested()) {
    if (log.isInfoEnabled()) {
      log.info(formatLogString("starting iteration [" + currentIteration + "]"));
    }
    readHeadEventChannel(dummy);
    if (log.isInfoEnabled()) {
      log.info(formatLogString("finishing iteration [" + currentIteration + "]"));
    }
    if (checkForConvergence()) {
      if (log.isInfoEnabled()) {
        log.info(formatLogString("signaling that all workers are to terminate in iteration [" + currentIteration + "]"));
      }
      requestTermination();
      sendToAllWorkers(new TerminationEvent());
    }
 else {
      if (log.isInfoEnabled()) {
        log.info(formatLogString("signaling that all workers are done in iteration [" + currentIteration + "]"));
      }
      AllWorkersDoneEvent allWorkersDoneEvent=new AllWorkersDoneEvent(aggregators);
      sendToAllWorkers(allWorkersDoneEvent);
      for (      Aggregator<?> agg : aggregators.values()) {
        agg.reset();
      }
      currentIteration++;
    }
  }
}
