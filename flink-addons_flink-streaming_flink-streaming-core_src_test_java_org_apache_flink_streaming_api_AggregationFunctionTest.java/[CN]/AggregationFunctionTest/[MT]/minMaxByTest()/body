{
  MaxByAggregationFunction<Tuple2<Integer,Integer>> maxByFunctionFirst=new MaxByAggregationFunction<Tuple2<Integer,Integer>>(0,true);
  MaxByAggregationFunction<Tuple2<Integer,Integer>> maxByFunctionLast=new MaxByAggregationFunction<Tuple2<Integer,Integer>>(0,false);
  MinByAggregationFunction<Tuple2<Integer,Integer>> minByFunctionFirst=new MinByAggregationFunction<Tuple2<Integer,Integer>>(0,true);
  MinByAggregationFunction<Tuple2<Integer,Integer>> minByFunctionLast=new MinByAggregationFunction<Tuple2<Integer,Integer>>(0,false);
  List<Tuple2<Integer,Integer>> maxByFirstExpected=new ArrayList<Tuple2<Integer,Integer>>();
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(1,1));
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByFirstExpected.add(new Tuple2<Integer,Integer>(2,2));
  List<Tuple2<Integer,Integer>> maxByLastExpected=new ArrayList<Tuple2<Integer,Integer>>();
  maxByLastExpected.add(new Tuple2<Integer,Integer>(0,0));
  maxByLastExpected.add(new Tuple2<Integer,Integer>(1,1));
  maxByLastExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByLastExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByLastExpected.add(new Tuple2<Integer,Integer>(2,2));
  maxByLastExpected.add(new Tuple2<Integer,Integer>(2,5));
  maxByLastExpected.add(new Tuple2<Integer,Integer>(2,5));
  maxByLastExpected.add(new Tuple2<Integer,Integer>(2,5));
  maxByLastExpected.add(new Tuple2<Integer,Integer>(2,8));
  List<Tuple2<Integer,Integer>> minByFirstExpected=new ArrayList<Tuple2<Integer,Integer>>();
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByFirstExpected.add(new Tuple2<Integer,Integer>(0,0));
  List<Tuple2<Integer,Integer>> minByLastExpected=new ArrayList<Tuple2<Integer,Integer>>();
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,0));
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,3));
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,3));
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,3));
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,6));
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,6));
  minByLastExpected.add(new Tuple2<Integer,Integer>(0,6));
  assertEquals(maxByFirstExpected,MockInvokable.createAndExecute(new StreamReduceInvokable<Tuple2<Integer,Integer>>(maxByFunctionFirst),getInputList()));
  assertEquals(maxByLastExpected,MockInvokable.createAndExecute(new StreamReduceInvokable<Tuple2<Integer,Integer>>(maxByFunctionLast),getInputList()));
  assertEquals(minByLastExpected,MockInvokable.createAndExecute(new StreamReduceInvokable<Tuple2<Integer,Integer>>(minByFunctionLast),getInputList()));
  assertEquals(minByFirstExpected,MockInvokable.createAndExecute(new StreamReduceInvokable<Tuple2<Integer,Integer>>(minByFunctionFirst),getInputList()));
}
