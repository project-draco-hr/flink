{
  final int NUM_WATERMARKS=10;
  long initialTime=0L;
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getLeaderRPCPort());
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.setParallelism(PARALLELISM);
  env.getConfig().disableSysoutLogging();
  DataStream<Integer> source1=env.addSource(new MyTimestampSource(initialTime,NUM_WATERMARKS));
  DataStream<Integer> source2=env.addSource(new MyTimestampSource(initialTime,NUM_WATERMARKS / 2));
  source1.union(source2).map(new IdentityMap()).connect(source2).map(new IdentityCoMap()).transform("Custom Operator",BasicTypeInfo.INT_TYPE_INFO,new CustomOperator(true)).addSink(new DiscardingSink<Integer>());
  env.execute();
  for (int i=0; i < PARALLELISM; i++) {
    for (int j=0; j < NUM_WATERMARKS / 2; j++) {
      if (!CustomOperator.finalWatermarks[i].get(j).equals(new Watermark(initialTime + j))) {
        System.err.println("All Watermarks: ");
        for (int k=0; k <= NUM_WATERMARKS / 2; k++) {
          System.err.println(CustomOperator.finalWatermarks[i].get(k));
        }
        fail("Wrong watermark.");
      }
    }
    assertEquals(Watermark.MAX_WATERMARK,CustomOperator.finalWatermarks[i].get(CustomOperator.finalWatermarks[i].size() - 1));
  }
}
