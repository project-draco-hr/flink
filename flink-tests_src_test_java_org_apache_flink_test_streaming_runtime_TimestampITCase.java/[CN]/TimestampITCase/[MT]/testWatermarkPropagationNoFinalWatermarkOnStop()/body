{
  while (!cluster.getCurrentlyRunningJobsJava().isEmpty()) {
    Thread.sleep(100);
  }
  final int NUM_WATERMARKS=10;
  long initialTime=0L;
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getLeaderRPCPort());
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.setParallelism(PARALLELISM);
  env.getConfig().disableSysoutLogging();
  DataStream<Integer> source1=env.addSource(new MyTimestampSourceInfinite(initialTime,NUM_WATERMARKS));
  DataStream<Integer> source2=env.addSource(new MyTimestampSourceInfinite(initialTime,NUM_WATERMARKS / 2));
  source1.union(source2).map(new IdentityMap()).connect(source2).map(new IdentityCoMap()).transform("Custom Operator",BasicTypeInfo.INT_TYPE_INFO,new CustomOperator(true)).addSink(new DiscardingSink<Integer>());
  new Thread("stopper"){
    @Override public void run(){
      try {
        List<JobID> running;
        while ((running=cluster.getCurrentlyRunningJobsJava()).isEmpty()) {
          Thread.sleep(50);
        }
        JobID id=running.get(0);
        do {
          cluster.stopJob(id);
          Thread.sleep(50);
        }
 while (!cluster.getCurrentlyRunningJobsJava().isEmpty());
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
    }
  }
.start();
  env.execute();
  for (  List<Watermark> subtaskWatermarks : CustomOperator.finalWatermarks) {
    for (int j=0; j < subtaskWatermarks.size(); j++) {
      if (subtaskWatermarks.get(j).getTimestamp() != initialTime + j) {
        System.err.println("All Watermarks: ");
        for (int k=0; k <= NUM_WATERMARKS / 2; k++) {
          System.err.println(subtaskWatermarks.get(k));
        }
        fail("Wrong watermark.");
      }
    }
    if (subtaskWatermarks.size() > 0) {
      assertNotEquals(Watermark.MAX_WATERMARK,subtaskWatermarks.get(subtaskWatermarks.size() - 1));
    }
  }
}
