{
  final int NUM_ELEMENTS=10;
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getLeaderRPCPort());
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.getConfig().setAutoWatermarkInterval(1);
  env.setParallelism(2);
  env.getConfig().disableSysoutLogging();
  DataStream<Integer> source1=env.addSource(new SourceFunction<Integer>(){
    @Override public void run(    SourceContext<Integer> ctx) throws Exception {
      int index=1;
      while (index <= NUM_ELEMENTS) {
        ctx.collectWithTimestamp(index,index);
        ctx.collectWithTimestamp(index - 1,index - 1);
        index++;
        ctx.emitWatermark(new Watermark(index - 2));
      }
      ctx.emitWatermark(new Watermark(Long.MAX_VALUE));
      ctx.emitWatermark(new Watermark(Long.MAX_VALUE));
    }
    @Override public void cancel(){
    }
  }
);
  source1.assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Integer>(){
    @Override public long extractTimestamp(    Integer element,    long currentTimestamp){
      return element;
    }
    @Override public Watermark checkAndGetNextWatermark(    Integer element,    long extractedTimestamp){
      return null;
    }
  }
).transform("Watermark Check",BasicTypeInfo.INT_TYPE_INFO,new CustomOperator(true));
  env.execute();
  Assert.assertTrue(CustomOperator.finalWatermarks[0].size() == 1);
  Assert.assertTrue(CustomOperator.finalWatermarks[0].get(0).getTimestamp() == Long.MAX_VALUE);
}
