{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Double>> inputData=env.fromElements(new Tuple2<Long,Double>(1L,1.0));
    DataSet<Tuple2<Long,Double>> result=constructPlan(inputData,10);
    result.print();
    result.print();
    Plan p=env.createProgramPlan();
    OptimizedPlan optPlan=compileNoStats(p);
    OptimizerPlanNodeResolver or=getOptimizerPlanNodeResolver(optPlan);
    DualInputPlanNode join1=or.getNode(JOIN_1);
    DualInputPlanNode join2=or.getNode(JOIN_2);
    assertEquals(DriverStrategy.HYBRIDHASH_BUILD_FIRST,join1.getDriverStrategy());
    assertEquals(DriverStrategy.HYBRIDHASH_BUILD_SECOND,join2.getDriverStrategy());
    assertEquals(ShipStrategyType.PARTITION_HASH,join1.getInput2().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_HASH,join2.getInput1().getShipStrategy());
    assertEquals(SolutionSetPlanNode.class,join1.getInput1().getSource().getClass());
    assertEquals(SolutionSetPlanNode.class,join2.getInput2().getSource().getClass());
    new JobGraphGenerator().compileJobGraph(optPlan);
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Test erroneous: " + e.getMessage());
  }
}
