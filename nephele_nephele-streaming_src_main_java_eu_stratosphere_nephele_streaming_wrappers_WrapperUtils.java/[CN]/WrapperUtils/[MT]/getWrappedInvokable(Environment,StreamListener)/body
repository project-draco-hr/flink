{
  AbstractInvokable wrappedInvokable=null;
  final Configuration taskConfiguration=environment.getTaskConfiguration();
  final JobID jobID=environment.getJobID();
  final String className=taskConfiguration.getString(WRAPPED_CLASS_KEY,null);
  if (className == null) {
    throw new IllegalStateException("Cannot find name of wrapped class");
  }
  try {
    final ClassLoader cl=LibraryCacheManager.getClassLoader(jobID);
    @SuppressWarnings("unchecked") final Class<? extends AbstractInvokable> invokableClass=(Class<? extends AbstractInvokable>)Class.forName(className,true,cl);
    wrappedInvokable=invokableClass.newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(StringUtils.stringifyException(e));
  }
  wrappedInvokable.setEnvironment(new StreamingEnvironment(environment,streamListener));
  return wrappedInvokable;
}
