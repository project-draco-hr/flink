{
  this.leaderRetrievalService=checkNotNull(leaderRetrievalService);
  final WebMonitorConfig cfg=new WebMonitorConfig(config);
  final String flinkRoot=config.getString(ConfigConstants.FLINK_BASE_DIR_PATH_KEY,null);
  final String configuredWebRoot=cfg.getWebRoot();
  final File webRootDir;
  if (configuredWebRoot != null) {
    webRootDir=new File(configuredWebRoot);
  }
 else   if (flinkRoot != null) {
    webRootDir=new File(flinkRoot,STATIC_CONTENTS_PATH);
  }
 else {
    throw new IllegalConfigurationException("The given configuration provides neither the web-document root (" + WebMonitorConfig.JOB_MANAGER_WEB_DOC_ROOT_KEY + "), not the Flink installation root ("+ ConfigConstants.FLINK_BASE_DIR_PATH_KEY+ ").");
  }
  if (!(webRootDir.exists() && webRootDir.isDirectory() && webRootDir.canRead())) {
    throw new IllegalConfigurationException("The path to the static contents (" + webRootDir.getAbsolutePath() + ") is not a readable directory.");
  }
  this.configuredPort=cfg.getWebFrontendPort();
  if (this.configuredPort < 0) {
    throw new IllegalArgumentException("Web frontend port is invalid: " + this.configuredPort);
  }
  FiniteDuration timeout=AkkaUtils.getTimeout(config);
  FiniteDuration lookupTimeout=AkkaUtils.getTimeout(config);
  retriever=new JobManagerArchiveRetriever(this,actorSystem,lookupTimeout,timeout);
  ExecutionGraphHolder currentGraphs=new ExecutionGraphHolder(retriever);
  router=new Router().GET("/config",handler(new DashboardConfigHandler(cfg.getRefreshInterval()))).GET("/overview",handler(new ClusterOverviewHandler(retriever,DEFAULT_REQUEST_TIMEOUT))).GET("/jobmanager/config",handler(new JobManagerConfigHandler(config))).GET("/joboverview",handler(new CurrentJobsOverviewHandler(retriever,DEFAULT_REQUEST_TIMEOUT,true,true))).GET("/joboverview/running",handler(new CurrentJobsOverviewHandler(retriever,DEFAULT_REQUEST_TIMEOUT,true,false))).GET("/joboverview/completed",handler(new CurrentJobsOverviewHandler(retriever,DEFAULT_REQUEST_TIMEOUT,false,true))).GET("/jobs",handler(new CurrentJobIdsHandler(retriever,DEFAULT_REQUEST_TIMEOUT))).GET("/jobs/:jobid",handler(new JobDetailsHandler(currentGraphs))).GET("/jobs/:jobid/vertices",handler(new JobDetailsHandler(currentGraphs))).GET("/jobs/:jobid/vertices/:vertexid",handler(new JobVertexDetailsHandler(currentGraphs))).GET("/jobs/:jobid/vertices/:vertexid/subtasktimes",handler(new SubtasksTimesHandler(currentGraphs))).GET("/jobs/:jobid/vertices/:vertexid/accumulators",handler(new JobVertexAccumulatorsHandler(currentGraphs))).GET("/jobs/:jobid/vertices/:vertexid/subtasks/accumulators",handler(new SubtasksAllAccumulatorsHandler(currentGraphs))).GET("/jobs/:jobid/vertices/:vertexid/subtasks/:subtasknum",handler(new SubtaskCurrentAttemptDetailsHandler(currentGraphs))).GET("/jobs/:jobid/vertices/:vertexid/subtasks/:subtasknum/attempts/:attempt",handler(new SubtaskExecutionAttemptDetailsHandler(currentGraphs))).GET("/jobs/:jobid/vertices/:vertexid/subtasks/:subtasknum/attempts/:attempt/accumulators",handler(new SubtaskExecutionAttemptAccumulatorsHandler(currentGraphs))).GET("/jobs/:jobid/plan",handler(new JobPlanHandler(currentGraphs))).GET("/jobs/:jobid/config",handler(new JobConfigHandler(currentGraphs))).GET("/jobs/:jobid/exceptions",handler(new JobExceptionsHandler(currentGraphs))).GET("/jobs/:jobid/accumulators",handler(new JobAccumulatorsHandler(currentGraphs))).GET("/taskmanagers",handler(new TaskManagersHandler(retriever,DEFAULT_REQUEST_TIMEOUT))).GET("/taskmanagers/:" + TaskManagersHandler.TASK_MANAGER_ID_KEY,handler(new TaskManagersHandler(retriever,DEFAULT_REQUEST_TIMEOUT))).GET("/:*",new StaticFileServerHandler(webRootDir));
}
