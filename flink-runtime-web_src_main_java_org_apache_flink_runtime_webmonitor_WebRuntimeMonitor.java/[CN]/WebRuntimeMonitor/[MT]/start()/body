{
synchronized (startupShutdownLock) {
    if (this.bootstrap != null) {
      throw new IllegalStateException("The server has already been started");
    }
    ChannelInitializer<SocketChannel> initializer=new ChannelInitializer<SocketChannel>(){
      @Override protected void initChannel(      SocketChannel ch){
        Handler handler=new Handler(router);
        ch.pipeline().addLast(new HttpServerCodec()).addLast(new HttpObjectAggregator(65536)).addLast(new ChunkedWriteHandler()).addLast(handler.name(),handler);
      }
    }
;
    NioEventLoopGroup bossGroup=new NioEventLoopGroup(1);
    NioEventLoopGroup workerGroup=new NioEventLoopGroup();
    this.bootstrap=new ServerBootstrap();
    this.bootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(initializer);
    Channel ch=this.bootstrap.bind(configuredPort).sync().channel();
    this.serverChannel=ch;
    InetSocketAddress bindAddress=(InetSocketAddress)ch.localAddress();
    String address=bindAddress.getAddress().getHostAddress();
    int port=bindAddress.getPort();
    LOG.info("Web frontend listening at " + address + ':'+ port);
    leaderRetrievalService.start(retriever);
  }
}
