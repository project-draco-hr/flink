{
  final ParameterTool params=ParameterTool.fromArgs(args);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  if (!params.has("customer") && !params.has("orders") && !params.has("lineitem")&& !params.has("nation")) {
    System.err.println("  This program expects data from the TPC-H benchmark as input data.");
    System.err.println("  Due to legal restrictions, we can not ship generated data.");
    System.err.println("  You can find the TPC-H data generator at http://www.tpc.org/tpch/.");
    System.err.println("  Usage: TPCHQuery10 --customer <path> --orders <path> --lineitem <path> --nation <path> [--output <path>]");
    return;
  }
  DataSet<Tuple5<Integer,String,String,Integer,Double>> customers=getCustomerDataSet(env,params.get("customer"));
  DataSet<Tuple3<Integer,Integer,String>> orders=getOrdersDataSet(env,params.get("orders"));
  DataSet<Tuple4<Integer,Double,Double,String>> lineitems=getLineitemDataSet(env,params.get("lineitem"));
  DataSet<Tuple2<Integer,String>> nations=getNationsDataSet(env,params.get("nation"));
  DataSet<Tuple2<Integer,Integer>> ordersFilteredByYear=orders.filter(new FilterFunction<Tuple3<Integer,Integer,String>>(){
    @Override public boolean filter(    Tuple3<Integer,Integer,String> o){
      return Integer.parseInt(o.f2.substring(0,4)) > 1990;
    }
  }
).project(0,1);
  DataSet<Tuple2<Integer,Double>> lineitemsFilteredByFlag=lineitems.filter(new FilterFunction<Tuple4<Integer,Double,Double,String>>(){
    @Override public boolean filter(    Tuple4<Integer,Double,Double,String> l){
      return l.f3.equals("R");
    }
  }
).map(new MapFunction<Tuple4<Integer,Double,Double,String>,Tuple2<Integer,Double>>(){
    @Override public Tuple2<Integer,Double> map(    Tuple4<Integer,Double,Double,String> l){
      return new Tuple2<Integer,Double>(l.f0,l.f1 * (1 - l.f2));
    }
  }
);
  DataSet<Tuple2<Integer,Double>> revenueByCustomer=ordersFilteredByYear.joinWithHuge(lineitemsFilteredByFlag).where(0).equalTo(0).projectFirst(1).projectSecond(1);
  revenueByCustomer=revenueByCustomer.groupBy(0).aggregate(Aggregations.SUM,1);
  DataSet<Tuple5<Integer,String,String,String,Double>> customerWithNation=customers.joinWithTiny(nations).where(3).equalTo(0).projectFirst(0,1,2).projectSecond(1).projectFirst(4);
  DataSet<Tuple6<Integer,String,String,String,Double,Double>> result=customerWithNation.join(revenueByCustomer).where(0).equalTo(0).projectFirst(0,1,2,3,4).projectSecond(1);
  if (params.has("output")) {
    result.writeAsCsv(params.get("output"),"\n","|");
    env.execute("TPCH Query 10 Example");
  }
 else {
    System.out.println("Printing result to stdout. Use --output to specify output path.");
    result.print();
  }
}
