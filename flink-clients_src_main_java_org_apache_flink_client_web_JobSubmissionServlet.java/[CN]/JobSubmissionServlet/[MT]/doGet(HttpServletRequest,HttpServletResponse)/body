{
  String action=req.getParameter(ACTION_PARAM_NAME);
  if (checkParameterSet(resp,action,"action")) {
    return;
  }
  if (action.equals(ACTION_SUBMIT_VALUE)) {
    String jobName=req.getParameter(JOB_PARAM_NAME);
    String args=req.getParameter(ARGUMENTS_PARAM_NAME);
    String showPlan=req.getParameter(SHOW_PLAN_PARAM_NAME);
    String suspendPlan=req.getParameter(SUSPEND_PARAM_NAME);
    if (checkParameterSet(resp,jobName,JOB_PARAM_NAME) || checkParameterSet(resp,args,ARGUMENTS_PARAM_NAME) || checkParameterSet(resp,showPlan,SHOW_PLAN_PARAM_NAME)|| checkParameterSet(resp,suspendPlan,SUSPEND_PARAM_NAME)) {
      showErrorPage(resp,"Invalid request, missing parameters.");
      return;
    }
    boolean show=Boolean.parseBoolean(showPlan);
    boolean suspend=Boolean.parseBoolean(suspendPlan);
    File jarFile=new File(jobStoreDirectory,jobName);
    if (!jarFile.exists()) {
      showErrorPage(resp,"The jar file + '" + jarFile.getPath() + "' does not exist.");
      return;
    }
    List<String> params=null;
    try {
      params=tokenizeArguments(args);
    }
 catch (    IllegalArgumentException iaex) {
      showErrorPage(resp,"The arguments contain an unterminated quoted string.");
      return;
    }
    String assemblerClass=null;
    if (params.size() >= 2 && params.get(0).equals("assembler")) {
      assemblerClass=params.get(1);
      params.remove(0);
      params.remove(0);
    }
    String[] options=params.isEmpty() ? new String[0] : (String[])params.toArray(new String[params.size()]);
    PackagedProgram program;
    OptimizedPlan optPlan;
    try {
      if (assemblerClass == null) {
        program=new PackagedProgram(jarFile,options);
      }
 else {
        program=new PackagedProgram(jarFile,assemblerClass,options);
      }
      optPlan=client.getOptimizedPlan(program,-1);
      if (optPlan == null) {
        throw new Exception("The optimized plan could not be produced.");
      }
    }
 catch (    ProgramInvocationException e) {
      StringWriter sw=new StringWriter();
      PrintWriter w=new PrintWriter(sw);
      if (e.getCause() == null) {
        e.printStackTrace(w);
      }
 else {
        e.getCause().printStackTrace(w);
      }
      showErrorPage(resp,"An error occurred while invoking the program:<br/><br/>" + e.getMessage() + "<br/>"+ "<br/><br/><pre>"+ sw.toString()+ "</pre>");
      return;
    }
catch (    CompilerException cex) {
      StringWriter sw=new StringWriter();
      PrintWriter w=new PrintWriter(sw);
      cex.printStackTrace(w);
      showErrorPage(resp,"An error occurred in the compiler:<br/><br/>" + cex.getMessage() + "<br/>"+ (cex.getCause() != null ? "Caused by: " + cex.getCause().getMessage() : "")+ "<br/><br/><pre>"+ sw.toString()+ "</pre>");
      return;
    }
catch (    Throwable t) {
      StringWriter sw=new StringWriter();
      PrintWriter w=new PrintWriter(sw);
      t.printStackTrace(w);
      showErrorPage(resp,"An unexpected error occurred:<br/><br/>" + t.getMessage() + "<br/><br/><pre>"+ sw.toString()+ "</pre>");
      return;
    }
    if (show) {
      Long uid=null;
      do {
        uid=Math.abs(this.rand.nextLong());
      }
 while (this.submittedJobs.containsKey(uid));
      String planName=uid + ".json";
      File jsonFile=new File(this.planDumpDirectory,planName);
      new PlanJSONDumpGenerator().dumpOptimizerPlanAsJSON(optPlan,jsonFile);
      if (!suspend) {
        try {
          this.client.run(program,optPlan,false);
        }
 catch (        Throwable t) {
          LOG.error("Error submitting job to the job-manager.",t);
          showErrorPage(resp,t.getMessage());
          return;
        }
 finally {
          program.deleteExtractedLibraries();
        }
      }
 else {
        try {
          this.submittedJobs.put(uid,this.client.getJobGraph(program,optPlan));
        }
 catch (        ProgramInvocationException piex) {
          LOG.error("Error creating JobGraph from optimized plan.",piex);
          showErrorPage(resp,piex.getMessage());
          return;
        }
catch (        Throwable t) {
          LOG.error("Error creating JobGraph from optimized plan.",t);
          showErrorPage(resp,t.getMessage());
          return;
        }
      }
      resp.sendRedirect("showPlan?id=" + uid + "&suspended="+ (suspend ? "true" : "false"));
    }
 else {
      try {
        client.run(program,-1,false);
      }
 catch (      Exception ex) {
        LOG.error("Error submitting job to the job-manager.",ex);
        String errorMessage=ex.getMessage().split("\n")[0];
        showErrorPage(resp,errorMessage);
        return;
      }
 finally {
        program.deleteExtractedLibraries();
      }
      resp.sendRedirect(START_PAGE_URL);
    }
  }
 else   if (action.equals(ACTION_RUN_SUBMITTED_VALUE)) {
    String id=req.getParameter("id");
    if (checkParameterSet(resp,id,"id")) {
      return;
    }
    Long uid=null;
    try {
      uid=Long.parseLong(id);
    }
 catch (    NumberFormatException nfex) {
      showErrorPage(resp,"An invalid id for the job was provided.");
      return;
    }
    JobGraph job=submittedJobs.remove(uid);
    if (job == null) {
      resp.sendError(HttpServletResponse.SC_BAD_REQUEST,"No job with the given uid was retained for later submission.");
      return;
    }
    try {
      client.run(job,false);
    }
 catch (    Exception ex) {
      LOG.error("Error submitting job to the job-manager.",ex);
      resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      String errorMessage=ex.getMessage().split("\n")[0];
      resp.getWriter().print(errorMessage);
      return;
    }
    resp.sendRedirect(START_PAGE_URL);
  }
 else   if (action.equals(ACTION_BACK_VALUE)) {
    String id=req.getParameter("id");
    if (checkParameterSet(resp,id,"id")) {
      return;
    }
    Long uid=null;
    try {
      uid=Long.parseLong(id);
    }
 catch (    NumberFormatException nfex) {
      showErrorPage(resp,"An invalid id for the job was provided.");
      return;
    }
    submittedJobs.remove(uid);
    resp.sendRedirect(START_PAGE_URL);
  }
 else {
    showErrorPage(resp,"Invalid action specified.");
    return;
  }
}
