{
  String action=req.getParameter(ACTION_PARAM_NAME);
  if (checkParameterSet(resp,action,"action")) {
    return;
  }
  if (action.equals(ACTION_SUBMIT_VALUE)) {
    String options=req.getParameter(OPTIONS_PARAM_NAME);
    String jobName=req.getParameter(JOB_PARAM_NAME);
    String assemblerClass=req.getParameter(CLASS_PARAM_NAME);
    String arguments=req.getParameter(ARGUMENTS_PARAM_NAME);
    String showPlan=req.getParameter(SHOW_PLAN_PARAM_NAME);
    String suspendPlan=req.getParameter(SUSPEND_PARAM_NAME);
    if (checkParameterSet(resp,jobName,JOB_PARAM_NAME) || checkParameterSet(resp,arguments,ARGUMENTS_PARAM_NAME) || checkParameterSet(resp,showPlan,SHOW_PLAN_PARAM_NAME)|| checkParameterSet(resp,suspendPlan,SUSPEND_PARAM_NAME)) {
      return;
    }
    boolean show=Boolean.parseBoolean(showPlan);
    boolean suspend=Boolean.parseBoolean(suspendPlan);
    List<String> cliOptions;
    try {
      cliOptions=tokenizeArguments(options);
    }
 catch (    IllegalArgumentException iaex) {
      showErrorPage(resp,"Flink options contain an unterminated quoted string.");
      return;
    }
    List<String> cliArguments;
    try {
      cliArguments=tokenizeArguments(arguments);
    }
 catch (    IllegalArgumentException iaex) {
      showErrorPage(resp,"Program arguments contain an unterminated quoted string.");
      return;
    }
    String[] args=new String[1 + (assemblerClass == null ? 0 : 2) + cliOptions.size()+ 1+ cliArguments.size()];
    List<String> parameters=new ArrayList<String>(args.length);
    parameters.add(CliFrontend.ACTION_INFO);
    parameters.addAll(cliOptions);
    if (assemblerClass != null) {
      parameters.add("-" + CliFrontendParser.CLASS_OPTION.getOpt());
      parameters.add(assemblerClass);
    }
    parameters.add(jobStoreDirectory + File.separator + jobName);
    parameters.addAll(cliArguments);
    FlinkPlan optPlan;
    try {
      this.cli.parseParameters(parameters.toArray(args));
      optPlan=this.cli.getFlinkPlan();
      if (optPlan == null) {
        throw new RuntimeException(new Exception("The optimized plan could not be produced."));
      }
    }
 catch (    RuntimeException e) {
      Throwable t=e.getCause();
      if (t instanceof ProgramInvocationException) {
        StringWriter sw=new StringWriter();
        PrintWriter w=new PrintWriter(sw);
        if (t.getCause() == null) {
          t.printStackTrace(w);
        }
 else {
          t.getCause().printStackTrace(w);
        }
        String message=sw.toString();
        message=StringEscapeUtils.escapeHtml4(message);
        showErrorPage(resp,"An error occurred while invoking the program:<br/><br/>" + t.getMessage() + "<br/>"+ "<br/><br/><pre>"+ message+ "</pre>");
        return;
      }
 else       if (t instanceof CompilerException) {
        StringWriter sw=new StringWriter();
        PrintWriter w=new PrintWriter(sw);
        t.printStackTrace(w);
        String message=sw.toString();
        message=StringEscapeUtils.escapeHtml4(message);
        showErrorPage(resp,"An error occurred in the compiler:<br/><br/>" + t.getMessage() + "<br/>"+ (t.getCause() != null ? "Caused by: " + t.getCause().getMessage() : "")+ "<br/><br/><pre>"+ message+ "</pre>");
        return;
      }
 else {
        StringWriter sw=new StringWriter();
        PrintWriter w=new PrintWriter(sw);
        t.printStackTrace(w);
        String message=sw.toString();
        message=StringEscapeUtils.escapeHtml4(message);
        showErrorPage(resp,"An unexpected error occurred:<br/><br/>" + t.getMessage() + "<br/><br/><pre>"+ message+ "</pre>");
        return;
      }
    }
    if (show) {
      Long uid;
      do {
        uid=Math.abs(this.rand.nextLong());
      }
 while (this.submittedJobs.containsKey(uid));
      String planName=uid + ".json";
      File jsonFile=new File(this.planDumpDirectory,planName);
      if (optPlan instanceof StreamingPlan) {
        ((StreamingPlan)optPlan).dumpStreamingPlanAsJSON(jsonFile);
      }
 else {
        PlanJSONDumpGenerator jsonGen=new PlanJSONDumpGenerator();
        jsonGen.setEncodeForHTML(true);
        jsonGen.dumpOptimizerPlanAsJSON((OptimizedPlan)optPlan,jsonFile);
      }
      if (!suspend) {
        parameters.set(0,CliFrontend.ACTION_RUN);
        try {
          this.cli.parseParameters(parameters.toArray(args));
        }
 catch (        RuntimeException e) {
          LOG.error("Error submitting job to the job-manager.",e.getCause());
          showErrorPage(resp,e.getCause().getMessage());
          return;
        }
      }
 else {
        this.submittedJobs.put(uid,new Tuple2<PackagedProgram,FlinkPlan>(this.cli.getPackagedProgram(),optPlan));
      }
      resp.sendRedirect("showPlan?id=" + uid + "&suspended="+ (suspend ? "true" : "false"));
    }
 else {
      parameters.set(0,CliFrontend.ACTION_RUN);
      try {
        this.cli.parseParameters(parameters.toArray(args));
      }
 catch (      RuntimeException e) {
        LOG.error("Error submitting job to the job-manager.",e.getCause());
        String errorMessage=e.getCause().getMessage().split("\n")[0];
        showErrorPage(resp,errorMessage);
        return;
      }
      resp.sendRedirect(START_PAGE_URL);
    }
  }
 else   if (action.equals(ACTION_RUN_SUBMITTED_VALUE)) {
    String id=req.getParameter("id");
    if (checkParameterSet(resp,id,"id")) {
      return;
    }
    Long uid;
    try {
      uid=Long.parseLong(id);
    }
 catch (    NumberFormatException nfex) {
      showErrorPage(resp,"An invalid id for the job was provided.");
      return;
    }
    Tuple2<PackagedProgram,FlinkPlan> job=submittedJobs.remove(uid);
    if (job == null) {
      resp.sendError(HttpServletResponse.SC_BAD_REQUEST,"No job with the given uid was retained for later submission.");
      return;
    }
    try {
      Client client=new Client(GlobalConfiguration.getConfiguration());
      client.runDetached(Client.getJobGraph(job.f0,job.f1),job.f0.getUserCodeClassLoader());
    }
 catch (    Exception ex) {
      LOG.error("Error submitting job to the job-manager.",ex);
      resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      String errorMessage=ex.getMessage().split("\n")[0];
      resp.getWriter().print(errorMessage);
      return;
    }
    resp.sendRedirect(START_PAGE_URL);
  }
 else   if (action.equals(ACTION_BACK_VALUE)) {
    String id=req.getParameter("id");
    if (checkParameterSet(resp,id,"id")) {
      return;
    }
    Long uid;
    try {
      uid=Long.parseLong(id);
    }
 catch (    NumberFormatException nfex) {
      showErrorPage(resp,"An invalid id for the job was provided.");
      return;
    }
    submittedJobs.remove(uid);
    resp.sendRedirect(START_PAGE_URL);
  }
 else {
    showErrorPage(resp,"Invalid action specified.");
  }
}
