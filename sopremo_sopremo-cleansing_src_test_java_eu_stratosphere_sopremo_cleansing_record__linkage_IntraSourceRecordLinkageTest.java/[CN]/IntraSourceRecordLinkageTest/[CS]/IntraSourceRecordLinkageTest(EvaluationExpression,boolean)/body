{
  this.useId=useId;
  this.resultProjection=resultProjection;
  final SimmetricFunction firstNameLev=new SimmetricFunction(new Levenshtein(),createPath("0","first name"),createPath("1","first name"));
  final SimmetricFunction lastNameJaccard=new SimmetricFunction(new Levenshtein(),createPath("0","last name"),createPath("1","last name"));
  final EvaluationExpression ageDiff=new NumericDifference(createPath("0","age"),createPath("1","age"),10);
  final ArrayCreation fieldSimExpr=new ArrayCreation(firstNameLev,lastNameJaccard,ageDiff);
  this.similarityFunction=new PathExpression(fieldSimExpr,BuiltinFunctions.AVERAGE.asExpression());
  this.inputs.add(createPactJsonObject("id",0,"first name","albert","last name","perfect duplicate","age",80));
  this.inputs.add(createPactJsonObject("id",1,"first name","berta","last name","typo","age",70));
  this.inputs.add(createPactJsonObject("id",2,"first name","charles","last name","age inaccurate","age",70));
  this.inputs.add(createPactJsonObject("id",3,"first name","dagmar","last name","unmatched","age",75));
  this.inputs.add(createPactJsonObject("id",4,"first name","elma","last name","first nameDiffers","age",60));
  this.inputs.add(createPactJsonObject("id",5,"first name","albert","last name","perfect duplicate","age",80));
  this.inputs.add(createPactJsonObject("id",6,"first name","berta","last name","tpyo","age",70));
  this.inputs.add(createPactJsonObject("id",7,"first name","charles","last name","age inaccurate","age",69));
  this.inputs.add(createPactJsonObject("id",8,"first name","elmar","last name","first nameDiffers","age",60));
  this.inputs.add(createPactJsonObject("id",9,"first name","frank","last name","transitive","age",65));
  this.inputs.add(createPactJsonObject("id",10,"first name","frank","last name","transitive","age",60));
  this.inputs.add(createPactJsonObject("id",11,"first name","frank","last name","transitive","age",70));
}
