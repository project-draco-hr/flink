{
  List<InterestingProperties> preserved=new ArrayList<InterestingProperties>();
  for (  InterestingProperties p : props) {
    GlobalProperties preservedGp=p.getGlobalProperties().createInterestingGlobalProperties(node,input);
    LocalProperties preservedLp=p.getLocalProperties().createInterestingLocalProperties(node,input);
    if (preservedGp != null || preservedLp != null) {
      try {
        if (preservedGp == null) {
          preservedGp=new GlobalProperties();
        }
        if (preservedLp == null) {
          preservedLp=new LocalProperties();
        }
        InterestingProperties newIp=new InterestingProperties(p.getMaximalCosts().clone(),preservedGp,preservedLp);
        mergeUnionOfInterestingProperties(preserved,newIp);
      }
 catch (      CloneNotSupportedException cnse) {
        throw new RuntimeException(cnse);
      }
    }
  }
  return preserved;
}
