{
  try {
    Assert.assertTrue("KeyGroupedIterator must have another key.",this.psi.nextKey());
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(1))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",1,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("A"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertFalse("KeyGroupedIterator must not have another value.",this.psi.getValues().hasNext());
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",1,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertTrue("KeyGroupedIterator must have another key.",this.psi.nextKey());
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(2))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",2,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("B"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertFalse("KeyGroupedIterator must not have another value.",this.psi.getValues().hasNext());
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",2,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertTrue("KeyGroupedIterator must have another key.",this.psi.nextKey());
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(3))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",3,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("C"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(3))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",3,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("D"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(3))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",3,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    try {
      this.psi.getValues().next();
      Assert.fail("A new KeyGroupedIterator must not have any value available and hence throw an exception on next().");
    }
 catch (    NoSuchElementException nseex) {
    }
    Assert.assertFalse("KeyGroupedIterator must not have another value.",this.psi.getValues().hasNext());
    try {
      this.psi.getValues().next();
      Assert.fail("A new KeyGroupedIterator must not have any value available and hence throw an exception on next().");
    }
 catch (    NoSuchElementException nseex) {
    }
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(3))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",3,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertTrue("KeyGroupedIterator must have another key.",this.psi.nextKey());
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(4))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",4,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("E"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(4))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",4,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("F"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(4))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",4,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("G"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(4))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",4,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertFalse("KeyGroupedIterator must not have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(4))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",4,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertTrue("KeyGroupedIterator must have another key.",this.psi.nextKey());
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(5))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",5,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("H"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(5))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",5,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("I"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(5))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",5,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("J"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(5))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",5,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("K"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator must have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(5))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",5,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    Assert.assertEquals("KeyGroupedIterator returned a wrong value.",new StringValue("L"),this.psi.getValues().next().getField(1,StringValue.class));
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(5))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",5,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    try {
      this.psi.getValues().next();
      Assert.fail("A new KeyGroupedIterator must not have any value available and hence throw an exception on next().");
    }
 catch (    NoSuchElementException nseex) {
    }
    Assert.assertFalse("KeyGroupedIterator must not have another value.",this.psi.getValues().hasNext());
    Assert.assertTrue("KeyGroupedIterator returned a wrong key.",this.psi.getComparatorWithCurrentReference().equalToReference(new Record(new IntValue(5))));
    Assert.assertEquals("KeyGroupedIterator returned a wrong key.",5,this.psi.getCurrent().getField(0,IntValue.class).getValue());
    try {
      this.psi.getValues().next();
      Assert.fail("A new KeyGroupedIterator must not have any value available and hence throw an exception on next().");
    }
 catch (    NoSuchElementException nseex) {
    }
    Assert.assertFalse("KeyGroupedIterator must not have another key.",this.psi.nextKey());
    Assert.assertFalse("KeyGroupedIterator must not have another key.",this.psi.nextKey());
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("The test encountered an unexpected exception.");
  }
}
