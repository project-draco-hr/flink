{
  AbstractOutputChannel<T> oldOutputChannel=null;
  for (int i=0; i < this.outputChannels.size(); i++) {
    final AbstractOutputChannel<T> outputChannel=this.outputChannels.get(i);
    if (outputChannel.getID().equals(oldChannelID)) {
      oldOutputChannel=outputChannel;
      break;
    }
  }
  if (oldOutputChannel == null) {
    return null;
  }
  AbstractOutputChannel<T> newOutputChannel=null;
switch (newChannelType) {
case FILE:
    newOutputChannel=new FileOutputChannel<T>(this,oldOutputChannel.getChannelIndex(),oldOutputChannel.getID(),oldOutputChannel.getCompressionLevel());
  break;
case INMEMORY:
newOutputChannel=new InMemoryOutputChannel<T>(this,oldOutputChannel.getChannelIndex(),oldOutputChannel.getID(),oldOutputChannel.getCompressionLevel(),true);
break;
case NETWORK:
newOutputChannel=new NetworkOutputChannel<T>(this,oldOutputChannel.getChannelIndex(),oldOutputChannel.getID(),oldOutputChannel.getCompressionLevel(),followsPushModel);
break;
default :
return null;
}
newOutputChannel.setConnectedChannelID(oldOutputChannel.getConnectedChannelID());
this.outputChannels.set(newOutputChannel.getChannelIndex(),newOutputChannel);
return newOutputChannel;
}
