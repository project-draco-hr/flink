{
  FileDataSource initialVertices=new FileDataSource(new CsvInputFormat(' ',LongValue.class),verticesInput,"Vertices");
  MapOperator verticesWithId=MapOperator.builder(DuplicateLongMap.class).input(initialVertices).name("Assign Vertex Ids").build();
  DeltaIteration iteration=new DeltaIteration(0,"Connected Components Iteration");
  iteration.setInitialSolutionSet(verticesWithId);
  iteration.setInitialWorkset(verticesWithId);
  iteration.setMaximumNumberOfIterations(maxIterations);
  FileDataSource edges=new FileDataSource(new CsvInputFormat(' ',LongValue.class,LongValue.class),edgeInput,"Edges");
  JoinOperator joinWithNeighbors=JoinOperator.builder(new NeighborWithComponentIDJoin(),LongValue.class,0,0).input1(iteration.getWorkset()).input2(edges).name("Join Candidate Id With Neighbor").build();
  CoGroupOperator minAndUpdate=CoGroupOperator.builder(new MinIdAndUpdate(),LongValue.class,0,0).input1(joinWithNeighbors).input2(iteration.getSolutionSet()).name("Min Id and Update").build();
  iteration.setNextWorkset(minAndUpdate);
  iteration.setSolutionSetDelta(minAndUpdate);
  FileDataSink result=new FileDataSink(new CsvOutputFormat(),output,iteration,"Result");
  CsvOutputFormat.configureRecordFormat(result).recordDelimiter('\n').fieldDelimiter(' ').field(LongValue.class,0).field(LongValue.class,1);
  Plan plan=new Plan(result,"Workset Connected Components");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
