{
  try {
    this.context.setContextNode(value);
    for (    final Entry<List<EvaluationExpression>,EvaluationExpression> rulePath : this.ruleManager.getRules()) {
      final List<EvaluationExpression> targetPath=rulePath.getKey();
      final EvaluationExpression rule=rulePath.getValue();
      if (targetPath.isEmpty())       value=rule.evaluate(value,this.context);
 else {
        JsonNode parent=value;
        final int lastIndex=targetPath.size() - 1;
        for (int index=0; index < lastIndex; index++)         parent=targetPath.get(index).evaluate(parent,this.context);
        final EvaluationExpression lastSegment=targetPath.get(lastIndex);
        final JsonNode validationValue=lastSegment.evaluate(value,this.context);
        JsonNode newValue=rule.evaluate(new ArrayNode(validationValue,value),this.context);
        if (validationValue != newValue)         lastSegment.set(parent,newValue,this.context);
      }
    }
    out.collect(key,value);
  }
 catch (  final UnresolvableEvaluationException e) {
    if (SopremoUtil.LOG.isDebugEnabled())     SopremoUtil.LOG.debug(String.format("Cannot fix validation rule for tuple %s: %s",value,e.getMessage()));
  }
}
