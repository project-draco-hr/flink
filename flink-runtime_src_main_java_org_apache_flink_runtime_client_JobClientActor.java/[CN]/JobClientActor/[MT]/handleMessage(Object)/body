{
  if (message instanceof ExecutionGraphMessages.ExecutionStateChanged) {
    logAndPrintMessage((ExecutionGraphMessages.ExecutionStateChanged)message);
  }
 else   if (message instanceof ExecutionGraphMessages.JobStatusChanged) {
    logAndPrintMessage((ExecutionGraphMessages.JobStatusChanged)message);
  }
 else   if (message instanceof JobManagerLeaderAddress) {
    JobManagerLeaderAddress msg=(JobManagerLeaderAddress)message;
    if (jobManager != null) {
      logAndPrintMessage("New JobManager elected. Connecting to " + msg.address());
    }
    disconnectFromJobManager();
    this.leaderSessionID=msg.leaderSessionID();
    if (msg.address() != null) {
      AkkaUtils.getActorRefFuture(msg.address(),getContext().system(),timeout).onSuccess(new OnSuccess<ActorRef>(){
        @Override public void onSuccess(        ActorRef result) throws Throwable {
          getSelf().tell(decorateMessage(new JobManagerActorRef(result)),ActorRef.noSender());
        }
      }
,getContext().dispatcher());
    }
  }
 else   if (message instanceof JobManagerActorRef) {
    JobManagerActorRef msg=(JobManagerActorRef)message;
    connectToJobManager(msg.jobManager());
    logAndPrintMessage("Connected to JobManager at " + msg.jobManager());
    if (jobGraph != null && !jobSuccessfullySubmitted) {
      tryToSubmitJob(jobGraph);
    }
  }
 else   if (message instanceof SubmitJobAndWait) {
    if (!terminated) {
      if (this.submitter == null) {
        jobGraph=((SubmitJobAndWait)message).jobGraph();
        if (jobGraph == null) {
          LOG.error("Received null JobGraph");
          sender().tell(decorateMessage(new Status.Failure(new Exception("JobGraph is null"))),getSelf());
        }
 else {
          LOG.info("Received job {} ({}).",jobGraph.getName(),jobGraph.getJobID());
          this.submitter=getSender();
          tryToSubmitJob(jobGraph);
        }
      }
 else {
        String msg="Received repeated 'SubmitJobAndWait'";
        LOG.error(msg);
        getSender().tell(decorateMessage(new Status.Failure(new Exception(msg))),ActorRef.noSender());
        terminate();
      }
    }
 else {
      String msg=getClass().getName() + " is about to be terminated. Therefore, the " + "job submission cannot be executed.";
      LOG.error(msg);
      getSender().tell(decorateMessage(new Status.Failure(new Exception(msg))),ActorRef.noSender());
    }
  }
 else   if (message instanceof JobManagerMessages.JobResultSuccess || message instanceof JobManagerMessages.JobResultFailure) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Received {} message from JobManager",message.getClass().getSimpleName());
    }
    if (hasJobBeenSubmitted()) {
      this.submitter.tell(decorateMessage(message),getSelf());
    }
    terminate();
  }
 else   if (message instanceof JobManagerMessages.JobSubmitSuccess) {
    LOG.info("Job was successfully submitted to the JobManager {}.",getSender().path());
    jobSuccessfullySubmitted=true;
  }
 else   if (message instanceof Terminated) {
    ActorRef target=((Terminated)message).getActor();
    if (jobManager.equals(target)) {
      LOG.info("Lost connection to JobManager {}. Triggering connection timeout.",jobManager.path());
      disconnectFromJobManager();
      if (hasJobBeenSubmitted()) {
        getContext().system().scheduler().scheduleOnce(timeout,getSelf(),decorateMessage(JobClientMessages.getConnectionTimeout()),getContext().dispatcher(),ActorRef.noSender());
      }
    }
 else {
      LOG.warn("Received 'Terminated' for unknown actor " + target);
    }
  }
 else   if (JobClientMessages.getConnectionTimeout().equals(message)) {
    if (!isConnected()) {
      if (hasJobBeenSubmitted()) {
        submitter.tell(decorateMessage(new Status.Failure(new JobClientActorConnectionTimeoutException("Lost connection to the JobManager."))),getSelf());
      }
      terminate();
    }
  }
 else   if (JobClientMessages.getSubmissionTimeout().equals(message)) {
    if (!jobSuccessfullySubmitted) {
      if (hasJobBeenSubmitted()) {
        submitter.tell(decorateMessage(new Status.Failure(new JobClientActorSubmissionTimeoutException("Job submission to the JobManager timed out. " + "You may increase '" + ConfigConstants.AKKA_CLIENT_TIMEOUT + "' in case the JobManager "+ "needs more time to configure and confirm the job submission."))),getSelf());
      }
      terminate();
    }
  }
 else {
    LOG.error("JobClient received unknown message: " + message);
  }
}
