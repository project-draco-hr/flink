{
  CompletedCheckpoint[] checkpoints=generateRandomCheckpoints(2);
  List<ExecutionJobVertex> tasksToWaitFor=createTasksToWaitFor(checkpoints[0]);
  CheckpointStatsTracker tracker=new SimpleCheckpointStatsTracker(10,tasksToWaitFor);
  tracker.onCompletedCheckpoint(checkpoints[0]);
  Set<JobVertexID> jobVerticesID=checkpoints[0].getTaskStates().keySet();
  Iterator<JobVertexID> jobVertexIDIterator=jobVerticesID.iterator();
  JobVertexID operatorId=null;
  if (jobVertexIDIterator.hasNext()) {
    operatorId=jobVertexIDIterator.next();
  }
  assertNotNull(operatorId);
  assertNotNull(tracker.getOperatorStats(operatorId));
  Field f=tracker.getClass().getDeclaredField("operatorStatsCache");
  f.setAccessible(true);
  Map<JobVertexID,OperatorCheckpointStats> cache=(Map<JobVertexID,OperatorCheckpointStats>)f.get(tracker);
  assertTrue(cache.containsKey(operatorId));
  tracker.onCompletedCheckpoint(checkpoints[1]);
  assertTrue(cache.isEmpty());
}
