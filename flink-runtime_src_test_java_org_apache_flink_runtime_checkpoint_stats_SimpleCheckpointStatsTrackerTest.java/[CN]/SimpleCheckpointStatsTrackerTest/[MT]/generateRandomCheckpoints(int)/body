{
  JobID jobId=new JobID();
  int minNumOperators=4;
  int maxNumOperators=32;
  int minParallelism=4;
  int maxParallelism=16;
  long minStateSize=Integer.MAX_VALUE;
  long maxStateSize=Long.MAX_VALUE;
  CompletedCheckpoint[] checkpoints=new CompletedCheckpoint[numCheckpoints];
  int numOperators=RAND.nextInt(maxNumOperators - minNumOperators + 1) + minNumOperators;
  JobVertexID[] operatorIds=new JobVertexID[numOperators];
  int[] operatorParallelism=new int[numOperators];
  for (int i=0; i < numOperators; i++) {
    operatorIds[i]=new JobVertexID();
    operatorParallelism[i]=RAND.nextInt(maxParallelism - minParallelism + 1) + minParallelism;
  }
  for (int i=0; i < numCheckpoints; i++) {
    long triggerTimestamp=System.currentTimeMillis();
    int maxDuration=RAND.nextInt(128 + 1);
    Map<JobVertexID,TaskState> taskGroupStates=new HashMap<>();
    int completionDuration=0;
    for (int operatorIndex=0; operatorIndex < numOperators; operatorIndex++) {
      JobVertexID operatorId=operatorIds[operatorIndex];
      int parallelism=operatorParallelism[operatorIndex];
      TaskState taskState=new TaskState(operatorId,parallelism);
      taskGroupStates.put(operatorId,taskState);
      for (int subtaskIndex=0; subtaskIndex < parallelism; subtaskIndex++) {
        int duration=RAND.nextInt(maxDuration + 1);
        if (duration > completionDuration) {
          completionDuration=duration;
        }
        SubtaskState subtaskState=new SubtaskState(new SerializedValue<StateHandle<?>>(null),minStateSize + ((long)(RAND.nextDouble() * (maxStateSize - minStateSize))),duration);
        taskState.putState(subtaskIndex,subtaskState);
      }
    }
    final long completionTimestamp=triggerTimestamp + completionDuration + RAND.nextInt(10);
    checkpoints[i]=new CompletedCheckpoint(jobId,i,triggerTimestamp,completionTimestamp,taskGroupStates);
  }
  return checkpoints;
}
