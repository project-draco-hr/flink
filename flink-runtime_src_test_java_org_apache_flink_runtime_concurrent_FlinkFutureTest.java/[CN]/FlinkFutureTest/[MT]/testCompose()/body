{
  CompletableFuture<Integer> initialFuture=new FlinkCompletableFuture<>();
  final int expectedValue=42;
  Future<Integer> composedFuture=initialFuture.thenComposeAsync(new ApplyFunction<Integer,Future<Integer>>(){
    @Override public Future<Integer> apply(    Integer value){
      return FlinkFuture.supplyAsync(new Callable<Integer>(){
        @Override public Integer call() throws Exception {
          return expectedValue;
        }
      }
,executor);
    }
  }
,executor);
  initialFuture.complete(42);
  int actualValue=composedFuture.get();
  assertEquals(expectedValue,actualValue);
}
