{
  CompletableFuture<Integer> initialFuture=new FlinkCompletableFuture<>();
  Future<String> mappedFuture=initialFuture.thenApplyAsync(new ApplyFunction<Integer,String>(){
    @Override public String apply(    Integer value){
      throw new TestException("Test exception");
    }
  }
,executor);
  Future<String> mapped2Future=mappedFuture.thenApplyAsync(new ApplyFunction<String,String>(){
    @Override public String apply(    String value){
      return "foobar";
    }
  }
,executor);
  initialFuture.complete(42);
  try {
    mapped2Future.get();
    fail("Get should have thrown an exception.");
  }
 catch (  ExecutionException e) {
    throw e.getCause();
  }
}
