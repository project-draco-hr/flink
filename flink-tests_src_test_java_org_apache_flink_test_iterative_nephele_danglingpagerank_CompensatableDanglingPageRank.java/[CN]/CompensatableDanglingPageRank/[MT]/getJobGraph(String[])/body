{
  int degreeOfParallelism=2;
  String pageWithRankInputPath="";
  String adjacencyListInputPath="";
  String outputPath=OperatingSystem.isWindows() ? "file:/c:/tmp/flink/iterations" : "file:///tmp/flink/iterations";
  int minorConsumer=25;
  int matchMemory=50;
  int coGroupSortMemory=50;
  int numIterations=25;
  long numVertices=5;
  long numDanglingVertices=1;
  String failingWorkers="1";
  int failingIteration=2;
  double messageLoss=0.75;
  if (args.length >= 15) {
    degreeOfParallelism=Integer.parseInt(args[0]);
    pageWithRankInputPath=args[1];
    adjacencyListInputPath=args[2];
    outputPath=args[3];
    minorConsumer=Integer.parseInt(args[5]);
    matchMemory=Integer.parseInt(args[6]);
    coGroupSortMemory=Integer.parseInt(args[7]);
    numIterations=Integer.parseInt(args[8]);
    numVertices=Long.parseLong(args[9]);
    numDanglingVertices=Long.parseLong(args[10]);
    failingWorkers=args[11];
    failingIteration=Integer.parseInt(args[12]);
    messageLoss=Double.parseDouble(args[13]);
  }
  int totalMemoryConsumption=3 * minorConsumer + matchMemory + coGroupSortMemory;
  JobGraph jobGraph=new JobGraph("CompensatableDanglingPageRank");
  InputFormatVertex pageWithRankInput=JobGraphUtils.createInput(new ImprovedDanglingPageRankInputFormat(),pageWithRankInputPath,"DanglingPageWithRankInput",jobGraph,degreeOfParallelism);
  TaskConfig pageWithRankInputConfig=new TaskConfig(pageWithRankInput.getConfiguration());
  pageWithRankInputConfig.addOutputShipStrategy(ShipStrategyType.PARTITION_HASH);
  pageWithRankInputConfig.setOutputComparator(fieldZeroComparator,0);
  pageWithRankInputConfig.setOutputSerializer(recSerializer);
  pageWithRankInputConfig.setStubParameter("pageRank.numVertices",String.valueOf(numVertices));
  InputFormatVertex adjacencyListInput=JobGraphUtils.createInput(new ImprovedAdjacencyListInputFormat(),adjacencyListInputPath,"AdjancencyListInput",jobGraph,degreeOfParallelism);
  TaskConfig adjacencyListInputConfig=new TaskConfig(adjacencyListInput.getConfiguration());
  adjacencyListInputConfig.addOutputShipStrategy(ShipStrategyType.PARTITION_HASH);
  adjacencyListInputConfig.setOutputSerializer(recSerializer);
  adjacencyListInputConfig.setOutputComparator(fieldZeroComparator,0);
  AbstractJobVertex head=JobGraphUtils.createTask(IterationHeadPactTask.class,"IterationHead",jobGraph,degreeOfParallelism);
  TaskConfig headConfig=new TaskConfig(head.getConfiguration());
  headConfig.setIterationId(ITERATION_ID);
  headConfig.addInputToGroup(0);
  headConfig.setIterationHeadPartialSolutionOrWorksetInputIndex(0);
  headConfig.setInputSerializer(recSerializer,0);
  headConfig.setInputComparator(fieldZeroComparator,0);
  headConfig.setInputLocalStrategy(0,LocalStrategy.SORT);
  headConfig.setRelativeMemoryInput(0,(double)minorConsumer / totalMemoryConsumption);
  headConfig.setFilehandlesInput(0,NUM_FILE_HANDLES_PER_SORT);
  headConfig.setSpillingThresholdInput(0,SORT_SPILL_THRESHOLD);
  headConfig.setRelativeBackChannelMemory((double)minorConsumer / totalMemoryConsumption);
  headConfig.setOutputSerializer(recSerializer);
  headConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
  headConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
  TaskConfig headFinalOutConfig=new TaskConfig(new Configuration());
  headFinalOutConfig.setOutputSerializer(recSerializer);
  headFinalOutConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
  headConfig.setIterationHeadFinalOutputConfig(headFinalOutConfig);
  headConfig.setIterationHeadIndexOfSyncOutput(3);
  headConfig.setNumberOfIterations(numIterations);
  headConfig.setDriver(CollectorMapDriver.class);
  headConfig.setDriverStrategy(DriverStrategy.COLLECTOR_MAP);
  headConfig.setStubWrapper(new UserCodeClassWrapper<CompensatingMap>(CompensatingMap.class));
  headConfig.setStubParameter("pageRank.numVertices",String.valueOf(numVertices));
  headConfig.setStubParameter("compensation.failingWorker",failingWorkers);
  headConfig.setStubParameter("compensation.failingIteration",String.valueOf(failingIteration));
  headConfig.setStubParameter("compensation.messageLoss",String.valueOf(messageLoss));
  headConfig.addIterationAggregator(CompensatableDotProductCoGroup.AGGREGATOR_NAME,new PageRankStatsAggregator());
  AbstractJobVertex intermediate=JobGraphUtils.createTask(IterationIntermediatePactTask.class,"IterationIntermediate",jobGraph,degreeOfParallelism);
  TaskConfig intermediateConfig=new TaskConfig(intermediate.getConfiguration());
  intermediateConfig.setIterationId(ITERATION_ID);
  intermediateConfig.setDriver(BuildSecondCachedMatchDriver.class);
  intermediateConfig.setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND);
  intermediateConfig.setRelativeMemoryDriver((double)matchMemory / totalMemoryConsumption);
  intermediateConfig.addInputToGroup(0);
  intermediateConfig.addInputToGroup(1);
  intermediateConfig.setInputSerializer(recSerializer,0);
  intermediateConfig.setInputSerializer(recSerializer,1);
  intermediateConfig.setDriverComparator(fieldZeroComparator,0);
  intermediateConfig.setDriverComparator(fieldZeroComparator,1);
  intermediateConfig.setDriverPairComparator(pairComparatorFactory);
  intermediateConfig.setOutputSerializer(recSerializer);
  intermediateConfig.addOutputShipStrategy(ShipStrategyType.PARTITION_HASH);
  intermediateConfig.setOutputComparator(fieldZeroComparator,0);
  intermediateConfig.setStubWrapper(new UserCodeClassWrapper<CompensatableDotProductMatch>(CompensatableDotProductMatch.class));
  intermediateConfig.setStubParameter("pageRank.numVertices",String.valueOf(numVertices));
  intermediateConfig.setStubParameter("compensation.failingWorker",failingWorkers);
  intermediateConfig.setStubParameter("compensation.failingIteration",String.valueOf(failingIteration));
  intermediateConfig.setStubParameter("compensation.messageLoss",String.valueOf(messageLoss));
  AbstractJobVertex tail=JobGraphUtils.createTask(IterationTailPactTask.class,"IterationTail",jobGraph,degreeOfParallelism);
  TaskConfig tailConfig=new TaskConfig(tail.getConfiguration());
  tailConfig.setIterationId(ITERATION_ID);
  tailConfig.setIsWorksetUpdate();
  tailConfig.setDriver(CoGroupDriver.class);
  tailConfig.setDriverStrategy(DriverStrategy.CO_GROUP);
  tailConfig.addInputToGroup(0);
  tailConfig.addInputToGroup(1);
  tailConfig.setInputSerializer(recSerializer,0);
  tailConfig.setInputSerializer(recSerializer,1);
  tailConfig.setDriverComparator(fieldZeroComparator,0);
  tailConfig.setDriverComparator(fieldZeroComparator,1);
  tailConfig.setDriverPairComparator(pairComparatorFactory);
  tailConfig.setInputAsynchronouslyMaterialized(0,true);
  tailConfig.setRelativeInputMaterializationMemory(0,(double)minorConsumer / totalMemoryConsumption);
  tailConfig.setInputLocalStrategy(1,LocalStrategy.SORT);
  tailConfig.setInputComparator(fieldZeroComparator,1);
  tailConfig.setRelativeMemoryInput(1,(double)coGroupSortMemory / totalMemoryConsumption);
  tailConfig.setFilehandlesInput(1,NUM_FILE_HANDLES_PER_SORT);
  tailConfig.setSpillingThresholdInput(1,SORT_SPILL_THRESHOLD);
  tailConfig.setOutputSerializer(recSerializer);
  tailConfig.setStubWrapper(new UserCodeClassWrapper<CompensatableDotProductCoGroup>(CompensatableDotProductCoGroup.class));
  tailConfig.setStubParameter("pageRank.numVertices",String.valueOf(numVertices));
  tailConfig.setStubParameter("pageRank.numDanglingVertices",String.valueOf(numDanglingVertices));
  tailConfig.setStubParameter("compensation.failingWorker",failingWorkers);
  tailConfig.setStubParameter("compensation.failingIteration",String.valueOf(failingIteration));
  tailConfig.setStubParameter("compensation.messageLoss",String.valueOf(messageLoss));
  OutputFormatVertex output=JobGraphUtils.createFileOutput(jobGraph,"FinalOutput",degreeOfParallelism);
  TaskConfig outputConfig=new TaskConfig(output.getConfiguration());
  outputConfig.addInputToGroup(0);
  outputConfig.setInputSerializer(recSerializer,0);
  outputConfig.setStubWrapper(new UserCodeClassWrapper<PageWithRankOutFormat>(PageWithRankOutFormat.class));
  outputConfig.setStubParameter(FileOutputFormat.FILE_PARAMETER_KEY,outputPath);
  AbstractJobVertex sync=JobGraphUtils.createSync(jobGraph,degreeOfParallelism);
  TaskConfig syncConfig=new TaskConfig(sync.getConfiguration());
  syncConfig.setNumberOfIterations(numIterations);
  syncConfig.addIterationAggregator(CompensatableDotProductCoGroup.AGGREGATOR_NAME,new PageRankStatsAggregator());
  syncConfig.setConvergenceCriterion(CompensatableDotProductCoGroup.AGGREGATOR_NAME,new DiffL1NormConvergenceCriterion());
  syncConfig.setIterationId(ITERATION_ID);
  JobGraphUtils.connect(pageWithRankInput,head,DistributionPattern.ALL_TO_ALL);
  JobGraphUtils.connect(head,intermediate,DistributionPattern.POINTWISE);
  intermediateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(adjacencyListInput,intermediate,DistributionPattern.ALL_TO_ALL);
  JobGraphUtils.connect(head,tail,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(intermediate,tail,DistributionPattern.ALL_TO_ALL);
  tailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  tailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(1,degreeOfParallelism);
  JobGraphUtils.connect(head,output,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(head,sync,DistributionPattern.POINTWISE);
  SlotSharingGroup sharingGroup=new SlotSharingGroup();
  pageWithRankInput.setSlotSharingGroup(sharingGroup);
  adjacencyListInput.setSlotSharingGroup(sharingGroup);
  head.setSlotSharingGroup(sharingGroup);
  intermediate.setSlotSharingGroup(sharingGroup);
  tail.setSlotSharingGroup(sharingGroup);
  output.setSlotSharingGroup(sharingGroup);
  sync.setSlotSharingGroup(sharingGroup);
  tail.setStrictlyCoLocatedWith(head);
  intermediate.setStrictlyCoLocatedWith(head);
  return jobGraph;
}
