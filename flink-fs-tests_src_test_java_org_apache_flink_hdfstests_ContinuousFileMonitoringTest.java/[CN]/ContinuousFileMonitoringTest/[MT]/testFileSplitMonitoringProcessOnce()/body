{
  Set<String> uniqFilesFound=new HashSet<>();
  FileCreator fc=new FileCreator(INTERVAL,1);
  Set<org.apache.hadoop.fs.Path> filesCreated=fc.getFilesCreated();
  fc.start();
  if (filesCreated.size() == 0) {
synchronized (filesCreated) {
      if (filesCreated.size() == 0) {
        filesCreated.wait();
      }
    }
  }
  Assert.assertTrue(fc.getFilesCreated().size() >= 1);
  TextInputFormat format=new TextInputFormat(new Path(hdfsURI));
  format.setFilesFilter(FilePathFilter.createDefaultFilter());
  ContinuousFileMonitoringFunction<String> monitoringFunction=new ContinuousFileMonitoringFunction<>(format,hdfsURI,FileProcessingMode.PROCESS_ONCE,1,INTERVAL);
  monitoringFunction.open(new Configuration());
  monitoringFunction.run(new TestingSourceContext(monitoringFunction,uniqFilesFound));
  fc.join();
  Assert.assertEquals(NO_OF_FILES,filesCreated.size());
  Set<String> fileNamesCreated=new HashSet<>();
  for (  org.apache.hadoop.fs.Path path : fc.getFilesCreated()) {
    fileNamesCreated.add(path.toString());
  }
  Assert.assertTrue(uniqFilesFound.size() >= 1 && uniqFilesFound.size() < fileNamesCreated.size());
  for (  String file : uniqFilesFound) {
    Assert.assertTrue(fileNamesCreated.contains(file));
  }
  for (  org.apache.hadoop.fs.Path file : filesCreated) {
    hdfs.delete(file,false);
  }
}
