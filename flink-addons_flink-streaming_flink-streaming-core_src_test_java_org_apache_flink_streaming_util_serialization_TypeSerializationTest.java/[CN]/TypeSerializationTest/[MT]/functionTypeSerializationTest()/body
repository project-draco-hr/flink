{
  TypeSerializerWrapper<Tuple1<Integer>,Tuple,Tuple1<Integer>> ser=new FunctionTypeWrapper<Tuple1<Integer>,Tuple,Tuple1<Integer>>(new MyMap(),RichMapFunction.class,0,-1,1);
  byte[] serializedType=SerializationUtils.serialize(ser);
  TypeSerializerWrapper<Tuple1<Integer>,Tuple,Tuple1<Integer>> ser2=(TypeSerializerWrapper<Tuple1<Integer>,Tuple,Tuple1<Integer>>)SerializationUtils.deserialize(serializedType);
  assertNotNull(ser.getInputTypeInfo1());
  assertNotNull(ser2.getInputTypeInfo1());
  assertNotNull(ser.getOutputTypeInfo());
  assertNotNull(ser2.getOutputTypeInfo());
  assertEquals(ser.getInputTypeInfo1(),ser2.getInputTypeInfo1());
  try {
    ser.getInputTypeInfo2();
    fail();
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
  assertEquals(ser.getOutputTypeInfo(),ser2.getOutputTypeInfo());
}
