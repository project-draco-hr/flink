{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Double,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongEdgeData(env),new MapFunction<Long,Double>(){
        public Double map(        Long value){
          return 0.1d;
        }
      }
,env);
      graph.getVertices().writeAsCsv(resultPath);
      env.execute();
      return "1,0.1\n" + "2,0.1\n" + "3,0.1\n"+ "4,0.1\n"+ "5,0.1\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Tuple2<Long,Long>,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongEdgeData(env),new MapFunction<Long,Tuple2<Long,Long>>(){
      public Tuple2<Long,Long> map(      Long vertexId){
        return new Tuple2<Long,Long>(vertexId * 2,42l);
      }
    }
,env);
    graph.getVertices().writeAsCsv(resultPath);
    env.execute();
    return "1,(2,42)\n" + "2,(4,42)\n" + "3,(6,42)\n"+ "4,(8,42)\n"+ "5,(10,42)\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<String,Double,Long> graph=Graph.fromDataSet(TestGraphUtils.getStringLongEdgeData(env),new MapFunction<String,Double>(){
    public Double map(    String value){
      return 0.1d;
    }
  }
,env);
  graph.getVertices().writeAsCsv(resultPath);
  env.execute();
  return "1,0.1\n" + "2,0.1\n" + "3,0.1\n"+ "4,0.1\n"+ "5,0.1\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,DummyCustomType,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongEdgeData(env),new MapFunction<Long,DummyCustomType>(){
  public DummyCustomType map(  Long vertexId){
    return new DummyCustomType(vertexId.intValue() - 1,false);
  }
}
,env);
graph.getVertices().writeAsCsv(resultPath);
env.execute();
return "1,(F,0)\n" + "2,(F,1)\n" + "3,(F,2)\n"+ "4,(F,3)\n"+ "5,(F,4)\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
