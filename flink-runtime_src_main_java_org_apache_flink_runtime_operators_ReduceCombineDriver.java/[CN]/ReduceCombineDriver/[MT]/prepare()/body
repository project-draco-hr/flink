{
  final Counter numRecordsOut=taskContext.getMetricGroup().counter("numRecordsOut");
  strategy=taskContext.getTaskConfig().getDriverStrategy();
  final TypeSerializerFactory<T> serializerFactory=taskContext.getInputSerializer(0);
  comparator=taskContext.getDriverComparator(0);
  serializer=serializerFactory.getSerializer();
  reducer=taskContext.getStub();
  output=new CountingCollector<>(this.taskContext.getOutputCollector(),numRecordsOut);
  MemoryManager memManager=taskContext.getMemoryManager();
  final int numMemoryPages=memManager.computeNumberOfPages(taskContext.getTaskConfig().getRelativeMemoryDriver());
  memory=memManager.allocatePages(taskContext.getContainingTask(),numMemoryPages);
  ExecutionConfig executionConfig=taskContext.getExecutionConfig();
  objectReuseEnabled=executionConfig.isObjectReuseEnabled();
  if (LOG.isDebugEnabled()) {
    LOG.debug("ReduceCombineDriver object reuse: " + (objectReuseEnabled ? "ENABLED" : "DISABLED") + ".");
  }
switch (strategy) {
case SORTED_PARTIAL_REDUCE:
    if (comparator.supportsSerializationWithKeyNormalization() && serializer.getLength() > 0 && serializer.getLength() <= THRESHOLD_FOR_IN_PLACE_SORTING) {
      sorter=new FixedLengthRecordSorter<T>(serializer,comparator.duplicate(),memory);
    }
 else {
      sorter=new NormalizedKeySorter<T>(serializer,comparator.duplicate(),memory);
    }
  break;
case HASHED_PARTIAL_REDUCE:
table=new InPlaceMutableHashTable<T>(serializer,comparator,memory);
reduceFacade=table.new ReduceFacade(reducer,output,objectReuseEnabled);
break;
default :
throw new Exception("Invalid strategy " + taskContext.getTaskConfig().getDriverStrategy() + " for reduce combiner.");
}
}
