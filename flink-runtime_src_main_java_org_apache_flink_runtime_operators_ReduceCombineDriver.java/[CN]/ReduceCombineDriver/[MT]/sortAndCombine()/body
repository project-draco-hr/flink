{
  final InMemorySorter<T> sorter=this.sorter;
  if (!sorter.isEmpty()) {
    this.sortAlgo.sort(sorter);
    final TypeSerializer<T> serializer=this.serializer;
    final TypeComparator<T> comparator=this.comparator;
    final ReduceFunction<T> function=this.reducer;
    final Collector<T> output=this.output;
    final MutableObjectIterator<T> input=sorter.getIterator();
    if (objectReuseEnabled) {
      T reuse1=serializer.createInstance();
      T reuse2=serializer.createInstance();
      T value=input.next(reuse1);
      while (this.running && value != null) {
        comparator.setReference(value);
        T res=value;
        while ((value=input.next(reuse2)) != null) {
          if (comparator.equalToReference(value)) {
            res=function.reduce(res,value);
          }
 else {
            break;
          }
        }
        output.collect(res);
        if (value != null) {
          value=serializer.copy(value,reuse1);
        }
      }
    }
 else {
      T value=input.next(serializer.createInstance());
      while (this.running && value != null) {
        comparator.setReference(value);
        T res=value;
        while ((value=input.next(serializer.createInstance())) != null) {
          if (comparator.equalToReference(value)) {
            res=function.reduce(res,value);
          }
 else {
            break;
          }
        }
        output.collect(res);
      }
    }
  }
}
