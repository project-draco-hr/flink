{
  this.memoryConsumerWeights=0;
  for (  SinkPlanNode node : sinks) {
    node.accept(this);
  }
  if (this.memoryConsumerWeights > 0) {
    for (    PlanNode node : this.allNodes) {
      final int consumerWeight=node.getMemoryConsumerWeight();
      if (consumerWeight > 0) {
        final double relativeMem=(double)consumerWeight / this.memoryConsumerWeights;
        node.setRelativeMemoryPerSubtask(relativeMem);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Assigned " + relativeMem + " of total memory to each subtask of "+ node.getPactContract().getName()+ ".");
        }
      }
      for (      Channel c : node.getInputs()) {
        if (c.getLocalStrategy().dams()) {
          final double relativeMem=1.0 / this.memoryConsumerWeights;
          c.setRelativeMemoryLocalStrategy(relativeMem);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Assigned " + relativeMem + " of total memory to each local strategy "+ "instance of "+ c+ ".");
          }
        }
        if (c.getTempMode() != TempMode.NONE) {
          final double relativeMem=1.0 / this.memoryConsumerWeights;
          c.setRelativeTempMemory(relativeMem);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Assigned " + relativeMem + " of total memory to each instance of the temp "+ "table"+ " "+ "for "+ c+ ".");
          }
        }
      }
    }
  }
  return new OptimizedPlan(this.sources,this.sinks,this.allNodes,jobName,originalPlan);
}
