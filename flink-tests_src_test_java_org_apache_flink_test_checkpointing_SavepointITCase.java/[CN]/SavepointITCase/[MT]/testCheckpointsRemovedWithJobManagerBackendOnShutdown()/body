{
  int numTaskManagers=2;
  int numSlotsPerTaskManager=2;
  int parallelism=numTaskManagers * numSlotsPerTaskManager;
  final Deadline deadline=new FiniteDuration(5,TimeUnit.MINUTES).fromNow();
  final int numberOfCompletedCheckpoints=10;
  final File tmpDir=CommonTestUtils.createTempDirectory();
  LOG.info("Created temporary directory: " + tmpDir + ".");
  ForkableFlinkMiniCluster flink=null;
  List<File> checkpointFiles=new ArrayList<>();
  try {
    final Configuration config=new Configuration();
    config.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER,numTaskManagers);
    config.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,numSlotsPerTaskManager);
    final File checkpointDir=new File(tmpDir,"checkpoints");
    if (!checkpointDir.mkdir()) {
      fail("Test setup failed: failed to create temporary directories.");
    }
    LOG.info("Created temporary checkpoint directory: " + checkpointDir + ".");
    config.setString(SavepointStoreFactory.SAVEPOINT_BACKEND_KEY,"jobmanager");
    config.setString(ConfigConstants.STATE_BACKEND,"filesystem");
    config.setString(FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY,checkpointDir.toURI().toString());
    LOG.info("Flink configuration: " + config + ".");
    flink=new ForkableFlinkMiniCluster(config);
    LOG.info("Starting Flink cluster.");
    flink.start();
    LOG.info("Retrieving JobManager.");
    ActorGateway jobManager=Await.result(flink.leaderGateway().future(),deadline.timeLeft());
    LOG.info("JobManager: " + jobManager + ".");
    final JobGraph jobGraph=createJobGraph(parallelism,0,1000,1000);
    final JobID jobId=jobGraph.getJobID();
    InfiniteTestSource.CheckpointCompleteLatch=new CountDownLatch(numberOfCompletedCheckpoints);
    LOG.info("Submitting job " + jobGraph.getJobID() + " in detached mode.");
    flink.submitJobDetached(jobGraph);
    LOG.info("Waiting for " + numberOfCompletedCheckpoints + " checkpoint complete notifications.");
    InfiniteTestSource.CheckpointCompleteLatch.await();
    LOG.info("Received all " + numberOfCompletedCheckpoints + " checkpoint complete notifications.");
    LOG.info("Triggering a savepoint.");
    Future<Object> savepointPathFuture=jobManager.ask(new TriggerSavepoint(jobId),deadline.timeLeft());
    final String savepointPath=((TriggerSavepointSuccess)Await.result(savepointPathFuture,deadline.timeLeft())).savepointPath();
    LOG.info("Retrieved savepoint path: " + savepointPath + ".");
    LOG.info("Requesting the savepoint.");
    Future<Object> savepointFuture=jobManager.ask(new RequestSavepoint(savepointPath),deadline.timeLeft());
    CompletedCheckpoint savepoint=((ResponseSavepoint)Await.result(savepointFuture,deadline.timeLeft())).savepoint();
    LOG.info("Retrieved savepoint: " + savepoint + ".");
    LOG.info("Cancelling job " + jobId + ".");
    Future<Object> cancelRespFuture=jobManager.ask(new CancelJob(jobId),deadline.timeLeft());
    assertTrue(Await.result(cancelRespFuture,deadline.timeLeft()) instanceof CancellationSuccess);
    LOG.info("Waiting for job " + jobId + " to be removed.");
    Future<Object> removedRespFuture=jobManager.ask(new NotifyWhenJobRemoved(jobId),deadline.timeLeft());
    assertTrue((Boolean)Await.result(removedRespFuture,deadline.timeLeft()));
    for (    TaskState stateForTaskGroup : savepoint.getTaskStates().values()) {
      for (      SubtaskState subtaskState : stateForTaskGroup.getStates()) {
        StreamTaskStateList taskStateList=(StreamTaskStateList)subtaskState.getState().deserializeValue(ClassLoader.getSystemClassLoader());
        for (        StreamTaskState taskState : taskStateList.getState(ClassLoader.getSystemClassLoader())) {
          AbstractFileStateHandle fsState=(AbstractFileStateHandle)taskState.getFunctionState();
          checkpointFiles.add(new File(fsState.getFilePath().toUri()));
        }
      }
    }
  }
  finally {
    if (flink != null) {
      flink.shutdown();
    }
    assertTrue(checkpointFiles.size() > 0);
    for (    File f : checkpointFiles) {
      String errMsg="Checkpoint file " + f + " not cleaned up properly.";
      assertFalse(errMsg,f.exists());
    }
    if (tmpDir != null) {
      FileUtils.deleteDirectory(tmpDir);
    }
  }
}
