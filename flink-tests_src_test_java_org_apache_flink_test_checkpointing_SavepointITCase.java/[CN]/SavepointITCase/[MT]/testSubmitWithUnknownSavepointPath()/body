{
  int numTaskManagers=1;
  int numSlotsPerTaskManager=1;
  int parallelism=numTaskManagers * numSlotsPerTaskManager;
  final Deadline deadline=new FiniteDuration(5,TimeUnit.MINUTES).fromNow();
  TestingCluster flink=null;
  try {
    final Configuration config=new Configuration();
    config.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER,numTaskManagers);
    config.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,numSlotsPerTaskManager);
    LOG.info("Flink configuration: " + config + ".");
    flink=new TestingCluster(config);
    LOG.info("Starting Flink cluster.");
    flink.start();
    LOG.info("Retrieving JobManager.");
    ActorGateway jobManager=Await.result(flink.leaderGateway().future(),deadline.timeLeft());
    LOG.info("JobManager: " + jobManager + ".");
    int numberOfRetries=1000;
    final JobGraph jobGraph=createJobGraph(parallelism,numberOfRetries,3600000,1000);
    jobGraph.setSavepointPath("unknown path");
    assertEquals("unknown path",jobGraph.getSnapshotSettings().getSavepointPath());
    LOG.info("Submitting job " + jobGraph.getJobID() + " in detached mode.");
    try {
      flink.submitJobAndWait(jobGraph,false);
    }
 catch (    Exception e) {
      assertEquals(SuppressRestartsException.class,e.getCause().getClass());
      assertEquals(IllegalArgumentException.class,e.getCause().getCause().getClass());
    }
  }
  finally {
    if (flink != null) {
      flink.shutdown();
    }
  }
}
