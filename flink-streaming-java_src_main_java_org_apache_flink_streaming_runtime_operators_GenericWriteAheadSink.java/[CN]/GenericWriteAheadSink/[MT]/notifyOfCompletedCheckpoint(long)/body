{
  super.notifyOfCompletedCheckpoint(checkpointId);
synchronized (state.pendingHandles) {
    Set<Long> pastCheckpointIds=state.pendingHandles.keySet();
    Set<Long> checkpointsToRemove=new HashSet<>();
    for (    Long pastCheckpointId : pastCheckpointIds) {
      if (pastCheckpointId <= checkpointId) {
        try {
          if (!committer.isCheckpointCommitted(pastCheckpointId)) {
            Tuple2<Long,StreamStateHandle> handle=state.pendingHandles.get(pastCheckpointId);
            FSDataInputStream in=handle.f1.openInputStream();
            boolean success=sendValues(new ReusingMutableToRegularIteratorWrapper<>(new InputViewIterator<>(new DataInputViewStreamWrapper(in),serializer),serializer),handle.f0);
            if (success) {
              committer.commitCheckpoint(pastCheckpointId);
              checkpointsToRemove.add(pastCheckpointId);
            }
          }
 else {
            checkpointsToRemove.add(pastCheckpointId);
          }
        }
 catch (        Exception e) {
          LOG.error("Could not commit checkpoint.",e);
          break;
        }
      }
    }
    for (    Long toRemove : checkpointsToRemove) {
      Tuple2<Long,StreamStateHandle> handle=state.pendingHandles.get(toRemove);
      state.pendingHandles.remove(toRemove);
      handle.f1.discardState();
    }
  }
}
