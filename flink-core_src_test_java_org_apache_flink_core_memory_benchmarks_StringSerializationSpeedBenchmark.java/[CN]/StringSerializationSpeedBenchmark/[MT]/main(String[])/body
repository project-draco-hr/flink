{
  final int LARGE_SEGMENT_SIZE=1024 * 1024 * 1024;
  final byte[] largeSegment=new byte[LARGE_SEGMENT_SIZE];
  final ByteBuffer largeOffHeap=ByteBuffer.allocateDirect(LARGE_SEGMENT_SIZE);
  final String[] randomStrings=generateRandomStrings(5468917685263896L,1000,128,6,true);
  final StringSerializer ser=StringSerializer.INSTANCE;
  final int outerRounds=10;
  final int innerRounds=5000;
{
    System.out.println("testing core heap memory segment");
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      ArrayList<MemorySegment> memory=new ArrayList<>();
      memory.add(HeapMemorySegment.FACTORY.wrapPooledHeapMemory(largeSegment,null));
      ArrayList<MemorySegment> target=new ArrayList<>();
      CoreMemorySegmentOutView output=new CoreMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
      for (int i=0; i < innerRounds; i++) {
        for (        String s : randomStrings) {
          ser.serialize(s,output);
        }
      }
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Core heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing core hybrid memory segment on heap");
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      ArrayList<MemorySegment> memory=new ArrayList<>();
      memory.add(HybridMemorySegment.FACTORY.wrapPooledHeapMemory(largeSegment,null));
      ArrayList<MemorySegment> target=new ArrayList<>();
      CoreMemorySegmentOutView output=new CoreMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
      for (int i=0; i < innerRounds; i++) {
        for (        String s : randomStrings) {
          ser.serialize(s,output);
        }
      }
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Core hybrid memory segment on heap took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing core hybrid memory segment off heap");
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      ArrayList<MemorySegment> memory=new ArrayList<>();
      memory.add(HybridMemorySegment.FACTORY.wrapPooledOffHeapMemory(largeOffHeap,null));
      ArrayList<MemorySegment> target=new ArrayList<>();
      CoreMemorySegmentOutView output=new CoreMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
      for (int i=0; i < innerRounds; i++) {
        for (        String s : randomStrings) {
          ser.serialize(s,output);
        }
      }
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Core hybrid memory segment off heap took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing pure hybrid memory segment on heap");
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      ArrayList<PureHybridMemorySegment> memory=new ArrayList<>();
      memory.add(new PureHybridMemorySegment(largeSegment));
      ArrayList<PureHybridMemorySegment> target=new ArrayList<>();
      PureHybridMemorySegmentOutView output=new PureHybridMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
      for (int i=0; i < innerRounds; i++) {
        for (        String s : randomStrings) {
          ser.serialize(s,output);
        }
      }
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Pure hybrid on heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing pure hybrid memory segment off heap");
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      ArrayList<PureHybridMemorySegment> memory=new ArrayList<>();
      memory.add(new PureHybridMemorySegment(largeOffHeap));
      ArrayList<PureHybridMemorySegment> target=new ArrayList<>();
      PureHybridMemorySegmentOutView output=new PureHybridMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
      for (int i=0; i < innerRounds; i++) {
        for (        String s : randomStrings) {
          ser.serialize(s,output);
        }
      }
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Pure hybrid off heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing pure heap memory segment");
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      ArrayList<PureHeapMemorySegment> memory=new ArrayList<>();
      memory.add(new PureHeapMemorySegment(largeSegment));
      ArrayList<PureHeapMemorySegment> target=new ArrayList<>();
      PureHeapMemorySegmentOutView output=new PureHeapMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
      for (int i=0; i < innerRounds; i++) {
        for (        String s : randomStrings) {
          ser.serialize(s,output);
        }
      }
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Pure heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
}
