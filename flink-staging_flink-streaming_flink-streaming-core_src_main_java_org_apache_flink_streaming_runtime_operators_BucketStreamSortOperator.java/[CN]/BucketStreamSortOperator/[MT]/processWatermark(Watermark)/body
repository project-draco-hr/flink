{
  long maxBucketId=mark.getTimestamp() - (mark.getTimestamp() % granularity);
  Set<Long> toRemove=Sets.newHashSet();
  for (  Map.Entry<Long,List<StreamRecord<T>>> bucket : buckets.entrySet()) {
    if (bucket.getKey() < maxBucketId) {
      Collections.sort(bucket.getValue(),new Comparator<StreamRecord<T>>(){
        @Override public int compare(        StreamRecord<T> o1,        StreamRecord<T> o2){
          return (int)(o1.getTimestamp() - o2.getTimestamp());
        }
      }
);
      for (      StreamRecord<T> r : bucket.getValue()) {
        output.collect(r);
      }
      toRemove.add(bucket.getKey());
    }
  }
  for (  Long l : toRemove) {
    buckets.remove(l);
  }
  output.emitWatermark(mark);
}
