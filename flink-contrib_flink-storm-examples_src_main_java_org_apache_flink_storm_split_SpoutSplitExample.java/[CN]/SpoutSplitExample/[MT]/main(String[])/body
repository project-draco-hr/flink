{
  boolean useFile=SpoutSplitExample.parseParameters(args);
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  String[] rawOutputs=new String[]{RandomSpout.EVEN_STREAM,RandomSpout.ODD_STREAM};
  final DataStream<SplitStreamType<Integer>> numbers=env.addSource(new SpoutWrapper<SplitStreamType<Integer>>(new RandomSpout(true,seed),rawOutputs,1000),TypeExtractor.getForObject(new SplitStreamType<Integer>()));
  SplitStream<SplitStreamType<Integer>> splitStream=numbers.split(new StormStreamSelector<Integer>());
  DataStream<SplitStreamType<Integer>> evenStream=splitStream.select(RandomSpout.EVEN_STREAM);
  DataStream<SplitStreamType<Integer>> oddStream=splitStream.select(RandomSpout.ODD_STREAM);
  DataStream<Tuple2<String,Integer>> evenResult=evenStream.map(new SplitStreamMapper<Integer>()).returns(Integer.class).map(new Enrich(true));
  DataStream<Tuple2<String,Integer>> oddResult=oddStream.map(new SplitStreamMapper<Integer>()).transform("oddBolt",TypeExtractor.getForObject(new Tuple2<String,Integer>("",0)),new BoltWrapper<Integer,Tuple2<String,Integer>>(new VerifyAndEnrichBolt(false)));
  if (useFile) {
    evenResult.writeAsText(outputPath + "/even");
    oddResult.writeAsText(outputPath + "/odd");
  }
 else {
    evenResult.print();
    oddResult.print();
  }
  env.execute("Spout split stream example");
}
