{
  final TypeInformation<?> in1Type=TypeInfoParser.parse(in1);
  final TypeInformation<?> in2Type=TypeInfoParser.parse(in2);
  final TypeInformation<?> outType=TypeInfoParser.parse(out);
  final Set<Annotation> annotations=FunctionAnnotation.readDualForwardAnnotations(clazz);
  final DualInputSemanticProperties expected=SemanticPropUtil.getSemanticPropsDual(annotations,in1Type,in2Type,outType);
  final UdfAnalyzer ua=new UdfAnalyzer(baseClass,clazz,"operator",in1Type,in2Type,outType,(keys1 == null) ? null : new Keys.ExpressionKeys(keys1,in1Type),(keys2 == null) ? null : new Keys.ExpressionKeys(keys2,in2Type),true);
  ua.analyze();
  final DualInputSemanticProperties actual=(DualInputSemanticProperties)ua.getSemanticProperties();
  assertEquals(expected.toString(),actual.toString());
}
