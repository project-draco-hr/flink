{
  String pathPrefix=getFilesystemProvider().getURIPrefix() + getFilesystemProvider().getTempDirPath();
  FileDataSourceContract<PactString,PactString> input=new FileDataSourceContract<PactString,PactString>(ReduceTestInFormat.class,pathPrefix + "/reduceInput");
  input.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  input.setDegreeOfParallelism(config.getInteger("ReduceTest#NoSubtasks",1));
  ReduceContract<PactString,PactString,PactString,PactInteger> testReducer=new ReduceContract<PactString,PactString,PactString,PactInteger>(TestReducer.class);
  testReducer.setDegreeOfParallelism(config.getInteger("ReduceTest#NoSubtasks",1));
  testReducer.getParameters().setString(PactCompiler.HINT_LOCAL_STRATEGY,config.getString("ReduceTest#LocalStrategy",""));
  testReducer.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY,config.getString("ReduceTest#ShipStrategy",""));
  FileDataSinkContract<PactString,PactInteger> output=new FileDataSinkContract<PactString,PactInteger>(ReduceTestOutFormat.class,pathPrefix + "/result.txt");
  output.setDegreeOfParallelism(1);
  output.setInput(testReducer);
  testReducer.setInput(input);
  Plan plan=new Plan(output);
  PactCompiler pc=new PactCompiler();
  OptimizedPlan op=pc.compile(plan);
  JobGraphGenerator jgg=new JobGraphGenerator();
  return jgg.compileJobGraph(op);
}
