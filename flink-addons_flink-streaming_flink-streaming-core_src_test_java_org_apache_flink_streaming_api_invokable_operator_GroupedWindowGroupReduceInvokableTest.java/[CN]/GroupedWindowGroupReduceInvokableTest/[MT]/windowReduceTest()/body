{
  List<Tuple2<String,Integer>> inputs2=new ArrayList<Tuple2<String,Integer>>();
  inputs2.add(new Tuple2<String,Integer>("a",1));
  inputs2.add(new Tuple2<String,Integer>("a",2));
  inputs2.add(new Tuple2<String,Integer>("b",2));
  inputs2.add(new Tuple2<String,Integer>("b",2));
  inputs2.add(new Tuple2<String,Integer>("b",5));
  inputs2.add(new Tuple2<String,Integer>("a",7));
  inputs2.add(new Tuple2<String,Integer>("b",9));
  inputs2.add(new Tuple2<String,Integer>("b",10));
  List<Tuple2<String,Integer>> expected2=new ArrayList<Tuple2<String,Integer>>();
  expected2.add(new Tuple2<String,Integer>("a",3));
  expected2.add(new Tuple2<String,Integer>("b",4));
  expected2.add(new Tuple2<String,Integer>("b",5));
  expected2.add(new Tuple2<String,Integer>("a",7));
  expected2.add(new Tuple2<String,Integer>("b",10));
  GroupedWindowGroupReduceInvokable<Tuple2<String,Integer>,Tuple2<String,Integer>> invokable2=new GroupedWindowGroupReduceInvokable<Tuple2<String,Integer>,Tuple2<String,Integer>>(new GroupReduceFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public void reduce(    Iterable<Tuple2<String,Integer>> values,    Collector<Tuple2<String,Integer>> out) throws Exception {
      Tuple2<String,Integer> outTuple=new Tuple2<String,Integer>("",0);
      for (      @SuppressWarnings("unused") Tuple2<String,Integer> value : values) {
      }
      for (      Tuple2<String,Integer> value : values) {
        outTuple.f0=value.f0;
        outTuple.f1+=value.f1;
      }
      out.collect(outTuple);
    }
  }
,2,3,new FieldsKeySelector(true,false,0),new TimeStamp<Tuple2<String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Tuple2<String,Integer> value){
      return value.f1;
    }
    @Override public long getStartTime(){
      return 1;
    }
  }
);
  List<Tuple2<String,Integer>> actual2=MockInvokable.createAndExecute(invokable2,inputs2);
  assertEquals(new HashSet<Tuple2<String,Integer>>(expected2),new HashSet<Tuple2<String,Integer>>(actual2));
  assertEquals(expected2.size(),actual2.size());
}
