{
  Preconditions.checkNotNull(namespace,"Namespace");
  Preconditions.checkNotNull(namespaceSerializer,"Namespace serializer");
  if (keySerializer == null) {
    throw new RuntimeException("State key serializer has not been configured in the config. " + "This operation cannot use partitioned state.");
  }
  if (!stateDescriptor.isSerializerInitialized()) {
    stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig());
  }
  if (keyValueStatesByName == null) {
    keyValueStatesByName=new HashMap<>();
  }
  if (lastName != null && lastName.equals(stateDescriptor.getName())) {
    lastState.setCurrentNamespace(namespace);
    return (S)lastState;
  }
  KvState<?,?,?,?,?> previous=keyValueStatesByName.get(stateDescriptor.getName());
  if (previous != null) {
    lastState=previous;
    lastState.setCurrentNamespace(namespace);
    lastName=stateDescriptor.getName();
    return (S)previous;
  }
  S state=stateDescriptor.bind(new StateBackend(){
    @Override public <T>ValueState<T> createValueState(    ValueStateDescriptor<T> stateDesc) throws Exception {
      return AbstractStateBackend.this.createValueState(namespaceSerializer,stateDesc);
    }
    @Override public <T>ListState<T> createListState(    ListStateDescriptor<T> stateDesc) throws Exception {
      return AbstractStateBackend.this.createListState(namespaceSerializer,stateDesc);
    }
    @Override public <T>ReducingState<T> createReducingState(    ReducingStateDescriptor<T> stateDesc) throws Exception {
      return AbstractStateBackend.this.createReducingState(namespaceSerializer,stateDesc);
    }
    @Override public <T,ACC>FoldingState<T,ACC> createFoldingState(    FoldingStateDescriptor<T,ACC> stateDesc) throws Exception {
      return AbstractStateBackend.this.createFoldingState(namespaceSerializer,stateDesc);
    }
  }
);
  KvState kvState=(KvState)state;
  keyValueStatesByName.put(stateDescriptor.getName(),kvState);
  keyValueStates=keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()]);
  lastName=stateDescriptor.getName();
  lastState=kvState;
  if (currentKey != null) {
    kvState.setCurrentKey(currentKey);
  }
  kvState.setCurrentNamespace(namespace);
  if (stateDescriptor.isQueryable()) {
    if (kvStateRegistry == null) {
      throw new IllegalStateException("State backend has not been initialized for job.");
    }
    String name=stateDescriptor.getQueryableStateName();
    kvStateRegistry.registerKvState(keyGroupIndex,name,kvState);
  }
  return state;
}
