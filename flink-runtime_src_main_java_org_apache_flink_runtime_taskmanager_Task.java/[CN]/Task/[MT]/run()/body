{
  while (true) {
    ExecutionState current=this.executionState;
    if (current == ExecutionState.CREATED) {
      if (STATE_UPDATER.compareAndSet(this,ExecutionState.CREATED,ExecutionState.DEPLOYING)) {
        break;
      }
    }
 else     if (current == ExecutionState.FAILED) {
      notifyFinalState();
      return;
    }
 else     if (current == ExecutionState.CANCELING) {
      if (STATE_UPDATER.compareAndSet(this,ExecutionState.CANCELING,ExecutionState.CANCELED)) {
        notifyFinalState();
        return;
      }
    }
 else {
      throw new IllegalStateException("Invalid state for beginning of task operation");
    }
  }
  Map<String,Future<Path>> distributedCacheEntries=new HashMap<String,Future<Path>>();
  AbstractInvokable invokable=null;
  try {
    LOG.info("Loading JAR files for task " + taskNameWithSubtask);
    final ClassLoader userCodeClassLoader=createUserCodeClassloader(libraryCache);
    invokable=loadAndInstantiateInvokable(userCodeClassLoader,nameOfInvokableClass);
    if (isCanceledOrFailed()) {
      throw new CancelTaskException();
    }
    LOG.info("Registering task at network: " + this);
    network.registerTask(this);
    try {
      for (      Map.Entry<String,DistributedCache.DistributedCacheEntry> entry : DistributedCache.readFileInfoFromConfig(jobConfiguration)) {
        LOG.info("Obtaining local cache file for '" + entry.getKey() + '\'');
        Future<Path> cp=fileCache.createTmpFile(entry.getKey(),entry.getValue(),jobId);
        distributedCacheEntries.put(entry.getKey(),cp);
      }
    }
 catch (    Exception e) {
      throw new Exception("Exception while adding files to distributed cache.",e);
    }
    if (isCanceledOrFailed()) {
      throw new CancelTaskException();
    }
    TaskInputSplitProvider splitProvider=new TaskInputSplitProvider(jobManager,jobId,vertexId,executionId,userCodeClassLoader,actorAskTimeout);
    Environment env=new RuntimeEnvironment(jobId,vertexId,executionId,taskName,taskNameWithSubtask,subtaskIndex,parallelism,jobConfiguration,taskConfiguration,userCodeClassLoader,memoryManager,ioManager,broadcastVariableManager,accumulatorRegistry,splitProvider,distributedCacheEntries,writers,inputGates,jobManager,taskManagerConfig);
    invokable.setEnvironment(env);
    try {
      invokable.registerInputOutput();
    }
 catch (    Exception e) {
      throw new Exception("Call to registerInputOutput() of invokable failed",e);
    }
    SerializedValue<StateHandle<?>> operatorState=this.operatorState;
    if (operatorState != null) {
      if (invokable instanceof StatefulTask) {
        try {
          StateHandle<?> state=operatorState.deserializeValue(userCodeClassLoader);
          StatefulTask<?> op=(StatefulTask<?>)invokable;
          StateUtils.setOperatorState(op,state);
        }
 catch (        Exception e) {
          throw new RuntimeException("Failed to deserialize state handle and setup initial operator state.",e);
        }
      }
 else {
        throw new IllegalStateException("Found operator state for a non-stateful task invokable");
      }
    }
    operatorState=null;
    this.operatorState=null;
    this.invokable=invokable;
    if (!STATE_UPDATER.compareAndSet(this,ExecutionState.DEPLOYING,ExecutionState.RUNNING)) {
      throw new CancelTaskException();
    }
    notifyObservers(ExecutionState.RUNNING,null);
    taskManager.tell(new UpdateTaskExecutionState(new TaskExecutionState(jobId,executionId,ExecutionState.RUNNING)));
    executingThread.setContextClassLoader(userCodeClassLoader);
    invokable.invoke();
    if (isCanceledOrFailed()) {
      throw new CancelTaskException();
    }
    for (    ResultPartition partition : producedPartitions) {
      if (partition != null) {
        partition.finish();
      }
    }
    if (STATE_UPDATER.compareAndSet(this,ExecutionState.RUNNING,ExecutionState.FINISHED)) {
      notifyObservers(ExecutionState.FINISHED,null);
    }
 else {
      throw new CancelTaskException();
    }
  }
 catch (  Throwable t) {
    try {
      while (true) {
        ExecutionState current=this.executionState;
        if (current == ExecutionState.RUNNING || current == ExecutionState.DEPLOYING) {
          if (t instanceof CancelTaskException) {
            if (STATE_UPDATER.compareAndSet(this,current,ExecutionState.CANCELED)) {
              cancelInvokable();
              notifyObservers(ExecutionState.CANCELED,null);
              break;
            }
          }
 else {
            if (STATE_UPDATER.compareAndSet(this,current,ExecutionState.FAILED)) {
              failureCause=t;
              cancelInvokable();
              notifyObservers(ExecutionState.FAILED,t);
              break;
            }
          }
        }
 else         if (current == ExecutionState.CANCELING) {
          if (STATE_UPDATER.compareAndSet(this,current,ExecutionState.CANCELED)) {
            notifyObservers(ExecutionState.CANCELED,null);
            break;
          }
        }
 else         if (current == ExecutionState.FAILED) {
          break;
        }
 else         if (STATE_UPDATER.compareAndSet(this,current,ExecutionState.FAILED)) {
          LOG.error("Unexpected state in Task during an exception: " + current);
          break;
        }
      }
    }
 catch (    Throwable tt) {
      String message="FATAL - exception in task exception handler";
      LOG.error(message,tt);
      notifyFatalError(message,tt);
    }
  }
 finally {
    try {
      LOG.info("Freeing task resources for " + taskNameWithSubtask);
      ExecutorService dispatcher=this.asyncCallDispatcher;
      if (dispatcher != null && !dispatcher.isShutdown()) {
        dispatcher.shutdownNow();
      }
      network.unregisterTask(this);
      if (invokable != null) {
        memoryManager.releaseAll(invokable);
      }
      libraryCache.unregisterTask(jobId,executionId);
      removeCachedFiles(distributedCacheEntries,fileCache);
      notifyFinalState();
    }
 catch (    Throwable t) {
      String message="FATAL - exception in task resource cleanup";
      LOG.error(message,t);
      notifyFatalError(message,t);
    }
  }
}
