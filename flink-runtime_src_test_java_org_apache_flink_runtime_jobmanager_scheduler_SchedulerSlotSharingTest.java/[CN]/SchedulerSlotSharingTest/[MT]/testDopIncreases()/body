{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jid3=new JobVertexID();
    JobVertexID jid4=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2,jid3,jid4);
    Scheduler scheduler=new Scheduler(TestingUtils.directExecutionContext());
    scheduler.newInstanceAvailable(getRandomInstance(4));
    SimpleSlot s1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,0,1),sharingGroup));
    SimpleSlot s2=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,0,1),sharingGroup));
    assertTrue(s1.getParent() == s2.getParent());
    assertEquals(3,scheduler.getNumberOfAvailableSlots());
    SimpleSlot s3_0=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,0,5),sharingGroup));
    SimpleSlot s3_1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,1,5),sharingGroup));
    SimpleSlot s4_0=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,0,4),sharingGroup));
    SimpleSlot s4_1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,1,4),sharingGroup));
    s1.releaseSlot();
    s2.releaseSlot();
    SimpleSlot s3_2=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,2,5),sharingGroup));
    SimpleSlot s3_3=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,3,5),sharingGroup));
    SimpleSlot s4_2=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,2,4),sharingGroup));
    SimpleSlot s4_3=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,3,4),sharingGroup));
    try {
      scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,4,5),sharingGroup));
      fail("should throw an exception");
    }
 catch (    NoResourceAvailableException e) {
    }
    assertEquals(0,scheduler.getNumberOfAvailableSlots());
    s3_0.releaseSlot();
    s3_1.releaseSlot();
    s3_2.releaseSlot();
    s3_3.releaseSlot();
    s4_0.releaseSlot();
    s4_1.releaseSlot();
    s4_2.releaseSlot();
    s4_3.releaseSlot();
    assertEquals(4,scheduler.getNumberOfAvailableSlots());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
