{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jid3=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    Scheduler scheduler=new Scheduler();
    scheduler.newInstanceAvailable(getRandomInstance(2));
    AllocatedSlot s1_1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,0,2),sharingGroup));
    AllocatedSlot s2_1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,0,2),sharingGroup));
    AllocatedSlot s2_2=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,1,2),sharingGroup));
    assertNotNull(s1_1);
    assertNotNull(s2_1);
    assertNotNull(s2_2);
    assertEquals(2,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(1,sharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForJid(jid1));
    assertEquals(0,sharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForJid(jid2));
    s2_1.releaseSlot();
    s2_2.releaseSlot();
    AllocatedSlot sx=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,0,1)));
    assertNotNull(sx);
    assertEquals(1,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(0,sharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForJid(jid1));
    assertEquals(1,sharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForJid(jid2));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
