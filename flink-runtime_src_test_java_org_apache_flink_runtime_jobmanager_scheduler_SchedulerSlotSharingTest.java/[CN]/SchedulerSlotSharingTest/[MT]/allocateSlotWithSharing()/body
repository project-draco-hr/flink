{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    Scheduler scheduler=new Scheduler(TestingUtils.directExecutionContext());
    scheduler.newInstanceAvailable(getRandomInstance(2));
    scheduler.newInstanceAvailable(getRandomInstance(2));
    SimpleSlot s1=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,5),sharingGroup),false).get();
    SimpleSlot s2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,5),sharingGroup),false).get();
    SimpleSlot s3=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,5),sharingGroup),false).get();
    SimpleSlot s4=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,5),sharingGroup),false).get();
    assertNotNull(s1);
    assertNotNull(s2);
    assertNotNull(s3);
    assertNotNull(s4);
    assertTrue(areAllDistinct(s1,s2,s3,s4));
    try {
      scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,4,5),sharingGroup),false).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    SimpleSlot s1_2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,5),sharingGroup),false).get();
    SimpleSlot s2_2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,5),sharingGroup),false).get();
    SimpleSlot s3_2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,5),sharingGroup),false).get();
    SimpleSlot s4_2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,3,5),sharingGroup),false).get();
    assertNotNull(s1_2);
    assertNotNull(s2_2);
    assertNotNull(s3_2);
    assertNotNull(s4_2);
    try {
      scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,4,5),sharingGroup),false).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    s1.releaseSlot();
    s4.releaseSlot();
    assertEquals(4,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(2,sharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForGroup(jid1));
    assertEquals(0,sharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForGroup(jid2));
    try {
      scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,4,5),sharingGroup),false).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    SimpleSlot s5=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,4,5),sharingGroup),false).get();
    assertNotNull(s5);
    assertEquals(4,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(1,sharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForGroup(jid1));
    assertEquals(0,sharingGroup.getTaskAssignment().getNumberOfAvailableSlotsForGroup(jid2));
    s2_2.releaseSlot();
    SimpleSlot s5_2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,4,5),sharingGroup),false).get();
    assertNotNull(s5_2);
    s2.releaseSlot();
    s3.releaseSlot();
    s5.releaseSlot();
    s1_2.releaseSlot();
    s3_2.releaseSlot();
    s4_2.releaseSlot();
    s5_2.releaseSlot();
    assertEquals(0,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(4,scheduler.getNumberOfAvailableSlots());
    assertEquals(0,scheduler.getNumberOfLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(10,scheduler.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
