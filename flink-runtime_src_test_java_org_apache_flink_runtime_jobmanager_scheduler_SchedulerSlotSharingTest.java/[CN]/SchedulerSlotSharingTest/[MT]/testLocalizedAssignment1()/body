{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    Instance i1=getRandomInstance(2);
    Instance i2=getRandomInstance(2);
    TaskManagerLocation loc1=i1.getTaskManagerLocation();
    TaskManagerLocation loc2=i2.getTaskManagerLocation();
    Scheduler scheduler=new Scheduler(TestingUtils.directExecutionContext());
    scheduler.newInstanceAvailable(i1);
    scheduler.newInstanceAvailable(i2);
    SimpleSlot s1=scheduler.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid1,0,2,loc1),sharingGroup),false).get();
    SimpleSlot s2=scheduler.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid1,1,2,loc2),sharingGroup),false).get();
    assertNotNull(s1);
    assertNotNull(s2);
    assertEquals(2,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(1,i1.getNumberOfAvailableSlots());
    assertEquals(1,i2.getNumberOfAvailableSlots());
    SimpleSlot s3=scheduler.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid2,0,2,loc1),sharingGroup),false).get();
    SimpleSlot s4=scheduler.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid2,1,2,loc2),sharingGroup),false).get();
    assertNotNull(s3);
    assertNotNull(s4);
    assertEquals(2,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(1,i1.getNumberOfAvailableSlots());
    assertEquals(1,i2.getNumberOfAvailableSlots());
    assertEquals(4,scheduler.getNumberOfLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
