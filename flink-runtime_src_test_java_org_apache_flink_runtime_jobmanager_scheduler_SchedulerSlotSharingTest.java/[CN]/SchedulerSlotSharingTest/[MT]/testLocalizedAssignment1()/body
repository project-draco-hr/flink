{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    Instance i1=getRandomInstance(2);
    Instance i2=getRandomInstance(2);
    Scheduler scheduler=new Scheduler();
    scheduler.newInstanceAvailable(i1);
    scheduler.newInstanceAvailable(i2);
    AllocatedSlot s1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid1,0,2,i1),sharingGroup));
    AllocatedSlot s2=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid1,1,2,i2),sharingGroup));
    assertNotNull(s1);
    assertNotNull(s2);
    assertEquals(2,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(1,i1.getNumberOfAvailableSlots());
    assertEquals(1,i2.getNumberOfAvailableSlots());
    AllocatedSlot s3=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid2,0,2,i1),sharingGroup));
    AllocatedSlot s4=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid2,1,2,i2),sharingGroup));
    assertNotNull(s3);
    assertNotNull(s4);
    assertEquals(2,sharingGroup.getTaskAssignment().getNumberOfSlots());
    assertEquals(1,i1.getNumberOfAvailableSlots());
    assertEquals(1,i2.getNumberOfAvailableSlots());
    assertEquals(4,scheduler.getNumberOfLocalizedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
