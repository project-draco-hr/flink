{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jidA=new JobVertexID();
    JobVertexID jidB=new JobVertexID();
    JobVertexID jidC=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    Scheduler scheduler=new Scheduler(TestingUtils.directExecutionContext());
    scheduler.newInstanceAvailable(getRandomInstance(3));
    scheduler.newInstanceAvailable(getRandomInstance(2));
    SimpleSlot sA1=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidA,0,2)),false).get();
    SimpleSlot sA2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidA,1,2)),false).get();
    assertNotNull(sA1);
    assertNotNull(sA2);
    SimpleSlot s1_0=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,4),sharingGroup),false).get();
    SimpleSlot s1_1=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,4),sharingGroup),false).get();
    SimpleSlot s2_0=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,4),sharingGroup),false).get();
    SimpleSlot s2_1=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,4),sharingGroup),false).get();
    assertNotNull(s1_0);
    assertNotNull(s1_1);
    assertNotNull(s2_0);
    assertNotNull(s2_1);
    SimpleSlot sB1=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidB,1,3)),false).get();
    assertNotNull(sB1);
    try {
      scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,4),sharingGroup),false).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    try {
      scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,4),sharingGroup),false).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    try {
      scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidB,0,3)),false);
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    try {
      scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidC,0,1)),false);
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    sA1.releaseSlot();
    SimpleSlot s1_2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,4),sharingGroup),false).get();
    SimpleSlot s2_2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,3,4),sharingGroup),false).get();
    assertNotNull(s1_2);
    assertNotNull(s2_2);
    s1_0.releaseSlot();
    s1_1.releaseSlot();
    s2_0.releaseSlot();
    assertEquals(1,scheduler.getNumberOfAvailableSlots());
    SimpleSlot sB0=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidB,0,3)),false).get();
    assertNotNull(sB0);
    s2_1.releaseSlot();
    SimpleSlot sB2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidB,2,3)),false).get();
    assertNotNull(sB2);
    sA2.releaseSlot();
    SimpleSlot s1_3=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,4),sharingGroup),false).get();
    SimpleSlot s2_3=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,4),sharingGroup),false).get();
    assertNotNull(s1_3);
    assertNotNull(s2_3);
    s1_2.releaseSlot();
    s2_2.releaseSlot();
    s1_3.releaseSlot();
    s2_3.releaseSlot();
    SimpleSlot sC0=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidC,1,2)),false).get();
    SimpleSlot sC1=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jidC,0,2)),false).get();
    assertNotNull(sC0);
    assertNotNull(sC1);
    sB0.releaseSlot();
    sB1.releaseSlot();
    sB2.releaseSlot();
    sC0.releaseSlot();
    sC1.releaseSlot();
    assertEquals(5,scheduler.getNumberOfAvailableSlots());
    assertEquals(0,scheduler.getNumberOfLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(15,scheduler.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
