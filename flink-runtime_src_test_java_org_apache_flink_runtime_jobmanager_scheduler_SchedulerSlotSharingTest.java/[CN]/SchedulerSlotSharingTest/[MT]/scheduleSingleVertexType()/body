{
  try {
    JobVertexID jid1=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1);
    Scheduler scheduler=new Scheduler();
    Instance i1=getRandomInstance(2);
    Instance i2=getRandomInstance(2);
    scheduler.newInstanceAvailable(i1);
    scheduler.newInstanceAvailable(i2);
    SimpleSlot s1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,0,8),sharingGroup));
    SimpleSlot s2=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,1,8),sharingGroup));
    SimpleSlot s3=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,2,8),sharingGroup));
    SimpleSlot s4=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,3,8),sharingGroup));
    assertNotNull(s1);
    assertNotNull(s2);
    assertNotNull(s3);
    assertNotNull(s4);
    assertTrue(areAllDistinct(s1,s2,s3,s4));
    try {
      scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,4,8),sharingGroup));
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    s3.releaseSlot();
    SimpleSlot s5=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,4,8),sharingGroup));
    assertNotNull(s5);
    s1.releaseSlot();
    s2.releaseSlot();
    s4.releaseSlot();
    SimpleSlot s6=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,5,8),sharingGroup));
    SimpleSlot s7=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,6,8),sharingGroup));
    SimpleSlot s8=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,7,8),sharingGroup));
    assertNotNull(s6);
    assertNotNull(s7);
    assertNotNull(s8);
    int c=0;
    c+=(s5.getInstance() == i1) ? 1 : -1;
    c+=(s6.getInstance() == i1) ? 1 : -1;
    c+=(s7.getInstance() == i1) ? 1 : -1;
    c+=(s8.getInstance() == i1) ? 1 : -1;
    assertEquals(0,c);
    s5.releaseSlot();
    s6.releaseSlot();
    s7.releaseSlot();
    s8.releaseSlot();
    assertEquals(4,scheduler.getNumberOfAvailableSlots());
    assertEquals(0,scheduler.getNumberOfLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(8,scheduler.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
