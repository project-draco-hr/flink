{
  if (BooleanValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)BooleanValueSerializer.INSTANCE;
  }
 else   if (ByteValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)ByteValueSerializer.INSTANCE;
  }
 else   if (CharValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)CharValueSerializer.INSTANCE;
  }
 else   if (DoubleValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)DoubleValueSerializer.INSTANCE;
  }
 else   if (FloatValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)FloatValueSerializer.INSTANCE;
  }
 else   if (IntValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)IntValueSerializer.INSTANCE;
  }
 else   if (LongValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)LongValueSerializer.INSTANCE;
  }
 else   if (NullValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)NullValueSerializer.INSTANCE;
  }
 else   if (ShortValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)ShortValueSerializer.INSTANCE;
  }
 else   if (StringValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)StringValueSerializer.INSTANCE;
  }
 else   if (CopyableValue.class.isAssignableFrom(type)) {
    return (TypeSerializer<T>)createCopyableValueSerializer(type.asSubclass(CopyableValue.class));
  }
 else {
    return new ValueSerializer<T>(type);
  }
}
