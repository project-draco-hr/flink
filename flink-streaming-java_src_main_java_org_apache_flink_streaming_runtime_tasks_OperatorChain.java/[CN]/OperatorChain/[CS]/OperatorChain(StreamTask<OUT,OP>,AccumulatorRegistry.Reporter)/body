{
  final ClassLoader userCodeClassloader=containingTask.getUserCodeClassLoader();
  final StreamConfig configuration=containingTask.getConfiguration();
  final boolean enableTimestamps=containingTask.isSerializingTimestamps();
  headOperator=configuration.getStreamOperator(userCodeClassloader);
  Map<Integer,StreamConfig> chainedConfigs=configuration.getTransitiveChainedTaskConfigs(userCodeClassloader);
  chainedConfigs.put(configuration.getVertexID(),configuration);
  List<StreamEdge> outEdgesInOrder=configuration.getOutEdgesInOrder(userCodeClassloader);
  Map<StreamEdge,RecordWriterOutput<?>> streamOutputMap=new HashMap<>(outEdgesInOrder.size());
  this.streamOutputs=new RecordWriterOutput<?>[outEdgesInOrder.size()];
  boolean success=false;
  try {
    for (int i=0; i < outEdgesInOrder.size(); i++) {
      StreamEdge outEdge=outEdgesInOrder.get(i);
      RecordWriterOutput<?> streamOutput=createStreamOutput(outEdge,chainedConfigs.get(outEdge.getSourceId()),i,containingTask.getEnvironment(),enableTimestamps,reporter,containingTask.getName());
      this.streamOutputs[i]=streamOutput;
      streamOutputMap.put(outEdge,streamOutput);
    }
    List<StreamOperator<?>> allOps=new ArrayList<>(chainedConfigs.size());
    this.chainEntryPoint=createOutputCollector(containingTask,configuration,chainedConfigs,userCodeClassloader,streamOutputMap,allOps);
    if (headOperator != null) {
      headOperator.setup(containingTask,configuration,getChainEntryPoint());
    }
    allOps.add(headOperator);
    this.allOperators=allOps.toArray(new StreamOperator<?>[allOps.size()]);
    success=true;
  }
  finally {
    if (!success) {
      for (      RecordWriterOutput<?> output : this.streamOutputs) {
        if (output != null) {
          output.close();
          output.clearBuffers();
        }
      }
    }
  }
}
