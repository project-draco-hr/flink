{
  MapFunction<?,?> function=new MapFunction<Tuple2<BigInteger,BigDecimal>,Tuple2<BigInteger,BigDecimal>>(){
    @Override public Tuple2<BigInteger,BigDecimal> map(    Tuple2<BigInteger,BigDecimal> value) throws Exception {
      return null;
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getMapReturnTypes(function,(TypeInformation)TypeInformation.of(new TypeHint<Tuple2<BigInteger,BigDecimal>>(){
  }
));
  Assert.assertTrue(ti.isTupleType());
  TupleTypeInfo<?> tti=(TupleTypeInfo<?>)ti;
  Assert.assertEquals(BasicTypeInfo.BIG_INT_TYPE_INFO,tti.getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.BIG_DEC_TYPE_INFO,tti.getTypeAt(1));
  Assert.assertTrue(TypeExtractor.getForClass(BigInteger.class).isBasicType());
  Assert.assertTrue(TypeExtractor.getForClass(BigDecimal.class).isBasicType());
  Assert.assertEquals(tti.getTypeAt(0),TypeExtractor.getForClass(BigInteger.class));
  Assert.assertEquals(tti.getTypeAt(1),TypeExtractor.getForClass(BigDecimal.class));
  Assert.assertEquals(BasicTypeInfo.BIG_INT_TYPE_INFO,TypeExtractor.getForObject(new BigInteger("42")));
  Assert.assertEquals(BasicTypeInfo.BIG_DEC_TYPE_INFO,TypeExtractor.getForObject(new BigDecimal("42.42")));
}
