{
  MapFunction<?,?> function=new EitherMapper<Boolean>();
  TypeInformation<?> ti=TypeExtractor.getMapReturnTypes((MapFunction)function,BasicTypeInfo.BOOLEAN_TYPE_INFO);
  TypeInformation<?> expected=new EitherTypeInfo(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.BOOLEAN_TYPE_INFO);
  Assert.assertEquals(expected,ti);
  function=new EitherMapper2();
  ti=TypeExtractor.getMapReturnTypes((MapFunction)function,BasicTypeInfo.STRING_TYPE_INFO);
  expected=new EitherTypeInfo(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo(BasicTypeInfo.INT_TYPE_INFO));
  Assert.assertEquals(expected,ti);
  function=new EitherMapper3();
  ti=TypeExtractor.getMapReturnTypes((MapFunction)function,expected);
  Assert.assertEquals(expected,ti);
  Either<String,Tuple1<Integer>> either=new Either2();
  ti=TypeExtractor.getForObject(either);
  Assert.assertEquals(expected,ti);
}
