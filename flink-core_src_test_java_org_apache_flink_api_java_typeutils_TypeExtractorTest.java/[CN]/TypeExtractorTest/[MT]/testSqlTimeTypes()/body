{
  MapFunction<?,?> function=new MapFunction<Tuple3<Date,Time,Timestamp>,Tuple3<Date,Time,Timestamp>>(){
    @Override public Tuple3<Date,Time,Timestamp> map(    Tuple3<Date,Time,Timestamp> value) throws Exception {
      return null;
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getMapReturnTypes(function,(TypeInformation)TypeInformation.of(new TypeHint<Tuple3<Date,Time,Timestamp>>(){
  }
));
  Assert.assertTrue(ti.isTupleType());
  TupleTypeInfo<?> tti=(TupleTypeInfo<?>)ti;
  Assert.assertEquals(SqlTimeTypeInfo.DATE,tti.getTypeAt(0));
  Assert.assertEquals(SqlTimeTypeInfo.TIME,tti.getTypeAt(1));
  Assert.assertEquals(SqlTimeTypeInfo.TIMESTAMP,tti.getTypeAt(2));
  Assert.assertEquals(tti.getTypeAt(0),TypeExtractor.getForClass(Date.class));
  Assert.assertEquals(tti.getTypeAt(1),TypeExtractor.getForClass(Time.class));
  Assert.assertEquals(tti.getTypeAt(2),TypeExtractor.getForClass(Timestamp.class));
  Assert.assertEquals(SqlTimeTypeInfo.DATE,TypeExtractor.getForObject(Date.valueOf("1998-12-12")));
  Assert.assertEquals(SqlTimeTypeInfo.TIME,TypeExtractor.getForObject(Time.valueOf("12:37:45")));
  Assert.assertEquals(SqlTimeTypeInfo.TIMESTAMP,TypeExtractor.getForObject(Timestamp.valueOf("1998-12-12 12:37:45")));
}
