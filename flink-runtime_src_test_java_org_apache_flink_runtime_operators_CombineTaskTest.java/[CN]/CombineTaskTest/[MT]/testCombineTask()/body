{
  try {
    int keyCnt=100;
    int valCnt=20;
    setInput(new UniformIntTupleGenerator(keyCnt,valCnt,false),serializer);
    addDriverComparator(this.comparator);
    addDriverComparator(this.comparator);
    setOutput(this.outList,serializer);
    getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
    getTaskConfig().setRelativeMemoryDriver(combine_frac);
    getTaskConfig().setFilehandlesDriver(2);
    final GroupReduceCombineDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> testTask=new GroupReduceCombineDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>>();
    testDriver(testTask,MockCombiningReduceStub.class);
    int expSum=0;
    for (int i=1; i < valCnt; i++) {
      expSum+=i;
    }
    assertTrue(this.outList.size() == keyCnt);
    for (    Tuple2<Integer,Integer> record : this.outList) {
      assertTrue(record.f1 == expSum);
    }
    this.outList.clear();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
