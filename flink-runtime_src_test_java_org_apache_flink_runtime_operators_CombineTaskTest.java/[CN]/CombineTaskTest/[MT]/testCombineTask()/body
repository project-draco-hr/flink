{
  int keyCnt=100;
  int valCnt=20;
  addInput(new UniformRecordGenerator(keyCnt,valCnt,false));
  addDriverComparator(this.comparator);
  addDriverComparator(this.comparator);
  setOutput(this.outList);
  getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
  getTaskConfig().setRelativeMemoryDriver(combine_frac);
  getTaskConfig().setFilehandlesDriver(2);
  final GroupReduceCombineDriver<Record,Record> testTask=new GroupReduceCombineDriver<Record,Record>();
  try {
    testDriver(testTask,MockCombiningReduceStub.class);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("Invoke method caused exception.");
  }
  int expSum=0;
  for (int i=1; i < valCnt; i++) {
    expSum+=i;
  }
  Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was "+ keyCnt,this.outList.size() == keyCnt);
  for (  Record record : this.outList) {
    Assert.assertTrue("Incorrect result",record.getField(1,IntValue.class).getValue() == expSum);
  }
  this.outList.clear();
}
