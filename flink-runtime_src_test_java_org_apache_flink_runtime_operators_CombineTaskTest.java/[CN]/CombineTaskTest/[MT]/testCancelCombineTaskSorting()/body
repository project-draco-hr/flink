{
  try {
    MutableObjectIterator<Tuple2<Integer,Integer>> slowInfiniteInput=new DelayingIterator<Tuple2<Integer,Integer>>(new InfiniteIntTupleIterator(),1);
    setInput(slowInfiniteInput,serializer);
    addDriverComparator(this.comparator);
    addDriverComparator(this.comparator);
    setOutput(new DiscardingOutputCollector<Tuple2<Integer,Integer>>());
    getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
    getTaskConfig().setRelativeMemoryDriver(combine_frac);
    getTaskConfig().setFilehandlesDriver(2);
    final GroupReduceCombineDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> testTask=new GroupReduceCombineDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>>();
    Thread taskRunner=new Thread(){
      @Override public void run(){
        try {
          testDriver(testTask,MockFailingCombiningReduceStub.class);
        }
 catch (        Exception e) {
        }
      }
    }
;
    taskRunner.start();
    Thread.sleep(500);
    testTask.cancel();
    taskRunner.join(5000);
    assertFalse("Task did not cancel properly within in 5 seconds.",taskRunner.isAlive());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
