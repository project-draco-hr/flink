{
  addInput(new DelayingInfinitiveInputIterator(100));
  addDriverComparator(this.comparator);
  addDriverComparator(this.comparator);
  setOutput(new DiscardingOutputCollector<Record>());
  getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
  getTaskConfig().setRelativeMemoryDriver(combine_frac);
  getTaskConfig().setFilehandlesDriver(2);
  final GroupReduceCombineDriver<Record,Record> testTask=new GroupReduceCombineDriver<Record,Record>();
  final AtomicBoolean success=new AtomicBoolean(false);
  Thread taskRunner=new Thread(){
    @Override public void run(){
      try {
        testDriver(testTask,MockFailingCombiningReduceStub.class);
        success.set(true);
      }
 catch (      Exception ie) {
        ie.printStackTrace();
      }
    }
  }
;
  taskRunner.start();
  TaskCancelThread tct=new TaskCancelThread(1,taskRunner,this);
  tct.start();
  try {
    tct.join();
    taskRunner.join();
  }
 catch (  InterruptedException ie) {
    Assert.fail("Joining threads failed");
  }
  Assert.assertTrue("Exception was thrown despite proper canceling.",success.get());
}
