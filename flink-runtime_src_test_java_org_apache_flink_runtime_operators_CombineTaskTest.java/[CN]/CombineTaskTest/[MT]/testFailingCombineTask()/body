{
  try {
    int keyCnt=100;
    int valCnt=20;
    setInput(new UniformIntTupleGenerator(keyCnt,valCnt,false),serializer);
    addDriverComparator(this.comparator);
    addDriverComparator(this.comparator);
    setOutput(new DiscardingOutputCollector<Tuple2<Integer,Integer>>());
    getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
    getTaskConfig().setRelativeMemoryDriver(combine_frac);
    getTaskConfig().setFilehandlesDriver(2);
    final GroupReduceCombineDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> testTask=new GroupReduceCombineDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>>();
    try {
      testDriver(testTask,MockFailingCombiningReduceStub.class);
      fail("Exception not forwarded.");
    }
 catch (    ExpectedTestException etex) {
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
