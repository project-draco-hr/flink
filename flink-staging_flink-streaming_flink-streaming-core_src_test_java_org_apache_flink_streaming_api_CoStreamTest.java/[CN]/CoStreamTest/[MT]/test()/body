{
  expected=new ArrayList<String>();
  StreamExecutionEnvironment env=new TestStreamEnvironment(3,MEMORY_SIZE);
  TestListResultSink<String> resultSink=new TestListResultSink<String>();
  DataStream<Integer> src=env.fromElements(1,3,5);
  DataStream<Integer> src2=env.fromElements(1,3,5);
  DataStream<Integer> grouped=src.groupBy(new KeySelector<Integer,Integer>(){
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
);
  DataStream<Integer> grouped2=src2.groupBy(new KeySelector<Integer,Integer>(){
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
);
  DataStream<String> connected=grouped.connect(grouped2).map(new CoMapFunction<Integer,Integer,String>(){
    @Override public String map1(    Integer value){
      return value.toString();
    }
    @Override public String map2(    Integer value){
      return value.toString();
    }
  }
);
  connected.addSink(resultSink);
  connected.print();
  try {
    env.execute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  expected=new ArrayList<String>();
  expected.addAll(Arrays.asList("1","1","3","3","5","5"));
  System.out.println(resultSink.getResult());
  assertEquals(expected,expected);
}
