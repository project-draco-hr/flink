{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().enableObjectReuse();
  ParameterTool parameters=ParameterTool.fromArgs(args);
  int scale=parameters.getInt("scale",DEFAULT_SCALE);
  int edgeFactor=parameters.getInt("edge_factor",DEFAULT_EDGE_FACTOR);
  RandomGenerableFactory<JDKRandomGenerator> rnd=new JDKRandomGeneratorFactory();
  long vertexCount=1L << scale;
  long edgeCount=vertexCount * edgeFactor;
  boolean clipAndFlip=parameters.getBoolean("clip_and_flip",DEFAULT_CLIP_AND_FLIP);
  Graph<LongValue,NullValue,NullValue> graph=new RMatGraph<>(env,rnd,vertexCount,edgeCount).generate().run(new Simplify<LongValue,NullValue,NullValue>(clipAndFlip));
  DataSet cc;
  if (scale > 32) {
    cc=graph.run(new org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient<LongValue,NullValue,NullValue>());
  }
 else {
    cc=graph.run(new TranslateGraphIds<LongValue,IntValue,NullValue,NullValue>(new LongValueToIntValue())).run(new org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient<IntValue,NullValue,NullValue>());
  }
switch (parameters.get("output","")) {
case "print":
    for (    Object e : cc.collect()) {
      Result result=(Result)e;
      System.out.println(result.toVerboseString());
    }
  break;
case "hash":
System.out.println(DataSetUtils.checksumHashCode(cc));
break;
case "csv":
String filename=parameters.get("filename");
String row_delimiter=parameters.get("row_delimiter",CsvOutputFormat.DEFAULT_LINE_DELIMITER);
String field_delimiter=parameters.get("field_delimiter",CsvOutputFormat.DEFAULT_FIELD_DELIMITER);
cc.writeAsCsv(filename,row_delimiter,field_delimiter);
env.execute();
break;
default :
System.out.println(WordUtils.wrap("The local clustering coefficient measures the connectedness of each" + " vertex's neighborhood. Scores range from 0.0 (no edges between neighbors) to 1.0 (neighborhood" + " is a clique).",80));
System.out.println();
System.out.println(WordUtils.wrap("This algorithm returns tuples containing the vertex ID, the degree of" + " the vertex, the number of edges between vertex neighbors, and the local clustering coefficient.",80));
System.out.println();
System.out.println("usage:");
System.out.println("  LocalClusteringCoefficient [--scale SCALE] [--edge_factor EDGE_FACTOR] --output print");
System.out.println("  LocalClusteringCoefficient [--scale SCALE] [--edge_factor EDGE_FACTOR] --output hash");
System.out.println("  LocalClusteringCoefficient [--scale SCALE] [--edge_factor EDGE_FACTOR] --output csv" + " --filename FILENAME [--row_delimiter ROW_DELIMITER] [--field_delimiter FIELD_DELIMITER]");
return;
}
JobExecutionResult result=env.getLastJobExecutionResult();
NumberFormat nf=NumberFormat.getInstance();
System.out.println("Execution runtime: " + nf.format(result.getNetRuntime()) + " ms");
}
