{
  try {
    List<Tuple2<String,Integer>> input1=Arrays.asList(new Tuple2Builder<String,Integer>().add("foo",1).add("foobar",1).add("foo",1).add("bar",1).add("foo",1).add("foo",1).build());
    List<Tuple2<String,Integer>> input2=Arrays.asList(new Tuple2Builder<String,Integer>().add("foo",1).add("foo",1).add("bar",1).add("foo",1).add("barfoo",1).add("foo",1).build());
    final RuntimeContext ctx=new RuntimeUDFContext("Test UDF",4,0);
{
      SumCoGroup udf=new SumCoGroup();
      List<Tuple2<String,Integer>> result=getCoGroupOperator(udf).executeOnCollections(input1,input2,ctx);
      Assert.assertTrue(udf.isClosed);
      Set<Tuple2<String,Integer>> expected=new HashSet<Tuple2<String,Integer>>(Arrays.asList(new Tuple2Builder<String,Integer>().add("foo",8).add("bar",2).add("foobar",1).add("barfoo",1).build()));
      Assert.assertEquals(expected,new HashSet(result));
    }
{
      List<Tuple2<String,Integer>> result=getCoGroupOperator(new SumCoGroup()).executeOnCollections(Collections.EMPTY_LIST,Collections.EMPTY_LIST,ctx);
      Assert.assertEquals(0,result.size());
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    Assert.fail(t.getMessage());
  }
}
