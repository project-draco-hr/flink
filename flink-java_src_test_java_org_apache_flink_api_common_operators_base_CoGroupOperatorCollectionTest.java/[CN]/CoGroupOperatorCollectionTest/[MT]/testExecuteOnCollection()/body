{
  try {
    List<Tuple2<String,Integer>> input1=Arrays.asList(new Tuple2Builder<String,Integer>().add("foo",1).add("foobar",1).add("foo",1).add("bar",1).add("foo",1).add("foo",1).build());
    List<Tuple2<String,Integer>> input2=Arrays.asList(new Tuple2Builder<String,Integer>().add("foo",1).add("foo",1).add("bar",1).add("foo",1).add("barfoo",1).add("foo",1).build());
    ExecutionConfig executionConfig=new ExecutionConfig();
    final RuntimeContext ctx=new RuntimeUDFContext("Test UDF",4,0,null,executionConfig);
{
      SumCoGroup udf1=new SumCoGroup();
      SumCoGroup udf2=new SumCoGroup();
      executionConfig.disableObjectReuse();
      List<Tuple2<String,Integer>> resultSafe=getCoGroupOperator(udf1).executeOnCollections(input1,input2,ctx,executionConfig);
      executionConfig.enableObjectReuse();
      List<Tuple2<String,Integer>> resultRegular=getCoGroupOperator(udf2).executeOnCollections(input1,input2,ctx,executionConfig);
      Assert.assertTrue(udf1.isClosed);
      Assert.assertTrue(udf2.isClosed);
      Set<Tuple2<String,Integer>> expected=new HashSet<Tuple2<String,Integer>>(Arrays.asList(new Tuple2Builder<String,Integer>().add("foo",8).add("bar",2).add("foobar",1).add("barfoo",1).build()));
      Assert.assertEquals(expected,new HashSet<Tuple2<String,Integer>>(resultSafe));
      Assert.assertEquals(expected,new HashSet<Tuple2<String,Integer>>(resultRegular));
    }
{
      executionConfig.disableObjectReuse();
      List<Tuple2<String,Integer>> resultSafe=getCoGroupOperator(new SumCoGroup()).executeOnCollections(Collections.<Tuple2<String,Integer>>emptyList(),Collections.<Tuple2<String,Integer>>emptyList(),ctx,executionConfig);
      executionConfig.enableObjectReuse();
      List<Tuple2<String,Integer>> resultRegular=getCoGroupOperator(new SumCoGroup()).executeOnCollections(Collections.<Tuple2<String,Integer>>emptyList(),Collections.<Tuple2<String,Integer>>emptyList(),ctx,executionConfig);
      Assert.assertEquals(0,resultSafe.size());
      Assert.assertEquals(0,resultRegular.size());
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    Assert.fail(t.getMessage());
  }
}
