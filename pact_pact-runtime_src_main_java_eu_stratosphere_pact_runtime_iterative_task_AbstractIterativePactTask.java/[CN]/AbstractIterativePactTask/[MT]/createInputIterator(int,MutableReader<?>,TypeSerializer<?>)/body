{
  final MutableObjectIterator<?> inIter=super.createInputIterator(i,inputReader,serializer);
  final int numberOfEventsUntilInterrupt=getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(i);
  if (numberOfEventsUntilInterrupt == 0) {
    return inIter;
  }
  @SuppressWarnings({"unchecked","rawtypes"}) InterruptingMutableObjectIterator<?> interruptingIterator=new InterruptingMutableObjectIterator(inIter,numberOfEventsUntilInterrupt,identifier(),this,i);
  inputReader.subscribeToEvent(interruptingIterator,EndOfSuperstepEvent.class);
  inputReader.subscribeToEvent(interruptingIterator,TerminationEvent.class);
  if (log.isInfoEnabled()) {
    log.info(formatLogString("wrapping input [" + i + "] with an interrupting iterator that waits "+ "for ["+ numberOfEventsUntilInterrupt+ "] event(s)"));
  }
  return interruptingIterator;
}
