{
  int numberOfEventsUntilInterrupt=getTaskConfig().getNumberOfEventsUntilInterruptInIterativeGate(inputGateIndex);
  InterruptingMutableObjectIterator<X> interruptingIterator=new InterruptingMutableObjectIterator<X>((MutableObjectIterator<X>)super.getInput(inputGateIndex),numberOfEventsUntilInterrupt,identifier(),this);
  MutableReader<Record> inputReader=getReader(inputGateIndex);
  inputReader.subscribeToEvent(interruptingIterator,EndOfSuperstepEvent.class);
  inputReader.subscribeToEvent(interruptingIterator,TerminationEvent.class);
  if (log.isInfoEnabled()) {
    log.info(formatLogString("wrapping input [" + inputGateIndex + "] with an interrupting iterator that waits "+ "for ["+ numberOfEventsUntilInterrupt+ "] event(s)"));
  }
  wrappedInputs[inputGateIndex]=interruptingIterator;
  return interruptingIterator;
}
