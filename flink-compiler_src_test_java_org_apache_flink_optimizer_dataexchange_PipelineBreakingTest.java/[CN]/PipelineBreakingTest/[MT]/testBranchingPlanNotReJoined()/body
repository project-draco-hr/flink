{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Integer> data=env.readTextFile("/never/accessed").map(new MapFunction<String,Integer>(){
      @Override public Integer map(      String value){
        return 0;
      }
    }
);
    data.filter(new FilterFunction<Integer>(){
      @Override public boolean filter(      Integer value){
        return false;
      }
    }
).output(new DiscardingOutputFormat<Integer>());
    data.join(env.fromElements(1,2,3,4)).where(new IdentityKeyExtractor<Integer>()).equalTo(new IdentityKeyExtractor<Integer>()).output(new DiscardingOutputFormat<Tuple2<Integer,Integer>>());
    data.output(new DiscardingOutputFormat<Integer>());
    List<DataSinkNode> sinks=convertPlan(env.createProgramPlan());
    DataSinkNode sinkAfterFilter=sinks.get(0);
    DataSinkNode sinkAfterJoin=sinks.get(1);
    DataSinkNode sinkDirect=sinks.get(2);
    SingleInputNode filterNode=(SingleInputNode)sinkAfterFilter.getPredecessorNode();
    SingleInputNode mapNode=(SingleInputNode)filterNode.getPredecessorNode();
    TwoInputNode joinNode=(TwoInputNode)sinkAfterJoin.getPredecessorNode();
    SingleInputNode joinInput=(SingleInputNode)joinNode.getSecondPredecessorNode();
    assertFalse(sinkAfterFilter.getInputConnection().isBreakingPipeline());
    assertFalse(sinkAfterJoin.getInputConnection().isBreakingPipeline());
    assertFalse(sinkDirect.getInputConnection().isBreakingPipeline());
    assertFalse(filterNode.getIncomingConnection().isBreakingPipeline());
    assertFalse(mapNode.getIncomingConnection().isBreakingPipeline());
    assertFalse(joinNode.getFirstIncomingConnection().isBreakingPipeline());
    assertFalse(joinNode.getSecondIncomingConnection().isBreakingPipeline());
    assertFalse(joinInput.getIncomingConnection().isBreakingPipeline());
    assertEquals(mapNode,((SingleInputNode)joinNode.getFirstPredecessorNode()).getPredecessorNode());
    assertEquals(mapNode,sinkDirect.getPredecessorNode());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
