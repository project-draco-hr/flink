{
  List<Integer> inputs=new ArrayList<Integer>();
  inputs.add(1);
  inputs.add(2);
  inputs.add(2);
  inputs.add(3);
  inputs.add(4);
  inputs.add(5);
  inputs.add(10);
  inputs.add(11);
  inputs.add(11);
  KeySelector<Integer,?> key=new ModKey(2);
  Timestamp<Integer> ts=new Timestamp<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Integer value){
      return value;
    }
  }
;
  StreamExecutionEnvironment env=new TestStreamEnvironment(2,MEMORYSIZE);
  DataStream<Integer> source=env.fromCollection(inputs);
  source.window(Time.of(3,ts,1)).every(Time.of(2,ts,1)).sum(0).getDiscretizedStream().addSink(new CentralSink1());
  source.window(Time.of(4,ts,1)).groupBy(new ModKey(2)).mapWindow(new IdentityWindowMap()).flatten().addSink(new CentralSink2());
  source.groupBy(key).window(Time.of(4,ts,1)).sum(0).getDiscretizedStream().addSink(new DistributedSink1());
  source.groupBy(new ModKey(3)).window(Count.of(2)).groupBy(new ModKey(2)).mapWindow(new IdentityWindowMap()).flatten().addSink(new DistributedSink2());
  source.window(Time.of(2,ts)).every(Time.of(3,ts)).min(0).getDiscretizedStream().addSink(new CentralSink3());
  source.groupBy(key).window(Time.of(4,ts,1)).max(0).getDiscretizedStream().addSink(new DistributedSink3());
  source.window(Time.of(5,ts,1)).mapWindow(new IdentityWindowMap()).flatten().addSink(new DistributedSink4());
  source.window(Time.of(5,ts,1)).every(Time.of(4,ts,1)).groupBy(new ModKey(2)).sum(0).getDiscretizedStream().addSink(new DistributedSink5());
  DataStream<Integer> source2=env.addSource(new ParallelSourceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public void run(    Collector<Integer> collector) throws Exception {
      for (int i=1; i <= 10; i++) {
        collector.collect(i);
      }
    }
    @Override public void cancel(){
    }
  }
);
  DataStream<Integer> source3=env.addSource(new RichParallelSourceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public void run(    Collector<Integer> collector) throws Exception {
      for (int i=1; i <= 11; i++) {
        if (i % 2 == getRuntimeContext().getIndexOfThisSubtask()) {
          collector.collect(i);
        }
      }
    }
    @Override public void cancel(){
    }
  }
);
  source2.window(Time.of(2,ts,1)).sum(0).getDiscretizedStream().addSink(new DistributedSink6());
  source3.window(Time.of(5,ts,1)).groupBy(new ModKey(2)).sum(0).getDiscretizedStream().addSink(new DistributedSink7());
  env.execute();
  List<StreamWindow<Integer>> expected1=new ArrayList<StreamWindow<Integer>>();
  expected1.add(StreamWindow.fromElements(5));
  expected1.add(StreamWindow.fromElements(11));
  expected1.add(StreamWindow.fromElements(9));
  expected1.add(StreamWindow.fromElements(10));
  expected1.add(StreamWindow.fromElements(32));
  validateOutput(expected1,CentralSink1.windows);
  List<StreamWindow<Integer>> expected2=new ArrayList<StreamWindow<Integer>>();
  expected2.add(StreamWindow.fromElements(2,2,4));
  expected2.add(StreamWindow.fromElements(1,3));
  expected2.add(StreamWindow.fromElements(5));
  expected2.add(StreamWindow.fromElements(10));
  expected2.add(StreamWindow.fromElements(11,11));
  validateOutput(expected2,CentralSink2.windows);
  List<StreamWindow<Integer>> expected3=new ArrayList<StreamWindow<Integer>>();
  expected3.add(StreamWindow.fromElements(4));
  expected3.add(StreamWindow.fromElements(5));
  expected3.add(StreamWindow.fromElements(22));
  expected3.add(StreamWindow.fromElements(8));
  expected3.add(StreamWindow.fromElements(10));
  validateOutput(expected3,DistributedSink1.windows);
  List<StreamWindow<Integer>> expected4=new ArrayList<StreamWindow<Integer>>();
  expected4.add(StreamWindow.fromElements(2,2));
  expected4.add(StreamWindow.fromElements(1));
  expected4.add(StreamWindow.fromElements(4));
  expected4.add(StreamWindow.fromElements(5,11));
  expected4.add(StreamWindow.fromElements(10));
  expected4.add(StreamWindow.fromElements(11));
  expected4.add(StreamWindow.fromElements(3));
  validateOutput(expected4,DistributedSink2.windows);
  List<StreamWindow<Integer>> expected5=new ArrayList<StreamWindow<Integer>>();
  expected5.add(StreamWindow.fromElements(1));
  expected5.add(StreamWindow.fromElements(4));
  expected5.add(StreamWindow.fromElements(10));
  validateOutput(expected5,CentralSink3.windows);
  List<StreamWindow<Integer>> expected6=new ArrayList<StreamWindow<Integer>>();
  expected6.add(StreamWindow.fromElements(3));
  expected6.add(StreamWindow.fromElements(5));
  expected6.add(StreamWindow.fromElements(11));
  expected6.add(StreamWindow.fromElements(4));
  expected6.add(StreamWindow.fromElements(10));
  validateOutput(expected6,DistributedSink3.windows);
  List<StreamWindow<Integer>> expected7=new ArrayList<StreamWindow<Integer>>();
  expected7.add(StreamWindow.fromElements(1,2,2,3,4,5));
  expected7.add(StreamWindow.fromElements(10));
  expected7.add(StreamWindow.fromElements(10,11,11));
  validateOutput(expected7,DistributedSink4.windows);
  List<StreamWindow<Integer>> expected8=new ArrayList<StreamWindow<Integer>>();
  expected8.add(StreamWindow.fromElements(4,8));
  expected8.add(StreamWindow.fromElements(4,5));
  expected8.add(StreamWindow.fromElements(10,22));
  for (  List<Integer> sw : DistributedSink5.windows) {
    Collections.sort(sw);
  }
  validateOutput(expected8,DistributedSink5.windows);
  List<StreamWindow<Integer>> expected9=new ArrayList<StreamWindow<Integer>>();
  expected9.add(StreamWindow.fromElements(6));
  expected9.add(StreamWindow.fromElements(14));
  expected9.add(StreamWindow.fromElements(22));
  expected9.add(StreamWindow.fromElements(30));
  expected9.add(StreamWindow.fromElements(38));
  validateOutput(expected9,DistributedSink6.windows);
  List<StreamWindow<Integer>> expected10=new ArrayList<StreamWindow<Integer>>();
  expected10.add(StreamWindow.fromElements(6,9));
  expected10.add(StreamWindow.fromElements(16,24));
  for (  List<Integer> sw : DistributedSink7.windows) {
    Collections.sort(sw);
  }
  validateOutput(expected10,DistributedSink7.windows);
}
