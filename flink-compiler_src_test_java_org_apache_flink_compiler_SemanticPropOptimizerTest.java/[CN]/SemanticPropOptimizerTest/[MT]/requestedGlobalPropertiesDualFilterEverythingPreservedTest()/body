{
  String[] constantSet1={"0->1,2","3->0","2->4"};
  String[] constantSet2={"0->3","4->6","6->7"};
  DualInputSemanticProperties dprops=new DualInputSemanticProperties();
  SemanticPropUtil.getSemanticPropsDualFromString(dprops,constantSet1,constantSet2,null,null,null,null,tupleInfo,tupleInfo,tupleInfo);
  RequestedGlobalProperties gprops1=new RequestedGlobalProperties();
  RequestedGlobalProperties gprops2=new RequestedGlobalProperties();
  gprops1.setHashPartitioned(new FieldSet(2,0,4));
  gprops2.setHashPartitioned(new FieldSet(3,6,7));
  gprops1=gprops1.filterBySemanticProperties(dprops,0);
  gprops2=gprops2.filterBySemanticProperties(dprops,1);
  Assert.assertTrue(gprops1.getPartitioning() == PartitioningProperty.HASH_PARTITIONED);
  Assert.assertTrue(gprops1.getPartitionedFields().size() == 3);
  Assert.assertTrue(gprops1.getPartitionedFields().contains(0));
  Assert.assertTrue(gprops1.getPartitionedFields().contains(3));
  Assert.assertTrue(gprops1.getPartitionedFields().contains(2));
  Assert.assertTrue(gprops2.getPartitioning() == PartitioningProperty.HASH_PARTITIONED);
  Assert.assertTrue(gprops2.getPartitionedFields().size() == 3);
  Assert.assertTrue(gprops2.getPartitionedFields().contains(0));
  Assert.assertTrue(gprops2.getPartitionedFields().contains(4));
  Assert.assertTrue(gprops2.getPartitionedFields().contains(6));
}
