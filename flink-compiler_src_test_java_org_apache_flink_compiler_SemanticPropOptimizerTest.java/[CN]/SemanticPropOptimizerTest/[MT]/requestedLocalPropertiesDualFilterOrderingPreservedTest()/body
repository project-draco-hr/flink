{
  Ordering ordering=new Ordering();
  ordering.appendOrdering(2,null,Order.ASCENDING);
  ordering.appendOrdering(3,null,Order.ASCENDING);
  ordering.appendOrdering(0,null,Order.ASCENDING);
  String[] constantSet={"6->2","2->3","5->0"};
  DualInputSemanticProperties dprops=new DualInputSemanticProperties();
  SemanticPropUtil.getSemanticPropsDualFromString(dprops,constantSet,constantSet,null,null,null,null,tupleInfo,tupleInfo,tupleInfo);
  RequestedLocalProperties lprops1=new RequestedLocalProperties();
  lprops1.setOrdering(ordering);
  RequestedLocalProperties lprops2=new RequestedLocalProperties();
  lprops2.setOrdering(ordering);
  RequestedLocalProperties result1=lprops1.filterBySemanticProperties(dprops,0);
  RequestedLocalProperties result2=lprops2.filterBySemanticProperties(dprops,1);
  FieldSet involved1=result1.getOrdering().getInvolvedIndexes();
  FieldSet involved2=result2.getOrdering().getInvolvedIndexes();
  Order[] orders1=result1.getOrdering().getFieldOrders();
  Order[] orders2=result2.getOrdering().getFieldOrders();
  Assert.assertTrue(involved1.size() == 3);
  Assert.assertTrue(involved1.contains(6));
  Assert.assertTrue(involved1.contains(2));
  Assert.assertTrue(involved1.contains(5));
  Assert.assertTrue(orders1[0] == Order.ASCENDING);
  Assert.assertTrue(orders1[1] == Order.ASCENDING);
  Assert.assertTrue(orders1[2] == Order.ASCENDING);
  Assert.assertTrue(involved2.size() == 3);
  Assert.assertTrue(involved2.contains(6));
  Assert.assertTrue(involved2.contains(2));
  Assert.assertTrue(involved2.contains(5));
  Assert.assertTrue(orders2[0] == Order.ASCENDING);
  Assert.assertTrue(orders2[1] == Order.ASCENDING);
  Assert.assertTrue(orders2[2] == Order.ASCENDING);
}
