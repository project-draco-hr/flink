{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple2<Long,Long>> data1=env.fromElements(new Tuple2<Long,Long>(0L,0L));
    DataSet<Tuple2<Long,Long>> data2=env.fromElements(new Tuple2<Long,Long>(0L,0L));
    DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> firstIteration=data1.iterateDelta(data1,100,0);
    DataSet<Tuple2<Long,Long>> inFirst=firstIteration.getWorkset().map(new IdentityMapper<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> firstResult=firstIteration.closeWith(inFirst,inFirst).map(new IdentityMapper<Tuple2<Long,Long>>());
    DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> mainIteration=data2.iterateDelta(data2,100,0);
    DataSet<Tuple2<Long,Long>> joined=mainIteration.getWorkset().join(firstResult).where(0).equalTo(0).projectFirst(0).projectSecond(0);
    DataSet<Tuple2<Long,Long>> mainResult=mainIteration.closeWith(joined,joined);
    mainResult.print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    new JobGraphGenerator().compileJobGraph(op);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
