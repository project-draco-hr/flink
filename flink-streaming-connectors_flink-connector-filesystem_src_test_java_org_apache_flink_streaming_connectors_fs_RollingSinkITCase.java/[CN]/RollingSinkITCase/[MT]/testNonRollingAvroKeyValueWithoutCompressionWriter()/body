{
  final int NUM_ELEMENTS=20;
  final int PARALLELISM=2;
  final String outPath=hdfsURI + "/avro-kv-no-comp-non-rolling-out";
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(PARALLELISM);
  DataStream<Tuple2<Integer,String>> source=env.addSource(new TestSourceFunction(NUM_ELEMENTS)).broadcast().filter(new OddEvenFilter());
  Map<String,String> properties=new HashMap<>();
  Schema keySchema=Schema.create(Type.INT);
  Schema valueSchema=Schema.create(Type.STRING);
  properties.put(AvroKeyValueSinkWriter.CONF_OUTPUT_KEY_SCHEMA,keySchema.toString());
  properties.put(AvroKeyValueSinkWriter.CONF_OUTPUT_VALUE_SCHEMA,valueSchema.toString());
  RollingSink<Tuple2<Integer,String>> sink=new RollingSink<Tuple2<Integer,String>>(outPath).setWriter(new AvroKeyValueSinkWriter<Integer,String>(properties)).setBucketer(new NonRollingBucketer()).setPartPrefix("part").setPendingPrefix("").setPendingSuffix("");
  source.addSink(sink);
  env.execute("RollingSink Avro KeyValue Writer Test");
  GenericData.setStringType(valueSchema,StringType.String);
  Schema elementSchema=AvroKeyValue.getSchema(keySchema,valueSchema);
  FSDataInputStream inStream=dfs.open(new Path(outPath + "/part-0-0"));
  SpecificDatumReader<GenericRecord> elementReader=new SpecificDatumReader<GenericRecord>(elementSchema);
  DataFileStream<GenericRecord> dataFileStream=new DataFileStream<GenericRecord>(inStream,elementReader);
  for (int i=0; i < NUM_ELEMENTS; i+=2) {
    AvroKeyValue<Integer,String> wrappedEntry=new AvroKeyValue<Integer,String>(dataFileStream.next());
    int key=wrappedEntry.getKey().intValue();
    Assert.assertEquals(i,key);
    String value=wrappedEntry.getValue();
    Assert.assertEquals("message #" + i,value);
  }
  dataFileStream.close();
  inStream.close();
  inStream=dfs.open(new Path(outPath + "/part-1-0"));
  dataFileStream=new DataFileStream<GenericRecord>(inStream,elementReader);
  for (int i=1; i < NUM_ELEMENTS; i+=2) {
    AvroKeyValue<Integer,String> wrappedEntry=new AvroKeyValue<Integer,String>(dataFileStream.next());
    int key=wrappedEntry.getKey().intValue();
    Assert.assertEquals(i,key);
    String value=wrappedEntry.getValue();
    Assert.assertEquals("message #" + i,value);
  }
  dataFileStream.close();
  inStream.close();
}
