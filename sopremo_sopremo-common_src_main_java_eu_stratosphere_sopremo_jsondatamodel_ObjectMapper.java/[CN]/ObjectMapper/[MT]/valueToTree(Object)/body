{
  if (value == null)   return NullNode.getInstance();
  final Class<? extends Object> valueClass=value.getClass();
  if (value instanceof JsonNode)   return (JsonNode)value;
  if (value instanceof StringBuilder)   return TextNode.valueOf(((StringBuilder)value).toString());
  if (valueClass.isArray()) {
    final ArrayNode arrayNode=new ArrayNode();
    final int length=Array.getLength(value);
    for (int i=0; i < length; i++)     arrayNode.add(this.valueToTree(Array.get(value,i)));
    return arrayNode;
  }
  if (value instanceof Boolean)   return BooleanNode.valueOf((Boolean)value);
  try {
    return this.typeDict.get(valueClass).newInstance(value);
  }
 catch (  final IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  final SecurityException e) {
    e.printStackTrace();
  }
catch (  final InstantiationException e) {
    e.printStackTrace();
  }
catch (  final IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  final InvocationTargetException e) {
    e.printStackTrace();
  }
  return NullNode.getInstance();
}
