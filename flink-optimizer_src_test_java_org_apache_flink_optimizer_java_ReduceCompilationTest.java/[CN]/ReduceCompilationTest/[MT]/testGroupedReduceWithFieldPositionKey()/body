{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(8);
    DataSet<Tuple2<String,Double>> data=env.readCsvFile("file:///will/never/be/read").types(String.class,Double.class).name("source").setParallelism(6);
    data.groupBy(1).reduce(new RichReduceFunction<Tuple2<String,Double>>(){
      @Override public Tuple2<String,Double> reduce(      Tuple2<String,Double> value1,      Tuple2<String,Double> value2){
        return null;
      }
    }
).name("reducer").print().name("sink");
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(op);
    SourcePlanNode sourceNode=resolver.getNode("source");
    SingleInputPlanNode reduceNode=resolver.getNode("reducer");
    SinkPlanNode sinkNode=resolver.getNode("sink");
    SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getInput().getSource();
    assertEquals(sourceNode,combineNode.getInput().getSource());
    assertEquals(reduceNode,sinkNode.getInput().getSource());
    assertEquals(DriverStrategy.SORTED_REDUCE,reduceNode.getDriverStrategy());
    assertEquals(DriverStrategy.SORTED_PARTIAL_REDUCE,combineNode.getDriverStrategy());
    assertEquals(new FieldList(1),reduceNode.getKeys(0));
    assertEquals(new FieldList(1),combineNode.getKeys(0));
    assertEquals(new FieldList(1),reduceNode.getInput().getLocalStrategyKeys());
    assertEquals(6,sourceNode.getParallelism());
    assertEquals(6,combineNode.getParallelism());
    assertEquals(8,reduceNode.getParallelism());
    assertEquals(8,sinkNode.getParallelism());
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail(e.getClass().getSimpleName() + " in test: " + e.getMessage());
  }
}
