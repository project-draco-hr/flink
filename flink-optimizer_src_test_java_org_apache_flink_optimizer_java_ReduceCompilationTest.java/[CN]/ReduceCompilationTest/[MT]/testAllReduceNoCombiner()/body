{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(8);
    DataSet<Double> data=env.fromElements(0.2,0.3,0.4,0.5).name("source");
    data.reduce(new RichReduceFunction<Double>(){
      @Override public Double reduce(      Double value1,      Double value2){
        return value1 + value2;
      }
    }
).name("reducer").output(new DiscardingOutputFormat<Double>()).name("sink");
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(op);
    SourcePlanNode sourceNode=resolver.getNode("source");
    SingleInputPlanNode reduceNode=resolver.getNode("reducer");
    SinkPlanNode sinkNode=resolver.getNode("sink");
    assertEquals(sourceNode,reduceNode.getInput().getSource());
    assertEquals(reduceNode,sinkNode.getInput().getSource());
    assertEquals(1,sourceNode.getParallelism());
    assertEquals(1,reduceNode.getParallelism());
    assertEquals(1,sinkNode.getParallelism());
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail(e.getClass().getSimpleName() + " in test: " + e.getMessage());
  }
}
