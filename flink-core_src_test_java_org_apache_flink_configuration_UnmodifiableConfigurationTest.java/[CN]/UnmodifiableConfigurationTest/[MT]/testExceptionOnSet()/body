{
  try {
    Map<Class<?>,Object> parameters=new HashMap<Class<?>,Object>();
    parameters.put(byte[].class,new byte[0]);
    parameters.put(Class.class,Object.class);
    parameters.put(int.class,0);
    parameters.put(long.class,0L);
    parameters.put(float.class,0.0f);
    parameters.put(double.class,0.0);
    parameters.put(String.class,"");
    parameters.put(boolean.class,false);
    Class<UnmodifiableConfiguration> clazz=UnmodifiableConfiguration.class;
    UnmodifiableConfiguration config=new UnmodifiableConfiguration(new Configuration());
    for (    Method m : clazz.getMethods()) {
      if (m.getName().startsWith("set")) {
        Class<?> parameterClass=m.getParameterTypes()[1];
        Object parameter=parameters.get(parameterClass);
        assertNotNull("method " + m + " not covered by test",parameter);
        try {
          m.invoke(config,"key",parameter);
          fail("should fail with an exception");
        }
 catch (        InvocationTargetException e) {
          assertTrue(e.getTargetException() instanceof UnsupportedOperationException);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
