{
  try {
    final int NUM_LISTS=20000;
    final int NUM_MEM_PAGES=SIZE * NUM_LISTS / PAGE_SIZE;
    final int STEP_SIZE=100;
    final IntList[] lists=getRandomizedIntLists(NUM_LISTS,rnd);
    AbstractMutableHashTable<IntList> table=new CompactingHashTable<IntList>(serializerV,comparatorV,getMemory(NUM_MEM_PAGES,PAGE_SIZE));
    table.open();
    for (int i=0; i < NUM_LISTS; i++) {
      table.insert(lists[i]);
    }
    @SuppressWarnings("unchecked") AbstractHashTableProber<IntList,IntList> prober=(CompactingHashTable<IntList>.HashTableProber<IntList>)table.getProber(comparatorV,pairComparatorV);
    IntList target=new IntList();
    for (int i=0; i < NUM_LISTS; i++) {
      assertTrue(prober.getMatchFor(lists[i],target));
      assertArrayEquals(lists[i].getValue(),target.getValue());
    }
    final IntList[] overwriteLists=getRandomizedIntLists(NUM_LISTS / STEP_SIZE,rnd);
    IntList tempHolder=new IntList();
    for (int i=0; i < NUM_LISTS; i+=STEP_SIZE) {
      overwriteLists[i / STEP_SIZE].setKey(overwriteLists[i / STEP_SIZE].getKey() * STEP_SIZE);
      table.insertOrReplaceRecord(overwriteLists[i / STEP_SIZE],tempHolder);
      lists[i]=overwriteLists[i / STEP_SIZE];
    }
    for (int i=0; i < NUM_LISTS; i++) {
      assertTrue(prober.getMatchFor(lists[i],target));
      assertArrayEquals(lists[i].getValue(),target.getValue());
    }
    table.close();
    assertEquals("Memory lost",NUM_MEM_PAGES,table.getFreeMemory().size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error: " + e.getMessage());
  }
}
