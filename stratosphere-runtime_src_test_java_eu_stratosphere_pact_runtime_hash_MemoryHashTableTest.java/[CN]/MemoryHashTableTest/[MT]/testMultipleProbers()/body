{
  try {
    final int NUM_MEM_PAGES=SIZE * NUM_LISTS / PAGE_SIZE;
    final IntList[] lists=getRandomizedIntLists(NUM_LISTS,rnd);
    final IntPair[] pairs=getRandomizedIntPairs(NUM_LISTS,rnd);
    AbstractMutableHashTable<IntList> table=new CompactingHashTable<IntList>(serializerV,comparatorV,getMemory(NUM_MEM_PAGES,PAGE_SIZE));
    table.open();
    for (int i=0; i < NUM_LISTS; i++) {
      table.insert(lists[i]);
    }
    @SuppressWarnings("unchecked") AbstractHashTableProber<IntList,IntList> listProber=(AbstractHashTableProber<IntList,IntList>)table.getProber(comparatorV,pairComparatorV);
    @SuppressWarnings("unchecked") AbstractHashTableProber<IntPair,IntList> pairProber=(AbstractHashTableProber<IntPair,IntList>)table.getProber(comparator,pairComparatorPL);
    IntList target=new IntList();
    for (int i=0; i < NUM_LISTS; i++) {
      assertTrue(pairProber.getMatchFor(pairs[i],target));
      assertTrue(listProber.getMatchFor(lists[i],target));
      assertArrayEquals(lists[i].getValue(),target.getValue());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error: " + e.getMessage());
  }
}
