{
  checkNotNull(userCodeObject,"The user code object may not be null.");
  checkArgument(userCodeObject instanceof Serializable,"User code object is not serializable: " + userCodeObject.getClass().getName());
  this.userCodeObject=userCodeObject;
  Object current=userCodeObject;
  try {
    while (null != current) {
      Object newCurrent=null;
      boolean hasCustomSerialization=false;
      Method customSerializer=null;
      Method customDeserializer=null;
      try {
        customSerializer=current.getClass().getDeclaredMethod("writeObject",java.io.ObjectOutputStream.class);
        customDeserializer=current.getClass().getDeclaredMethod("readObject",java.io.ObjectInputStream.class);
      }
 catch (      Exception e) {
      }
      if (customSerializer != null && customDeserializer != null) {
        hasCustomSerialization=true;
      }
      for (      Field f : current.getClass().getDeclaredFields()) {
        f.setAccessible(true);
        if (f.getName().contains("$outer")) {
          newCurrent=f.get(current);
        }
        if (hasCustomSerialization || Modifier.isTransient(f.getModifiers()) || Modifier.isStatic(f.getModifiers())) {
          continue;
        }
        Object fieldContents=f.get(current);
        if (fieldContents != null && !(fieldContents instanceof Serializable)) {
          throw new NonSerializableUserCodeException("User-defined object " + userCodeObject + " ("+ userCodeObject.getClass().getName()+ ") contains non-serializable field "+ f.getName()+ " = "+ f.get(current));
        }
      }
      current=newCurrent;
    }
  }
 catch (  NonSerializableUserCodeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException("Could not access the fields of the user defined class while checking for serializability.",e);
  }
}
