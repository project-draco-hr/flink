{
  final List<ManagementGroupVertex> reverseTopologicalSort=this.managementGraph.getGroupVerticesInReverseTopologicalOrder();
  final Map<ManagementGroupVertex,Boolean> successorCPUBottleneckMap=new HashMap<ManagementGroupVertex,Boolean>();
  Iterator<ManagementGroupVertex> it=reverseTopologicalSort.iterator();
  boolean atLeastOneCPUBottleneck=false;
  while (it.hasNext()) {
    final ManagementGroupVertex groupVertex=it.next();
    final GroupVertexVisualizationData groupVertexVisualizationData=(GroupVertexVisualizationData)groupVertex.getAttachment();
    groupVertexVisualizationData.updateCPUBottleneckFlag(successorCPUBottleneckMap);
    if (groupVertexVisualizationData.isCPUBottleneck()) {
      atLeastOneCPUBottleneck=true;
    }
  }
  if (atLeastOneCPUBottleneck) {
    return;
  }
  it=reverseTopologicalSort.iterator();
  final Map<ManagementGroupEdge,Boolean> successorIOBottleneckMap=new HashMap<ManagementGroupEdge,Boolean>();
  while (it.hasNext()) {
    final ManagementGroupVertex groupVertex=it.next();
    for (int i=0; i < groupVertex.getNumberOfForwardEdges(); i++) {
      final ManagementGroupEdge groupEdge=groupVertex.getForwardEdge(i);
      final GroupEdgeVisualizationData groupEdgeVisualizationData=(GroupEdgeVisualizationData)groupEdge.getAttachment();
      groupEdgeVisualizationData.updateIOBottleneckFlag(successorIOBottleneckMap);
    }
  }
}
