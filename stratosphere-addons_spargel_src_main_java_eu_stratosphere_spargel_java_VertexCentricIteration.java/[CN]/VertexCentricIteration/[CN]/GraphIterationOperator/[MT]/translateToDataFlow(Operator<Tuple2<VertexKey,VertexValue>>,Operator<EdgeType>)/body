{
  final String name=(getName() != null) ? getName() : "Vertex-centric iteration (" + updateFunction + " | "+ messagingFunction+ ")";
  final int[] zeroKeyPos=new int[]{0};
  final DeltaIterationBase<Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>> iteration=new DeltaIterationBase<Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>>(new BinaryOperatorInformation<Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>>(getInput1Type(),getInput1Type(),getInput1Type()),zeroKeyPos,name);
  iteration.setMaximumNumberOfIterations(maximumNumberOfIterations);
  for (  Map.Entry<String,Class<? extends Aggregator<?>>> entry : aggregators.entrySet()) {
    iteration.getAggregators().registerAggregator(entry.getKey(),entry.getValue());
  }
  final CoGroupOperatorBase<EdgeType,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,Message>,GenericCoGrouper<EdgeType,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,Message>>> messenger=new CoGroupOperatorBase<EdgeType,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,Message>,GenericCoGrouper<EdgeType,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,Message>>>(messagingFunction,new BinaryOperatorInformation<EdgeType,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,Message>>(edges.getType(),getInput1Type(),messageType),zeroKeyPos,zeroKeyPos,"Messaging");
  messenger.setSecondInput(iteration.getWorkset());
  final CoGroupOperatorBase<Tuple2<VertexKey,Message>,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>,GenericCoGrouper<Tuple2<VertexKey,Message>,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>>> updater=new CoGroupOperatorBase<Tuple2<VertexKey,Message>,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>,GenericCoGrouper<Tuple2<VertexKey,Message>,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>>>(updateFunction,new BinaryOperatorInformation<Tuple2<VertexKey,Message>,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>>(messageType,getInput1Type(),getInput1Type()),zeroKeyPos,zeroKeyPos,"Vertex State Updates");
  updater.setFirstInput(messenger);
  updater.setSecondInput(iteration.getSolutionSet());
  DualInputSemanticProperties semanticProps=new DualInputSemanticProperties();
  semanticProps.addForwardedField1(0,0);
  semanticProps.addForwardedField2(0,0);
  updater.setSemanticProperties(semanticProps);
  iteration.setSolutionSetDelta(updater);
  iteration.setNextWorkset(updater);
  iteration.setFirstInput(input1);
  iteration.setSecondInput(input1);
  messenger.setFirstInput(input2);
  return iteration;
}
