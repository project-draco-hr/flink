{
  if (UserGroupInformation.isSecurityEnabled()) {
    throw new RuntimeException("Stratosphere YARN client does not have security support right now." + "File a bug, we will fix it asap");
  }
  Options options=new Options();
  options.addOption(VERBOSE);
  options.addOption(STRATOSPHERE_CONF_DIR);
  options.addOption(STRATOSPHERE_JAR);
  options.addOption(JM_MEMORY);
  options.addOption(TM_MEMORY);
  options.addOption(TM_CORES);
  options.addOption(CONTAINER);
  options.addOption(GEN_CONF);
  options.addOption(QUEUE);
  options.addOption(QUERY);
  options.addOption(SHIP_PATH);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  MissingOptionException moe) {
    System.out.println(moe.getMessage());
    printUsage();
    System.exit(1);
  }
  if (System.getProperty("log4j.configuration") == null) {
    Logger root=Logger.getRootLogger();
    root.removeAllAppenders();
    PatternLayout layout=new PatternLayout("%d{HH:mm:ss,SSS} %-5p %-60c %x - %m%n");
    ConsoleAppender appender=new ConsoleAppender(layout,"System.err");
    root.addAppender(appender);
    if (cmd.hasOption(VERBOSE.getOpt())) {
      root.setLevel(Level.DEBUG);
      LOG.debug("CLASSPATH: " + System.getProperty("java.class.path"));
    }
 else {
      root.setLevel(Level.INFO);
    }
  }
  Path localJarPath;
  if (cmd.hasOption(STRATOSPHERE_JAR.getOpt())) {
    String userPath=cmd.getOptionValue(STRATOSPHERE_JAR.getOpt());
    if (!userPath.startsWith("file://")) {
      userPath="file://" + userPath;
    }
    localJarPath=new Path(userPath);
  }
 else {
    localJarPath=new Path("file://" + Client.class.getProtectionDomain().getCodeSource().getLocation().getPath());
  }
  if (cmd.hasOption(GEN_CONF.getOpt())) {
    LOG.info("Placing default configuration in current directory");
    File outFile=generateDefaultConf(localJarPath);
    LOG.info("File written to " + outFile.getAbsolutePath());
    System.exit(0);
  }
  Path confPath=null;
  String confDirPath="";
  if (cmd.hasOption(STRATOSPHERE_CONF_DIR.getOpt())) {
    confDirPath=cmd.getOptionValue(STRATOSPHERE_CONF_DIR.getOpt()) + "/";
    File confFile=new File(confDirPath + CONFIG_FILE_NAME);
    if (!confFile.exists()) {
      LOG.fatal("Unable to locate configuration file in " + confFile);
      System.exit(1);
    }
    confPath=new Path(confFile.getAbsolutePath());
  }
 else {
    System.out.println("No configuration file has been specified");
    File currDir=new File(".");
    File[] candidates=currDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      final File dir,      final String name){
        return name != null && name.endsWith(".yaml");
      }
    }
);
    if (candidates == null || candidates.length == 0) {
      System.out.println("No configuration file has been found in current directory.\n" + "Copying default.");
      File outFile=generateDefaultConf(localJarPath);
      confPath=new Path(outFile.toURI());
    }
 else {
      if (candidates.length > 1) {
        System.out.println("Multiple .yaml configuration files were found in the current directory\n" + "Please specify one explicitly");
        System.exit(1);
      }
 else       if (candidates.length == 1) {
        confPath=new Path(candidates[0].toURI());
      }
    }
  }
  List<File> shipFiles=new ArrayList<File>();
  if (cmd.hasOption(SHIP_PATH.getOpt())) {
    String shipPath=cmd.getOptionValue(SHIP_PATH.getOpt());
    File shipDir=new File(shipPath);
    if (shipDir.isDirectory()) {
      shipFiles=new ArrayList<File>(Arrays.asList(shipDir.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          return !(name.equals(".") || name.equals(".."));
        }
      }
)));
    }
 else {
      LOG.warn("Ship directory is not a directory!");
    }
  }
  boolean hasLog4j=false;
  if (confDirPath.length() > 0) {
    File l4j=new File(confDirPath + "/log4j.properties");
    if (l4j.exists()) {
      shipFiles.add(l4j);
      hasLog4j=true;
    }
  }
  String queue="default";
  if (cmd.hasOption(QUEUE.getOpt())) {
    queue=cmd.getOptionValue(QUEUE.getOpt());
  }
  int jmMemory=512;
  if (cmd.hasOption(JM_MEMORY.getOpt())) {
    jmMemory=Integer.valueOf(cmd.getOptionValue(JM_MEMORY.getOpt()));
  }
  int tmMemory=1024;
  if (cmd.hasOption(TM_MEMORY.getOpt())) {
    tmMemory=Integer.valueOf(cmd.getOptionValue(TM_MEMORY.getOpt()));
  }
  int tmCores=1;
  if (cmd.hasOption(TM_CORES.getOpt())) {
    tmCores=Integer.valueOf(cmd.getOptionValue(TM_CORES.getOpt()));
  }
  Utils.getStratosphereConfiguration(confPath.toUri().getPath());
  int jmPort=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,0);
  if (jmPort == 0) {
    LOG.warn("Unable to find job manager port in configuration!");
    jmPort=ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT;
  }
  conf=Utils.initializeYarnConfiguration();
  LOG.info("Copy App Master jar from local filesystem and add to local environment");
  final FileSystem fs=FileSystem.get(conf);
  if (fs.getScheme().startsWith("file")) {
    LOG.warn("The file system scheme is '" + fs.getScheme() + "'. This indicates that the "+ "specified Hadoop configuration path is wrong and the sytem is using the default Hadoop configuration values."+ "The Stratosphere YARN client needs to store its files in a distributed file system");
  }
  final YarnClient yarnClient=YarnClient.createYarnClient();
  yarnClient.init(conf);
  yarnClient.start();
  if (cmd.hasOption(QUERY.getOpt())) {
    showClusterMetrics(yarnClient);
  }
  if (!cmd.hasOption(CONTAINER.getOpt())) {
    LOG.fatal("Missing required argument " + CONTAINER.getOpt());
    printUsage();
    yarnClient.stop();
    System.exit(1);
  }
  final int taskManagerCount=Integer.valueOf(cmd.getOptionValue(CONTAINER.getOpt()));
  System.out.println("Using values:");
  System.out.println("\tContainer Count = " + taskManagerCount);
  System.out.println("\tJar Path = " + localJarPath.toUri().getPath());
  System.out.println("\tConfiguration file = " + confPath.toUri().getPath());
  System.out.println("\tJobManager memory = " + jmMemory);
  System.out.println("\tTaskManager memory = " + tmMemory);
  System.out.println("\tTaskManager cores = " + tmCores);
  YarnClientApplication app=yarnClient.createApplication();
  GetNewApplicationResponse appResponse=app.getNewApplicationResponse();
  Resource maxRes=appResponse.getMaximumResourceCapability();
  if (tmMemory > maxRes.getMemory() || tmCores > maxRes.getVirtualCores()) {
    LOG.fatal("The cluster does not have the requested resources for the TaskManagers available!\n" + "Maximum Memory: " + maxRes.getMemory() + ", Maximum Cores: "+ tmCores);
    yarnClient.stop();
    System.exit(1);
  }
  if (jmMemory > maxRes.getMemory()) {
    LOG.fatal("The cluster does not have the requested resources for the JobManager available!\n" + "Maximum Memory: " + maxRes.getMemory());
    yarnClient.stop();
    System.exit(1);
  }
  final String javaOpts=GlobalConfiguration.getString(ConfigConstants.STRATOSPHERE_JVM_OPTIONS,"");
  ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);
  String amCommand="$JAVA_HOME/bin/java" + " -Xmx" + Utils.calculateHeapSize(jmMemory) + "M "+ javaOpts;
  if (hasLog4j) {
    amCommand+=" -Dlog.file=\"" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + "/jobmanager-log4j.log\" -Dlog4j.configuration=file:log4j.properties";
  }
  amCommand+=" eu.stratosphere.yarn.ApplicationMaster" + " " + " 1>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + "/jobmanager-stdout.log"+ " 2>"+ ApplicationConstants.LOG_DIR_EXPANSION_VAR+ "/jobmanager-stderr.log";
  amContainer.setCommands(Collections.singletonList(amCommand));
  System.err.println("amCommand=" + amCommand);
  ApplicationSubmissionContext appContext=app.getApplicationSubmissionContext();
  final ApplicationId appId=appContext.getApplicationId();
  LocalResource appMasterJar=Records.newRecord(LocalResource.class);
  LocalResource stratosphereConf=Records.newRecord(LocalResource.class);
  Path remotePathJar=Utils.setupLocalResource(conf,fs,appId.toString(),localJarPath,appMasterJar,fs.getHomeDirectory());
  Path remotePathConf=Utils.setupLocalResource(conf,fs,appId.toString(),confPath,stratosphereConf,fs.getHomeDirectory());
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>(2);
  localResources.put("stratosphere.jar",appMasterJar);
  localResources.put("stratosphere-conf.yaml",stratosphereConf);
  final Path[] paths=new Path[3 + shipFiles.size()];
  StringBuffer envShipFileList=new StringBuffer();
  for (int i=0; i < shipFiles.size(); i++) {
    File shipFile=shipFiles.get(i);
    LocalResource shipResources=Records.newRecord(LocalResource.class);
    Path shipLocalPath=new Path("file://" + shipFile.getAbsolutePath());
    paths[3 + i]=Utils.setupLocalResource(conf,fs,appId.toString(),shipLocalPath,shipResources,fs.getHomeDirectory());
    localResources.put(shipFile.getName(),shipResources);
    envShipFileList.append(paths[3 + i]);
    if (i + 1 < shipFiles.size()) {
      envShipFileList.append(',');
    }
  }
  paths[0]=remotePathJar;
  paths[1]=remotePathConf;
  paths[2]=new Path(fs.getHomeDirectory(),".stratosphere/" + appId.toString() + "/");
  FsPermission permission=new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL);
  fs.setPermission(paths[2],permission);
  Utils.setTokensFor(amContainer,paths,this.conf);
  amContainer.setLocalResources(localResources);
  fs.close();
  Map<String,String> appMasterEnv=new HashMap<String,String>();
  Utils.setupEnv(conf,appMasterEnv);
  appMasterEnv.put(Client.ENV_TM_COUNT,String.valueOf(taskManagerCount));
  appMasterEnv.put(Client.ENV_TM_CORES,String.valueOf(tmCores));
  appMasterEnv.put(Client.ENV_TM_MEMORY,String.valueOf(tmMemory));
  appMasterEnv.put(Client.STRATOSPHERE_JAR_PATH,remotePathJar.toString());
  appMasterEnv.put(Client.ENV_APP_ID,appId.toString());
  appMasterEnv.put(Client.ENV_CLIENT_HOME_DIR,fs.getHomeDirectory().toString());
  appMasterEnv.put(Client.ENV_CLIENT_SHIP_FILES,envShipFileList.toString());
  appMasterEnv.put(Client.ENV_CLIENT_USERNAME,UserGroupInformation.getCurrentUser().getShortUserName());
  amContainer.setEnvironment(appMasterEnv);
  Resource capability=Records.newRecord(Resource.class);
  capability.setMemory(jmMemory);
  capability.setVirtualCores(1);
  appContext.setApplicationName("Stratosphere");
  appContext.setAMContainerSpec(amContainer);
  appContext.setResource(capability);
  appContext.setQueue(queue);
  final File addrFile=new File(confDirPath + CliFrontend.JOBMANAGER_ADDRESS_FILE);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      try {
        LOG.info("Killing the Stratosphere-YARN application.");
        yarnClient.killApplication(appId);
        LOG.info("Deleting files in " + paths[2]);
        FileSystem shutFS=FileSystem.get(conf);
        shutFS.delete(paths[2],true);
        shutFS.close();
      }
 catch (      Exception e) {
        LOG.warn("Exception while killing the YARN application",e);
      }
      try {
        addrFile.delete();
      }
 catch (      Exception e) {
        LOG.warn("Exception while deleting the jobmanager address file",e);
      }
      LOG.info("YARN Client is shutting down");
      yarnClient.stop();
    }
  }
);
  LOG.info("Submitting application master " + appId);
  yarnClient.submitApplication(appContext);
  ApplicationReport appReport=yarnClient.getApplicationReport(appId);
  YarnApplicationState appState=appReport.getYarnApplicationState();
  boolean told=false;
  char[] el={'/','|','\\','-'};
  int i=0;
  while (appState != YarnApplicationState.FINISHED && appState != YarnApplicationState.KILLED && appState != YarnApplicationState.FAILED) {
    if (!told && appState == YarnApplicationState.RUNNING) {
      System.err.println("Stratosphere JobManager is now running on " + appReport.getHost() + ":"+ jmPort);
      System.err.println("JobManager Web Interface: " + appReport.getTrackingUrl());
      PrintWriter out=new PrintWriter(addrFile);
      out.println(appReport.getHost() + ":" + jmPort);
      out.close();
      addrFile.setReadable(true,false);
      told=true;
    }
    if (!told) {
      System.err.print(el[i++] + "\r");
      if (i == el.length) {
        i=0;
      }
      Thread.sleep(500);
    }
 else {
      Thread.sleep(5000);
    }
    appReport=yarnClient.getApplicationReport(appId);
    appState=appReport.getYarnApplicationState();
  }
  LOG.info("Application " + appId + " finished with"+ " state "+ appState+ " at "+ appReport.getFinishTime());
  if (appState == YarnApplicationState.FAILED || appState == YarnApplicationState.KILLED) {
    LOG.warn("Application failed. Diagnostics " + appReport.getDiagnostics());
  }
}
