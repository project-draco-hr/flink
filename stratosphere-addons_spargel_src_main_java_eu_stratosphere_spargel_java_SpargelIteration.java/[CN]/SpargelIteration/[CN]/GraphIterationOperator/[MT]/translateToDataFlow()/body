{
  final String name=(getName() != null) ? getName() : "Vertex-centric iteration (" + updateFunction + " | "+ messagingFunction+ ")";
  final int[] zeroKeyPos=new int[]{0};
  final DeltaIteration iteration=new DeltaIteration(0,name);
  iteration.setMaximumNumberOfIterations(maximumNumberOfIterations);
  final PlanCogroupOperator<EdgeType,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,Message>> messenger=new PlanCogroupOperator<EdgeType,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,Message>>(messagingFunction,zeroKeyPos,zeroKeyPos,"Messaging",edges.getType(),getInput1Type(),messageType);
  messenger.setSecondInput(iteration.getWorkset());
  final PlanCogroupOperator<Tuple2<VertexKey,Message>,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>> updater=new PlanCogroupOperator<Tuple2<VertexKey,Message>,Tuple2<VertexKey,VertexValue>,Tuple2<VertexKey,VertexValue>>(updateFunction,zeroKeyPos,zeroKeyPos,"Vertex State Updates",messageType,getInput1Type(),getInput1Type());
  updater.setFirstInput(messenger);
  updater.setSecondInput(iteration.getSolutionSet());
  iteration.setSolutionSetDelta(updater);
  iteration.setNextWorkset(updater);
  return new BinaryNodeTranslation(iteration){
    @Override public void setInput1(    Operator op){
      iteration.setFirstInput(op);
      iteration.setSecondInput(op);
    }
    @Override public void setInput2(    Operator op){
      messenger.setFirstInput(op);
    }
  }
;
}
