{
  final int PAIRS=10000000;
  final Comparator<TestData.Key> keyComparator=new TestData.KeyComparator();
  MockRecordReader reader=new MockRecordReader();
  LOG.debug("Initializing sortmerger...");
  @SuppressWarnings("unchecked") SortMerger merger=new UnilateralSortMerger(memoryManager,ioManager,1024 * 1024 * 64,16,new Comparator[]{keyComparator},new int[]{0},new Class[]{TestData.Key.class},reader,parentTask,0.7f);
  LOG.debug("Emitting data...");
  TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.FIX_LENGTH);
  PactRecord rec=new PactRecord();
  System.out.println("Starting large sort test...");
  long start=System.currentTimeMillis();
  for (int i=0, percent=0, nextPercent=PAIRS / 20; i < PAIRS; i++) {
    reader.emit(generator.next(rec));
    if (i == nextPercent) {
      percent+=5;
      nextPercent+=PAIRS / 20;
      System.out.println(percent + "% records emitted...");
    }
  }
  reader.close();
  System.out.println("100% records emitted...");
  System.out.println("Final merge phase starting...");
  ReadingIterator<PactRecord> iterator=merger.getIterator();
  LOG.debug("Checking results...");
  int pairsRead=1;
  int nextStep=PAIRS / 20;
  PactRecord rec1=new PactRecord();
  PactRecord rec2=new PactRecord();
  rec1=iterator.next(rec1);
  while ((rec2=iterator.next(rec2)) != null) {
    final Key k1=rec1.getField(0,TestData.Key.class);
    final Key k2=rec2.getField(0,TestData.Key.class);
    pairsRead++;
    Assert.assertTrue(keyComparator.compare(k1,k2) <= 0);
    PactRecord tmp=rec1;
    rec1=rec2;
    k1.setKey(k2.getKey());
    rec2=tmp;
    if (pairsRead == nextStep) {
      nextStep+=PAIRS / 20;
      System.out.println((pairsRead * 100 / PAIRS) + "% pairs merged and read.");
    }
  }
  System.out.println("...Done");
  Assert.assertEquals("Not all pairs were read back in.",PAIRS,pairsRead);
  merger.close();
  long end=System.currentTimeMillis();
  long diff=end - start;
  long secs=diff / 1000;
  LOG.debug("sorting a workload of " + PAIRS + " pairs took "+ secs+ " seconds.");
}
