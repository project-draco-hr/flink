{
  final Comparator<TestData.Key> keyComparator=new TestData.KeyComparator();
  MockRecordReader reader=new MockRecordReader();
  LOG.debug("Initializing sortmerger...");
  @SuppressWarnings("unchecked") SortMerger merger=new UnilateralSortMerger(memoryManager,ioManager,16 * 1024 * 1024,1024 * 1024 * 4,1,2,new Comparator[]{keyComparator},new int[]{0},new Class[]{TestData.Key.class},reader,parentTask,0.7f);
  LOG.debug("Emitting data...");
  TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.FIX_LENGTH);
  PactRecord rec=new PactRecord();
  for (int i=0; i < NUM_PAIRS; i++) {
    reader.emit(generator.next(rec));
  }
  reader.close();
  MutableObjectIterator<PactRecord> iterator=merger.getIterator();
  LOG.debug("Checking results...");
  int pairsEmitted=1;
  PactRecord rec1=new PactRecord();
  PactRecord rec2=new PactRecord();
  rec1=iterator.next(rec1);
  while ((rec2=iterator.next(rec2)) != null) {
    final Key k1=rec1.getField(0,TestData.Key.class);
    final Key k2=rec2.getField(0,TestData.Key.class);
    pairsEmitted++;
    Assert.assertTrue(keyComparator.compare(k1,k2) <= 0);
    PactRecord tmp=rec1;
    rec1=rec2;
    k1.setKey(k2.getKey());
    rec2=tmp;
  }
  Assert.assertTrue(NUM_PAIRS == pairsEmitted);
  merger.close();
}
