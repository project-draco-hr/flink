{
  final ByteBuffer buffer=this.currentBuffer;
  long vid=0;
  long[] neighbors=target.getNeighbors();
  int numNeighbors=0;
  long current=0;
  while (true) {
    while (buffer.hasRemaining()) {
      int next=buffer.get();
      if (next == '\n') {
        if (neighbors.length < numNeighbors + 1) {
          long[] a=new long[Math.max(numNeighbors * 2,2)];
          System.arraycopy(neighbors,0,a,0,numNeighbors);
          neighbors=a;
        }
        neighbors[numNeighbors++]=current;
        current=0;
        long min=vid;
        for (int i=0; i < numNeighbors; i++) {
          min=Math.min(min,neighbors[i]);
        }
        target.setVid(vid);
        target.setCid(min);
        target.setNeighbors(neighbors,numNeighbors);
        final LongPair pair=this.pair;
        final TypeAccessorsV2<LongPair> serializer=this.serializer;
        final DataOutputViewV2 outView=this.targetView;
        pair.setValue(min);
        for (int i=0; i < numNeighbors; i++) {
          pair.setKey(neighbors[i]);
          serializer.serialize(pair,outView);
        }
        return true;
      }
 else       if (next == ',') {
        if (neighbors.length < numNeighbors + 1) {
          long[] a=new long[Math.max(numNeighbors * 2,2)];
          System.arraycopy(neighbors,0,a,0,numNeighbors);
          neighbors=a;
        }
        neighbors[numNeighbors++]=current;
        current=0;
      }
 else       if (next == '|') {
        vid=current;
        current=0;
      }
 else {
        current*=10;
        current+=(next - '0');
      }
    }
    buffer.clear();
    int numRead=this.channel.read(buffer);
    if (numRead == -1) {
      this.channel.close();
      return false;
    }
    buffer.flip();
  }
}
