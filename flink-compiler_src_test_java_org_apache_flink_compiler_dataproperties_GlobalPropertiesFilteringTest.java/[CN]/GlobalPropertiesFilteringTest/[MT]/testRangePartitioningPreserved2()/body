{
  SingleInputSemanticProperties sprops=new SingleInputSemanticProperties();
  SemanticPropUtil.getSemanticPropsSingleFromString(sprops,new String[]{"1->3; 2->0; 5->1"},null,null,tupleInfo,tupleInfo);
  Ordering o=new Ordering();
  o.appendOrdering(1,IntValue.class,Order.ASCENDING);
  o.appendOrdering(5,LongValue.class,Order.DESCENDING);
  o.appendOrdering(2,StringValue.class,Order.ASCENDING);
  GlobalProperties gprops=new GlobalProperties();
  gprops.setRangePartitioned(o);
  GlobalProperties result=gprops.filterBySemanticProperties(sprops,0);
  assertEquals(PartitioningProperty.RANGE_PARTITIONED,result.getPartitioning());
  FieldList pFields=result.getPartitioningFields();
  assertEquals(3,pFields.size());
  assertEquals(3,pFields.get(0).intValue());
  assertEquals(1,pFields.get(1).intValue());
  assertEquals(0,pFields.get(2).intValue());
  Ordering pOrder=result.getPartitioningOrdering();
  assertEquals(3,pOrder.getNumberOfFields());
  assertEquals(3,pOrder.getFieldNumber(0).intValue());
  assertEquals(1,pOrder.getFieldNumber(1).intValue());
  assertEquals(0,pOrder.getFieldNumber(2).intValue());
  assertEquals(Order.ASCENDING,pOrder.getOrder(0));
  assertEquals(Order.DESCENDING,pOrder.getOrder(1));
  assertEquals(Order.ASCENDING,pOrder.getOrder(2));
  assertEquals(IntValue.class,pOrder.getType(0));
  assertEquals(LongValue.class,pOrder.getType(1));
  assertEquals(StringValue.class,pOrder.getType(2));
}
