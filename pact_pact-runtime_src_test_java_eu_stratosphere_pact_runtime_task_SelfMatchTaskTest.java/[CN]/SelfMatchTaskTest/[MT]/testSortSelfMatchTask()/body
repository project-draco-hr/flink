{
  int keyCnt=10;
  int valCnt=35;
  super.initEnvironment(6 * 1024 * 1024);
  super.addInput(new RegularlyGeneratedInputGenerator(keyCnt,valCnt,false));
  super.addOutput(outList);
  SelfMatchTask testTask=new SelfMatchTask();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.SORT_SELF_NESTEDLOOP);
  super.getTaskConfig().setMemorySize(6 * 1024 * 1024);
  super.getTaskConfig().setNumFilehandles(4);
  super.getTaskConfig().setLocalStrategyKeyTypes(0,new int[]{0});
  super.getTaskConfig().setLocalStrategyKeyTypes(new Class[]{PactInteger.class});
  super.registerTask(testTask,MockMatchStub.class);
  try {
    testTask.invoke();
  }
 catch (  Exception e) {
    LOG.debug(e);
    e.printStackTrace();
    Assert.fail("Invoke method caused exception.");
  }
  int expCnt=keyCnt * (valCnt * valCnt);
  Assert.assertTrue("Resultset size was " + outList.size() + ". Expected was "+ expCnt,outList.size() == expCnt);
  HashMap<Integer,Integer> keyValCntMap=new HashMap<Integer,Integer>(keyCnt);
  for (  PactRecord record : outList) {
    Integer key=record.getField(0,PactInteger.class).getValue();
    if (!keyValCntMap.containsKey(key)) {
      keyValCntMap.put(key,1);
    }
 else {
      keyValCntMap.put(key,keyValCntMap.get(key) + 1);
    }
  }
  for (  Integer key : keyValCntMap.keySet()) {
    Assert.assertTrue("Invalid value count for key: " + key + ". Value count was: "+ keyValCntMap.get(key)+ " Expected was: "+ (valCnt * valCnt),keyValCntMap.get(key).intValue() == (valCnt * valCnt));
  }
  outList.clear();
}
