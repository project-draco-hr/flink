{
  MetricRegistry registry=null;
  DatagramSocketReceiver receiver=null;
  Thread receiverThread=null;
  long timeout=5000;
  long joinTimeout=30000;
  String histogramName="histogram";
  try {
    receiver=new DatagramSocketReceiver();
    receiverThread=new Thread(receiver);
    receiverThread.start();
    int port=receiver.getPort();
    Configuration config=new Configuration();
    config.setString(ConfigConstants.METRICS_REPORTERS_LIST,"test");
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,StatsDReporter.class.getName());
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX,"1 SECONDS");
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.host","localhost");
    config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.port","" + port);
    registry=new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config));
    TaskManagerMetricGroup metricGroup=new TaskManagerMetricGroup(registry,"localhost","tmId");
    TestingHistogram histogram=new TestingHistogram();
    metricGroup.histogram(histogramName,histogram);
    receiver.waitUntilNumLines(11,timeout);
    Set<String> lines=receiver.getLines();
    String prefix=metricGroup.getMetricIdentifier(histogramName);
    Set<String> expectedLines=new HashSet<>();
    expectedLines.add(prefix + ".count:1|g");
    expectedLines.add(prefix + ".mean:3.0|g");
    expectedLines.add(prefix + ".min:6|g");
    expectedLines.add(prefix + ".max:5|g");
    expectedLines.add(prefix + ".stddev:4.0|g");
    expectedLines.add(prefix + ".p75:0.75|g");
    expectedLines.add(prefix + ".p98:0.98|g");
    expectedLines.add(prefix + ".p99:0.99|g");
    expectedLines.add(prefix + ".p999:0.999|g");
    expectedLines.add(prefix + ".p95:0.95|g");
    expectedLines.add(prefix + ".p50:0.5|g");
    assertEquals(expectedLines,lines);
  }
  finally {
    if (registry != null) {
      registry.shutdown();
    }
    if (receiver != null) {
      receiver.stop();
    }
    if (receiverThread != null) {
      receiverThread.join(joinTimeout);
    }
  }
}
