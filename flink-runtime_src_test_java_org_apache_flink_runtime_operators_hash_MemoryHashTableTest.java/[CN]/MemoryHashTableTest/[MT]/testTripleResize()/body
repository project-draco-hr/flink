{
  try {
    final int NUM_MEM_PAGES=30 * NUM_PAIRS / PAGE_SIZE;
    final IntPair[] pairs=getRandomizedIntPairs(NUM_PAIRS,rnd);
    List<MemorySegment> memory=getMemory(NUM_MEM_PAGES,PAGE_SIZE);
    CompactingHashTable<IntPair> table=new CompactingHashTable<IntPair>(serializer,comparator,memory);
    table.open();
    for (int i=0; i < NUM_PAIRS; i++) {
      table.insert(pairs[i]);
    }
    AbstractHashTableProber<IntPair,IntPair> prober=table.getProber(comparator,pairComparator);
    IntPair target=new IntPair();
    for (int i=0; i < NUM_PAIRS; i++) {
      assertNotNull(prober.getMatchFor(pairs[i],target));
      assertEquals(pairs[i].getValue(),target.getValue());
    }
    memory.addAll(getMemory(ADDITIONAL_MEM,PAGE_SIZE));
    Boolean b=Whitebox.<Boolean>invokeMethod(table,"resizeHashTable");
    assertTrue(b.booleanValue());
    for (int i=0; i < NUM_PAIRS; i++) {
      assertNotNull(pairs[i].getKey() + " " + pairs[i].getValue(),prober.getMatchFor(pairs[i],target));
      assertEquals(pairs[i].getValue(),target.getValue());
    }
    memory.addAll(getMemory(ADDITIONAL_MEM,PAGE_SIZE));
    b=Whitebox.<Boolean>invokeMethod(table,"resizeHashTable");
    assertTrue(b.booleanValue());
    for (int i=0; i < NUM_PAIRS; i++) {
      assertNotNull(pairs[i].getKey() + " " + pairs[i].getValue(),prober.getMatchFor(pairs[i],target));
      assertEquals(pairs[i].getValue(),target.getValue());
    }
    memory.addAll(getMemory(2 * ADDITIONAL_MEM,PAGE_SIZE));
    b=Whitebox.<Boolean>invokeMethod(table,"resizeHashTable");
    assertTrue(b.booleanValue());
    for (int i=0; i < NUM_PAIRS; i++) {
      assertNotNull(pairs[i].getKey() + " " + pairs[i].getValue(),prober.getMatchFor(pairs[i],target));
      assertEquals(pairs[i].getValue(),target.getValue());
    }
    table.close();
    assertEquals("Memory lost",NUM_MEM_PAGES + 4 * ADDITIONAL_MEM,table.getFreeMemory().size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error: " + e.getMessage());
  }
}
