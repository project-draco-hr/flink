{
  try {
    final int NUM_MEM_PAGES=(SIZE * NUM_LISTS / PAGE_SIZE);
    final IntList[] lists=getRandomizedIntLists(NUM_LISTS,rnd);
    List<MemorySegment> memory=getMemory(NUM_MEM_PAGES,PAGE_SIZE);
    CompactingHashTable<IntList> table=new CompactingHashTable<IntList>(serializerV,comparatorV,memory);
    table.open();
    for (int i=0; i < NUM_LISTS; i++) {
      try {
        table.insert(lists[i]);
      }
 catch (      Exception e) {
        throw e;
      }
    }
    AbstractHashTableProber<IntList,IntList> prober=table.getProber(comparatorV,pairComparatorV);
    IntList target=new IntList();
    for (int i=0; i < NUM_LISTS; i++) {
      assertNotNull(prober.getMatchFor(lists[i],target));
      assertArrayEquals(lists[i].getValue(),target.getValue());
    }
    memory.addAll(getMemory(ADDITIONAL_MEM,PAGE_SIZE));
    Boolean b=Whitebox.<Boolean>invokeMethod(table,"resizeHashTable");
    assertTrue(b.booleanValue());
    for (int i=0; i < NUM_LISTS; i++) {
      assertNotNull(prober.getMatchFor(lists[i],target));
      assertArrayEquals(lists[i].getValue(),target.getValue());
    }
    final IntList[] overwriteLists=getRandomizedIntLists(NUM_LISTS,rnd);
    IntList tempHolder=new IntList();
    for (int i=0; i < NUM_LISTS; i++) {
      table.insertOrReplaceRecord(overwriteLists[i],tempHolder);
    }
    Field list=Whitebox.getField(CompactingHashTable.class,"partitions");
    @SuppressWarnings("unchecked") ArrayList<InMemoryPartition<IntList>> partitions=(ArrayList<InMemoryPartition<IntList>>)list.get(table);
    int numPartitions=partitions.size();
    for (int i=0; i < numPartitions; i++) {
      Whitebox.invokeMethod(table,"compactPartition",i);
    }
    memory.addAll(getMemory(2 * ADDITIONAL_MEM,PAGE_SIZE));
    b=Whitebox.<Boolean>invokeMethod(table,"resizeHashTable");
    assertTrue(b.booleanValue());
    for (int i=0; i < NUM_LISTS; i++) {
      assertNotNull("" + i,prober.getMatchFor(overwriteLists[i],target));
      assertArrayEquals(overwriteLists[i].getValue(),target.getValue());
    }
    table.close();
    assertEquals("Memory lost",NUM_MEM_PAGES + 3 * ADDITIONAL_MEM,table.getFreeMemory().size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error: " + e.getMessage());
  }
}
