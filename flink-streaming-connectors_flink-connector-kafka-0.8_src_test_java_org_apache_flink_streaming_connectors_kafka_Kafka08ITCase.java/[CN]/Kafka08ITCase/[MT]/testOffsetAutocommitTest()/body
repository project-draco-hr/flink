{
  final String topicName="testOffsetAutocommit";
  final int parallelism=3;
  createTestTopic(topicName,parallelism,1);
  StreamExecutionEnvironment env1=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flinkPort);
  env1.getConfig().disableSysoutLogging();
  env1.getConfig().setRestartStrategy(RestartStrategies.noRestart());
  env1.setParallelism(parallelism);
  StreamExecutionEnvironment env2=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flinkPort);
  env2.getConfig().disableSysoutLogging();
  env2.getConfig().setRestartStrategy(RestartStrategies.noRestart());
  env2.setParallelism(parallelism);
  writeSequence(env1,topicName,100,parallelism);
  Properties readProps=new Properties();
  readProps.putAll(standardProps);
  readProps.setProperty("auto.commit.interval.ms","500");
  readSequence(env2,readProps,parallelism,topicName,100,0);
  CuratorFramework curatorFramework=((KafkaTestEnvironmentImpl)kafkaServer).createCuratorClient();
  long o1=ZookeeperOffsetHandler.getOffsetFromZooKeeper(curatorFramework,standardProps.getProperty("group.id"),topicName,0);
  long o2=ZookeeperOffsetHandler.getOffsetFromZooKeeper(curatorFramework,standardProps.getProperty("group.id"),topicName,1);
  long o3=ZookeeperOffsetHandler.getOffsetFromZooKeeper(curatorFramework,standardProps.getProperty("group.id"),topicName,2);
  LOG.info("Got final offsets from zookeeper o1={}, o2={}, o3={}",o1,o2,o3);
  boolean atLeastOneOffsetSet=(o1 > 0 && o1 <= 100) || (o2 > 0 && o2 <= 100) || (o3 > 0 && o3 <= 100);
  assertTrue("Expecting at least one offset to be set o1=" + o1 + " o2="+ o2+ " o3="+ o3,atLeastOneOffsetSet);
  deleteTestTopic(topicName);
}
