{
  final String topicName="testOffsetInZK";
  final int parallelism=3;
  createTestTopic(topicName,parallelism,1);
  StreamExecutionEnvironment env1=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flinkPort);
  env1.getConfig().disableSysoutLogging();
  env1.enableCheckpointing(50);
  env1.getConfig().setRestartStrategy(RestartStrategies.noRestart());
  env1.setParallelism(parallelism);
  StreamExecutionEnvironment env2=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flinkPort);
  env2.getConfig().disableSysoutLogging();
  env2.enableCheckpointing(50);
  env2.getConfig().setRestartStrategy(RestartStrategies.noRestart());
  env2.setParallelism(parallelism);
  StreamExecutionEnvironment env3=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flinkPort);
  env3.getConfig().disableSysoutLogging();
  env3.enableCheckpointing(50);
  env3.getConfig().setRestartStrategy(RestartStrategies.noRestart());
  env3.setParallelism(parallelism);
  writeSequence(env1,topicName,100,parallelism);
  readSequence(env2,standardProps,parallelism,topicName,100,0);
  CuratorFramework curatorClient=((KafkaTestEnvironmentImpl)kafkaServer).createCuratorClient();
  long o1=ZookeeperOffsetHandler.getOffsetFromZooKeeper(curatorClient,standardProps.getProperty("group.id"),topicName,0);
  long o2=ZookeeperOffsetHandler.getOffsetFromZooKeeper(curatorClient,standardProps.getProperty("group.id"),topicName,1);
  long o3=ZookeeperOffsetHandler.getOffsetFromZooKeeper(curatorClient,standardProps.getProperty("group.id"),topicName,2);
  LOG.info("Got final offsets from zookeeper o1={}, o2={}, o3={}",o1,o2,o3);
  assertTrue(o1 == FlinkKafkaConsumerBase.OFFSET_NOT_SET || (o1 >= 0 && o1 <= 100));
  assertTrue(o2 == FlinkKafkaConsumerBase.OFFSET_NOT_SET || (o2 >= 0 && o2 <= 100));
  assertTrue(o3 == FlinkKafkaConsumerBase.OFFSET_NOT_SET || (o3 >= 0 && o3 <= 100));
  LOG.info("Manipulating offsets");
  ZookeeperOffsetHandler.setOffsetInZooKeeper(curatorClient,standardProps.getProperty("group.id"),topicName,0,49);
  ZookeeperOffsetHandler.setOffsetInZooKeeper(curatorClient,standardProps.getProperty("group.id"),topicName,1,49);
  ZookeeperOffsetHandler.setOffsetInZooKeeper(curatorClient,standardProps.getProperty("group.id"),topicName,2,49);
  curatorClient.close();
  readSequence(env3,standardProps,parallelism,topicName,50,50);
  deleteTestTopic(topicName);
}
