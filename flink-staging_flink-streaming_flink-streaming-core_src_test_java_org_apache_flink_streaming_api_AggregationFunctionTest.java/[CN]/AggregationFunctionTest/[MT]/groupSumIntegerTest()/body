{
  List<Tuple2<Integer,Integer>> expectedGroupSumList=new ArrayList<>();
  List<Tuple2<Integer,Integer>> expectedGroupMinList=new ArrayList<>();
  List<Tuple2<Integer,Integer>> expectedGroupMaxList=new ArrayList<>();
  int groupedSum0=0;
  int groupedSum1=0;
  int groupedSum2=0;
  for (int i=0; i < 9; i++) {
    int groupedSum;
switch (i % 3) {
case 0:
      groupedSum=groupedSum0+=i;
    break;
case 1:
  groupedSum=groupedSum1+=i;
break;
default :
groupedSum=groupedSum2+=i;
break;
}
expectedGroupSumList.add(new Tuple2<>(i % 3,groupedSum));
expectedGroupMinList.add(new Tuple2<>(i % 3,i % 3));
expectedGroupMaxList.add(new Tuple2<>(i % 3,i));
}
TypeInformation<Tuple2<Integer,Integer>> typeInfo=TypeExtractor.getForObject(new Tuple2<>(0,0));
ExecutionConfig config=new ExecutionConfig();
KeySelector<Tuple2<Integer,Integer>,?> keySelector=KeySelectorUtil.getSelectorForKeys(new Keys.ExpressionKeys<>(new int[]{0},typeInfo),typeInfo,config);
ReduceFunction<Tuple2<Integer,Integer>> sumFunction=new SumAggregator<>(1,typeInfo,config);
ReduceFunction<Tuple2<Integer,Integer>> minFunction=new ComparableAggregator<>(1,typeInfo,AggregationType.MIN,config);
ReduceFunction<Tuple2<Integer,Integer>> maxFunction=new ComparableAggregator<>(1,typeInfo,AggregationType.MAX,config);
List<Tuple2<Integer,Integer>> groupedSumList=MockContext.createAndExecute(new StreamGroupedReduce<>(sumFunction,keySelector,typeInfo),getInputList());
List<Tuple2<Integer,Integer>> groupedMinList=MockContext.createAndExecute(new StreamGroupedReduce<>(minFunction,keySelector,typeInfo),getInputList());
List<Tuple2<Integer,Integer>> groupedMaxList=MockContext.createAndExecute(new StreamGroupedReduce<>(maxFunction,keySelector,typeInfo),getInputList());
assertEquals(expectedGroupSumList,groupedSumList);
assertEquals(expectedGroupMinList,groupedMinList);
assertEquals(expectedGroupMaxList,groupedMaxList);
}
