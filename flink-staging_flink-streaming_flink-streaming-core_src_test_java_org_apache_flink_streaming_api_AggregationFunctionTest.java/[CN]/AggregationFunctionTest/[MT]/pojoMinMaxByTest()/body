{
  List<MyPojo3> maxByFirstExpected=ImmutableList.of(new MyPojo3(0,0),new MyPojo3(1,1),new MyPojo3(2,2),new MyPojo3(2,2),new MyPojo3(2,2),new MyPojo3(2,2),new MyPojo3(2,2),new MyPojo3(2,2),new MyPojo3(2,2));
  List<MyPojo3> maxByLastExpected=ImmutableList.of(new MyPojo3(0,0),new MyPojo3(1,1),new MyPojo3(2,2),new MyPojo3(2,2),new MyPojo3(2,2),new MyPojo3(2,5),new MyPojo3(2,5),new MyPojo3(2,5),new MyPojo3(2,8));
  List<MyPojo3> minByFirstExpected=ImmutableList.of(new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,0));
  List<MyPojo3> minByLastExpected=ImmutableList.of(new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,0),new MyPojo3(0,3),new MyPojo3(0,3),new MyPojo3(0,3),new MyPojo3(0,6),new MyPojo3(0,6),new MyPojo3(0,6));
  TypeInformation<MyPojo3> typeInfo=TypeExtractor.getForObject(new MyPojo3(0,0));
  ExecutionConfig config=new ExecutionConfig();
  KeySelector<MyPojo3,?> keySelector=KeySelectorUtil.getSelectorForKeys(new Keys.ExpressionKeys<>(new String[]{"f0"},typeInfo),typeInfo,config);
  ReduceFunction<MyPojo3> maxByFunctionFirst=new ComparableAggregator<>("f1",typeInfo,AggregationType.MAXBY,true,config);
  ReduceFunction<MyPojo3> maxByFunctionLast=new ComparableAggregator<>("f1",typeInfo,AggregationType.MAXBY,false,config);
  ReduceFunction<MyPojo3> minByFunctionFirst=new ComparableAggregator<>("f1",typeInfo,AggregationType.MINBY,true,config);
  ReduceFunction<MyPojo3> minByFunctionLast=new ComparableAggregator<>("f1",typeInfo,AggregationType.MINBY,false,config);
  assertEquals(maxByFirstExpected,MockContext.createAndExecute(new StreamGroupedReduce<>(maxByFunctionFirst,keySelector),getInputByPojoList()));
  assertEquals(maxByLastExpected,MockContext.createAndExecute(new StreamGroupedReduce<>(maxByFunctionLast,keySelector),getInputByPojoList()));
  assertEquals(minByLastExpected,MockContext.createAndExecute(new StreamGroupedReduce<>(minByFunctionLast,keySelector),getInputByPojoList()));
  assertEquals(minByFirstExpected,MockContext.createAndExecute(new StreamGroupedReduce<>(minByFunctionFirst,keySelector),getInputByPojoList()));
}
