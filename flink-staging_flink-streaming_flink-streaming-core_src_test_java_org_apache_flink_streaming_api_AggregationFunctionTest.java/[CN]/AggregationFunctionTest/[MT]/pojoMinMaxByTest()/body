{
  ExecutionConfig config=new ExecutionConfig();
  TypeInformation<MyPojo> type1=TypeExtractor.getForObject(new MyPojo(0,0));
  ReduceFunction<MyPojo> maxByFunctionFirst=new ComparableAggregator<MyPojo>("f0",type1,AggregationType.MAXBY,true,config);
  ReduceFunction<MyPojo> maxByFunctionLast=new ComparableAggregator<MyPojo>("f0",type1,AggregationType.MAXBY,false,config);
  ReduceFunction<MyPojo> minByFunctionFirst=new ComparableAggregator<MyPojo>("f0",type1,AggregationType.MINBY,true,config);
  ReduceFunction<MyPojo> minByFunctionLast=new ComparableAggregator<MyPojo>("f0",type1,AggregationType.MINBY,false,config);
  List<MyPojo> maxByFirstExpected=new ArrayList<MyPojo>();
  maxByFirstExpected.add(new MyPojo(0,0));
  maxByFirstExpected.add(new MyPojo(1,1));
  maxByFirstExpected.add(new MyPojo(2,2));
  maxByFirstExpected.add(new MyPojo(2,2));
  maxByFirstExpected.add(new MyPojo(2,2));
  maxByFirstExpected.add(new MyPojo(2,2));
  maxByFirstExpected.add(new MyPojo(2,2));
  maxByFirstExpected.add(new MyPojo(2,2));
  maxByFirstExpected.add(new MyPojo(2,2));
  List<MyPojo> maxByLastExpected=new ArrayList<MyPojo>();
  maxByLastExpected.add(new MyPojo(0,0));
  maxByLastExpected.add(new MyPojo(1,1));
  maxByLastExpected.add(new MyPojo(2,2));
  maxByLastExpected.add(new MyPojo(2,2));
  maxByLastExpected.add(new MyPojo(2,2));
  maxByLastExpected.add(new MyPojo(2,5));
  maxByLastExpected.add(new MyPojo(2,5));
  maxByLastExpected.add(new MyPojo(2,5));
  maxByLastExpected.add(new MyPojo(2,8));
  List<MyPojo> minByFirstExpected=new ArrayList<MyPojo>();
  minByFirstExpected.add(new MyPojo(0,0));
  minByFirstExpected.add(new MyPojo(0,0));
  minByFirstExpected.add(new MyPojo(0,0));
  minByFirstExpected.add(new MyPojo(0,0));
  minByFirstExpected.add(new MyPojo(0,0));
  minByFirstExpected.add(new MyPojo(0,0));
  minByFirstExpected.add(new MyPojo(0,0));
  minByFirstExpected.add(new MyPojo(0,0));
  minByFirstExpected.add(new MyPojo(0,0));
  List<MyPojo> minByLastExpected=new ArrayList<MyPojo>();
  minByLastExpected.add(new MyPojo(0,0));
  minByLastExpected.add(new MyPojo(0,0));
  minByLastExpected.add(new MyPojo(0,0));
  minByLastExpected.add(new MyPojo(0,3));
  minByLastExpected.add(new MyPojo(0,3));
  minByLastExpected.add(new MyPojo(0,3));
  minByLastExpected.add(new MyPojo(0,6));
  minByLastExpected.add(new MyPojo(0,6));
  minByLastExpected.add(new MyPojo(0,6));
  assertEquals(maxByFirstExpected,MockContext.createAndExecute(new StreamReduce<MyPojo>(maxByFunctionFirst),getInputPojoList()));
  assertEquals(maxByLastExpected,MockContext.createAndExecute(new StreamReduce<MyPojo>(maxByFunctionLast),getInputPojoList()));
  assertEquals(minByLastExpected,MockContext.createAndExecute(new StreamReduce<MyPojo>(minByFunctionLast),getInputPojoList()));
  assertEquals(minByFirstExpected,MockContext.createAndExecute(new StreamReduce<MyPojo>(minByFunctionFirst),getInputPojoList()));
}
