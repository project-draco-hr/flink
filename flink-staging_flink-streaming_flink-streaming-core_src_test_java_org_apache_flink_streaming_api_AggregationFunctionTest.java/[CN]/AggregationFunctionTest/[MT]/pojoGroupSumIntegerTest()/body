{
  List<MyPojo> expectedGroupSumList=new ArrayList<>();
  List<MyPojo> expectedGroupMinList=new ArrayList<>();
  List<MyPojo> expectedGroupMaxList=new ArrayList<>();
  int groupedSum0=0;
  int groupedSum1=0;
  int groupedSum2=0;
  for (int i=0; i < 9; i++) {
    int groupedSum;
switch (i % 3) {
case 0:
      groupedSum=groupedSum0+=i;
    break;
case 1:
  groupedSum=groupedSum1+=i;
break;
default :
groupedSum=groupedSum2+=i;
break;
}
expectedGroupSumList.add(new MyPojo(i % 3,groupedSum));
expectedGroupMinList.add(new MyPojo(i % 3,i % 3));
expectedGroupMaxList.add(new MyPojo(i % 3,i));
}
TypeInformation<MyPojo> typeInfo=TypeExtractor.getForObject(new MyPojo(0,0));
ExecutionConfig config=new ExecutionConfig();
KeySelector<MyPojo,?> keySelector=KeySelectorUtil.getSelectorForKeys(new Keys.ExpressionKeys<>(new String[]{"f0"},typeInfo),typeInfo,config);
ReduceFunction<MyPojo> sumFunction=new SumAggregator<>("f1",typeInfo,config);
ReduceFunction<MyPojo> minFunction=new ComparableAggregator<>("f1",typeInfo,AggregationType.MIN,false,config);
ReduceFunction<MyPojo> maxFunction=new ComparableAggregator<>("f1",typeInfo,AggregationType.MAX,false,config);
List<MyPojo> groupedSumList=MockContext.createAndExecute(new StreamGroupedReduce<>(sumFunction,keySelector),getInputPojoList());
List<MyPojo> groupedMinList=MockContext.createAndExecute(new StreamGroupedReduce<>(minFunction,keySelector),getInputPojoList());
List<MyPojo> groupedMaxList=MockContext.createAndExecute(new StreamGroupedReduce<>(maxFunction,keySelector),getInputPojoList());
assertEquals(expectedGroupSumList,groupedSumList);
assertEquals(expectedGroupMinList,groupedMinList);
assertEquals(expectedGroupMaxList,groupedMaxList);
}
