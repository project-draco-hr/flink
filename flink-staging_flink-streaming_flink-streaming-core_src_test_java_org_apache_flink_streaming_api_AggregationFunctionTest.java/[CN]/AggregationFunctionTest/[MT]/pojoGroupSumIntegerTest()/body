{
  List<MyPojo> expectedSumList=new ArrayList<MyPojo>();
  List<MyPojo> expectedMinList=new ArrayList<MyPojo>();
  List<MyPojo> expectedMaxList=new ArrayList<MyPojo>();
  List<Integer> expectedSumList0=new ArrayList<Integer>();
  List<Integer> expectedMinList0=new ArrayList<Integer>();
  List<Integer> expectedMaxList0=new ArrayList<Integer>();
  List<MyPojo> expectedGroupSumList=new ArrayList<MyPojo>();
  List<MyPojo> expectedGroupMinList=new ArrayList<MyPojo>();
  List<MyPojo> expectedGroupMaxList=new ArrayList<MyPojo>();
  List<Integer> simpleInput=new ArrayList<Integer>();
  int groupedSum0=0;
  int groupedSum1=0;
  int groupedSum2=0;
  for (int i=0; i < 9; i++) {
    simpleInput.add(i);
    expectedSumList.add(new MyPojo(i % 3,(i + 1) * i / 2));
    expectedMinList.add(new MyPojo(i % 3,0));
    expectedMaxList.add(new MyPojo(i % 3,i));
    expectedSumList0.add((i + 1) * i / 2);
    expectedMaxList0.add(i);
    expectedMinList0.add(0);
    int groupedSum;
switch (i % 3) {
case 0:
      groupedSum=groupedSum0+=i;
    break;
case 1:
  groupedSum=groupedSum1+=i;
break;
default :
groupedSum=groupedSum2+=i;
break;
}
expectedGroupSumList.add(new MyPojo(i % 3,groupedSum));
expectedGroupMinList.add(new MyPojo(i % 3,i % 3));
expectedGroupMaxList.add(new MyPojo(i % 3,i));
}
TypeInformation<MyPojo> type1=TypeExtractor.getForObject(new MyPojo(0,0));
TypeInformation<Integer> type2=TypeExtractor.getForObject(0);
ExecutionConfig config=new ExecutionConfig();
ReduceFunction<MyPojo> sumFunction=SumAggregator.getSumFunction("f1",type1,config);
ReduceFunction<Integer> sumFunction0=SumAggregator.getSumFunction(0,Integer.class,type2);
ReduceFunction<MyPojo> minFunction=ComparableAggregator.getAggregator("f1",type1,AggregationType.MIN,false,config);
ReduceFunction<Integer> minFunction0=ComparableAggregator.getAggregator(0,type2,AggregationType.MIN);
ReduceFunction<MyPojo> maxFunction=ComparableAggregator.getAggregator("f1",type1,AggregationType.MAX,false,config);
ReduceFunction<Integer> maxFunction0=ComparableAggregator.getAggregator(0,type2,AggregationType.MAX);
List<MyPojo> sumList=MockContext.createAndExecute(new StreamReduce<MyPojo>(sumFunction),getInputPojoList());
List<MyPojo> minList=MockContext.createAndExecute(new StreamReduce<MyPojo>(minFunction),getInputPojoList());
List<MyPojo> maxList=MockContext.createAndExecute(new StreamReduce<MyPojo>(maxFunction),getInputPojoList());
TypeInformation<MyPojo> typeInfo=TypeExtractor.getForObject(new MyPojo(1,1));
KeySelector<MyPojo,?> keySelector=KeySelectorUtil.getSelectorForKeys(new Keys.ExpressionKeys<MyPojo>(new String[]{"f0"},typeInfo),typeInfo,config);
List<MyPojo> groupedSumList=MockContext.createAndExecute(new StreamGroupedReduce<MyPojo>(sumFunction,keySelector),getInputPojoList());
List<MyPojo> groupedMinList=MockContext.createAndExecute(new StreamGroupedReduce<MyPojo>(minFunction,keySelector),getInputPojoList());
List<MyPojo> groupedMaxList=MockContext.createAndExecute(new StreamGroupedReduce<MyPojo>(maxFunction,keySelector),getInputPojoList());
assertEquals(expectedSumList,sumList);
assertEquals(expectedMinList,minList);
assertEquals(expectedMaxList,maxList);
assertEquals(expectedGroupSumList,groupedSumList);
assertEquals(expectedGroupMinList,groupedMinList);
assertEquals(expectedGroupMaxList,groupedMaxList);
assertEquals(expectedSumList0,MockContext.createAndExecute(new StreamReduce<Integer>(sumFunction0),simpleInput));
assertEquals(expectedMinList0,MockContext.createAndExecute(new StreamReduce<Integer>(minFunction0),simpleInput));
assertEquals(expectedMaxList0,MockContext.createAndExecute(new StreamReduce<Integer>(maxFunction0),simpleInput));
}
