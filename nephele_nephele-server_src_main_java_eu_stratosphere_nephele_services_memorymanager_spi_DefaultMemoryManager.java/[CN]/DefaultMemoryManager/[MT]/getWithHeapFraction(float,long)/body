{
  Runtime r=Runtime.getRuntime();
  long maximum=r.maxMemory();
  long free=maximum - r.totalMemory() + r.freeMemory();
  long bytes=0;
  long tenuredFree=-1;
  List<MemoryPoolMXBean> poolBeans=ManagementFactory.getMemoryPoolMXBeans();
  for (  MemoryPoolMXBean bean : poolBeans) {
    if (bean.getName().equals("Tenured Gen")) {
      MemoryUsage usage=bean.getUsage();
      tenuredFree=usage.getMax() - usage.getUsed();
      break;
    }
  }
  long maxSegSize=(tenuredFree == -1) ? Integer.MAX_VALUE : (long)(tenuredFree * 0.8);
  if (maxSegSize > Integer.MAX_VALUE) {
    maxSegSize=Integer.MAX_VALUE;
  }
  if (minUnreserved + MIN_MEMORY_SIZE > free) {
    LOG.warn("System has low memory. Allocating the minimal memory manager will leave little memory. Expect performance degradation.");
    bytes=MIN_MEMORY_SIZE;
  }
 else {
    bytes=(long)(maximum * fraction);
    if (free - bytes < minUnreserved) {
      bytes=free - minUnreserved;
      LOG.warn("Memory manager attempt to allocate " + (long)(maximum * fraction) + " bytes would leave less than "+ minUnreserved+ " bytes free. Decreasing allocated memory to "+ bytes+ " bytes.");
    }
 else     if (bytes < MIN_MEMORY_SIZE) {
      bytes=MIN_MEMORY_SIZE;
      LOG.warn("Increasing memory manager space to the minimum of " + (MIN_MEMORY_SIZE / 1024) + "K.");
    }
  }
  LOG.info("Instantiating memory manager with a size of " + bytes + " bytes and a maximal chunk size of "+ maxSegSize+ " bytes.");
  return new DefaultMemoryManager(bytes,(int)maxSegSize);
}
