{
  if (segments == null) {
    return;
  }
  Iterator<T> segmentsIterator=segments.iterator();
synchronized (this.lock) {
    if (isShutDown) {
      throw new IllegalStateException("Memory manager has been shut down.");
    }
    AbstractInvokable lastOwner=null;
    ArrayList<DefaultMemorySegment> segsForOwner=null;
    while (segmentsIterator.hasNext()) {
      final DefaultMemorySegment defSeg=(DefaultMemorySegment)segmentsIterator.next();
      if (defSeg.isFree()) {
        continue;
      }
      final AbstractInvokable owner=defSeg.getSegmentDescriptor().owner;
      try {
        if (lastOwner == null || lastOwner != owner) {
          lastOwner=owner;
          segsForOwner=this.allocatedSegments.get(owner);
        }
        if (segsForOwner != null) {
          segsForOwner.remove(defSeg);
          if (segsForOwner.isEmpty()) {
            this.allocatedSegments.remove(owner);
          }
        }
      }
 catch (      Throwable t) {
        LOG.error("Error removing book-keeping reference to allocated memory segment.",t);
      }
 finally {
        internalRelease(defSeg);
      }
    }
  }
}
