{
  if (owner == null) {
    throw new IllegalArgumentException("The owner of a memory segment must not be null.");
  }
  if (segmentSize < 1) {
    throw new IllegalArgumentException();
  }
  if (numberOfSegments < 1) {
    throw new IllegalArgumentException();
  }
  ArrayList<MemorySegment> segments=new ArrayList<MemorySegment>(numberOfSegments);
  ArrayList<DefaultMemorySegment> segsByThisOwner=this.allocatedSegments.get(owner);
  if (segsByThisOwner == null) {
    segsByThisOwner=new ArrayList<DefaultMemorySegment>();
    this.allocatedSegments.put(owner,segsByThisOwner);
  }
synchronized (this.lock) {
    boolean allDone=false;
    try {
      for (int i=0; i < numberOfSegments; i++) {
        DefaultMemorySegment segment=internalAllocateStrict(owner,segmentSize);
        segments.add(segment);
        segsByThisOwner.add(segment);
      }
      allDone=true;
    }
  finally {
      if (!allDone) {
        for (int i=0; i < segments.size(); i++) {
          internalRelease((DefaultMemorySegment)(segments.get(i)));
        }
        for (int i=0; i < segments.size(); i++) {
          segsByThisOwner.remove(segments.get(i));
        }
      }
    }
  }
  return segments;
}
