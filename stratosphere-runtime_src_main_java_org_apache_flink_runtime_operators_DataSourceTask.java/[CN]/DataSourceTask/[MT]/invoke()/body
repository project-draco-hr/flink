{
  if (LOG.isDebugEnabled()) {
    LOG.debug(getLogString("Starting data source operator"));
  }
  final TypeSerializer<OT> serializer=this.serializerFactory.getSerializer();
  try {
    RegularPactTask.initOutputWriters(this.eventualOutputs);
    RegularPactTask.openChainedTasks(this.chainedTasks,this);
    final Iterator<InputSplit> splitIterator=getInputSplits();
    while (!this.taskCanceled && splitIterator.hasNext()) {
      final InputSplit split=splitIterator.next();
      OT record=serializer.createInstance();
      if (LOG.isDebugEnabled()) {
        LOG.debug(getLogString("Opening input split " + split.toString()));
      }
      final InputFormat<OT,InputSplit> format=this.format;
      format.open(split);
      if (LOG.isDebugEnabled()) {
        LOG.debug(getLogString("Starting to read input from split " + split.toString()));
      }
      try {
        if (record.getClass() == Record.class) {
          Record typedRecord=(Record)record;
          @SuppressWarnings("unchecked") final InputFormat<Record,InputSplit> inFormat=(InputFormat<Record,InputSplit>)format;
          if (this.output instanceof RecordOutputCollector) {
            final RecordOutputCollector output=(RecordOutputCollector)this.output;
            while (!this.taskCanceled && !inFormat.reachedEnd()) {
              typedRecord.clear();
              Record returnedRecord=null;
              if ((returnedRecord=inFormat.nextRecord(typedRecord)) != null) {
                output.collect(returnedRecord);
              }
            }
          }
 else           if (this.output instanceof ChainedCollectorMapDriver) {
            @SuppressWarnings("unchecked") final ChainedCollectorMapDriver<Record,?> output=(ChainedCollectorMapDriver<Record,?>)this.output;
            while (!this.taskCanceled && !inFormat.reachedEnd()) {
              typedRecord.clear();
              if ((typedRecord=inFormat.nextRecord(typedRecord)) != null) {
                output.collect(typedRecord);
              }
            }
          }
 else {
            @SuppressWarnings("unchecked") final Collector<Record> output=(Collector<Record>)this.output;
            while (!this.taskCanceled && !inFormat.reachedEnd()) {
              typedRecord.clear();
              if ((typedRecord=inFormat.nextRecord(typedRecord)) != null) {
                output.collect(typedRecord);
              }
            }
          }
        }
 else {
          if (this.output instanceof OutputCollector) {
            final OutputCollector<OT> output=(OutputCollector<OT>)this.output;
            while (!this.taskCanceled && !format.reachedEnd()) {
              if ((record=format.nextRecord(record)) != null) {
                output.collect(record);
              }
            }
          }
 else           if (this.output instanceof ChainedCollectorMapDriver) {
            @SuppressWarnings("unchecked") final ChainedCollectorMapDriver<OT,?> output=(ChainedCollectorMapDriver<OT,?>)this.output;
            while (!this.taskCanceled && !format.reachedEnd()) {
              if ((record=format.nextRecord(record)) != null) {
                output.collect(record);
              }
            }
          }
 else {
            final Collector<OT> output=this.output;
            while (!this.taskCanceled && !format.reachedEnd()) {
              if ((record=format.nextRecord(record)) != null) {
                output.collect(record);
              }
            }
          }
        }
        if (LOG.isDebugEnabled() && !this.taskCanceled) {
          LOG.debug(getLogString("Closing input split " + split.toString()));
        }
      }
  finally {
        format.close();
      }
    }
    this.output.close();
    RegularPactTask.closeChainedTasks(this.chainedTasks,this);
    RegularPactTask.reportAndClearAccumulators(getEnvironment(),new HashMap<String,Accumulator<?,?>>(),chainedTasks);
  }
 catch (  Exception ex) {
    try {
      this.format.close();
    }
 catch (    Throwable t) {
    }
    RegularPactTask.cancelChainedTasks(this.chainedTasks);
    ex=ExceptionInChainedStubException.exceptionUnwrap(ex);
    if (ex instanceof CancelTaskException) {
      throw ex;
    }
 else     if (!this.taskCanceled) {
      RegularPactTask.logAndThrowException(ex,this);
    }
  }
  if (!this.taskCanceled) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(getLogString("Finished data source operator"));
    }
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(getLogString("Data source operator cancelled"));
    }
  }
}
