{
  String path=new String();
  if (args != null && args.length == 1) {
    path=args[0];
  }
 else {
    System.err.println("USAGE:\nTwitterLocal <pathToPropertiesFile>");
    return;
  }
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createLocalEnvironment(PARALLELISM);
  DataStream<String> streamSource=env.addSource(new TwitterSource(path,100),SOURCE_PARALLELISM);
  DataStream<Tuple2<String,Integer>> dataStream=streamSource.flatMap(new SelectLanguageFlatMap()).partitionBy(0).map(new MapFunction<String,Tuple2<String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<String,Integer> map(    String value) throws Exception {
      return new Tuple2<String,Integer>(value,1);
    }
  }
).groupBy(0).reduce(new WordCountCounter());
  dataStream.addSink(new SinkFunction<Tuple2<String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public void invoke(    Tuple2<String,Integer> tuple){
      System.out.println(tuple);
    }
  }
);
  env.execute();
}
