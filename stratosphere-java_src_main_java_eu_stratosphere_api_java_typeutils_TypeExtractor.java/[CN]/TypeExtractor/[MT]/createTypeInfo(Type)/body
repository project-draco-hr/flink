{
  Type curT=t;
  if (Tuple.class.isAssignableFrom((Class<?>)curT)) {
    while (!(curT instanceof ParameterizedType) && !((Class)curT).equals(Tuple.class)) {
      curT=((Class<?>)curT).getGenericSuperclass();
    }
    if (curT instanceof ParameterizedType) {
      ParameterizedType pt=(ParameterizedType)curT;
      Type raw=pt.getRawType();
      if (raw instanceof Class) {
        Type[] subtypes=pt.getActualTypeArguments();
        TypeInformation<?>[] tupleSubTypes=new TypeInformation<?>[subtypes.length];
        for (int i=0; i < subtypes.length; i++) {
          tupleSubTypes[i]=createTypeInfo(subtypes[i]);
        }
        return new TupleTypeInfo(((Class<? extends Tuple>)t),tupleSubTypes);
      }
    }
  }
 else   if (t instanceof Class) {
    return TypeInformation.getForClass((Class<X>)t);
  }
  return null;
}
