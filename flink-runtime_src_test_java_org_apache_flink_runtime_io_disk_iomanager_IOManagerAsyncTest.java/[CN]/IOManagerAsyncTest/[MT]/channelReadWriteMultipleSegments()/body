{
  final int NUM_IOS=1111;
  final int NUM_SEGS=16;
  try {
    final List<MemorySegment> memSegs=new ArrayList<MemorySegment>();
    for (int i=0; i < NUM_SEGS; i++) {
      memSegs.add(new MemorySegment(new byte[32 * 1024]));
    }
    final FileIOChannel.ID channelID=this.ioManager.createChannel();
    final BlockChannelWriter writer=this.ioManager.createBlockChannelWriter(channelID);
    for (int i=0; i < NUM_IOS; i++) {
      final MemorySegment memSeg=memSegs.isEmpty() ? writer.getNextReturnedSegment() : memSegs.remove(memSegs.size() - 1);
      for (int pos=0; pos < memSeg.size(); pos+=4) {
        memSeg.putInt(pos,i);
      }
      writer.writeBlock(memSeg);
    }
    writer.close();
    while (memSegs.size() < NUM_SEGS) {
      memSegs.add(writer.getNextReturnedSegment());
    }
    final BlockChannelReader reader=this.ioManager.createBlockChannelReader(channelID);
    while (!memSegs.isEmpty()) {
      reader.readBlock(memSegs.remove(0));
    }
    for (int i=0; i < NUM_IOS; i++) {
      final MemorySegment memSeg=reader.getNextReturnedSegment();
      for (int pos=0; pos < memSeg.size(); pos+=4) {
        if (memSeg.getInt(pos) != i) {
          fail("Read memory segment contains invalid data.");
        }
      }
      reader.readBlock(memSeg);
    }
    reader.closeAndDelete();
    while (memSegs.size() < NUM_SEGS) {
      memSegs.add(reader.getNextReturnedSegment());
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("TEst encountered an exception: " + ex.getMessage());
  }
}
