{
  final int NUM_IOS=1111;
  try {
    final FileIOChannel.ID channelID=this.ioManager.createChannel();
    final BlockChannelWriter<MemorySegment> writer=this.ioManager.createBlockChannelWriter(channelID);
    MemorySegment memSeg=MemorySegmentFactory.allocateUnpooledSegment(32 * 1024);
    for (int i=0; i < NUM_IOS; i++) {
      for (int pos=0; pos < memSeg.size(); pos+=4) {
        memSeg.putInt(pos,i);
      }
      writer.writeBlock(memSeg);
      memSeg=writer.getNextReturnedBlock();
    }
    writer.close();
    final BlockChannelReader<MemorySegment> reader=this.ioManager.createBlockChannelReader(channelID);
    for (int i=0; i < NUM_IOS; i++) {
      reader.readBlock(memSeg);
      memSeg=reader.getNextReturnedBlock();
      for (int pos=0; pos < memSeg.size(); pos+=4) {
        if (memSeg.getInt(pos) != i) {
          fail("Read memory segment contains invalid data.");
        }
      }
    }
    reader.closeAndDelete();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Test encountered an exception: " + ex.getMessage());
  }
}
