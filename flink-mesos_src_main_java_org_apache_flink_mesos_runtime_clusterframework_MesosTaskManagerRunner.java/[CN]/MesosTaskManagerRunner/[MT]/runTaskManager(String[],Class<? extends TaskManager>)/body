{
  EnvironmentInformation.logEnvironmentInfo(LOG,taskManager.getSimpleName(),args);
  SignalHandler.register(LOG);
  JvmShutdownSafeguard.installAsShutdownHook(LOG);
  final Configuration configuration;
  try {
    configuration=TaskManager.parseArgsAndLoadConfig(args);
    final Configuration dynamicProperties=FlinkMesosSessionCli.decodeDynamicProperties(ENV.get(MesosConfigKeys.ENV_DYNAMIC_PROPERTIES));
    LOG.debug("Mesos dynamic properties: {}",dynamicProperties);
    configuration.addAll(dynamicProperties);
  }
 catch (  Throwable t) {
    LOG.error("Failed to load the TaskManager configuration and dynamic properties.",t);
    System.exit(TaskManager.STARTUP_FAILURE_RETURN_CODE());
    return;
  }
  final Map<String,String> envs=System.getenv();
  final String effectiveUsername=envs.get(MesosConfigKeys.ENV_CLIENT_USERNAME);
  final String tmpDirs=envs.get(MesosConfigKeys.ENV_FLINK_TMP_DIR);
  String flinkTempDirs=configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,null);
  if (flinkTempDirs != null) {
    LOG.info("Overriding Mesos temporary file directories with those " + "specified in the Flink config: {}",flinkTempDirs);
  }
 else   if (tmpDirs != null) {
    LOG.info("Setting directories for temporary files to: {}",tmpDirs);
    configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,tmpDirs);
  }
  LOG.info("Mesos task runs as '{}', setting user to execute Flink TaskManager to '{}'",UserGroupInformation.getCurrentUser().getShortUserName(),effectiveUsername);
  configuration.setBoolean(ConfigConstants.AKKA_JVM_EXIT_ON_FATAL_ERROR,true);
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser(effectiveUsername);
  for (  Token<? extends TokenIdentifier> toks : UserGroupInformation.getCurrentUser().getTokens()) {
    ugi.addToken(toks);
  }
  String containerID=Preconditions.checkNotNull(envs.get(MesosConfigKeys.ENV_FLINK_CONTAINER_ID));
  final ResourceID resourceId=new ResourceID(containerID);
  LOG.info("ResourceID assigned for this container: {}",resourceId);
  ugi.doAs(new PrivilegedAction<Object>(){
    @Override public Object run(){
      try {
        TaskManager.selectNetworkInterfaceAndRunTaskManager(configuration,resourceId,taskManager);
      }
 catch (      Throwable t) {
        LOG.error("Error while starting the TaskManager",t);
        System.exit(TaskManager.STARTUP_FAILURE_RETURN_CODE());
      }
      return null;
    }
  }
);
}
