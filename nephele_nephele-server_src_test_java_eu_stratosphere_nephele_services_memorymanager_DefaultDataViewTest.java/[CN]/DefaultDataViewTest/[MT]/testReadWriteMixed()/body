{
  Random rand=new Random(RANDOM_SEED);
  MemorySegment segment=memoryManager.allocate(mockInvoke,MEMORY_SIZE);
  segment.outputView.writeByte(rand.nextInt());
  segment.outputView.writeDouble(rand.nextDouble());
  segment.outputView.writeBoolean(rand.nextBoolean());
  segment.outputView.write(rand.nextInt());
  segment.outputView.writeChar('c');
  segment.outputView.writeChars("abcdef\n");
  segment.outputView.writeFloat(rand.nextFloat());
  segment.outputView.writeShort(rand.nextInt());
  segment.outputView.writeByte(rand.nextInt());
  rand.setSeed(RANDOM_SEED);
  if (segment.inputView.readByte() != (byte)(rand.nextInt() & 0xff))   Assert.fail();
  if (segment.inputView.readDouble() != rand.nextDouble())   Assert.fail();
  if (segment.inputView.readBoolean() != rand.nextBoolean())   Assert.fail();
  if (segment.inputView.readByte() != (byte)(rand.nextInt() & 0xff))   Assert.fail();
  if (segment.inputView.readChar() != 'c')   Assert.fail();
  if (!segment.inputView.readLine().equals("abcdef"))   Assert.fail();
  if (segment.inputView.readFloat() != rand.nextFloat())   Assert.fail();
  if (segment.inputView.readShort() != (short)(rand.nextInt() & 0xffff))   Assert.fail();
  if (segment.inputView.readByte() != (byte)(rand.nextInt() & 0xff))   Assert.fail();
  memoryManager.release(segment);
}
