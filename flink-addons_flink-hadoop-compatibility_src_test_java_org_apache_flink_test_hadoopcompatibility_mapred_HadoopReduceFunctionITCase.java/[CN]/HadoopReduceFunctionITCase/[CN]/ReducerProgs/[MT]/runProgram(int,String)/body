{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      DataSet<Tuple2<IntWritable,Text>> ds=HadoopTestData.getKVPairDataSet(env).map(new MapFunction<Tuple2<IntWritable,Text>,Tuple2<IntWritable,Text>>(){
        private static final long serialVersionUID=1L;
        @Override public Tuple2<IntWritable,Text> map(        Tuple2<IntWritable,Text> v) throws Exception {
          v.f0=new IntWritable(v.f0.get() / 5);
          return v;
        }
      }
);
      DataSet<Tuple2<IntWritable,IntWritable>> commentCnts=ds.groupBy(0).reduceGroup(new HadoopReduceFunction<IntWritable,Text,IntWritable,IntWritable>(new CommentCntReducer()));
      commentCnts.writeAsText(resultPath);
      env.execute();
      return "(0,0)\n" + "(1,3)\n" + "(2,5)\n"+ "(3,5)\n"+ "(4,2)\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple2<IntWritable,Text>> ds=HadoopTestData.getKVPairDataSet(env);
    DataSet<Tuple2<IntWritable,IntWritable>> commentCnts=ds.reduceGroup(new HadoopReduceFunction<IntWritable,Text,IntWritable,IntWritable>(new AllCommentCntReducer()));
    commentCnts.writeAsText(resultPath);
    env.execute();
    return "(42,15)\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  JobConf conf=new JobConf();
  conf.set("my.cntPrefix","Hello");
  DataSet<Tuple2<IntWritable,Text>> ds=HadoopTestData.getKVPairDataSet(env).map(new MapFunction<Tuple2<IntWritable,Text>,Tuple2<IntWritable,Text>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<IntWritable,Text> map(    Tuple2<IntWritable,Text> v) throws Exception {
      v.f0=new IntWritable(v.f0.get() % 5);
      return v;
    }
  }
);
  DataSet<Tuple2<IntWritable,IntWritable>> helloCnts=ds.groupBy(0).reduceGroup(new HadoopReduceFunction<IntWritable,Text,IntWritable,IntWritable>(new ConfigurableCntReducer(),conf));
  helloCnts.writeAsText(resultPath);
  env.execute();
  return "(0,0)\n" + "(1,0)\n" + "(2,1)\n"+ "(3,1)\n"+ "(4,1)\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
