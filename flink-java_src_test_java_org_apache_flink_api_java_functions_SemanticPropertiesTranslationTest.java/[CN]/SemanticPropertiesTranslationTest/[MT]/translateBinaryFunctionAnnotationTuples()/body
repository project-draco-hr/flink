{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    @SuppressWarnings("unchecked") DataSet<Tuple2<Long,String>> input1=env.fromElements(new Tuple2<Long,String>(3l,"test"));
    @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Double>> input2=env.fromElements(new Tuple2<Long,Double>(3l,3.1415));
    input1.join(input2).where(0).equalTo(0).with(new ForwardingTupleJoin<Long,String,Long,Double>()).print();
    Plan plan=env.createProgramPlan();
    GenericDataSinkBase<?> sink=plan.getDataSinks().iterator().next();
    JoinOperatorBase<?,?,?,?> join=(JoinOperatorBase<?,?,?,?>)sink.getInput();
    DualInputSemanticProperties semantics=join.getSemanticProperties();
    FieldSet fw11=semantics.getForwardedField1(0);
    FieldSet fw12=semantics.getForwardedField1(1);
    FieldSet fw21=semantics.getForwardedField2(0);
    FieldSet fw22=semantics.getForwardedField2(1);
    assertNull(fw11);
    assertNull(fw21);
    assertNotNull(fw12);
    assertNotNull(fw22);
    assertTrue(fw12.contains(0));
    assertTrue(fw22.contains(1));
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Exception in test: " + e.getMessage());
  }
}
