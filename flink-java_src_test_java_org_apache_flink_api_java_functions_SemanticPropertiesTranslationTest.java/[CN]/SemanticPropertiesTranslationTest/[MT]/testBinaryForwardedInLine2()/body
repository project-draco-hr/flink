{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Long>> input1=env.fromElements(new Tuple2<Long,Long>(3l,4l));
  @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Long>> input2=env.fromElements(new Tuple2<Long,Long>(3l,2l));
  input1.join(input2).where(0).equalTo(0).with(new ReadSetJoin<Long>()).withForwardedFieldsFirst("0->1; 1->2").withForwardedFieldsSecond("1->0").output(new DiscardingOutputFormat<Tuple3<Long,Long,Long>>());
  Plan plan=env.createProgramPlan();
  GenericDataSinkBase<?> sink=plan.getDataSinks().iterator().next();
  JoinOperatorBase<?,?,?,?> join=(JoinOperatorBase<?,?,?,?>)sink.getInput();
  DualInputSemanticProperties semantics=join.getSemanticProperties();
  assertNotNull(semantics.getForwardingTargetFields(1,0));
  assertEquals(1,semantics.getForwardingTargetFields(0,0).size());
  assertEquals(1,semantics.getForwardingTargetFields(0,1).size());
  assertEquals(1,semantics.getForwardingTargetFields(1,1).size());
  assertTrue(semantics.getForwardingTargetFields(0,0).contains(1));
  assertTrue(semantics.getForwardingTargetFields(0,1).contains(2));
  assertTrue(semantics.getForwardingTargetFields(1,1).contains(0));
  assertNotNull(semantics.getReadFields(0));
  assertNotNull(semantics.getReadFields(1));
  assertEquals(1,semantics.getReadFields(0).size());
  assertEquals(1,semantics.getReadFields(1).size());
  assertTrue(semantics.getReadFields(0).contains(1));
  assertTrue(semantics.getReadFields(1).contains(0));
  assertEquals(0,semantics.getForwardingTargetFields(1,0).size());
}
