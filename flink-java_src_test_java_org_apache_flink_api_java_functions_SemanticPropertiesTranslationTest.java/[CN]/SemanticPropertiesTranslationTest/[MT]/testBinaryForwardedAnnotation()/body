{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  @SuppressWarnings("unchecked") DataSet<Tuple2<Long,String>> input1=env.fromElements(new Tuple2<Long,String>(3l,"test"));
  @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Double>> input2=env.fromElements(new Tuple2<Long,Double>(3l,3.1415));
  input1.join(input2).where(0).equalTo(0).with(new ForwardedBothAnnotationJoin<Long,String,Long,Double>()).output(new DiscardingOutputFormat<Tuple2<String,Double>>());
  Plan plan=env.createProgramPlan();
  GenericDataSinkBase<?> sink=plan.getDataSinks().iterator().next();
  InnerJoinOperatorBase<?,?,?,?> join=(InnerJoinOperatorBase<?,?,?,?>)sink.getInput();
  DualInputSemanticProperties semantics=join.getSemanticProperties();
  assertNotNull(semantics.getForwardingTargetFields(0,0));
  assertNotNull(semantics.getForwardingTargetFields(1,0));
  assertEquals(1,semantics.getForwardingTargetFields(0,1).size());
  assertEquals(1,semantics.getForwardingTargetFields(1,1).size());
  assertTrue(semantics.getForwardingTargetFields(0,1).contains(0));
  assertTrue(semantics.getForwardingTargetFields(1,1).contains(1));
  assertEquals(0,semantics.getForwardingTargetFields(0,0).size());
  assertEquals(0,semantics.getForwardingTargetFields(1,0).size());
}
