{
  final ArrayList<IntStringPair> source=new ArrayList<IntStringPair>();
  source.add(new IntStringPair(new IntValue(1),new StringValue("A")));
  source.add(new IntStringPair(new IntValue(2),new StringValue("B")));
  source.add(new IntStringPair(new IntValue(3),new StringValue("C")));
  source.add(new IntStringPair(new IntValue(3),new StringValue("D")));
  source.add(new IntStringPair(new IntValue(4),new StringValue("E")));
  source.add(new IntStringPair(new IntValue(4),new StringValue("F")));
  source.add(new IntStringPair(new IntValue(4),new StringValue("G")));
  source.add(new IntStringPair(new IntValue(5),new StringValue("H")));
  source.add(new IntStringPair(new IntValue(5),new StringValue("I")));
  source.add(new IntStringPair(new IntValue(5),new StringValue("J")));
  source.add(new IntStringPair(new IntValue(5),new StringValue("K")));
  source.add(new IntStringPair(new IntValue(5),new StringValue("L")));
  this.sourceIter=new MutableObjectIterator<Record>(){
    final Iterator<IntStringPair> it=source.iterator();
    @Override public boolean next(    Record target) throws IOException {
      if (it.hasNext()) {
        IntStringPair pair=it.next();
        target.setField(0,pair.getInteger());
        target.setField(1,pair.getString());
        return true;
      }
 else {
        return false;
      }
    }
  }
;
  final RecordSerializer serializer=RecordSerializer.get();
  @SuppressWarnings("unchecked") final RecordComparator comparator=new RecordComparator(new int[]{0},new Class[]{IntValue.class});
  this.psi=new KeyGroupedIterator<Record>(this.sourceIter,serializer,comparator);
}
