{
  try {
    NetworkBufferPool globalPool=new NetworkBufferPool(10,128);
    BufferPool fixedPool=globalPool.createBufferPool(2,true);
    BufferPool nonFixedPool=globalPool.createBufferPool(5,false);
    assertEquals(2,fixedPool.getNumberOfRequiredMemorySegments());
    assertEquals(5,nonFixedPool.getNumberOfRequiredMemorySegments());
    Buffer[] buffers={fixedPool.requestBuffer(),fixedPool.requestBuffer(),nonFixedPool.requestBuffer(),nonFixedPool.requestBuffer(),nonFixedPool.requestBuffer(),nonFixedPool.requestBuffer(),nonFixedPool.requestBuffer(),nonFixedPool.requestBuffer(),nonFixedPool.requestBuffer(),nonFixedPool.requestBuffer()};
    for (    Buffer b : buffers) {
      assertNotNull(b);
      assertNotNull(b.getMemorySegment());
    }
    assertNull(fixedPool.requestBuffer());
    assertNull(nonFixedPool.requestBuffer());
    globalPool.destroyAllBufferPools();
    assertFalse(globalPool.isDestroyed());
    assertTrue(fixedPool.isDestroyed());
    assertTrue(nonFixedPool.isDestroyed());
    assertEquals(0,globalPool.getNumberOfRegisteredBufferPools());
    assertEquals(0,globalPool.getNumberOfAvailableMemorySegments());
    for (    Buffer b : buffers) {
      b.recycle();
    }
    assertEquals(globalPool.getTotalNumberOfMemorySegments(),globalPool.getNumberOfAvailableMemorySegments());
    try {
      fixedPool.requestBuffer();
      fail("Should fail with an IllegalStateException");
    }
 catch (    IllegalStateException e) {
    }
    try {
      nonFixedPool.requestBuffer();
      fail("Should fail with an IllegalStateException");
    }
 catch (    IllegalStateException e) {
    }
    assertNotNull(globalPool.createBufferPool(10,false));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
