{
  TransitiveClosureEntry state=new TransitiveClosureEntry();
  ComponentUpdate probe=new ComponentUpdate();
  PactRecord update=new PactRecord();
  PactLong vid=new PactLong();
  PactLong cid=new PactLong();
  AsynchronousPartialSorterCollector sorter=new AsynchronousPartialSorterCollector(memoryManager,ioManager,sortMem,comparators,keyPos,keyClasses,this);
  this.inputCollector=sorter.getInputCollector();
  this.combinerThread=new CombinerThread(sorter,keyPos,keyClasses,this.stub,new PactRecordToUpdateCollector(output));
  this.combinerThread.start();
  int preCombineCount=0;
  while (iter.next(probe)) {
    HashBucketIterator<Value,ComponentUpdate> tableIter=table.getMatchesFor(probe);
    if (tableIter.next(state)) {
      long updateCid=probe.getCid();
      int numNeighbours=state.getNumNeighbors();
      long[] neighbourIds=state.getNeighbors();
      cid.setValue(updateCid);
      update.setField(1,cid);
      vid.setValue(probe.getVid());
      update.setField(0,vid);
      inputCollector.collect(update);
      for (int i=0; i < numNeighbours; i++) {
        vid.setValue(neighbourIds[i]);
        update.setField(0,vid);
        preCombineCount++;
        inputCollector.collect(update);
      }
    }
    if (tableIter.next(state)) {
      throw new RuntimeException("there should only be one");
    }
  }
  this.sendCounter("iteration.combine.inputCount",preCombineCount);
  inputCollector.close();
  while (this.combinerThread.isAlive()) {
    try {
      this.combinerThread.join();
    }
 catch (    InterruptedException iex) {
    }
  }
  sorter.close();
}
