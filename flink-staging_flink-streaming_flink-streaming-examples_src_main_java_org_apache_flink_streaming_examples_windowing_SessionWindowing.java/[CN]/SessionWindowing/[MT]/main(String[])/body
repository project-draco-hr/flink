{
  if (!parseParameters(args)) {
    return;
  }
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(2);
  final List<Tuple3<String,Long,Integer>> input=new ArrayList<Tuple3<String,Long,Integer>>();
  input.add(new Tuple3<String,Long,Integer>("a",1L,1));
  input.add(new Tuple3<String,Long,Integer>("b",1L,1));
  input.add(new Tuple3<String,Long,Integer>("b",3L,1));
  input.add(new Tuple3<String,Long,Integer>("b",5L,1));
  input.add(new Tuple3<String,Long,Integer>("c",6L,1));
  input.add(new Tuple3<String,Long,Integer>("a",10L,1));
  input.add(new Tuple3<String,Long,Integer>("c",11L,1));
  DataStream<Tuple3<String,Long,Integer>> source=env.addSource(new SourceFunction<Tuple3<String,Long,Integer>>(){
    int index=0;
    @Override public boolean reachedEnd() throws Exception {
      return index >= input.size();
    }
    @Override public Tuple3<String,Long,Integer> next() throws Exception {
      Tuple3<String,Long,Integer> result=input.get(index);
      index++;
      if (!fileOutput) {
        System.out.println("Collected: " + result);
        Thread.sleep(3000);
      }
      return result;
    }
  }
);
  DataStream<Tuple3<String,Long,Integer>> aggregated=source.groupBy(0).window(new SessionTriggerPolicy(3L),new TumblingEvictionPolicy<Tuple3<String,Long,Integer>>()).sum(2).flatten();
  if (fileOutput) {
    aggregated.writeAsText(outputPath);
  }
 else {
    aggregated.print();
  }
  env.execute();
}
