{
  try {
{
      final AtomicInteger invocations=new AtomicInteger();
      final Instance instance=SchedulerTestUtils.getRandomInstance(1);
      final SimpleSlot thisSlot=new SimpleSlot(new JobID(),instance,instance.getInstanceConnectionInfo(),0,instance.getActorGateway(),null,null);
      SlotAllocationFuture future=new SlotAllocationFuture();
      future.setFutureAction(new SlotAllocationFutureAction(){
        @Override public void slotAllocated(        SimpleSlot slot){
          assertEquals(thisSlot,slot);
          invocations.incrementAndGet();
        }
      }
);
      future.setSlot(thisSlot);
      assertEquals(1,invocations.get());
    }
{
      final AtomicInteger invocations=new AtomicInteger();
      final Instance instance=SchedulerTestUtils.getRandomInstance(1);
      final SimpleSlot thisSlot=new SimpleSlot(new JobID(),instance,instance.getInstanceConnectionInfo(),0,instance.getActorGateway(),null,null);
      SlotAllocationFuture future=new SlotAllocationFuture();
      future.setSlot(thisSlot);
      future.setFutureAction(new SlotAllocationFutureAction(){
        @Override public void slotAllocated(        SimpleSlot slot){
          assertEquals(thisSlot,slot);
          invocations.incrementAndGet();
        }
      }
);
      assertEquals(1,invocations.get());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
