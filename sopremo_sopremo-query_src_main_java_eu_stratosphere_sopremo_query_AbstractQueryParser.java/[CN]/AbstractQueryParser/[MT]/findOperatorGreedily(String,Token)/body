{
  StringBuilder name=new StringBuilder(firstWord.getText());
  IntList wordBoundaries=new IntArrayList();
  wordBoundaries.add(name.length());
  for (int lookAhead=1; this.input.LA(lookAhead) == firstWord.getType(); lookAhead++) {
    Token matchedToken=this.input.LT(lookAhead);
    name.append(' ').append(matchedToken.getText());
    wordBoundaries.add(name.length());
  }
  int tokenCount=wordBoundaries.size();
  OperatorInfo<?> info=null;
  ParsingScope scope=this.getScope(packageName);
  for (; info == null && tokenCount > 0; )   info=scope.getOperatorRegistry().get(name.substring(0,wordBoundaries.getInt(--tokenCount)));
  for (; tokenCount > 0; tokenCount--)   this.input.consume();
  if (info == null)   throw new FailedPredicateException(firstWord.getInputStream(),"operator name",String.format("Unknown operator %s; possible alternatives %s",name,this.inputSuggestion.suggest(name,scope.getOperatorRegistry())));
  return info;
}
