{
  File[] output1;
  File file1=asFile(outputPath1);
  if (file1.isDirectory()) {
    output1=file1.listFiles();
  }
 else {
    output1=new File[]{file1};
  }
  List<String> result1=new ArrayList<String>();
  DatumReader<User> userDatumReader1=new SpecificDatumReader<User>(User.class);
  for (  File avroOutput : output1) {
    DataFileReader<User> dataFileReader1=new DataFileReader<User>(avroOutput,userDatumReader1);
    while (dataFileReader1.hasNext()) {
      User user=dataFileReader1.next();
      result1.add(user.getName() + "|" + user.getFavoriteNumber()+ "|"+ user.getFavoriteColor());
    }
  }
  for (  String expectedResult : userData.split("\n")) {
    Assert.assertTrue("expected user " + expectedResult + " not found.",result1.contains(expectedResult));
  }
  File[] output2;
  File file2=asFile(outputPath2);
  if (file2.isDirectory()) {
    output2=file2.listFiles();
  }
 else {
    output2=new File[]{file2};
  }
  List<String> result2=new ArrayList<String>();
  DatumReader<ReflectiveUser> userDatumReader2=new ReflectDatumReader<ReflectiveUser>(ReflectiveUser.class);
  for (  File avroOutput : output2) {
    DataFileReader<ReflectiveUser> dataFileReader2=new DataFileReader<ReflectiveUser>(avroOutput,userDatumReader2);
    while (dataFileReader2.hasNext()) {
      ReflectiveUser user=dataFileReader2.next();
      result2.add(user.getName() + "|" + user.getFavoriteNumber()+ "|"+ user.getFavoriteColor());
    }
  }
  for (  String expectedResult : userData.split("\n")) {
    Assert.assertTrue("expected user " + expectedResult + " not found.",result2.contains(expectedResult));
  }
}
