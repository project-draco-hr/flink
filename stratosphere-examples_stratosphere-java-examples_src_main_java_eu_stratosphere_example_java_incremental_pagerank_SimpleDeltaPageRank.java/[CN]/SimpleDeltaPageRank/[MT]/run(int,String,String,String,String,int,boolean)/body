{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setDegreeOfParallelism(dop);
  DataSet<Tuple2<Long,Double>> initialSolutionSet=env.readCsvFile(solutionSetInputPath).fieldDelimiter(' ').types(Long.class,Double.class).map(new Mapper());
  DataSet<Tuple2<Long,Double>> initialDeltaSet=env.readCsvFile(deltasInputPath).fieldDelimiter(' ').types(Long.class,Double.class);
  DataSet<Tuple3<Long,Long,Long>> dependencySetInput=env.readCsvFile(dependencySetInputPath).fieldDelimiter(' ').types(Long.class,Long.class,Long.class);
  int keyPosition=0;
  DeltaIteration<Tuple2<Long,Double>,Tuple2<Long,Double>> iteration=initialSolutionSet.iterateDelta(initialDeltaSet,maxIterations,keyPosition);
  DataSet<Tuple2<Long,Double>> updateRanks=iteration.getWorkset().join(dependencySetInput).where(0).equalTo(0).with(new PRDependenciesComputationMatchDelta()).groupBy(0).reduceGroup(new UpdateRankReduceDelta());
  DataSet<Tuple2<Long,Double>> oldRankComparison=updateRanks.join(iteration.getSolutionSet()).where(0).equalTo(0).with(new RankComparisonMatch());
  iteration.closeWith(oldRankComparison,updateRanks).writeAsCsv(outputPath);
  env.execute();
}
