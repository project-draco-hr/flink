{
  if (args.length != 3) {
    throw new IllegalArgumentException("Must provide three arguments: <parallelism> <text_input> <result_directory>");
  }
  int noSubTasks=Integer.parseInt(args[0]);
  String dataInput=args[1];
  String output=args[2];
  DataSourceContract<PactString,PactInteger> data=new DataSourceContract<PactString,PactInteger>(LineInFormat.class,dataInput,"Input Lines");
  data.setDegreeOfParallelism(noSubTasks);
  MapContract<PactString,PactInteger,PactString,PactInteger> mapper=new MapContract<PactString,PactInteger,PactString,PactInteger>(TokenizeLine.class,"Tokenize Lines");
  mapper.setDegreeOfParallelism(noSubTasks);
  ReduceContract<PactString,PactInteger,PactString,PactInteger> reducer=new ReduceContract<PactString,PactInteger,PactString,PactInteger>(CountWords.class,"Count Words");
  reducer.setDegreeOfParallelism(noSubTasks);
  DataSinkContract<PactString,PactInteger> out=new DataSinkContract<PactString,PactInteger>(WordCountOutFormat.class,output,"Output");
  out.setDegreeOfParallelism(noSubTasks);
  out.setInput(reducer);
  reducer.setInput(mapper);
  mapper.setInput(data);
  return new Plan(out,"WordCount Example");
}
