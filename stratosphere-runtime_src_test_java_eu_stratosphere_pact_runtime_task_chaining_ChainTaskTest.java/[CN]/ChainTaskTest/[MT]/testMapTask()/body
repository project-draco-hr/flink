{
  final int keyCnt=100;
  final int valCnt=20;
  try {
    initEnvironment(3 * 1024 * 1024);
    addInput(new UniformRecordGenerator(keyCnt,valCnt,false),0);
    addOutput(this.outList);
{
      final TaskConfig combineConfig=new TaskConfig(new Configuration());
      combineConfig.addInputToGroup(0);
      combineConfig.setInputSerializer(serFact,0);
      combineConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
      combineConfig.setOutputSerializer(serFact);
      combineConfig.setDriverStrategy(DriverStrategy.SORTED_GROUP_COMBINE);
      combineConfig.setDriverComparator(compFact,0);
      combineConfig.setMemoryDriver(3 * 1024 * 1024);
      combineConfig.setStubWrapper(new UserCodeClassWrapper<MockReduceStub>(MockReduceStub.class));
      getTaskConfig().addChainedTask(SynchronousChainedCombineDriver.class,combineConfig,"combine");
    }
{
      RegularPactTask<GenericCollectorMap<Record,Record>,Record> testTask=new RegularPactTask<GenericCollectorMap<Record,Record>,Record>();
      registerTask(testTask,CollectorMapDriver.class,MockMapStub.class);
      try {
        testTask.invoke();
      }
 catch (      Exception e) {
        e.printStackTrace();
        Assert.fail("Invoke method caused exception.");
      }
    }
    Assert.assertEquals(keyCnt,this.outList.size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
