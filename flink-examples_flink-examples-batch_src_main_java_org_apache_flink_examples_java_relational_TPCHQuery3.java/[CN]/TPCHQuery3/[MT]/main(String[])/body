{
  final ParameterTool params=ParameterTool.fromArgs(args);
  if (!params.has("lineitem") && !params.has("customer") && !params.has("orders")) {
    System.err.println("  This program expects data from the TPC-H benchmark as input data.");
    System.err.println("  Due to legal restrictions, we can not ship generated data.");
    System.out.println("  You can find the TPC-H data generator at http://www.tpc.org/tpch/.");
    System.out.println("  Usage: TPCHQuery3 --lineitem <path> --customer <path> --orders <path> [--output <path>]");
    return;
  }
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().setGlobalJobParameters(params);
  DataSet<Lineitem> lineitems=getLineitemDataSet(env,params.get("lineitem"));
  DataSet<Order> orders=getOrdersDataSet(env,params.get("customer"));
  DataSet<Customer> customers=getCustomerDataSet(env,params.get("orders"));
  customers=customers.filter(new FilterFunction<Customer>(){
    @Override public boolean filter(    Customer c){
      return c.getMktsegment().equals("AUTOMOBILE");
    }
  }
);
  orders=orders.filter(new FilterFunction<Order>(){
    private final DateFormat format=new SimpleDateFormat("yyyy-MM-dd");
    private final Date date=format.parse("1995-03-12");
    @Override public boolean filter(    Order o) throws ParseException {
      return format.parse(o.getOrderdate()).before(date);
    }
  }
);
  lineitems=lineitems.filter(new FilterFunction<Lineitem>(){
    private final DateFormat format=new SimpleDateFormat("yyyy-MM-dd");
    private final Date date=format.parse("1995-03-12");
    @Override public boolean filter(    Lineitem l) throws ParseException {
      return format.parse(l.getShipdate()).after(date);
    }
  }
);
  DataSet<ShippingPriorityItem> customerWithOrders=customers.join(orders).where(0).equalTo(1).with(new JoinFunction<Customer,Order,ShippingPriorityItem>(){
    @Override public ShippingPriorityItem join(    Customer c,    Order o){
      return new ShippingPriorityItem(o.getOrderKey(),0.0,o.getOrderdate(),o.getShippriority());
    }
  }
);
  DataSet<ShippingPriorityItem> result=customerWithOrders.join(lineitems).where(0).equalTo(0).with(new JoinFunction<ShippingPriorityItem,Lineitem,ShippingPriorityItem>(){
    @Override public ShippingPriorityItem join(    ShippingPriorityItem i,    Lineitem l){
      i.setRevenue(l.getExtendedprice() * (1 - l.getDiscount()));
      return i;
    }
  }
).groupBy(0,2,3).aggregate(Aggregations.SUM,1);
  if (params.has("output")) {
    result.writeAsCsv(params.get("output"),"\n","|");
    env.execute("TPCH Query 3 Example");
  }
 else {
    System.out.println("Printing result to stdout. Use --output to specify output path.");
    result.print();
  }
}
