{
  final Map<Operator,PactModule> modules=new IdentityHashMap<Operator,PactModule>();
  final Map<Operator,Contract[]> operatorOutputs=new IdentityHashMap<Operator,Contract[]>();
  new Traverser<Operator>(new OperatorNavigator(),this.sinks).traverse(new TraverseListener<Operator>(){
    @Override public void nodeTraversed(    Operator node){
      PactModule module=node.asPactModule(context);
      modules.put(node,module);
      DataSinkContract<PactNull,PactJsonObject>[] outputStubs=module.getOutputStubs();
      Contract[] outputContracts=new Contract[outputStubs.length];
      for (int index=0; index < outputStubs.length; index++)       outputContracts[index]=outputStubs[index].getInput();
      operatorOutputs.put(node,outputContracts);
    }
  }
);
  for (  PactModule module : modules.values())   module.validate();
  for (  Entry<Operator,PactModule> operatorModule : modules.entrySet()) {
    Operator operator=operatorModule.getKey();
    PactModule module=operatorModule.getValue();
    List<DataSourceContract<PactNull,PactJsonObject>> moduleInputs=Arrays.asList(module.getInputStubs());
    Collection<Contract> contracts=module.getAllContracts();
    for (    Contract contract : contracts) {
      Contract[] inputs=this.getInputs(contract);
      for (int index=0; index < inputs.length; index++) {
        int inputIndex=moduleInputs.indexOf(inputs[index]);
        if (inputIndex != -1 && inputIndex < operator.getInputs().size()) {
          Output input=operator.getInputs().get(inputIndex);
          inputs[index]=operatorOutputs.get(input.getOperator())[input.getIndex()];
        }
      }
      this.setInputs(contract,inputs);
    }
  }
  List<Contract> pactSinks=new ArrayList<Contract>();
  for (  Operator sink : this.sinks) {
    DataSinkContract<PactNull,PactJsonObject>[] outputs=modules.get(sink).getOutputStubs();
    for (    DataSinkContract<PactNull,PactJsonObject> outputStub : outputs) {
      Contract output=outputStub;
      if (!(sink instanceof Sink))       output=outputStub.getInput();
      pactSinks.add(output);
    }
  }
  return pactSinks;
}
