{
  this.input=input;
  if (cache.containsKey(this)) {
    for (    GraphAlgorithmDelegatingGraph<IN_K,IN_VV,IN_EV,OUT_K,OUT_VV,OUT_EV> other : cache.get(this)) {
      if (mergeConfiguration(other)) {
        Graph<OUT_K,OUT_VV,OUT_EV> output=runInternal(input);
        other.verticesDelegate.setObject(output.getVertices());
        verticesDelegate=other.verticesDelegate;
        other.edgesDelegate.setObject(output.getEdges());
        edgesDelegate=other.edgesDelegate;
        return Graph.fromDataSet(verticesDelegate.getProxy(),edgesDelegate.getProxy(),output.getContext());
      }
    }
  }
  Graph<OUT_K,OUT_VV,OUT_EV> output=runInternal(input);
  verticesDelegate=new Delegate<>(output.getVertices());
  edgesDelegate=new Delegate<>(output.getEdges());
  if (cache.containsKey(this)) {
    cache.get(this).add(this);
  }
 else {
    cache.put(this,new ArrayList(Collections.singletonList(this)));
  }
  return Graph.fromDataSet(verticesDelegate.getProxy(),edgesDelegate.getProxy(),output.getContext());
}
