{
  final JobVertex sender=new JobVertex("Sender");
  sender.setInvokableClass(RoundRobinSubtaskIndexSender.class);
  sender.getConfiguration().setInteger(RoundRobinSubtaskIndexSender.CONFIG_KEY,receiverParallelism);
  sender.setParallelism(senderParallelism);
  final JobVertex receiver=new JobVertex("Receiver");
  receiver.setInvokableClass(SubtaskIndexReceiver.class);
  receiver.getConfiguration().setInteger(SubtaskIndexReceiver.CONFIG_KEY,senderParallelism);
  receiver.setParallelism(receiverParallelism);
  receiver.connectNewDataSetAsInput(sender,DistributionPattern.ALL_TO_ALL,ResultPartitionType.BLOCKING);
  final JobGraph jobGraph=new JobGraph(jobName,new ExecutionConfig(),sender,receiver);
  jobGraph.setAllowQueuedScheduling(true);
  return jobGraph;
}
