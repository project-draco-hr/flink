{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    @SuppressWarnings("unchecked") DataSet<Tuple3<Long,Long,Long>> input=env.fromElements(new Tuple3<Long,Long,Long>(0L,0L,0L));
    input.groupBy(0,1).sum(2).groupBy(0).sum(1).output(new DiscardingOutputFormat<Tuple3<Long,Long,Long>>());
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    SingleInputPlanNode agg2Reducer=(SingleInputPlanNode)sink.getInput().getSource();
    SingleInputPlanNode agg2Combiner=(SingleInputPlanNode)agg2Reducer.getInput().getSource();
    SingleInputPlanNode agg1Reducer=(SingleInputPlanNode)agg2Combiner.getInput().getSource();
    assertEquals(ShipStrategyType.PARTITION_HASH,agg2Reducer.getInput().getShipStrategy());
    assertEquals(new FieldList(0),agg2Reducer.getInput().getShipStrategyKeys());
    assertEquals(ShipStrategyType.FORWARD,agg2Combiner.getInput().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_HASH,agg1Reducer.getInput().getShipStrategy());
    assertEquals(new FieldList(0,1),agg1Reducer.getInput().getShipStrategyKeys());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
