{
  final byte[] sourceBuf=new byte[512];
  for (int i=0; i < sourceBuf.length; ++i) {
    sourceBuf[i]=(byte)(i % 23);
  }
  final byte[] targetBuf=new byte[8192];
  final MultiPacketOutputStream mpos=new MultiPacketOutputStream(targetBuf);
  try {
    mpos.write(sourceBuf);
  }
 catch (  IOException ioe) {
    fail(StringUtils.stringifyException(ioe));
  }
  final DatagramPacket[] packets=mpos.createPackets(TEST_REMOTE_ADDRESS);
  assertNotNull(packets);
  assertEquals(1,packets.length);
  final int offset=packets[0].getOffset();
  final int length=packets[0].getLength();
  assertEquals(0,offset);
  assertEquals(sourceBuf.length + RPCMessage.METADATA_SIZE,length);
  final byte[] packetBuf=packets[0].getData();
  for (int i=offset; i < (offset + length - RPCMessage.METADATA_SIZE); ++i) {
    assertEquals((byte)(i % 23),packetBuf[i]);
  }
  assertEquals(0,packetBuf[offset + length - RPCMessage.METADATA_SIZE]);
  assertEquals(0,packetBuf[offset + length - RPCMessage.METADATA_SIZE + 1]);
  assertEquals(1,packetBuf[offset + length - RPCMessage.METADATA_SIZE + 2]);
  assertEquals(0,packetBuf[offset + length - RPCMessage.METADATA_SIZE + 3]);
}
