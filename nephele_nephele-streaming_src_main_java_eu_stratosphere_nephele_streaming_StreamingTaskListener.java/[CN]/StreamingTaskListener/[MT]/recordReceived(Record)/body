{
  if (this.taskType == TaskType.INPUT) {
    throw new IllegalStateException("Input task received record");
  }
  final AbstractTaggableRecord taggableRecord=(AbstractTaggableRecord)record;
  this.tag=(StreamingTag)taggableRecord.getTag();
  if (this.tag != null) {
    final long timestamp=System.currentTimeMillis();
    if (this.lastTimestamp > 0) {
      try {
        this.communicationThread.sendDataAsynchronously(new TaskLatency(jobID,vertexID,timestamp - this.lastTimestamp));
      }
 catch (      InterruptedException e) {
        LOG.error(StringUtils.stringifyException(e));
      }
      if (this.taskType == TaskType.REGULAR) {
        this.lastTimestamp=-1L;
      }
 else {
        this.lastTimestamp=timestamp;
      }
    }
    final long pathLatency=timestamp - this.tag.getTimestamp();
    final ExecutionVertexID sourceID=this.tag.getSourceID();
    Double aggregatedLatency=this.aggregatedValue.get(sourceID);
    if (aggregatedLatency == null) {
      aggregatedLatency=Double.valueOf(pathLatency);
    }
 else {
      aggregatedLatency=Double.valueOf((ALPHA * pathLatency) + ((1 - ALPHA) * aggregatedLatency.doubleValue()));
    }
    this.aggregatedValue.put(sourceID,aggregatedLatency);
    Integer counter=this.aggregationCounter.get(sourceID);
    if (counter == null) {
      counter=Integer.valueOf(0);
    }
    counter=Integer.valueOf(counter.intValue() + 1);
    if (counter.intValue() == this.aggregationInterval) {
      final ChannelLatency pl=new ChannelLatency(this.jobID,sourceID,this.vertexID,aggregatedLatency.doubleValue());
      try {
        this.communicationThread.sendDataAsynchronously(pl);
      }
 catch (      InterruptedException e) {
        LOG.warn(StringUtils.stringifyException(e));
      }
      counter=Integer.valueOf(0);
    }
    this.aggregationCounter.put(sourceID,counter);
  }
}
