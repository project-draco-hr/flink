{
  String name=getName() != null ? getName() : "CoGroup at " + defaultName;
  try {
    keys1.areCompatible(keys2);
  }
 catch (  IncompatibleKeysException e) {
    throw new InvalidProgramException("The types of the key fields do not match.",e);
  }
  if (keys1 instanceof Keys.ExpressionKeys && keys2 instanceof Keys.ExpressionKeys) {
    try {
      keys1.areCompatible(keys2);
    }
 catch (    IncompatibleKeysException e) {
      throw new InvalidProgramException("The types of the key fields do not match.",e);
    }
    int[] logicalKeyPositions1=keys1.computeLogicalKeyPositions();
    int[] logicalKeyPositions2=keys2.computeLogicalKeyPositions();
    CoGroupRawOperatorBase<I1,I2,OUT,CoGroupFunction<I1,I2,OUT>> po=new CoGroupRawOperatorBase<I1,I2,OUT,CoGroupFunction<I1,I2,OUT>>(function,new BinaryOperatorInformation<I1,I2,OUT>(getInput1Type(),getInput2Type(),getResultType()),logicalKeyPositions1,logicalKeyPositions2,name);
    po.setFirstInput(input1);
    po.setSecondInput(input2);
    po.setDegreeOfParallelism(this.getParallelism());
    return po;
  }
 else {
    throw new UnsupportedOperationException("Unrecognized or incompatible key types.");
  }
}
