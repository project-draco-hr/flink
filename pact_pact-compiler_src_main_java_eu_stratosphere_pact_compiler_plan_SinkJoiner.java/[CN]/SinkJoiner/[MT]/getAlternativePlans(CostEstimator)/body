{
  List<? extends OptimizerNode> inPlans1=input1.getSourcePact().getAlternativePlans(estimator);
  List<? extends OptimizerNode> inPlans2=input2.getSourcePact().getAlternativePlans(estimator);
  List<SinkJoiner> outputPlans=new ArrayList<SinkJoiner>();
  for (  OptimizerNode pred1 : inPlans1) {
    for (    OptimizerNode pred2 : inPlans2) {
      if (!areBranchCompatible(pred1,pred2)) {
        continue;
      }
      SinkJoiner n=new SinkJoiner(this,pred1,pred2);
      estimator.costOperator(n);
      outputPlans.add(n);
    }
  }
  if (outputPlans.isEmpty()) {
    throw new CompilerException("Compiler Bug: Compiling plan with multiple sinks failed, " + "because no compatible sink candidates could be created.");
  }
  prunePlanAlternatives(outputPlans);
  return outputPlans;
}
