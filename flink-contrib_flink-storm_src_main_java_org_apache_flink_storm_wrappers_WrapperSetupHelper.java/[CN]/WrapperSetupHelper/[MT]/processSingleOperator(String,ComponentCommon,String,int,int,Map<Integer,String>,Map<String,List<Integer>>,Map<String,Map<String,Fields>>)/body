{
  final int parallelism_hint=common.get_parallelism_hint();
  Integer taskId=null;
  if (componentId.equals(operatorName)) {
    taskId=tid + index;
  }
  List<Integer> sortedTasks=new ArrayList<Integer>(dop);
  for (int i=0; i < parallelism_hint; ++i) {
    taskToComponents.put(tid,componentId);
    sortedTasks.add(tid);
    ++tid;
  }
  componentToSortedTasks.put(componentId,sortedTasks);
  Map<String,Fields> outputStreams=new HashMap<String,Fields>();
  for (  Entry<String,StreamInfo> outStream : common.get_streams().entrySet()) {
    outputStreams.put(outStream.getKey(),new Fields(outStream.getValue().get_output_fields()));
  }
  componentToStreamToFields.put(componentId,outputStreams);
  return taskId;
}
