{
  MutableHashTable<Value,VertexNeighbourPartial> table=null;
synchronized (MAGIC) {
    if (tables.get(iteration) == null) {
      if (firstRun) {
        int chunckSize=MATCH_CHUNCK_SIZE;
        joinMem=memoryManager.allocateStrict(this,(int)(memorySize / chunckSize),chunckSize);
        firstRun=false;
      }
      TypeAccessorsV2 buildAccess=new VertexPageRankAccessor();
      TypeAccessorsV2 probeAccess=new VertexNeighbourPartialAccessor();
      TypeComparator comp=new MatchComparator();
      if (iteration > 0) {
        tables.get(iteration - 1).close();
      }
      table=new MutableHashTable<Value,VertexNeighbourPartial>(buildAccess,probeAccess,comp,joinMem,ioManager,128,true);
      table.openParallel();
      tables.put(iteration,table);
      countFinnished.set(0);
    }
 else {
      table=tables.get(iteration);
    }
  }
  table.buildParallelInitialTable(iterationIter);
  int finnished=countFinnished.incrementAndGet();
  if (finnished == getEnvironment().getCurrentNumberOfSubtasks() / 4) {
    table.finnishParalle(EmptyMutableObjectIterator.<VertexNeighbourPartial>get());
  }
  iteration++;
}
