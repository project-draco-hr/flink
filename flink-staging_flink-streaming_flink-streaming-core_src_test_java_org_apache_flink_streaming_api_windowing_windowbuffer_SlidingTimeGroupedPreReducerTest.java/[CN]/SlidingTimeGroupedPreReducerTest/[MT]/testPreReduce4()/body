{
  TestCollector<StreamWindow<Integer>> collector=new TestCollector<StreamWindow<Integer>>();
  SlidingTimeGroupedPreReducer<Integer> preReducer=new SlidingTimeGroupedPreReducer<Integer>(reducer,serializer,key,3,2,new TimestampWrapper<Integer>(new Timestamp<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Integer value){
      return value;
    }
  }
,1));
  preReducer.store(1);
  preReducer.store(2);
  preReducer.emitWindow(collector);
  preReducer.store(3);
  preReducer.store(4);
  preReducer.evict(1);
  preReducer.emitWindow(collector);
  preReducer.evict(2);
  preReducer.store(5);
  preReducer.store(6);
  preReducer.emitWindow(collector);
  preReducer.evict(2);
  preReducer.store(7);
  preReducer.store(8);
  preReducer.emitWindow(collector);
  preReducer.evict(2);
  preReducer.emitWindow(collector);
  preReducer.emitWindow(collector);
  preReducer.evict(2);
  preReducer.store(14);
  preReducer.emitWindow(collector);
  preReducer.emitWindow(collector);
  preReducer.evict(1);
  preReducer.emitWindow(collector);
  preReducer.emitWindow(collector);
  preReducer.store(21);
  preReducer.emitWindow(collector);
  preReducer.evict(1);
  preReducer.emitWindow(collector);
  preReducer.store(9);
  List<StreamWindow<Integer>> expected=new ArrayList<StreamWindow<Integer>>();
  expected.add(StreamWindow.fromElements(1,2));
  expected.add(StreamWindow.fromElements(3,6));
  expected.add(StreamWindow.fromElements(5,10));
  expected.add(StreamWindow.fromElements(7,14));
  expected.add(StreamWindow.fromElements(8));
  expected.add(StreamWindow.fromElements(8));
  expected.add(StreamWindow.fromElements(14));
  expected.add(StreamWindow.fromElements(14));
  expected.add(StreamWindow.fromElements(21));
  checkResults(expected,collector.getCollected());
}
