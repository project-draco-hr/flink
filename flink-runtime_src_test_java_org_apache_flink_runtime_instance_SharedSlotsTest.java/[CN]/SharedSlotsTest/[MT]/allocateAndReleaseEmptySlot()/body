{
  try {
    JobID jobId=new JobID();
    JobVertexID vertexId=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(vertexId);
    SlotSharingGroupAssignment assignment=sharingGroup.getTaskAssignment();
    assertEquals(0,assignment.getNumberOfSlots());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vertexId));
    Instance instance=SchedulerTestUtils.getRandomInstance(2);
    assertEquals(2,instance.getTotalNumberOfSlots());
    assertEquals(0,instance.getNumberOfAllocatedSlots());
    assertEquals(2,instance.getNumberOfAvailableSlots());
    SharedSlot slot=instance.allocateSharedSlot(jobId,assignment);
    assertEquals(2,instance.getTotalNumberOfSlots());
    assertEquals(1,instance.getNumberOfAllocatedSlots());
    assertEquals(1,instance.getNumberOfAvailableSlots());
    assertTrue(slot.isAlive());
    assertFalse(slot.isCanceled());
    assertFalse(slot.isReleased());
    assertEquals(0,slot.getNumberLeaves());
    assertFalse(slot.hasChildren());
    assertTrue(slot.isRootAndEmpty());
    assertNotNull(slot.toString());
    assertTrue(slot.getSubSlots().isEmpty());
    assertEquals(0,slot.getSlotNumber());
    assertEquals(0,slot.getRootSlotNumber());
    slot.releaseSlot();
    assertTrue(slot.isCanceled());
    assertTrue(slot.isReleased());
    assertEquals(2,instance.getTotalNumberOfSlots());
    assertEquals(0,instance.getNumberOfAllocatedSlots());
    assertEquals(2,instance.getNumberOfAvailableSlots());
    assertEquals(0,assignment.getNumberOfSlots());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vertexId));
    assertNull(slot.allocateSharedSlot(new AbstractID()));
    assertNull(slot.allocateSubSlot(new AbstractID()));
    assertNull(assignment.addSharedSlotAndAllocateSubSlot(slot,Locality.NON_LOCAL,vertexId));
    assertEquals(0,assignment.getNumberOfSlots());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
