{
  try {
    JobID jobId=new JobID();
    JobVertexID vid1=new JobVertexID();
    JobVertexID vid2=new JobVertexID();
    JobVertexID vid3=new JobVertexID();
    JobVertexID vid4=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(vid1,vid2,vid3,vid4);
    SlotSharingGroupAssignment assignment=sharingGroup.getTaskAssignment();
    Instance instance=SchedulerTestUtils.getRandomInstance(1);
    SharedSlot sharedSlot=instance.allocateSharedSlot(jobId,assignment);
    SimpleSlot sub1=assignment.addSharedSlotAndAllocateSubSlot(sharedSlot,Locality.LOCAL,vid1);
    assertNotNull(sub1);
    assertNull(sub1.getExecutedVertex());
    assertEquals(Locality.LOCAL,sub1.getLocality());
    assertEquals(1,sub1.getNumberLeaves());
    assertEquals(vid1,sub1.getGroupID());
    assertEquals(instance.getTaskManagerID(),sub1.getTaskManagerID());
    assertEquals(jobId,sub1.getJobID());
    assertEquals(sharedSlot,sub1.getParent());
    assertEquals(sharedSlot,sub1.getRoot());
    assertEquals(0,sub1.getRootSlotNumber());
    assertEquals(0,sub1.getSlotNumber());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid1));
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid2));
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid3));
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid4));
    SimpleSlot sub2=assignment.getSlotForTask(vid2,NO_LOCATION);
    assertNotNull(sub2);
    assertNull(sub2.getExecutedVertex());
    assertEquals(Locality.UNCONSTRAINED,sub2.getLocality());
    assertEquals(1,sub2.getNumberLeaves());
    assertEquals(vid2,sub2.getGroupID());
    assertEquals(instance.getTaskManagerID(),sub2.getTaskManagerID());
    assertEquals(jobId,sub2.getJobID());
    assertEquals(sharedSlot,sub2.getParent());
    assertEquals(sharedSlot,sub2.getRoot());
    assertEquals(0,sub2.getRootSlotNumber());
    assertEquals(1,sub2.getSlotNumber());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid1));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid2));
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid3));
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid4));
    SimpleSlot sub3=assignment.getSlotForTask(vid3,Collections.singleton(instance.getTaskManagerLocation()));
    assertNotNull(sub3);
    assertNull(sub3.getExecutedVertex());
    assertEquals(Locality.LOCAL,sub3.getLocality());
    assertEquals(1,sub3.getNumberLeaves());
    assertEquals(vid3,sub3.getGroupID());
    assertEquals(instance.getTaskManagerID(),sub3.getTaskManagerID());
    assertEquals(jobId,sub3.getJobID());
    assertEquals(sharedSlot,sub3.getParent());
    assertEquals(sharedSlot,sub3.getRoot());
    assertEquals(0,sub3.getRootSlotNumber());
    assertEquals(2,sub3.getSlotNumber());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid1));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid2));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid3));
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid4));
    SimpleSlot sub4=assignment.getSlotForTask(vid4,Collections.singleton(SchedulerTestUtils.getRandomInstance(1).getTaskManagerLocation()));
    assertNotNull(sub4);
    assertNull(sub4.getExecutedVertex());
    assertEquals(Locality.NON_LOCAL,sub4.getLocality());
    assertEquals(1,sub4.getNumberLeaves());
    assertEquals(vid4,sub4.getGroupID());
    assertEquals(instance.getTaskManagerID(),sub4.getTaskManagerID());
    assertEquals(jobId,sub4.getJobID());
    assertEquals(sharedSlot,sub4.getParent());
    assertEquals(sharedSlot,sub4.getRoot());
    assertEquals(0,sub4.getRootSlotNumber());
    assertEquals(3,sub4.getSlotNumber());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid1));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid2));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid3));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid4));
    sharedSlot.releaseSlot();
    assertTrue(sharedSlot.isReleased());
    assertTrue(sub1.isReleased());
    assertTrue(sub2.isReleased());
    assertTrue(sub3.isReleased());
    assertTrue(sub4.isReleased());
    assertEquals(0,sharedSlot.getNumberLeaves());
    assertFalse(sharedSlot.hasChildren());
    assertEquals(1,instance.getNumberOfAvailableSlots());
    assertEquals(0,assignment.getNumberOfSlots());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid1));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid2));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid3));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid4));
    assertNull(sharedSlot.allocateSharedSlot(new AbstractID()));
    assertNull(sharedSlot.allocateSubSlot(new AbstractID()));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
