{
  try {
    JobID jobId=new JobID();
    JobVertexID vid1=new JobVertexID();
    JobVertexID vid2=new JobVertexID();
    JobVertexID vid3=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(vid1,vid2,vid3);
    SlotSharingGroupAssignment assignment=sharingGroup.getTaskAssignment();
    Instance instance=SchedulerTestUtils.getRandomInstance(1);
    SharedSlot sharedSlot=instance.allocateSharedSlot(jobId,assignment);
    SimpleSlot sub1=assignment.addSharedSlotAndAllocateSubSlot(sharedSlot,Locality.UNCONSTRAINED,vid1);
    SimpleSlot sub2=assignment.getSlotForTask(vid2,NO_LOCATION);
    SimpleSlot sub3=assignment.getSlotForTask(vid3,NO_LOCATION);
    assertNotNull(sub1);
    assertNotNull(sub2);
    assertNotNull(sub3);
    assertEquals(3,sharedSlot.getNumberLeaves());
    assertEquals(1,assignment.getNumberOfSlots());
    sub2.releaseSlot();
    assertTrue(sharedSlot.isAlive());
    assertTrue(sub1.isAlive());
    assertTrue(sub2.isReleased());
    assertTrue(sub3.isAlive());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid1));
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid2));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid3));
    assertEquals(1,assignment.getNumberOfSlots());
    assertEquals(2,sharedSlot.getNumberLeaves());
    sub1.releaseSlot();
    assertTrue(sharedSlot.isAlive());
    assertTrue(sub1.isReleased());
    assertTrue(sub2.isReleased());
    assertTrue(sub3.isAlive());
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid1));
    assertEquals(1,assignment.getNumberOfAvailableSlotsForGroup(vid2));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid3));
    assertEquals(1,assignment.getNumberOfSlots());
    assertEquals(1,sharedSlot.getNumberLeaves());
    sub3.releaseSlot();
    assertTrue(sharedSlot.isReleased());
    assertTrue(sub1.isReleased());
    assertTrue(sub2.isReleased());
    assertTrue(sub3.isReleased());
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid1));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid2));
    assertEquals(0,assignment.getNumberOfAvailableSlotsForGroup(vid3));
    assertEquals(0,assignment.getNumberOfSlots());
    assertEquals(1,instance.getNumberOfAvailableSlots());
    assertEquals(0,assignment.getNumberOfSlots());
    assertNull(sharedSlot.allocateSharedSlot(new AbstractID()));
    assertNull(sharedSlot.allocateSubSlot(new AbstractID()));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
