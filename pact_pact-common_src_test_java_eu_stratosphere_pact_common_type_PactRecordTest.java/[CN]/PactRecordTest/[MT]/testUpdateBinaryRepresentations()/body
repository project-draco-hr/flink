{
  try {
    PactRecord r=new PactRecord();
    PactInteger i1=new PactInteger(1);
    PactInteger i2=new PactInteger(2);
    try {
      r.setField(1,i1);
      r.setField(3,i2);
      r.setNumFields(5);
      r.updateBinaryRepresenation();
      i1=new PactInteger(3);
      i2=new PactInteger(4);
      r.setField(7,i1);
      r.setField(8,i2);
      r.updateBinaryRepresenation();
      assertTrue(r.getField(1,PactInteger.class).getValue() == 1);
      assertTrue(r.getField(3,PactInteger.class).getValue() == 2);
      assertTrue(r.getField(7,PactInteger.class).getValue() == 3);
      assertTrue(r.getField(8,PactInteger.class).getValue() == 4);
    }
 catch (    RuntimeException re) {
      fail("Error updating binary representation: " + re.getMessage());
    }
    r=new PactRecord();
    for (int i=0; i < 8; i++) {
      r.setField(i,new PactInteger(i));
    }
    try {
      r.write(out);
      r=new PactRecord();
      r.read(in);
      r.setField(1,new PactInteger(10));
      r.setField(4,new PactString("Some long value"));
      r.setField(5,new PactString("An even longer value"));
      r.setField(10,new PactInteger(10));
      r.write(out);
      r=new PactRecord();
      r.read(in);
      assertTrue(r.getField(0,PactInteger.class).getValue() == 0);
      assertTrue(r.getField(1,PactInteger.class).getValue() == 10);
      assertTrue(r.getField(2,PactInteger.class).getValue() == 2);
      assertTrue(r.getField(3,PactInteger.class).getValue() == 3);
      assertTrue(r.getField(4,PactString.class).getValue().equals("Some long value"));
      assertTrue(r.getField(5,PactString.class).getValue().equals("An even longer value"));
      assertTrue(r.getField(6,PactInteger.class).getValue() == 6);
      assertTrue(r.getField(7,PactInteger.class).getValue() == 7);
      assertTrue(r.getField(8,PactInteger.class) == null);
      assertTrue(r.getField(9,PactInteger.class) == null);
      assertTrue(r.getField(10,PactInteger.class).getValue() == 10);
    }
 catch (    RuntimeException re) {
      fail("Error updating binary representation: " + re.getMessage());
    }
catch (    IOException e) {
      fail("Error updating binary representation: " + e.getMessage());
    }
  }
 catch (  Throwable t) {
    Assert.fail("Test failed due to an exception: " + t.getMessage());
  }
}
