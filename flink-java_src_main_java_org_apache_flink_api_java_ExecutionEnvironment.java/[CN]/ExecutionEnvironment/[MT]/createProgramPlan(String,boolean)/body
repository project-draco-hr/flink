{
  if (this.sinks.isEmpty()) {
    throw new RuntimeException("No data sinks have been created yet. A program needs at least one sink that consumes data. Examples are writing the data set or printing it.");
  }
  if (jobName == null) {
    jobName=getDefaultName();
  }
  OperatorTranslation translator=new OperatorTranslation();
  JavaPlan plan=translator.translateToPlan(this.sinks,jobName);
  if (getParallelism() > 0) {
    plan.setDefaultParallelism(getParallelism());
  }
  plan.setExecutionConfig(getConfig());
  plan.accept(new Visitor<org.apache.flink.api.common.operators.Operator<?>>(){
    @Override public boolean preVisit(    org.apache.flink.api.common.operators.Operator<?> visitable){
      OperatorInformation<?> opInfo=visitable.getOperatorInfo();
      TypeInformation<?> typeInfo=opInfo.getOutputType();
      if (typeInfo instanceof GenericTypeInfo) {
        GenericTypeInfo<?> genericTypeInfo=(GenericTypeInfo<?>)typeInfo;
        if (!config.isAutoTypeRegistrationDisabled()) {
          Serializers.recursivelyRegisterType(genericTypeInfo.getTypeClass(),config);
        }
      }
      if (typeInfo instanceof CompositeType) {
        List<GenericTypeInfo<?>> genericTypesInComposite=new ArrayList<GenericTypeInfo<?>>();
        Utils.getContainedGenericTypes((CompositeType)typeInfo,genericTypesInComposite);
        for (        GenericTypeInfo<?> gt : genericTypesInComposite) {
          Serializers.recursivelyRegisterType(gt.getTypeClass(),config);
        }
      }
      return true;
    }
    @Override public void postVisit(    org.apache.flink.api.common.operators.Operator<?> visitable){
    }
  }
);
  try {
    registerCachedFilesWithPlan(plan);
  }
 catch (  Exception e) {
    throw new RuntimeException("Error while registering cached files: " + e.getMessage(),e);
  }
  if (clearSinks) {
    this.sinks.clear();
  }
  int registeredTypes=config.getRegisteredKryoTypes().size() + config.getRegisteredPojoTypes().size() + config.getRegisteredTypesWithKryoSerializerClasses().size()+ config.getRegisteredTypesWithKryoSerializers().size();
  int defaultKryoSerializers=config.getDefaultKryoSerializers().size() + config.getDefaultKryoSerializerClasses().size();
  LOG.info("The job has {} registered types and {} default Kryo serializers",registeredTypes,defaultKryoSerializers);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Registered Kryo types: {}",Joiner.on(',').join(config.getRegisteredKryoTypes()));
    LOG.debug("Registered Kryo with Serializers types: {}",Joiner.on(',').join(config.getRegisteredTypesWithKryoSerializers()));
    LOG.debug("Registered Kryo with Serializer Classes types: {}",Joiner.on(',').join(config.getRegisteredTypesWithKryoSerializerClasses()));
    LOG.debug("Registered Kryo default Serializers: {}",Joiner.on(',').join(config.getDefaultKryoSerializers()));
    LOG.debug("Registered Kryo default Serializers Classes {}",Joiner.on(',').join(config.getDefaultKryoSerializerClasses()));
    LOG.debug("Registered POJO types: {}",Joiner.on(',').join(config.getRegisteredPojoTypes()));
  }
  return plan;
}
