{
  final Class<? extends Stub> stubClass=this.getStubClass();
  if (stubClass == null)   throw new IllegalStateException("no implementing stub found");
  final Class<? extends Contract> contractClass=ContractUtil.getContractClass(stubClass);
  if (contractClass == null)   throw new IllegalStateException("no associated contract found");
  try {
    if (contractClass == ReduceContract.class) {
      int[] keyIndices=this.getKeyIndices(globalSchema,this.getKeyExpressions(0));
      return new ReduceContract((Class<? extends ReduceStub>)stubClass,this.getKeyClasses(globalSchema,keyIndices),keyIndices,this.toString());
    }
 else     if (contractClass == CoGroupContract.class) {
      int[] keyIndices1=this.getKeyIndices(globalSchema,this.getKeyExpressions(0));
      int[] keyIndices2=this.getKeyIndices(globalSchema,this.getKeyExpressions(1));
      return new CoGroupContract((Class<? extends CoGroupStub>)stubClass,this.getCommonKeyClasses(globalSchema,keyIndices1,keyIndices2),keyIndices1,keyIndices2,this.toString());
    }
 else     if (contractClass == MatchContract.class) {
      int[] keyIndices1=this.getKeyIndices(globalSchema,this.getKeyExpressions(0));
      int[] keyIndices2=this.getKeyIndices(globalSchema,this.getKeyExpressions(1));
      return new MatchContract((Class<? extends MatchStub>)stubClass,this.getCommonKeyClasses(globalSchema,keyIndices1,keyIndices2),keyIndices1,keyIndices2,this.toString());
    }
    return ReflectUtil.newInstance(contractClass,stubClass,this.toString());
  }
 catch (  final Exception e) {
    throw new IllegalStateException("Cannot create contract from stub " + stubClass,e);
  }
}
