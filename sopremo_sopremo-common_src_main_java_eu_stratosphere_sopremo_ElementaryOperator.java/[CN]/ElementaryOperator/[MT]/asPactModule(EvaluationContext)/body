{
  final Contract contract=this.getContract(context.getInputSchema(0));
  context.setResultProjection(this.resultProjection);
  this.configureContract(contract,contract.getParameters(),context);
  final List<List<Contract>> inputLists=ContractUtil.getInputs(contract);
  final List<Contract> distinctInputs=new IdentityList<Contract>();
  for (  final List<Contract> inputs : inputLists) {
    if (inputs.isEmpty())     inputs.add(new MapContract.Builder(IdentityMap.class).build());
    for (    final Contract input : inputs)     if (!distinctInputs.contains(input))     distinctInputs.add(input);
  }
  final PactModule module=new PactModule(this.toString(),distinctInputs.size(),1);
  for (  final List<Contract> inputs : inputLists)   for (int index=0; index < inputs.size(); index++)   inputs.set(index,module.getInput(distinctInputs.indexOf(inputs.get(index))));
  ContractUtil.setInputs(contract,inputLists);
  module.getOutput(0).addInput(contract);
  return module;
}
