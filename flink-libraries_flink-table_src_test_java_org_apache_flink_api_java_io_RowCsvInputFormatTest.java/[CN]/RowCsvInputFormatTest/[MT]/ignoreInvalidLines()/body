{
  try {
    String fileContent="#description of the data\n" + "header1|header2|header3|\n" + "this is|1|2.0|\n"+ "//a comment\n"+ "a test|3|4.0|\n"+ "#next|5|6.0|\n";
    FileInputSplit split=createTempFile(fileContent);
    RowTypeInfo typeInfo=new RowTypeInfo(new TypeInformation<?>[]{BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.DOUBLE_TYPE_INFO});
    CsvInputFormat<Row> format=new RowCsvInputFormat(PATH,"\n","|",typeInfo);
    format.setLenient(false);
    Configuration parameters=new Configuration();
    format.configure(parameters);
    format.open(split);
    Row result=new Row(3);
    try {
      result=format.nextRecord(result);
      fail("Parse Exception was not thrown! (Row too short)");
    }
 catch (    ParseException ex) {
    }
    try {
      result=format.nextRecord(result);
      fail("Parse Exception was not thrown! (Invalid int value)");
    }
 catch (    ParseException ex) {
    }
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals("this is",result.productElement(0));
    assertEquals(new Integer(1),result.productElement(1));
    assertEquals(new Double(2.0),result.productElement(2));
    try {
      result=format.nextRecord(result);
      fail("Parse Exception was not thrown! (Row too short)");
    }
 catch (    ParseException ex) {
    }
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals("a test",result.productElement(0));
    assertEquals(new Integer(3),result.productElement(1));
    assertEquals(new Double(4.0),result.productElement(2));
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals("#next",result.productElement(0));
    assertEquals(new Integer(5),result.productElement(1));
    assertEquals(new Double(6.0),result.productElement(2));
    result=format.nextRecord(result);
    assertNull(result);
    format.setLenient(true);
    format.configure(parameters);
    format.open(split);
    result=new Row(3);
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals("header1",result.productElement(0));
    assertNull(result.productElement(1));
    assertNull(result.productElement(2));
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals("this is",result.productElement(0));
    assertEquals(new Integer(1),result.productElement(1));
    assertEquals(new Double(2.0),result.productElement(2));
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals("a test",result.productElement(0));
    assertEquals(new Integer(3),result.productElement(1));
    assertEquals(new Double(4.0),result.productElement(2));
    result=format.nextRecord(result);
    assertNotNull(result);
    assertEquals("#next",result.productElement(0));
    assertEquals(new Integer(5),result.productElement(1));
    assertEquals(new Double(6.0),result.productElement(2));
    result=format.nextRecord(result);
    assertNull(result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Test failed due to a " + ex.getClass().getName() + ": "+ ex.getMessage());
  }
}
