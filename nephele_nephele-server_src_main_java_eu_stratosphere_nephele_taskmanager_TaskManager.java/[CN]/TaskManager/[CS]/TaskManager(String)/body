{
  GlobalConfiguration.loadConfiguration(configDir);
  final String address=GlobalConfiguration.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null);
  InetSocketAddress jobManagerAddress=null;
  if (address == null) {
    LOG.info("Using discovery service to locate job manager");
    try {
      jobManagerAddress=DiscoveryService.getJobManagerAddress();
    }
 catch (    DiscoveryException e) {
      throw new Exception("Failed to locate job manager via discovery: " + e.getMessage(),e);
    }
  }
 else {
    LOG.info("Reading location of job manager from configuration");
    final int port=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
    try {
      final InetAddress tmpAddress=InetAddress.getByName(address);
      jobManagerAddress=new InetSocketAddress(tmpAddress,port);
    }
 catch (    UnknownHostException e) {
      throw new Exception("Failed to locate job manager based on configuration: " + e.getMessage(),e);
    }
  }
  LOG.info("Determined address of job manager to be " + jobManagerAddress);
  final int ipcPort=GlobalConfiguration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_TASK_MANAGER_IPC_PORT);
  final int dataPort=GlobalConfiguration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT);
  InetAddress taskManagerAddress=null;
  try {
    taskManagerAddress=DiscoveryService.getTaskManagerAddress(jobManagerAddress.getAddress());
  }
 catch (  DiscoveryException e) {
    throw new Exception("Failed to initialize discovery service. " + e.getMessage(),e);
  }
  this.localInstanceConnectionInfo=new InstanceConnectionInfo(taskManagerAddress,ipcPort,dataPort);
  LOG.info("Announcing connection information " + this.localInstanceConnectionInfo + " to job manager");
  JobManagerProtocol jobManager=null;
  try {
    jobManager=(JobManagerProtocol)RPC.getProxy(JobManagerProtocol.class,jobManagerAddress,NetUtils.getSocketFactory());
  }
 catch (  IOException e) {
    LOG.error(StringUtils.stringifyException(e));
    throw new Exception("Failed to initialize connection to JobManager. " + e.getMessage(),e);
  }
  this.jobManager=jobManager;
  ChannelLookupProtocol lookupService=null;
  try {
    lookupService=(ChannelLookupProtocol)RPC.getProxy(ChannelLookupProtocol.class,jobManagerAddress,NetUtils.getSocketFactory());
  }
 catch (  IOException e) {
    LOG.error(StringUtils.stringifyException(e));
    throw new Exception("Failed to initialize channel lookup protocol. " + e.getMessage(),e);
  }
  this.lookupService=lookupService;
  Server taskManagerServer=null;
  try {
    taskManagerServer=RPC.getServer(this,taskManagerAddress.getHostName(),ipcPort,handlerCount,false);
    taskManagerServer.start();
  }
 catch (  IOException e) {
    LOG.error(StringUtils.stringifyException(e));
    throw new Exception("Failed to taskmanager server. " + e.getMessage(),e);
  }
  this.taskManagerServer=taskManagerServer;
  if (GlobalConfiguration.getBoolean(ProfilingUtils.ENABLE_PROFILING_KEY,false)) {
    final String profilerClassName=GlobalConfiguration.getString(ProfilingUtils.TASKMANAGER_CLASSNAME_KEY,null);
    if (profilerClassName == null) {
      LOG.error("Cannot find class name for the profiler.");
      throw new Exception("Cannot find class name for the profiler.");
    }
    this.profiler=ProfilingUtils.loadTaskManagerProfiler(profilerClassName,jobManagerAddress.getAddress(),this.localInstanceConnectionInfo);
  }
 else {
    this.profiler=null;
    LOG.debug("Profiler disabled");
  }
  final String tmpDirPath=GlobalConfiguration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH);
  ByteBufferedChannelManager byteBufferedChannelManager=null;
  try {
    byteBufferedChannelManager=new ByteBufferedChannelManager(this.lookupService,this.localInstanceConnectionInfo.getAddress(),this.localInstanceConnectionInfo.getDataPort(),tmpDirPath);
  }
 catch (  IOException ioe) {
    LOG.error(StringUtils.stringifyException(ioe));
    throw new Exception("Failed to instantiate Byte-buffered channel manager. " + ioe.getMessage(),ioe);
  }
  this.byteBufferedChannelManager=byteBufferedChannelManager;
  this.directChannelManager=new DirectChannelManager();
  this.checkpointManager=new CheckpointManager(this.byteBufferedChannelManager,tmpDirPath);
  HardwareDescription hardware=HardwareDescriptionFactory.extractFromSystem();
  if (hardware == null) {
    LOG.warn("Cannot determine hardware description");
  }
  long memorySize=GlobalConfiguration.getInteger(ConfigConstants.MEMORY_MANAGER_AVAILABLE_MEMORY_SIZE_KEY,-1);
  if (memorySize > 0) {
    hardware=HardwareDescriptionFactory.construct(hardware.getNumberOfCPUCores(),hardware.getSizeOfPhysicalMemory(),memorySize * 1024L * 1024L);
  }
  this.hardwareDescription=hardware;
  LOG.info("Initializing memory manager with " + (hardware.getSizeOfFreeMemory() >>> 20) + " megabytes of memory");
  this.memoryManager=new DefaultMemoryManager(hardware.getSizeOfFreeMemory());
  this.ioManager=new IOManager(tmpDirPath);
  Runtime.getRuntime().addShutdownHook(new TaskManagerCleanUp(this));
}
