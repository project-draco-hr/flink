{
  final List<TaskSubmissionResult> submissionResultList=new SerializableArrayList<TaskSubmissionResult>();
  final List<Task> tasksToStart=new ArrayList<Task>();
  for (  final TaskDeploymentDescriptor tdd : tasks) {
    final JobID jobID=tdd.getJobID();
    final ExecutionVertexID vertexID=tdd.getVertexID();
    RuntimeEnvironment re;
    try {
      re=new RuntimeEnvironment(tdd,this.memoryManager,this.ioManager,new TaskInputSplitProvider(jobID,vertexID,this.globalInputSplitProvider));
    }
 catch (    Throwable t) {
      final TaskSubmissionResult result=new TaskSubmissionResult(vertexID,AbstractTaskResult.ReturnCode.DEPLOYMENT_ERROR);
      result.setDescription(StringUtils.stringifyException(t));
      LOG.error(result.getDescription());
      submissionResultList.add(result);
      continue;
    }
    final Configuration jobConfiguration=tdd.getJobConfiguration();
    final CheckpointState initialCheckpointState=tdd.getInitialCheckpointState();
    final Set<ChannelID> activeOutputChannels=null;
    final Task task=createAndRegisterTask(vertexID,jobConfiguration,re,initialCheckpointState,activeOutputChannels);
    if (task == null) {
      final TaskSubmissionResult result=new TaskSubmissionResult(vertexID,AbstractTaskResult.ReturnCode.TASK_NOT_FOUND);
      result.setDescription("Task " + re.getTaskNameWithIndex() + " ("+ vertexID+ ") was already running");
      LOG.error(result.getDescription());
      submissionResultList.add(result);
    }
 else {
      submissionResultList.add(new TaskSubmissionResult(vertexID,AbstractTaskResult.ReturnCode.SUCCESS));
      tasksToStart.add(task);
    }
  }
  for (  final Task task : tasksToStart) {
    task.startExecution();
  }
  return submissionResultList;
}
