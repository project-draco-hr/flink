{
  if (!type.isTupleType()) {
    throw new InvalidProgramException("Specifying keys via field positions is only valid for tuple data types");
  }
  if (!allowEmpty && (groupingFields == null || groupingFields.length == 0)) {
    throw new IllegalArgumentException("The grouping fields must not be empty.");
  }
  TupleTypeInfo<?> tupleType=(TupleTypeInfo<?>)type;
  this.fieldPositions=makeFields(groupingFields,(TupleTypeInfo<?>)type);
  types=new TypeInformation[this.fieldPositions.length];
  for (int i=0; i < this.fieldPositions.length; i++) {
    types[i]=tupleType.getTypeAt(this.fieldPositions[i]);
  }
}
