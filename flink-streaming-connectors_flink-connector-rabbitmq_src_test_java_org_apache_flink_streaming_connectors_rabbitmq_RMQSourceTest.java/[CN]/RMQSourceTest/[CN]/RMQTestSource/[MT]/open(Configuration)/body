{
  super.open(config);
  consumer=Mockito.mock(QueueingConsumer.class);
  final QueueingConsumer.Delivery deliveryMock=Mockito.mock(QueueingConsumer.Delivery.class);
  Mockito.when(deliveryMock.getBody()).thenReturn("test".getBytes());
  try {
    Mockito.when(consumer.nextDelivery()).thenReturn(deliveryMock);
  }
 catch (  InterruptedException e) {
    fail("Couldn't setup up deliveryMock");
  }
  Envelope envelope=Mockito.mock(Envelope.class);
  Mockito.when(deliveryMock.getEnvelope()).thenReturn(envelope);
  Mockito.when(envelope.getDeliveryTag()).thenAnswer(new Answer<Long>(){
    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {
      return ++messageId;
    }
  }
);
  AMQP.BasicProperties props=Mockito.mock(AMQP.BasicProperties.class);
  Mockito.when(deliveryMock.getProperties()).thenReturn(props);
  Mockito.when(props.getCorrelationId()).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      return generateCorrelationIds ? "" + messageId : null;
    }
  }
);
}
