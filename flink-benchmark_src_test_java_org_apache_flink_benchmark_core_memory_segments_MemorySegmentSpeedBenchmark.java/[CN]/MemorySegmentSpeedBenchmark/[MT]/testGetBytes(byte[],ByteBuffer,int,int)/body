{
  TestRunner pureHeapRunner=new TestRunner(){
    @Override public long runTest(){
      fillOnHeap(heapMemory,(byte)0);
      PureHeapMemorySegment seg=new PureHeapMemorySegment(heapMemory);
      return timeGetBytesOnHeap(seg,numValues,rounds);
    }
  }
;
  TestRunner pureHybridHeapRunner=new TestRunner(){
    @Override public long runTest(){
      fillOnHeap(heapMemory,(byte)0);
      PureHybridMemorySegment seg=new PureHybridMemorySegment(heapMemory);
      return timeGetBytesHybrid(seg,numValues,rounds);
    }
  }
;
  TestRunner pureHybridOffHeapRunner=new TestRunner(){
    @Override public long runTest(){
      fillOffHeap(offHeapMemory,(byte)0);
      PureHybridMemorySegment seg=new PureHybridMemorySegment(offHeapMemory);
      return timeGetBytesHybrid(seg,numValues,rounds);
    }
  }
;
  TestRunner coreHeapRunner=new TestRunner(){
    @Override public long runTest(){
      fillOnHeap(heapMemory,(byte)0);
      MemorySegment seg=HeapMemorySegment.FACTORY.wrapPooledHeapMemory(heapMemory,null);
      return timeGetBytesAbstract(seg,numValues,rounds);
    }
  }
;
  TestRunner coreHybridHeapRunner=new TestRunner(){
    @Override public long runTest(){
      fillOnHeap(heapMemory,(byte)0);
      MemorySegment seg=HybridMemorySegment.FACTORY.wrapPooledHeapMemory(heapMemory,null);
      return timeGetBytesAbstract(seg,numValues,rounds);
    }
  }
;
  TestRunner coreHybridOffHeapRunner=new TestRunner(){
    @Override public long runTest(){
      fillOffHeap(offHeapMemory,(byte)0);
      MemorySegment seg=HybridMemorySegment.FACTORY.wrapPooledOffHeapMemory(offHeapMemory,null);
      return timeGetBytesAbstract(seg,numValues,rounds);
    }
  }
;
  TestRunner[] tests={TEST_CORE_ON_HEAP ? coreHeapRunner : null,TEST_CORE_OFF_HEAP ? coreHybridHeapRunner : null,TEST_CORE_OFF_HEAP ? coreHybridOffHeapRunner : null,pureHeapRunner,pureHybridHeapRunner,pureHybridOffHeapRunner};
  long[] results=runTestsInRandomOrder(tests,new Random(),5,true);
  System.out.println(String.format("Reading %d x %d bytes from %d bytes segment: " + "\n\theap=%,d msecs" + "\n\thybrid-on-heap=%,d msecs"+ "\n\thybrid-off-heap=%,d msecs"+ "\n\tspecialized heap=%,d msecs, "+ "\n\tspecialized-hybrid-heap=%,d msecs, "+ "\n\tspecialized-hybrid-off-heap=%,d msecs, ",rounds,numValues,heapMemory.length,(results[0] / 1000000),(results[1] / 1000000),(results[2] / 1000000),(results[3] / 1000000),(results[4] / 1000000),(results[5] / 1000000)));
}
