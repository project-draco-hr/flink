{
  Preconditions.checkNotNull(other);
  Preconditions.checkNotNull(biFunction);
  Preconditions.checkNotNull(executor);
  final ExecutionContext executionContext=createExecutionContext(executor);
  final scala.concurrent.Future<U> thatScalaFuture;
  if (other instanceof FlinkFuture) {
    thatScalaFuture=((FlinkFuture<U>)other).scalaFuture;
  }
 else {
    thatScalaFuture=Futures.future(new Callable<U>(){
      @Override public U call() throws Exception {
        try {
          return other.get();
        }
 catch (        ExecutionException e) {
          if (e.getCause() instanceof Exception) {
            throw (Exception)e.getCause();
          }
 else {
            throw new FlinkFuture.ThrowableWrapperException(e.getCause());
          }
        }
      }
    }
,executionContext);
  }
  scala.concurrent.Future<R> result=scalaFuture.zip(thatScalaFuture).map(new Mapper<Tuple2<T,U>,R>(){
    @Override public R apply(    Tuple2<T,U> tuple2){
      return biFunction.apply(tuple2._1,tuple2._2);
    }
  }
,executionContext);
  return new FlinkFuture<>(result);
}
