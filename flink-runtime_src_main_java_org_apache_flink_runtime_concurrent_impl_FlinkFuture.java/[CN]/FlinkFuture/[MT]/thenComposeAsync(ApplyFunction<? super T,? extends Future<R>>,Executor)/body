{
  Preconditions.checkNotNull(scalaFuture);
  Preconditions.checkNotNull(applyFunction);
  Preconditions.checkNotNull(executor);
  final ExecutionContext executionContext=createExecutionContext(executor);
  scala.concurrent.Future<R> flatMappedFuture=scalaFuture.flatMap(new Mapper<T,scala.concurrent.Future<R>>(){
    @Override public scala.concurrent.Future<R> apply(    T value){
      final Future<? extends R> future=applyFunction.apply(value);
      if (future instanceof FlinkFuture) {
        @SuppressWarnings("unchecked") FlinkFuture<R> flinkFuture=(FlinkFuture<R>)future;
        return flinkFuture.scalaFuture;
      }
 else {
        return Futures.future(new Callable<R>(){
          @Override public R call() throws Exception {
            try {
              return future.get();
            }
 catch (            ExecutionException e) {
              if (e.getCause() instanceof Exception) {
                throw (Exception)e.getCause();
              }
 else {
                throw new FlinkFuture.ThrowableWrapperException(e.getCause());
              }
            }
          }
        }
,executionContext);
      }
    }
  }
,executionContext);
  return new FlinkFuture<>(flatMappedFuture);
}
