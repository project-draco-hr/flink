{
  Preconditions.checkNotNull(scalaFuture);
  Preconditions.checkNotNull(exceptionallyFunction);
  Preconditions.checkNotNull(executor);
  scala.concurrent.Future<R> recoveredFuture=scalaFuture.recover(new Recover<R>(){
    @Override public R recover(    Throwable failure) throws Throwable {
      return exceptionallyFunction.apply(failure);
    }
  }
,createExecutionContext(executor));
  return new FlinkFuture<>(recoveredFuture);
}
