{
  Preconditions.checkNotNull(scalaFuture);
  Preconditions.checkNotNull(biFunction);
  Preconditions.checkNotNull(executor);
  final ExecutionContext executionContext=createExecutionContext(executor);
  scala.concurrent.Future<R> mappedFuture=scalaFuture.map(new Mapper<T,R>(){
    @Override public R checkedApply(    T value) throws Exception {
      try {
        return biFunction.apply(value,null);
      }
 catch (      Throwable t) {
        throw new FlinkFuture.WrapperException(t);
      }
    }
  }
,executionContext);
  scala.concurrent.Future<R> recoveredFuture=mappedFuture.recover(new Recover<R>(){
    @Override public R recover(    Throwable failure) throws Throwable {
      if (failure instanceof FlinkFuture.WrapperException) {
        throw failure.getCause();
      }
 else {
        return biFunction.apply(null,failure);
      }
    }
  }
,executionContext);
  return new FlinkFuture<>(recoveredFuture);
}
