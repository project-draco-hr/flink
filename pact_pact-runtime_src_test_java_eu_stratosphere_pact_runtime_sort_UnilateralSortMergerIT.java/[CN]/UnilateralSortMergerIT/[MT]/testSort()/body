{
  final SerializationFactory<TestData.Key> keySerialization=new WritableSerializationFactory<TestData.Key>(TestData.Key.class);
  final SerializationFactory<TestData.Value> valSerialization=new WritableSerializationFactory<TestData.Value>(TestData.Value.class);
  final Comparator<TestData.Key> keyComparator=new TestData.KeyComparator();
  MockRecordReader<KeyValuePair<TestData.Key,TestData.Value>> reader=new MockRecordReader<KeyValuePair<TestData.Key,TestData.Value>>();
  LOG.info("initializing sortmerger");
  SortMerger<TestData.Key,TestData.Value> merger=new UnilateralSortMerger<TestData.Key,TestData.Value>(memoryManager,ioManager,1,1024 * 1024 * 4,1024 * 1024 * 12,2,keySerialization,valSerialization,keyComparator,reader,OFFSETS_PERCENTAGE,null);
  Iterator<KeyValuePair<TestData.Key,TestData.Value>> iterator=merger.getIterator();
  LOG.info("emitting data");
  TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.FIX_LENGTH);
  for (int i=0; i < NUM_PAIRS; i++) {
    reader.emit(generator.next());
  }
  reader.close();
  LOG.info("checking results");
  int pairsEmitted=0;
  KeyValuePair<TestData.Key,TestData.Value> pair1=null;
  while (iterator.hasNext()) {
    pairsEmitted++;
    KeyValuePair<TestData.Key,TestData.Value> pair2=iterator.next();
    if (pair1 != null && pair2 != null) {
      Assert.assertTrue(keyComparator.compare(pair1.getKey(),pair2.getKey()) <= 0);
    }
    pair1=pair2;
  }
  Assert.assertTrue(NUM_PAIRS == pairsEmitted);
}
