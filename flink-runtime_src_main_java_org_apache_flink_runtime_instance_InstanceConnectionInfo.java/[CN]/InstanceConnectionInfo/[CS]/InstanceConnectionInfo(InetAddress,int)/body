{
  if (inetAddress == null) {
    throw new IllegalArgumentException("Argument inetAddress must not be null");
  }
  if (dataPort <= 0) {
    throw new IllegalArgumentException("Argument dataPort must be greater than zero");
  }
  this.dataPort=dataPort;
  this.inetAddress=inetAddress;
  try {
    this.fqdnHostName=this.inetAddress.getCanonicalHostName();
  }
 catch (  Throwable t) {
    LOG.warn("Unable to determine the canonical hostname. Input split assignment (such as " + "for HDFS files) may be non-local when the canonical hostname is missing.");
    LOG.debug("getCanonicalHostName() Exception:",t);
    this.fqdnHostName=this.inetAddress.getHostAddress();
  }
  if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {
    this.hostName=this.fqdnHostName;
    LOG.warn("No hostname could be resolved for the IP address {}, using IP address as host name. " + "Local input split assignment (such as for HDFS files) may be impacted.",this.inetAddress.getHostAddress());
  }
 else {
    this.hostName=NetUtils.getHostnameFromFQDN(this.fqdnHostName);
  }
}
