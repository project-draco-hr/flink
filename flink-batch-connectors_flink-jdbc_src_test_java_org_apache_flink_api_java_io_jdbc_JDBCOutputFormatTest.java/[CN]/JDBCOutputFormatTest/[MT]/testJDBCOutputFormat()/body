{
  jdbcOutputFormat=JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(DRIVER_CLASS).setDBUrl(DB_URL).setQuery(String.format(INSERT_TEMPLATE,OUTPUT_TABLE)).finish();
  jdbcOutputFormat.open(0,1);
  for (int i=0; i < testData.length; i++) {
    Row row=new Row(testData[i].length);
    for (int j=0; j < testData[i].length; j++) {
      row.setField(j,testData[i][j]);
    }
    jdbcOutputFormat.writeRecord(row);
  }
  jdbcOutputFormat.close();
  try (Connection dbConn=DriverManager.getConnection(JDBCTestBase.DB_URL);PreparedStatement statement=dbConn.prepareStatement(JDBCTestBase.SELECT_ALL_NEWBOOKS);ResultSet resultSet=statement.executeQuery()){
    int recordCount=0;
    while (resultSet.next()) {
      Row row=new Row(tuple5.getArity());
      for (int i=0; i < tuple5.getArity(); i++) {
        row.setField(i,resultSet.getObject(i + 1));
      }
      if (row.productElement(0) != null) {
        Assert.assertEquals("Field 0 should be int",Integer.class,row.productElement(0).getClass());
      }
      if (row.productElement(1) != null) {
        Assert.assertEquals("Field 1 should be String",String.class,row.productElement(1).getClass());
      }
      if (row.productElement(2) != null) {
        Assert.assertEquals("Field 2 should be String",String.class,row.productElement(2).getClass());
      }
      if (row.productElement(3) != null) {
        Assert.assertEquals("Field 3 should be float",Double.class,row.productElement(3).getClass());
      }
      if (row.productElement(4) != null) {
        Assert.assertEquals("Field 4 should be int",Integer.class,row.productElement(4).getClass());
      }
      for (int x=0; x < tuple5.getArity(); x++) {
        if (JDBCTestBase.testData[recordCount][x] != null) {
          Assert.assertEquals(JDBCTestBase.testData[recordCount][x],row.productElement(x));
        }
      }
      recordCount++;
    }
    Assert.assertEquals(JDBCTestBase.testData.length,recordCount);
  }
 catch (  SQLException e) {
    Assert.fail("JDBC OutputFormat test failed. " + e.getMessage());
  }
}
