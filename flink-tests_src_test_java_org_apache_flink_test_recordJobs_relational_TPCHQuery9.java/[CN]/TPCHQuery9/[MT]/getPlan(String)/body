{
  if (args.length != 8) {
    LOG.warn("number of arguments do not match!");
    this.parallelism=1;
    this.partInputPath="";
    this.partSuppInputPath="";
    this.ordersInputPath="";
    this.lineItemInputPath="";
    this.supplierInputPath="";
    this.nationInputPath="";
    this.outputPath="";
  }
 else {
    this.parallelism=Integer.parseInt(args[0]);
    this.partInputPath=args[1];
    this.partSuppInputPath=args[2];
    this.ordersInputPath=args[3];
    this.lineItemInputPath=args[4];
    this.supplierInputPath=args[5];
    this.nationInputPath=args[6];
    this.outputPath=args[7];
  }
  FileDataSource partInput=new FileDataSource(new IntTupleDataInFormat(),this.partInputPath,"\"part\" source");
  FileDataSource partSuppInput=new FileDataSource(new IntTupleDataInFormat(),this.partSuppInputPath,"\"partsupp\" source");
  FileDataSource ordersInput=new FileDataSource(new IntTupleDataInFormat(),this.ordersInputPath,"\"orders\" source");
  FileDataSource lineItemInput=new FileDataSource(new IntTupleDataInFormat(),this.lineItemInputPath,"\"lineitem\" source");
  FileDataSource supplierInput=new FileDataSource(new IntTupleDataInFormat(),this.supplierInputPath,"\"supplier\" source");
  FileDataSource nationInput=new FileDataSource(new IntTupleDataInFormat(),this.nationInputPath,"\"nation\" source");
  MapOperator filterPart=MapOperator.builder(PartFilter.class).name("filterParts").build();
  MapOperator mapPartsupp=MapOperator.builder(PartsuppMap.class).name("mapPartsupp").build();
  MapOperator mapOrder=MapOperator.builder(OrderMap.class).name("mapOrder").build();
  MapOperator mapLineItem=MapOperator.builder(LineItemMap.class).name("proj.Partsupp").build();
  MapOperator mapSupplier=MapOperator.builder(SupplierMap.class).name("proj.Partsupp").build();
  JoinOperator partsJoin=JoinOperator.builder(PartJoin.class,IntValue.class,0,0).name("partsJoin").build();
  JoinOperator orderedPartsJoin=JoinOperator.builder(OrderedPartsJoin.class,IntValue.class,0,0).name("orderedPartsJoin").build();
  JoinOperator suppliersJoin=JoinOperator.builder(SuppliersJoin.class,IntValue.class,0,0).name("suppliersJoin").build();
  JoinOperator filteredPartsJoin=JoinOperator.builder(FilteredPartsJoin.class,IntPair.class,0,0).name("filteredPartsJoin").build();
  JoinOperator partListJoin=JoinOperator.builder(PartListJoin.class,IntValue.class,0,0).name("partlistJoin").build();
  ReduceOperator sumAmountAggregate=ReduceOperator.builder(AmountAggregate.class,StringIntPair.class,0).name("groupyBy").build();
  filterPart.setInput(partInput);
  mapPartsupp.setInput(partSuppInput);
  mapOrder.setInput(ordersInput);
  mapLineItem.setInput(lineItemInput);
  mapSupplier.setInput(supplierInput);
  partsJoin.setFirstInput(filterPart);
  partsJoin.setSecondInput(mapPartsupp);
  orderedPartsJoin.setFirstInput(mapOrder);
  orderedPartsJoin.setSecondInput(mapLineItem);
  suppliersJoin.setFirstInput(mapSupplier);
  suppliersJoin.setSecondInput(nationInput);
  filteredPartsJoin.setFirstInput(partsJoin);
  filteredPartsJoin.setSecondInput(orderedPartsJoin);
  partListJoin.setFirstInput(filteredPartsJoin);
  partListJoin.setSecondInput(suppliersJoin);
  sumAmountAggregate.setInput(partListJoin);
  FileDataSink result=new FileDataSink(new StringIntPairStringDataOutFormat(),this.outputPath,"Results sink");
  result.setInput(sumAmountAggregate);
  Plan p=new Plan(result,"TPC-H query 9");
  p.setDefaultParallelism(this.parallelism);
  return p;
}
