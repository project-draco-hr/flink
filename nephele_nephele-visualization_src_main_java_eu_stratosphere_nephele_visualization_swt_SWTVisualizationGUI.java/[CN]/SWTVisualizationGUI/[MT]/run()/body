{
  boolean viewUpdateRequired=false;
  try {
    final List<NewJobEvent> newJobs=this.jobManager.getNewJobs();
    if (!newJobs.isEmpty()) {
      final Iterator<NewJobEvent> it=newJobs.iterator();
      while (it.hasNext()) {
        final NewJobEvent newJobEvent=it.next();
        addJob(newJobEvent.getJobID(),newJobEvent.getJobName(),newJobEvent.isProfilingAvailable());
      }
    }
synchronized (this.visualizableJobs) {
      final Iterator<JobID> it=this.visualizableJobs.keySet().iterator();
      while (it.hasNext()) {
        final JobID jobID=it.next();
        final List<AbstractEvent> events=this.jobManager.getEvents(jobID);
        if (!events.isEmpty()) {
          final CTabItem selectedTab=this.jobTabFolder.getSelection();
          if (selectedTab != null) {
            final JobID jobIDOfSelectedTab=(JobID)selectedTab.getData();
            if (jobID.equals(jobIDOfSelectedTab)) {
              viewUpdateRequired=true;
            }
          }
          final GraphVisualizationData graphVisualizationData=this.visualizableJobs.get(jobID);
          final Iterator<AbstractEvent> eventIt=events.iterator();
          while (eventIt.hasNext()) {
            final AbstractEvent event=eventIt.next();
            if (this.processedEvents.contains(event)) {
              continue;
            }
            dispatchEvent(event,graphVisualizationData);
          }
          cleanUpOldEvents(QUERYINTERVAL * 1000);
        }
        if (this.printBufferCounter++ == 10) {
          this.jobManager.logBufferUtilization(jobID);
          this.printBufferCounter=0;
        }
      }
    }
  }
 catch (  IOException ioe) {
    LOG.error(StringUtils.stringifyException(ioe));
  }
  if (viewUpdateRequired) {
    updateView();
  }
  this.display.timerExec(QUERYINTERVAL * 1000,this);
}
