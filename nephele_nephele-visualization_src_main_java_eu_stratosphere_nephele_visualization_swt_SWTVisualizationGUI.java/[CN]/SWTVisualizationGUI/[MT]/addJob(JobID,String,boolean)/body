{
synchronized (this.visualizableJobs) {
    if (this.visualizableJobs.containsKey(jobID)) {
      return;
    }
    final ManagementGraph managementGraph=this.jobManager.getManagementGraph(jobID);
    final NetworkTopology networkTopology=this.jobManager.getNetworkTopology(jobID);
    final GraphVisualizationData graphVisualizationData=new GraphVisualizationData(jobID,jobName,isProfilingAvailable,managementGraph,networkTopology);
    managementGraph.setAttachment(graphVisualizationData);
    final Iterator<ManagementVertex> it=new ManagementGraphIterator(managementGraph,true);
    while (it.hasNext()) {
      final ManagementVertex vertex=it.next();
      vertex.setAttachment(new VertexVisualizationData(isProfilingAvailable));
      for (int i=0; i < vertex.getNumberOfOutputGates(); i++) {
        vertex.getOutputGate(i).setAttachment(new GateVisualizationData(isProfilingAvailable));
      }
      for (int i=0; i < vertex.getNumberOfInputGates(); i++) {
        vertex.getInputGate(i).setAttachment(new GateVisualizationData(isProfilingAvailable));
      }
    }
    final Iterator<ManagementGroupVertex> it2=new ManagementGroupVertexIterator(managementGraph,true,-1);
    while (it2.hasNext()) {
      final ManagementGroupVertex groupVertex=it2.next();
      groupVertex.setAttachment(new GroupVertexVisualizationData(groupVertex));
      for (int i=0; i < groupVertex.getNumberOfForwardEdges(); i++) {
        final ManagementGroupEdge groupEdge=groupVertex.getForwardEdge(i);
        groupEdge.setAttachment(new GroupEdgeVisualizationData(groupEdge));
      }
    }
    final Iterator<NetworkNode> it3=networkTopology.iterator();
    while (it3.hasNext()) {
      final NetworkNode networkNode=it3.next();
      if (networkNode.isLeafNode()) {
        networkNode.setAttachment(new InstanceVisualizationData(isProfilingAvailable));
      }
    }
    networkTopology.setAttachment(new InstanceVisualizationData(isProfilingAvailable));
    final TreeItem jobItem=new TreeItem(jobTree,SWT.NONE);
    jobItem.setText(jobName + " (" + jobID.toString()+ ")");
    jobItem.setData(graphVisualizationData);
    this.visualizableJobs.put(jobID,graphVisualizationData);
  }
}
