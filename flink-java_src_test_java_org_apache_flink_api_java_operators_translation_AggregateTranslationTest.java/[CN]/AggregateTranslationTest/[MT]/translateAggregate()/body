{
  try {
    final int parallelism=8;
    ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment(parallelism);
    @SuppressWarnings("unchecked") DataSet<Tuple3<Double,StringValue,Long>> initialData=env.fromElements(new Tuple3<Double,StringValue,Long>(3.141592,new StringValue("foobar"),Long.valueOf(77)));
    initialData.groupBy(0).aggregate(Aggregations.MIN,1).and(Aggregations.SUM,2).print();
    Plan p=env.createProgramPlan();
    GenericDataSinkBase<?> sink=p.getDataSinks().iterator().next();
    GroupReduceOperatorBase<?,?,?> reducer=(GroupReduceOperatorBase<?,?,?>)sink.getInput();
    assertEquals(1,reducer.getKeyColumns(0).length);
    assertEquals(0,reducer.getKeyColumns(0)[0]);
    assertEquals(-1,reducer.getParallelism());
    assertTrue(reducer.isCombinable());
    assertTrue(reducer.getInput() instanceof GenericDataSourceBase<?,?>);
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Test caused an error: " + e.getMessage());
  }
}
