{
  final String className=this.config.getString(OUTPUT_DATA_DISTRIBUTION_CLASS,null);
  if (className == null) {
    return null;
  }
  final Class<? extends DataDistribution> clazz;
  try {
    clazz=Class.forName(className,true,cl).asSubclass(DataDistribution.class);
  }
 catch (  ClassCastException ccex) {
    throw new CorruptConfigurationException("The class noted in the configuration as the data distribution " + "is no subclass of DataDistribution.");
  }
  final DataDistribution distribution=InstantiationUtil.instantiate(clazz,DataDistribution.class);
  final byte[] stateEncoded=this.config.getBytes(OUTPUT_DATA_DISTRIBUTION_PREFIX + outputNum,null);
  if (stateEncoded == null) {
    throw new CorruptConfigurationException("The configuration contained the data distribution type, but no serialized state.");
  }
  final ByteArrayInputStream bais=new ByteArrayInputStream(stateEncoded);
  final DataInputViewStreamWrapper in=new DataInputViewStreamWrapper(bais);
  try {
    distribution.read(in);
    return distribution;
  }
 catch (  Exception ex) {
    throw new RuntimeException("The deserialization of the encoded data distribution state caused an error" + (ex.getMessage() == null ? "." : ": " + ex.getMessage()),ex);
  }
}
