{
  if (args.length < 5) {
    System.err.println("Parameters: <customer-csv path> <orders-csv path> <lineitem-csv path> <nation-csv path> <result path>");
    return;
  }
  final String customerPath=args[0];
  final String ordersPath=args[1];
  final String lineitemPath=args[2];
  final String nationPath=args[3];
  final String outPath=args[4];
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple5<Integer,String,String,Integer,Double>> customers=env.readCsvFile(customerPath).fieldDelimiter('|').includeFields("11110100").types(Integer.class,String.class,String.class,Integer.class,Double.class);
  DataSet<Tuple3<Integer,Integer,String>> orders=env.readCsvFile(ordersPath).fieldDelimiter('|').includeFields("110010000").types(Integer.class,Integer.class,String.class);
  DataSet<Tuple4<Integer,Double,Double,String>> lineitems=env.readCsvFile(lineitemPath).fieldDelimiter('|').includeFields("1000011010000000").types(Integer.class,Double.class,Double.class,String.class);
  DataSet<Tuple2<Integer,String>> nations=env.readCsvFile(nationPath).fieldDelimiter('|').includeFields("1100").types(Integer.class,String.class);
  DataSet<Tuple2<Integer,Integer>> ordersFilteredByYear=orders.filter(new FilterFunction<Tuple3<Integer,Integer,String>>(){
    @Override public boolean filter(    Tuple3<Integer,Integer,String> t){
      int year=Integer.parseInt(t.f2.substring(0,4));
      return year > 1990;
    }
  }
).map(new MapFunction<Tuple3<Integer,Integer,String>,Tuple2<Integer,Integer>>(){
    @Override public Tuple2<Integer,Integer> map(    Tuple3<Integer,Integer,String> t){
      return new Tuple2<Integer,Integer>(t.f0,t.f1);
    }
  }
);
  DataSet<Tuple3<Integer,Double,Double>> lineitemsFilteredByFlag=lineitems.filter(new FilterFunction<Tuple4<Integer,Double,Double,String>>(){
    @Override public boolean filter(    Tuple4<Integer,Double,Double,String> t) throws Exception {
      return t.f3.equals("R");
    }
  }
).map(new MapFunction<Tuple4<Integer,Double,Double,String>,Tuple3<Integer,Double,Double>>(){
    @Override public Tuple3<Integer,Double,Double> map(    Tuple4<Integer,Double,Double,String> t){
      return new Tuple3<Integer,Double,Double>(t.f0,t.f1,t.f2);
    }
  }
);
  DataSet<Tuple3<Integer,Double,Double>> lineitemsOfCustomerKey=ordersFilteredByYear.joinWithHuge(lineitemsFilteredByFlag).where(0).equalTo(0).with(new JoinFunction<Tuple2<Integer,Integer>,Tuple3<Integer,Double,Double>,Tuple3<Integer,Double,Double>>(){
    @Override public Tuple3<Integer,Double,Double> join(    Tuple2<Integer,Integer> o,    Tuple3<Integer,Double,Double> l){
      return new Tuple3<Integer,Double,Double>(o.f1,l.f1,l.f2);
    }
  }
);
  DataSet<Tuple2<Integer,Double>> revenueOfCustomerKey=lineitemsOfCustomerKey.map(new MapFunction<Tuple3<Integer,Double,Double>,Tuple2<Integer,Double>>(){
    @Override public Tuple2<Integer,Double> map(    Tuple3<Integer,Double,Double> t){
      return new Tuple2<Integer,Double>(t.f0,t.f1 * (1 - t.f2));
    }
  }
).groupBy(0).reduce(new ReduceFunction<Tuple2<Integer,Double>>(){
    @Override public Tuple2<Integer,Double> reduce(    Tuple2<Integer,Double> t1,    Tuple2<Integer,Double> t2){
      return new Tuple2<Integer,Double>(t1.f0,t1.f1 + t2.f1);
    }
  }
);
  DataSet<Tuple5<Integer,String,String,String,Double>> customerWithNation=customers.joinWithTiny(nations).where(3).equalTo(0).with(new JoinFunction<Tuple5<Integer,String,String,Integer,Double>,Tuple2<Integer,String>,Tuple5<Integer,String,String,String,Double>>(){
    @Override public Tuple5<Integer,String,String,String,Double> join(    Tuple5<Integer,String,String,Integer,Double> c,    Tuple2<Integer,String> n){
      return new Tuple5<Integer,String,String,String,Double>(c.f0,c.f1,c.f2,n.f1,c.f4);
    }
  }
);
  DataSet<Tuple6<Integer,String,String,String,Double,Double>> customerWithRevenue=customerWithNation.join(revenueOfCustomerKey).where(0).equalTo(0).with(new JoinFunction<Tuple5<Integer,String,String,String,Double>,Tuple2<Integer,Double>,Tuple6<Integer,String,String,String,Double,Double>>(){
    @Override public Tuple6<Integer,String,String,String,Double,Double> join(    Tuple5<Integer,String,String,String,Double> c,    Tuple2<Integer,Double> r){
      return new Tuple6<Integer,String,String,String,Double,Double>(c.f0,c.f1,c.f2,c.f3,c.f4,r.f1);
    }
  }
);
  customerWithRevenue.writeAsCsv(outPath);
  env.execute();
}
