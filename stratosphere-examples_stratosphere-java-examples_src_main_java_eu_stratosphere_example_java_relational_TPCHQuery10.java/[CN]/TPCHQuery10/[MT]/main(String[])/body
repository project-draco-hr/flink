{
  String customerPath=(args.length > 0 ? args[0] : copyJarFileToTmp("/Testdata/customer.tbl","customer.tbl"));
  String ordersPath=(args.length > 1 ? args[1] : copyJarFileToTmp("/Testdata/orders.tbl","orders.tbl"));
  String lineitemPath=(args.length > 2 ? args[2] : copyJarFileToTmp("/Testdata/lineitem.tbl","lineitem.tbl"));
  String nationPath=(args.length > 3 ? args[3] : copyJarFileToTmp("/Testdata/nation.tbl","nation.tbl"));
  String outPath=(args.length > 4 ? args[4] : null);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple5<Integer,String,String,Integer,Double>> customers=env.readCsvFile(customerPath).fieldDelimiter('|').includeFields("11110100").types(Integer.class,String.class,String.class,Integer.class,Double.class);
  DataSet<Tuple3<Integer,Integer,String>> orders=env.readCsvFile(ordersPath).fieldDelimiter('|').includeFields("110010000").types(Integer.class,Integer.class,String.class);
  DataSet<Tuple4<Integer,Double,Double,String>> lineitems=env.readCsvFile(lineitemPath).fieldDelimiter('|').includeFields("1000011010000000").types(Integer.class,Double.class,Double.class,String.class);
  DataSet<Tuple2<Integer,String>> nations=env.readCsvFile(nationPath).fieldDelimiter('|').includeFields("1100").types(Integer.class,String.class);
  DataSet<Tuple2<Integer,Integer>> ordersFilteredByYear=orders.filter(new FilterFunction<Tuple3<Integer,Integer,String>>(){
    private static final long serialVersionUID=1L;
    private static final int YEAR_FILTER=1990;
    @Override public boolean filter(    Tuple3<Integer,Integer,String> t) throws Exception {
      int year=Integer.parseInt(t.T3().substring(0,4));
      return year > YEAR_FILTER;
    }
  }
).map(new MapFunction<Tuple3<Integer,Integer,String>,Tuple2<Integer,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<Integer,Integer> map(    Tuple3<Integer,Integer,String> t) throws Exception {
      return new Tuple2<Integer,Integer>(t.T1(),t.T2());
    }
  }
);
  DataSet<Tuple3<Integer,Double,Double>> lineitemsFilteredByFlag=lineitems.filter(new FilterFunction<Tuple4<Integer,Double,Double,String>>(){
    private static final long serialVersionUID=1L;
    @Override public boolean filter(    Tuple4<Integer,Double,Double,String> t) throws Exception {
      return t.T4().equals("R");
    }
  }
).map(new MapFunction<Tuple4<Integer,Double,Double,String>,Tuple3<Integer,Double,Double>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple3<Integer,Double,Double> map(    Tuple4<Integer,Double,Double,String> t) throws Exception {
      return new Tuple3<Integer,Double,Double>(t.T1(),t.T2(),t.T3());
    }
  }
);
  DataSet<Tuple3<Integer,Double,Double>> lineitemsOfCustomerKey=ordersFilteredByYear.joinWithHuge(lineitemsFilteredByFlag).where(0).equalTo(0).with(new JoinFunction<Tuple2<Integer,Integer>,Tuple3<Integer,Double,Double>,Tuple3<Integer,Double,Double>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple3<Integer,Double,Double> join(    Tuple2<Integer,Integer> o,    Tuple3<Integer,Double,Double> l){
      return new Tuple3<Integer,Double,Double>(o.T2(),l.T2(),l.T3());
    }
  }
);
  DataSet<Tuple2<Integer,Double>> revenueOfCustomerKey=lineitemsOfCustomerKey.map(new MapFunction<Tuple3<Integer,Double,Double>,Tuple2<Integer,Double>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<Integer,Double> map(    Tuple3<Integer,Double,Double> t) throws Exception {
      return new Tuple2<Integer,Double>(t.T1(),t.T2() * (1 - t.T3()));
    }
  }
).groupBy(0).reduce(new ReduceFunction<Tuple2<Integer,Double>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<Integer,Double> reduce(    Tuple2<Integer,Double> t1,    Tuple2<Integer,Double> t2) throws Exception {
      return new Tuple2<Integer,Double>(t1.T1(),t1.T2() + t2.T2());
    }
  }
);
  DataSet<Tuple5<Integer,String,String,String,Double>> customerWithNation=customers.joinWithTiny(nations).where(3).equalTo(0).with(new JoinFunction<Tuple5<Integer,String,String,Integer,Double>,Tuple2<Integer,String>,Tuple5<Integer,String,String,String,Double>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple5<Integer,String,String,String,Double> join(    Tuple5<Integer,String,String,Integer,Double> c,    Tuple2<Integer,String> n) throws Exception {
      return new Tuple5<Integer,String,String,String,Double>(c.T1(),c.T2(),c.T3(),n.T2(),c.T5());
    }
  }
);
  DataSet<Tuple6<Integer,String,String,String,Double,Double>> customerWithRevenue=customerWithNation.join(revenueOfCustomerKey).where(0).equalTo(0).with(new JoinFunction<Tuple5<Integer,String,String,String,Double>,Tuple2<Integer,Double>,Tuple6<Integer,String,String,String,Double,Double>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple6<Integer,String,String,String,Double,Double> join(    Tuple5<Integer,String,String,String,Double> c,    Tuple2<Integer,Double> r) throws Exception {
      return new Tuple6<Integer,String,String,String,Double,Double>(c.T1(),c.T2(),c.T3(),c.T4(),c.T5(),r.T2());
    }
  }
);
  if (outPath == null) {
    customerWithRevenue.print();
  }
 else {
    customerWithRevenue.writeAsCsv(outPath);
  }
  env.execute();
}
