{
  if (this.hashJoin.nextKey()) {
    final HashJoin.HashBucketIterator<K,V1> buildSideIterator=this.hashJoin.getBuildSideIterator();
    final HashJoin.KeyGroupIterator<K,V2> probeIterator=this.hashJoin.getProbeSideIterator();
    boolean notFirst=false;
    while (probeIterator.hasNext()) {
      V2 probeValue=probeIterator.nextValue();
      if (notFirst) {
        buildSideIterator.reset();
      }
      notFirst=true;
      KeyValuePair<K,V1> nextBuildSidePair=this.nextBuildSideObject;
      if (buildSideIterator.next(nextBuildSidePair)) {
        KeyValuePair<K,V1> tmpPair=newBuildSidePair();
        if (buildSideIterator.next(tmpPair)) {
          this.probeSideCopier.setCopy(probeValue);
          matchFunction.match(nextBuildSidePair.getKey(),nextBuildSidePair.getValue(),probeValue,collector);
          probeValue=newProbeValue();
          this.probeSideCopier.getCopy(probeValue);
          matchFunction.match(tmpPair.getKey(),tmpPair.getValue(),probeValue,collector);
          tmpPair=newBuildSidePair();
          while (this.running && buildSideIterator.next(tmpPair)) {
            probeValue=newProbeValue();
            this.probeSideCopier.getCopy(probeValue);
            matchFunction.match(tmpPair.getKey(),tmpPair.getValue(),probeValue,collector);
            tmpPair=newBuildSidePair();
          }
          this.nextBuildSideObject=tmpPair;
        }
 else {
          this.nextBuildSideObject=tmpPair;
          matchFunction.match(nextBuildSidePair.getKey(),nextBuildSidePair.getValue(),probeValue,collector);
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}
