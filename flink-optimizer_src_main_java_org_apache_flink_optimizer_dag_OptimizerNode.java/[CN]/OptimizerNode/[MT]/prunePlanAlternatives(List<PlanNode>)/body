{
  if (plans.isEmpty()) {
    throw new CompilerException("No plan meeting the requirements could be created @ " + this + ". Most likely reason: Too restrictive plan hints.");
  }
  if (plans.size() == 1) {
    return;
  }
  if (this.openBranches == null || this.openBranches.isEmpty()) {
    prunePlanAlternativesWithCommonBranching(plans);
  }
 else {
    final OptimizerNode[] branchDeterminers=new OptimizerNode[this.openBranches.size()];
    for (int i=0; i < branchDeterminers.length; i++) {
      branchDeterminers[i]=this.openBranches.get(this.openBranches.size() - 1 - i).getBranchingNode();
    }
    Comparator<PlanNode> sorter=new Comparator<PlanNode>(){
      @Override public int compare(      PlanNode o1,      PlanNode o2){
        for (        OptimizerNode branchDeterminer : branchDeterminers) {
          PlanNode n1=o1.getCandidateAtBranchPoint(branchDeterminer);
          PlanNode n2=o2.getCandidateAtBranchPoint(branchDeterminer);
          int hash1=System.identityHashCode(n1);
          int hash2=System.identityHashCode(n2);
          if (hash1 != hash2) {
            return hash1 - hash2;
          }
        }
        return 0;
      }
    }
;
    Collections.sort(plans,sorter);
    List<PlanNode> result=new ArrayList<PlanNode>();
    List<PlanNode> turn=new ArrayList<PlanNode>();
    final PlanNode[] determinerChoice=new PlanNode[branchDeterminers.length];
    while (!plans.isEmpty()) {
      turn.clear();
      PlanNode determiner=plans.remove(plans.size() - 1);
      turn.add(determiner);
      for (int i=0; i < determinerChoice.length; i++) {
        determinerChoice[i]=determiner.getCandidateAtBranchPoint(branchDeterminers[i]);
      }
      boolean stillEqual=true;
      for (int k=plans.size() - 1; k >= 0 && stillEqual; k--) {
        PlanNode toCheck=plans.get(k);
        for (int i=0; i < branchDeterminers.length; i++) {
          PlanNode checkerChoice=toCheck.getCandidateAtBranchPoint(branchDeterminers[i]);
          if (checkerChoice != determinerChoice[i]) {
            stillEqual=false;
            break;
          }
        }
        if (stillEqual) {
          plans.remove(k);
          turn.add(toCheck);
        }
      }
      if (turn.size() > 1) {
        prunePlanAlternativesWithCommonBranching(turn);
      }
      result.addAll(turn);
    }
    plans.clear();
    plans.addAll(result);
  }
}
