{
  System.out.println("==RECEIVING REQUEST FROM " + caller + " == SOURCE CHANNEL:  "+ sourceChannelID);
  if (this.cachedTrees.containsKey(sourceChannelID)) {
    System.out.println("==RETURNING CACHED ENTRY TO " + caller + " ==");
    System.out.println(cachedTrees.get(sourceChannelID).getConnectionInfo(caller));
    return cachedTrees.get(sourceChannelID).getConnectionInfo(caller);
  }
 else {
    if (!checkIfAllTargetVerticesExist(caller,jobID,sourceChannelID)) {
      System.out.println("== NOT ALL RECEIVERS FOUND==");
      return ConnectionInfoLookupResponse.createReceiverNotFound();
    }
    if (!checkIfAllTargetVerticesReady(caller,jobID,sourceChannelID)) {
      System.out.println("== NOT ALL RECEIVERS READY==");
      return ConnectionInfoLookupResponse.createReceiverNotReady();
    }
    LinkedList<TreeNode> treenodes=extractTreeNodes(caller,jobID,sourceChannelID,this.randomized);
    if (this.usehardcodedtree) {
      cachedTrees.put(sourceChannelID,createHardCodedTree(treenodes));
      System.out.println("==RETURNING ENTRY TO " + caller + " ==");
      System.out.println(cachedTrees.get(sourceChannelID).getConnectionInfo(caller));
      System.out.println("==END ENTRY==");
      return cachedTrees.get(sourceChannelID).getConnectionInfo(caller);
    }
    if (this.usepenalties && this.penaltyfilepath != null) {
      System.out.println("reading penalty file from: " + this.penaltyfilepath);
      File f=new File(this.penaltyfilepath);
      readPenalitesFromFile(f,treenodes);
    }
    if (this.treebranching == 0) {
      cachedTrees.put(sourceChannelID,createUnicastTree(treenodes));
    }
 else     if (this.treebranching == 1) {
      cachedTrees.put(sourceChannelID,createSequentialTree(treenodes));
    }
 else     if (this.treebranching == 2) {
      cachedTrees.put(sourceChannelID,createBinaryTree(treenodes));
    }
 else     if (this.treebranching == 3) {
      cachedTrees.put(sourceChannelID,createTopologyBranchTree(treenodes));
    }
    System.out.println("==RETURNING ENTRY TO " + caller + " ==");
    System.out.println(cachedTrees.get(sourceChannelID).getConnectionInfo(caller));
    System.out.println("==END ENTRY==");
    return cachedTrees.get(sourceChannelID).getConnectionInfo(caller);
  }
}
