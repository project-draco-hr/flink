{
  MulticastForwardingTable table=new MulticastForwardingTable();
  TreeNode actualnode=nodes.pollFirst();
  while (nodes.size() > 0) {
    System.out.println("actual node: " + actualnode);
    ConnectionInfoLookupResponse actualentry=ConnectionInfoLookupResponse.createReceiverFoundAndReady();
    LinkedList<TreeNode> neighbors=pollNodesOnSameHost(actualnode,nodes);
    for (    ChannelID id : actualnode.getLocalTargets()) {
      System.out.println("local target: " + id);
      actualentry.addLocalTarget(id);
    }
    for (    TreeNode n : neighbors) {
      actualentry.addRemoteTarget(n.getConnectionInfo());
    }
    TreeNode closestnode=pollClosestNode(actualnode,nodes);
    if (closestnode != null) {
      actualentry.addRemoteTarget(actualnode.getConnectionInfo());
    }
    table.addConnectionInfo(actualnode.getConnectionInfo(),actualentry);
    actualnode=closestnode;
    for (    TreeNode n : neighbors) {
      ConnectionInfoLookupResponse receiverentry=ConnectionInfoLookupResponse.createReceiverFoundAndReady();
      for (      ChannelID id : n.getLocalTargets()) {
        System.out.println("local target: " + id);
        receiverentry.addLocalTarget(id);
      }
      table.addConnectionInfo(n.getConnectionInfo(),receiverentry);
    }
  }
  if (actualnode != null) {
    ConnectionInfoLookupResponse actualentry=ConnectionInfoLookupResponse.createReceiverFoundAndReady();
    for (    ChannelID id : actualnode.getLocalTargets()) {
      System.out.println("local target: " + id);
      actualentry.addLocalTarget(id);
    }
    table.addConnectionInfo(actualnode.getConnectionInfo(),actualentry);
  }
  return table;
}
