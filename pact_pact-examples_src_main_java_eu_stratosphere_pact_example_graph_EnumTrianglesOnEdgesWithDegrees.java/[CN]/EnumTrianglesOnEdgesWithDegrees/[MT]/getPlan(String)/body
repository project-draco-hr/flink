{
  int noSubTasks=args.length > 0 ? Integer.parseInt(args[0]) : 1;
  String edgeInput=args.length > 1 ? args[1] : "";
  String output=args.length > 2 ? args[2] : "";
  FileDataSource edges=new FileDataSource(EdgeWithDegreesInputFormat.class,edgeInput,"Input Edges with Degrees");
  edges.setParameter(DelimitedInputFormat.RECORD_DELIMITER,"\n");
  edges.setParameter(EdgeWithDegreesInputFormat.VERTEX_DELIMITER_CHAR,'|');
  edges.setParameter(EdgeWithDegreesInputFormat.DEGREE_DELIMITER_CHAR,',');
  edges.setDegreeOfParallelism(noSubTasks);
  MapContract toLowerDegreeEdge=new MapContract(ProjectToLowerDegreeVertex.class,edges,"Select lower-degree Edge");
  toLowerDegreeEdge.setDegreeOfParallelism(noSubTasks);
  MapContract projectOutCounts=new MapContract(ProjectOutCounts.class,edges,"Project out Counts");
  projectOutCounts.setDegreeOfParallelism(noSubTasks);
  ReduceContract buildTriads=new ReduceContract(BuildTriads.class,PactInteger.class,0,toLowerDegreeEdge,"Build Triads");
  buildTriads.setDegreeOfParallelism(noSubTasks);
  @SuppressWarnings("unchecked") MatchContract closeTriads=new MatchContract(CloseTriads.class,new Class[]{PactInteger.class,PactInteger.class},new int[]{1,2},new int[]{0,1},buildTriads,projectOutCounts,"Close Triads");
  closeTriads.setDegreeOfParallelism(noSubTasks);
  closeTriads.setParameter("LOCAL_STRATEGY","LOCAL_STRATEGY_HASH_BUILD_SECOND");
  FileDataSink triangles=new FileDataSink(TriangleOutputFormat.class,output,closeTriads,"Triangles");
  triangles.setDegreeOfParallelism(noSubTasks);
  return new Plan(triangles,"Enumerate Triangles");
}
