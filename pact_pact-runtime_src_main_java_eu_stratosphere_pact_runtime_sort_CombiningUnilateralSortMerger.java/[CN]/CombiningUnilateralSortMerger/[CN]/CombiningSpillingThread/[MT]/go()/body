{
  final List<CircularElement> cache=new ArrayList<CircularElement>();
  CircularElement element=null;
  boolean cacheOnly=false;
  while (isRunning()) {
    try {
      element=this.queues.spill.take();
    }
 catch (    InterruptedException iex) {
      if (isRunning()) {
        LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " + "Retrying to grab buffer...");
        continue;
      }
 else {
        return;
      }
    }
    if (element == SPILLING_MARKER) {
      break;
    }
 else     if (element == SENTINEL) {
      cacheOnly=true;
      break;
    }
    cache.add(element);
  }
  if (!isRunning()) {
    return;
  }
  if (cacheOnly) {
    if (LOG.isDebugEnabled())     LOG.debug("Initiating merge-iterator (in-memory segments).");
    List<MutableObjectIterator<PactRecord>> iterators=new ArrayList<MutableObjectIterator<PactRecord>>();
    for (    CircularElement cached : cache) {
      iterators.add(cached.buffer.getIterator());
    }
    if (LOG.isDebugEnabled())     LOG.debug("Releasing unused sort-buffer memory.");
    releaseSortBuffers();
    MutableObjectIterator<PactRecord> resIter=iterators.size() == 1 ? iterators.get(0) : new MergeIterator(iterators,keyComparators,keyPositions,keyClasses);
    if (CombiningUnilateralSortMerger.this.combineLastMerge) {
      KeyGroupedIterator iter=new KeyGroupedIterator(resIter,keyPositions,keyClasses);
      setResultIterator(new CombiningIterator(combineStub,iter));
    }
 else {
      setResultIterator(resIter);
    }
    return;
  }
  final Channel.Enumerator enumerator=this.ioManager.createChannelEnumerator();
  final List<MemorySegment> writeBuffers;
  List<Channel.ID> channelIDs=new ArrayList<Channel.ID>();
  try {
    writeBuffers=this.memoryManager.allocate(CombiningUnilateralSortMerger.this.parent,writeMemSize,NUM_WRITE_BUFFERS,MIN_IO_BUFFER_SIZE);
    registerSegmentsToBeFreedAtShutdown(writeBuffers);
  }
 catch (  MemoryAllocationException maex) {
    throw new IOException("Spilling thread was unable to allocate memory for the channel writer.",maex);
  }
  while (isRunning()) {
    try {
      element=takeNext(this.queues.spill,cache);
    }
 catch (    InterruptedException iex) {
      if (isRunning()) {
        LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " + "Retrying to grab buffer...");
        continue;
      }
 else {
        return;
      }
    }
    if (!isRunning()) {
      return;
    }
    if (element == SENTINEL) {
      break;
    }
    final Channel.ID channel=enumerator.next();
    channelIDs.add(channel);
    if (LOG.isDebugEnabled())     LOG.debug("Creating temp file " + channel.toString() + '.');
    final ChannelWriter writer=ioManager.createChannelWriter(channel,writeBuffers);
    if (LOG.isDebugEnabled())     LOG.debug("Combining buffer " + element.id + '.');
    final NormalizedKeySorter<PactRecord> buffer=element.buffer;
    final CombineValueIterator iter=new CombineValueIterator(buffer);
    final WriterCollector collector=new WriterCollector(writer);
    int i=0;
    int stop=buffer.size() - 1;
    try {
      while (i < stop) {
        int seqStart=i;
        while (i < stop && 0 == buffer.compare(i,i + 1)) {
          i++;
        }
        if (i == seqStart) {
          buffer.writeToChannel(writer,seqStart,1);
        }
 else {
          iter.set(seqStart,i);
          combineStub.combine(iter,collector);
        }
        i++;
      }
    }
 catch (    Exception ex) {
      throw new IOException("An error occurred in the combiner user code.",ex);
    }
    if (i == stop) {
      buffer.writeToChannel(writer,stop,1);
    }
    if (LOG.isDebugEnabled())     LOG.debug("Combined and spilled buffer " + element.id + ".");
    writer.close();
    element.buffer.reset();
    this.queues.empty.add(element);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Spilling done.");
    LOG.debug("Releasing sort-buffer memory.");
  }
  releaseSortBuffers();
  try {
    while (channelIDs.size() > CombiningUnilateralSortMerger.this.maxNumFileHandles) {
      channelIDs=mergeChannelList(channelIDs,writeBuffers,this.readMemSize);
    }
    this.memoryManager.release(writeBuffers);
    unregisterSegmentsToBeFreedAtShutdown(writeBuffers);
    if (channelIDs.isEmpty()) {
      setResultIterator(EmptyMutableObjectIterator.<PactRecord>get());
    }
 else {
      final List<List<MemorySegment>> readBuffers=new ArrayList<List<MemorySegment>>(channelIDs.size());
      final List<MemorySegment> allBuffers=getSegmentsForReaders(readBuffers,this.readMemSize,channelIDs.size());
      registerSegmentsToBeFreedAtShutdown(allBuffers);
      final List<StreamChannelAccess<?,?>> readers=new ArrayList<StreamChannelAccess<?,?>>(channelIDs.size());
      registerChannelsToBeRemovedAtShudown(readers);
      final MergeIterator mergeIterator=getMergingIterator(channelIDs,readBuffers,readers);
      if (CombiningUnilateralSortMerger.this.combineLastMerge) {
        KeyGroupedIterator iter=new KeyGroupedIterator(mergeIterator,keyPositions,keyClasses);
        setResultIterator(new CombiningIterator(combineStub,iter));
      }
 else {
        setResultIterator(mergeIterator);
      }
    }
  }
 catch (  MemoryAllocationException maex) {
    throw new IOException("Merging of sorted runs failed, because the memory for the I/O channels could not be allocated.",maex);
  }
  if (LOG.isDebugEnabled())   LOG.debug("Spilling thread done.");
}
