{
  final int numSubTasks=DEFAULT_PARALLELISM;
  final String dataPointInput=IN_FILE;
  final String clusterInput=IN_FILE;
  final String output=OUT_FILE;
  FileDataSource dataPoints=new FileDataSource(new PointInFormat(),dataPointInput,DATAPOINTS);
  FileDataSource clusterPoints=new FileDataSource(new PointInFormat(),clusterInput,CENTERS);
  clusterPoints.setDegreeOfParallelism(1);
  if (uniquenessHints) {
    dataPoints.getCompilerHints().addUniqueField(0);
    clusterPoints.getCompilerHints().addUniqueField(0);
  }
  Contract latestCenters=clusterPoints;
  for (int i=0; i < numSteps; i++) {
    CrossOperator computeDistance=CrossOperator.builder(new ComputeDistance()).input1(dataPoints).input2(latestCenters).name(CROSS_NAME + i).build();
    ReduceOperator findNearestClusterCenters=ReduceOperator.builder(new FindNearestCenter(),PactInteger.class,0).input(computeDistance).name(NEAREST_CENTER_REDUCER + i).build();
    ReduceOperator recomputeClusterCenter=ReduceOperator.builder(new RecomputeClusterCenter(),PactInteger.class,0).input(findNearestClusterCenters).name(RECOMPUTE_CENTERS_REDUCER + i).build();
    latestCenters=recomputeClusterCenter;
  }
  FileDataSink newClusterPoints=new FileDataSink(new PointOutFormat(),output,latestCenters,SINK);
  Plan plan=new Plan(newClusterPoints,"KMeans Iteration (x" + numSteps + ")");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
