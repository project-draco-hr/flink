{
  try {
    createTestTopic("testCheckpointing",1,1);
    FlinkKafkaConsumer<String> source=getConsumer("testCheckpointing",new JavaDefaultStringSchema(),standardProps);
    Field pendingCheckpointsField=FlinkKafkaConsumer.class.getDeclaredField("pendingCheckpoints");
    pendingCheckpointsField.setAccessible(true);
    LinkedMap pendingCheckpoints=(LinkedMap)pendingCheckpointsField.get(source);
    Assert.assertEquals(0,pendingCheckpoints.size());
    source.setRuntimeContext(new MockRuntimeContext(1,0));
    final long[] initialOffsets=new long[]{1337};
    source.restoreState(initialOffsets);
    source.open(new Configuration());
    long[] state1=source.snapshotState(1,15);
    assertArrayEquals(initialOffsets,state1);
    long[] state2=source.snapshotState(2,30);
    Assert.assertArrayEquals(initialOffsets,state2);
    Assert.assertEquals(2,pendingCheckpoints.size());
    source.notifyCheckpointComplete(1);
    Assert.assertEquals(1,pendingCheckpoints.size());
    source.notifyCheckpointComplete(2);
    Assert.assertEquals(0,pendingCheckpoints.size());
    source.notifyCheckpointComplete(666);
    Assert.assertEquals(0,pendingCheckpoints.size());
    for (int i=100; i < 600; i++) {
      source.snapshotState(i,15 * i);
    }
    Assert.assertEquals(FlinkKafkaConsumer.MAX_NUM_PENDING_CHECKPOINTS,pendingCheckpoints.size());
    source.notifyCheckpointComplete(598);
    Assert.assertEquals(1,pendingCheckpoints.size());
    source.notifyCheckpointComplete(590);
    source.notifyCheckpointComplete(599);
    Assert.assertEquals(0,pendingCheckpoints.size());
    source.close();
    deleteTestTopic("testCheckpointing");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
