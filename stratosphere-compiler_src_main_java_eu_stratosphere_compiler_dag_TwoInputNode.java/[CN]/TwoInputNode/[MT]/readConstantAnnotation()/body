{
  DualInputOperator<?> c=(DualInputOperator<?>)super.getPactContract();
  ConstantFieldsFirst constantSet1Annotation=c.getUserCodeAnnotation(ConstantFieldsFirst.class);
  ConstantFieldsSecond constantSet2Annotation=c.getUserCodeAnnotation(ConstantFieldsSecond.class);
  if (constantSet1Annotation == null) {
    this.constant1=null;
  }
 else {
    this.constant1=new FieldSet(constantSet1Annotation.value());
  }
  if (constantSet2Annotation == null) {
    this.constant2=null;
  }
 else {
    this.constant2=new FieldSet(constantSet2Annotation.value());
  }
  ConstantFieldsFirstExcept notConstantSet1Annotation=c.getUserCodeAnnotation(ConstantFieldsFirstExcept.class);
  ConstantFieldsSecondExcept notConstantSet2Annotation=c.getUserCodeAnnotation(ConstantFieldsSecondExcept.class);
  if (notConstantSet1Annotation == null) {
    this.notConstant1=null;
  }
 else {
    this.notConstant1=new FieldSet(notConstantSet1Annotation.value());
  }
  if (notConstantSet2Annotation == null) {
    this.notConstant2=null;
  }
 else {
    this.notConstant2=new FieldSet(notConstantSet2Annotation.value());
  }
  if (this.notConstant1 != null && this.constant1 != null) {
    throw new CompilerException("Either ConstantFieldsFirst or ConstantFieldsFirstExcept can be specified, not both.");
  }
  if (this.notConstant2 != null && this.constant2 != null) {
    throw new CompilerException("Either ConstantFieldsSecond or ConstantFieldsSecondExcept can be specified, not both.");
  }
}
