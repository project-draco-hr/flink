{
  try {
    final int NUM_RECORDS=10;
    final TypeInformation<?>[] types=new TypeInformation<?>[]{BasicTypeInfo.LONG_TYPE_INFO,new ValueTypeInfo<SomeMaybeLongValue>(SomeMaybeLongValue.class)};
    final TupleTypeInfo<Tuple2<Long,SomeMaybeLongValue>> typeInfo=new TupleTypeInfo<Tuple2<Long,SomeMaybeLongValue>>(types);
    final TypeSerializer<Tuple2<Long,SomeMaybeLongValue>> serializer=typeInfo.createSerializer();
    final TypeComparator<Tuple2<Long,SomeMaybeLongValue>> comparator=typeInfo.createComparator(new int[]{0},new boolean[]{false},0);
    MutableObjectIterator<Tuple2<Long,SomeMaybeLongValue>> source=new MutableObjectIterator<Tuple2<Long,SomeMaybeLongValue>>(){
      private final Random rnd=new Random();
      private int num=0;
      @Override public Tuple2<Long,SomeMaybeLongValue> next(      Tuple2<Long,SomeMaybeLongValue> reuse){
        return next();
      }
      @Override public Tuple2<Long,SomeMaybeLongValue> next(){
        if (num++ < NUM_RECORDS) {
          long val=rnd.nextLong();
          return new Tuple2<Long,SomeMaybeLongValue>(val,new SomeMaybeLongValue((int)val));
        }
 else {
          return null;
        }
      }
    }
;
    @SuppressWarnings("unchecked") Sorter<Tuple2<Long,SomeMaybeLongValue>> sorter=new UnilateralSortMerger<Tuple2<Long,SomeMaybeLongValue>>(this.memoryManager,this.ioManager,source,this.parentTask,new RuntimeSerializerFactory<Tuple2<Long,SomeMaybeLongValue>>(serializer,(Class<Tuple2<Long,SomeMaybeLongValue>>)(Class<?>)Tuple2.class),comparator,1.0,1,128,0.7f);
    MutableObjectIterator<Tuple2<Long,SomeMaybeLongValue>> iterator=sorter.getIterator();
    Tuple2<Long,SomeMaybeLongValue> val=serializer.createInstance();
    long prevKey=Long.MAX_VALUE;
    for (int i=0; i < NUM_RECORDS; i++) {
      val=iterator.next(val);
      assertTrue(val.f0 <= prevKey);
      assertTrue(val.f0.intValue() == val.f1.val());
    }
    assertNull(iterator.next(val));
    sorter.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
