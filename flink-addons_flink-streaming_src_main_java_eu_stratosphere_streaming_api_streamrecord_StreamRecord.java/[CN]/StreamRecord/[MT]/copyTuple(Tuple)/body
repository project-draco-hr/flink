{
  int numofFields=tuple.getArity();
  Tuple newTuple=null;
  try {
    newTuple=(Tuple)CLASSES[numofFields - 1].newInstance();
    for (int i=0; i < numofFields; i++) {
      Class<? extends Object> type=tuple.getField(i).getClass();
      if (type.isArray()) {
        if (type.equals(Boolean[].class)) {
          Boolean[] arr=(Boolean[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
 else         if (type.equals(Byte[].class)) {
          Byte[] arr=(Byte[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
 else         if (type.equals(Character[].class)) {
          Character[] arr=(Character[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
 else         if (type.equals(Double[].class)) {
          Double[] arr=(Double[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
 else         if (type.equals(Float[].class)) {
          Float[] arr=(Float[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
 else         if (type.equals(Integer[].class)) {
          Integer[] arr=(Integer[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
 else         if (type.equals(Long[].class)) {
          Long[] arr=(Long[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
 else         if (type.equals(Short[].class)) {
          Short[] arr=(Short[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
 else         if (type.equals(String[].class)) {
          String[] arr=(String[])tuple.getField(i);
          newTuple.setField(Arrays.copyOf(arr,arr.length),i);
        }
        newTuple.setField(tuple.getField(i),i);
      }
 else {
        newTuple.setField(tuple.getField(i),i);
      }
    }
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  return newTuple;
}
