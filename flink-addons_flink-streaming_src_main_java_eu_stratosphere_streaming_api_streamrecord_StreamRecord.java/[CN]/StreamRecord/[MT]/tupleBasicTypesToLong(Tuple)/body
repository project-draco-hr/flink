{
  @SuppressWarnings("rawtypes") int[] typeNums=new int[numOfFields];
  for (int i=0; i < typeNums.length; i++) {
    String typeName=tuple.getField(i).getClass().getName();
    if (typeName.equals("java.lang.Boolean")) {
      typeNums[i]=0;
    }
 else     if (typeName.equals("java.lang.Byte")) {
      typeNums[i]=1;
    }
 else     if (typeName.equals("java.lang.Character")) {
      typeNums[i]=2;
    }
 else     if (typeName.equals("java.lang.Double")) {
      typeNums[i]=3;
    }
 else     if (typeName.equals("java.lang.Float")) {
      typeNums[i]=4;
    }
 else     if (typeName.equals("java.lang.Integer")) {
      typeNums[i]=5;
    }
 else     if (typeName.equals("java.lang.Long")) {
      typeNums[i]=6;
    }
 else     if (typeName.equals("java.lang.Short")) {
      typeNums[i]=7;
    }
 else     if (typeName.equals("java.lang.String")) {
      typeNums[i]=8;
    }
  }
  long representation=0;
  long multiplyBy=1;
  for (int i=0; i < typeNums.length; i++) {
    representation+=typeNums[i] * multiplyBy;
    multiplyBy*=9;
  }
  return representation;
}
