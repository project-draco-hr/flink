{
  StringBuilder typeInfo=new StringBuilder("Tuple");
  typeInfo.append(numberOfFields + "<");
  for (int i=0; i < representation.length; i++) {
switch (representation[i]) {
case 0:
      typeInfo.append("Boolean,");
    break;
case 1:
  typeInfo.append("Byte,");
break;
case 2:
typeInfo.append("Character,");
break;
case 3:
typeInfo.append("Double,");
break;
case 4:
typeInfo.append("Float,");
break;
case 5:
typeInfo.append("Integer,");
break;
case 6:
typeInfo.append("Long,");
break;
case 7:
typeInfo.append("Short,");
break;
case 8:
typeInfo.append("String,");
break;
case 9:
typeInfo.append("Boolean[],");
break;
case 10:
typeInfo.append("Byte[],");
break;
case 11:
typeInfo.append("Character[],");
break;
case 12:
typeInfo.append("Double[],");
break;
case 13:
typeInfo.append("Float[],");
break;
case 14:
typeInfo.append("Integer[],");
break;
case 15:
typeInfo.append("Long[],");
break;
case 16:
typeInfo.append("Short[],");
break;
case 17:
typeInfo.append("String[],");
break;
case 18:
typeInfo.append("boolean[],");
break;
case 19:
typeInfo.append("byte[],");
break;
case 20:
typeInfo.append("char[],");
break;
case 21:
typeInfo.append("double[],");
break;
case 22:
typeInfo.append("float[],");
break;
case 23:
typeInfo.append("int[],");
break;
case 24:
typeInfo.append("long[],");
break;
case 25:
typeInfo.append("short[],");
break;
default :
typeInfo.append("String,");
break;
}
}
typeInfo.deleteCharAt(typeInfo.length() - 1);
typeInfo.append(">");
return typeInfo.toString();
}
