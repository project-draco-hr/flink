{
  String name=getName() != null ? getName() : "Join at " + joinLocationName;
  JoinOperatorBaseBuilder<OUT> builder=new JoinOperatorBaseBuilder<OUT>(name,joinType).withParallelism(getParallelism()).withPartitioner(getPartitioner()).withJoinHint(getJoinHint()).withResultType(getResultType());
  final boolean requiresTupleUnwrapping=keys1 instanceof SelectorFunctionKeys || keys2 instanceof SelectorFunctionKeys;
  if (requiresTupleUnwrapping) {
    if (keys1 instanceof SelectorFunctionKeys && keys2 instanceof SelectorFunctionKeys) {
      @SuppressWarnings("unchecked") SelectorFunctionKeys<I1,?> selectorKeys1=(SelectorFunctionKeys<I1,?>)keys1;
      @SuppressWarnings("unchecked") SelectorFunctionKeys<I2,?> selectorKeys2=(SelectorFunctionKeys<I2,?>)keys2;
      builder=builder.withUdf(new TupleUnwrappingJoiner<>(function)).withWrappedInput1(input1,selectorKeys1).withWrappedInput2(input2,selectorKeys2);
    }
 else     if (keys2 instanceof SelectorFunctionKeys) {
      @SuppressWarnings("unchecked") SelectorFunctionKeys<I2,?> selectorKeys2=(SelectorFunctionKeys<I2,?>)keys2;
      builder=builder.withUdf(new TupleRightUnwrappingJoiner<>(function)).withInput1(input1,getInput1Type(),keys1).withWrappedInput2(input2,selectorKeys2);
    }
 else {
      @SuppressWarnings("unchecked") SelectorFunctionKeys<I1,?> selectorKeys1=(SelectorFunctionKeys<I1,?>)keys1;
      builder=builder.withUdf(new TupleLeftUnwrappingJoiner<>(function)).withWrappedInput1(input1,selectorKeys1).withInput2(input2,getInput2Type(),keys2);
    }
  }
 else   if (keys1 instanceof Keys.ExpressionKeys && keys2 instanceof Keys.ExpressionKeys) {
    builder=builder.withUdf(function).withInput1(input1,getInput1Type(),keys1).withInput2(input2,getInput2Type(),keys2);
  }
 else {
    throw new UnsupportedOperationException("Unrecognized or incompatible key types.");
  }
  return builder.build();
}
