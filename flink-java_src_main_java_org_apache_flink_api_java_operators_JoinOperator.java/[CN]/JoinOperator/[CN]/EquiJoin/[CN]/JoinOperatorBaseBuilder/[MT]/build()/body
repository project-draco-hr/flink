{
  JoinOperatorBase<?,?,OUT,?> operator;
  if (joinType.isOuter()) {
    operator=new OuterJoinOperatorBase<>(udf,new BinaryOperatorInformation(input1Type,input2Type,resultType),this.keys1.computeLogicalKeyPositions(),this.keys2.computeLogicalKeyPositions(),this.name,getOuterJoinType());
  }
 else {
    operator=new InnerJoinOperatorBase<>(udf,new BinaryOperatorInformation(input1Type,input2Type,resultType),this.keys1.computeLogicalKeyPositions(),this.keys2.computeLogicalKeyPositions(),this.name);
  }
  operator.setFirstInput(input1);
  operator.setSecondInput(input2);
  operator.setParallelism(parallelism);
  operator.setCustomPartitioner(partitioner);
  operator.setJoinHint(joinHint);
  return operator;
}
