{
  boolean isFirstTuple;
  isFirstTuple=ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0;
  if (!isFirstTuple && firstFieldIndexes.length != 0) {
    throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.");
  }
 else   if (firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {
    throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.");
  }
  int offset=this.fieldIndexes.length;
  if (isFirstTuple) {
    this.fieldIndexes=Arrays.copyOf(this.fieldIndexes,this.fieldIndexes.length + firstFieldIndexes.length);
    this.isFieldInFirst=Arrays.copyOf(this.isFieldInFirst,this.isFieldInFirst.length + firstFieldIndexes.length);
    int maxFieldIndex=numFieldsDs1;
    for (int i=0; i < firstFieldIndexes.length; i++) {
      Preconditions.checkElementIndex(firstFieldIndexes[i],maxFieldIndex);
      this.isFieldInFirst[offset + i]=true;
      this.fieldIndexes[offset + i]=firstFieldIndexes[i];
    }
  }
 else {
    this.fieldIndexes=Arrays.copyOf(this.fieldIndexes,this.fieldIndexes.length + 1);
    this.isFieldInFirst=Arrays.copyOf(this.isFieldInFirst,this.isFieldInFirst.length + 1);
    this.isFieldInFirst[offset]=true;
    this.fieldIndexes[offset]=-1;
  }
  return this;
}
