{
  this.ds1=ds1;
  this.ds2=ds2;
  this.keys1=keys1;
  this.keys2=keys2;
  this.hint=hint;
  boolean isFirstTuple;
  boolean isSecondTuple;
  if (ds1.getType() instanceof TupleTypeInfo) {
    numFieldsDs1=ds1.getType().getArity();
    isFirstTuple=true;
  }
 else {
    numFieldsDs1=1;
    isFirstTuple=false;
  }
  if (ds2.getType() instanceof TupleTypeInfo) {
    numFieldsDs2=ds2.getType().getArity();
    isSecondTuple=true;
  }
 else {
    numFieldsDs2=1;
    isSecondTuple=false;
  }
  boolean isTuple;
  boolean firstInput;
  if (firstFieldIndexes != null && secondFieldIndexes == null) {
    firstInput=true;
    isTuple=isFirstTuple;
    this.fieldIndexes=firstFieldIndexes;
    if (this.fieldIndexes.length == 0) {
      isTuple=false;
    }
  }
 else   if (firstFieldIndexes == null && secondFieldIndexes != null) {
    firstInput=false;
    isTuple=isSecondTuple;
    this.fieldIndexes=secondFieldIndexes;
    if (this.fieldIndexes.length == 0) {
      isTuple=false;
    }
  }
 else   if (firstFieldIndexes == null && secondFieldIndexes == null) {
    throw new IllegalArgumentException("You must provide at least one field index array.");
  }
 else {
    throw new IllegalArgumentException("You must provide at most one field index array.");
  }
  if (!isTuple && this.fieldIndexes.length != 0) {
    throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() (or projectSecond()) without arguments to include it.");
  }
 else   if (this.fieldIndexes.length > 22) {
    throw new IllegalArgumentException("You may select only up to twenty-two (22) fields.");
  }
  if (isTuple) {
    this.isFieldInFirst=new boolean[this.fieldIndexes.length];
    int maxFieldIndex=firstInput ? numFieldsDs1 : numFieldsDs2;
    for (int i=0; i < this.fieldIndexes.length; i++) {
      Preconditions.checkElementIndex(this.fieldIndexes[i],maxFieldIndex);
      if (firstInput) {
        this.isFieldInFirst[i]=true;
      }
 else {
        this.isFieldInFirst[i]=false;
      }
    }
  }
 else {
    this.isFieldInFirst=new boolean[]{firstInput};
    this.fieldIndexes=new int[]{-1};
  }
}
