{
  this.metrics=metrics;
  String metricGrpName=metricGrpPrefix + "-metrics";
  StringBuilder tagsSuffix=new StringBuilder();
  for (  Map.Entry<String,String> tag : metricTags.entrySet()) {
    tagsSuffix.append(tag.getKey());
    tagsSuffix.append("-");
    tagsSuffix.append(tag.getValue());
  }
  this.connectionClosed=this.metrics.sensor("connections-closed:" + tagsSuffix.toString());
  MetricName metricName=new MetricName("connection-close-rate",metricGrpName,"Connections closed per second in the window.",metricTags);
  this.connectionClosed.add(metricName,new Rate());
  this.connectionCreated=this.metrics.sensor("connections-created:" + tagsSuffix.toString());
  metricName=new MetricName("connection-creation-rate",metricGrpName,"New connections established per second in the window.",metricTags);
  this.connectionCreated.add(metricName,new Rate());
  this.bytesTransferred=this.metrics.sensor("bytes-sent-received:" + tagsSuffix.toString());
  metricName=new MetricName("network-io-rate",metricGrpName,"The average number of network operations (reads or writes) on all connections per second.",metricTags);
  bytesTransferred.add(metricName,new Rate(new Count()));
  this.bytesSent=this.metrics.sensor("bytes-sent:" + tagsSuffix.toString(),bytesTransferred);
  metricName=new MetricName("outgoing-byte-rate",metricGrpName,"The average number of outgoing bytes sent per second to all servers.",metricTags);
  this.bytesSent.add(metricName,new Rate());
  metricName=new MetricName("request-rate",metricGrpName,"The average number of requests sent per second.",metricTags);
  this.bytesSent.add(metricName,new Rate(new Count()));
  metricName=new MetricName("request-size-avg",metricGrpName,"The average size of all requests in the window..",metricTags);
  this.bytesSent.add(metricName,new Avg());
  metricName=new MetricName("request-size-max",metricGrpName,"The maximum size of any request sent in the window.",metricTags);
  this.bytesSent.add(metricName,new Max());
  this.bytesReceived=this.metrics.sensor("bytes-received:" + tagsSuffix.toString(),bytesTransferred);
  metricName=new MetricName("incoming-byte-rate",metricGrpName,"Bytes/second read off all sockets",metricTags);
  this.bytesReceived.add(metricName,new Rate());
  metricName=new MetricName("response-rate",metricGrpName,"Responses received sent per second.",metricTags);
  this.bytesReceived.add(metricName,new Rate(new Count()));
  this.selectTime=this.metrics.sensor("select-time:" + tagsSuffix.toString());
  metricName=new MetricName("select-rate",metricGrpName,"Number of times the I/O layer checked for new I/O to perform per second",metricTags);
  this.selectTime.add(metricName,new Rate(new Count()));
  metricName=new MetricName("io-wait-time-ns-avg",metricGrpName,"The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.",metricTags);
  this.selectTime.add(metricName,new Avg());
  metricName=new MetricName("io-wait-ratio",metricGrpName,"The fraction of time the I/O thread spent waiting.",metricTags);
  this.selectTime.add(metricName,new Rate(TimeUnit.NANOSECONDS));
  this.ioTime=this.metrics.sensor("io-time:" + tagsSuffix.toString());
  metricName=new MetricName("io-time-ns-avg",metricGrpName,"The average length of time for I/O per select call in nanoseconds.",metricTags);
  this.ioTime.add(metricName,new Avg());
  metricName=new MetricName("io-ratio",metricGrpName,"The fraction of time the I/O thread spent doing I/O",metricTags);
  this.ioTime.add(metricName,new Rate(TimeUnit.NANOSECONDS));
  metricName=new MetricName("connection-count",metricGrpName,"The current number of active connections.",metricTags);
  this.metrics.addMetric(metricName,new Measurable(){
    public double measure(    MetricConfig config,    long now){
      return keys.size();
    }
  }
);
}
