{
  this.jobID.write(out);
  out.writeInt(this.stages.size());
  out.writeInt(this.groupVertices.size());
  Iterator<ManagementGroupVertex> it=new ManagementGroupVertexIterator(this,true,-1);
  while (it.hasNext()) {
    final ManagementGroupVertex groupVertex=it.next();
    groupVertex.getID().write(out);
    out.writeInt(groupVertex.getStage().getStageNumber());
    StringRecord.writeString(out,groupVertex.getName());
  }
  it=new ManagementGroupVertexIterator(this,true,-1);
  while (it.hasNext()) {
    final ManagementGroupVertex groupVertex=it.next();
    groupVertex.getID().write(out);
    groupVertex.write(out);
  }
  out.writeInt(this.vertices.size());
  Iterator<ManagementVertex> it2=new ManagementGraphIterator(this,true);
  while (it2.hasNext()) {
    final ManagementVertex managementVertex=it2.next();
    managementVertex.getID().write(out);
    managementVertex.getGroupVertex().getID().write(out);
    StringRecord.writeString(out,managementVertex.getInstanceName());
    out.writeInt(managementVertex.getIndexInGroup());
    managementVertex.write(out);
  }
  it2=vertices.values().iterator();
  while (it2.hasNext()) {
    final ManagementVertex managementVertex=it2.next();
    managementVertex.getID().write(out);
    for (int i=0; i < managementVertex.getNumberOfOutputGates(); i++) {
      final ManagementGate outputGate=managementVertex.getOutputGate(i);
      out.writeInt(outputGate.getNumberOfForwardEdges());
      for (int j=0; j < outputGate.getNumberOfForwardEdges(); j++) {
        final ManagementEdge edge=outputGate.getForwardEdge(j);
        edge.getSourceEdgeID().write(out);
        edge.getTargetEdgeID().write(out);
        edge.getTarget().getVertex().getID().write(out);
        out.writeInt(edge.getTarget().getIndex());
        out.writeInt(edge.getSourceIndex());
        out.writeInt(edge.getTargetIndex());
        EnumUtils.writeEnum(out,edge.getChannelType());
      }
    }
  }
}
