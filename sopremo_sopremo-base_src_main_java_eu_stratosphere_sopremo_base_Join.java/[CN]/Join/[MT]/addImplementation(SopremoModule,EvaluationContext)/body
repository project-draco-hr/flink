{
switch (this.binaryConditions.size()) {
case 0:
    throw new IllegalStateException("No join condition specified");
case 1:
  final TwoSourceJoin join=new TwoSourceJoin().withOuterJoinIndices(this.outerJoinSources.toIntArray()).withInputs(module.getInputs()).withCondition(this.binaryConditions.get(0)).withResultProjection(this.getResultProjection());
module.getOutput(0).setInput(0,join);
break;
default :
List<TwoSourceJoin> joins=this.getInitialJoinOrder(module);
final List<JsonStream> inputs=new ArrayList<JsonStream>();
int numInputs=this.getNumInputs();
for (int index=0; index < numInputs; index++) inputs.add(OperatorUtil.positionEncode(module.getInput(index),index,numInputs));
for (final TwoSourceJoin twoSourceJoin : joins) {
List<JsonStream> operatorInputs=twoSourceJoin.getInputs();
final List<JsonStream> actualInputs=new ArrayList<JsonStream>(operatorInputs.size());
List<Source> moduleInput=module.getInputs();
for (int index=0; index < operatorInputs.size(); index++) {
final int inputIndex=moduleInput.indexOf(operatorInputs.get(index).getSource().getOperator());
actualInputs.add(inputs.get(inputIndex).getSource());
}
for (int index=0; index < operatorInputs.size(); index++) {
final int inputIndex=moduleInput.indexOf(operatorInputs.get(index).getSource().getOperator());
inputs.set(inputIndex,twoSourceJoin);
}
twoSourceJoin.setInputs(actualInputs);
twoSourceJoin.setResultProjection(new AggregationExpression(new ArrayUnion()));
}
final TwoSourceJoin lastJoin=joins.get(joins.size() - 1);
EvaluationExpression resultProjection=this.getResultProjection();
resultProjection.replace(new IsInstancePredicate(InputSelection.class),new ReplaceInputSelectionWithArray());
module.getOutput(0).setInput(0,new Projection().withInputs(lastJoin).withResultProjection(resultProjection));
}
}
