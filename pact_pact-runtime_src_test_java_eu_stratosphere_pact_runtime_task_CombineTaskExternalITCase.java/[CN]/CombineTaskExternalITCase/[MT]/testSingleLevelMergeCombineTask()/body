{
  int keyCnt=8192;
  int valCnt=8;
  super.initEnvironment(3 * 1024 * 1024);
  super.addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false),1);
  super.addOutput(this.outList);
  CombineTask testTask=new CombineTask();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.COMBININGSORT);
  super.getTaskConfig().setMemorySize(3 * 1024 * 1024);
  super.getTaskConfig().setNumFilehandles(2);
  super.getTaskConfig().setLocalStrategyKeyTypes(0,new int[]{0});
  super.getTaskConfig().setLocalStrategyKeyTypes(new Class[]{PactInteger.class});
  super.registerTask(testTask,MockCombiningReduceStub.class);
  try {
    testTask.invoke();
  }
 catch (  Exception e) {
    LOG.debug(e);
    Assert.fail("Invoke method caused exception.");
  }
  int expSum=0;
  for (int i=1; i < valCnt; i++) {
    expSum+=i;
  }
  HashMap<PactInteger,PactInteger> aggMap=new HashMap<PactInteger,PactInteger>();
  for (  PactRecord record : this.outList) {
    PactInteger key=new PactInteger();
    PactInteger value=new PactInteger();
    record.getField(0,key);
    record.getField(1,value);
    PactInteger prevVal=aggMap.get(key);
    if (prevVal != null) {
      aggMap.put(key,new PactInteger(prevVal.getValue() + value.getValue()));
    }
 else {
      aggMap.put(key,value);
    }
  }
  Assert.assertTrue("Resultset size was " + aggMap.size() + ". Expected was "+ keyCnt,this.outList.size() == keyCnt);
  for (  PactInteger integer : aggMap.values()) {
    Assert.assertTrue("Incorrect result",integer.getValue() == expSum);
  }
  this.outList.clear();
}
