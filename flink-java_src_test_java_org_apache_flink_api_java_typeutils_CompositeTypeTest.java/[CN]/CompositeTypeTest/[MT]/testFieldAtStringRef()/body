{
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,tupleTypeInfo.getTypeAt("0"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,tupleTypeInfo.getTypeAt("2"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,tupleTypeInfo.getTypeAt("f1"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,tupleTypeInfo.getTypeAt("f3"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,nestedTypeInfo.getTypeAt("0"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,nestedTypeInfo.getTypeAt("1.0"));
  assertEquals(BasicTypeInfo.STRING_TYPE_INFO,nestedTypeInfo.getTypeAt("1.1"));
  assertEquals(BasicTypeInfo.LONG_TYPE_INFO,nestedTypeInfo.getTypeAt("1.2"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,nestedTypeInfo.getTypeAt("2"));
  assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO,nestedTypeInfo.getTypeAt("3.0"));
  assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO,nestedTypeInfo.getTypeAt("3.1"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,nestedTypeInfo.getTypeAt("f2"));
  assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO,nestedTypeInfo.getTypeAt("f3.f0"));
  assertEquals(inNestedTuple1,nestedTypeInfo.getTypeAt("1"));
  assertEquals(inNestedTuple2,nestedTypeInfo.getTypeAt("3"));
  assertEquals(inNestedTuple1,nestedTypeInfo.getTypeAt("f1"));
  assertEquals(inNestedTuple2,nestedTypeInfo.getTypeAt("f3"));
  assertEquals(inNestedTuple3,deepNestedTupleTypeInfo.getTypeAt("1"));
  assertEquals(BasicTypeInfo.STRING_TYPE_INFO,pojoTypeInfo.getTypeAt("a"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,pojoTypeInfo.getTypeAt("b"));
  assertEquals(BasicTypeInfo.STRING_TYPE_INFO,pojoInTupleTypeInfo.getTypeAt("f1.a"));
  assertEquals(BasicTypeInfo.INT_TYPE_INFO,pojoInTupleTypeInfo.getTypeAt("1.b"));
  assertEquals(pojoTypeInfo,pojoInTupleTypeInfo.getTypeAt("1"));
  assertEquals(pojoTypeInfo,pojoInTupleTypeInfo.getTypeAt("f1"));
}
