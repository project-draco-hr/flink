{
  try {
    generator1=new TupleGenerator(SEED1,500,4096,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);
    generator2=new TupleGenerator(SEED2,500,2048,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);
    reader1=new TestData.TupleGeneratorIterator(generator1,INPUT_1_SIZE);
    reader2=new TestData.TupleGeneratorIterator(generator2,INPUT_2_SIZE);
    Map<Integer,Collection<String>> expectedStringsMap1=collectData(generator1,INPUT_1_SIZE);
    Map<Integer,Collection<String>> expectedStringsMap2=collectData(generator2,INPUT_2_SIZE);
    Map<Integer,List<Collection<String>>> expectedCoGroupsMap=coGroupValues(expectedStringsMap1,expectedStringsMap2);
    generator1.reset();
    generator2.reset();
    ReusingSortMergeCoGroupIterator<Tuple2<Integer,String>,Tuple2<Integer,String>> iterator=new ReusingSortMergeCoGroupIterator<>(this.reader1,this.reader2,this.serializer1,this.comparator1,this.serializer2,this.comparator2,this.pairComparator);
    iterator.open();
    int key=0;
    while (iterator.next()) {
      Iterator<Tuple2<Integer,String>> iter1=iterator.getValues1().iterator();
      Iterator<Tuple2<Integer,String>> iter2=iterator.getValues2().iterator();
      String v1=null;
      String v2=null;
      if (iter1.hasNext()) {
        Tuple2<Integer,String> rec=iter1.next();
        key=rec.f0;
        v1=rec.f1;
      }
 else       if (iter2.hasNext()) {
        Tuple2<Integer,String> rec=iter2.next();
        key=rec.f0;
        v2=rec.f1;
      }
 else {
        Assert.fail("No input on both sides.");
      }
      Assert.assertTrue("No matches for key " + key,expectedCoGroupsMap.containsKey(key));
      Collection<String> expValues1=expectedCoGroupsMap.get(key).get(0);
      Collection<String> expValues2=expectedCoGroupsMap.get(key).get(1);
      if (v1 != null) {
        expValues1.remove(v1);
      }
 else {
        expValues2.remove(v2);
      }
      while (iter1.hasNext()) {
        Tuple2<Integer,String> rec=iter1.next();
        Assert.assertTrue("String not in expected set of first input",expValues1.remove(rec.f1));
      }
      Assert.assertTrue("Expected set of first input not empty",expValues1.isEmpty());
      while (iter2.hasNext()) {
        Tuple2<Integer,String> rec=iter2.next();
        Assert.assertTrue("String not in expected set of second input",expValues2.remove(rec.f1));
      }
      Assert.assertTrue("Expected set of second input not empty",expValues2.isEmpty());
      expectedCoGroupsMap.remove(key);
    }
    iterator.close();
    Assert.assertTrue("Expected key set not empty",expectedCoGroupsMap.isEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
