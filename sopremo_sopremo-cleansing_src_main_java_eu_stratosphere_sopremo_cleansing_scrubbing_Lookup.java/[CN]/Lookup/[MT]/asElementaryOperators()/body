{
  final SopremoModule sopremoModule=new SopremoModule(this.getName(),2,1);
  final Projection right=new Projection();
  right.setKeyTransformation(this.dictionaryKeyExtraction);
  right.setValueTransformation(this.dictionaryValueExtraction);
  right.setInputs(sopremoModule.getInput(1));
  if (this.arrayElementsReplacement) {
    final ValueSplitter arraySplit=new ValueSplitter().withArrayProjection(this.inputKeyExtractor.asExpression()).withKeyProjection(new ArrayAccess(0)).withValueProjection(new ArrayAccess(1,2)).withInputs(sopremoModule.getInput(0));
    final Operator<?> replacedElements=this.defaultExpression == FILTER_RECORDS ? new ElementStrictReplace().withInputs(arraySplit,right) : new ElementReplaceWithDefault().withDefaultExpression(this.defaultExpression).withInputs(arraySplit,right);
    final AssembleArray arrayDictionary=new AssembleArray().withInputs(replacedElements);
    final Lookup arrayLookup=new Lookup();
    arrayLookup.setInputs(sopremoModule.getInput(0),arrayDictionary);
    arrayLookup.setInputKeyExtractor(this.inputKeyExtractor);
    Selection emptyArrays=new Selection().withCondition(new UnaryExpression(this.inputKeyExtractor.asExpression(),true)).withInputs(sopremoModule.getInput(0));
    sopremoModule.getOutput(0).setInput(0,new UnionAll().withInputs(arrayLookup,emptyArrays));
  }
 else {
    final Projection left=new Projection().withKeyTransformation(this.inputKeyExtractor.asExpression()).withInputs(sopremoModule.getInput(0));
    if (this.defaultExpression == FILTER_RECORDS)     sopremoModule.getOutput(0).setInput(0,new StrictReplace().withInputKeyExtractor(this.inputKeyExtractor).withInputs(left,right));
 else     sopremoModule.getOutput(0).setInput(0,new ReplaceWithDefaultValue().withInputKeyExtractor(this.inputKeyExtractor).withDefaultExpression(this.defaultExpression).withInputs(left,right));
  }
  return sopremoModule;
}
