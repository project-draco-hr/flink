{
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String docsInput=(args.length > 1 ? args[1] : "");
  String ranksInput=(args.length > 2 ? args[2] : "");
  String visitsInput=(args.length > 3 ? args[3] : "");
  String output=(args.length > 4 ? args[4] : "");
  FileDataSource docs=new FileDataSource(RecordInputFormat.class,docsInput,"Docs Input");
  docs.setDegreeOfParallelism(noSubTasks);
  docs.getCompilerHints().setUniqueField(new FieldSet(0));
  docs.setParameter(RecordInputFormat.RECORD_DELIMITER,"\n");
  docs.setParameter(RecordInputFormat.FIELD_DELIMITER_PARAMETER,"|");
  docs.setParameter(RecordInputFormat.NUM_FIELDS_PARAMETER,2);
  docs.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 0,VarLengthStringParser.class);
  docs.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 0,0);
  docs.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 1,VarLengthStringParser.class);
  docs.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 1,1);
  FileDataSource ranks=new FileDataSource(RecordInputFormat.class,ranksInput,"Ranks input");
  ranks.setDegreeOfParallelism(noSubTasks);
  ranks.setParameter(RecordInputFormat.RECORD_DELIMITER,"\n");
  ranks.setParameter(RecordInputFormat.FIELD_DELIMITER_PARAMETER,"|");
  ranks.setParameter(RecordInputFormat.NUM_FIELDS_PARAMETER,3);
  ranks.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 0,VarLengthStringParser.class);
  ranks.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 0,1);
  ranks.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 1,DecimalTextIntParser.class);
  ranks.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 1,0);
  ranks.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 2,DecimalTextIntParser.class);
  ranks.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 2,2);
  FileDataSource visits=new FileDataSource(RecordInputFormat.class,visitsInput,"Visits input:q");
  visits.setDegreeOfParallelism(noSubTasks);
  visits.setParameter(RecordInputFormat.RECORD_DELIMITER,"\n");
  visits.setParameter(RecordInputFormat.FIELD_DELIMITER_PARAMETER,"|");
  visits.setParameter(RecordInputFormat.NUM_FIELDS_PARAMETER,2);
  visits.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 0,VarLengthStringParser.class);
  visits.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 0,1);
  visits.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 1,VarLengthStringParser.class);
  visits.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 1,2);
  MapContract filterDocs=MapContract.builder(FilterDocs.class).input(docs).name("Filter Docs").build();
  filterDocs.setDegreeOfParallelism(noSubTasks);
  filterDocs.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.15f);
  filterDocs.getCompilerHints().setAvgBytesPerRecord(60);
  filterDocs.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(new int[]{0}),1);
  MapContract filterRanks=MapContract.builder(FilterRanks.class).input(ranks).name("Filter Ranks").build();
  filterRanks.setDegreeOfParallelism(noSubTasks);
  filterRanks.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.25f);
  filterRanks.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(new int[]{0}),1);
  MapContract filterVisits=MapContract.builder(FilterVisits.class).input(visits).name("Filter Visits").build();
  filterVisits.setDegreeOfParallelism(noSubTasks);
  filterVisits.getCompilerHints().setAvgBytesPerRecord(60);
  filterVisits.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.2f);
  MatchContract joinDocsRanks=MatchContract.builder(JoinDocRanks.class,PactString.class,0,0).input1(filterDocs).input2(filterRanks).name("Join Docs Ranks").build();
  joinDocsRanks.setDegreeOfParallelism(noSubTasks);
  CoGroupContract antiJoinVisits=CoGroupContract.builder(AntiJoinVisits.class,PactString.class,0,0).input1(joinDocsRanks).input2(filterVisits).name("Antijoin DocsVisits").build();
  antiJoinVisits.setDegreeOfParallelism(noSubTasks);
  antiJoinVisits.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.8f);
  FileDataSink result=new FileDataSink(RecordOutputFormat.class,output,antiJoinVisits,"Result");
  result.setDegreeOfParallelism(noSubTasks);
  result.getParameters().setString(RecordOutputFormat.RECORD_DELIMITER_PARAMETER,"\n");
  result.getParameters().setString(RecordOutputFormat.FIELD_DELIMITER_PARAMETER,"|");
  result.getParameters().setBoolean(RecordOutputFormat.LENIENT_PARSING,true);
  result.getParameters().setInteger(RecordOutputFormat.NUM_FIELDS_PARAMETER,3);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 0,PactInteger.class);
  result.getParameters().setInteger(RecordOutputFormat.RECORD_POSITION_PARAMETER_PREFIX + 0,1);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 1,PactString.class);
  result.getParameters().setInteger(RecordOutputFormat.RECORD_POSITION_PARAMETER_PREFIX + 1,0);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 2,PactInteger.class);
  result.getParameters().setInteger(RecordOutputFormat.RECORD_POSITION_PARAMETER_PREFIX + 2,2);
  return new Plan(result,"Weblog Analysis");
}
