{
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String docsInput=(args.length > 1 ? args[1] : "");
  String ranksInput=(args.length > 2 ? args[2] : "");
  String visitsInput=(args.length > 3 ? args[3] : "");
  String output=(args.length > 4 ? args[4] : "");
  DataSourceContract<PactString,Tuple> docs=new DataSourceContract<PactString,Tuple>(StringTupleDataInFormat.class,docsInput,"Documents");
  docs.setFormatParameter(TextInputFormat.FORMAT_PAIR_DELIMITER,"\n");
  docs.setDegreeOfParallelism(noSubTasks);
  docs.setOutputContract(UniqueKey.class);
  DataSourceContract<PactString,Tuple> ranks=new DataSourceContract<PactString,Tuple>(StringTupleDataInFormat.class,ranksInput,"Ranks");
  ranks.setFormatParameter(TextInputFormat.FORMAT_PAIR_DELIMITER,"\n");
  ranks.setDegreeOfParallelism(noSubTasks);
  DataSourceContract<PactString,Tuple> visits=new DataSourceContract<PactString,Tuple>(StringTupleDataInFormat.class,visitsInput,"Visits");
  visits.setFormatParameter(TextInputFormat.FORMAT_PAIR_DELIMITER,"\n");
  visits.setDegreeOfParallelism(noSubTasks);
  MapContract<PactString,Tuple,PactString,PactNull> filterDocs=new MapContract<PactString,Tuple,PactString,PactNull>(FilterDocs.class,"Filter Docs");
  filterDocs.setDegreeOfParallelism(noSubTasks);
  filterDocs.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.15f);
  filterDocs.getCompilerHints().setAvgBytesPerRecord(60);
  MapContract<PactString,Tuple,PactString,Tuple> filterRanks=new MapContract<PactString,Tuple,PactString,Tuple>(FilterRanks.class,"Filter Ranks");
  filterRanks.setDegreeOfParallelism(noSubTasks);
  filterRanks.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.25f);
  MapContract<PactString,Tuple,PactString,PactNull> filterVisits=new MapContract<PactString,Tuple,PactString,PactNull>(FilterVisits.class,"Filter Visits");
  filterVisits.setDegreeOfParallelism(noSubTasks);
  filterVisits.getCompilerHints().setAvgBytesPerRecord(60);
  filterVisits.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.2f);
  MatchContract<PactString,Tuple,PactNull,PactString,Tuple> joinDocsRanks=new MatchContract<PactString,Tuple,PactNull,PactString,Tuple>(JoinDocRanks.class,"Join DocRanks");
  joinDocsRanks.setDegreeOfParallelism(noSubTasks);
  CoGroupContract<PactString,PactNull,Tuple,PactString,Tuple> antiJoinVisits=new CoGroupContract<PactString,PactNull,Tuple,PactString,Tuple>(AntiJoinVisits.class,"Antijoin DocsVisits");
  antiJoinVisits.setDegreeOfParallelism(noSubTasks);
  antiJoinVisits.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.8f);
  DataSinkContract<PactString,Tuple> result=new DataSinkContract<PactString,Tuple>(StringTupleDataOutFormat.class,output,"Result");
  result.setDegreeOfParallelism(noSubTasks);
  filterDocs.setInput(docs);
  filterRanks.setInput(ranks);
  filterVisits.setInput(visits);
  joinDocsRanks.setFirstInput(filterRanks);
  joinDocsRanks.setSecondInput(filterDocs);
  antiJoinVisits.setFirstInput(filterVisits);
  antiJoinVisits.setSecondInput(joinDocsRanks);
  result.setInput(antiJoinVisits);
  return new Plan(result,"Weblog Analysis");
}
