{
  try {
    final int NUM_MEM_PAGES=SIZE * NUM_PAIRS / PAGE_SIZE;
    MutableObjectIterator<IntPair> buildInput=new UniformIntPairGenerator(NUM_PAIRS,1,false);
    MutableObjectIterator<IntPair> probeInput=new UniformIntPairGenerator(0,1,false);
    MutableObjectIterator<IntPair> probeTester=new UniformIntPairGenerator(NUM_PAIRS,1,false);
    MutableObjectIterator<IntPair> updater=new UniformIntPairGenerator(NUM_PAIRS,1,false);
    MutableObjectIterator<IntPair> updateTester=new UniformIntPairGenerator(NUM_PAIRS,1,false);
    long start=0L;
    long end=0L;
    long first=System.currentTimeMillis();
    System.out.println("Creating and filling MutableHashMap...");
    start=System.currentTimeMillis();
    MutableHashTable<IntPair,IntPair> table=new MutableHashTable<IntPair,IntPair>(serializer,serializer,comparator,comparator,pairComparator,getMemory(NUM_MEM_PAGES,PAGE_SIZE),ioManager);
    table.open(buildInput,probeInput);
    end=System.currentTimeMillis();
    System.out.println("HashMap ready. Time: " + (end - start) + " ms");
    System.out.println("Starting first probing run...");
    start=System.currentTimeMillis();
    IntPair compare=new IntPair();
    HashBucketIterator<IntPair,IntPair> iter;
    IntPair target=new IntPair();
    while (probeTester.next(compare) != null) {
      iter=table.getMatchesFor(compare);
      iter.next(target);
      assertEquals(target.getKey(),compare.getKey());
      assertEquals(target.getValue(),compare.getValue());
      assertTrue(iter.next(target) == null);
    }
    end=System.currentTimeMillis();
    System.out.println("Probing done. Time: " + (end - start) + " ms");
    System.out.println("Starting update...");
    start=System.currentTimeMillis();
    while (updater.next(compare) != null) {
      compare.setValue(compare.getValue() * -1);
      iter=table.getMatchesFor(compare);
      iter.next(target);
      iter.writeBack(compare);
    }
    end=System.currentTimeMillis();
    System.out.println("Update done. Time: " + (end - start) + " ms");
    System.out.println("Starting second probing run...");
    start=System.currentTimeMillis();
    while (updateTester.next(compare) != null) {
      compare.setValue(compare.getValue() * -1);
      iter=table.getMatchesFor(compare);
      iter.next(target);
      assertEquals(target.getKey(),compare.getKey());
      assertEquals(target.getValue(),compare.getValue());
      assertTrue(iter.next(target) == null);
    }
    end=System.currentTimeMillis();
    System.out.println("Probing done. Time: " + (end - start) + " ms");
    table.close();
    end=System.currentTimeMillis();
    System.out.println("Overall time: " + (end - first) + " ms");
    assertEquals("Memory lost",NUM_MEM_PAGES,table.getFreedMemory().size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error: " + e.getMessage());
  }
}
