{
  final Plan p=getRolledOutPlan(numSteps,unique);
  final OptimizedPlan plan=compileNoStats(p);
  System.out.println(new PlanJSONDumpGenerator().getOptimizerPlanAsJSON(plan));
  final OptimizerPlanNodeResolver or=getOptimizerPlanNodeResolver(plan);
  PlanNode pointsSource=null;
  for (int i=0; i < numSteps; i++) {
    SingleInputPlanNode newCenterReducer=or.getNode(RECOMPUTE_CENTERS_REDUCER + i);
    SingleInputPlanNode newCenterCombiner=(SingleInputPlanNode)newCenterReducer.getPredecessor();
    SingleInputPlanNode nearestCenterReducer=or.getNode(NEAREST_CENTER_REDUCER + i);
    SingleInputPlanNode nearestCenterCombiner=nearestCenterReducer.getPredecessor() instanceof SingleInputPlanNode ? (SingleInputPlanNode)nearestCenterReducer.getPredecessor() : null;
    DualInputPlanNode cross=or.getNode(CROSS_NAME + i);
    checkStandardStrategies(nearestCenterReducer,nearestCenterCombiner,newCenterReducer,newCenterCombiner,null);
    if (i == 0) {
      pointsSource=cross.getInput1().getSource();
    }
 else {
      if (cross.getInput1().getSource() == pointsSource) {
        Assert.assertTrue(cross.getInput1().getTempMode().breaksPipeline());
      }
    }
    Assert.assertTrue(cross.getDriverStrategy() == DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_FIRST || cross.getDriverStrategy() == DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_SECOND || cross.getDriverStrategy() == DriverStrategy.NESTEDLOOP_STREAMED_OUTER_FIRST || cross.getDriverStrategy() == DriverStrategy.NESTEDLOOP_STREAMED_OUTER_SECOND);
  }
}
