{
  if (!Utils.isValidConf(stormConf)) {
    throw new IllegalArgumentException("Storm conf is not valid. Must be json-serializable");
  }
  final Configuration flinkConfig=GlobalConfiguration.getConfiguration();
  if (!stormConf.containsKey(Config.NIMBUS_HOST)) {
    stormConf.put(Config.NIMBUS_HOST,flinkConfig.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,"localhost"));
  }
  if (!stormConf.containsKey(Config.NIMBUS_THRIFT_PORT)) {
    stormConf.put(Config.NIMBUS_THRIFT_PORT,new Integer(flinkConfig.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,6123)));
  }
  final String serConf=JSONValue.toJSONString(stormConf);
  final FlinkClient client=FlinkClient.getConfiguredClient(stormConf);
  try {
    if (client.getTopologyJobId(name) != null) {
      throw new RuntimeException("Topology with name `" + name + "` already exists on cluster");
    }
    String localJar=System.getProperty("storm.jar");
    if (localJar == null) {
      try {
        for (        final URL url : ((ContextEnvironment)ExecutionEnvironment.getExecutionEnvironment()).getJars()) {
          localJar=new File(url.toURI()).getAbsolutePath();
        }
      }
 catch (      final URISyntaxException e) {
      }
catch (      final ClassCastException e) {
      }
    }
    logger.info("Submitting topology " + name + " in distributed mode with conf "+ serConf);
    client.submitTopologyWithOpts(name,localJar,topology);
  }
 catch (  final InvalidTopologyException e) {
    logger.warn("Topology submission exception: " + e.get_msg());
    throw e;
  }
catch (  final AlreadyAliveException e) {
    logger.warn("Topology already alive exception",e);
    throw e;
  }
  logger.info("Finished submitting topology: " + name);
}
