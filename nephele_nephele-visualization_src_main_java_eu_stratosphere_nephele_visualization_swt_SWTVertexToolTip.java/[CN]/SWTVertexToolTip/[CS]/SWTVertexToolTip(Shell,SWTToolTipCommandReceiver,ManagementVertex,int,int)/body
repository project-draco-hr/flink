{
  super(parent,x,y);
  this.managementVertex=managementVertex;
  final VertexVisualizationData vertexVisualizationData=(VertexVisualizationData)managementVertex.getAttachment();
  int height;
  final String taskName=managementVertex.getName() + " (" + (managementVertex.getIndexInGroup() + 1)+ " of "+ managementVertex.getNumberOfVerticesInGroup()+ ")";
  setTitle(taskName);
  if (vertexVisualizationData.isProfilingEnabledForJob()) {
    this.threadChart=createThreadChart(vertexVisualizationData);
    this.threadChart.setLayoutData(new GridData(GridData.FILL_BOTH));
    height=240;
  }
 else {
    this.threadChart=null;
    height=125;
  }
  final Composite tableComposite=new Composite(getShell(),SWT.NONE);
  tableComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  final GridLayout tableGridLayout=new GridLayout(3,false);
  tableGridLayout.marginHeight=0;
  tableGridLayout.marginLeft=0;
  tableComposite.setLayout(tableGridLayout);
  final GridData gridData1=new GridData();
  gridData1.horizontalSpan=2;
  gridData1.grabExcessHorizontalSpace=true;
  gridData1.widthHint=200;
  final GridData gridData2=new GridData();
  gridData2.grabExcessHorizontalSpace=true;
  new Label(tableComposite,SWT.NONE).setText("Instance type:");
  this.instanceTypeLabel=new Label(tableComposite,SWT.NONE);
  this.instanceTypeLabel.setText(this.managementVertex.getInstanceType());
  this.instanceTypeLabel.setLayoutData(gridData1);
  new Label(tableComposite,SWT.NONE).setText("Instance ID:");
  this.instanceIDLabel=new Label(tableComposite,SWT.NONE);
  this.instanceIDLabel.setText(this.managementVertex.getInstanceName());
  this.instanceIDLabel.setLayoutData(gridData2);
  final Button switchToInstanceButton=new Button(tableComposite,SWT.PUSH);
  switchToInstanceButton.setText("Switch to instance...");
  switchToInstanceButton.setEnabled(vertexVisualizationData.isProfilingEnabledForJob());
  switchToInstanceButton.setVisible(false);
  new Label(tableComposite,SWT.NONE).setText("Execution state:");
  this.executionStateLabel=new Label(tableComposite,SWT.NONE);
  this.executionStateLabel.setText(this.managementVertex.getExecutionState().toString());
  this.executionStateLabel.setLayoutData(gridData1);
  final ManagementGroupVertex groupVertex=this.managementVertex.getGroupVertex();
  final GroupVertexVisualizationData groupVertexVisualizationData=(GroupVertexVisualizationData)groupVertex.getAttachment();
  if (groupVertexVisualizationData.isCPUBottleneck()) {
    this.warningComposite=createWarningComposite(WARNINGTEXT,SWT.ICON_WARNING);
    height+=ICONSIZE;
  }
 else {
    this.warningComposite=null;
  }
  final Composite taskActionComposite=new Composite(getShell(),SWT.NONE);
  taskActionComposite.setLayout(new RowLayout(SWT.HORIZONTAL));
  getShell().setSize(WIDTH,height);
  finishInstantiation(x,y,WIDTH);
}
