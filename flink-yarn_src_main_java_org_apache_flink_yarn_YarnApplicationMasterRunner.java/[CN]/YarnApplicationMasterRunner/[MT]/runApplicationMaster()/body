{
  ActorSystem actorSystem=null;
  WebMonitor webMonitor=null;
  try {
    final String currDir=ENV.get(Environment.PWD.key());
    require(currDir != null,"Current working directory variable (%s) not set",Environment.PWD.key());
    final String appMasterHostname=ENV.get(Environment.NM_HOST.key());
    require(appMasterHostname != null,"ApplicationMaster hostname variable %s not set",Environment.NM_HOST.key());
    LOG.info("YARN assigned hostname for application master: {}",appMasterHostname);
    final Map<String,String> dynamicProperties=FlinkYarnSessionCli.getDynamicProperties(ENV.get(YarnConfigKeys.ENV_DYNAMIC_PROPERTIES));
    LOG.debug("YARN dynamic properties: {}",dynamicProperties);
    final Configuration config=createConfiguration(currDir,dynamicProperties);
    final YarnConfiguration yarnConfig=new YarnConfiguration();
    final int taskManagerContainerMemory;
    final int numInitialTaskManagers;
    final int slotsPerTaskManager;
    try {
      taskManagerContainerMemory=Integer.parseInt(ENV.get(YarnConfigKeys.ENV_TM_MEMORY));
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Invalid value for " + YarnConfigKeys.ENV_TM_MEMORY + " : "+ e.getMessage());
    }
    try {
      numInitialTaskManagers=Integer.parseInt(ENV.get(YarnConfigKeys.ENV_TM_COUNT));
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Invalid value for " + YarnConfigKeys.ENV_TM_COUNT + " : "+ e.getMessage());
    }
    try {
      slotsPerTaskManager=Integer.parseInt(ENV.get(YarnConfigKeys.ENV_SLOTS));
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Invalid value for " + YarnConfigKeys.ENV_SLOTS + " : "+ e.getMessage());
    }
    final ContaineredTaskManagerParameters taskManagerParameters=ContaineredTaskManagerParameters.create(config,taskManagerContainerMemory,slotsPerTaskManager);
    LOG.info("TaskManagers will be created with {} task slots",taskManagerParameters.numSlots());
    LOG.info("TaskManagers will be started with container size {} MB, JVM heap size {} MB, " + "JVM direct memory limit {} MB",taskManagerParameters.taskManagerTotalMemoryMB(),taskManagerParameters.taskManagerHeapSizeMB(),taskManagerParameters.taskManagerDirectMemoryLimitMB());
    final String amPortRange=config.getString(ConfigConstants.YARN_APPLICATION_MASTER_PORT,ConfigConstants.DEFAULT_YARN_JOB_MANAGER_PORT);
    actorSystem=BootstrapTools.startActorSystem(config,appMasterHostname,amPortRange,LOG);
    final String akkaHostname=AkkaUtils.getAddress(actorSystem).host().get();
    final int akkaPort=(Integer)AkkaUtils.getAddress(actorSystem).port().get();
    LOG.info("Actor system bound to hostname {}.",akkaHostname);
    final Configuration taskManagerConfig=BootstrapTools.generateTaskManagerConfiguration(config,akkaHostname,akkaPort,slotsPerTaskManager,TASKMANAGER_REGISTRATION_TIMEOUT);
    LOG.debug("TaskManager configuration: {}",taskManagerConfig);
    final ContainerLaunchContext taskManagerContext=createTaskManagerContext(config,yarnConfig,ENV,taskManagerParameters,taskManagerConfig,currDir,getTaskManagerClass(),LOG);
    LOG.debug("Starting JobManager actor");
    ActorRef jobManager=JobManager.startJobManagerActors(config,actorSystem,new scala.Some<>(JobManager.JOB_MANAGER_NAME()),scala.Option.<String>empty(),getJobManagerClass(),getArchivistClass())._1();
    LOG.debug("Starting Web Frontend");
    webMonitor=BootstrapTools.startWebMonitorIfConfigured(config,actorSystem,jobManager,LOG);
    final String webMonitorURL=webMonitor == null ? null : "http://" + appMasterHostname + ":"+ webMonitor.getServerPort();
    LOG.debug("Starting YARN Flink Resource Manager");
    LeaderRetrievalService leaderRetriever=LeaderRetrievalUtils.createLeaderRetrievalService(config,jobManager);
    Props resourceMasterProps=YarnFlinkResourceManager.createActorProps(getResourceManagerClass(),config,yarnConfig,leaderRetriever,appMasterHostname,webMonitorURL,taskManagerParameters,taskManagerContext,numInitialTaskManagers,LOG);
    ActorRef resourceMaster=actorSystem.actorOf(resourceMasterProps);
    LOG.debug("Starting process reapers for JobManager and YARN Application Master");
    actorSystem.actorOf(Props.create(ProcessReaper.class,resourceMaster,LOG,ACTOR_DIED_EXIT_CODE),"YARN_Resource_Master_Process_Reaper");
    actorSystem.actorOf(Props.create(ProcessReaper.class,jobManager,LOG,ACTOR_DIED_EXIT_CODE),"JobManager_Process_Reaper");
  }
 catch (  Throwable t) {
    LOG.error("YARN Application Master initialization failed",t);
    if (webMonitor != null) {
      try {
        webMonitor.stop();
      }
 catch (      Throwable ignored) {
        LOG.warn("Failed to stop the web frontend",t);
      }
    }
    if (actorSystem != null) {
      try {
        actorSystem.shutdown();
      }
 catch (      Throwable tt) {
        LOG.error("Error shutting down actor system",tt);
      }
    }
    return INIT_ERROR_EXIT_CODE;
  }
  LOG.info("YARN Application Master started");
  actorSystem.awaitTermination();
  if (webMonitor != null) {
    try {
      webMonitor.stop();
    }
 catch (    Throwable t) {
      LOG.error("Failed to stop the web frontend",t);
    }
  }
  return 0;
}
