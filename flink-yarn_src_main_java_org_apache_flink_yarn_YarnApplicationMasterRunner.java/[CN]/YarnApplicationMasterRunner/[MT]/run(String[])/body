{
  try {
    LOG.debug("All environment variables: {}",ENV);
    final String yarnClientUsername=ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME);
    require(yarnClientUsername != null,"YARN client user name environment variable {} not set",YarnConfigKeys.ENV_HADOOP_USER_NAME);
    final String currDir=ENV.get(Environment.PWD.key());
    require(currDir != null,"Current working directory variable (%s) not set",Environment.PWD.key());
    LOG.debug("Current working Directory: {}",currDir);
    final String remoteKeytabPath=ENV.get(YarnConfigKeys.KEYTAB_PATH);
    LOG.debug("remoteKeytabPath obtained {}",remoteKeytabPath);
    final String remoteKeytabPrincipal=ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL);
    LOG.info("remoteKeytabPrincipal obtained {}",remoteKeytabPrincipal);
    String keytabPath=null;
    if (remoteKeytabPath != null) {
      File f=new File(currDir,Utils.KEYTAB_FILE_NAME);
      keytabPath=f.getAbsolutePath();
      LOG.debug("keytabPath: {}",keytabPath);
    }
    UserGroupInformation currentUser=UserGroupInformation.getCurrentUser();
    LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",currentUser.getShortUserName(),yarnClientUsername);
    SecurityContext.SecurityConfiguration sc=new SecurityContext.SecurityConfiguration();
    File krb5Conf=new File(currDir,Utils.KRB5_FILE_NAME);
    if (krb5Conf.exists() && krb5Conf.canRead()) {
      String krb5Path=krb5Conf.getAbsolutePath();
      LOG.info("KRB5 Conf: {}",krb5Path);
      org.apache.hadoop.conf.Configuration conf=new org.apache.hadoop.conf.Configuration();
      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,"true");
      sc.setHadoopConfiguration(conf);
    }
    final Map<String,String> dynamicProperties=FlinkYarnSessionCli.getDynamicProperties(ENV.get(YarnConfigKeys.ENV_DYNAMIC_PROPERTIES));
    LOG.debug("YARN dynamic properties: {}",dynamicProperties);
    final Configuration flinkConfig=createConfiguration(currDir,dynamicProperties);
    if (keytabPath != null && remoteKeytabPrincipal != null) {
      flinkConfig.setString(ConfigConstants.SECURITY_KEYTAB_KEY,keytabPath);
      flinkConfig.setString(ConfigConstants.SECURITY_PRINCIPAL_KEY,remoteKeytabPrincipal);
    }
    flinkConfig.setString(ConfigConstants.FLINK_BASE_DIR_PATH_KEY,currDir);
    SecurityContext.install(sc.setFlinkConfiguration(flinkConfig));
    return SecurityContext.getInstalled().runSecured(new SecurityContext.FlinkSecuredRunner<Integer>(){
      @Override public Integer run(){
        return runApplicationMaster(flinkConfig);
      }
    }
);
  }
 catch (  Throwable t) {
    LOG.error("YARN Application Master initialization failed",t);
    return INIT_ERROR_EXIT_CODE;
  }
}
