{
  String restartStrategyName=configuration.getString(ConfigConstants.RESTART_STRATEGY,"none").toLowerCase();
switch (restartStrategyName) {
case "none":
    final int numberExecutionRetries=configuration.getInteger(ConfigConstants.EXECUTION_RETRIES_KEY,ConfigConstants.DEFAULT_EXECUTION_RETRIES);
  String pauseString=configuration.getString(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE,ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT);
String delayString=configuration.getString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY,pauseString);
long delay;
try {
delay=Duration.apply(delayString).toMillis();
}
 catch (NumberFormatException nfe) {
throw new Exception("Invalid config value for " + ConfigConstants.EXECUTION_RETRY_DELAY_KEY + ": "+ delayString+ ". Value must be a valid duration (such as 100 s or 1 min).");
}
if (numberExecutionRetries > 0 && delay >= 0) {
return new FixedDelayRestartStrategy(numberExecutionRetries,delay);
}
 else {
return NoRestartStrategy.create(configuration);
}
case "off":
case "disable":
return NoRestartStrategy.create(configuration);
case "fixeddelay":
case "fixed-delay":
return FixedDelayRestartStrategy.create(configuration);
default :
try {
Class<?> clazz=Class.forName(restartStrategyName);
if (clazz != null) {
Method method=clazz.getMethod(CREATE_METHOD,Configuration.class);
if (method != null) {
Object result=method.invoke(null,configuration);
if (result != null) {
return (RestartStrategy)result;
}
}
}
}
 catch (ClassNotFoundException cnfe) {
LOG.warn("Could not find restart strategy class {}.",restartStrategyName);
}
catch (NoSuchMethodException nsme) {
LOG.warn("Class {} does not has static method {}.",restartStrategyName,CREATE_METHOD);
}
catch (InvocationTargetException ite) {
LOG.warn("Cannot call static method {} from class {}.",CREATE_METHOD,restartStrategyName);
}
catch (IllegalAccessException iae) {
LOG.warn("Illegal access while calling method {} from class {}.",CREATE_METHOD,restartStrategyName);
}
return NoRestartStrategy.create(configuration);
}
}
