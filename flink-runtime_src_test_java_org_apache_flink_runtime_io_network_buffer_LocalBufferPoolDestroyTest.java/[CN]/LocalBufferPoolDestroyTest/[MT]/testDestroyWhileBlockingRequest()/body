{
  AtomicReference<Exception> asyncException=new AtomicReference<>();
  NetworkBufferPool networkBufferPool=null;
  LocalBufferPool localBufferPool=null;
  try {
    networkBufferPool=new NetworkBufferPool(1,4096,MemoryType.HEAP);
    localBufferPool=new LocalBufferPool(networkBufferPool,1);
    assertNotNull(localBufferPool.requestBuffer());
    assertNull(localBufferPool.requestBuffer());
    Thread thread=new Thread(new BufferRequestTask(localBufferPool,asyncException));
    thread.start();
    boolean success=false;
    for (int i=0; i < 50; i++) {
      StackTraceElement[] stackTrace=thread.getStackTrace();
      success=isInBlockingBufferRequest(stackTrace);
      if (success) {
        break;
      }
 else {
        Thread.sleep(500);
      }
    }
    assertTrue("Did not trigger blocking buffer request.",success);
    localBufferPool.lazyDestroy();
    thread.join();
    assertNotNull("Did not throw expected Exception",asyncException.get());
    assertTrue(asyncException.get() instanceof IllegalStateException);
  }
  finally {
    if (localBufferPool != null) {
      localBufferPool.lazyDestroy();
    }
    if (networkBufferPool != null) {
      networkBufferPool.destroyAllBufferPools();
      networkBufferPool.destroy();
    }
  }
}
