{
  EnvironmentInformation.logEnvironmentInfo(LOG,"YARN TaskManager",args);
  SignalHandler.register(LOG);
  JvmShutdownSafeguard.installAsShutdownHook(LOG);
  final Configuration configuration;
  try {
    configuration=TaskManager.parseArgsAndLoadConfig(args);
  }
 catch (  Throwable t) {
    LOG.error(t.getMessage(),t);
    System.exit(TaskManager.STARTUP_FAILURE_RETURN_CODE());
    return;
  }
  final Map<String,String> envs=System.getenv();
  final String yarnClientUsername=envs.get(YarnConfigKeys.ENV_CLIENT_USERNAME);
  final String localDirs=envs.get(Environment.LOCAL_DIRS.key());
  String flinkTempDirs=configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,null);
  if (flinkTempDirs == null) {
    LOG.info("Setting directories for temporary file " + localDirs);
    configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,localDirs);
  }
 else {
    LOG.info("Overriding YARN's temporary file directories with those " + "specified in the Flink config: " + flinkTempDirs);
  }
  LOG.info("YARN daemon runs as '" + UserGroupInformation.getCurrentUser().getShortUserName() + "' setting user to execute Flink TaskManager to '"+ yarnClientUsername+ "'");
  configuration.setBoolean(ConfigConstants.AKKA_JVM_EXIT_ON_FATAL_ERROR,true);
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser(yarnClientUsername);
  for (  Token<? extends TokenIdentifier> toks : UserGroupInformation.getCurrentUser().getTokens()) {
    ugi.addToken(toks);
  }
  String containerID=Preconditions.checkNotNull(envs.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID));
  final ResourceID resourceId=new ResourceID(containerID);
  LOG.info("ResourceID assigned for this container: {}",resourceId);
  ugi.doAs(new PrivilegedAction<Object>(){
    @Override public Object run(){
      try {
        TaskManager.selectNetworkInterfaceAndRunTaskManager(configuration,resourceId,taskManager);
      }
 catch (      Throwable t) {
        LOG.error("Error while starting the TaskManager",t);
        System.exit(TaskManager.STARTUP_FAILURE_RETURN_CODE());
      }
      return null;
    }
  }
);
}
