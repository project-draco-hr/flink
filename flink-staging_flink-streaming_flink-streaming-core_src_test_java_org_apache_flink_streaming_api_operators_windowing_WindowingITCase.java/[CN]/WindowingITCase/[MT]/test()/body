{
  List<Integer> inputs=new ArrayList<Integer>();
  inputs.add(1);
  inputs.add(2);
  inputs.add(2);
  inputs.add(3);
  inputs.add(4);
  inputs.add(5);
  inputs.add(10);
  inputs.add(11);
  inputs.add(11);
  KeySelector<Integer,?> key=new ModKey(2);
  Timestamp<Integer> ts=new Timestamp<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Integer value){
      return value;
    }
  }
;
  StreamExecutionEnvironment env=new TestStreamEnvironment(2,MEMORYSIZE);
  env.disableOperatorChaining();
  DataStream<Integer> source=env.fromCollection(inputs);
  source.window(Time.of(3,ts,1)).every(Time.of(2,ts,1)).sum(0).getDiscretizedStream().addSink(new TestSink1());
  source.window(Time.of(4,ts,1)).groupBy(new ModKey(2)).mapWindow(new IdentityWindowMap()).flatten().addSink(new TestSink2());
  source.groupBy(key).window(Time.of(4,ts,1)).sum(0).getDiscretizedStream().addSink(new TestSink4());
  source.groupBy(new ModKey(3)).window(Count.of(2)).groupBy(new ModKey(2)).mapWindow(new IdentityWindowMap()).flatten().addSink(new TestSink5());
  source.window(Time.of(2,ts)).every(Time.of(3,ts)).min(0).getDiscretizedStream().addSink(new TestSink3());
  source.groupBy(key).window(Time.of(4,ts,1)).max(0).getDiscretizedStream().addSink(new TestSink6());
  source.window(Time.of(5,ts,1)).mapWindow(new IdentityWindowMap()).flatten().addSink(new TestSink7());
  source.window(Time.of(5,ts,1)).every(Time.of(4,ts,1)).groupBy(new ModKey(2)).sum(0).getDiscretizedStream().addSink(new TestSink8());
  try {
    source.window(FullStream.window()).every(Count.of(2)).getDiscretizedStream();
    fail();
  }
 catch (  Exception e) {
  }
  try {
    source.window(FullStream.window()).getDiscretizedStream();
    fail();
  }
 catch (  Exception e) {
  }
  try {
    source.every(Count.of(5)).mapWindow(new IdentityWindowMap()).getDiscretizedStream();
    fail();
  }
 catch (  Exception e) {
  }
  source.every(Count.of(4)).sum(0).getDiscretizedStream().addSink(new TestSink11());
  source.window(FullStream.window()).every(Count.of(4)).groupBy(key).sum(0).getDiscretizedStream().addSink(new TestSink12());
  DataStream<Integer> source2=env.addSource(new ParallelSourceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public void run(    SourceContext<Integer> ctx) throws Exception {
      for (int i=1; i <= 10; i++) {
        ctx.collect(i);
      }
    }
    @Override public void cancel(){
    }
  }
);
  DataStream<Integer> source3=env.addSource(new RichParallelSourceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    private int i=1;
    @Override public void open(    Configuration parameters) throws Exception {
      super.open(parameters);
      i=1 + getRuntimeContext().getIndexOfThisSubtask();
    }
    @Override public void cancel(){
    }
    @Override public void run(    SourceContext<Integer> ctx) throws Exception {
      for (; i < 11; i+=2) {
        ctx.collect(i);
      }
    }
  }
);
  source2.window(Time.of(2,ts,1)).sum(0).getDiscretizedStream().addSink(new TestSink9());
  source3.window(Time.of(5,ts,1)).groupBy(new ModKey(2)).sum(0).getDiscretizedStream().addSink(new TestSink10());
  source.map(new MapFunction<Integer,Integer>(){
    @Override public Integer map(    Integer value) throws Exception {
      return value;
    }
  }
).every(Time.of(5,ts,1)).sum(0).getDiscretizedStream().addSink(new TestSink13());
  env.execute();
  List<StreamWindow<Integer>> expected1=new ArrayList<StreamWindow<Integer>>();
  expected1.add(StreamWindow.fromElements(5));
  expected1.add(StreamWindow.fromElements(11));
  expected1.add(StreamWindow.fromElements(9));
  expected1.add(StreamWindow.fromElements(10));
  expected1.add(StreamWindow.fromElements(32));
  validateOutput(expected1,TestSink1.windows);
  List<StreamWindow<Integer>> expected2=new ArrayList<StreamWindow<Integer>>();
  expected2.add(StreamWindow.fromElements(2,2,4));
  expected2.add(StreamWindow.fromElements(1,3));
  expected2.add(StreamWindow.fromElements(5));
  expected2.add(StreamWindow.fromElements(10));
  expected2.add(StreamWindow.fromElements(11,11));
  validateOutput(expected2,TestSink2.windows);
  List<StreamWindow<Integer>> expected3=new ArrayList<StreamWindow<Integer>>();
  expected3.add(StreamWindow.fromElements(4));
  expected3.add(StreamWindow.fromElements(5));
  expected3.add(StreamWindow.fromElements(22));
  expected3.add(StreamWindow.fromElements(8));
  expected3.add(StreamWindow.fromElements(10));
  validateOutput(expected3,TestSink4.windows);
  List<StreamWindow<Integer>> expected4=new ArrayList<StreamWindow<Integer>>();
  expected4.add(StreamWindow.fromElements(2,2));
  expected4.add(StreamWindow.fromElements(1));
  expected4.add(StreamWindow.fromElements(4));
  expected4.add(StreamWindow.fromElements(5,11));
  expected4.add(StreamWindow.fromElements(10));
  expected4.add(StreamWindow.fromElements(11));
  expected4.add(StreamWindow.fromElements(3));
  validateOutput(expected4,TestSink5.windows);
  List<StreamWindow<Integer>> expected5=new ArrayList<StreamWindow<Integer>>();
  expected5.add(StreamWindow.fromElements(1));
  expected5.add(StreamWindow.fromElements(4));
  expected5.add(StreamWindow.fromElements(10));
  validateOutput(expected5,TestSink3.windows);
  List<StreamWindow<Integer>> expected6=new ArrayList<StreamWindow<Integer>>();
  expected6.add(StreamWindow.fromElements(3));
  expected6.add(StreamWindow.fromElements(5));
  expected6.add(StreamWindow.fromElements(11));
  expected6.add(StreamWindow.fromElements(4));
  expected6.add(StreamWindow.fromElements(10));
  validateOutput(expected6,TestSink6.windows);
  List<StreamWindow<Integer>> expected7=new ArrayList<StreamWindow<Integer>>();
  expected7.add(StreamWindow.fromElements(1,2,2,3,4,5));
  expected7.add(StreamWindow.fromElements(10));
  expected7.add(StreamWindow.fromElements(10,11,11));
  validateOutput(expected7,TestSink7.windows);
  List<StreamWindow<Integer>> expected8=new ArrayList<StreamWindow<Integer>>();
  expected8.add(StreamWindow.fromElements(4,8));
  expected8.add(StreamWindow.fromElements(4,5));
  expected8.add(StreamWindow.fromElements(10,22));
  for (  List<Integer> sw : TestSink8.windows) {
    Collections.sort(sw);
  }
  validateOutput(expected8,TestSink8.windows);
  List<StreamWindow<Integer>> expected9=new ArrayList<StreamWindow<Integer>>();
  expected9.add(StreamWindow.fromElements(6));
  expected9.add(StreamWindow.fromElements(14));
  expected9.add(StreamWindow.fromElements(22));
  expected9.add(StreamWindow.fromElements(30));
  expected9.add(StreamWindow.fromElements(38));
  validateOutput(expected9,TestSink9.windows);
  List<StreamWindow<Integer>> expected10=new ArrayList<StreamWindow<Integer>>();
  expected10.add(StreamWindow.fromElements(6,9));
  expected10.add(StreamWindow.fromElements(16,24));
  for (  List<Integer> sw : TestSink10.windows) {
    Collections.sort(sw);
  }
  validateOutput(expected10,TestSink10.windows);
  List<StreamWindow<Integer>> expected11=new ArrayList<StreamWindow<Integer>>();
  expected11.add(StreamWindow.fromElements(8));
  expected11.add(StreamWindow.fromElements(38));
  expected11.add(StreamWindow.fromElements(49));
  for (  List<Integer> sw : TestSink11.windows) {
    Collections.sort(sw);
  }
  validateOutput(expected11,TestSink11.windows);
  List<StreamWindow<Integer>> expected12=new ArrayList<StreamWindow<Integer>>();
  expected12.add(StreamWindow.fromElements(4,4));
  expected12.add(StreamWindow.fromElements(18,20));
  expected12.add(StreamWindow.fromElements(18,31));
  for (  List<Integer> sw : TestSink12.windows) {
    Collections.sort(sw);
  }
  validateOutput(expected12,TestSink12.windows);
  List<StreamWindow<Integer>> expected13=new ArrayList<StreamWindow<Integer>>();
  expected13.add(StreamWindow.fromElements(17));
  expected13.add(StreamWindow.fromElements(27));
  expected13.add(StreamWindow.fromElements(49));
  for (  List<Integer> sw : TestSink13.windows) {
    Collections.sort(sw);
  }
  validateOutput(expected13,TestSink13.windows);
}
