{
  long[] actualFreq=new long[maxScale];
  CountMinHeavyHitter cmTopK=new CountMinHeavyHitter(fraction,error,confidence,seed);
  for (int i=0; i < cardinality; i++) {
    int value;
    if (r.nextDouble() < 0.1) {
      value=r.nextInt(10);
    }
 else {
      value=r.nextInt(maxScale);
    }
    cmTopK.addObject(value);
    actualFreq[value]++;
  }
  long frequency=(long)Math.ceil(cardinality * fraction);
  for (int i=0; i < actualFreq.length; i++) {
    if (actualFreq[i] > frequency) {
      assertTrue("Heavy Hitter not found :" + i + ","+ actualFreq[i],cmTopK.getHeavyHitters().containsKey(i));
    }
  }
  Iterator it=cmTopK.getHeavyHitters().entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry heavyHitter=(Map.Entry)it.next();
    Long estimateError=(Long)heavyHitter.getValue() - actualFreq[(Integer)heavyHitter.getKey()];
    assertTrue("Difference between real frequency and estimate is too large: " + estimateError,estimateError < (error * cardinality));
  }
}
