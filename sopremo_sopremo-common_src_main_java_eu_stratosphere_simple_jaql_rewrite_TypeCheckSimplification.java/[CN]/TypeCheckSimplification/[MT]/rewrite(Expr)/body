{
  Expr schemaExpr=check.child(1);
  if (!(schemaExpr instanceof ConstExpr)) {
    return false;
  }
  Expr inExpr=check.child(0);
  Schema inSchema=inExpr.getSchema();
  if (inSchema.is(ARRAY).maybeNot()) {
    return false;
  }
  JsonSchema jschema=(JsonSchema)((ConstExpr)schemaExpr).value;
  Schema asSchema=jschema.get();
  asSchema=SchemaTransformation.restrictToArray(asSchema);
  if (asSchema == null) {
    return false;
  }
  if (!(asSchema instanceof ArraySchema)) {
    return false;
  }
  ArraySchema arraySchema=(ArraySchema)asSchema;
  if (arraySchema.getHeadSchemata().size() != 0 || !arraySchema.hasRest()) {
    return false;
  }
  Var var=engine.env.makeVar("$c",inSchema.elements());
  schemaExpr=new ConstExpr(new JsonSchema(asSchema.elements()));
  CheckFn echeck=new CheckFn(new VarExpr(var),schemaExpr);
  TransformExpr te=new TransformExpr(var,inExpr,echeck);
  check.replaceInParent(te);
  return true;
}
