{
  try {
    String[] validValues=getValidTestValues();
    T[] validResults=getValidTestResults();
    String[] invalidTestValues=getInvalidTestValues();
    FieldParser<T> parser=getParser();
    T value=parser.createValue();
    for (    String invalid : invalidTestValues) {
      String[] testLine=new String[validValues.length + 1];
      int splitPoint=validValues.length / 2;
      System.arraycopy(validValues,0,testLine,0,splitPoint);
      testLine[splitPoint]=invalid;
      System.arraycopy(validValues,splitPoint,testLine,splitPoint + 1,validValues.length - splitPoint);
      byte[] bytes=concatenate(testLine,new char[]{'%'},true);
      int pos=0;
      for (int i=0; i < splitPoint; i++) {
        pos=parser.parseField(bytes,pos,bytes.length,new byte[]{'%'},value);
        assertTrue("Parser declared the valid value " + validValues[i] + " as invalid.",pos != -1);
        T result=parser.getLastResult();
        assertEquals("Parser parsed wrong.",validResults[i],result);
      }
      pos=parser.parseField(bytes,pos,bytes.length,new byte[]{'%'},value);
      assertTrue("Parser accepted the invalid value " + invalid + ".",pos == -1);
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Test erroneous: " + e.getMessage());
  }
}
