{
  final int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String solutionSetInput=(args.length > 1 ? args[1] : "");
  final String deltasInput=(args.length > 2 ? args[2] : "");
  final String dependencySetInput=(args.length > 3 ? args[3] : "");
  final String output=(args.length > 4 ? args[4] : "");
  final int maxIterations=(args.length > 5 ? Integer.parseInt(args[5]) : 1);
  FileDataSource initialSolutionSet=new FileDataSource(new CsvInputFormat(' ',LongValue.class,DoubleValue.class),solutionSetInput,"Initial Solution Set");
  FileDataSource initialDeltaSet=new FileDataSource(new CsvInputFormat(' ',LongValue.class,DoubleValue.class),deltasInput,"Initial DeltaSet");
  FileDataSource dependencySet=new FileDataSource(new CsvInputFormat(' ',LongValue.class,LongValue.class,LongValue.class),dependencySetInput,"Dependency Set");
  WorksetIteration iteration=new WorksetIteration(0,"Delta PageRank");
  iteration.setInitialSolutionSet(initialSolutionSet);
  iteration.setInitialWorkset(initialDeltaSet);
  iteration.setMaximumNumberOfIterations(maxIterations);
  JoinOperator dependenciesMatch=JoinOperator.builder(PRDependenciesComputationMatchDelta.class,LongValue.class,0,0).input1(iteration.getWorkset()).input2(dependencySet).name("calculate dependencies").build();
  ReduceOperator updateRanks=ReduceOperator.builder(UpdateRankReduceDelta.class,LongValue.class,0).input(dependenciesMatch).name("update ranks").build();
  JoinOperator oldRankComparison=JoinOperator.builder(RankComparisonMatch.class,LongValue.class,0,0).input1(updateRanks).input2(iteration.getSolutionSet()).name("comparison with old ranks").build();
  iteration.setNextWorkset(updateRanks);
  iteration.setSolutionSetDelta(oldRankComparison);
  FileDataSink result=new FileDataSink(CsvOutputFormat.class,output,iteration,"Final Ranks");
  CsvOutputFormat.configureRecordFormat(result).recordDelimiter('\n').fieldDelimiter(' ').field(LongValue.class,0).field(DoubleValue.class,1);
  Plan plan=new Plan(result,"Delta PageRank");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
