{
  if (closed.get()) {
    return false;
  }
  final int searchHashCode=hash(this.probeTypeComparator.hash(probeSideRecord));
  final int posHashCode=searchHashCode % numBuckets;
  MemorySegment bucket=buckets[posHashCode >> bucketsPerSegmentBits];
  int bucketInSegmentOffset=(posHashCode & bucketsPerSegmentMask) << NUM_INTRA_BUCKET_BITS;
  final int partitionNumber=bucket.get(bucketInSegmentOffset + HEADER_PARTITION_OFFSET);
  final InMemoryPartition<T> partition=partitions.get(partitionNumber);
  final MemorySegment[] overflowSegments=partition.overflowSegments;
  this.pairComparator.setReference(probeSideRecord);
  int countInSegment=bucket.getInt(bucketInSegmentOffset + HEADER_COUNT_OFFSET);
  int numInSegment=0;
  int posInSegment=bucketInSegmentOffset + BUCKET_HEADER_LENGTH;
  while (true) {
    while (numInSegment < countInSegment) {
      final int thisCode=bucket.getInt(posInSegment);
      posInSegment+=HASH_CODE_LEN;
      if (thisCode == searchHashCode) {
        final int pointerOffset=bucketInSegmentOffset + BUCKET_POINTER_START_OFFSET + (numInSegment * POINTER_LEN);
        final long pointer=bucket.getLong(pointerOffset);
        numInSegment++;
        try {
          partition.readRecordAt(pointer,targetForMatch);
          if (this.pairComparator.equalToReference(targetForMatch)) {
            this.partition=partition;
            this.bucket=bucket;
            this.pointerOffsetInBucket=pointerOffset;
            return true;
          }
        }
 catch (        IOException e) {
          throw new RuntimeException("Error deserializing record from the hashtable: " + e.getMessage(),e);
        }
      }
 else {
        numInSegment++;
      }
    }
    final long forwardPointer=bucket.getLong(bucketInSegmentOffset + HEADER_FORWARD_OFFSET);
    if (forwardPointer == BUCKET_FORWARD_POINTER_NOT_SET) {
      return false;
    }
    final int overflowSegNum=(int)(forwardPointer >>> 32);
    bucket=overflowSegments[overflowSegNum];
    bucketInSegmentOffset=(int)(forwardPointer & 0xffffffff);
    countInSegment=bucket.getInt(bucketInSegmentOffset + HEADER_COUNT_OFFSET);
    posInSegment=bucketInSegmentOffset + BUCKET_HEADER_LENGTH;
    numInSegment=0;
  }
}
