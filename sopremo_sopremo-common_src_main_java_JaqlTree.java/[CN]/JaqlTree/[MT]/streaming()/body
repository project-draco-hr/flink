{
  JaqlTree.streaming_return retval=new JaqlTree.streaming_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree STREAM23=null;
  CommonTree FUNCTION_CALL24=null;
  CommonTree STREAM25=null;
  CommonTree OPERATOR26=null;
  CommonTree STREAM27=null;
  CommonTree VAR28=null;
  CommonTree STREAM29=null;
  CommonTree FUNCTION_CALL30=null;
  CommonTree STREAM31=null;
  CommonTree OPERATOR32=null;
  CommonTree ops=null;
  CommonTree params=null;
  CommonTree STREAM23_tree=null;
  CommonTree FUNCTION_CALL24_tree=null;
  CommonTree STREAM25_tree=null;
  CommonTree OPERATOR26_tree=null;
  CommonTree STREAM27_tree=null;
  CommonTree VAR28_tree=null;
  CommonTree STREAM29_tree=null;
  CommonTree FUNCTION_CALL30_tree=null;
  CommonTree STREAM31_tree=null;
  CommonTree OPERATOR32_tree=null;
  CommonTree ops_tree=null;
  CommonTree params_tree=null;
  RewriteRuleNodeStream stream_VAR=new RewriteRuleNodeStream(adaptor,"token VAR");
  RewriteRuleNodeStream stream_STREAM=new RewriteRuleNodeStream(adaptor,"token STREAM");
  RewriteRuleNodeStream stream_FUNCTION_CALL=new RewriteRuleNodeStream(adaptor,"token FUNCTION_CALL");
  RewriteRuleNodeStream stream_OPERATOR=new RewriteRuleNodeStream(adaptor,"token OPERATOR");
  try {
    int alt18=5;
    alt18=dfa18.predict(input);
switch (alt18) {
case 1:
{
        _last=(CommonTree)input.LT(1);
{
          CommonTree _save_last_1=_last;
          CommonTree _first_1=null;
          _last=(CommonTree)input.LT(1);
          STREAM23=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_streaming291);
          if (state.failed)           return retval;
          if (state.backtracking == 1)           stream_STREAM.add(STREAM23);
          if (state.backtracking == 1)           if (_first_0 == null)           _first_0=STREAM23;
          match(input,Token.DOWN,null);
          if (state.failed)           return retval;
          int cnt12=0;
          loop12:           do {
            int alt12=2;
            alt12=dfa12.predict(input);
switch (alt12) {
case 1:
{
                _last=(CommonTree)input.LT(1);
                ops=(CommonTree)input.LT(1);
                matchAny(input);
                if (state.failed)                 return retval;
                if (state.backtracking == 1)                 if (_first_1 == null)                 _first_1=ops;
                if (state.backtracking == 1) {
                  retval.tree=(CommonTree)_first_0;
                  if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree)))                   retval.tree=(CommonTree)adaptor.getParent(retval.tree);
                }
              }
            break;
default :
          if (cnt12 >= 1)           break loop12;
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
      EarlyExitException eee=new EarlyExitException(12,input);
    throw eee;
}
cnt12++;
}
 while (true);
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_2=_last;
CommonTree _first_2=null;
_last=(CommonTree)input.LT(1);
FUNCTION_CALL24=(CommonTree)match(input,FUNCTION_CALL,FOLLOW_FUNCTION_CALL_in_streaming299);
if (state.failed) return retval;
if (state.backtracking == 1) stream_FUNCTION_CALL.add(FUNCTION_CALL24);
if (state.backtracking == 1) if (_first_1 == null) _first_1=FUNCTION_CALL24;
if (input.LA(1) == Token.DOWN) {
  match(input,Token.DOWN,null);
  if (state.failed)   return retval;
  loop13:   do {
    int alt13=2;
    int LA13_0=input.LA(1);
    if (((LA13_0 >= SCRIPT && LA13_0 <= 66))) {
      alt13=1;
    }
switch (alt13) {
case 1:
{
        _last=(CommonTree)input.LT(1);
        params=(CommonTree)input.LT(1);
        matchAny(input);
        if (state.failed)         return retval;
        if (state.backtracking == 1)         if (_first_2 == null)         _first_2=params;
        if (state.backtracking == 1) {
          retval.tree=(CommonTree)_first_0;
          if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree)))           retval.tree=(CommonTree)adaptor.getParent(retval.tree);
        }
      }
    break;
default :
  break loop13;
}
}
 while (true);
match(input,Token.UP,null);
if (state.failed) return retval;
}
_last=_save_last_2;
}
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_params=new RewriteRuleSubtreeStream(adaptor,"wildcard params",params);
RewriteRuleSubtreeStream stream_ops=new RewriteRuleSubtreeStream(adaptor,"wildcard ops",ops);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot(stream_FUNCTION_CALL.nextNode(),root_1);
{
CommonTree root_2=(CommonTree)adaptor.nil();
root_2=(CommonTree)adaptor.becomeRoot(stream_STREAM.nextNode(),root_2);
adaptor.addChild(root_2,stream_ops.nextTree());
adaptor.addChild(root_1,root_2);
}
adaptor.addChild(root_1,stream_params.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
case 2:
{
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_1=_last;
CommonTree _first_1=null;
_last=(CommonTree)input.LT(1);
STREAM25=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_streaming328);
if (state.failed) return retval;
if (state.backtracking == 1) stream_STREAM.add(STREAM25);
if (state.backtracking == 1) if (_first_0 == null) _first_0=STREAM25;
match(input,Token.DOWN,null);
if (state.failed) return retval;
int cnt14=0;
loop14: do {
int alt14=2;
alt14=dfa14.predict(input);
switch (alt14) {
case 1:
{
_last=(CommonTree)input.LT(1);
ops=(CommonTree)input.LT(1);
matchAny(input);
if (state.failed) return retval;
if (state.backtracking == 1) if (_first_1 == null) _first_1=ops;
if (state.backtracking == 1) {
retval.tree=(CommonTree)_first_0;
if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree))) retval.tree=(CommonTree)adaptor.getParent(retval.tree);
}
}
break;
default :
if (cnt14 >= 1) break loop14;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(14,input);
throw eee;
}
cnt14++;
}
 while (true);
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_2=_last;
CommonTree _first_2=null;
_last=(CommonTree)input.LT(1);
OPERATOR26=(CommonTree)match(input,OPERATOR,FOLLOW_OPERATOR_in_streaming336);
if (state.failed) return retval;
if (state.backtracking == 1) stream_OPERATOR.add(OPERATOR26);
if (state.backtracking == 1) if (_first_1 == null) _first_1=OPERATOR26;
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
if (state.failed) return retval;
loop15: do {
int alt15=2;
int LA15_0=input.LA(1);
if (((LA15_0 >= SCRIPT && LA15_0 <= 66))) {
alt15=1;
}
switch (alt15) {
case 1:
{
_last=(CommonTree)input.LT(1);
params=(CommonTree)input.LT(1);
matchAny(input);
if (state.failed) return retval;
if (state.backtracking == 1) if (_first_2 == null) _first_2=params;
if (state.backtracking == 1) {
retval.tree=(CommonTree)_first_0;
if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree))) retval.tree=(CommonTree)adaptor.getParent(retval.tree);
}
}
break;
default :
break loop15;
}
}
 while (true);
match(input,Token.UP,null);
if (state.failed) return retval;
}
_last=_save_last_2;
}
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_params=new RewriteRuleSubtreeStream(adaptor,"wildcard params",params);
RewriteRuleSubtreeStream stream_ops=new RewriteRuleSubtreeStream(adaptor,"wildcard ops",ops);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot(stream_OPERATOR.nextNode(),root_1);
{
CommonTree root_2=(CommonTree)adaptor.nil();
root_2=(CommonTree)adaptor.becomeRoot(stream_STREAM.nextNode(),root_2);
adaptor.addChild(root_2,stream_ops.nextTree());
adaptor.addChild(root_1,root_2);
}
adaptor.addChild(root_1,stream_params.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
case 3:
{
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_1=_last;
CommonTree _first_1=null;
_last=(CommonTree)input.LT(1);
STREAM27=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_streaming365);
if (state.failed) return retval;
if (state.backtracking == 1) stream_STREAM.add(STREAM27);
if (state.backtracking == 1) if (_first_0 == null) _first_0=STREAM27;
match(input,Token.DOWN,null);
if (state.failed) return retval;
_last=(CommonTree)input.LT(1);
VAR28=(CommonTree)match(input,VAR,FOLLOW_VAR_in_streaming367);
if (state.failed) return retval;
if (state.backtracking == 1) stream_VAR.add(VAR28);
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,stream_VAR.nextNode());
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
case 4:
{
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_1=_last;
CommonTree _first_1=null;
_last=(CommonTree)input.LT(1);
STREAM29=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_streaming378);
if (state.failed) return retval;
if (state.backtracking == 1) stream_STREAM.add(STREAM29);
if (state.backtracking == 1) if (_first_0 == null) _first_0=STREAM29;
match(input,Token.DOWN,null);
if (state.failed) return retval;
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_2=_last;
CommonTree _first_2=null;
_last=(CommonTree)input.LT(1);
FUNCTION_CALL30=(CommonTree)match(input,FUNCTION_CALL,FOLLOW_FUNCTION_CALL_in_streaming381);
if (state.failed) return retval;
if (state.backtracking == 1) stream_FUNCTION_CALL.add(FUNCTION_CALL30);
if (state.backtracking == 1) if (_first_1 == null) _first_1=FUNCTION_CALL30;
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
if (state.failed) return retval;
loop16: do {
int alt16=2;
int LA16_0=input.LA(1);
if (((LA16_0 >= SCRIPT && LA16_0 <= 66))) {
alt16=1;
}
switch (alt16) {
case 1:
{
_last=(CommonTree)input.LT(1);
params=(CommonTree)input.LT(1);
matchAny(input);
if (state.failed) return retval;
if (state.backtracking == 1) if (_first_2 == null) _first_2=params;
if (state.backtracking == 1) {
retval.tree=(CommonTree)_first_0;
if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree))) retval.tree=(CommonTree)adaptor.getParent(retval.tree);
}
}
break;
default :
break loop16;
}
}
 while (true);
match(input,Token.UP,null);
if (state.failed) return retval;
}
_last=_save_last_2;
}
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_params=new RewriteRuleSubtreeStream(adaptor,"wildcard params",params);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot(stream_FUNCTION_CALL.nextNode(),root_1);
while (stream_params.hasNext()) {
adaptor.addChild(root_1,stream_params.nextTree());
}
stream_params.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
case 5:
{
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_1=_last;
CommonTree _first_1=null;
_last=(CommonTree)input.LT(1);
STREAM31=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_streaming404);
if (state.failed) return retval;
if (state.backtracking == 1) stream_STREAM.add(STREAM31);
if (state.backtracking == 1) if (_first_0 == null) _first_0=STREAM31;
match(input,Token.DOWN,null);
if (state.failed) return retval;
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_2=_last;
CommonTree _first_2=null;
_last=(CommonTree)input.LT(1);
OPERATOR32=(CommonTree)match(input,OPERATOR,FOLLOW_OPERATOR_in_streaming407);
if (state.failed) return retval;
if (state.backtracking == 1) stream_OPERATOR.add(OPERATOR32);
if (state.backtracking == 1) if (_first_1 == null) _first_1=OPERATOR32;
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
if (state.failed) return retval;
loop17: do {
int alt17=2;
int LA17_0=input.LA(1);
if (((LA17_0 >= SCRIPT && LA17_0 <= 66))) {
alt17=1;
}
switch (alt17) {
case 1:
{
_last=(CommonTree)input.LT(1);
params=(CommonTree)input.LT(1);
matchAny(input);
if (state.failed) return retval;
if (state.backtracking == 1) if (_first_2 == null) _first_2=params;
if (state.backtracking == 1) {
retval.tree=(CommonTree)_first_0;
if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree))) retval.tree=(CommonTree)adaptor.getParent(retval.tree);
}
}
break;
default :
break loop17;
}
}
 while (true);
match(input,Token.UP,null);
if (state.failed) return retval;
}
_last=_save_last_2;
}
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_params=new RewriteRuleSubtreeStream(adaptor,"wildcard params",params);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot(stream_OPERATOR.nextNode(),root_1);
while (stream_params.hasNext()) {
adaptor.addChild(root_1,stream_params.nextTree());
}
stream_params.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
