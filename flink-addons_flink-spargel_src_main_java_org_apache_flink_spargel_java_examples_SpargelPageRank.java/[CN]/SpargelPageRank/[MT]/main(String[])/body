{
  final int numVertices=100;
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple2<Long,Double>> intialRanks=env.generateSequence(1,numVertices).map(new RichMapFunction<Long,Tuple2<Long,Double>>(){
    public Tuple2<Long,Double> map(    Long value){
      return new Tuple2<Long,Double>(value,1.0 / numVertices);
    }
  }
);
  DataSet<Tuple3<Long,Long,Double>> edgesWithProbability=env.generateSequence(1,numVertices).flatMap(new RichFlatMapFunction<Long,Tuple3<Long,Long,Double>>(){
    public void flatMap(    Long value,    Collector<Tuple3<Long,Long,Double>> out){
      int numOutEdges=(int)(Math.random() * (numVertices / 2));
      for (int i=0; i < numOutEdges; i++) {
        long target=(long)(Math.random() * numVertices) + 1;
        out.collect(new Tuple3<Long,Long,Double>(value,target,1.0 / numOutEdges));
      }
    }
  }
);
  DataSet<Tuple2<Long,Double>> result=intialRanks.runOperation(VertexCentricIteration.withValuedEdges(edgesWithProbability,new VertexRankUpdater(numVertices,BETA),new RankMessenger(),20));
  result.print();
  env.execute("Spargel PageRank");
}
