{
  if (initalNumberOfVertices == this.getCurrentNumberOfGroupMembers()) {
    return;
  }
  if (this.getCurrentNumberOfGroupMembers() != 1) {
    throw new IllegalStateException("This method can only be called for the initial setup of the execution graph");
  }
  if (this.userDefinedNumberOfMembers != -1 && this.userDefinedNumberOfMembers == getCurrentNumberOfGroupMembers()) {
    throw new GraphConversionException("Cannot overwrite user defined number of group members");
  }
  if (initalNumberOfVertices < this.getMinimumNumberOfGroupMember()) {
    throw new GraphConversionException("Number of members must be at least " + this.getMinimumNumberOfGroupMember());
  }
  if ((this.getMaximumNumberOfGroupMembers() != -1) && (initalNumberOfVertices > this.getMaximumNumberOfGroupMembers())) {
    throw new GraphConversionException("Number of members cannot exceed " + this.getMaximumNumberOfGroupMembers());
  }
  final ExecutionVertex originalVertex=this.getGroupMember(0);
  int currentNumberOfExecutionVertices=this.getCurrentNumberOfGroupMembers();
  while (currentNumberOfExecutionVertices++ < initalNumberOfVertices) {
    final ExecutionVertex vertex=originalVertex.splitVertex();
    vertex.setAllocatedResource(new AllocatedResource(DummyInstance.createDummyInstance(this.instanceType),this.instanceType,null));
    this.groupMembers.add(vertex);
  }
  int index=0;
  final Iterator<ExecutionVertex> it=this.groupMembers.iterator();
  while (it.hasNext()) {
    final ExecutionVertex vertex=it.next();
    vertex.setIndexInVertexGroup(index++);
  }
}
