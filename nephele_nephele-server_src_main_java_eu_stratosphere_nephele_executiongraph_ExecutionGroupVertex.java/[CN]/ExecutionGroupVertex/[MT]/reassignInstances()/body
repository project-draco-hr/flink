{
  int numberOfRequiredInstances=0;
synchronized (this.groupMembers) {
    numberOfRequiredInstances=(this.groupMembers.size() / this.numberOfSubtasksPerInstance) + (((this.groupMembers.size() % this.numberOfSubtasksPerInstance) != 0) ? 1 : 0);
  }
  final List<AllocatedResource> availableInstances=collectAvailabbleResources();
  while (availableInstances.size() < numberOfRequiredInstances) {
    final AllocatedResource newAllocatedResource=new AllocatedResource(DummyInstance.createDummyInstance(this.instanceType),null);
    availableInstances.add(newAllocatedResource);
  }
synchronized (this.groupMembers) {
    final Iterator<ExecutionVertex> it=this.groupMembers.iterator();
    int instanceIndex=0, i=0;
    int sizeOfIndexStep=availableInstances.size() / numberOfRequiredInstances;
    while (it.hasNext()) {
      final ExecutionVertex vertex=it.next();
      vertex.setAllocatedResource(availableInstances.get(instanceIndex));
      if ((++i % this.numberOfSubtasksPerInstance) == 0) {
        instanceIndex+=sizeOfIndexStep;
      }
    }
  }
synchronized (this.verticesSharingInstances) {
    final Iterator<ExecutionGroupVertex> it2=this.verticesSharingInstances.iterator();
    while (it2.hasNext()) {
      final ExecutionGroupVertex groupVertex=it2.next();
      groupVertex.reassignInstances();
    }
  }
}
