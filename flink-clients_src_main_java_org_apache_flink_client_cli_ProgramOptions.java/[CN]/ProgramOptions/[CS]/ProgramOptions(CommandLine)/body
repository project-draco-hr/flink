{
  super(line);
  String[] args=line.hasOption(ARGS_OPTION.getOpt()) ? line.getOptionValues(ARGS_OPTION.getOpt()) : line.getArgs();
  if (line.hasOption(JAR_OPTION.getOpt())) {
    this.jarFilePath=line.getOptionValue(JAR_OPTION.getOpt());
  }
 else   if (args.length > 0) {
    jarFilePath=args[0];
    args=Arrays.copyOfRange(args,1,args.length);
  }
 else {
    jarFilePath=null;
  }
  this.programArgs=args;
  this.entryPointClass=line.hasOption(CLASS_OPTION.getOpt()) ? line.getOptionValue(CLASS_OPTION.getOpt()) : null;
  if (line.hasOption(PARALLELISM_OPTION.getOpt())) {
    String parString=line.getOptionValue(PARALLELISM_OPTION.getOpt());
    try {
      parallelism=Integer.parseInt(parString);
      if (parallelism <= 0) {
        throw new NumberFormatException();
      }
    }
 catch (    NumberFormatException e) {
      throw new CliArgsException("The parallelism must be a positive number: " + parString);
    }
  }
 else {
    parallelism=-1;
  }
}
