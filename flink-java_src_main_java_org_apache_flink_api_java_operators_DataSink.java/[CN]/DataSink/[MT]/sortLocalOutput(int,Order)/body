{
  Keys.ExpressionKeys<T> ek=new Keys.ExpressionKeys<>(field,this.type);
  int[] flatKeys=ek.computeLogicalKeyPositions();
  if (!Keys.ExpressionKeys.isSortKey(field,this.type)) {
    throw new InvalidProgramException("Selected sort key is not a sortable type");
  }
  if (this.sortKeyPositions == null) {
    this.sortKeyPositions=flatKeys;
    this.sortOrders=new Order[flatKeys.length];
    Arrays.fill(this.sortOrders,order);
  }
 else {
    int oldLength=this.sortKeyPositions.length;
    int newLength=oldLength + flatKeys.length;
    this.sortKeyPositions=Arrays.copyOf(this.sortKeyPositions,newLength);
    this.sortOrders=Arrays.copyOf(this.sortOrders,newLength);
    for (int i=0; i < flatKeys.length; i++) {
      this.sortKeyPositions[oldLength + i]=flatKeys[i];
      this.sortOrders[oldLength + i]=order;
    }
  }
  return this;
}
