{
  final int numThreads=8;
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CheckpointIDCounter counter=createCompletedCheckpoints();
  counter.start();
  ExecutorService executor=null;
  try {
    executor=Executors.newFixedThreadPool(numThreads);
    List<Future<List<Long>>> resultFutures=new ArrayList<>(numThreads);
    for (int i=0; i < numThreads; i++) {
      resultFutures.add(executor.submit(new Incrementer(startLatch,counter)));
    }
    startLatch.countDown();
    final int expectedTotal=numThreads * Incrementer.NumIncrements;
    List<Long> all=new ArrayList<>(expectedTotal);
    for (    Future<List<Long>> result : resultFutures) {
      List<Long> counts=result.get();
      for (      long val : counts) {
        all.add(val);
      }
    }
    Collections.sort(all);
    assertEquals(expectedTotal,all.size());
    long current=0;
    for (    long val : all) {
      assertEquals(++current,val);
    }
    assertEquals(expectedTotal + 1,counter.getAndIncrement());
  }
  finally {
    if (executor != null) {
      executor.shutdown();
    }
    counter.stop();
  }
}
