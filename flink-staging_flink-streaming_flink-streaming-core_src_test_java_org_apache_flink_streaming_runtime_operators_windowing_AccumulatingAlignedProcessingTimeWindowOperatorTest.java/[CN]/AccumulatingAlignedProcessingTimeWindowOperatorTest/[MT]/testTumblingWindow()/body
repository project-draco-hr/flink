{
  try {
    final int windowSize=50;
    final CollectingOutput<Integer> out=new CollectingOutput<>(windowSize);
    final StreamingRuntimeContext mockContext=mock(StreamingRuntimeContext.class);
    when(mockContext.getTaskName()).thenReturn("Test task name");
    AbstractAlignedProcessingTimeWindowOperator<Integer,Integer,Integer> op=new AccumulatingProcessingTimeWindowOperator<>(validatingIdentityFunction,identitySelector,windowSize,windowSize);
    op.setup(out,mockContext);
    op.open(new Configuration());
    final int numElements=1000;
    for (int i=0; i < numElements; i++) {
      op.processElement(new StreamRecord<Integer>(i));
      Thread.sleep(1);
    }
    op.close();
    op.dispose();
    List<Integer> result=out.getElements();
    assertEquals(numElements,result.size());
    Collections.sort(result);
    for (int i=0; i < numElements; i++) {
      assertEquals(i,result.get(i).intValue());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
