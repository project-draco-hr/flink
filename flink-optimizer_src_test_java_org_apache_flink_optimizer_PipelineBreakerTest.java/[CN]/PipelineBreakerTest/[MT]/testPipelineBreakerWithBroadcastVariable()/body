{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.getConfig().setExecutionMode(ExecutionMode.PIPELINED);
    env.setParallelism(64);
    DataSet<Long> source=env.generateSequence(1,10).map(new IdentityMapper<Long>());
    DataSet<Long> result=source.map(new IdentityMapper<Long>()).map(new IdentityMapper<Long>()).withBroadcastSet(source,"bc");
    result.output(new DiscardingOutputFormat<Long>());
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    SingleInputPlanNode mapper=(SingleInputPlanNode)sink.getInput().getSource();
    SingleInputPlanNode mapperInput=(SingleInputPlanNode)mapper.getInput().getSource();
    assertEquals(TempMode.NONE,mapper.getInput().getTempMode());
    assertEquals(TempMode.NONE,mapper.getBroadcastInputs().get(0).getTempMode());
    assertEquals(DataExchangeMode.BATCH,mapperInput.getInput().getDataExchangeMode());
    assertEquals(DataExchangeMode.BATCH,mapper.getBroadcastInputs().get(0).getDataExchangeMode());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
