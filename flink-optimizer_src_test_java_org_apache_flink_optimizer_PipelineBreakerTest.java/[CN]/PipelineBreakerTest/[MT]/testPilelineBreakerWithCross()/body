{
  try {
{
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(64);
      DataSet<Long> initialSource=env.generateSequence(1,10);
      Configuration conf=new Configuration();
      conf.setString(Optimizer.HINT_LOCAL_STRATEGY,Optimizer.HINT_LOCAL_STRATEGY_NESTEDLOOP_BLOCKED_OUTER_FIRST);
      initialSource.map(new IdentityMapper<Long>()).cross(initialSource).withParameters(conf).output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
      Plan p=env.createProgramPlan();
      OptimizedPlan op=compileNoStats(p);
      SinkPlanNode sink=op.getDataSinks().iterator().next();
      DualInputPlanNode mapper=(DualInputPlanNode)sink.getInput().getSource();
      assertTrue(mapper.getInput1().getTempMode().breaksPipeline());
    }
{
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(64);
      DataSet<Long> initialSource=env.generateSequence(1,10);
      Configuration conf=new Configuration();
      conf.setString(Optimizer.HINT_LOCAL_STRATEGY,Optimizer.HINT_LOCAL_STRATEGY_NESTEDLOOP_BLOCKED_OUTER_SECOND);
      initialSource.map(new IdentityMapper<Long>()).cross(initialSource).withParameters(conf).output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
      Plan p=env.createProgramPlan();
      OptimizedPlan op=compileNoStats(p);
      SinkPlanNode sink=op.getDataSinks().iterator().next();
      DualInputPlanNode mapper=(DualInputPlanNode)sink.getInput().getSource();
      assertTrue(mapper.getInput2().getTempMode().breaksPipeline());
    }
{
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(64);
      DataSet<Long> initialSource=env.generateSequence(1,10);
      Configuration conf=new Configuration();
      conf.setString(Optimizer.HINT_LOCAL_STRATEGY,Optimizer.HINT_LOCAL_STRATEGY_NESTEDLOOP_STREAMED_OUTER_FIRST);
      initialSource.map(new IdentityMapper<Long>()).cross(initialSource).withParameters(conf).output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
      Plan p=env.createProgramPlan();
      OptimizedPlan op=compileNoStats(p);
      SinkPlanNode sink=op.getDataSinks().iterator().next();
      DualInputPlanNode mapper=(DualInputPlanNode)sink.getInput().getSource();
      assertTrue(mapper.getInput1().getTempMode().breaksPipeline());
    }
{
      ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(64);
      DataSet<Long> initialSource=env.generateSequence(1,10);
      Configuration conf=new Configuration();
      conf.setString(Optimizer.HINT_LOCAL_STRATEGY,Optimizer.HINT_LOCAL_STRATEGY_NESTEDLOOP_STREAMED_OUTER_SECOND);
      initialSource.map(new IdentityMapper<Long>()).cross(initialSource).withParameters(conf).output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
      Plan p=env.createProgramPlan();
      OptimizedPlan op=compileNoStats(p);
      SinkPlanNode sink=op.getDataSinks().iterator().next();
      DualInputPlanNode mapper=(DualInputPlanNode)sink.getInput().getSource();
      assertTrue(mapper.getInput2().getTempMode().breaksPipeline());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
