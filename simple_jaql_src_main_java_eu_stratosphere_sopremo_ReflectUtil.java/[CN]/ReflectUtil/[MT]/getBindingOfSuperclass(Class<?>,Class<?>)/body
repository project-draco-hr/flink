{
  if (!superClass.isAssignableFrom(type))   throw new IllegalArgumentException(type + " does not extend or implement " + superClass);
  if (superClass.getTypeParameters().length == 0)   return BoundType.of(superClass);
  List<Type> hierarchy=getHierarchy(superClass,type);
  if (hierarchy.isEmpty())   return BoundType.of(superClass,getStaticBoundTypes((ParameterizedType)type.getGenericSuperclass()));
  return resolvePartially(BoundType.of(type),hierarchy);
}
