{
  try {
    BufferOrEvent[] sequence={createBuffer(1),createBuffer(1),createBuffer(0),createBuffer(2),createBarrier(2,1),createBarrier(2,0),createBarrier(2,2),createBuffer(1),createBuffer(0),createBarrier(3,1),createBarrier(3,2),createBuffer(1),createBuffer(0),createBarrier(4,2),createBarrier(4,1),createBuffer(1),createBuffer(2),createBarrier(3,0),createBuffer(0),createBarrier(4,0),createBuffer(1),createBuffer(2),createBarrier(5,1),createBuffer(0),createBarrier(5,0),createBuffer(1),createBarrier(5,2),createBuffer(1),createBarrier(6,1),createBuffer(0),createBarrier(6,0),createBuffer(1),createBarrier(7,1),createBuffer(0),createBarrier(7,2),createBuffer(2),createBarrier(8,2),createBuffer(0),createBarrier(8,1),createBuffer(1),createBarrier(9,1),createBarrier(7,0),createBuffer(0),createBarrier(9,2),createBuffer(2),createBarrier(10,2),createBarrier(8,0),createBuffer(1),createBuffer(2),createBarrier(9,0),createBuffer(1),createBuffer(0),createBuffer(2)};
    MockInputGate gate=new MockInputGate(PAGE_SIZE,3,Arrays.asList(sequence));
    BarrierTracker tracker=new BarrierTracker(gate);
    CheckpointSequenceValidator validator=new CheckpointSequenceValidator(2,3,4,5,7,8,9);
    tracker.registerCheckpointEventHandler(validator);
    for (    BufferOrEvent boe : sequence) {
      if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {
        assertEquals(boe,tracker.getNextNonBlocked());
      }
    }
    assertNull(tracker.getNextNonBlocked());
    assertNull(tracker.getNextNonBlocked());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
