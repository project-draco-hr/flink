{
  List<Tuple2<Integer,String>> inputs2=new ArrayList<Tuple2<Integer,String>>();
  inputs2.add(new Tuple2<Integer,String>(1,"a"));
  inputs2.add(new Tuple2<Integer,String>(0,"b"));
  inputs2.add(new Tuple2<Integer,String>(2,"a"));
  inputs2.add(new Tuple2<Integer,String>(-1,"a"));
  inputs2.add(new Tuple2<Integer,String>(-2,"a"));
  inputs2.add(new Tuple2<Integer,String>(10,"a"));
  inputs2.add(new Tuple2<Integer,String>(2,"b"));
  inputs2.add(new Tuple2<Integer,String>(1,"a"));
  List<Tuple2<Integer,String>> expected2=new ArrayList<Tuple2<Integer,String>>();
  expected2.add(new Tuple2<Integer,String>(-1,"a"));
  expected2.add(new Tuple2<Integer,String>(-2,"a"));
  expected2.add(new Tuple2<Integer,String>(0,"b"));
  LinkedList<CloneableTriggerPolicy<Tuple2<Integer,String>>> triggers=new LinkedList<CloneableTriggerPolicy<Tuple2<Integer,String>>>();
  triggers.add(new CountTriggerPolicy<Tuple2<Integer,String>>(3));
  LinkedList<CloneableEvictionPolicy<Tuple2<Integer,String>>> evictions=new LinkedList<CloneableEvictionPolicy<Tuple2<Integer,String>>>();
  evictions.add(new TumblingEvictionPolicy<Tuple2<Integer,String>>());
  LinkedList<TriggerPolicy<Tuple2<Integer,String>>> centralTriggers=new LinkedList<TriggerPolicy<Tuple2<Integer,String>>>();
  GroupedStreamDiscretizer<Tuple2<Integer,String>,Tuple2<Integer,String>> invokable2=new GroupedStreamDiscretizer<Tuple2<Integer,String>,Tuple2<Integer,String>>(new ReduceFunction<Tuple2<Integer,String>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<Integer,String> reduce(    Tuple2<Integer,String> value1,    Tuple2<Integer,String> value2) throws Exception {
      if (value1.f0 <= value2.f0) {
        return value1;
      }
 else {
        return value2;
      }
    }
  }
,keySelector,triggers,evictions,centralTriggers,null);
  List<Tuple2<Integer,String>> result=MockContext.createAndExecute(invokable2,inputs2);
  List<Tuple2<Integer,String>> actual2=new LinkedList<Tuple2<Integer,String>>();
  for (  Tuple2<Integer,String> current : result) {
    actual2.add(current);
  }
  assertEquals(new HashSet<Tuple2<Integer,String>>(expected2),new HashSet<Tuple2<Integer,String>>(actual2));
  assertEquals(expected2.size(),actual2.size());
}
