{
  List<Tuple2<Integer,String>> inputs=new ArrayList<Tuple2<Integer,String>>();
  inputs.add(new Tuple2<Integer,String>(1,"a"));
  inputs.add(new Tuple2<Integer,String>(1,"b"));
  inputs.add(new Tuple2<Integer,String>(1,"c"));
  inputs.add(new Tuple2<Integer,String>(2,"a"));
  inputs.add(new Tuple2<Integer,String>(2,"b"));
  inputs.add(new Tuple2<Integer,String>(2,"c"));
  inputs.add(new Tuple2<Integer,String>(2,"b"));
  inputs.add(new Tuple2<Integer,String>(2,"a"));
  inputs.add(new Tuple2<Integer,String>(2,"c"));
  inputs.add(new Tuple2<Integer,String>(3,"c"));
  inputs.add(new Tuple2<Integer,String>(3,"a"));
  inputs.add(new Tuple2<Integer,String>(3,"b"));
  inputs.add(new Tuple2<Integer,String>(4,"a"));
  inputs.add(new Tuple2<Integer,String>(4,"b"));
  inputs.add(new Tuple2<Integer,String>(4,"c"));
  inputs.add(new Tuple2<Integer,String>(5,"c"));
  inputs.add(new Tuple2<Integer,String>(5,"a"));
  inputs.add(new Tuple2<Integer,String>(5,"b"));
  inputs.add(new Tuple2<Integer,String>(10,"b"));
  inputs.add(new Tuple2<Integer,String>(10,"a"));
  inputs.add(new Tuple2<Integer,String>(10,"c"));
  inputs.add(new Tuple2<Integer,String>(11,"a"));
  inputs.add(new Tuple2<Integer,String>(11,"a"));
  inputs.add(new Tuple2<Integer,String>(11,"c"));
  inputs.add(new Tuple2<Integer,String>(11,"c"));
  inputs.add(new Tuple2<Integer,String>(11,"b"));
  inputs.add(new Tuple2<Integer,String>(11,"b"));
  List<Tuple2<Integer,String>> expected=new ArrayList<Tuple2<Integer,String>>();
  expected.add(new Tuple2<Integer,String>(12,"a"));
  expected.add(new Tuple2<Integer,String>(12,"b"));
  expected.add(new Tuple2<Integer,String>(12,"c"));
  expected.add(new Tuple2<Integer,String>(12,"a"));
  expected.add(new Tuple2<Integer,String>(12,"b"));
  expected.add(new Tuple2<Integer,String>(12,"c"));
  expected.add(new Tuple2<Integer,String>(5,"a"));
  expected.add(new Tuple2<Integer,String>(5,"b"));
  expected.add(new Tuple2<Integer,String>(5,"c"));
  expected.add(new Tuple2<Integer,String>(10,"a"));
  expected.add(new Tuple2<Integer,String>(10,"b"));
  expected.add(new Tuple2<Integer,String>(10,"c"));
  expected.add(new Tuple2<Integer,String>(32,"a"));
  expected.add(new Tuple2<Integer,String>(32,"b"));
  expected.add(new Tuple2<Integer,String>(32,"c"));
  Timestamp<Tuple2<Integer,String>> myTimeStamp=new Timestamp<Tuple2<Integer,String>>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Tuple2<Integer,String> value){
      return value.f0;
    }
  }
;
  TimestampWrapper<Tuple2<Integer,String>> myTimeStampWrapper=new TimestampWrapper<Tuple2<Integer,String>>(myTimeStamp,1);
  ReduceFunction<Tuple2<Integer,String>> myReduceFunction=new ReduceFunction<Tuple2<Integer,String>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<Integer,String> reduce(    Tuple2<Integer,String> value1,    Tuple2<Integer,String> value2) throws Exception {
      return new Tuple2<Integer,String>(value1.f0 + value2.f0,value1.f1);
    }
  }
;
  LinkedList<TriggerPolicy<Tuple2<Integer,String>>> triggers=new LinkedList<TriggerPolicy<Tuple2<Integer,String>>>();
  triggers.add(new TimeTriggerPolicy<Tuple2<Integer,String>>(2L,myTimeStampWrapper,2L));
  LinkedList<CloneableEvictionPolicy<Tuple2<Integer,String>>> evictions=new LinkedList<CloneableEvictionPolicy<Tuple2<Integer,String>>>();
  evictions.add(new TimeEvictionPolicy<Tuple2<Integer,String>>(4L,myTimeStampWrapper));
  LinkedList<CloneableTriggerPolicy<Tuple2<Integer,String>>> distributedTriggers=new LinkedList<CloneableTriggerPolicy<Tuple2<Integer,String>>>();
  GroupedStreamDiscretizer<Tuple2<Integer,String>,Tuple2<Integer,String>> invokable=new GroupedStreamDiscretizer<Tuple2<Integer,String>,Tuple2<Integer,String>>(myReduceFunction,keySelector,distributedTriggers,evictions,triggers,null);
  ArrayList<Tuple2<Integer,String>> result=new ArrayList<Tuple2<Integer,String>>();
  for (  Tuple2<Integer,String> t : MockContext.createAndExecute(invokable,inputs)) {
    result.add(t);
  }
  assertEquals(new HashSet<Tuple2<Integer,String>>(expected),new HashSet<Tuple2<Integer,String>>(result));
  assertEquals(expected.size(),result.size());
  triggers.clear();
  triggers.add(new TimeTriggerPolicy<Tuple2<Integer,String>>(2L,myTimeStampWrapper,2L));
  evictions.clear();
  LinkedList<EvictionPolicy<Tuple2<Integer,String>>> centralEvictions=new LinkedList<EvictionPolicy<Tuple2<Integer,String>>>();
  centralEvictions.add(new TimeEvictionPolicy<Tuple2<Integer,String>>(4L,myTimeStampWrapper));
  invokable=new GroupedStreamDiscretizer<Tuple2<Integer,String>,Tuple2<Integer,String>>(myReduceFunction,keySelector,distributedTriggers,evictions,triggers,centralEvictions);
  result=new ArrayList<Tuple2<Integer,String>>();
  for (  Tuple2<Integer,String> t : MockContext.createAndExecute(invokable,inputs)) {
    result.add(t);
  }
  assertEquals(new HashSet<Tuple2<Integer,String>>(expected),new HashSet<Tuple2<Integer,String>>(result));
  assertEquals(expected.size(),result.size());
}
