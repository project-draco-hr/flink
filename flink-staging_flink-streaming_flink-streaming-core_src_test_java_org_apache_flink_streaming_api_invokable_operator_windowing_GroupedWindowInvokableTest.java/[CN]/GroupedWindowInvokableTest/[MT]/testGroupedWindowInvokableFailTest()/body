{
  ReduceFunction<Object> userFunction=new ReduceFunction<Object>(){
    private static final long serialVersionUID=1L;
    @Override public Object reduce(    Object value1,    Object value2) throws Exception {
      return null;
    }
  }
;
  KeySelector<Object,Object> keySelector=new KeySelector<Object,Object>(){
    private static final long serialVersionUID=1L;
    @Override public Object getKey(    Object value) throws Exception {
      return null;
    }
  }
;
  LinkedList<CloneableEvictionPolicy<Object>> distributedEvictionPolicies=new LinkedList<CloneableEvictionPolicy<Object>>();
  LinkedList<CloneableTriggerPolicy<Object>> distributedTriggerPolicies=new LinkedList<CloneableTriggerPolicy<Object>>();
  LinkedList<EvictionPolicy<Object>> centralEvictionPolicies=new LinkedList<EvictionPolicy<Object>>();
  LinkedList<TriggerPolicy<Object>> centralTriggerPolicies=new LinkedList<TriggerPolicy<Object>>();
  try {
    new GroupedStreamDiscretizer<Object,Object>(userFunction,keySelector,distributedTriggerPolicies,distributedEvictionPolicies,centralTriggerPolicies,centralEvictionPolicies);
    fail("Creating instance without any trigger or eviction policy should cause an UnsupportedOperationException but didn't. (1)");
  }
 catch (  UnsupportedOperationException e) {
  }
  try {
    new GroupedStreamDiscretizer<Object,Object>(userFunction,keySelector,null,null,null,null);
    fail("Creating instance without any trigger or eviction policy should cause an UnsupportedOperationException but didn't. (2)");
  }
 catch (  UnsupportedOperationException e) {
  }
  centralTriggerPolicies.add(new CountTriggerPolicy<Object>(5));
  distributedTriggerPolicies.add(new CountTriggerPolicy<Object>(5));
  try {
    new GroupedStreamDiscretizer<Object,Object>(userFunction,keySelector,distributedTriggerPolicies,distributedEvictionPolicies,centralTriggerPolicies,centralEvictionPolicies);
    fail("Creating instance without any eviction policy should cause an UnsupportedOperationException but didn't. (3)");
  }
 catch (  UnsupportedOperationException e) {
  }
  centralTriggerPolicies.clear();
  distributedTriggerPolicies.clear();
  centralEvictionPolicies.add(new CountEvictionPolicy<Object>(5));
  try {
    new GroupedStreamDiscretizer<Object,Object>(userFunction,keySelector,distributedTriggerPolicies,distributedEvictionPolicies,centralTriggerPolicies,centralEvictionPolicies);
    fail("Creating instance without any trigger policy should cause an UnsupportedOperationException but didn't. (4)");
  }
 catch (  UnsupportedOperationException e) {
  }
  centralTriggerPolicies.add(new CountTriggerPolicy<Object>(5));
  distributedEvictionPolicies.add(new CountEvictionPolicy<Object>(5));
  try {
    new GroupedStreamDiscretizer<Object,Object>(userFunction,keySelector,distributedTriggerPolicies,distributedEvictionPolicies,centralTriggerPolicies,centralEvictionPolicies);
    fail("Creating instance with central and distributed eviction should cause an UnsupportedOperationException but didn't. (4)");
  }
 catch (  UnsupportedOperationException e) {
  }
}
