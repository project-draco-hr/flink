{
  final Configuration conf=getOperator().getParameters();
  final String localStrategy=conf.getString(Optimizer.HINT_LOCAL_STRATEGY,null);
  final boolean useCombiner;
  if (localStrategy != null) {
    if (Optimizer.HINT_LOCAL_STRATEGY_SORT.equals(localStrategy)) {
      useCombiner=false;
    }
 else     if (Optimizer.HINT_LOCAL_STRATEGY_COMBINING_SORT.equals(localStrategy)) {
      if (!isCombineable()) {
        Optimizer.LOG.warn("Strategy hint for GroupReduce '" + getOperator().getName() + "' requires combinable reduce, but user function is not marked combinable.");
      }
      useCombiner=true;
    }
 else {
      throw new CompilerException("Invalid local strategy hint for match contract: " + localStrategy);
    }
  }
 else {
    useCombiner=isCombineable();
  }
  Ordering groupOrder=null;
  if (getOperator() instanceof GroupReduceOperatorBase) {
    groupOrder=((GroupReduceOperatorBase<?,?,?>)getOperator()).getGroupOrder();
    if (groupOrder != null && groupOrder.getNumberOfFields() == 0) {
      groupOrder=null;
    }
  }
  OperatorDescriptorSingle props=useCombiner ? (this.keys == null ? new AllGroupWithPartialPreGroupProperties() : new GroupReduceWithCombineProperties(this.keys,groupOrder,customPartitioner)) : (this.keys == null ? new AllGroupReduceProperties() : new GroupReduceProperties(this.keys,groupOrder,customPartitioner));
  return Collections.singletonList(props);
}
