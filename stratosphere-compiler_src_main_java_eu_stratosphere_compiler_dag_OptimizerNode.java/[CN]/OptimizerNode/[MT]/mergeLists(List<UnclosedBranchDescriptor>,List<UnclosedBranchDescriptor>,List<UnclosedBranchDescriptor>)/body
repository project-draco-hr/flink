{
  removeClosedBranches(child1open);
  removeClosedBranches(child2open);
  result.clear();
  if (child1open == null || child1open.isEmpty()) {
    if (child2open != null && !child2open.isEmpty()) {
      result.addAll(child2open);
    }
    return false;
  }
  if (child2open == null || child2open.isEmpty()) {
    result.addAll(child1open);
    return false;
  }
  int index1=child1open.size() - 1;
  int index2=child2open.size() - 1;
  boolean didCloseABranch=false;
  while (index1 >= 0 || index2 >= 0) {
    int id1=-1;
    int id2=index2 >= 0 ? child2open.get(index2).getBranchingNode().getId() : -1;
    while (index1 >= 0 && (id1=child1open.get(index1).getBranchingNode().getId()) > id2) {
      result.add(child1open.get(index1));
      index1--;
    }
    while (index2 >= 0 && (id2=child2open.get(index2).getBranchingNode().getId()) > id1) {
      result.add(child2open.get(index2));
      index2--;
    }
    if (id1 == id2) {
      didCloseABranch=true;
      OptimizerNode currBanchingNode=child1open.get(index1).getBranchingNode();
      long vector1=child1open.get(index1).getJoinedPathsVector();
      long vector2=child2open.get(index2).getJoinedPathsVector();
      if (vector1 == vector2) {
        result.add(child1open.get(index1));
      }
 else {
        if (this.hereJoinedBranchers == null) {
          this.hereJoinedBranchers=new ArrayList<OptimizerNode>(2);
        }
        this.hereJoinedBranchers.add(currBanchingNode);
        long joinedInputs=vector1 | vector2;
        long allInputs=(0x1L << currBanchingNode.getOutgoingConnections().size()) - 1;
        if (joinedInputs == allInputs) {
          addClosedBranch(currBanchingNode);
        }
 else {
          result.add(new UnclosedBranchDescriptor(currBanchingNode,joinedInputs));
        }
      }
      index1--;
      index2--;
    }
  }
  Collections.reverse(result);
  return didCloseABranch;
}
