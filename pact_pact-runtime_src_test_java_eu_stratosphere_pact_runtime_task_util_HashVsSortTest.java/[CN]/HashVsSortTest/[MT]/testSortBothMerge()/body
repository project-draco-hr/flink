{
  try {
    Generator generator1=new Generator(SEED1,INPUT_1_SIZE / 10,100,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    Generator generator2=new Generator(SEED2,INPUT_2_SIZE,100,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    Reader<KeyValuePair<TestData.Key,TestData.Value>> reader1=new RecordReaderMock(generator1,INPUT_1_SIZE);
    Reader<KeyValuePair<TestData.Key,TestData.Value>> reader2=new RecordReaderMock(generator2,INPUT_2_SIZE);
    final MatchStub<TestData.Key,TestData.Value,TestData.Value,TestData.Key,TestData.Value> matcher=new NoOpMatcher();
    final Collector<TestData.Key,TestData.Value> collector=new DiscardingOutputCollector<TestData.Key,TestData.Value>();
    generator1.reset();
    generator2.reset();
    SortMergeMatchIterator<TestData.Key,TestData.Value,TestData.Value> iterator=new SortMergeMatchIterator<TestData.Key,TestData.Value,TestData.Value>(memoryManager,ioManager,reader1,reader2,TestData.Key.class,TestData.Value.class,TestData.Value.class,MEMORY_SIZE,64,0.7f,LocalStrategy.SORT_BOTH_MERGE,parentTask);
    long start=System.nanoTime();
    iterator.open();
    while (iterator.callWithNextKey(matcher,collector))     ;
    iterator.close();
    long elapsed=System.nanoTime() - start;
    double msecs=elapsed / (1000 * 1000);
    System.out.println("Sort-Merge Took " + msecs + " msecs.");
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
