{
  DataStream<OUT> inputStream=this.copy();
  @SuppressWarnings({"unchecked","rawtypes"}) SingleOutputStreamOperator<R,?> returnStream=new SingleOutputStreamOperator(environment,functionName,outTypeInfo);
  try {
    jobGraphBuilder.addStreamVertex(returnStream.getId(),functionInvokable,inTypeInfo,outTypeInfo,functionName,SerializationUtils.serialize((Serializable)function),degreeOfParallelism);
  }
 catch (  SerializationException e) {
    throw new RuntimeException("Cannot serialize user defined function");
  }
  connectGraph(inputStream,returnStream.getId(),0);
  if (inputStream instanceof IterativeDataStream) {
    IterativeDataStream<OUT> iterativeStream=(IterativeDataStream<OUT>)inputStream;
    returnStream.addIterationSource(iterativeStream.iterationID.toString(),iterativeStream.waitTime);
  }
  return returnStream;
}
