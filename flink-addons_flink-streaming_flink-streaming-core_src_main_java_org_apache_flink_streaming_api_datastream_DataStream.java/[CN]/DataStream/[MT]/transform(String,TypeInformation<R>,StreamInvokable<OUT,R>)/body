{
  DataStream<OUT> inputStream=this.copy();
  @SuppressWarnings({"unchecked","rawtypes"}) SingleOutputStreamOperator<R,?> returnStream=new SingleOutputStreamOperator(environment,operatorName,outTypeInfo);
  jobGraphBuilder.addStreamVertex(returnStream.getId(),invokable,getType(),outTypeInfo,operatorName,degreeOfParallelism);
  connectGraph(inputStream,returnStream.getId(),0);
  if (inputStream instanceof IterativeDataStream) {
    IterativeDataStream<OUT> iterativeStream=(IterativeDataStream<OUT>)inputStream;
    returnStream.addIterationSource(iterativeStream.iterationID,iterativeStream.waitTime);
  }
  return returnStream;
}
