{
  DataStream<OUT> inputStream=this.copy();
  @SuppressWarnings({"unchecked","rawtypes"}) SingleOutputStreamOperator<R,?> returnStream=new SingleOutputStreamOperator(environment,functionName);
  try {
    jobGraphBuilder.addTask(returnStream.getId(),functionInvokable,typeWrapper,functionName,SerializationUtils.serialize((Serializable)function),degreeOfParallelism);
  }
 catch (  SerializationException e) {
    throw new RuntimeException("Cannot serialize user defined function");
  }
  connectGraph(inputStream,returnStream.getId(),0);
  if (inputStream instanceof IterativeDataStream) {
    returnStream.addIterationSource(((IterativeDataStream<OUT>)inputStream).iterationID.toString());
  }
  if (userDefinedName != null) {
    returnStream.name(getUserDefinedNames());
  }
  return returnStream;
}
