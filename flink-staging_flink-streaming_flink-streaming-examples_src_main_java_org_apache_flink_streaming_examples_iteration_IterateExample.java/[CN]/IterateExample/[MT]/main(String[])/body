{
  if (!parseParameters(args)) {
    return;
  }
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment().setBufferTimeout(1);
  DataStream<Tuple2<Integer,Integer>> inputStream;
  if (fileInput) {
    inputStream=env.readTextFile(inputPath).map(new FibonacciInputMap());
  }
 else {
    inputStream=env.addSource(new RandomFibonacciSource());
  }
  IterativeDataStream<Tuple5<Integer,Integer,Integer,Integer,Integer>> it=inputStream.map(new InputMap()).iterate(5000);
  SplitDataStream<Tuple5<Integer,Integer,Integer,Integer,Integer>> step=it.map(new Step()).split(new MySelector());
  it.closeWith(step.select("iterate"));
  DataStream<Tuple2<Tuple2<Integer,Integer>,Integer>> numbers=step.select("output").map(new OutputMap()).window(Time.of(1L,TimeUnit.SECONDS)).every(Time.of(500L,TimeUnit.MILLISECONDS)).maxBy(1).flatten();
  if (fileOutput) {
    numbers.writeAsText(outputPath,1);
  }
 else {
    numbers.print();
  }
  env.execute("Streaming Iteration Example");
}
