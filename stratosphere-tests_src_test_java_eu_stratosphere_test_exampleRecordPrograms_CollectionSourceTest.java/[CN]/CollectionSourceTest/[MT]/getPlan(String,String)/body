{
  int numSubTasks=Integer.parseInt(arg1);
  String output=arg2;
  List<Object> tmp=new ArrayList<Object>();
  int pos=0;
  for (  String s : COUNTS.split("\n")) {
    List<Object> tmpInner=new ArrayList<Object>();
    tmpInner.add(pos++);
    tmpInner.add(Integer.parseInt(s.split(" ")[1]));
    tmp.add(tmpInner);
  }
  CollectionDataSource source=new CollectionDataSource(new SerializableIteratorTest(),"test_iterator");
  CollectionDataSource source2=new CollectionDataSource(tmp,"test_collection");
  JoinOperator join=JoinOperator.builder(Join.class,IntValue.class,0,0).input1(source).input2(source2).build();
  FileDataSink out=new FileDataSink(new CsvOutputFormat(),output,join,"Collection Join");
  CsvOutputFormat.configureRecordFormat(out).recordDelimiter('\n').fieldDelimiter(' ').field(StringValue.class,0).field(IntValue.class,1);
  Plan plan=new Plan(out,"CollectionDataSource");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
