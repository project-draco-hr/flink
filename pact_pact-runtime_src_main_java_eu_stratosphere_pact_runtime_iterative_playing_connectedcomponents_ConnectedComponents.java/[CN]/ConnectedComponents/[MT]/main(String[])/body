{
  int degreeOfParallelism=2;
  JobGraph jobGraph=new JobGraph("ConnectedComponents");
  JobInputVertex initialSolutionset=JobGraphUtils.createInput(LongLongInputFormat.class,"file://" + PlayConstants.PLAY_DIR + "test-inputs/connectedComponents/initialSolutionset","InitialSolutionset",jobGraph,degreeOfParallelism);
  TaskConfig initialSolutionsetConfig=new TaskConfig(initialSolutionset.getConfiguration());
  initialSolutionsetConfig.setComparatorFactoryForOutput(PactRecordComparatorFactory.class,0);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(initialSolutionset.getConfiguration(),initialSolutionsetConfig.getPrefixForOutputParameters(0),new int[]{0},new Class[]{PactLong.class});
  JobInputVertex initialWorkset=JobGraphUtils.createInput(LongLongInputFormat.class,"file://" + PlayConstants.PLAY_DIR + "test-inputs/connectedComponents/initialWorkset","InitialWorkset",jobGraph,degreeOfParallelism);
  JobInputVertex graph=JobGraphUtils.createInput(LongLongInputFormat.class,"file://" + PlayConstants.PLAY_DIR + "test-inputs/connectedComponents/graph","Graph",jobGraph,degreeOfParallelism);
  TaskConfig graphConfig=new TaskConfig(graph.getConfiguration());
  graphConfig.setComparatorFactoryForOutput(PactRecordComparatorFactory.class,0);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(graph.getConfiguration(),graphConfig.getPrefixForOutputParameters(0),new int[]{0},new Class[]{PactLong.class});
  JobTaskVertex head=JobGraphUtils.createTask(BulkIterationHeadPactTask.class,"Head-Repartition",jobGraph,degreeOfParallelism);
  TaskConfig headConfig=new TaskConfig(head.getConfiguration());
  headConfig.setDriver(MapDriver.class);
  headConfig.setStubClass(IdentityMap.class);
  headConfig.setMemorySize(25 * JobGraphUtils.MEGABYTE);
  headConfig.setBackChannelMemoryFraction(0.5f);
  headConfig.setComparatorFactoryForOutput(PactRecordComparatorFactory.class,0);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(head.getConfiguration(),headConfig.getPrefixForOutputParameters(0),new int[]{0},new Class[]{PactLong.class});
  headConfig.enableWorkset();
  JobTaskVertex intermediateMinimumComponentID=JobGraphUtils.createTask(BulkIterationIntermediatePactTask.class,"Intermediate-MinimumComponentID",jobGraph,degreeOfParallelism);
  TaskConfig intermediateMinimumComponentIDConfig=new TaskConfig(intermediateMinimumComponentID.getConfiguration());
  intermediateMinimumComponentIDConfig.setDriver(ReduceDriver.class);
  intermediateMinimumComponentIDConfig.setStubClass(MinimumComponentIDReduce.class);
  intermediateMinimumComponentIDConfig.setLocalStrategy(TaskConfig.LocalStrategy.SORT);
  intermediateMinimumComponentIDConfig.setMemorySize(3 * JobGraphUtils.MEGABYTE);
  intermediateMinimumComponentIDConfig.setNumFilehandles(2);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(intermediateMinimumComponentID.getConfiguration(),"pact.in.param.0.",new int[]{0},new Class[]{PactLong.class});
  JobTaskVertex intermediateSolutionSetUpdate=JobGraphUtils.createTask(WorksetIterationSolutionSetJoinTask.class,"Intermediate-UpdateComponentID",jobGraph,degreeOfParallelism);
  TaskConfig intermediateSolutionSetUpdateConfig=new TaskConfig(intermediateSolutionSetUpdate.getConfiguration());
  intermediateSolutionSetUpdateConfig.setDriver(SolutionSetMatchDriver.class);
  intermediateSolutionSetUpdateConfig.setStubClass(UpdateCompontentIDMatch.class);
  intermediateSolutionSetUpdateConfig.setLocalStrategy(TaskConfig.LocalStrategy.HYBRIDHASH_SECOND);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(intermediateSolutionSetUpdateConfig.getConfiguration(),"pact.in.param.0.",new int[]{0},new Class[]{PactLong.class});
  PactRecordComparatorFactory.writeComparatorSetupToConfig(intermediateSolutionSetUpdateConfig.getConfiguration(),"pact.in.param.1.",new int[]{0},new Class[]{PactLong.class});
  intermediateSolutionSetUpdateConfig.setMemorySize(20 * JobGraphUtils.MEGABYTE);
  JobTaskVertex tail=JobGraphUtils.createTask(BulkIterationTailPactTask.class,"Tail-NeighborComponentIDToWorkset",jobGraph,degreeOfParallelism);
  TaskConfig tailConfig=new TaskConfig(tail.getConfiguration());
  tailConfig.setDriver(MatchDriver.class);
  tailConfig.setStubClass(NeighborComponentIDToWorksetMatch.class);
  tailConfig.setLocalStrategy(TaskConfig.LocalStrategy.HYBRIDHASH_SECOND);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(tailConfig.getConfiguration(),"pact.in.param.0.",new int[]{0},new Class[]{PactLong.class});
  PactRecordComparatorFactory.writeComparatorSetupToConfig(tailConfig.getConfiguration(),"pact.in.param.1.",new int[]{0},new Class[]{PactLong.class});
  tailConfig.setMemorySize(20 * JobGraphUtils.MEGABYTE);
  tailConfig.setGateCached(0);
  tailConfig.setInputGateCacheMemoryFraction(0.5f);
  JobOutputVertex sync=JobGraphUtils.createSync(jobGraph,degreeOfParallelism);
  TaskConfig syncConfig=new TaskConfig(sync.getConfiguration());
  syncConfig.setNumberOfIterations(5);
  syncConfig.setConvergenceCriterion(WorksetEmptyConvergenceCriterion.class);
  JobOutputVertex output=JobGraphUtils.createFileOutput(jobGraph,"FinalOutput",degreeOfParallelism);
  TaskConfig outputConfig=new TaskConfig(output.getConfiguration());
  outputConfig.setStubClass(ConnectedComponentsOutFormat.class);
  outputConfig.setStubParameter(FileOutputFormat.FILE_PARAMETER_KEY,"file:///tmp/stratosphere/iterations");
  JobOutputVertex fakeTailOutput=JobGraphUtils.createFakeOutput(jobGraph,"FakeTailOutput",degreeOfParallelism);
  JobGraphUtils.connect(initialWorkset,head,ChannelType.INMEMORY,DistributionPattern.POINTWISE,ShipStrategy.FORWARD);
  JobGraphUtils.connect(head,intermediateMinimumComponentID,ChannelType.NETWORK,DistributionPattern.BIPARTITE,ShipStrategy.PARTITION_HASH);
  intermediateMinimumComponentIDConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,degreeOfParallelism);
  JobGraphUtils.connect(intermediateMinimumComponentID,intermediateSolutionSetUpdate,ChannelType.NETWORK,DistributionPattern.POINTWISE,ShipStrategy.FORWARD);
  intermediateSolutionSetUpdateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(initialSolutionset,intermediateSolutionSetUpdate,ChannelType.NETWORK,DistributionPattern.BIPARTITE,ShipStrategy.PARTITION_HASH);
  JobGraphUtils.connect(graph,tail,ChannelType.NETWORK,DistributionPattern.BIPARTITE,ShipStrategy.PARTITION_HASH);
  JobGraphUtils.connect(intermediateSolutionSetUpdate,tail,ChannelType.NETWORK,DistributionPattern.POINTWISE,ShipStrategy.FORWARD);
  tailConfig.setGateCached(0);
  tailConfig.setInputGateCacheMemoryFraction(0.5f);
  tailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(1,1);
  JobGraphUtils.connect(head,sync,ChannelType.NETWORK,DistributionPattern.POINTWISE,ShipStrategy.FORWARD);
  JobGraphUtils.connect(head,output,ChannelType.INMEMORY,DistributionPattern.POINTWISE,ShipStrategy.FORWARD);
  syncConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,degreeOfParallelism);
  JobGraphUtils.connect(tail,sync,ChannelType.NETWORK,DistributionPattern.POINTWISE,ShipStrategy.FORWARD);
  JobGraphUtils.connect(tail,fakeTailOutput,ChannelType.INMEMORY,DistributionPattern.POINTWISE,ShipStrategy.FORWARD);
  syncConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(1,degreeOfParallelism);
  initialWorkset.setVertexToShareInstancesWith(head);
  initialSolutionset.setVertexToShareInstancesWith(head);
  graph.setVertexToShareInstancesWith(head);
  intermediateMinimumComponentID.setVertexToShareInstancesWith(head);
  intermediateSolutionSetUpdate.setVertexToShareInstancesWith(head);
  tail.setVertexToShareInstancesWith(head);
  fakeTailOutput.setVertexToShareInstancesWith(head);
  output.setVertexToShareInstancesWith(head);
  sync.setVertexToShareInstancesWith(head);
  GlobalConfiguration.loadConfiguration(PlayConstants.PLAY_DIR + "local-conf");
  Configuration conf=GlobalConfiguration.getConfiguration();
  JobGraphUtils.submit(jobGraph,conf);
}
