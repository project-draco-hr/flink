{
  String streamId=record.getString(0);
  String name=record.getString(1);
  long progress=record.getLong(3);
  if (streamId.equals("grade")) {
    if (salaryHashmap.containsKey(name)) {
      Iterator<SalaryProgress> iterator=salaryHashmap.get(name).iterator();
      while (iterator.hasNext()) {
        SalaryProgress entry=iterator.next();
        if (progress - entry.progress > windowSize) {
          iterator.remove();
        }
 else {
          Tuple3<String,String,Integer> outputTuple=new Tuple3<String,String,Integer>(name,record.getString(2),entry.salary);
          outRecord.addTuple(outputTuple);
        }
      }
      if (outRecord.getNumOfTuples() != 0) {
        emit(outRecord);
      }
      outRecord.Clear();
    }
    if (!gradeHashmap.containsKey(name)) {
      gradeHashmap.put(name,new LinkedList<GradeProgress>());
    }
    gradeHashmap.get(name).add(new GradeProgress(record.getString(2),progress));
  }
 else {
    if (gradeHashmap.containsKey(name)) {
      Iterator<GradeProgress> iterator=gradeHashmap.get(name).iterator();
      while (iterator.hasNext()) {
        GradeProgress entry=iterator.next();
        if (progress - entry.progress > windowSize) {
          iterator.remove();
        }
 else {
          Tuple3<String,String,Integer> outputTuple=new Tuple3<String,String,Integer>(name,entry.grade,record.getInteger(2));
          outRecord.addTuple(outputTuple);
        }
      }
      if (outRecord.getNumOfTuples() != 0) {
        emit(outRecord);
      }
      outRecord.Clear();
    }
    if (!salaryHashmap.containsKey(name)) {
      salaryHashmap.put(name,new LinkedList<SalaryProgress>());
    }
    salaryHashmap.get(name).add(new SalaryProgress(record.getInteger(2),progress));
  }
}
