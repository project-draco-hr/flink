{
  LOG.info("Starting KafkaITCase.prepare()");
  tmpZkDir=tempFolder.newFolder();
  tmpKafkaDirs=new ArrayList<File>(NUMBER_OF_KAFKA_SERVERS);
  for (int i=0; i < NUMBER_OF_KAFKA_SERVERS; i++) {
    tmpKafkaDirs.add(tempFolder.newFolder());
  }
  kafkaHost=InetAddress.getLocalHost().getHostName();
  zkPort=NetUtils.getAvailablePort();
  zookeeperConnectionString="localhost:" + zkPort;
  zookeeper=null;
  brokers=null;
  try {
    LOG.info("Starting Zookeeper");
    zookeeper=getZookeeper();
    LOG.info("Starting KafkaServer");
    brokers=new ArrayList<KafkaServer>(NUMBER_OF_KAFKA_SERVERS);
    for (int i=0; i < NUMBER_OF_KAFKA_SERVERS; i++) {
      brokers.add(getKafkaServer(i,tmpKafkaDirs.get(i)));
      SocketServer socketServer=brokers.get(i).socketServer();
      String host="localhost";
      if (socketServer.host() != null) {
        host=socketServer.host();
      }
      brokerConnectionStrings+=host + ":" + socketServer.port()+ ",";
    }
    LOG.info("ZK and KafkaServer started.");
  }
 catch (  Throwable t) {
    LOG.warn("Test failed with exception",t);
    Assert.fail("Test failed with: " + t.getMessage());
  }
  Properties cProps=new Properties();
  cProps.setProperty("zookeeper.connect",zookeeperConnectionString);
  cProps.setProperty("bootstrap.servers",brokerConnectionStrings);
  cProps.setProperty("group.id","flink-tests");
  cProps.setProperty("auto.commit.enable","false");
  cProps.setProperty("auto.offset.reset","earliest");
  cProps.setProperty("fetch.message.max.bytes","256");
  standardProps=cProps;
  Properties consumerConfigProps=new Properties();
  consumerConfigProps.putAll(cProps);
  consumerConfigProps.setProperty("auto.offset.reset","smallest");
  consumerConfigProps.setProperty("flink.kafka.consumer.queue.size","1");
  standardCC=new ConsumerConfig(consumerConfigProps);
  zkClient=new ZkClient(standardCC.zkConnect(),standardCC.zkSessionTimeoutMs(),standardCC.zkConnectionTimeoutMs(),new FlinkKafkaConsumer081.KafkaZKStringSerializer());
}
