{
  SopremoPlan actualPlan=parseScript("using cleansing;" + "$dirty_earmarks = read hdfs('UsEarmark.json');" + "$nick_names = read hdfs('UsNickNames.json');"+ "NormalizeName = javaudf('eu.stratosphere.simple.jaql.CleansOperatorTest.normalizeName');"+ "$scrubbed_earmarks = scrub $dirty_earmark in $dirty_earmarks with {"+ "	// normalization with built-in expressions"+ "	amount: [$ as decimal, $ * 1000],"+ "	// normalization with user-defined functions"+ "	sponsorLastName: [required if $dirty_earmark.type == 's', NormalizeName],"+ "	sponsorFirstName: [required, NormalizeName, replace $ with $nick_names default $],"+ "};"+ "write $scrubbed_earmarks to hdfs('scrubbed_earmarks.json');");
  SopremoPlan expectedPlan=new SopremoPlan();
  Source input=new Source("input.json");
  Selection selection=new Selection().withCondition(new OrExpression(new UnaryExpression(JsonUtil.createPath("$","mgr")),new ComparativeExpression(JsonUtil.createPath("$","income"),BinaryOperator.GREATER,new ConstantExpression(30000)))).withInputs(input);
  Sink output=new Sink("output.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
