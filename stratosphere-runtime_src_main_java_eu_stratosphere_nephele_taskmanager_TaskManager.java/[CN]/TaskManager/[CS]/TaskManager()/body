{
  LOG.info("TaskManager started as user " + UserGroupInformation.getCurrentUser().getShortUserName());
  LOG.info("User system property: " + System.getProperty("user.name"));
  final InetSocketAddress jobManagerAddress;
{
    LOG.info("Reading location of job manager from configuration");
    final String address=GlobalConfiguration.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null);
    final int port=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
    if (address == null) {
      throw new Exception("Job manager address not configured in the GlobalConfiguration.");
    }
    try {
      final InetAddress tmpAddress=InetAddress.getByName(address);
      jobManagerAddress=new InetSocketAddress(tmpAddress,port);
    }
 catch (    UnknownHostException e) {
      LOG.fatal("Could not resolve JobManager host name.");
      throw new Exception("Could not resolve JobManager host name: " + e.getMessage(),e);
    }
    LOG.info("Connecting to JobManager at: " + jobManagerAddress);
  }
  try {
    this.jobManager=RPC.getProxy(JobManagerProtocol.class,jobManagerAddress,NetUtils.getSocketFactory());
  }
 catch (  IOException e) {
    LOG.fatal("Could not connect to the JobManager: " + e.getMessage(),e);
    throw new Exception("Failed to initialize connection to JobManager: " + e.getMessage(),e);
  }
  int ipcPort=GlobalConfiguration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY,-1);
  int dataPort=GlobalConfiguration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,-1);
  if (ipcPort == -1) {
    ipcPort=getAvailablePort();
  }
  if (dataPort == -1) {
    dataPort=getAvailablePort();
  }
{
    final InetAddress taskManagerAddress;
    try {
      taskManagerAddress=getTaskManagerAddress(jobManagerAddress);
    }
 catch (    Exception e) {
      throw new RuntimeException("The TaskManager failed to determine its own network address.",e);
    }
    this.localInstanceConnectionInfo=new InstanceConnectionInfo(taskManagerAddress,ipcPort,dataPort);
    LOG.info("TaskManager connection information:" + this.localInstanceConnectionInfo);
    try {
      this.taskManagerServer=RPC.getServer(this,taskManagerAddress.getHostAddress(),ipcPort,IPC_HANDLER_COUNT);
      this.taskManagerServer.start();
    }
 catch (    IOException e) {
      LOG.fatal("Failed to start TaskManager server. " + e.getMessage(),e);
      throw new Exception("Failed to start taskmanager server. " + e.getMessage(),e);
    }
  }
  try {
    this.globalInputSplitProvider=RPC.getProxy(InputSplitProviderProtocol.class,jobManagerAddress,NetUtils.getSocketFactory());
  }
 catch (  IOException e) {
    LOG.fatal(e.getMessage(),e);
    throw new Exception("Failed to initialize connection to global input split provider: " + e.getMessage(),e);
  }
  try {
    this.lookupService=RPC.getProxy(ChannelLookupProtocol.class,jobManagerAddress,NetUtils.getSocketFactory());
  }
 catch (  IOException e) {
    LOG.fatal(e.getMessage(),e);
    throw new Exception("Failed to initialize channel lookup protocol. " + e.getMessage(),e);
  }
  try {
    this.accumulatorProtocolProxy=RPC.getProxy(AccumulatorProtocol.class,jobManagerAddress,NetUtils.getSocketFactory());
  }
 catch (  IOException e) {
    LOG.fatal("Failed to initialize accumulator protocol: " + e.getMessage(),e);
    throw new Exception("Failed to initialize accumulator protocol: " + e.getMessage(),e);
  }
  if (GlobalConfiguration.getBoolean(ProfilingUtils.ENABLE_PROFILING_KEY,false)) {
    final String profilerClassName=GlobalConfiguration.getString(ProfilingUtils.TASKMANAGER_CLASSNAME_KEY,"eu.stratosphere.nephele.profiling.impl.TaskManagerProfilerImpl");
    this.profiler=ProfilingUtils.loadTaskManagerProfiler(profilerClassName,jobManagerAddress.getAddress(),this.localInstanceConnectionInfo);
    if (this.profiler == null) {
      LOG.error("Cannot find class name for the profiler.");
    }
 else {
      LOG.info("Profiling of jobs is enabled.");
    }
  }
 else {
    this.profiler=null;
    LOG.info("Profiling of jobs is disabled.");
  }
  final String[] tmpDirPaths=GlobalConfiguration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator);
  checkTempDirs(tmpDirPaths);
  final int pageSize=GlobalConfiguration.getInteger(ConfigConstants.TASK_MANAGER_NETWORK_BUFFER_SIZE_KEY,ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_BUFFER_SIZE);
  try {
    this.byteBufferedChannelManager=new ByteBufferedChannelManager(this.lookupService,this.localInstanceConnectionInfo);
  }
 catch (  Exception e) {
    LOG.fatal("Cannot create byte channel manager:" + e.getMessage(),e);
    throw new Exception("Failed to instantiate Byte-buffered channel manager. " + e.getMessage(),e);
  }
{
    HardwareDescription resources=HardwareDescriptionFactory.extractFromSystem();
    long memorySize=GlobalConfiguration.getInteger(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,-1);
    if (memorySize > 0) {
      resources=HardwareDescriptionFactory.construct(resources.getNumberOfCPUCores(),resources.getSizeOfPhysicalMemory(),memorySize * 1024L * 1024L);
    }
    this.hardwareDescription=resources;
    LOG.info("Initializing memory manager with " + (resources.getSizeOfFreeMemory() >>> 20) + " megabytes of memory. "+ "Page size is "+ pageSize+ " bytes.");
    try {
      @SuppressWarnings("unused") final boolean lazyAllocation=GlobalConfiguration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_LAZY_ALLOCATION_KEY,ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_LAZY_ALLOCATION);
      this.memoryManager=new DefaultMemoryManager(resources.getSizeOfFreeMemory(),pageSize);
    }
 catch (    Throwable t) {
      LOG.fatal("Unable to initialize memory manager with " + (resources.getSizeOfFreeMemory() >>> 20) + " megabytes of memory.",t);
      throw new Exception("Unable to initialize memory manager.",t);
    }
  }
  this.ioManager=new IOManager(tmpDirPaths);
  this.heartbeatThread=new Thread(){
    @Override public void run(){
      runHeartbeatLoop();
    }
  }
;
  this.heartbeatThread.setName("Heartbeat Thread");
  this.heartbeatThread.start();
  Runtime.getRuntime().addShutdownHook(new TaskManagerCleanUp(this));
}
