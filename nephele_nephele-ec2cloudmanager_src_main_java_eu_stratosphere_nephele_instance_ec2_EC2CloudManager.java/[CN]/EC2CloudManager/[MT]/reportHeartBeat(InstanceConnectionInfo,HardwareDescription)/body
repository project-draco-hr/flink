{
  if (this.orphanedTMs.contains(instanceConnectionInfo)) {
    LOG.debug("Received HeartBeat from orphaned TM " + instanceConnectionInfo);
    return;
  }
  if (this.floatingInstances.containsKey(instanceConnectionInfo)) {
    final FloatingInstance floatingInstance=this.floatingInstances.get(instanceConnectionInfo);
    floatingInstance.updateLastReceivedHeartBeat();
    return;
  }
  EC2CloudInstance instance=isAssignedInstance(instanceConnectionInfo);
  if (instance != null) {
    instance.updateLastReceivedHeartBeat();
    return;
  }
  try {
    instance=isReservedInstance(instanceConnectionInfo);
  }
 catch (  InstanceException e) {
    LOG.error(e);
  }
  if (instance != null) {
    JobID jobID=null;
    jobID=this.reservedInstancesToJobMapping.get(instance.getInstanceID());
    if (jobID == null) {
      LOG.error("Cannot find job ID to instance ID " + instance.getInstanceID());
      return;
    }
    this.reservedInstancesToJobMapping.remove(instance.getInstanceID());
    instance.updateLastReceivedHeartBeat();
    final JobToInstancesMapping mapping=this.jobToInstancesAssignmentMap.get(jobID);
    if (mapping == null) {
      LOG.error("Cannot find mapping for job ID " + jobID);
      return;
    }
    mapping.assignInstanceToJob(instance);
    this.instanceListener.resourceAllocated(jobID,instance.asAllocatedResource());
    return;
  }
  LOG.info("Received HeartBeat from unknown TM. Put into orphaned TM set. Address is: " + instanceConnectionInfo);
  this.orphanedTMs.add(instanceConnectionInfo);
}
