{
  final String awsAccessId=conf.getString(AWS_ACCESS_ID_KEY,null);
  final String awsSecretKey=conf.getString(AWS_SECRET_KEY_KEY,null);
  String imageID=conf.getString(AWS_AMI_KEY,null);
  if (imageID == null) {
    imageID=GlobalConfiguration.getString(AWS_AMI_KEY_GLOBAL,null);
    LOG.info("Read Amazon Machine Image from global configuration: " + imageID);
  }
 else {
    LOG.info("Read Amazon Machine Image from job configuration: " + imageID);
  }
  final String jobManagerIPAddress=GlobalConfiguration.getString("jobmanager.rpc.address",null);
  if (jobManagerIPAddress == null) {
    LOG.error("JobManager IP address is not set (jobmanager.rpc.address)");
    return null;
  }
  final String sshKeyPair=conf.getString(AWS_SSH_KEYPAIR,null);
  final AmazonEC2Client ec2client=EC2ClientFactory.getEC2Client(awsAccessId,awsSecretKey);
  final LinkedList<String> instanceIDs=new LinkedList<String>();
  final RunInstancesRequest request=new RunInstancesRequest(imageID,mincount,maxcount);
  request.setInstanceType(type.getIdentifier());
  String av=null;
  if (this.availabilityZone != null) {
    av=this.availabilityZone;
  }
  final String jobAV=conf.getString("job.ec2.availabilityzone",null);
  if (jobAV != null) {
    LOG.info("Found " + jobAV + " as job-specific preference for availability zone");
    av=jobAV;
  }
  if (av != null) {
    request.setPlacement(new Placement(av));
  }
  final BlockDeviceMapping bdm=new BlockDeviceMapping();
  bdm.setVirtualName("ephemeral0");
  bdm.setDeviceName("/dev/sdb1");
  if (sshKeyPair != null) {
    request.setKeyName(sshKeyPair);
  }
  final LinkedList<BlockDeviceMapping> bdmlist=new LinkedList<BlockDeviceMapping>();
  bdmlist.add(bdm);
  request.setBlockDeviceMappings(bdmlist);
  request.setUserData(EC2Utilities.createTaskManagerUserData(jobManagerIPAddress));
  try {
    final RunInstancesResult result=ec2client.runInstances(request);
    for (    Instance i : result.getReservation().getInstances()) {
      instanceIDs.add(i.getInstanceId());
    }
  }
 catch (  AmazonClientException e) {
    LOG.error(StringUtils.stringifyException(e));
  }
  return instanceIDs;
}
