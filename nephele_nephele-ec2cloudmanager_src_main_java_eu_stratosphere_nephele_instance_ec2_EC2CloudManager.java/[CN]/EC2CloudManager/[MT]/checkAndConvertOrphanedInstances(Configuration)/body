{
  if (this.orphanedInstances.size() == 0) {
    return;
  }
  final String awsAccessId=conf.getString(AWS_ACCESS_ID_KEY,null);
  final String awsSecretKey=conf.getString(AWS_SECRET_KEY_KEY,null);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Checking orphaned instances, " + this.orphanedInstances.size() + " orphaned instances listed.");
  }
  final AmazonEC2Client ec2client=EC2ClientFactory.getEC2Client(awsAccessId,awsSecretKey);
  DescribeInstancesResult result=null;
  try {
    final DescribeInstancesRequest request=new DescribeInstancesRequest();
    result=ec2client.describeInstances(request);
  }
 catch (  AmazonClientException e) {
    throw new InstanceException(StringUtils.stringifyException(e));
  }
  for (  final Reservation r : result.getReservations()) {
    for (    final Instance t : r.getInstances()) {
      InstanceType type=null;
      for (int i=0; i < this.availableInstanceTypes.length; i++) {
        if (this.availableInstanceTypes[i].getIdentifier().equals(t.getInstanceType())) {
          type=this.availableInstanceTypes[i];
          break;
        }
      }
      InetAddress inetAddress=null;
      try {
        inetAddress=InetAddress.getByName(t.getPrivateIpAddress());
      }
 catch (      UnknownHostException e) {
        LOG.error("Cannot resolve " + t.getPrivateDnsName() + " into an IP address: "+ StringUtils.stringifyException(e));
        continue;
      }
      final Iterator<Map.Entry<InstanceConnectionInfo,HardwareDescription>> it=this.orphanedInstances.entrySet().iterator();
      while (it.hasNext()) {
        final Map.Entry<InstanceConnectionInfo,HardwareDescription> entry=it.next();
        final InstanceConnectionInfo oi=entry.getKey();
        final HardwareDescription hd=entry.getValue();
        if (oi.getAddress().equals(inetAddress) && type != null) {
          LOG.info("Orphaned instance " + oi + " converted into floating instance.");
          final FloatingInstance floatinginstance=new FloatingInstance(t.getInstanceId(),oi,t.getLaunchTime().getTime(),type,hd,awsAccessId,awsSecretKey);
          this.floatingInstances.put(oi,floatinginstance);
          it.remove();
          break;
        }
      }
    }
  }
}
