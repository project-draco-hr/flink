{
  try {
    final JobID jobID=new JobID();
    final JobVertexID vertexID=new JobVertexID();
    final ExecutionAttemptID execId=new ExecutionAttemptID();
    final String taskName="task name";
    final int indexInSubtaskGroup=0;
    final int currentNumberOfSubtasks=1;
    final Configuration jobConfiguration=new Configuration();
    final Configuration taskConfiguration=new Configuration();
    final Class<? extends AbstractInvokable> invokableClass=RegularPactTask.class;
    final List<PartitionDeploymentDescriptor> producedResults=new ArrayList<PartitionDeploymentDescriptor>(0);
    final List<PartitionConsumerDeploymentDescriptor> inputGates=new ArrayList<PartitionConsumerDeploymentDescriptor>(0);
    final List<BlobKey> requiredJars=new ArrayList<BlobKey>(0);
    final TaskDeploymentDescriptor orig=new TaskDeploymentDescriptor(jobID,vertexID,execId,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,invokableClass.getName(),producedResults,inputGates,requiredJars,47);
    final TaskDeploymentDescriptor copy=CommonTestUtils.createCopySerializable(orig);
    assertFalse(orig.getJobID() == copy.getJobID());
    assertFalse(orig.getVertexID() == copy.getVertexID());
    assertFalse(orig.getTaskName() == copy.getTaskName());
    assertFalse(orig.getJobConfiguration() == copy.getJobConfiguration());
    assertFalse(orig.getTaskConfiguration() == copy.getTaskConfiguration());
    assertEquals(orig.getJobID(),copy.getJobID());
    assertEquals(orig.getVertexID(),copy.getVertexID());
    assertEquals(orig.getTaskName(),copy.getTaskName());
    assertEquals(orig.getIndexInSubtaskGroup(),copy.getIndexInSubtaskGroup());
    assertEquals(orig.getNumberOfSubtasks(),copy.getNumberOfSubtasks());
    assertEquals(orig.getProducedPartitions(),copy.getProducedPartitions());
    assertEquals(orig.getConsumedPartitions(),copy.getConsumedPartitions());
    assertEquals(orig.getRequiredJarFiles(),copy.getRequiredJarFiles());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
