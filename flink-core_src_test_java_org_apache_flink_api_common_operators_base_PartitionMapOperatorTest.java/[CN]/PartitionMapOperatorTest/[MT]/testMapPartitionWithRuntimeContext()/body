{
  try {
    final String taskName="Test Task";
    final AtomicBoolean opened=new AtomicBoolean();
    final AtomicBoolean closed=new AtomicBoolean();
    final MapPartitionFunction<String,Integer> parser=new RichMapPartitionFunction<String,Integer>(){
      @Override public void open(      Configuration parameters) throws Exception {
        opened.set(true);
        RuntimeContext ctx=getRuntimeContext();
        assertEquals(0,ctx.getIndexOfThisSubtask());
        assertEquals(1,ctx.getNumberOfParallelSubtasks());
        assertEquals(taskName,ctx.getTaskName());
      }
      @Override public void mapPartition(      Iterable<String> values,      Collector<Integer> out){
        for (        String s : values) {
          out.collect(Integer.parseInt(s));
        }
      }
      @Override public void close() throws Exception {
        closed.set(true);
      }
    }
;
    MapPartitionOperatorBase<String,Integer,MapPartitionFunction<String,Integer>> op=new MapPartitionOperatorBase<String,Integer,MapPartitionFunction<String,Integer>>(parser,new UnaryOperatorInformation<String,Integer>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO),taskName);
    List<String> input=new ArrayList<String>(asList("1","2","3","4","5","6"));
    final TaskInfo taskInfo=new TaskInfo(taskName,0,1,0);
    ExecutionConfig executionConfig=new ExecutionConfig();
    executionConfig.disableObjectReuse();
    List<Integer> resultMutableSafe=op.executeOnCollections(input,new RuntimeUDFContext(taskInfo,null,executionConfig,new HashMap<String,Future<Path>>(),new HashMap<String,Accumulator<?,?>>(),new DummyMetricGroup()),executionConfig);
    executionConfig.enableObjectReuse();
    List<Integer> resultRegular=op.executeOnCollections(input,new RuntimeUDFContext(taskInfo,null,executionConfig,new HashMap<String,Future<Path>>(),new HashMap<String,Accumulator<?,?>>(),new DummyMetricGroup()),executionConfig);
    assertEquals(asList(1,2,3,4,5,6),resultMutableSafe);
    assertEquals(asList(1,2,3,4,5,6),resultRegular);
    assertTrue(opened.get());
    assertTrue(closed.get());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
