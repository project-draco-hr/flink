{
  try {
    final Partitioner<Integer> part=new TestPartitionerInt();
    final int parallelism=4;
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setDegreeOfParallelism(parallelism);
    DataSet<Tuple2<Integer,Integer>> data=env.fromElements(new Tuple2<Integer,Integer>(0,0)).rebalance();
    data.partitionCustom(part,0).mapPartition(new IdentityPartitionerMapper<Tuple2<Integer,Integer>>()).print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    SingleInputPlanNode mapper=(SingleInputPlanNode)sink.getInput().getSource();
    SingleInputPlanNode partitioner=(SingleInputPlanNode)mapper.getInput().getSource();
    SingleInputPlanNode balancer=(SingleInputPlanNode)partitioner.getInput().getSource();
    assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy());
    assertEquals(parallelism,sink.getParallelism());
    assertEquals(ShipStrategyType.FORWARD,mapper.getInput().getShipStrategy());
    assertEquals(parallelism,mapper.getParallelism());
    assertEquals(ShipStrategyType.PARTITION_CUSTOM,partitioner.getInput().getShipStrategy());
    assertEquals(part,partitioner.getInput().getPartitioner());
    assertEquals(parallelism,partitioner.getParallelism());
    assertEquals(ShipStrategyType.PARTITION_FORCED_REBALANCE,balancer.getInput().getShipStrategy());
    assertEquals(parallelism,balancer.getParallelism());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
