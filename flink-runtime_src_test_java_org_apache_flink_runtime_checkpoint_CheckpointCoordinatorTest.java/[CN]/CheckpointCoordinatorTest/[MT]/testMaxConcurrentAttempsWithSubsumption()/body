{
  try {
    final int maxConcurrentAttempts=2;
    final JobID jid=new JobID();
    final ExecutionAttemptID triggerAttemptID=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID=new ExecutionAttemptID();
    final ExecutionAttemptID commitAttemptID=new ExecutionAttemptID();
    ExecutionVertex triggerVertex=mockExecutionVertex(triggerAttemptID);
    ExecutionVertex ackVertex=mockExecutionVertex(ackAttemptID);
    ExecutionVertex commitVertex=mockExecutionVertex(commitAttemptID);
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,10,200000,0L,maxConcurrentAttempts,42,new ExecutionVertex[]{triggerVertex},new ExecutionVertex[]{ackVertex},new ExecutionVertex[]{commitVertex},cl,new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(2,cl),RecoveryMode.STANDALONE,new DisabledCheckpointStatsTracker());
    coord.startCheckpointScheduler();
    long now=System.currentTimeMillis();
    long timeout=now + 60000;
    long minDuration=now + 100;
    do {
      Thread.sleep(20);
    }
 while ((now=System.currentTimeMillis()) < minDuration || (coord.getNumberOfPendingCheckpoints() < maxConcurrentAttempts && now < timeout));
    assertEquals(maxConcurrentAttempts,coord.getNumberOfPendingCheckpoints());
    assertNotNull(coord.getPendingCheckpoints().get(1L));
    assertNotNull(coord.getPendingCheckpoints().get(2L));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID,2L));
    final long newTimeout=System.currentTimeMillis() + 60000;
    do {
      Thread.sleep(20);
    }
 while (coord.getPendingCheckpoints().get(4L) == null && System.currentTimeMillis() < newTimeout);
    assertEquals(maxConcurrentAttempts,coord.getNumberOfPendingCheckpoints());
    assertNotNull(coord.getPendingCheckpoints().get(3L));
    assertNotNull(coord.getPendingCheckpoints().get(4L));
    coord.shutdown();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
