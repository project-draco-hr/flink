{
  final JobID jid=new JobID();
  final long timestamp=System.currentTimeMillis();
  final ExecutionAttemptID attemptID1=new ExecutionAttemptID();
  final ExecutionAttemptID attemptID2=new ExecutionAttemptID();
  ExecutionVertex vertex1=mockExecutionVertex(attemptID1);
  ExecutionVertex vertex2=mockExecutionVertex(attemptID2);
  StandaloneCheckpointIDCounter counter=new StandaloneCheckpointIDCounter();
  CheckpointCoordinator coord=new CheckpointCoordinator(jid,600000,600000,0,Integer.MAX_VALUE,new ExecutionVertex[]{vertex1,vertex2},new ExecutionVertex[]{vertex1,vertex2},new ExecutionVertex[]{vertex1,vertex2},cl,counter,new StandaloneCompletedCheckpointStore(10,cl),new HeapSavepointStore(),new DisabledCheckpointStatsTracker());
  Future<String> savepointFuture1=coord.triggerSavepoint(timestamp);
  long savepointId1=counter.getLast();
  assertEquals(1,coord.getNumberOfPendingCheckpoints());
  assertTrue(coord.triggerCheckpoint(timestamp + 1));
  assertEquals(2,coord.getNumberOfPendingCheckpoints());
  assertTrue(coord.triggerCheckpoint(timestamp + 2));
  long checkpointId2=counter.getLast();
  assertEquals(3,coord.getNumberOfPendingCheckpoints());
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID1,checkpointId2));
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,checkpointId2));
  assertEquals(1,coord.getNumberOfPendingCheckpoints());
  assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
  assertFalse(coord.getPendingCheckpoints().get(savepointId1).isDiscarded());
  assertFalse(savepointFuture1.isCompleted());
  assertTrue(coord.triggerCheckpoint(timestamp + 3));
  assertEquals(2,coord.getNumberOfPendingCheckpoints());
  Future<String> savepointFuture2=coord.triggerSavepoint(timestamp + 4);
  long savepointId2=counter.getLast();
  assertEquals(3,coord.getNumberOfPendingCheckpoints());
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID1,savepointId2));
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,savepointId2));
  assertEquals(1,coord.getNumberOfPendingCheckpoints());
  assertEquals(2,coord.getNumberOfRetainedSuccessfulCheckpoints());
  assertFalse(coord.getPendingCheckpoints().get(savepointId1).isDiscarded());
  assertFalse(savepointFuture1.isCompleted());
  assertTrue(savepointFuture2.isCompleted());
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID1,savepointId1));
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,savepointId1));
  assertEquals(0,coord.getNumberOfPendingCheckpoints());
  assertEquals(3,coord.getNumberOfRetainedSuccessfulCheckpoints());
  assertTrue(savepointFuture1.isCompleted());
}
