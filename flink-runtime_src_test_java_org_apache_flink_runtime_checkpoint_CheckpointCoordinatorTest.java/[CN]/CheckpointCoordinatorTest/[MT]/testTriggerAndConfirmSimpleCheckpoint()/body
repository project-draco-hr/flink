{
  try {
    final JobID jid=new JobID();
    final long timestamp=System.currentTimeMillis();
    final ExecutionAttemptID attemptID1=new ExecutionAttemptID();
    final ExecutionAttemptID attemptID2=new ExecutionAttemptID();
    ExecutionVertex vertex1=mockExecutionVertex(attemptID1);
    ExecutionVertex vertex2=mockExecutionVertex(attemptID2);
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,1,600000,new ExecutionVertex[]{vertex1,vertex2},new ExecutionVertex[]{vertex1,vertex2},new ExecutionVertex[]{vertex1,vertex2},cl);
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertTrue(coord.triggerCheckpoint(timestamp));
    assertEquals(1,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    long checkpointId=coord.getPendingCheckpoints().entrySet().iterator().next().getKey();
    PendingCheckpoint checkpoint=coord.getPendingCheckpoints().get(checkpointId);
    assertNotNull(checkpoint);
    assertEquals(checkpointId,checkpoint.getCheckpointId());
    assertEquals(timestamp,checkpoint.getCheckpointTimestamp());
    assertEquals(jid,checkpoint.getJobId());
    assertEquals(2,checkpoint.getNumberOfNonAcknowledgedTasks());
    assertEquals(0,checkpoint.getNumberOfAcknowledgedTasks());
    assertEquals(0,checkpoint.getCollectedStates().size());
    assertFalse(checkpoint.isDiscarded());
    assertFalse(checkpoint.isFullyAcknowledged());
{
      TriggerCheckpoint expectedMessage1=new TriggerCheckpoint(jid,attemptID1,checkpointId,timestamp);
      TriggerCheckpoint expectedMessage2=new TriggerCheckpoint(jid,attemptID2,checkpointId,timestamp);
      verify(vertex1,times(1)).sendMessageToCurrentExecution(eq(expectedMessage1),eq(attemptID1));
      verify(vertex2,times(1)).sendMessageToCurrentExecution(eq(expectedMessage2),eq(attemptID2));
    }
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,checkpointId));
    assertEquals(1,checkpoint.getNumberOfAcknowledgedTasks());
    assertEquals(1,checkpoint.getNumberOfNonAcknowledgedTasks());
    assertFalse(checkpoint.isDiscarded());
    assertFalse(checkpoint.isFullyAcknowledged());
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,checkpointId));
    assertFalse(checkpoint.isDiscarded());
    assertFalse(checkpoint.isFullyAcknowledged());
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID1,checkpointId));
    assertTrue(checkpoint.isDiscarded());
    assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
{
      ConfirmCheckpoint confirmMessage1=new ConfirmCheckpoint(jid,attemptID1,checkpointId,timestamp,null);
      ConfirmCheckpoint confirmMessage2=new ConfirmCheckpoint(jid,attemptID2,checkpointId,timestamp,null);
      verify(vertex1,times(1)).sendMessageToCurrentExecution(eq(confirmMessage1),eq(attemptID1));
      verify(vertex2,times(1)).sendMessageToCurrentExecution(eq(confirmMessage2),eq(attemptID2));
    }
    SuccessfulCheckpoint success=coord.getSuccessfulCheckpoints().get(0);
    assertEquals(jid,success.getJobId());
    assertEquals(timestamp,success.getTimestamp());
    assertEquals(checkpoint.getCheckpointId(),success.getCheckpointID());
    assertTrue(success.getStates().isEmpty());
    final long timestampNew=timestamp + 7;
    coord.triggerCheckpoint(timestampNew);
    long checkpointIdNew=coord.getPendingCheckpoints().entrySet().iterator().next().getKey();
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID1,checkpointIdNew));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,checkpointIdNew));
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
    SuccessfulCheckpoint successNew=coord.getSuccessfulCheckpoints().get(0);
    assertEquals(jid,successNew.getJobId());
    assertEquals(timestampNew,successNew.getTimestamp());
    assertEquals(checkpointIdNew,successNew.getCheckpointID());
    assertTrue(successNew.getStates().isEmpty());
{
      TriggerCheckpoint expectedMessage1=new TriggerCheckpoint(jid,attemptID1,checkpointIdNew,timestampNew);
      TriggerCheckpoint expectedMessage2=new TriggerCheckpoint(jid,attemptID2,checkpointIdNew,timestampNew);
      verify(vertex1,times(1)).sendMessageToCurrentExecution(eq(expectedMessage1),eq(attemptID1));
      verify(vertex2,times(1)).sendMessageToCurrentExecution(eq(expectedMessage2),eq(attemptID2));
      ConfirmCheckpoint confirmMessage1=new ConfirmCheckpoint(jid,attemptID1,checkpointIdNew,timestampNew,null);
      ConfirmCheckpoint confirmMessage2=new ConfirmCheckpoint(jid,attemptID2,checkpointIdNew,timestampNew,null);
      verify(vertex1,times(1)).sendMessageToCurrentExecution(eq(confirmMessage1),eq(attemptID1));
      verify(vertex2,times(1)).sendMessageToCurrentExecution(eq(confirmMessage2),eq(attemptID2));
    }
    coord.shutdown();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
