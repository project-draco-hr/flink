{
  KeyGroupsStateHandle expectedHeadOpKeyGroupStateHandle=expectPartitionedKeyGroupState.get(0);
  int expectedTotalKeyGroups=expectedHeadOpKeyGroupStateHandle.getNumberOfKeyGroups();
  int actualTotalKeyGroups=0;
  for (  KeyGroupsStateHandle keyGroupsStateHandle : actualPartitionedKeyGroupState) {
    actualTotalKeyGroups+=keyGroupsStateHandle.getNumberOfKeyGroups();
  }
  assertEquals(expectedTotalKeyGroups,actualTotalKeyGroups);
  try (FSDataInputStream inputStream=expectedHeadOpKeyGroupStateHandle.openInputStream()){
    for (    int groupId : expectedHeadOpKeyGroupStateHandle.keyGroups()) {
      long offset=expectedHeadOpKeyGroupStateHandle.getOffsetForKeyGroup(groupId);
      inputStream.seek(offset);
      int expectedKeyGroupState=InstantiationUtil.deserializeObject(inputStream,Thread.currentThread().getContextClassLoader());
      for (      KeyGroupsStateHandle oneActualKeyGroupStateHandle : actualPartitionedKeyGroupState) {
        if (oneActualKeyGroupStateHandle.containsKeyGroup(groupId)) {
          long actualOffset=oneActualKeyGroupStateHandle.getOffsetForKeyGroup(groupId);
          try (FSDataInputStream actualInputStream=oneActualKeyGroupStateHandle.openInputStream()){
            actualInputStream.seek(actualOffset);
            int actualGroupState=InstantiationUtil.deserializeObject(actualInputStream,Thread.currentThread().getContextClassLoader());
            assertEquals(expectedKeyGroupState,actualGroupState);
          }
         }
      }
    }
  }
 }
