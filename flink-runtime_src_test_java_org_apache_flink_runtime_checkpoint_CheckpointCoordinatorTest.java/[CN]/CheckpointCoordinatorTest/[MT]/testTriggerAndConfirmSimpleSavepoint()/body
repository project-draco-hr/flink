{
  final JobID jid=new JobID();
  final long timestamp=System.currentTimeMillis();
  final ExecutionAttemptID attemptID1=new ExecutionAttemptID();
  final ExecutionAttemptID attemptID2=new ExecutionAttemptID();
  ExecutionVertex vertex1=mockExecutionVertex(attemptID1);
  ExecutionVertex vertex2=mockExecutionVertex(attemptID2);
  CheckpointCoordinator coord=new CheckpointCoordinator(jid,600000,600000,0,Integer.MAX_VALUE,new ExecutionVertex[]{vertex1,vertex2},new ExecutionVertex[]{vertex1,vertex2},new ExecutionVertex[]{vertex1,vertex2},cl,new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(1,cl),new HeapSavepointStore(),new DisabledCheckpointStatsTracker());
  assertEquals(0,coord.getNumberOfPendingCheckpoints());
  assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
  Future<String> savepointFuture=coord.triggerSavepoint(timestamp);
  assertFalse(savepointFuture.isCompleted());
  assertEquals(1,coord.getNumberOfPendingCheckpoints());
  long checkpointId=coord.getPendingCheckpoints().entrySet().iterator().next().getKey();
  PendingCheckpoint pending=coord.getPendingCheckpoints().get(checkpointId);
  assertNotNull(pending);
  assertEquals(checkpointId,pending.getCheckpointId());
  assertEquals(timestamp,pending.getCheckpointTimestamp());
  assertEquals(jid,pending.getJobId());
  assertEquals(2,pending.getNumberOfNonAcknowledgedTasks());
  assertEquals(0,pending.getNumberOfAcknowledgedTasks());
  assertEquals(0,pending.getTaskStates().size());
  assertFalse(pending.isDiscarded());
  assertFalse(pending.isFullyAcknowledged());
  assertFalse(pending.canBeSubsumed());
  assertTrue(pending instanceof PendingSavepoint);
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,checkpointId));
  assertEquals(1,pending.getNumberOfAcknowledgedTasks());
  assertEquals(1,pending.getNumberOfNonAcknowledgedTasks());
  assertFalse(pending.isDiscarded());
  assertFalse(pending.isFullyAcknowledged());
  assertFalse(savepointFuture.isCompleted());
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,checkpointId));
  assertFalse(pending.isDiscarded());
  assertFalse(pending.isFullyAcknowledged());
  assertFalse(savepointFuture.isCompleted());
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID1,checkpointId));
  assertTrue(pending.isDiscarded());
  assertTrue(savepointFuture.isCompleted());
  assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
  assertEquals(0,coord.getNumberOfPendingCheckpoints());
{
    NotifyCheckpointComplete confirmMessage1=new NotifyCheckpointComplete(jid,attemptID1,checkpointId,timestamp);
    NotifyCheckpointComplete confirmMessage2=new NotifyCheckpointComplete(jid,attemptID2,checkpointId,timestamp);
    verify(vertex1,times(1)).sendMessageToCurrentExecution(eq(confirmMessage1),eq(attemptID1));
    verify(vertex2,times(1)).sendMessageToCurrentExecution(eq(confirmMessage2),eq(attemptID2));
  }
  CompletedCheckpoint success=coord.getSuccessfulCheckpoints().get(0);
  assertEquals(jid,success.getJobId());
  assertEquals(timestamp,success.getTimestamp());
  assertEquals(pending.getCheckpointId(),success.getCheckpointID());
  assertTrue(success.getTaskStates().isEmpty());
  final long timestampNew=timestamp + 7;
  savepointFuture=coord.triggerSavepoint(timestampNew);
  assertFalse(savepointFuture.isCompleted());
  long checkpointIdNew=coord.getPendingCheckpoints().entrySet().iterator().next().getKey();
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID1,checkpointIdNew));
  coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,attemptID2,checkpointIdNew));
  assertEquals(0,coord.getNumberOfPendingCheckpoints());
  assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
  CompletedCheckpoint successNew=coord.getSuccessfulCheckpoints().get(0);
  assertEquals(jid,successNew.getJobId());
  assertEquals(timestampNew,successNew.getTimestamp());
  assertEquals(checkpointIdNew,successNew.getCheckpointID());
  assertTrue(successNew.getTaskStates().isEmpty());
  assertTrue(savepointFuture.isCompleted());
{
    TriggerCheckpoint expectedMessage1=new TriggerCheckpoint(jid,attemptID1,checkpointIdNew,timestampNew);
    TriggerCheckpoint expectedMessage2=new TriggerCheckpoint(jid,attemptID2,checkpointIdNew,timestampNew);
    verify(vertex1,times(1)).sendMessageToCurrentExecution(eq(expectedMessage1),eq(attemptID1));
    verify(vertex2,times(1)).sendMessageToCurrentExecution(eq(expectedMessage2),eq(attemptID2));
    NotifyCheckpointComplete confirmMessage1=new NotifyCheckpointComplete(jid,attemptID1,checkpointIdNew,timestampNew);
    NotifyCheckpointComplete confirmMessage2=new NotifyCheckpointComplete(jid,attemptID2,checkpointIdNew,timestampNew);
    verify(vertex1,times(1)).sendMessageToCurrentExecution(eq(confirmMessage1),eq(attemptID1));
    verify(vertex2,times(1)).sendMessageToCurrentExecution(eq(confirmMessage2),eq(attemptID2));
  }
  coord.shutdown();
}
