{
  try {
    final JobID jid=new JobID();
    final long timestamp=System.currentTimeMillis();
    final ExecutionAttemptID triggerAttemptID=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID1=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID2=new ExecutionAttemptID();
    final ExecutionAttemptID commitAttemptID=new ExecutionAttemptID();
    ExecutionVertex triggerVertex=mockExecutionVertex(triggerAttemptID);
    ExecutionVertex ackVertex1=mockExecutionVertex(ackAttemptID1);
    ExecutionVertex ackVertex2=mockExecutionVertex(ackAttemptID2);
    ExecutionVertex commitVertex=mockExecutionVertex(commitAttemptID);
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,200000,200000,0,Integer.MAX_VALUE,42,new ExecutionVertex[]{triggerVertex},new ExecutionVertex[]{ackVertex1,ackVertex2},new ExecutionVertex[]{commitVertex},cl,new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(2,cl),new HeapSavepointStore(),new DisabledCheckpointStatsTracker());
    assertTrue(coord.triggerCheckpoint(timestamp));
    long checkpointId=coord.getPendingCheckpoints().keySet().iterator().next();
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(new JobID(),ackAttemptID1,checkpointId));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID1,1L));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,new ExecutionAttemptID(),checkpointId));
    coord.shutdown();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
