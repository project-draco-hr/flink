{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Integer> source=env.fromElements(1,10);
  DataStream<Integer> rebalanceMap=source.rebalance().map(new NoOpIntMap());
  DataStream<Integer> broadcastMap=rebalanceMap.forward().global().broadcast().map(new NoOpIntMap());
  broadcastMap.addSink(new NoOpSink<Integer>());
  EvenOddOutputSelector selector1=new EvenOddOutputSelector();
  EvenOddOutputSelector selector2=new EvenOddOutputSelector();
  EvenOddOutputSelector selector3=new EvenOddOutputSelector();
  DataStream<Integer> map1Operator=rebalanceMap.map(new NoOpIntMap());
  DataStream<Integer> map1=map1Operator.broadcast().split(selector1).select("even");
  DataStream<Integer> map2Operator=rebalanceMap.map(new NoOpIntMap());
  DataStream<Integer> map2=map2Operator.split(selector2).select("odd").global();
  DataStream<Integer> map3Operator=rebalanceMap.map(new NoOpIntMap());
  DataStream<Integer> map3=map3Operator.global().split(selector3).select("even").shuffle();
  SingleOutputStreamOperator<Integer> unionedMap=map1.union(map2).union(map3).map(new NoOpIntMap());
  unionedMap.addSink(new NoOpSink<Integer>());
  StreamGraph graph=env.getStreamGraph();
  assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner);
  assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner);
  assertEquals(rebalanceMap.getId(),graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId());
  assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner);
  assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"));
  assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1));
  assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner);
  assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"));
  assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2));
  assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner);
  assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"));
  assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3));
}
