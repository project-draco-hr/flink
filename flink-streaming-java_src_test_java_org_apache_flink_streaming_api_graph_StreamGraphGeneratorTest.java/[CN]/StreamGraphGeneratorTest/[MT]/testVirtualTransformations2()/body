{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Integer> source=env.fromElements(1,10);
  DataStream<Integer> rebalanceMap=source.rebalance().map(new NoOpIntMap());
  DataStream<Integer> map1=rebalanceMap.map(new NoOpIntMap());
  DataStream<Integer> map2=rebalanceMap.map(new NoOpIntMap());
  DataStream<Integer> map3=rebalanceMap.map(new NoOpIntMap());
  EvenOddOutputSelector selector=new EvenOddOutputSelector();
  SingleOutputStreamOperator<Integer> unionedMap=map1.union(map2).union(map3).broadcast().split(selector).select("foo").map(new NoOpIntMap());
  unionedMap.addSink(new DiscardingSink<Integer>());
  StreamGraph graph=env.getStreamGraph();
  assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner);
  assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"));
  assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector));
  assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner);
  assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"));
  assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector));
  assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner);
  assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"));
  assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector));
}
