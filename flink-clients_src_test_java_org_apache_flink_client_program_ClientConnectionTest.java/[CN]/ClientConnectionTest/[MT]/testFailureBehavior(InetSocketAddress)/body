{
  final Configuration config=new Configuration();
  config.setString(ConfigConstants.AKKA_ASK_TIMEOUT,(ASK_STARTUP_TIMEOUT / 1000) + " s");
  config.setString(ConfigConstants.AKKA_LOOKUP_TIMEOUT,(CONNECT_TIMEOUT / 1000) + " s");
  config.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,unreachableEndpoint.getHostName());
  config.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,unreachableEndpoint.getPort());
  try {
    JobVertex vertex=new JobVertex("Test Vertex");
    vertex.setInvokableClass(TestInvokable.class);
    final JobGraph jg=new JobGraph("Test Job",vertex);
    final Client client=new Client(config,getClass().getClassLoader(),-1);
    final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
    Thread invoker=new Thread("test invoker"){
      @Override public void run(){
        try {
          client.run(jg,true);
          fail("This should fail with an exception since the JobManager is unreachable.");
        }
 catch (        Throwable t) {
synchronized (error) {
            error.set(t);
            error.notifyAll();
          }
        }
      }
    }
;
    invoker.setDaemon(true);
    invoker.start();
    try {
      long now=System.currentTimeMillis();
      long deadline=now + MAX_DELAY;
synchronized (error) {
        while (invoker.isAlive() && error.get() == null && now < deadline) {
          error.wait(1000);
          now=System.currentTimeMillis();
        }
      }
      Throwable t=error.get();
      if (t == null) {
        fail("Job invocation did not fail in expected time interval.");
      }
 else {
        assertNotNull(t.getMessage());
        assertTrue(t.getMessage(),t.getMessage().contains("JobManager"));
      }
    }
  finally {
      if (invoker.isAlive()) {
        invoker.interrupt();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
