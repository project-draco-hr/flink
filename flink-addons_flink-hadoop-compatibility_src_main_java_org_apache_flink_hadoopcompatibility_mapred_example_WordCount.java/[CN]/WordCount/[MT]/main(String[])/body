{
  if (args.length < 2) {
    System.err.println("Usage: WordCount <input path> <result path>");
    return;
  }
  final String inputPath=args[0];
  final String outputPath=args[1];
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setDegreeOfParallelism(1);
  HadoopInputFormat<LongWritable,Text> hadoopInputFormat=new HadoopInputFormat<LongWritable,Text>(new TextInputFormat(),LongWritable.class,Text.class,new JobConf());
  TextInputFormat.addInputPath(hadoopInputFormat.getJobConf(),new Path(inputPath));
  DataSet<Tuple2<LongWritable,Text>> text=env.createInput(hadoopInputFormat);
  DataSet<Tuple2<String,Integer>> words=text.flatMap(new Tokenizer());
  DataSet<Tuple2<String,Integer>> result=words.groupBy(0).aggregate(Aggregations.SUM,1);
  DataSet<Tuple2<Text,IntWritable>> hadoopResult=result.map(new HadoopDatatypeMapper());
  HadoopOutputFormat<Text,IntWritable> hadoopOutputFormat=new HadoopOutputFormat<Text,IntWritable>(new TextOutputFormat<Text,IntWritable>(),new JobConf());
  hadoopOutputFormat.getJobConf().set("mapred.textoutputformat.separator"," ");
  TextOutputFormat.setOutputPath(hadoopOutputFormat.getJobConf(),new Path(outputPath));
  hadoopResult.output(hadoopOutputFormat);
  env.execute("Word Count");
}
