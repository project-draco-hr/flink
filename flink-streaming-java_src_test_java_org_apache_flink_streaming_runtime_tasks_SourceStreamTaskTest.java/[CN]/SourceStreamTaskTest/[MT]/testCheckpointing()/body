{
  final int NUM_ELEMENTS=100;
  final int NUM_CHECKPOINTS=100;
  final int NUM_CHECKPOINTERS=1;
  final int CHECKPOINT_INTERVAL=5;
  final int SOURCE_CHECKPOINT_DELAY=1000;
  final int SOURCE_READ_DELAY=1;
  ExecutorService executor=Executors.newFixedThreadPool(10);
  try {
    final TupleTypeInfo<Tuple2<Long,Integer>> typeInfo=new TupleTypeInfo<Tuple2<Long,Integer>>(BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO);
    final SourceStreamTask<Tuple2<Long,Integer>,SourceFunction<Tuple2<Long,Integer>>,StreamSource<Tuple2<Long,Integer>,SourceFunction<Tuple2<Long,Integer>>>> sourceTask=new SourceStreamTask<>();
    final StreamTaskTestHarness<Tuple2<Long,Integer>> testHarness=new StreamTaskTestHarness<Tuple2<Long,Integer>>(sourceTask,typeInfo);
    StreamConfig streamConfig=testHarness.getStreamConfig();
    StreamSource<Tuple2<Long,Integer>,?> sourceOperator=new StreamSource<>(new MockSource(NUM_ELEMENTS,SOURCE_CHECKPOINT_DELAY,SOURCE_READ_DELAY));
    streamConfig.setStreamOperator(sourceOperator);
    Future<Boolean>[] checkpointerResults=new Future[NUM_CHECKPOINTERS];
    testHarness.invoke();
    for (int i=0; i < NUM_CHECKPOINTERS; i++) {
      checkpointerResults[i]=executor.submit(new Checkpointer(NUM_CHECKPOINTS,CHECKPOINT_INTERVAL,sourceTask));
    }
    testHarness.waitForTaskCompletion();
    for (int i=0; i < NUM_CHECKPOINTERS; i++) {
      if (!checkpointerResults[i].isDone()) {
        checkpointerResults[i].cancel(true);
      }
      if (!checkpointerResults[i].isCancelled()) {
        checkpointerResults[i].get();
      }
    }
    List<Tuple2<Long,Integer>> resultElements=TestHarnessUtil.getRawElementsFromOutput(testHarness.getOutput());
    Assert.assertEquals(NUM_ELEMENTS,resultElements.size());
  }
  finally {
    executor.shutdown();
  }
}
