def getsource(object, alias='', lstrip=False, enclosing=False, force=False, builtin=False):
    "Return the text of the source code for an object. The source code for\n    interactively-defined objects are extracted from the interpreter's history.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    IOError is raised if the source code cannot be retrieved, while a\n    TypeError is raised for objects where the source code is unavailable\n    (e.g. builtins).\n\n    If alias is provided, then add a line of code that renames the object.\n    If lstrip=True, ensure there is no indentation in the first line of code.\n    If enclosing=True, then also return any enclosing code.\n    If force=True, catch (TypeError,IOError) and try to use import hooks.\n    If builtin=True, force an import for any builtins\n    "
    hascode = _hascode(object)
    instance = _isinstance(object)
    try:
        (lines, lnum) = getsourcelines(object, enclosing=enclosing)
    except (TypeError, IOError):
        if (not force):
            raise
        if (not getmodule(object)):
            if (not instance):
                return getimport(object, alias, builtin=builtin)
            _import = getimport(object, builtin=builtin)
            name = getname(object, force=True)
            _alias = (('%s = ' % alias) if alias else '')
            if (alias == name):
                _alias = ''
            return ((_import + _alias) + ('%s\n' % name))
        else:
            if (not instance):
                return getimport(object, alias, builtin=builtin)
            name = object.__class__.__name__
            module = object.__module__
            if (module in ['builtins', '__builtin__']):
                return getimport(object, alias, builtin=builtin)
            else:
                (lines, lnum) = ([("%s = __import__('%s', fromlist=['%s']).%s\n" % (name, module, name, name))], 0)
                obj = eval(lines[0].lstrip((name + ' = ')))
                (lines, lnum) = getsourcelines(obj, enclosing=enclosing)
    if (lstrip or alias):
        lines = _outdent(lines)
    if instance:
        if ('(' in repr(object)):
            lines.append(('%r\n' % object))
        else:
            lines = dumpsource(object, alias='', new=force, enclose=False)
            (lines, lnum) = ([(line + '\n') for line in lines.split('\n')][:(-1)], 0)
    if alias:
        if hascode:
            skip = 0
            for line in lines:
                if (not line.startswith('@')):
                    break
                skip += 1
            if lines[skip].lstrip().startswith('def '):
                if (alias != object.__name__):
                    lines.append(('\n%s = %s\n' % (alias, object.__name__)))
            elif ('lambda ' in lines[skip]):
                if (alias != lines[skip].split('=')[0].strip()):
                    lines[skip] = ('%s = %s' % (alias, lines[skip]))
            elif (alias != object.__name__):
                lines.append(('\n%s = %s\n' % (alias, object.__name__)))
        elif instance:
            if (alias != lines[(-1)].split('=')[0].strip()):
                lines[(-1)] = (('%s = ' % alias) + lines[(-1)])
        else:
            name = (getname(object, force=True) or object.__name__)
            if (alias != name):
                lines.append(('\n%s = %s\n' % (alias, name)))
    return ''.join(lines)
