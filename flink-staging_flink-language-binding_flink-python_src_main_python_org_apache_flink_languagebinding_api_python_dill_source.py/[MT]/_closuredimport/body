def _closuredimport(func, alias='', builtin=False):
    "get import for closured objects; return a dict of 'name' and 'import'"
    import re
    from dill.detect import freevars, outermost
    free_vars = freevars(func)
    func_vars = {}
    for (name, obj) in list(free_vars.items()):
        if (not isfunction(obj)):
            continue
        fobj = free_vars.pop(name)
        src = getsource(fobj)
        if src.lstrip().startswith('@'):
            src = getimport(fobj, alias=alias, builtin=builtin)
        else:
            encl = outermost(func)
            pat = ((('.*[\\w\\s]=\\s*' + getname(encl)) + '\\(') + getname(fobj))
            mod = getname(getmodule(encl))
            (lines, _) = findsource(encl)
            candidate = [line for line in lines if ((getname(encl) in line) and re.match(pat, line))]
            if (not candidate):
                mod = getname(getmodule(fobj))
                (lines, _) = findsource(fobj)
                candidate = [line for line in lines if ((getname(fobj) in line) and re.match(pat, line))]
            if (not len(candidate)):
                raise TypeError('import could not be found')
            candidate = candidate[(-1)]
            name = candidate.split('=', 1)[0].split()[(-1)].strip()
            src = _getimport(mod, name, alias=alias, builtin=builtin)
        func_vars[name] = src
    if (not func_vars):
        name = outermost(func)
        mod = getname(getmodule(name))
        if ((not mod) or (name is func)):
            name = getname(func, force=True)
            src = getimport(func, alias=alias, builtin=builtin)
        else:
            (lines, _) = findsource(name)
            candidate = [line for line in lines if ((getname(name) in line) and re.match((('.*[\\w\\s]=\\s*' + getname(name)) + '\\('), line))]
            if (not len(candidate)):
                raise TypeError('import could not be found')
            candidate = candidate[(-1)]
            name = candidate.split('=', 1)[0].split()[(-1)].strip()
            src = _getimport(mod, name, alias=alias, builtin=builtin)
        func_vars[name] = src
    return func_vars
