def _namespace(obj):
    "_namespace(obj); return namespace hierarchy (as a list of names)\n    for the given object.  For an instance, find the class hierarchy.\n\n    For example:\n\n    >>> from functools import partial\n    >>> p = partial(int, base=2)\n    >>> _namespace(p)\n    ['functools', 'partial']\n    "
    try:
        module = qual = str(getmodule(obj)).split()[1].strip('"').strip("'")
        qual = qual.split('.')
        if ismodule(obj):
            return qual
        name = (getname(obj) or obj.__name__)
        if (module in ['builtins', '__builtin__']):
            if _intypes(name):
                return (['types'] + [name])
        return (qual + [name])
    except:
        pass
    if (str(obj) in ['inf', 'nan', 'Inf', 'NaN']):
        return (['numpy'] + [str(obj)])
    module = getattr(obj.__class__, '__module__', None)
    qual = str(obj.__class__)
    try:
        qual = qual[(qual.index("'") + 1):(-2)]
    except ValueError:
        pass
    qual = qual.split('.')
    if (module in ['builtins', '__builtin__']):
        if (qual[(-1)] == 'ellipsis'):
            qual[(-1)] = 'EllipsisType'
        if _intypes(qual[(-1)]):
            module = 'types'
        qual = ([module] + qual)
    return qual
