{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(DEFAULT_PARALLELISM);
  DataSet<Tuple4<Long,Long,Long,Long>> set1=env.readCsvFile("/tmp/fake.csv").types(Long.class,Long.class,Long.class,Long.class);
  set1.groupBy(1).sortGroup(3,Order.DESCENDING).reduceGroup(new IdentityGroupReducer<Tuple4<Long,Long,Long,Long>>()).name("Reduce").output(new DiscardingOutputFormat<Tuple4<Long,Long,Long,Long>>()).name("Sink");
  Plan plan=env.createProgramPlan();
  OptimizedPlan oPlan;
  try {
    oPlan=compileNoStats(plan);
  }
 catch (  CompilerException ce) {
    ce.printStackTrace();
    fail("The pact compiler is unable to compile this plan correctly.");
    return;
  }
  OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(oPlan);
  SinkPlanNode sinkNode=resolver.getNode("Sink");
  SingleInputPlanNode reducer=resolver.getNode("Reduce");
  Assert.assertEquals(ShipStrategyType.FORWARD,sinkNode.getInput().getShipStrategy());
  Assert.assertEquals(ShipStrategyType.PARTITION_HASH,reducer.getInput().getShipStrategy());
  Channel c=reducer.getInput();
  Assert.assertEquals(LocalStrategy.SORT,c.getLocalStrategy());
  FieldList ship=new FieldList(1);
  FieldList local=new FieldList(1,3);
  Assert.assertEquals(ship,c.getShipStrategyKeys());
  Assert.assertEquals(local,c.getLocalStrategyKeys());
  Assert.assertTrue(c.getLocalStrategySortOrder()[0] == reducer.getSortOrders(0)[0]);
  Assert.assertEquals(false,c.getLocalStrategySortOrder()[1]);
}
