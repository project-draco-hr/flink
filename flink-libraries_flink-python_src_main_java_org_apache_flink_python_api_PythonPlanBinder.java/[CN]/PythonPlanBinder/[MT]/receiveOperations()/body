{
  Integer operationCount=(Integer)streamer.getRecord(true);
  for (int x=0; x < operationCount; x++) {
    PythonOperationInfo info=new PythonOperationInfo(streamer);
    Operation op;
    try {
      op=Operation.valueOf(info.identifier.toUpperCase());
    }
 catch (    IllegalArgumentException iae) {
      throw new IllegalArgumentException("Invalid operation specified: " + info.identifier);
    }
switch (op) {
case SOURCE_CSV:
      createCsvSource(info);
    break;
case SOURCE_TEXT:
  createTextSource(info);
break;
case SOURCE_VALUE:
createValueSource(info);
break;
case SOURCE_SEQ:
createSequenceSource(info);
break;
case SINK_CSV:
createCsvSink(info);
break;
case SINK_TEXT:
createTextSink(info);
break;
case SINK_PRINT:
createPrintSink(info);
break;
case BROADCAST:
createBroadcastVariable(info);
break;
case AGGREGATE:
createAggregationOperation(info);
break;
case DISTINCT:
createDistinctOperation(info);
break;
case FIRST:
createFirstOperation(info);
break;
case PARTITION_HASH:
createHashPartitionOperation(info);
break;
case REBALANCE:
createRebalanceOperation(info);
break;
case GROUPBY:
createGroupOperation(info);
break;
case SORT:
createSortOperation(info);
break;
case UNION:
createUnionOperation(info);
break;
case COGROUP:
createCoGroupOperation(info);
break;
case CROSS:
createCrossOperation(NONE,info);
break;
case CROSS_H:
createCrossOperation(HUGE,info);
break;
case CROSS_T:
createCrossOperation(TINY,info);
break;
case FILTER:
createFilterOperation(info);
break;
case FLATMAP:
createFlatMapOperation(info);
break;
case GROUPREDUCE:
createGroupReduceOperation(info);
break;
case JOIN:
createJoinOperation(NONE,info);
break;
case JOIN_H:
createJoinOperation(HUGE,info);
break;
case JOIN_T:
createJoinOperation(TINY,info);
break;
case MAP:
createMapOperation(info);
break;
case MAPPARTITION:
createMapPartitionOperation(info);
break;
case REDUCE:
createReduceOperation(info);
break;
}
}
}
