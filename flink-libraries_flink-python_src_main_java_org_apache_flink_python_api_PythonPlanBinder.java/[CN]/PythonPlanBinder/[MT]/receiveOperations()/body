{
  Integer operationCount=(Integer)receiver.getRecord(true);
  for (int x=0; x < operationCount; x++) {
    String identifier=(String)receiver.getRecord();
    Operation op=null;
    try {
      op=Operation.valueOf(identifier.toUpperCase());
    }
 catch (    IllegalArgumentException iae) {
      throw new IllegalArgumentException("Invalid operation specified: " + identifier);
    }
    if (op != null) {
switch (op) {
case SOURCE_CSV:
        createCsvSource(createOperationInfo(op));
      break;
case SOURCE_TEXT:
    createTextSource(createOperationInfo(op));
  break;
case SOURCE_VALUE:
createValueSource(createOperationInfo(op));
break;
case SOURCE_SEQ:
createSequenceSource(createOperationInfo(op));
break;
case SINK_CSV:
createCsvSink(createOperationInfo(op));
break;
case SINK_TEXT:
createTextSink(createOperationInfo(op));
break;
case SINK_PRINT:
createPrintSink(createOperationInfo(op));
break;
case BROADCAST:
createBroadcastVariable(createOperationInfo(op));
break;
case AGGREGATE:
createAggregationOperation(createOperationInfo(op));
break;
case DISTINCT:
createDistinctOperation(createOperationInfo(op));
break;
case FIRST:
createFirstOperation(createOperationInfo(op));
break;
case PARTITION_HASH:
createHashPartitionOperation(createOperationInfo(op));
break;
case PROJECTION:
createProjectOperation(createOperationInfo(op));
break;
case REBALANCE:
createRebalanceOperation(createOperationInfo(op));
break;
case GROUPBY:
createGroupOperation(createOperationInfo(op));
break;
case SORT:
createSortOperation(createOperationInfo(op));
break;
case UNION:
createUnionOperation(createOperationInfo(op));
break;
case COGROUP:
createCoGroupOperation(createOperationInfo(op));
break;
case CROSS:
createCrossOperation(NONE,createOperationInfo(op));
break;
case CROSS_H:
createCrossOperation(HUGE,createOperationInfo(op));
break;
case CROSS_T:
createCrossOperation(TINY,createOperationInfo(op));
break;
case FILTER:
createFilterOperation(createOperationInfo(op));
break;
case FLATMAP:
createFlatMapOperation(createOperationInfo(op));
break;
case GROUPREDUCE:
createGroupReduceOperation(createOperationInfo(op));
break;
case JOIN:
createJoinOperation(NONE,createOperationInfo(op));
break;
case JOIN_H:
createJoinOperation(HUGE,createOperationInfo(op));
break;
case JOIN_T:
createJoinOperation(TINY,createOperationInfo(op));
break;
case MAP:
createMapOperation(createOperationInfo(op));
break;
case MAPPARTITION:
createMapPartitionOperation(createOperationInfo(op));
break;
case REDUCE:
createReduceOperation(createOperationInfo(op));
break;
}
}
}
}
