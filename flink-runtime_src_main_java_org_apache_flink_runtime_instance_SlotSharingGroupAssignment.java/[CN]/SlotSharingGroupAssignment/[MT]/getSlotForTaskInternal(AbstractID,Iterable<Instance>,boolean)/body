{
  if (allSlots.isEmpty()) {
    return null;
  }
  Map<Instance,List<SharedSlot>> slotsForGroup=availableSlotsPerJid.get(groupId);
  if (slotsForGroup == null) {
    slotsForGroup=new LinkedHashMap<Instance,List<SharedSlot>>();
    availableSlotsPerJid.put(groupId,slotsForGroup);
    for (    SharedSlot availableSlot : allSlots) {
      putIntoMultiMap(slotsForGroup,availableSlot.getInstance(),availableSlot);
    }
  }
 else   if (slotsForGroup.isEmpty()) {
    return null;
  }
  boolean didNotGetPreferred=false;
  if (preferredLocations != null) {
    for (    Instance location : preferredLocations) {
      didNotGetPreferred=true;
      SharedSlot slot=removeFromMultiMap(slotsForGroup,location);
      if (slot != null && slot.isAlive()) {
        return new ImmutablePair<SharedSlot,Locality>(slot,Locality.LOCAL);
      }
    }
  }
  if (didNotGetPreferred && localOnly) {
    return null;
  }
  Locality locality=didNotGetPreferred ? Locality.NON_LOCAL : Locality.UNCONSTRAINED;
  SharedSlot slot;
  while ((slot=pollFromMultiMap(slotsForGroup)) != null) {
    if (slot.isAlive()) {
      return new ImmutablePair<SharedSlot,Locality>(slot,locality);
    }
  }
  return null;
}
