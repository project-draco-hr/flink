{
  Map<Object,T> reduced=new HashMap<Object,T>();
  Set<Object> interSection=new HashSet<Object>();
  Set<Object> diffFirst=new HashSet<Object>();
  Set<Object> diffSecond=new HashSet<Object>();
  for (  Object key : first.keySet()) {
    if (second.containsKey(key)) {
      interSection.add(key);
    }
 else {
      diffFirst.add(key);
    }
  }
  for (  Object key : second.keySet()) {
    if (!interSection.contains(key)) {
      diffSecond.add(key);
    }
  }
  for (  Object key : interSection) {
    reduced.put(key,reducer.reduce(serializer.copy(first.get(key)),serializer.copy(second.get(key))));
  }
  for (  Object key : diffFirst) {
    reduced.put(key,first.get(key));
  }
  for (  Object key : diffSecond) {
    reduced.put(key,second.get(key));
  }
  return reduced;
}
