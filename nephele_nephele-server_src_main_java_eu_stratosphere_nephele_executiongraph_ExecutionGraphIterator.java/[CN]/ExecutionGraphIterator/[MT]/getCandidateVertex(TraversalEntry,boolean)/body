{
  if (forward) {
    while (true) {
      if (this.confinedToStage && te.getCurrentChannel() == 0) {
        while (currentGateLeadsToOtherStage(te,this.forward)) {
          te.increaseCurrentGate();
        }
      }
      if (te.getCurrentGate() >= te.getExecutionVertex().getEnvironment().getNumberOfOutputGates()) {
        break;
      }
      if (te.getCurrentChannel() >= te.getExecutionVertex().getEnvironment().getOutputGate(te.getCurrentGate()).getNumberOfOutputChannels()) {
        te.increaseCurrentGate();
        te.resetCurrentChannel();
      }
 else {
        final AbstractOutputChannel<? extends Record> outputChannel=te.getExecutionVertex().getEnvironment().getOutputGate(te.getCurrentGate()).getOutputChannel(te.getCurrentChannel());
        final ExecutionVertex tmp=this.executionGraph.getVertexByChannelID(outputChannel.getConnectedChannelID());
        if (tmp == null) {
          LOG.error("Inconsistency in vertex map found (forward)!");
        }
        te.increaseCurrentChannel();
        if (!this.alreadyVisited.contains(tmp)) {
          return tmp;
        }
      }
    }
  }
 else {
    while (true) {
      if (te.getCurrentGate() >= te.getExecutionVertex().getEnvironment().getNumberOfInputGates()) {
        break;
      }
      if (te.getCurrentChannel() >= te.getExecutionVertex().getEnvironment().getInputGate(te.getCurrentGate()).getNumberOfInputChannels()) {
        te.increaseCurrentGate();
        te.resetCurrentChannel();
      }
 else {
        final AbstractInputChannel<? extends Record> inputChannel=te.getExecutionVertex().getEnvironment().getInputGate(te.getCurrentGate()).getInputChannel(te.getCurrentChannel());
        final ExecutionVertex tmp=this.executionGraph.getVertexByChannelID(inputChannel.getConnectedChannelID());
        if (tmp == null) {
          LOG.error("Inconsistency in vertex map found (backward)!");
        }
        te.increaseCurrentChannel();
        if (!this.alreadyVisited.contains(tmp)) {
          return tmp;
        }
      }
    }
  }
  return null;
}
