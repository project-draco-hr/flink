{
  this.executionGraph=executionGraph;
  this.forward=forward;
  this.startStage=startStage;
  this.confinedToStage=confinedToStage;
  if (startStage >= this.executionGraph.getNumberOfStages()) {
    return;
  }
  if (forward) {
    if (executionGraph.getNumberOfInputVertices(startStage) > 0) {
      final TraversalEntry te=new TraversalEntry(executionGraph.getInputVertex(startStage,0),0,0);
      traversalStack.push(te);
    }
  }
 else {
    if (executionGraph.getNumberOfOutputVertices(startStage) > 0) {
      final TraversalEntry te=new TraversalEntry(executionGraph.getOutputVertex(startStage,0),0,0);
      traversalStack.push(te);
    }
  }
}
