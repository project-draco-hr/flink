{
  final int numInputs=this.driver.getNumberOfInputs();
  final MutableObjectIterator<?>[] inputs=new MutableObjectIterator[numInputs];
  final MutableReader<?>[] inputReaders=new MutableReader[numInputs];
  final TypeSerializer<?>[] inputSerializers=new TypeSerializer[numInputs];
  final TypeComparator<?>[] inputComparators=this.driver.requiresComparatorOnInput() ? new TypeComparator[numInputs] : null;
  final TypeComparator<?>[] secondarySortComparators=this.driver.requiresComparatorOnInput() ? new TypeComparator[numInputs] : null;
  for (int i=0; i < numInputs; i++) {
    final Class<? extends TypeSerializerFactory<?>> serializerFactoryClass=this.config.getSerializerFactoryForInput(i,this.userCodeClassLoader);
    final TypeSerializerFactory<?> serializerFactory;
    if (serializerFactoryClass == null) {
      serializerFactory=PactRecordSerializerFactory.get();
    }
 else {
      serializerFactory=InstantiationUtil.instantiate(serializerFactoryClass,TypeSerializerFactory.class);
    }
    inputSerializers[i]=serializerFactory.getSerializer();
    final int groupSize=this.config.getGroupSize(i + 1);
    if (groupSize < 2) {
      if (serializerFactory.getDataType() == PactRecord.class) {
        final MutableRecordReader<PactRecord> reader=new MutableRecordReader<PactRecord>(this);
        inputReaders[i]=reader;
        inputs[i]=new PactRecordNepheleReaderIterator(reader,readerInterruptionBehavior());
      }
 else {
        final MutableRecordReader<DeserializationDelegate<?>> reader=new MutableRecordReader<DeserializationDelegate<?>>(this);
        inputReaders[i]=reader;
        @SuppressWarnings({"unchecked","rawtypes"}) final MutableObjectIterator<?> iter=new NepheleReaderIterator(reader,inputSerializers[i],readerInterruptionBehavior());
        inputs[i]=iter;
      }
    }
 else {
      if (serializerFactory.getDataType() == PactRecord.class) {
        @SuppressWarnings("unchecked") MutableRecordReader<PactRecord>[] readers=new MutableRecordReader[groupSize];
        for (int j=0; j < groupSize; ++j) {
          readers[j]=new MutableRecordReader<PactRecord>(this);
        }
        final MutableUnionRecordReader<PactRecord> reader=new MutableUnionRecordReader<PactRecord>(readers);
        inputReaders[i]=reader;
        inputs[i]=new PactRecordNepheleReaderIterator(reader,readerInterruptionBehavior());
      }
 else {
        @SuppressWarnings("unchecked") MutableRecordReader<DeserializationDelegate<?>>[] readers=new MutableRecordReader[groupSize];
        for (int j=0; j < groupSize; ++j) {
          readers[j]=new MutableRecordReader<DeserializationDelegate<?>>(this);
        }
        final MutableUnionRecordReader<DeserializationDelegate<?>> reader=new MutableUnionRecordReader<DeserializationDelegate<?>>(readers);
        inputReaders[i]=reader;
        @SuppressWarnings({"unchecked","rawtypes"}) final MutableObjectIterator<?> iter=new NepheleReaderIterator(reader,inputSerializers[i],readerInterruptionBehavior());
        inputs[i]=iter;
      }
    }
    if (this.driver.requiresComparatorOnInput()) {
      final Class<? extends TypeComparatorFactory<?>> comparatorFactoryClass=this.config.getComparatorFactoryForInput(i,this.userCodeClassLoader);
      final TypeComparatorFactory<?> comparatorFactory;
      if (comparatorFactoryClass == null) {
        comparatorFactory=PactRecordComparatorFactory.get();
      }
 else {
        comparatorFactory=InstantiationUtil.instantiate(comparatorFactoryClass,TypeComparatorFactory.class);
      }
      try {
        inputComparators[i]=comparatorFactory.createComparator(getTaskConfiguration(),this.config.getPrefixForInputParameters(i),this.userCodeClassLoader);
        secondarySortComparators[i]=comparatorFactory.createSecondarySortComparator(getTaskConfiguration(),this.config.getPrefixForInputParameters(i),this.userCodeClassLoader);
      }
 catch (      ClassNotFoundException cnfex) {
        throw new Exception("The instantiation of the type comparator from factory '" + comparatorFactory.getClass().getName() + "' failed. A referenced class from the user code could not be loaded.");
      }
    }
  }
  this.inputs=inputs;
  this.inputReaders=inputReaders;
  this.inputSerializers=inputSerializers;
  this.inputComparators=inputComparators;
  this.secondarySortComparators=secondarySortComparators;
}
