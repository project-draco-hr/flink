{
  final Class<? extends TypeSerializerFactory<T>> serializerFactoryClass;
  try {
    serializerFactoryClass=config.getSerializerFactoryForOutput(cl);
  }
 catch (  ClassNotFoundException cnfex) {
    throw new Exception("The class registered as output serializer factory could not be loaded.",cnfex);
  }
  final TypeSerializerFactory<T> serializerFactory;
  if (serializerFactoryClass == null) {
    @SuppressWarnings("unchecked") TypeSerializerFactory<T> pf=(TypeSerializerFactory<T>)PactRecordSerializerFactory.get();
    serializerFactory=pf;
  }
 else {
    serializerFactory=InstantiationUtil.instantiate(serializerFactoryClass,TypeSerializerFactory.class);
  }
  if (serializerFactory.getDataType().equals(PactRecord.class)) {
    Preconditions.checkArgument(numOutputs > 0,"must have at least one output");
    final List<AbstractRecordWriter<PactRecord>> writers=new ArrayList<AbstractRecordWriter<PactRecord>>(numOutputs);
    for (int i=0; i < numOutputs; i++) {
      final ShipStrategyType strategy=config.getOutputShipStrategy(i);
      final Class<? extends TypeComparatorFactory<PactRecord>> comparatorFactoryClass;
      try {
        comparatorFactoryClass=config.getComparatorFactoryForOutput(i,cl);
      }
 catch (      ClassNotFoundException cnfex) {
        throw new Exception("The class registered as comparator factory for output " + i + " could not be loaded.",cnfex);
      }
      final PactRecordOutputEmitter oe;
      if (comparatorFactoryClass == null) {
        oe=new PactRecordOutputEmitter(strategy);
      }
 else {
        try {
          final PactRecordComparator comparator=PactRecordComparatorFactory.get().createComparator(config.getConfigForOutputParameters(i),cl);
          final DataDistribution distribution=config.getOutputDataDistribution(cl);
          oe=new PactRecordOutputEmitter(strategy,comparator,distribution);
        }
 catch (        ClassNotFoundException cnfex) {
          throw new Exception("The comparator for output " + i + " could not be created, because it could not load dependent classes.",cnfex);
        }
      }
      if (strategy == ShipStrategyType.BROADCAST) {
        if (task instanceof AbstractTask) {
          writers.add(new BroadcastRecordWriter<PactRecord>((AbstractTask)task));
        }
 else         if (task instanceof AbstractInputTask<?>) {
          writers.add(new BroadcastRecordWriter<PactRecord>((AbstractInputTask<?>)task));
        }
      }
 else {
        if (task instanceof AbstractTask) {
          writers.add(new RecordWriter<PactRecord>((AbstractTask)task,oe));
        }
 else         if (task instanceof AbstractInputTask<?>) {
          writers.add(new RecordWriter<PactRecord>((AbstractInputTask<?>)task,oe));
        }
      }
    }
    if (eventualOutputs != null) {
      eventualOutputs.addAll(writers);
    }
    @SuppressWarnings("unchecked") final Collector<T> outColl=(Collector<T>)new PactRecordOutputCollector(writers);
    return outColl;
  }
 else {
    final List<AbstractRecordWriter<SerializationDelegate<T>>> writers=new ArrayList<AbstractRecordWriter<SerializationDelegate<T>>>(numOutputs);
    for (int i=0; i < numOutputs; i++) {
      final ShipStrategyType strategy=config.getOutputShipStrategy(i);
      final Class<? extends TypeComparatorFactory<T>> comparatorFactoryClass;
      try {
        comparatorFactoryClass=config.getComparatorFactoryForOutput(i,cl);
      }
 catch (      ClassNotFoundException cnfex) {
        throw new Exception("The class registered as comparator factory for output " + i + " could not be loaded.",cnfex);
      }
      final ChannelSelector<SerializationDelegate<T>> oe;
      if (comparatorFactoryClass == null) {
        oe=new OutputEmitter<T>(strategy);
      }
 else {
        final TypeComparatorFactory<T> compFactory=InstantiationUtil.instantiate(comparatorFactoryClass,TypeComparatorFactory.class);
        try {
          final TypeComparator<T> comparator=compFactory.createComparator(config.getConfigForOutputParameters(i),cl);
          oe=new OutputEmitter<T>(strategy,comparator);
        }
 catch (        ClassNotFoundException cnfex) {
          throw new Exception("The comparator for output " + i + " could not be created, because it could not load dependent classes.",cnfex);
        }
      }
      if (strategy == ShipStrategyType.BROADCAST) {
        if (task instanceof AbstractTask) {
          writers.add(new BroadcastRecordWriter<SerializationDelegate<T>>((AbstractTask)task));
        }
 else         if (task instanceof AbstractInputTask<?>) {
          writers.add(new BroadcastRecordWriter<SerializationDelegate<T>>((AbstractInputTask<?>)task));
        }
      }
 else {
        if (task instanceof AbstractTask) {
          writers.add(new RecordWriter<SerializationDelegate<T>>((AbstractTask)task,oe));
        }
 else         if (task instanceof AbstractInputTask<?>) {
          writers.add(new RecordWriter<SerializationDelegate<T>>((AbstractInputTask<?>)task,oe));
        }
      }
    }
    if (eventualOutputs != null) {
      eventualOutputs.addAll(writers);
    }
    return new OutputCollector<T>(writers,serializerFactory.getSerializer());
  }
}
