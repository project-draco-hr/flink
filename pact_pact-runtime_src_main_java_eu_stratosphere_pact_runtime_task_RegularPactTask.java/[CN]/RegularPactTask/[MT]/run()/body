{
  try {
    final Class<? super S> userCodeFunctionType=this.driver.getStubType();
    if (userCodeFunctionType != null) {
      this.stub=initStub(userCodeFunctionType);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Initializing the user code and the configuration failed" + e.getMessage() == null ? "." : ": " + e.getMessage(),e);
  }
  if (!this.running) {
    return;
  }
  try {
    this.driver.setup(this);
  }
 catch (  Throwable t) {
    throw new Exception("The pact driver setup for '" + this.getEnvironment().getTaskName() + "' , caused an error: "+ t.getMessage(),t);
  }
  boolean stubOpen=false;
  try {
    try {
      this.driver.prepare();
    }
 catch (    Throwable t) {
      throw new Exception("The data preparation for task '" + this.getEnvironment().getTaskName() + "' , caused an error: "+ t.getMessage(),t);
    }
    if (!this.running) {
      return;
    }
    RegularPactTask.openChainedTasks(this.chainedTasks,this);
    if (this.stub != null) {
      try {
        Configuration stubConfig=this.config.getStubParameters();
        stubConfig.setInteger("pact.parallel.task.id",this.getEnvironment().getIndexInSubtaskGroup());
        stubConfig.setInteger("pact.parallel.task.count",this.getEnvironment().getCurrentNumberOfSubtasks());
        if (this.getEnvironment().getTaskName() != null) {
          stubConfig.setString("pact.parallel.task.name",this.getEnvironment().getTaskName());
        }
        this.stub.open(stubConfig);
        stubOpen=true;
      }
 catch (      Throwable t) {
        throw new Exception("The user defined 'open()' method caused an exception: " + t.getMessage(),t);
      }
    }
    this.driver.run();
    if (this.running && this.stub != null) {
      this.stub.close();
      stubOpen=false;
    }
    this.output.close();
    RegularPactTask.closeChainedTasks(this.chainedTasks,this);
  }
 catch (  Exception ex) {
    if (stubOpen) {
      try {
        this.stub.close();
      }
 catch (      Throwable t) {
      }
    }
    RegularPactTask.cancelChainedTasks(this.chainedTasks);
    if (this.running) {
      RegularPactTask.logAndThrowException(ex,this);
    }
  }
 finally {
    this.driver.cleanup();
  }
}
