{
  AbstractJobVertex upStreamComponent=components.get(upStreamComponentName);
  AbstractJobVertex downStreamComponent=components.get(downStreamComponentName);
  Configuration config=new TaskConfig(upStreamComponent.getConfiguration()).getConfiguration();
  try {
    upStreamComponent.connectTo(downStreamComponent,ChannelType.NETWORK);
    if (log.isDebugEnabled()) {
      log.debug("CONNECTED: " + PartitionerClass.getSimpleName() + " - "+ upStreamComponentName+ " -> "+ downStreamComponentName);
    }
  }
 catch (  JobGraphDefinitionException e1) {
    if (log.isErrorEnabled()) {
      log.error("Cannot connect components by field: " + upStreamComponentName + " to "+ downStreamComponentName,e1);
    }
  }
  int outputIndex=upStreamComponent.getNumberOfForwardConnections() - 1;
  if (PartitionerClass.equals(FieldsPartitioner.class)) {
    config.setBoolean("isPartitionedOutput_" + outputIndex,true);
  }
  putOutputNameToConfig(upStreamComponentName,downStreamComponentName,outputIndex,config);
  config.setClass("partitionerClass_" + outputIndex,PartitionerClass);
  config.setInteger("partitionerIntParam_" + outputIndex,partitionerParam);
  config.setInteger("numOfOutputs_" + outputIndex,componentParallelism.get(downStreamComponentName));
  if (batchSizes.get(upStreamComponentName).get(outputIndex) != null) {
    config.setInteger("batchSize_" + outputIndex,batchSizes.get(upStreamComponentName).get(outputIndex));
  }
}
