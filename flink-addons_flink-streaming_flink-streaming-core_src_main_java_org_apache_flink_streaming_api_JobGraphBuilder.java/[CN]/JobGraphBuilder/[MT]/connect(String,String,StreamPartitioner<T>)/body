{
  AbstractJobVertex upStreamComponent=components.get(upStreamComponentName);
  AbstractJobVertex downStreamComponent=components.get(downStreamComponentName);
  StreamConfig config=new StreamConfig(upStreamComponent.getConfiguration());
  if (partitionerObject.getClass().equals(ForwardPartitioner.class)) {
    downStreamComponent.connectNewDataSetAsInput(upStreamComponent,DistributionPattern.POINTWISE);
  }
 else {
    downStreamComponent.connectNewDataSetAsInput(upStreamComponent,DistributionPattern.BIPARTITE);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("CONNECTED: {} - {} -> {}",partitionerObject.getClass().getSimpleName(),upStreamComponentName,downStreamComponentName);
  }
  int outputIndex=upStreamComponent.getNumberOfProducedIntermediateDataSets() - 1;
  config.setOutputName(outputIndex,outEdgeNames.get(upStreamComponentName).get(outputIndex));
  config.setSelectAll(outputIndex,outEdgeSelectAll.get(upStreamComponentName).get(outputIndex));
  config.setPartitioner(outputIndex,partitionerObject);
  config.setNumberOfOutputChannels(outputIndex,componentParallelism.get(downStreamComponentName));
}
