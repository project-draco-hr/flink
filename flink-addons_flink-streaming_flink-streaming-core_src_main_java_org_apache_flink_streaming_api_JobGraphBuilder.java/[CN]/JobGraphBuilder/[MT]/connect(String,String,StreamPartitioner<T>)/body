{
  AbstractJobVertex upStreamVertex=streamVertices.get(upStreamVertexName);
  AbstractJobVertex downStreamVertex=streamVertices.get(downStreamVertexName);
  StreamConfig config=new StreamConfig(upStreamVertex.getConfiguration());
  if (partitionerObject.getStrategy() == PartitioningStrategy.FORWARD) {
    downStreamVertex.connectNewDataSetAsInput(upStreamVertex,DistributionPattern.POINTWISE);
  }
 else {
    downStreamVertex.connectNewDataSetAsInput(upStreamVertex,DistributionPattern.BIPARTITE);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("CONNECTED: {} - {} -> {}",partitionerObject.getClass().getSimpleName(),upStreamVertexName,downStreamVertexName);
  }
  int outputIndex=upStreamVertex.getNumberOfProducedIntermediateDataSets() - 1;
  config.setOutputName(outputIndex,outEdgeNames.get(upStreamVertexName).get(outputIndex));
  config.setSelectAll(outputIndex,outEdgeSelectAll.get(upStreamVertexName).get(outputIndex));
  config.setPartitioner(outputIndex,partitionerObject);
  config.setNumberOfOutputChannels(outputIndex,vertexParallelism.get(downStreamVertexName));
}
