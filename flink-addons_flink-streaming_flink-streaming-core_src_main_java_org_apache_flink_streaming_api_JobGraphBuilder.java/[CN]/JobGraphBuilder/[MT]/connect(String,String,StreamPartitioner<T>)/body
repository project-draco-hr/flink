{
  AbstractJobVertex upStreamComponent=components.get(upStreamComponentName);
  AbstractJobVertex downStreamComponent=components.get(downStreamComponentName);
  Configuration config=upStreamComponent.getConfiguration();
  try {
    if (partitionerObject.getClass().equals(ForwardPartitioner.class)) {
      upStreamComponent.connectTo(downStreamComponent,ChannelType.NETWORK,DistributionPattern.POINTWISE);
    }
 else {
      upStreamComponent.connectTo(downStreamComponent,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("CONNECTED: " + partitionerObject.getClass().getSimpleName() + " - "+ upStreamComponentName+ " -> "+ downStreamComponentName);
    }
  }
 catch (  JobGraphDefinitionException e) {
    throw new RuntimeException("Cannot connect components: " + upStreamComponentName + " to "+ downStreamComponentName,e);
  }
  int outputIndex=upStreamComponent.getNumberOfForwardConnections() - 1;
  putOutputNameToConfig(upStreamComponentName,downStreamComponentName,outputIndex,config);
  config.setBytes("partitionerObject_" + outputIndex,SerializationUtils.serialize(partitionerObject));
  config.setInteger("numOfOutputs_" + outputIndex,componentParallelism.get(downStreamComponentName));
}
