{
  StreamInvokable<?,?> invokableObject=invokableObjects.get(vertexName);
  byte[] outputSelector=outputSelectors.get(vertexName);
  Class<? extends AbstractInvokable> vertexClass=vertexClasses.get(vertexName);
  Map<String,OperatorState<?>> state=operatorStates.get(vertexName);
  config.setVertexName(vertexName);
  config.setBufferTimeout(bufferTimeout.get(vertexName));
  config.setTypeSerializerIn1(typeSerializersIn1.get(vertexName));
  config.setTypeSerializerIn2(typeSerializersIn2.get(vertexName));
  config.setTypeSerializerOut1(typeSerializersOut1.get(vertexName));
  config.setTypeSerializerOut2(typeSerializersOut2.get(vertexName));
  config.setUserInvokable(invokableObject);
  config.setOutputSelector(outputSelector);
  config.setOperatorStates(state);
  config.setNumberOfOutputs(nonChainableOutputs.size());
  config.setOutputs(nonChainableOutputs);
  config.setChainedOutputs(chainableOutputs);
  if (vertexClass.equals(StreamIterationHead.class) || vertexClass.equals(StreamIterationTail.class)) {
    config.setIterationId(iterationIds.get(vertexName));
    config.setIterationWaitTime(iterationWaitTime.get(vertexName));
  }
  vertexConfigs.put(vertexName,config);
}
