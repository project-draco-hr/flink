{
  String upStreamVertexName=edge.f0;
  String downStreamVertexName=edge.f1;
  int outputIndex=outEdgeList.get(upStreamVertexName).indexOf(downStreamVertexName);
  AbstractJobVertex headVertex=streamVertices.get(headOfChain);
  AbstractJobVertex downStreamVertex=streamVertices.get(downStreamVertexName);
  StreamConfig downStreamConfig=new StreamConfig(downStreamVertex.getConfiguration());
  StreamConfig upStreamConfig=new StreamConfig(headVertex.getConfiguration());
  List<Integer> outEdgeIndexList=outEdgeIndex.get(upStreamVertexName);
  int numOfInputs=downStreamConfig.getNumberOfInputs();
  downStreamConfig.setInputIndex(numOfInputs++,outEdgeIndexList.get(outputIndex));
  downStreamConfig.setNumberOfInputs(numOfInputs);
  StreamPartitioner<?> partitionerObject=outPartitioning.get(upStreamVertexName).get(outputIndex);
  upStreamConfig.setPartitioner(downStreamVertexName,partitionerObject);
  if (partitionerObject.getStrategy() == PartitioningStrategy.FORWARD) {
    downStreamVertex.connectNewDataSetAsInput(headVertex,DistributionPattern.POINTWISE);
  }
 else {
    downStreamVertex.connectNewDataSetAsInput(headVertex,DistributionPattern.ALL_TO_ALL);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("CONNECTED: {} - {} -> {}",partitionerObject.getClass().getSimpleName(),headOfChain,downStreamVertexName);
  }
  upStreamConfig.setOutputNames(downStreamVertexName,outEdgeNames.get(upStreamVertexName).get(outputIndex));
  upStreamConfig.setSelectAll(downStreamVertexName,outEdgeSelectAll.get(upStreamVertexName).get(outputIndex));
}
