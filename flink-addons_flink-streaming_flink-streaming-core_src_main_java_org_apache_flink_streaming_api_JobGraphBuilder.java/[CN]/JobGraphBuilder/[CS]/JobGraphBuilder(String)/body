{
  jobGraph=new JobGraph(jobGraphName);
  components=new HashMap<String,AbstractJobVertex>();
  componentParallelism=new HashMap<String,Integer>();
  bufferTimeout=new HashMap<String,Long>();
  outEdgeList=new HashMap<String,List<String>>();
  outEdgeType=new HashMap<String,List<Integer>>();
  outEdgeNames=new HashMap<String,List<List<String>>>();
  outEdgeSelectAll=new HashMap<String,List<Boolean>>();
  mutability=new HashMap<String,Boolean>();
  inEdgeList=new HashMap<String,List<String>>();
  connectionTypes=new HashMap<String,List<StreamPartitioner<?>>>();
  operatorNames=new HashMap<String,String>();
  invokableObjects=new HashMap<String,StreamInvokable<?>>();
  typeWrapperIn1=new HashMap<String,TypeSerializerWrapper<?>>();
  typeWrapperIn2=new HashMap<String,TypeSerializerWrapper<?>>();
  typeWrapperOut1=new HashMap<String,TypeSerializerWrapper<?>>();
  typeWrapperOut2=new HashMap<String,TypeSerializerWrapper<?>>();
  serializedFunctions=new HashMap<String,byte[]>();
  outputSelectors=new HashMap<String,byte[]>();
  componentClasses=new HashMap<String,Class<? extends AbstractInvokable>>();
  iterationIds=new HashMap<String,String>();
  iterationIDtoSourceName=new HashMap<String,String>();
  iterationIDtoSinkName=new HashMap<String,String>();
  iterationTailCount=new HashMap<String,Integer>();
  iterationWaitTime=new HashMap<String,Long>();
  if (LOG.isDebugEnabled()) {
    LOG.debug("JobGraph created");
  }
}
