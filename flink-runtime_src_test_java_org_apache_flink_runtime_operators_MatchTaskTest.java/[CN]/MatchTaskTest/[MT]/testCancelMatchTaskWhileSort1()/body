{
  final int keyCnt=20;
  final int valCnt=20;
  try {
    setOutput(new NirvanaOutputList());
    addDriverComparator(this.comparator1);
    addDriverComparator(this.comparator2);
    getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get());
    getTaskConfig().setDriverStrategy(DriverStrategy.MERGE);
    getTaskConfig().setRelativeMemoryDriver(bnljn_frac);
    setNumFileHandlesForSort(4);
    final JoinDriver<Record,Record,Record> testTask=new JoinDriver<Record,Record,Record>();
    try {
      addInputSorted(new DelayingInfinitiveInputIterator(100),this.comparator1.duplicate());
      addInput(new UniformRecordGenerator(keyCnt,valCnt,true));
    }
 catch (    Exception e) {
      e.printStackTrace();
      Assert.fail("The test caused an exception.");
    }
    final AtomicReference<Throwable> error=new AtomicReference<>();
    Thread taskRunner=new Thread("Task runner for testCancelMatchTaskWhileSort1()"){
      @Override public void run(){
        try {
          testDriver(testTask,MockMatchStub.class);
        }
 catch (        Throwable t) {
          error.set(t);
        }
      }
    }
;
    taskRunner.start();
    Thread.sleep(1000);
    cancel();
    taskRunner.interrupt();
    taskRunner.join(60000);
    assertFalse("Task thread did not finish within 60 seconds",taskRunner.isAlive());
    Throwable taskError=error.get();
    if (taskError != null) {
      taskError.printStackTrace();
      fail("Error in task while canceling: " + taskError.getMessage());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
