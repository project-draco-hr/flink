{
  int keyCnt=20;
  int valCnt=20;
  setOutput(new NirvanaOutputList());
  addDriverComparator(this.comparator1);
  addDriverComparator(this.comparator2);
  getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get());
  getTaskConfig().setDriverStrategy(DriverStrategy.MERGE);
  getTaskConfig().setRelativeMemoryDriver(bnljn_frac);
  setNumFileHandlesForSort(4);
  final JoinDriver<Record,Record,Record> testTask=new JoinDriver<Record,Record,Record>();
  addInput(new UniformRecordGenerator(keyCnt,valCnt,true));
  addInput(new UniformRecordGenerator(keyCnt,valCnt,true));
  final AtomicBoolean success=new AtomicBoolean(false);
  Thread taskRunner=new Thread(){
    @Override public void run(){
      try {
        testDriver(testTask,MockDelayingMatchStub.class);
        success.set(true);
      }
 catch (      Exception ie) {
        ie.printStackTrace();
      }
    }
  }
;
  taskRunner.start();
  TaskCancelThread tct=new TaskCancelThread(1,taskRunner,this);
  tct.start();
  try {
    tct.join();
    taskRunner.join();
  }
 catch (  InterruptedException ie) {
    Assert.fail("Joining threads failed");
  }
  Assert.assertTrue("Test threw an exception even though it was properly canceled.",success.get());
}
