{
  if (this.cachedPlans != null) {
    return this.cachedPlans;
  }
  final List<? extends PlanNode> subPlans=getPredecessorNode().getAlternativePlans(estimator);
  final Set<RequestedGlobalProperties> intGlobal=this.inConn.getInterestingProperties().getGlobalProperties();
  final List<PlanNode> outputPlans=new ArrayList<PlanNode>();
  for (  PlanNode child : subPlans) {
    if (this.inConn.getShipStrategy() == null) {
      final GlobalProperties gp=child.getGlobalProperties();
      for (      RequestedGlobalProperties igps : intGlobal) {
        final Channel c=new Channel(child);
        if (igps.isMetBy(gp)) {
          c.setShipStrategy(ShipStrategyType.FORWARD);
        }
 else {
          igps.parameterizeChannel(c);
        }
        addLocalCandidates(c,outputPlans);
      }
    }
 else {
      final Channel c=new Channel(child);
      if (this.keys != null) {
        c.setShipStrategy(this.inConn.getShipStrategy(),this.keys.toFieldList());
      }
 else {
        c.setShipStrategy(this.inConn.getShipStrategy());
      }
      for (      RequestedGlobalProperties igps : intGlobal) {
        if (igps.isMetBy(c.getGlobalProperties())) {
          addLocalCandidates(c,outputPlans);
          break;
        }
      }
    }
  }
  for (  PlanNode node : outputPlans) {
    estimator.costOperator(node);
  }
  prunePlanAlternatives(outputPlans);
  this.cachedPlans=outputPlans;
  return outputPlans;
}
