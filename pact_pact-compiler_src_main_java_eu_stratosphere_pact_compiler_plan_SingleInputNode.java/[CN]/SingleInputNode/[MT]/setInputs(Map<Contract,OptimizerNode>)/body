{
  List<Contract> children=((SingleInputContract<?>)getPactContract()).getInputs();
  OptimizerNode pred;
  if (children.size() == 1) {
    pred=contractToNode.get(children.get(0));
  }
 else {
    pred=new UnionNode(getPactContract(),children,contractToNode);
    pred.setDegreeOfParallelism(this.getDegreeOfParallelism());
    pred.SetId(this.id);
    pred.setInstancesPerMachine(instancesPerMachine);
    this.id++;
  }
  PactConnection conn=new PactConnection(pred,this);
  this.setInConn(conn);
  pred.addOutConn(conn);
  Configuration conf=getPactContract().getParameters();
  String shipStrategy=conf.getString(PactCompiler.HINT_SHIP_STRATEGY,null);
  if (shipStrategy != null) {
    if (PactCompiler.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      conn.setShipStrategy(new ForwardSS());
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_REPARTITION.equals(shipStrategy)) {
      conn.setShipStrategy(new PartitionHashSS(this.keyList));
    }
 else {
      throw new CompilerException("Invalid hint for the shipping strategy of a single input connection: " + shipStrategy);
    }
  }
}
