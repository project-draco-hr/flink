{
  List<Contract> children=((SingleInputContract<?>)getPactContract()).getInputs();
  OptimizerNode pred;
  if (children.size() == 1) {
    pred=contractToNode.get(children.get(0));
  }
 else {
    pred=new UnionNode(null,children,contractToNode);
    pred.setDegreeOfParallelism(getDegreeOfParallelism());
    pred.SetId(this.id);
    pred.setSubtasksPerInstance(getSubtasksPerInstance());
    this.id++;
  }
  PactConnection conn=new PactConnection(pred,this);
  setIncomingConnection(conn);
  pred.addOutgoingConnection(conn);
  Configuration conf=getPactContract().getParameters();
  String shipStrategy=conf.getString(PactCompiler.HINT_SHIP_STRATEGY,null);
  if (shipStrategy != null) {
    if (shipStrategy.equalsIgnoreCase(PactCompiler.HINT_SHIP_STRATEGY_REPARTITION_HASH)) {
      conn.setShipStrategy(ShipStrategyType.PARTITION_HASH);
    }
 else     if (shipStrategy.equalsIgnoreCase(PactCompiler.HINT_SHIP_STRATEGY_REPARTITION_RANGE)) {
      conn.setShipStrategy(ShipStrategyType.PARTITION_RANGE);
    }
 else     if (shipStrategy.equalsIgnoreCase(PactCompiler.HINT_SHIP_STRATEGY_FORWARD)) {
      conn.setShipStrategy(ShipStrategyType.FORWARD);
    }
 else     if (shipStrategy.equalsIgnoreCase(PactCompiler.HINT_SHIP_STRATEGY_REPARTITION)) {
      conn.setShipStrategy(ShipStrategyType.PARTITION_RANDOM);
    }
 else {
      throw new CompilerException("Unrecognized ship strategy hint: " + shipStrategy);
    }
  }
}
