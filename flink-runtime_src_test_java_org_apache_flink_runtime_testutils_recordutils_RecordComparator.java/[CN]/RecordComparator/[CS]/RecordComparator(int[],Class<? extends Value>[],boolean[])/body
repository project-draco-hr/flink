{
  this.keyFields=keyFields;
  this.keyHolders=new Value[keyTypes.length];
  this.transientKeyHolders=new Value[keyTypes.length];
  for (int i=0; i < keyTypes.length; i++) {
    if (keyTypes[i] == null) {
      throw new NullPointerException("Key type " + i + " is null.");
    }
    this.keyHolders[i]=InstantiationUtil.instantiate(keyTypes[i],Value.class);
    this.transientKeyHolders[i]=InstantiationUtil.instantiate(keyTypes[i],Value.class);
  }
  this.normalizedKeyLengths=new int[keyFields.length];
  int nKeys=0;
  int nKeyLen=0;
  boolean inverted=false;
  for (int i=0; i < this.keyHolders.length; i++) {
    Value k=this.keyHolders[i];
    if (k instanceof NormalizableKey) {
      if (sortDirection != null) {
        if (sortDirection[i] && inverted) {
          break;
        }
 else         if (i == 0 && !sortDirection[0]) {
          inverted=true;
        }
      }
      nKeys++;
      final int len=((NormalizableKey)k).getMaxNormalizedKeyLen();
      if (len < 0) {
        throw new RuntimeException("Data type " + k.getClass().getName() + " specifies an invalid length for the normalized key: "+ len);
      }
      this.normalizedKeyLengths[i]=len;
      nKeyLen+=this.normalizedKeyLengths[i];
      if (nKeyLen < 0) {
        nKeyLen=Integer.MAX_VALUE;
        break;
      }
    }
 else {
      break;
    }
  }
  this.numLeadingNormalizableKeys=nKeys;
  this.normalizableKeyPrefixLen=nKeyLen;
  this.temp1=new Record();
  this.temp2=new Record();
  if (sortDirection != null) {
    this.ascending=sortDirection;
  }
 else {
    this.ascending=new boolean[keyFields.length];
    for (int i=0; i < this.ascending.length; i++) {
      this.ascending[i]=true;
    }
  }
}
