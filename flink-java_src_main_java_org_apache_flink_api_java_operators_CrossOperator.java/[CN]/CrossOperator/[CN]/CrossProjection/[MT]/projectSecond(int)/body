{
  boolean isSecondTuple;
  if (ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {
    isSecondTuple=true;
  }
 else {
    isSecondTuple=false;
  }
  if (!isSecondTuple && secondFieldIndexes.length != 0) {
    throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.");
  }
 else   if (secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {
    throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.");
  }
  int offset=this.fieldIndexes.length;
  if (isSecondTuple) {
    this.fieldIndexes=Arrays.copyOf(this.fieldIndexes,this.fieldIndexes.length + secondFieldIndexes.length);
    this.isFieldInFirst=Arrays.copyOf(this.isFieldInFirst,this.isFieldInFirst.length + secondFieldIndexes.length);
    int maxFieldIndex=numFieldsDs2;
    for (int i=0; i < secondFieldIndexes.length; i++) {
      Preconditions.checkElementIndex(secondFieldIndexes[i],maxFieldIndex);
      this.isFieldInFirst[offset + i]=false;
      this.fieldIndexes[offset + i]=secondFieldIndexes[i];
    }
  }
 else {
    this.fieldIndexes=Arrays.copyOf(this.fieldIndexes,this.fieldIndexes.length + 1);
    this.isFieldInFirst=Arrays.copyOf(this.isFieldInFirst,this.isFieldInFirst.length + 1);
    this.isFieldInFirst[offset]=false;
    this.fieldIndexes[offset]=-1;
  }
  return this;
}
