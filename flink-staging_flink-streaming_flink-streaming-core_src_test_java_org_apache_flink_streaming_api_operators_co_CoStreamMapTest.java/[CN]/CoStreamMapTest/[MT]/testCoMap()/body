{
  CoStreamMap<Double,Integer,String> operator=new CoStreamMap<Double,Integer,String>(new MyCoMap());
  TwoInputStreamOperatorTestHarness<Double,Integer,String> testHarness=new TwoInputStreamOperatorTestHarness<Double,Integer,String>(operator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  testHarness.open();
  testHarness.processElement1(new StreamRecord<Double>(1.1d,initialTime + 1));
  testHarness.processElement1(new StreamRecord<Double>(1.2d,initialTime + 2));
  testHarness.processElement1(new StreamRecord<Double>(1.3d,initialTime + 3));
  testHarness.processWatermark1(new Watermark(initialTime + 3));
  testHarness.processElement1(new StreamRecord<Double>(1.4d,initialTime + 4));
  testHarness.processElement1(new StreamRecord<Double>(1.5d,initialTime + 5));
  testHarness.processElement2(new StreamRecord<Integer>(1,initialTime + 1));
  testHarness.processElement2(new StreamRecord<Integer>(2,initialTime + 2));
  testHarness.processWatermark2(new Watermark(initialTime + 2));
  testHarness.processElement2(new StreamRecord<Integer>(3,initialTime + 3));
  testHarness.processElement2(new StreamRecord<Integer>(4,initialTime + 4));
  testHarness.processElement2(new StreamRecord<Integer>(5,initialTime + 5));
  expectedOutput.add(new StreamRecord<String>("1.1",initialTime + 1));
  expectedOutput.add(new StreamRecord<String>("1.2",initialTime + 2));
  expectedOutput.add(new StreamRecord<String>("1.3",initialTime + 3));
  expectedOutput.add(new StreamRecord<String>("1.4",initialTime + 4));
  expectedOutput.add(new StreamRecord<String>("1.5",initialTime + 5));
  expectedOutput.add(new StreamRecord<String>("1",initialTime + 1));
  expectedOutput.add(new StreamRecord<String>("2",initialTime + 2));
  expectedOutput.add(new Watermark(initialTime + 2));
  expectedOutput.add(new StreamRecord<String>("3",initialTime + 3));
  expectedOutput.add(new StreamRecord<String>("4",initialTime + 4));
  expectedOutput.add(new StreamRecord<String>("5",initialTime + 5));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
}
