{
synchronized (this.userThreads) {
    final CPUUtilizationSnapshot newMainThreadSnapshot=createCPUUtilizationSnapshot(tmx,this.mainThread,timestamp);
    if (newMainThreadSnapshot == null) {
      return null;
    }
    final long mainInterval=newMainThreadSnapshot.getTimestamp() - this.mainThreadSnapshot.getTimestamp();
    if (mainInterval == 0) {
      return null;
    }
    long cputime=newMainThreadSnapshot.getTotalCPUTime() - this.mainThreadSnapshot.getTotalCPUTime();
    long usrtime=newMainThreadSnapshot.getTotalCPUUserTime() - this.mainThreadSnapshot.getTotalCPUUserTime();
    long systime=cputime - usrtime;
    long waitime=newMainThreadSnapshot.getTotalCPUWaitTime() - this.mainThreadSnapshot.getTotalCPUWaitTime();
    long blktime=newMainThreadSnapshot.getTotalCPUBlockTime() - this.mainThreadSnapshot.getTotalCPUBlockTime();
    int sumUsrTime=(int)((usrtime * PERCENT) / mainInterval);
    int sumSysTime=(int)((systime * PERCENT) / mainInterval);
    int sumBlkTime=(int)((blktime * PERCENT) / mainInterval);
    int sumWaiTime=(int)((waitime * PERCENT) / mainInterval);
    this.mainThreadSnapshot=newMainThreadSnapshot;
    if (!this.userThreads.isEmpty()) {
      final Iterator<Thread> it=this.userThreads.keySet().iterator();
      int divisor=this.userThreads.size();
      while (it.hasNext()) {
        final Thread userThread=it.next();
        final CPUUtilizationSnapshot newUtilizationSnaphot=createCPUUtilizationSnapshot(tmx,userThread,timestamp);
        final CPUUtilizationSnapshot oldUtilizationSnapshot=this.userThreads.get(userThread);
        long interval=newUtilizationSnaphot.getTimestamp() - oldUtilizationSnapshot.getTimestamp();
        if (interval == 0) {
          --divisor;
          continue;
        }
        cputime=newUtilizationSnaphot.getTotalCPUTime() - oldUtilizationSnapshot.getTotalCPUTime();
        usrtime=newUtilizationSnaphot.getTotalCPUUserTime() - oldUtilizationSnapshot.getTotalCPUUserTime();
        systime=cputime - usrtime;
        waitime=newUtilizationSnaphot.getTotalCPUWaitTime() - oldUtilizationSnapshot.getTotalCPUWaitTime();
        blktime=newUtilizationSnaphot.getTotalCPUBlockTime() - oldUtilizationSnapshot.getTotalCPUBlockTime();
        sumUsrTime+=(int)((usrtime * PERCENT) / interval);
        sumSysTime+=(int)((systime * PERCENT) / interval);
        sumBlkTime+=(int)((blktime * PERCENT) / interval);
        sumWaiTime+=(int)((waitime * PERCENT) / interval);
        this.userThreads.put(userThread,newUtilizationSnaphot);
      }
      sumUsrTime/=(divisor + 1);
      sumSysTime/=(divisor + 1);
      sumBlkTime/=(divisor + 1);
      sumWaiTime/=(divisor + 1);
    }
    return new InternalExecutionVertexThreadProfilingData(jobID,this.executionId,(int)mainInterval,sumUsrTime,sumSysTime,sumBlkTime,sumWaiTime);
  }
}
