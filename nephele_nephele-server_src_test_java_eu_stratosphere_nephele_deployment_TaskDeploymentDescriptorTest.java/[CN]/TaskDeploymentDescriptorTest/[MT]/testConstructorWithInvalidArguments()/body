{
  final JobID jobID=JobID.generate();
  final ExecutionVertexID vertexID=ExecutionVertexID.generate();
  final String taskName="task name";
  final int indexInSubtaskGroup=0;
  final int currentNumberOfSubtasks=1;
  final Configuration jobConfiguration=new Configuration();
  final Configuration taskConfiguration=new Configuration();
  final CheckpointState initialCheckpointState=CheckpointState.UNDECIDED;
  final Class<? extends AbstractInvokable> invokableClass=FileLineReader.class;
  final ArrayList<GateDeploymentDescriptor> outputGates=new ArrayList<GateDeploymentDescriptor>(0);
  final ArrayList<GateDeploymentDescriptor> inputGates=new ArrayList<GateDeploymentDescriptor>(0);
  boolean firstExceptionCaught=false;
  boolean secondExceptionCaught=false;
  boolean thirdExceptionCaught=false;
  boolean forthExceptionCaught=false;
  boolean fifthExceptionCaught=false;
  boolean sixthExceptionCaught=false;
  boolean seventhExceptionCaught=false;
  boolean eighthExceptionCaught=false;
  boolean ninethExeceptionCaught=false;
  boolean tenthExceptionCaught=false;
  boolean eleventhExceptionCaught=false;
  try {
    new TaskDeploymentDescriptor(null,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    firstExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,null,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    secondExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,null,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    thirdExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,taskName,-1,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    forthExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,-1,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    fifthExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,null,taskConfiguration,initialCheckpointState,invokableClass,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    sixthExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,null,initialCheckpointState,invokableClass,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    seventhExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,null,invokableClass,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    eighthExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,null,outputGates,inputGates);
  }
 catch (  IllegalArgumentException e) {
    ninethExeceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,null,inputGates);
  }
 catch (  IllegalArgumentException e) {
    tenthExceptionCaught=true;
  }
  try {
    new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,outputGates,null);
  }
 catch (  IllegalArgumentException e) {
    eleventhExceptionCaught=true;
  }
  if (!firstExceptionCaught) {
    fail("First argument was illegal but not detected");
  }
  if (!secondExceptionCaught) {
    fail("Second argument was illegal but not detected");
  }
  if (!thirdExceptionCaught) {
    fail("Third argument was illegal but not detected");
  }
  if (!forthExceptionCaught) {
    fail("Forth argument was illegal but not detected");
  }
  if (!fifthExceptionCaught) {
    fail("Fifth argument was illegal but not detected");
  }
  if (!sixthExceptionCaught) {
    fail("Sixth argument was illegal but not detected");
  }
  if (!seventhExceptionCaught) {
    fail("Seventh argument was illegal but not detected");
  }
  if (!eighthExceptionCaught) {
    fail("Eighth argument was illegal but not detected");
  }
  if (!ninethExeceptionCaught) {
    fail("Nineth argument was illegal but not detected");
  }
  if (!tenthExceptionCaught) {
    fail("Tenth argument was illegal but not detected");
  }
  if (!eleventhExceptionCaught) {
    fail("Eleventh argument was illegal but not detected");
  }
}
