{
  final JobID jobID=JobID.generate();
  final ExecutionVertexID vertexID=new ExecutionVertexID();
  final String taskName="task name";
  final int indexInSubtaskGroup=0;
  final int currentNumberOfSubtasks=1;
  final Configuration jobConfiguration=new Configuration();
  final Configuration taskConfiguration=new Configuration();
  final CheckpointState initialCheckpointState=CheckpointState.UNDECIDED;
  final Class<? extends AbstractInvokable> invokableClass=FileLineReader.class;
  final ArrayList<GateDeploymentDescriptor> outputGates=new ArrayList<GateDeploymentDescriptor>(0);
  final ArrayList<GateDeploymentDescriptor> inputGates=new ArrayList<GateDeploymentDescriptor>(0);
  final TaskDeploymentDescriptor tdd=new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,outputGates,inputGates);
  assertEquals(jobID,tdd.getJobID());
  assertEquals(vertexID,tdd.getVertexID());
  assertEquals(taskName,tdd.getTaskName());
  assertEquals(indexInSubtaskGroup,tdd.getIndexInSubtaskGroup());
  assertEquals(currentNumberOfSubtasks,tdd.getCurrentNumberOfSubtasks());
  assertEquals(jobConfiguration,tdd.getJobConfiguration());
  assertEquals(taskConfiguration,tdd.getTaskConfiguration());
  assertEquals(initialCheckpointState,tdd.getInitialCheckpointState());
  assertEquals(invokableClass,tdd.getInvokableClass());
  assertEquals(outputGates.size(),tdd.getNumberOfOutputGateDescriptors());
  assertEquals(inputGates.size(),tdd.getNumberOfInputGateDescriptors());
}
