{
  final JobID jobID=JobID.generate();
  final ExecutionVertexID vertexID=new ExecutionVertexID();
  final String taskName="task name";
  final int indexInSubtaskGroup=0;
  final int currentNumberOfSubtasks=1;
  final Configuration jobConfiguration=new Configuration();
  final Configuration taskConfiguration=new Configuration();
  final CheckpointState initialCheckpointState=CheckpointState.UNDECIDED;
  final Class<? extends AbstractInvokable> invokableClass=FileLineReader.class;
  final ArrayList<GateDeploymentDescriptor> outputGates=new ArrayList<GateDeploymentDescriptor>(0);
  final ArrayList<GateDeploymentDescriptor> inputGates=new ArrayList<GateDeploymentDescriptor>(0);
  final TaskDeploymentDescriptor orig=new TaskDeploymentDescriptor(jobID,vertexID,taskName,indexInSubtaskGroup,currentNumberOfSubtasks,jobConfiguration,taskConfiguration,initialCheckpointState,invokableClass,outputGates,inputGates);
  try {
    LibraryCacheManager.register(jobID,new String[]{});
  }
 catch (  IOException ioe) {
    fail(StringUtils.stringifyException(ioe));
  }
  final TaskDeploymentDescriptor copy=ServerTestUtils.createCopy(orig);
  assertFalse(orig.getJobID() == copy.getJobID());
  assertFalse(orig.getVertexID() == copy.getVertexID());
  assertFalse(orig.getTaskName() == copy.getTaskName());
  assertFalse(orig.getJobConfiguration() == copy.getJobConfiguration());
  assertFalse(orig.getTaskConfiguration() == copy.getTaskConfiguration());
  assertEquals(orig.getJobID(),copy.getJobID());
  assertEquals(orig.getVertexID(),copy.getVertexID());
  assertEquals(orig.getTaskName(),copy.getTaskName());
  assertEquals(orig.getIndexInSubtaskGroup(),copy.getIndexInSubtaskGroup());
  assertEquals(orig.getCurrentNumberOfSubtasks(),copy.getCurrentNumberOfSubtasks());
  assertEquals(orig.getInitialCheckpointState(),copy.getInitialCheckpointState());
  assertEquals(orig.getNumberOfOutputGateDescriptors(),copy.getNumberOfOutputGateDescriptors());
  assertEquals(orig.getNumberOfInputGateDescriptors(),copy.getNumberOfInputGateDescriptors());
  try {
    LibraryCacheManager.register(jobID,new String[]{});
  }
 catch (  IOException ioe) {
    fail(StringUtils.stringifyException(ioe));
  }
}
