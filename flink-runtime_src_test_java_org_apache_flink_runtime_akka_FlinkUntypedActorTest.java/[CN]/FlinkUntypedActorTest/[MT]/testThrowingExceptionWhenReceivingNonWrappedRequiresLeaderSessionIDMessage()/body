{
  final Option<UUID> leaderSessionID=Option.apply(UUID.randomUUID());
  TestActorRef<PlainFlinkUntypedActor> actor=null;
  try {
    final Props props=Props.create(PlainFlinkUntypedActor.class,leaderSessionID);
    actor=TestActorRef.create(actorSystem,props);
    actor.receive(new JobManagerMessages.LeaderSessionMessage(leaderSessionID,1));
    try {
      actor.receive(new PlainRequiresLeaderSessionID());
      fail("Expected an exception to be thrown, because a RequiresLeaderSessionID" + "message was sent without being wrapped in LeaderSessionMessage.");
    }
 catch (    Exception e) {
      assertEquals("Received a message PlainRequiresLeaderSessionID " + "without a leader session ID, even though it requires to have one.",e.getMessage());
    }
  }
  finally {
    stopActor(actor);
  }
}
