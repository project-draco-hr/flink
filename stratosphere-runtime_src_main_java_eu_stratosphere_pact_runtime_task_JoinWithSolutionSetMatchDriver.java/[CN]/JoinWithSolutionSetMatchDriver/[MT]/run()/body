{
  final GenericJoiner<IT1,IT2,OT> matchStub=taskContext.getStub();
  final Collector<OT> collector=taskContext.getOutputCollector();
  if (getSolutionSetInputIndex() == 0) {
    IT1 buildSideRecord=rec1;
    IT2 probeSideRecord=rec2;
    @SuppressWarnings("unchecked") final CompactingHashTable<IT1> join=(CompactingHashTable<IT1>)hashTable;
    final MutableObjectIterator<IT2> probeSideInput=taskContext.<IT2>getInput(0);
    final CompactingHashTable<IT1>.HashTableProber<IT2> prober=join.getProber();
    while (this.running && ((probeSideRecord=probeSideInput.next(probeSideRecord)) != null)) {
      if (prober.getMatchFor(probeSideRecord,buildSideRecord)) {
        matchStub.join(buildSideRecord,probeSideRecord,collector);
      }
 else {
        throwNoMatchFoundException(join,probeSideRecord);
      }
    }
  }
 else   if (getSolutionSetInputIndex() == 1) {
    IT2 buildSideRecord=rec2;
    IT1 probeSideRecord=rec1;
    @SuppressWarnings("unchecked") final CompactingHashTable<IT2> join=(CompactingHashTable<IT2>)hashTable;
    final MutableObjectIterator<IT1> probeSideInput=taskContext.<IT1>getInput(0);
    final CompactingHashTable<IT2>.HashTableProber<IT1> prober=join.getProber();
    while (this.running && ((probeSideRecord=probeSideInput.next(probeSideRecord)) != null)) {
      if (prober.getMatchFor(probeSideRecord,buildSideRecord)) {
        matchStub.join(probeSideRecord,buildSideRecord,collector);
      }
 else {
        throwNoMatchFoundException(join,probeSideRecord);
      }
    }
  }
 else {
    throw new Exception();
  }
}
