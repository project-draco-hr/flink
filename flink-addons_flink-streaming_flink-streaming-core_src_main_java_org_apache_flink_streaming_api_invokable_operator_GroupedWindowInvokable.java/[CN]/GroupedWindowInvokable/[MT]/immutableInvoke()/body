{
  if ((reuse=recordIterator.next(reuse)) == null) {
    throw new RuntimeException("DataStream must not be empty");
  }
  while (reuse != null) {
    WindowInvokable<IN,OUT> groupInvokable=windowingGroups.get(keySelector.getKey(reuse.getObject()));
    if (groupInvokable == null) {
      groupInvokable=makeNewGroup(reuse);
    }
    for (    ActiveTriggerPolicy<IN> trigger : activeCentralTriggerPolicies) {
      Object[] result=trigger.preNotifyTrigger(reuse.getObject());
      for (      Object in : result) {
        if (!activeCentralEvictionPolicies.isEmpty()) {
          evictElements(centralActiveEviction(in));
        }
        for (        WindowInvokable<IN,OUT> group : windowingGroups.values()) {
          group.processFakeElement(in,trigger);
          checkForEmptyGroupBuffer(group);
        }
      }
    }
    for (    TriggerPolicy<IN> triggerPolicy : centralTriggerPolicies) {
      if (triggerPolicy.notifyTrigger(reuse.getObject())) {
        currentTriggerPolicies.add(triggerPolicy);
      }
    }
    if (currentTriggerPolicies.isEmpty()) {
      groupInvokable.processRealElement(reuse.getObject());
      checkForEmptyGroupBuffer(groupInvokable);
      if (!centralEvictionPolicies.isEmpty()) {
        evictElements(centralEviction(reuse.getObject(),false));
        deleteOrderForCentralEviction.add(groupInvokable);
      }
    }
 else {
      for (      WindowInvokable<IN,OUT> group : windowingGroups.values()) {
        if (group == groupInvokable) {
          group.processRealElement(reuse.getObject(),currentTriggerPolicies);
        }
 else {
          group.externalTriggerFakeElement(reuse.getObject(),currentTriggerPolicies);
        }
      }
      if (!centralEvictionPolicies.isEmpty()) {
        evictElements(centralEviction(reuse.getObject(),true));
        deleteOrderForCentralEviction.add(groupInvokable);
      }
    }
    currentTriggerPolicies.clear();
    resetReuse();
    reuse=recordIterator.next(reuse);
  }
  for (  Thread t : activePolicyThreads) {
    t.interrupt();
  }
  for (  WindowInvokable<IN,OUT> group : windowingGroups.values()) {
    group.emitFinalWindow(centralTriggerPolicies);
  }
}
