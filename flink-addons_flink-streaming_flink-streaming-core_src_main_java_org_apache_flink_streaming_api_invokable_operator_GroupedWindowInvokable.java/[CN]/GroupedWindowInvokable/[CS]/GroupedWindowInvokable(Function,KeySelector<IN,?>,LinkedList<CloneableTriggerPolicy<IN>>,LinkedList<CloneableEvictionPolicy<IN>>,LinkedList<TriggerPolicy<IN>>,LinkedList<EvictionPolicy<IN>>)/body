{
  super(userFunction);
  setChainingStrategy(ChainingStrategy.NEVER);
  this.keySelector=keySelector;
  if (centralTriggerPolicies != null) {
    this.centralTriggerPolicies=centralTriggerPolicies;
    this.activeCentralTriggerPolicies=new LinkedList<ActiveTriggerPolicy<IN>>();
    for (    TriggerPolicy<IN> trigger : centralTriggerPolicies) {
      if (trigger instanceof ActiveTriggerPolicy) {
        this.activeCentralTriggerPolicies.add((ActiveTriggerPolicy<IN>)trigger);
      }
    }
  }
 else {
    this.centralTriggerPolicies=new LinkedList<TriggerPolicy<IN>>();
  }
  if (distributedTriggerPolicies != null) {
    this.distributedTriggerPolicies=distributedTriggerPolicies;
  }
 else {
    this.distributedTriggerPolicies=new LinkedList<CloneableTriggerPolicy<IN>>();
  }
  if (distributedEvictionPolicies != null) {
    this.distributedEvictionPolicies=distributedEvictionPolicies;
  }
 else {
    this.distributedEvictionPolicies=new LinkedList<CloneableEvictionPolicy<IN>>();
  }
  this.activeCentralEvictionPolicies=new LinkedList<ActiveEvictionPolicy<IN>>();
  if (centralEvictionPolicies != null) {
    this.centralEvictionPolicies=centralEvictionPolicies;
    for (    EvictionPolicy<IN> eviction : centralEvictionPolicies) {
      if (eviction instanceof ActiveEvictionPolicy) {
        this.activeCentralEvictionPolicies.add((ActiveEvictionPolicy<IN>)eviction);
      }
    }
  }
 else {
    this.centralEvictionPolicies=new LinkedList<EvictionPolicy<IN>>();
  }
  this.windowingGroups=new HashMap<Object,WindowInvokable<IN,OUT>>();
  this.activePolicyThreads=new LinkedList<Thread>();
  this.currentTriggerPolicies=new LinkedList<TriggerPolicy<IN>>();
  this.deleteOrderForCentralEviction=new LinkedList<WindowInvokable<IN,OUT>>();
  if (!this.centralEvictionPolicies.isEmpty() && !this.distributedEvictionPolicies.isEmpty()) {
    throw new UnsupportedOperationException("You can only use either central or distributed eviction policies but not both at the same time.");
  }
  if (this.centralEvictionPolicies.isEmpty() && this.distributedEvictionPolicies.isEmpty()) {
    throw new UnsupportedOperationException("You have to define at least one eviction policy");
  }
  if (this.centralTriggerPolicies.isEmpty() && this.distributedTriggerPolicies.isEmpty()) {
    throw new UnsupportedOperationException("You have to define at least one trigger policy");
  }
}
