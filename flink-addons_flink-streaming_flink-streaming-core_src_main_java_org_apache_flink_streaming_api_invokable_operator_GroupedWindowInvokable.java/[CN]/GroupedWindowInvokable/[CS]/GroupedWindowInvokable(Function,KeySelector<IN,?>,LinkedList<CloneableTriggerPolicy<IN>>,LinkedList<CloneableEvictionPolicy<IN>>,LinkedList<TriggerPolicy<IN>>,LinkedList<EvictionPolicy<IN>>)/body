{
  super(userFunction);
  if (centralEvictionPolicies != null && distributedEvictionPolicies != null && !centralEvictionPolicies.isEmpty() && !distributedEvictionPolicies.isEmpty()) {
    throw new UnsupportedOperationException("You can only use either central or distributed eviction policies but not both at the same time.");
  }
  if ((centralEvictionPolicies == null || centralEvictionPolicies.isEmpty()) && (distributedEvictionPolicies == null || distributedEvictionPolicies.isEmpty())) {
    throw new UnsupportedOperationException("You have to define at least one eviction policy");
  }
  if ((centralTriggerPolicies == null || centralTriggerPolicies.isEmpty()) && (distributedTriggerPolicies == null || distributedTriggerPolicies.isEmpty())) {
    throw new UnsupportedOperationException("You have to define at least one trigger policy");
  }
  this.keySelector=keySelector;
  this.centralTriggerPolicies=centralTriggerPolicies;
  this.distributedTriggerPolicies=distributedTriggerPolicies;
  for (  TriggerPolicy<IN> trigger : centralTriggerPolicies) {
    if (trigger instanceof ActiveTriggerPolicy) {
      this.activeCentralTriggerPolicies.add((ActiveTriggerPolicy<IN>)trigger);
    }
  }
  if (distributedEvictionPolicies != null && !distributedEvictionPolicies.isEmpty()) {
    this.distributedEvictionPolicies=distributedEvictionPolicies;
  }
 else {
    this.centralEvictionPolicies=centralEvictionPolicies;
    this.activeCentralEvictionPolicies=new LinkedList<ActiveEvictionPolicy<IN>>();
    for (    EvictionPolicy<IN> eviction : centralEvictionPolicies) {
      if (eviction instanceof ActiveEvictionPolicy) {
        this.activeCentralEvictionPolicies.add((ActiveEvictionPolicy<IN>)eviction);
      }
    }
    this.deleteOrderForCentralEviction=new LinkedList<WindowInvokable<IN,OUT>>();
  }
}
