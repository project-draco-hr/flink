{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
      DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.reduceOnEdges(new EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>>(){
        public Tuple2<Long,Long> iterateEdges(        Vertex<Long,Long> v,        Iterable<Edge<Long,Long>> edges){
          long weight=Long.MAX_VALUE;
          long minNeighorId=0;
          for (          Edge<Long,Long> edge : edges) {
            if (edge.getValue() < weight) {
              weight=edge.getValue();
              minNeighorId=edge.getTarget();
            }
          }
          return new Tuple2<Long,Long>(v.getId(),minNeighorId);
        }
      }
,EdgeDirection.OUT);
      verticesWithLowestOutNeighbor.writeAsCsv(resultPath);
      env.execute();
      return "1,2\n" + "2,3\n" + "3,4\n"+ "4,5\n"+ "5,1\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.reduceOnEdges(new EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>>(){
      public Tuple2<Long,Long> iterateEdges(      Vertex<Long,Long> v,      Iterable<Edge<Long,Long>> edges){
        long weight=Long.MAX_VALUE;
        long minNeighorId=0;
        for (        Edge<Long,Long> edge : edges) {
          if (edge.getValue() < weight) {
            weight=edge.getValue();
            minNeighorId=edge.getSource();
          }
        }
        return new Tuple2<Long,Long>(v.getId(),minNeighorId);
      }
    }
,EdgeDirection.IN);
    verticesWithLowestOutNeighbor.writeAsCsv(resultPath);
    env.execute();
    return "1,5\n" + "2,1\n" + "3,1\n"+ "4,3\n"+ "5,3\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
  DataSet<Tuple2<Long,Long>> verticesWithMaxEdgeWeight=graph.reduceOnEdges(new EdgesFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>>(){
    public Tuple2<Long,Long> iterateEdges(    Vertex<Long,Long> v,    Iterable<Edge<Long,Long>> edges){
      long weight=Long.MIN_VALUE;
      for (      Edge<Long,Long> edge : edges) {
        if (edge.getValue() > weight) {
          weight=edge.getValue();
        }
      }
      return new Tuple2<Long,Long>(v.getId(),weight);
    }
  }
,EdgeDirection.ALL);
  verticesWithMaxEdgeWeight.writeAsCsv(resultPath);
  env.execute();
  return "1,51\n" + "2,23\n" + "3,35\n"+ "4,45\n"+ "5,51\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.reduceOnEdges(new EdgesFunction<Long,Long,Tuple2<Long,Long>>(){
  public Tuple2<Long,Long> iterateEdges(  Iterable<Tuple2<Long,Edge<Long,Long>>> edges){
    long weight=Long.MAX_VALUE;
    long minNeighorId=0;
    long vertexId=-1;
    long i=0;
    for (    Tuple2<Long,Edge<Long,Long>> edge : edges) {
      if (edge.f1.getValue() < weight) {
        weight=edge.f1.getValue();
        minNeighorId=edge.f1.getTarget();
      }
      if (i == 0) {
        vertexId=edge.f0;
      }
      i++;
    }
    return new Tuple2<Long,Long>(vertexId,minNeighorId);
  }
}
,EdgeDirection.OUT);
verticesWithLowestOutNeighbor.writeAsCsv(resultPath);
env.execute();
return "1,2\n" + "2,3\n" + "3,4\n"+ "4,5\n"+ "5,1\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.reduceOnEdges(new EdgesFunction<Long,Long,Tuple2<Long,Long>>(){
public Tuple2<Long,Long> iterateEdges(Iterable<Tuple2<Long,Edge<Long,Long>>> edges){
  long weight=Long.MAX_VALUE;
  long minNeighorId=0;
  long vertexId=-1;
  long i=0;
  for (  Tuple2<Long,Edge<Long,Long>> edge : edges) {
    if (edge.f1.getValue() < weight) {
      weight=edge.f1.getValue();
      minNeighorId=edge.f1.getSource();
    }
    if (i == 0) {
      vertexId=edge.f0;
    }
    i++;
  }
  return new Tuple2<Long,Long>(vertexId,minNeighorId);
}
}
,EdgeDirection.IN);
verticesWithLowestOutNeighbor.writeAsCsv(resultPath);
env.execute();
return "1,5\n" + "2,1\n" + "3,1\n"+ "4,3\n"+ "5,3\n";
}
case 6:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
DataSet<Tuple2<Long,Long>> verticesWithMaxEdgeWeight=graph.reduceOnEdges(new EdgesFunction<Long,Long,Tuple2<Long,Long>>(){
public Tuple2<Long,Long> iterateEdges(Iterable<Tuple2<Long,Edge<Long,Long>>> edges){
long weight=Long.MIN_VALUE;
long vertexId=-1;
long i=0;
for (Tuple2<Long,Edge<Long,Long>> edge : edges) {
  if (edge.f1.getValue() > weight) {
    weight=edge.f1.getValue();
  }
  if (i == 0) {
    vertexId=edge.f0;
  }
  i++;
}
return new Tuple2<Long,Long>(vertexId,weight);
}
}
,EdgeDirection.ALL);
verticesWithMaxEdgeWeight.writeAsCsv(resultPath);
env.execute();
return "1,51\n" + "2,23\n" + "3,35\n"+ "4,45\n"+ "5,51\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
