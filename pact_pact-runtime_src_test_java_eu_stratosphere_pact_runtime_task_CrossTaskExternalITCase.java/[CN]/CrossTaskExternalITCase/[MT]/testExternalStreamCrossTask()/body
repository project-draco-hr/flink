{
  int keyCnt1=2;
  int valCnt1=1;
  int keyCnt2=87385;
  int valCnt2=1;
  super.initEnvironment(1 * 1024 * 1024);
  super.addInput(new RegularlyGeneratedInputGenerator(keyCnt1,valCnt1,false),1);
  super.addInput(new RegularlyGeneratedInputGenerator(keyCnt2,valCnt2,false),2);
  super.addOutput(this.outList);
  CrossTask testTask=new CrossTask();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.NESTEDLOOP_STREAMED_OUTER_FIRST);
  super.getTaskConfig().setMemorySize(1 * 1024 * 1024);
  super.getTaskConfig().setLocalStrategyKeyTypes(0,new int[]{0});
  super.getTaskConfig().setLocalStrategyKeyTypes(1,new int[]{0});
  super.getTaskConfig().setLocalStrategyKeyTypes(new Class[]{PactInteger.class});
  super.registerTask(testTask,MockCrossStub.class);
  try {
    testTask.invoke();
  }
 catch (  Exception e) {
    LOG.debug(e);
    Assert.fail("Invoke method caused exception.");
  }
  int expCnt=keyCnt1 * valCnt1 * keyCnt2* valCnt2;
  Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was "+ expCnt,this.outList.size() == expCnt);
  this.outList.clear();
}
