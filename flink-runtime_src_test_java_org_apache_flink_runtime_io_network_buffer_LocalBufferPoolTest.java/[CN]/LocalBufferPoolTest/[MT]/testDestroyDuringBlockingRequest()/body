{
  final int numberOfBuffers=1;
  localBufferPool.setNumBuffers(numberOfBuffers);
  final CountDownLatch sync=new CountDownLatch(1);
  final Callable<List<Buffer>> requester=new Callable<List<Buffer>>(){
    @Override public List<Buffer> call() throws Exception {
      final List<Buffer> requested=Lists.newArrayList();
      for (int i=0; i < numberOfBuffers; i++) {
        requested.add(localBufferPool.requestBufferBlocking());
      }
      sync.countDown();
      assertNull(localBufferPool.requestBufferBlocking());
      return requested;
    }
  }
;
  Future<List<Buffer>> f=executor.submit(requester);
  sync.await();
  localBufferPool.lazyDestroy();
  Thread.sleep(50);
  List<Buffer> requestedBuffers=f.get(60,TimeUnit.SECONDS);
  for (  Buffer buffer : requestedBuffers) {
    buffer.recycle();
  }
}
