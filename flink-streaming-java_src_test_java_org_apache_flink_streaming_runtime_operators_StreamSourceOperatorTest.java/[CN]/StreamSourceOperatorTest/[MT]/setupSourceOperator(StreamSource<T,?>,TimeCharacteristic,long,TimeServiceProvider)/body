{
  ExecutionConfig executionConfig=new ExecutionConfig();
  executionConfig.setAutoWatermarkInterval(watermarkInterval);
  StreamConfig cfg=new StreamConfig(new Configuration());
  cfg.setStateBackend(new MemoryStateBackend());
  cfg.setTimeCharacteristic(timeChar);
  Environment env=new DummyEnvironment("MockTwoInputTask",1,0);
  StreamTask<?,?> mockTask=mock(StreamTask.class);
  when(mockTask.getName()).thenReturn("Mock Task");
  when(mockTask.getCheckpointLock()).thenReturn(new Object());
  when(mockTask.getConfiguration()).thenReturn(cfg);
  when(mockTask.getEnvironment()).thenReturn(env);
  when(mockTask.getExecutionConfig()).thenReturn(executionConfig);
  when(mockTask.getAccumulatorMap()).thenReturn(Collections.<String,Accumulator<?,?>>emptyMap());
  doAnswer(new Answer<TimeServiceProvider>(){
    @Override public TimeServiceProvider answer(    InvocationOnMock invocation) throws Throwable {
      if (timeProvider == null) {
        throw new RuntimeException("The time provider is null.");
      }
      return timeProvider;
    }
  }
).when(mockTask).getTimerService();
  operator.setup(mockTask,cfg,(Output<StreamRecord<T>>)mock(Output.class));
}
