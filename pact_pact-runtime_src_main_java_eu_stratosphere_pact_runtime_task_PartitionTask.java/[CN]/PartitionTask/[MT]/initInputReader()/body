{
  RecordDeserializer<KeyValuePair<Key,Value>> deserializerPartition=new KeyValuePairDeserializer<Key,Value>(stub.getOutKeyType(),(Class<Value>)((Class<? extends Value>)PactNull.class));
  RecordDeserializer<KeyValuePair<Key,Value>> deserializerReader=new KeyValuePairDeserializer<Key,Value>(stub.getOutKeyType(),stub.getOutValueType());
  DistributionPattern dpPartition=null;
switch (config.getInputShipStrategy(0)) {
case FORWARD:
    dpPartition=new PointwiseDistributionPattern();
  break;
case PARTITION_HASH:
case PARTITION_RANGE:
case BROADCAST:
dpPartition=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No input ship strategy provided for Partition.");
}
DistributionPattern dpReader=null;
switch (config.getInputShipStrategy(1)) {
case FORWARD:
dpReader=new PointwiseDistributionPattern();
break;
case PARTITION_HASH:
case PARTITION_RANGE:
case BROADCAST:
dpReader=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No input ship strategy provided for MapTask.");
}
readerPartition=new RecordReader<KeyValuePair<Key,Value>>(this,deserializerPartition,dpPartition);
readerStub=new RecordReader<KeyValuePair<Key,Value>>(this,deserializerReader,dpReader);
}
