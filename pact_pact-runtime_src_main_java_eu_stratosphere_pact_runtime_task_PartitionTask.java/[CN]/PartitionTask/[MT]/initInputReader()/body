{
  RecordDeserializer<KeyValuePair<Key,Value>> deserializerData=new KeyValuePairDeserializer<Key,Value>(stub.getOutKeyType(),stub.getOutValueType());
  DistributionPattern dpData=null;
switch (config.getInputShipStrategy(0)) {
case FORWARD:
    dpData=new PointwiseDistributionPattern();
  break;
default :
throw new RuntimeException("No input ship strategy provided for Partition/Data.");
}
readerData=new RecordReader<KeyValuePair<Key,Value>>(this,deserializerData,dpData);
if (usesSample) {
RecordDeserializer<KeyValuePair<Key,Value>> deserializerHistogram=new KeyValuePairDeserializer<Key,Value>(stub.getOutKeyType(),(Class<Value>)((Class<? extends Value>)PactNull.class));
DistributionPattern dpHistogram=null;
switch (config.getInputShipStrategy(1)) {
case FORWARD:
dpHistogram=new PointwiseDistributionPattern();
throw new RuntimeException("EEE");
case PARTITION_HASH:
case PARTITION_RANGE:
case BROADCAST:
dpHistogram=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No input ship strategy provided for Partition/Sample.");
}
readerPartition=new RecordReader<KeyValuePair<Key,Value>>(this,deserializerHistogram,dpHistogram);
}
}
