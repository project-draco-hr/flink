{
  LOG.info("Start PACT code: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
  readerPartition.hasNext();
  ArrayList<Key> borders=new ArrayList<Key>();
  while (readerPartition.hasNext()) {
    borders.add(readerPartition.next().getKey());
  }
  oe.setPartitionBorders(borders.toArray(new Key[0]));
  Iterator<KeyValuePair<Key,Value>> input=new Iterator<KeyValuePair<Key,Value>>(){
    public boolean hasNext(){
      return readerStub.hasNext();
    }
    @Override public KeyValuePair<Key,Value> next(){
      try {
        return readerStub.next();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void remove(){
    }
  }
;
  try {
    callStub(input,output);
  }
 catch (  Exception ex) {
    if (!this.taskCanceled) {
      LOG.error("Unexpected ERROR in PACT code: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
      throw ex;
    }
  }
  output.close();
  if (!this.taskCanceled) {
    LOG.info("Finished PACT code: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
  }
 else {
    LOG.warn("PACT code cancelled: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
  }
}
