{
  input_stack.push(new input_scope());
  MeteorParser.input_return retval=new MeteorParser.input_return();
  retval.start=input.LT(1);
  int input_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token preserveFlag=null;
  Token name=null;
  Token from=null;
  Token inputOption=null;
  Token string_literal104=null;
  MeteorParser.contextAwareExpression_return expr=null;
  EvaluationExpression preserveFlag_tree=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression inputOption_tree=null;
  EvaluationExpression string_literal104_tree=null;
  RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_contextAwareExpression=new RewriteRuleSubtreeStream(adaptor,"rule contextAwareExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,38)) {
      return retval;
    }
{
      int alt50=2;
      int LA50_0=input.LA(1);
      if ((LA50_0 == 69)) {
        alt50=1;
      }
switch (alt50) {
case 1:
{
          preserveFlag=(Token)match(input,69,FOLLOW_69_in_input1863);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_69.add(preserveFlag);
        }
      break;
  }
  if (state.backtracking == 0) {
  }
  int alt51=2;
  int LA51_0=input.LA(1);
  if ((LA51_0 == VAR)) {
    int LA51_1=input.LA(2);
    if ((LA51_1 == 42)) {
      alt51=1;
    }
  }
switch (alt51) {
case 1:
{
      name=(Token)match(input,VAR,FOLLOW_VAR_in_input1871);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(name);
      string_literal104=(Token)match(input,42,FOLLOW_42_in_input1873);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_42.add(string_literal104);
    }
  break;
}
from=(Token)match(input,VAR,FOLLOW_VAR_in_input1879);
if (state.failed) return retval;
if (state.backtracking == 0) stream_VAR.add(from);
if (state.backtracking == 0) {
int inputIndex=((operator_scope)operator_stack.peek()).numInputs++;
JsonStreamExpression input=getBinding(from,JsonStreamExpression.class);
((operator_scope)operator_stack.peek()).result.setInput(inputIndex,input.getStream());
if (preserveFlag != null) setBinding(name != null ? name : from,new JsonStreamExpression(input.getStream(),inputIndex).withTag(ExpressionTag.RETAIN));
 else setBinding(name != null ? name : from,new JsonStreamExpression(input.getStream(),inputIndex));
}
if (state.backtracking == 0) {
if (state.backtracking == 0) {
  addScope();
}
}
int alt52=2;
alt52=dfa52.predict(input);
switch (alt52) {
case 1:
{
  inputOption=(Token)match(input,ID,FOLLOW_ID_in_input1889);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(inputOption);
  if (!(((((input_scope)input_stack.peek()).inputProperty=findInputPropertyRelunctantly(((genericOperator_scope)genericOperator_stack.peek()).operatorInfo,inputOption)) != null))) {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    throw new FailedPredicateException(input,"input"," ($input::inputProperty = findInputPropertyRelunctantly($genericOperator::operatorInfo, $inputOption)) != null ");
  }
  pushFollow(FOLLOW_contextAwareExpression_in_input1897);
  expr=contextAwareExpression(new InputSelection(((operator_scope)operator_stack.peek()).numInputs - 1));
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_contextAwareExpression.add(expr.getTree());
  if (state.backtracking == 0) {
    ((input_scope)input_stack.peek()).inputProperty.setValue(((operator_scope)operator_stack.peek()).result,((operator_scope)operator_stack.peek()).numInputs - 1,(expr != null ? ((EvaluationExpression)expr.tree) : null));
  }
}
break;
}
if (state.backtracking == 0) {
if (state.backtracking == 0) removeScope();
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,38,input_StartIndex);
}
input_stack.pop();
}
return retval;
}
