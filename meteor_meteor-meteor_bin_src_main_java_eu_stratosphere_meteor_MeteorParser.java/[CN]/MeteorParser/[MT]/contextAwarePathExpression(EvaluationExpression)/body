{
  MeteorParser.contextAwarePathExpression_return retval=new MeteorParser.contextAwarePathExpression_return();
  retval.start=input.LT(1);
  int contextAwarePathExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  MeteorParser.pathExpression_return path=null;
  RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,20)) {
      return retval;
    }
{
      pushFollow(FOLLOW_pathExpression_in_contextAwarePathExpression935);
      path=pathExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_pathExpression.add(path.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          adaptor.addChild(root_0,PathExpression.wrapIfNecessary(context,(path != null ? ((EvaluationExpression)path.tree) : null)));
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,20,contextAwarePathExpression_StartIndex);
    }
  }
  return retval;
}
