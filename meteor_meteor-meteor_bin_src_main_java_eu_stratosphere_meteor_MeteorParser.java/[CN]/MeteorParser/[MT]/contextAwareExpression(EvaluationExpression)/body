{
  contextAwareExpression_stack.push(new contextAwareExpression_scope());
  MeteorParser.contextAwareExpression_return retval=new MeteorParser.contextAwareExpression_return();
  retval.start=input.LT(1);
  int contextAwareExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  MeteorParser.expression_return expression19=null;
  ((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context=contextExpression;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,7)) {
      return retval;
    }
{
      root_0=(EvaluationExpression)adaptor.nil();
      pushFollow(FOLLOW_expression_in_contextAwareExpression326);
      expression19=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression19.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,7,contextAwareExpression_StartIndex);
    }
    contextAwareExpression_stack.pop();
  }
  return retval;
}
