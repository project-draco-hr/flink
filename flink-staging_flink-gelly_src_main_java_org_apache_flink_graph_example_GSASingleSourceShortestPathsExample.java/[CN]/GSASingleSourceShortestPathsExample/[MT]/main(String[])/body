{
  if (!parseParameters(args)) {
    return;
  }
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Edge<Long,Double>> edges=getEdgeDataSet(env);
  DataSet<Vertex<Long,Double>> vertices=edges.flatMap(new InitVerticesMapper(srcVertexId)).distinct();
  Graph<Long,Double,Double> graph=Graph.fromDataSet(vertices,edges,env);
  GatherFunction<Double,Double,Double> gather=new SingleSourceShortestPathGather();
  SumFunction<Double,Double,Double> sum=new SingleSourceShortestPathSum();
  ApplyFunction<Double,Double,Double> apply=new SingleSourceShortestPathApply();
  Graph<Long,Double,Double> result=graph.runGatherSumApplyIteration(gather,sum,apply,maxIterations);
  DataSet<Vertex<Long,Double>> singleSourceShortestPaths=result.getVertices();
  if (fileOutput) {
    singleSourceShortestPaths.writeAsCsv(outputPath,"\n"," ");
  }
 else {
    singleSourceShortestPaths.print();
  }
  env.execute("GSA Single Source Shortest Paths Example");
}
