{
  if (!parseParameters(args)) {
    return;
  }
  List<Tuple2<Double,Integer>> input=new ArrayList<Tuple2<Double,Integer>>();
  for (int i=0; i < 1000; i++) {
    input.add(new Tuple2<Double,Integer>(0.,0));
  }
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment().setBufferTimeout(0);
  IterativeDataStream<Tuple2<Double,Integer>> it=env.fromCollection(input).shuffle().iterate();
  it.setMaxWaitTime(5000);
  SplitDataStream<Tuple2<Double,Integer>> step=it.map(new Step()).shuffle().setBufferTimeout(1).split(new MySelector());
  it.closeWith(step.select("iterate"));
  DataStream<Tuple1<Integer>> numbers=step.select("output").project(1).types(Integer.class);
  if (fileOutput) {
    numbers.writeAsText(outputPath,1);
  }
 else {
    numbers.print();
  }
  env.execute("Streaming Iteration Example");
}
