{
  new JavaTestKit(actorSystem){
{
      ActorGateway fakeJobManager1Gateway=null;
      ActorGateway fakeJobManager2Gateway=null;
      ActorGateway taskManagerGateway=null;
      final String JOB_MANAGER_NAME="ForwardingJobManager";
      try {
        fakeJobManager1Gateway=createForwardingJobManager(actorSystem,getTestActor(),Option.apply(JOB_MANAGER_NAME));
        final ActorGateway fakeJM1Gateway=fakeJobManager1Gateway;
        taskManagerGateway=createTaskManager(actorSystem,fakeJobManager1Gateway,config,true,false);
        final ActorGateway tm=taskManagerGateway;
        new Within(timeout){
          @Override protected void run(){
            expectMsgClass(RegisterTaskManager.class);
            tm.tell(new AcknowledgeRegistration(new InstanceID(),45234),fakeJM1Gateway);
          }
        }
;
        watch(fakeJobManager1Gateway.actor());
        stopActor(fakeJobManager1Gateway.actor());
        final ActorGateway gateway=fakeJobManager1Gateway;
        new Within(timeout){
          @Override protected void run(){
            Object message=null;
            while (message == null || !(message instanceof Terminated)) {
              message=receiveOne(timeout);
            }
            Terminated terminatedMessage=(Terminated)message;
            assertEquals(gateway.actor(),terminatedMessage.actor());
          }
        }
;
        fakeJobManager1Gateway=null;
        long deadline=20000000000L + System.nanoTime();
        do {
          try {
            fakeJobManager2Gateway=createForwardingJobManager(actorSystem,getTestActor(),Option.apply(JOB_MANAGER_NAME));
          }
 catch (          InvalidActorNameException e) {
            Thread.sleep(100);
          }
        }
 while (fakeJobManager2Gateway == null && System.nanoTime() < deadline);
        final ActorGateway fakeJM2GatewayClosure=fakeJobManager2Gateway;
        new Within(timeout){
          @Override protected void run(){
            expectMsgClass(RegisterTaskManager.class);
            tm.tell(new AcknowledgeRegistration(new InstanceID(),45234),fakeJM2GatewayClosure);
          }
        }
;
      }
 catch (      Throwable e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
 finally {
        stopActor(taskManagerGateway);
        stopActor(fakeJobManager1Gateway);
        stopActor(fakeJobManager2Gateway);
      }
    }
  }
;
}
