{
  new JavaTestKit(actorSystem){
{
      try {
        final Props fakeJmProps=Props.create(ForwardingActor.class,getTestActor());
        final String jobManagerName="FAKE_JOB_MANAGER";
        final ActorRef fakeJobManager1=actorSystem.actorOf(fakeJmProps,jobManagerName);
        final ActorRef taskManager=startTaskManager(fakeJobManager1);
        final UUID leaderSessionID=UUID.randomUUID();
        new Within(new FiniteDuration(2,TimeUnit.SECONDS)){
          @Override protected void run(){
            RegisterTaskManager message=expectMsgClass(RegisterTaskManager.class);
            taskManager.tell(new AcknowledgeRegistration(message.registrationSessionID(),leaderSessionID,fakeJobManager1,new InstanceID(),45234),fakeJobManager1);
          }
        }
;
        watch(fakeJobManager1);
        stopActor(fakeJobManager1);
        new Within(new FiniteDuration(2,TimeUnit.SECONDS)){
          @Override protected void run(){
            expectTerminated(fakeJobManager1);
          }
        }
;
        ActorRef fakeJobManager2=null;
        long deadline=20000000000L + System.nanoTime();
        do {
          try {
            fakeJobManager2=actorSystem.actorOf(fakeJmProps,jobManagerName);
          }
 catch (          InvalidActorNameException e) {
            Thread.sleep(100);
          }
        }
 while (fakeJobManager2 == null && System.nanoTime() < deadline);
        final ActorRef jm2Closure=fakeJobManager2;
        new Within(new FiniteDuration(10,TimeUnit.SECONDS)){
          @Override protected void run(){
            RegisterTaskManager message=expectMsgClass(RegisterTaskManager.class);
            taskManager.tell(new AcknowledgeRegistration(message.registrationSessionID(),leaderSessionID,jm2Closure,new InstanceID(),45234),jm2Closure);
          }
        }
;
        stopActor(taskManager);
        stopActor(fakeJobManager2);
      }
 catch (      Throwable e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
    }
  }
;
}
