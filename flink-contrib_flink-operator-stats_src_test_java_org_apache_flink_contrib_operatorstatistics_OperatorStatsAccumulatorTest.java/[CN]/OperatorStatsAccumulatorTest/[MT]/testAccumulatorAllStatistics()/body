{
  String input="";
  Random rand=new Random();
  for (int i=1; i < 1000; i++) {
    if (rand.nextDouble() < 0.2) {
      input+=String.valueOf(rand.nextInt(4)) + "\n";
    }
 else {
      input+=String.valueOf(rand.nextInt(100)) + "\n";
    }
  }
  String inputFile=createTempFile("datapoints.txt",input);
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  OperatorStatisticsConfig operatorStatisticsConfig=new OperatorStatisticsConfig(OperatorStatisticsConfig.CountDistinctAlgorithm.HYPERLOGLOG,OperatorStatisticsConfig.HeavyHitterAlgorithm.LOSSY_COUNTING);
  env.readTextFile(inputFile).flatMap(new StringToInt(operatorStatisticsConfig)).output(new DiscardingOutputFormat<Tuple1<Integer>>());
  JobExecutionResult result=env.execute();
  OperatorStatistics globalStats=result.getAccumulatorResult(ACCUMULATOR_NAME);
  System.out.println("Global Stats");
  System.out.println(globalStats.toString());
  OperatorStatistics merged=null;
  Map<String,Object> accResults=result.getAllAccumulatorResults();
  for (  String accumulatorName : accResults.keySet()) {
    if (accumulatorName.contains(ACCUMULATOR_NAME + "-")) {
      OperatorStatistics localStats=(OperatorStatistics)accResults.get(accumulatorName);
      LOG.debug("Local Stats: " + accumulatorName);
      LOG.debug(localStats.toString());
      if (merged == null) {
        merged=localStats.clone();
      }
 else {
        merged.merge(localStats);
      }
    }
  }
  LOG.debug("Local Stats Merged: \n");
  LOG.debug(merged.toString());
  Assert.assertEquals("Global cardinality should be 999",999,globalStats.cardinality);
  Assert.assertEquals("Count distinct estimate should be around 100 and is " + globalStats.estimateCountDistinct(),100.0,(double)globalStats.estimateCountDistinct(),5.0);
  Assert.assertTrue("The total number of heavy hitters should be between 0 and 5.",globalStats.getHeavyHitters().size() > 0 && globalStats.getHeavyHitters().size() <= 5);
  Assert.assertEquals("Min when merging the local accumulators should correspond with min" + "of the global accumulator",merged.getMin(),globalStats.getMin());
  Assert.assertEquals("Max resulting from merging the local accumulators should correspond to" + "max of the global accumulator",merged.getMax(),globalStats.getMax());
  Assert.assertEquals("Count distinct when merging the local accumulators should correspond to " + "count distinct in the global accumulator",merged.estimateCountDistinct(),globalStats.estimateCountDistinct());
  Assert.assertEquals("The number of heavy hitters when merging the local accumulators should correspond " + "to the number of heavy hitters in the global accumulator",merged.getHeavyHitters().size(),globalStats.getHeavyHitters().size());
}
