{
  JaqlParser.stream_return retval=new JaqlParser.stream_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ARROW9=null;
  JaqlParser.expr_return expr10=null;
  JaqlParser.stream_return stream11=null;
  CommonTree ARROW9_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      ARROW9=(Token)match(input,ARROW,FOLLOW_ARROW_in_stream224);
      pushFollow(FOLLOW_expr_in_stream227);
      expr10=expr();
      state._fsp--;
      adaptor.addChild(root_0,expr10.getTree());
      int alt6=2;
      int LA6_0=input.LA(1);
      if ((LA6_0 == ARROW)) {
        alt6=1;
      }
switch (alt6) {
case 1:
{
          pushFollow(FOLLOW_stream_in_stream229);
          stream11=stream();
          state._fsp--;
          adaptor.addChild(root_0,stream11.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
