{
  JaqlParser.streamStart_return retval=new JaqlParser.streamStart_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token VAR7=null;
  JaqlParser.stream_return s=null;
  JaqlParser.expr_return expr8=null;
  CommonTree VAR7_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleSubtreeStream stream_stream=new RewriteRuleSubtreeStream(adaptor,"rule stream");
  RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
  try {
{
      int alt4=2;
      int LA4_0=input.LA(1);
      if ((LA4_0 == VAR)) {
        alt4=1;
      }
 else       if ((LA4_0 == ID || (LA4_0 >= 51 && LA4_0 <= 52) || LA4_0 == 54 || LA4_0 == 60 || LA4_0 == 63)) {
        alt4=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",4,0,input);
        throw nvae;
      }
switch (alt4) {
case 1:
{
          VAR7=(Token)match(input,VAR,FOLLOW_VAR_in_streamStart190);
          stream_VAR.add(VAR7);
        }
      break;
case 2:
{
      pushFollow(FOLLOW_expr_in_streamStart194);
      expr8=expr();
      state._fsp--;
      stream_expr.add(expr8.getTree());
    }
  break;
}
int alt5=2;
int LA5_0=input.LA(1);
if ((LA5_0 == ARROW)) {
alt5=1;
}
switch (alt5) {
case 1:
{
  pushFollow(FOLLOW_stream_in_streamStart199);
  s=stream();
  state._fsp--;
  stream_stream.add(s.getTree());
}
break;
}
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s != null ? s.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM,"STREAM"),root_1);
if (stream_VAR.hasNext()) {
adaptor.addChild(root_1,stream_VAR.nextNode());
}
stream_VAR.reset();
if (stream_expr.hasNext()) {
adaptor.addChild(root_1,stream_expr.nextTree());
}
stream_expr.reset();
if (stream_s.hasNext()) {
adaptor.addChild(root_1,stream_s.nextTree());
}
stream_s.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
