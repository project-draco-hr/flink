{
  JaqlParser.fuse_return retval=new JaqlParser.fuse_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal93=null;
  Token string_literal95=null;
  Token string_literal97=null;
  Token string_literal99=null;
  Token string_literal100=null;
  JaqlParser.bindings_return bindings94=null;
  JaqlParser.bindingCondition_return bindingCondition96=null;
  JaqlParser.jsonObject_return jsonObject98=null;
  JaqlParser.jsonObject_return jsonObject101=null;
  CommonTree string_literal93_tree=null;
  CommonTree string_literal95_tree=null;
  CommonTree string_literal97_tree=null;
  CommonTree string_literal99_tree=null;
  CommonTree string_literal100_tree=null;
  RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
  RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
  RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
  RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
  RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
  RewriteRuleSubtreeStream stream_jsonObject=new RewriteRuleSubtreeStream(adaptor,"rule jsonObject");
  RewriteRuleSubtreeStream stream_bindings=new RewriteRuleSubtreeStream(adaptor,"rule bindings");
  RewriteRuleSubtreeStream stream_bindingCondition=new RewriteRuleSubtreeStream(adaptor,"rule bindingCondition");
  try {
{
      string_literal93=(Token)match(input,60,FOLLOW_60_in_fuse809);
      stream_60.add(string_literal93);
      pushFollow(FOLLOW_bindings_in_fuse811);
      bindings94=bindings();
      state._fsp--;
      stream_bindings.add(bindings94.getTree());
      string_literal95=(Token)match(input,55,FOLLOW_55_in_fuse813);
      stream_55.add(string_literal95);
      pushFollow(FOLLOW_bindingCondition_in_fuse815);
      bindingCondition96=bindingCondition();
      state._fsp--;
      stream_bindingCondition.add(bindingCondition96.getTree());
      string_literal97=(Token)match(input,53,FOLLOW_53_in_fuse817);
      stream_53.add(string_literal97);
      pushFollow(FOLLOW_jsonObject_in_fuse819);
      jsonObject98=jsonObject();
      state._fsp--;
      stream_jsonObject.add(jsonObject98.getTree());
      int alt33=2;
      int LA33_0=input.LA(1);
      if ((LA33_0 == 61)) {
        alt33=1;
      }
switch (alt33) {
case 1:
{
          string_literal99=(Token)match(input,61,FOLLOW_61_in_fuse822);
          stream_61.add(string_literal99);
          string_literal100=(Token)match(input,62,FOLLOW_62_in_fuse824);
          stream_62.add(string_literal100);
          pushFollow(FOLLOW_jsonObject_in_fuse826);
          jsonObject101=jsonObject();
          state._fsp--;
          stream_jsonObject.add(jsonObject101.getTree());
        }
      break;
  }
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
{
      CommonTree root_1=(CommonTree)adaptor.nil();
      root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR,"fuse"),root_1);
      adaptor.addChild(root_1,stream_bindings.nextTree());
      adaptor.addChild(root_1,stream_bindingCondition.nextTree());
      adaptor.addChild(root_1,stream_jsonObject.nextTree());
      if (stream_jsonObject.hasNext()) {
        adaptor.addChild(root_1,stream_jsonObject.nextTree());
      }
      stream_jsonObject.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
