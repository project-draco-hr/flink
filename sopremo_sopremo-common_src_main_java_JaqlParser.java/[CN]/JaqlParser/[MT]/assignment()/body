{
  JaqlParser.assignment_return retval=new JaqlParser.assignment_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token VAR12=null;
  Token char_literal13=null;
  JaqlParser.streamStart_return streamStart14=null;
  CommonTree VAR12_tree=null;
  CommonTree char_literal13_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  RewriteRuleSubtreeStream stream_streamStart=new RewriteRuleSubtreeStream(adaptor,"rule streamStart");
  try {
{
      VAR12=(Token)match(input,VAR,FOLLOW_VAR_in_assignment238);
      stream_VAR.add(VAR12);
      char_literal13=(Token)match(input,38,FOLLOW_38_in_assignment240);
      stream_38.add(char_literal13);
      pushFollow(FOLLOW_streamStart_in_assignment242);
      streamStart14=streamStart();
      state._fsp--;
      stream_streamStart.add(streamStart14.getTree());
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT,"ASSIGNMENT"),root_1);
          adaptor.addChild(root_1,stream_VAR.nextNode());
          adaptor.addChild(root_1,stream_streamStart.nextTree());
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
    retval.stop=input.LT(-1);
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
