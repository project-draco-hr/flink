{
  JaqlParser.arrayDefinition_return retval=new JaqlParser.arrayDefinition_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal51=null;
  Token char_literal53=null;
  Token char_literal55=null;
  Token char_literal56=null;
  JaqlParser.arithmExpr_return arithmExpr52=null;
  JaqlParser.arithmExpr_return arithmExpr54=null;
  CommonTree char_literal51_tree=null;
  CommonTree char_literal53_tree=null;
  CommonTree char_literal55_tree=null;
  CommonTree char_literal56_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
  RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
  RewriteRuleSubtreeStream stream_arithmExpr=new RewriteRuleSubtreeStream(adaptor,"rule arithmExpr");
  try {
{
      char_literal51=(Token)match(input,49,FOLLOW_49_in_arrayDefinition573);
      stream_49.add(char_literal51);
      pushFollow(FOLLOW_arithmExpr_in_arrayDefinition575);
      arithmExpr52=arithmExpr();
      state._fsp--;
      stream_arithmExpr.add(arithmExpr52.getTree());
      loop25:       do {
        int alt25=2;
        int LA25_0=input.LA(1);
        if ((LA25_0 == 44)) {
          int LA25_1=input.LA(2);
          if ((LA25_1 == VAR || (LA25_1 >= ID && LA25_1 <= UINT))) {
            alt25=1;
          }
        }
switch (alt25) {
case 1:
{
            char_literal53=(Token)match(input,44,FOLLOW_44_in_arrayDefinition578);
            stream_44.add(char_literal53);
            pushFollow(FOLLOW_arithmExpr_in_arrayDefinition580);
            arithmExpr54=arithmExpr();
            state._fsp--;
            stream_arithmExpr.add(arithmExpr54.getTree());
          }
        break;
default :
      break loop25;
  }
}
 while (true);
int alt26=2;
int LA26_0=input.LA(1);
if ((LA26_0 == 44)) {
  alt26=1;
}
switch (alt26) {
case 1:
{
    char_literal55=(Token)match(input,44,FOLLOW_44_in_arrayDefinition584);
    stream_44.add(char_literal55);
  }
break;
}
char_literal56=(Token)match(input,50,FOLLOW_50_in_arrayDefinition587);
stream_50.add(char_literal56);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY,"ARRAY"),root_1);
while (stream_arithmExpr.hasNext()) {
  adaptor.addChild(root_1,stream_arithmExpr.nextTree());
}
stream_arithmExpr.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
