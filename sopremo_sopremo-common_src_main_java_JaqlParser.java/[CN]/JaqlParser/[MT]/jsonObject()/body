{
  JaqlParser.jsonObject_return retval=new JaqlParser.jsonObject_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal31=null;
  Token char_literal33=null;
  Token char_literal35=null;
  Token char_literal36=null;
  JaqlParser.jsonExpr_return jsonExpr32=null;
  JaqlParser.jsonExpr_return jsonExpr34=null;
  CommonTree char_literal31_tree=null;
  CommonTree char_literal33_tree=null;
  CommonTree char_literal35_tree=null;
  CommonTree char_literal36_tree=null;
  RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
  RewriteRuleSubtreeStream stream_jsonExpr=new RewriteRuleSubtreeStream(adaptor,"rule jsonExpr");
  try {
{
      char_literal31=(Token)match(input,46,FOLLOW_46_in_jsonObject383);
      stream_46.add(char_literal31);
      int alt15=2;
      int LA15_0=input.LA(1);
      if ((LA15_0 == VAR || (LA15_0 >= ID && LA15_0 <= UINT) || LA15_0 == 46 || LA15_0 == 49)) {
        alt15=1;
      }
switch (alt15) {
case 1:
{
          pushFollow(FOLLOW_jsonExpr_in_jsonObject386);
          jsonExpr32=jsonExpr();
          state._fsp--;
          stream_jsonExpr.add(jsonExpr32.getTree());
          loop13:           do {
            int alt13=2;
            int LA13_0=input.LA(1);
            if ((LA13_0 == 44)) {
              int LA13_1=input.LA(2);
              if ((LA13_1 == VAR || (LA13_1 >= ID && LA13_1 <= UINT) || LA13_1 == 46 || LA13_1 == 49)) {
                alt13=1;
              }
            }
switch (alt13) {
case 1:
{
                char_literal33=(Token)match(input,44,FOLLOW_44_in_jsonObject389);
                stream_44.add(char_literal33);
                pushFollow(FOLLOW_jsonExpr_in_jsonObject391);
                jsonExpr34=jsonExpr();
                state._fsp--;
                stream_jsonExpr.add(jsonExpr34.getTree());
              }
            break;
default :
          break loop13;
      }
    }
 while (true);
    int alt14=2;
    int LA14_0=input.LA(1);
    if ((LA14_0 == 44)) {
      alt14=1;
    }
switch (alt14) {
case 1:
{
        char_literal35=(Token)match(input,44,FOLLOW_44_in_jsonObject395);
        stream_44.add(char_literal35);
      }
    break;
}
}
break;
}
char_literal36=(Token)match(input,47,FOLLOW_47_in_jsonObject400);
stream_47.add(char_literal36);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_OBJECT,"JSON_OBJECT"),root_1);
while (stream_jsonExpr.hasNext()) {
adaptor.addChild(root_1,stream_jsonExpr.nextTree());
}
stream_jsonExpr.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
