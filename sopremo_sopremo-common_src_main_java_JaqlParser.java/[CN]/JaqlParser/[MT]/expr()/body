{
  JaqlParser.expr_return retval=new JaqlParser.expr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  JaqlParser.functionCall_return functionCall5=null;
  JaqlParser.operator_return operator6=null;
  try {
    int alt3=2;
    int LA3_0=input.LA(1);
    if ((LA3_0 == ID)) {
      alt3=1;
    }
 else     if (((LA3_0 >= 51 && LA3_0 <= 52) || LA3_0 == 54 || LA3_0 == 60 || LA3_0 == 63)) {
      alt3=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("",3,0,input);
      throw nvae;
    }
switch (alt3) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
        pushFollow(FOLLOW_functionCall_in_expr177);
        functionCall5=functionCall();
        state._fsp--;
        adaptor.addChild(root_0,functionCall5.getTree());
      }
    break;
case 2:
{
    root_0=(CommonTree)adaptor.nil();
    pushFollow(FOLLOW_operator_in_expr181);
    operator6=operator();
    state._fsp--;
    adaptor.addChild(root_0,operator6.getTree());
  }
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
