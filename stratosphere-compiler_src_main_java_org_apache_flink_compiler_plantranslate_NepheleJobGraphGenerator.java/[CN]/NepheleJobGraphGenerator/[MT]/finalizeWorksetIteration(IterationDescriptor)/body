{
  final WorksetIterationPlanNode iterNode=(WorksetIterationPlanNode)descr.getIterationNode();
  final JobTaskVertex headVertex=descr.getHeadTask();
  final TaskConfig headConfig=new TaskConfig(headVertex.getConfiguration());
  final TaskConfig headFinalOutputConfig=descr.getHeadFinalResultConfig();
{
    final int numStepFunctionOuts=headConfig.getNumOutputs();
    final int numFinalOuts=headFinalOutputConfig.getNumOutputs();
    headConfig.setIterationHeadFinalOutputConfig(headFinalOutputConfig);
    headConfig.setIterationHeadIndexOfSyncOutput(numStepFunctionOuts + numFinalOuts);
    final double relativeMemory=iterNode.getRelativeMemoryPerSubTask();
    if (relativeMemory <= 0) {
      throw new CompilerException("Bug: No memory has been assigned to the workset iteration.");
    }
    headConfig.setIsWorksetIteration();
    headConfig.setRelativeBackChannelMemory(relativeMemory / 2);
    headConfig.setRelativeSolutionSetMemory(relativeMemory / 2);
    headConfig.setSolutionSetSerializer(iterNode.getSolutionSetSerializer());
    headConfig.setSolutionSetComparator(iterNode.getSolutionSetComparator());
  }
  final TaskConfig syncConfig;
{
    final JobOutputVertex sync=new JobOutputVertex("Sync (" + iterNode.getNodeName() + ")",this.jobGraph);
    sync.setInvokableClass(IterationSynchronizationSinkTask.class);
    sync.setNumberOfSubtasks(1);
    this.auxVertices.add(sync);
    syncConfig=new TaskConfig(sync.getConfiguration());
    syncConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,headVertex.getNumberOfSubtasks());
    final int maxNumIterations=iterNode.getIterationNode().getIterationContract().getMaximumNumberOfIterations();
    if (maxNumIterations < 1) {
      throw new CompilerException("Cannot create workset iteration with unspecified maximum number of iterations.");
    }
    syncConfig.setNumberOfIterations(maxNumIterations);
    try {
      headVertex.connectTo(sync,ChannelType.NETWORK,DistributionPattern.POINTWISE);
    }
 catch (    JobGraphDefinitionException e) {
      throw new CompilerException("Bug: Cannot connect head vertex to sync task.");
    }
  }
{
    final PlanNode nextWorksetNode=iterNode.getNextWorkSetPlanNode();
    final PlanNode solutionDeltaNode=iterNode.getSolutionSetDeltaPlanNode();
    final boolean hasWorksetTail=nextWorksetNode.getOutgoingChannels().isEmpty();
    final boolean hasSolutionSetTail=(!iterNode.isImmediateSolutionSetUpdate()) || (!hasWorksetTail);
{
      final TaskConfig worksetTailConfig;
      JobTaskVertex nextWorksetVertex=(JobTaskVertex)this.vertices.get(nextWorksetNode);
      if (nextWorksetVertex == null) {
        TaskInChain taskInChain=this.chainedTasks.get(nextWorksetNode);
        if (taskInChain == null) {
          throw new CompilerException("Bug: Next workset node not found as vertex or chained task.");
        }
        nextWorksetVertex=(JobTaskVertex)taskInChain.getContainingVertex();
        worksetTailConfig=taskInChain.getTaskConfig();
      }
 else {
        worksetTailConfig=new TaskConfig(nextWorksetVertex.getConfiguration());
      }
      worksetTailConfig.setIsWorksetIteration();
      worksetTailConfig.setIsWorksetUpdate();
      if (hasWorksetTail) {
        nextWorksetVertex.setInvokableClass(IterationTailPactTask.class);
        worksetTailConfig.setOutputSerializer(iterNode.getWorksetSerializer());
        worksetTailConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
        JobOutputVertex fakeTail=new JobOutputVertex("Fake Tail",this.jobGraph);
        fakeTail.setInvokableClass(FakeOutputTask.class);
        fakeTail.setNumberOfSubtasks(headVertex.getNumberOfSubtasks());
        this.auxVertices.add(fakeTail);
        try {
          nextWorksetVertex.connectTo(fakeTail,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
        }
 catch (        JobGraphDefinitionException e) {
          throw new CompilerException("Bug: Cannot connect iteration tail vertex fake tail task");
        }
      }
    }
{
      final TaskConfig solutionDeltaConfig;
      JobTaskVertex solutionDeltaVertex=(JobTaskVertex)this.vertices.get(solutionDeltaNode);
      if (solutionDeltaVertex == null) {
        TaskInChain taskInChain=this.chainedTasks.get(solutionDeltaNode);
        if (taskInChain == null) {
          throw new CompilerException("Bug: Solution Set Delta not found as vertex or chained task.");
        }
        solutionDeltaVertex=(JobTaskVertex)taskInChain.getContainingVertex();
        solutionDeltaConfig=taskInChain.getTaskConfig();
      }
 else {
        solutionDeltaConfig=new TaskConfig(solutionDeltaVertex.getConfiguration());
      }
      solutionDeltaConfig.setIsWorksetIteration();
      solutionDeltaConfig.setIsSolutionSetUpdate();
      if (hasSolutionSetTail) {
        solutionDeltaVertex.setInvokableClass(IterationTailPactTask.class);
        solutionDeltaConfig.setOutputSerializer(iterNode.getSolutionSetSerializer());
        solutionDeltaConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
        JobOutputVertex fakeTail=new JobOutputVertex("Fake Tail",this.jobGraph);
        fakeTail.setInvokableClass(FakeOutputTask.class);
        fakeTail.setNumberOfSubtasks(headVertex.getNumberOfSubtasks());
        this.auxVertices.add(fakeTail);
        try {
          solutionDeltaVertex.connectTo(fakeTail,ChannelType.IN_MEMORY,DistributionPattern.POINTWISE);
        }
 catch (        JobGraphDefinitionException e) {
          throw new CompilerException("Bug: Cannot connect iteration tail vertex fake tail task");
        }
        headConfig.setWaitForSolutionSetUpdate();
      }
 else {
        if (!iterNode.isImmediateSolutionSetUpdate()) {
          throw new CompilerException("A solution set update without dedicated tail is not set to perform immediate updates.");
        }
        solutionDeltaConfig.setIsSolutionSetUpdateWithoutReprobe();
      }
    }
  }
  AggregatorRegistry aggs=iterNode.getIterationNode().getIterationContract().getAggregators();
  Collection<AggregatorWithName<?>> allAggregators=aggs.getAllRegisteredAggregators();
  for (  AggregatorWithName<?> agg : allAggregators) {
    if (agg.getName().equals(WorksetEmptyConvergenceCriterion.AGGREGATOR_NAME)) {
      throw new CompilerException("User defined aggregator used the same name as built-in workset " + "termination check aggregator: " + WorksetEmptyConvergenceCriterion.AGGREGATOR_NAME);
    }
  }
  headConfig.addIterationAggregators(allAggregators);
  syncConfig.addIterationAggregators(allAggregators);
  String convAggName=aggs.getConvergenceCriterionAggregatorName();
  ConvergenceCriterion<?> convCriterion=aggs.getConvergenceCriterion();
  if (convCriterion != null || convAggName != null) {
    throw new CompilerException("Error: Cannot use custom convergence criterion with workset iteration. Workset iterations have implicit convergence criterion where workset is empty.");
  }
  headConfig.addIterationAggregator(WorksetEmptyConvergenceCriterion.AGGREGATOR_NAME,new LongSumAggregator());
  syncConfig.addIterationAggregator(WorksetEmptyConvergenceCriterion.AGGREGATOR_NAME,new LongSumAggregator());
  syncConfig.setConvergenceCriterion(WorksetEmptyConvergenceCriterion.AGGREGATOR_NAME,new WorksetEmptyConvergenceCriterion());
}
