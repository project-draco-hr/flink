{
switch (timestampWatermarkMode) {
case NO_TIMESTAMPS_WATERMARKS:
{
      @SuppressWarnings("unchecked") KafkaTopicPartitionState<KPH>[] partitions=(KafkaTopicPartitionState<KPH>[])new KafkaTopicPartitionState<?>[assignedPartitions.size()];
      int pos=0;
      for (      KafkaTopicPartition partition : assignedPartitions) {
        KPH kafkaHandle=createKafkaPartitionHandle(partition);
        partitions[pos++]=new KafkaTopicPartitionState<>(partition,kafkaHandle);
      }
      return partitions;
    }
case PERIODIC_WATERMARKS:
{
    @SuppressWarnings("unchecked") KafkaTopicPartitionStateWithPeriodicWatermarks<T,KPH>[] partitions=(KafkaTopicPartitionStateWithPeriodicWatermarks<T,KPH>[])new KafkaTopicPartitionStateWithPeriodicWatermarks<?,?>[assignedPartitions.size()];
    int pos=0;
    for (    KafkaTopicPartition partition : assignedPartitions) {
      KPH kafkaHandle=createKafkaPartitionHandle(partition);
      AssignerWithPeriodicWatermarks<T> assignerInstance=watermarksPeriodic.deserializeValue(userCodeClassLoader);
      partitions[pos++]=new KafkaTopicPartitionStateWithPeriodicWatermarks<>(partition,kafkaHandle,assignerInstance);
    }
    return partitions;
  }
case PUNCTUATED_WATERMARKS:
{
  @SuppressWarnings("unchecked") KafkaTopicPartitionStateWithPunctuatedWatermarks<T,KPH>[] partitions=(KafkaTopicPartitionStateWithPunctuatedWatermarks<T,KPH>[])new KafkaTopicPartitionStateWithPunctuatedWatermarks<?,?>[assignedPartitions.size()];
  int pos=0;
  for (  KafkaTopicPartition partition : assignedPartitions) {
    KPH kafkaHandle=createKafkaPartitionHandle(partition);
    AssignerWithPunctuatedWatermarks<T> assignerInstance=watermarksPunctuated.deserializeValue(userCodeClassLoader);
    partitions[pos++]=new KafkaTopicPartitionStateWithPunctuatedWatermarks<>(partition,kafkaHandle,assignerInstance);
  }
  return partitions;
}
default :
throw new RuntimeException();
}
}
