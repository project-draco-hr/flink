{
  if (LOG.isDebugEnabled()) {
    LOG.debug(this.taskContext.formatLogString("Reducer preprocessing done. Running Reducer code."));
  }
  final MutableObjectIterator<T> input=this.input;
  final TypeSerializer<T> serializer=this.serializer;
  final TypeComparator<T> comparator=this.comparator;
  final ReduceFunction<T> function=this.taskContext.getStub();
  final Collector<T> output=this.taskContext.getOutputCollector();
  if (objectReuseEnabled) {
    T reuse1=serializer.createInstance();
    T reuse2=serializer.createInstance();
    T value=input.next(reuse1);
    while (this.running && value != null) {
      comparator.setReference(value);
      T res=value;
      while ((value=input.next(reuse2)) != null) {
        if (comparator.equalToReference(value)) {
          res=function.reduce(res,value);
          if (res == reuse2) {
            T tmp=reuse1;
            reuse1=reuse2;
            reuse2=tmp;
          }
        }
 else {
          break;
        }
      }
      output.collect(res);
      if (value != null) {
        value=serializer.copy(value,reuse1);
      }
    }
  }
 else {
    T value=input.next();
    while (this.running && value != null) {
      comparator.setReference(value);
      T res=value;
      while ((value=input.next()) != null) {
        if (comparator.equalToReference(value)) {
          res=function.reduce(res,value);
        }
 else {
          break;
        }
      }
      output.collect(res);
    }
  }
}
