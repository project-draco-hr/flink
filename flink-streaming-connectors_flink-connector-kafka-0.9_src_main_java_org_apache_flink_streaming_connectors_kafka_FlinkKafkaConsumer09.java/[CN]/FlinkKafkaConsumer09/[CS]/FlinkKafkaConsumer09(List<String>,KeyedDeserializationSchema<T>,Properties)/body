{
  super(deserializer,props);
  checkNotNull(topics,"topics");
  this.properties=checkNotNull(props,"props");
  setDeserializer(this.properties);
  KafkaConsumer<byte[],byte[]> consumer=null;
  try {
    consumer=new KafkaConsumer<>(this.properties);
    this.partitionInfos=new ArrayList<>();
    for (    final String topic : topics) {
      List<PartitionInfo> partitionsForTopic=null;
      for (int tri=0; tri < 10; tri++) {
        LOG.info("Trying to get partitions for topic {}",topic);
        try {
          partitionsForTopic=consumer.partitionsFor(topic);
          if (partitionsForTopic != null && partitionsForTopic.size() > 0) {
            break;
          }
        }
 catch (        NullPointerException npe) {
        }
        consumer.close();
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        consumer=new KafkaConsumer<>(properties);
      }
      if (partitionsForTopic != null) {
        partitionInfos.addAll(convertToFlinkKafkaTopicPartition(partitionsForTopic));
      }
    }
  }
  finally {
    if (consumer != null) {
      consumer.close();
    }
  }
  if (partitionInfos.isEmpty()) {
    throw new RuntimeException("Unable to retrieve any partitions for the requested topics " + topics);
  }
  LOG.info("Got {} partitions from these topics: {}",partitionInfos.size(),topics);
  if (LOG.isInfoEnabled()) {
    logPartitionInfo(partitionInfos);
  }
}
