{
  StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
  see.getConfig().disableObjectReuse();
  see.setParallelism(4);
  DataStream<Data> dataStream=see.fromCollection(elements);
  DataStream<Data> summedStream=dataStream.keyBy("aaa","stats.count").sum("sum").keyBy("aaa","stats.count").flatMap(new FlatMapFunction<Data,Data>(){
    Data[] first=new Data[3];
    @Override public void flatMap(    Data value,    Collector<Data> out) throws Exception {
      if (value.stats.count != 123) {
        throw new RuntimeException("Wrong value for value.stats.count");
      }
      if (first[value.aaa] == null) {
        first[value.aaa]=value;
        if (value.sum != 1) {
          throw new RuntimeException("Expected the sum to be one");
        }
      }
 else {
        if (value.sum != 2) {
          throw new RuntimeException("Expected the sum to be two");
        }
        if (first[value.aaa].aaa != value.aaa) {
          throw new RuntimeException("aaa key wrong");
        }
        if (first[value.aaa].abc != value.abc) {
          throw new RuntimeException("abc key wrong");
        }
        if (first[value.aaa].wxyz != value.wxyz) {
          throw new RuntimeException("wxyz key wrong");
        }
      }
    }
  }
);
  summedStream.print();
  see.execute();
}
