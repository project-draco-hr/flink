{
  Preconditions.checkNotNull(jobId,"The JobId must not be null.");
  Preconditions.checkNotNull(task,"The task execution id must not be null.");
  if (requiredJarFiles == null) {
    requiredJarFiles=Collections.emptySet();
  }
synchronized (lockObject) {
    LibraryCacheEntry entry=cacheEntries.get(jobId);
    if (entry == null) {
      BlobKey[] keys=requiredJarFiles.toArray(new BlobKey[requiredJarFiles.size()]);
      URL[] urls=new URL[keys.length];
      int count=0;
      try {
        for (; count < keys.length; count++) {
          BlobKey blobKey=keys[count];
          urls[count]=registerReferenceToBlobKeyAndGetURL(blobKey);
        }
      }
 catch (      Throwable t) {
        try {
          for (int i=0; i < count; i++) {
            unregisterReferenceToBlobKey(keys[i]);
          }
        }
 catch (        Throwable tt) {
          LOG.error("Error while updating library reference counters.",tt);
        }
        ExceptionUtils.tryRethrowIOException(t);
        throw new IOException("Library cache could not register the user code libraries.",t);
      }
      URLClassLoader classLoader=new FlinkUserCodeClassLoader(urls);
      cacheEntries.put(jobId,new LibraryCacheEntry(requiredJarFiles,classLoader,task));
    }
 else {
      entry.register(task,requiredJarFiles);
    }
  }
}
