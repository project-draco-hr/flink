{
  if (!testActivated()) {
    return;
  }
  final String dirName=getRandomName();
  final String subdirName=getRandomName();
  final String subsubdirName=getRandomName();
  final String fileName=getRandomName();
  final Path dir=new Path(S3_BASE_URI + dirName + Path.SEPARATOR);
  final Path subdir=new Path(S3_BASE_URI + dirName + Path.SEPARATOR+ subdirName+ Path.SEPARATOR);
  final Path subsubdir=new Path(S3_BASE_URI + dirName + Path.SEPARATOR+ subdirName+ Path.SEPARATOR+ subsubdirName+ Path.SEPARATOR);
  final Path file=new Path(S3_BASE_URI + dirName + Path.SEPARATOR+ subdirName+ Path.SEPARATOR+ fileName);
  try {
    final FileSystem fs=dir.getFileSystem();
    fs.mkdirs(subsubdir);
    final OutputStream os=fs.create(file,true);
    generateTestData(os,SMALL_FILE_SIZE);
    os.close();
    FileStatus[] list=fs.listStatus(dir);
    int numberOfDirs=0;
    int numberOfFiles=0;
    for (    final FileStatus entry : list) {
      if (entry.isDir()) {
        ++numberOfDirs;
        assertEquals(subdir,entry.getPath());
      }
 else {
        fail(entry.getPath() + " is a file which must not appear on this directory level");
      }
    }
    assertEquals(1,numberOfDirs);
    assertEquals(0,numberOfFiles);
    list=fs.listStatus(subdir);
    numberOfDirs=0;
    for (    final FileStatus entry : list) {
      if (entry.isDir()) {
        assertEquals(subsubdir,entry.getPath());
        ++numberOfDirs;
      }
 else {
        assertEquals(file,entry.getPath());
        ++numberOfFiles;
      }
    }
    assertEquals(1,numberOfDirs);
    assertEquals(1,numberOfFiles);
    fs.delete(dir,true);
  }
 catch (  IOException ioe) {
    fail(ioe.getMessage());
  }
}
