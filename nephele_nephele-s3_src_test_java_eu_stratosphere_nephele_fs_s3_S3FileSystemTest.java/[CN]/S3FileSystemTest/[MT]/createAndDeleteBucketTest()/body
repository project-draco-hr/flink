{
  if (!testActivated()) {
    return;
  }
  int i=0;
  if (i == 0) {
    return;
  }
  final String bucketName=getRandomName();
  final Path bucketPath=new Path(S3_BASE_URI + bucketName);
  try {
    final FileSystem fs=bucketPath.getFileSystem();
    fs.mkdirs(bucketPath);
    final FileStatus[] content=fs.listStatus(new Path(S3_BASE_URI));
    boolean entryFound=false;
    for (    final FileStatus entry : content) {
      if (bucketPath.equals(entry.getPath())) {
        entryFound=true;
        break;
      }
    }
    if (!entryFound) {
      fail("Cannot find entry " + bucketName + " in directory "+ S3_BASE_URI);
    }
    try {
      final FileStatus directoryFileStatus=fs.getFileStatus(bucketPath);
      assertTrue(directoryFileStatus.isDir());
    }
 catch (    FileNotFoundException e) {
      fail(e.getMessage());
    }
    fs.delete(bucketPath,true);
    try {
      fs.getFileStatus(bucketPath);
      fail("Expected FileNotFoundException for " + bucketPath.toUri());
    }
 catch (    FileNotFoundException e) {
    }
  }
 catch (  IOException ioe) {
    fail(ioe.getMessage());
  }
}
