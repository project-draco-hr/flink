{
  try {
    final CollectingOutput<Integer> out=new CollectingOutput<>();
    final StreamingRuntimeContext mockContext=mock(StreamingRuntimeContext.class);
    when(mockContext.getTaskName()).thenReturn("Test task name");
    ReduceFunction<Integer> failingFunction=new FailingFunction(100);
    AggregatingProcessingTimeWindowOperator<Integer,Integer> op=new AggregatingProcessingTimeWindowOperator<>(failingFunction,identitySelector,200,50);
    op.setup(out,mockContext);
    op.open(new Configuration());
    try {
      long nextWindowTime=op.getNextEvaluationTime();
      int val=0;
      for (int num=0; num < Integer.MAX_VALUE; num++) {
        op.processElement(new StreamRecord<Integer>(val++));
        Thread.sleep(1);
        if (op.getNextEvaluationTime() != nextWindowTime) {
          nextWindowTime=op.getNextEvaluationTime();
          val=0;
        }
      }
      fail("This should really have failed with an exception quite a while ago...");
    }
 catch (    Exception e) {
      assertNotNull(e.getCause());
      assertTrue(e.getCause().getMessage().contains("Artificial Test Exception"));
    }
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
