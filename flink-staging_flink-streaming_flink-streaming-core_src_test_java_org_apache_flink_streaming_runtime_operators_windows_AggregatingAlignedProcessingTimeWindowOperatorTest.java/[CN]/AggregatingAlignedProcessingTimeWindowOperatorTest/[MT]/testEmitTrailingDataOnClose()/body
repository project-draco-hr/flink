{
  try {
    final CollectingOutput<Integer> out=new CollectingOutput<>();
    final StreamingRuntimeContext mockContext=mock(StreamingRuntimeContext.class);
    when(mockContext.getTaskName()).thenReturn("Test task name");
    final long oneYear=365L * 24 * 60* 60* 1000;
    AggregatingProcessingTimeWindowOperator<Integer,Integer> op=new AggregatingProcessingTimeWindowOperator<>(sumFunction,identitySelector,oneYear,oneYear);
    op.setup(out,mockContext);
    op.open(new Configuration());
    List<Integer> data=Arrays.asList(1,2,3,4,5,6,7,8,9,10);
    for (    Integer i : data) {
      op.processElement(new StreamRecord<Integer>(i));
    }
    op.close();
    op.dispose();
    List<Integer> result=out.getElements();
    Collections.sort(result);
    assertEquals(data,result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
