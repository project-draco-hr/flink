{
  checkArgument(dataPort > 0 || dataPort == -1,"dataPort must be > 0, or -1 (local)");
  this.resourceID=checkNotNull(resourceID);
  this.inetAddress=checkNotNull(inetAddress);
  this.dataPort=dataPort;
  String fqdnHostName;
  try {
    fqdnHostName=this.inetAddress.getCanonicalHostName();
  }
 catch (  Throwable t) {
    LOG.warn("Unable to determine the canonical hostname. Input split assignment (such as " + "for HDFS files) may be non-local when the canonical hostname is missing.");
    LOG.debug("getCanonicalHostName() Exception:",t);
    fqdnHostName=this.inetAddress.getHostAddress();
  }
  this.fqdnHostName=fqdnHostName;
  if (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {
    this.hostName=this.fqdnHostName;
    LOG.warn("No hostname could be resolved for the IP address {}, using IP address as host name. " + "Local input split assignment (such as for HDFS files) may be impacted.",this.inetAddress.getHostAddress());
  }
 else {
    this.hostName=NetUtils.getHostnameFromFQDN(this.fqdnHostName);
  }
  this.stringRepresentation=String.format("%s @ %s (dataPort=%d)",resourceID,fqdnHostName,dataPort);
}
