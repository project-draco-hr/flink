{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setDegreeOfParallelism(1);
  DataSet<Tuple1<Long>> pipelinedSource=env.fromElements(new Tuple1<Long>(1l));
  DataSet<Tuple1<Long>> slowBlockingSource=env.generateSequence(0,10).map(new MapFunction<Long,Tuple1<Long>>(){
    @Override public Tuple1<Long> map(    Long value) throws Exception {
      Thread.sleep(200);
      return new Tuple1<Long>(value);
    }
  }
);
  slowBlockingSource.join(slowBlockingSource).where(0).equalTo(0).output(new DiscardingOutputFormat<Tuple2<Tuple1<Long>,Tuple1<Long>>>());
  pipelinedSource.join(slowBlockingSource).where(0).equalTo(0).output(new DiscardingOutputFormat<Tuple2<Tuple1<Long>,Tuple1<Long>>>());
  env.execute("Consume one pipelined and one blocking result test job");
}
