{
  ParameterTool params=ParameterTool.fromArgs(args);
  System.out.println("Usage: PageRankBasic --pages <path> --links <path> --output <path> --numPages <n> --iterations <n>");
  final int numPages=params.getInt("numPages",PageRankData.getNumberOfPages());
  final int maxIterations=params.getInt("iterations",10);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().setGlobalJobParameters(params);
  DataSet<Long> pagesInput=getPagesDataSet(env,params);
  DataSet<Tuple2<Long,Long>> linksInput=getLinksDataSet(env,params);
  DataSet<Tuple2<Long,Double>> pagesWithRanks=pagesInput.map(new RankAssigner((1.0d / numPages)));
  DataSet<Tuple2<Long,Long[]>> adjacencyListInput=linksInput.groupBy(0).reduceGroup(new BuildOutgoingEdgeList());
  IterativeDataSet<Tuple2<Long,Double>> iteration=pagesWithRanks.iterate(maxIterations);
  DataSet<Tuple2<Long,Double>> newRanks=iteration.join(adjacencyListInput).where(0).equalTo(0).flatMap(new JoinVertexWithEdgesMatch()).groupBy(0).aggregate(SUM,1).map(new Dampener(DAMPENING_FACTOR,numPages));
  DataSet<Tuple2<Long,Double>> finalPageRanks=iteration.closeWith(newRanks,newRanks.join(iteration).where(0).equalTo(0).filter(new EpsilonFilter()));
  if (params.has("output")) {
    finalPageRanks.writeAsCsv(params.get("output"),"\n"," ");
    env.execute("Basic Page Rank Example");
  }
 else {
    System.out.println("Printing result to stdout. Use --output to specify output path.");
    finalPageRanks.print();
  }
}
