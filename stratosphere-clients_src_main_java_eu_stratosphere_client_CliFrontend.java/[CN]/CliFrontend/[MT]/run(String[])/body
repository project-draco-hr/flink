{
  CommandLine line;
  try {
    line=parser.parse(RUN_OPTIONS,args,false);
    evaluateGeneralOptions(line);
  }
 catch (  MissingOptionException e) {
    System.out.println(e.getMessage());
    printHelpForRun();
    return 1;
  }
catch (  UnrecognizedOptionException e) {
    System.out.println(e.getMessage());
    printHelpForRun();
    return 2;
  }
catch (  Exception e) {
    return handleError(e);
  }
  if (printHelp) {
    printHelpForRun();
    return 0;
  }
  PackagedProgram program;
{
    String[] programArgs=line.hasOption(ARGS_OPTION.getOpt()) ? line.getOptionValues(ARGS_OPTION.getOpt()) : line.getArgs();
    String jarFilePath=null;
    if (line.hasOption(JAR_OPTION.getOpt())) {
      jarFilePath=line.getOptionValue(JAR_OPTION.getOpt());
    }
 else     if (programArgs.length > 0) {
      jarFilePath=programArgs[0];
      programArgs=Arrays.copyOfRange(programArgs,1,programArgs.length);
    }
 else {
      System.out.println("Error: Jar file is not set.");
      printHelpForRun();
      return 1;
    }
    File jarFile=new File(jarFilePath);
    if (!jarFile.exists()) {
      System.out.println("Error: Jar file does not exist.");
      printHelpForRun();
      return 1;
    }
 else     if (!jarFile.isFile()) {
      System.out.println("Error: Jar file is not a file.");
      printHelpForRun();
      return 1;
    }
    String entryPointClass=line.hasOption(CLASS_OPTION.getOpt()) ? line.getOptionValue(CLASS_OPTION.getOpt()) : null;
    try {
      program=entryPointClass == null ? new PackagedProgram(jarFile,programArgs) : new PackagedProgram(jarFile,entryPointClass,programArgs);
    }
 catch (    ProgramInvocationException e) {
      return handleError(e);
    }
  }
  Client client;
  String webFrontendAddress;
{
    Configuration configuration=getConfiguration();
    if (line.hasOption(ADDRESS_OPTION.getOpt())) {
      try {
        String address=line.getOptionValue(ADDRESS_OPTION.getOpt());
        InetSocketAddress jobManagerAddress=RemoteExecutor.getInetFromHostport(address);
        configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,jobManagerAddress.getAddress().getHostAddress());
        configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,jobManagerAddress.getPort());
      }
 catch (      Exception e) {
        System.out.println("Error: The JobManager address has an invalid format. " + e.getMessage());
        printHelpForRun();
        return 1;
      }
      webFrontendAddress=null;
    }
 else {
      String loc=getConfigurationDirectory();
      File jmAddressFile=new File(loc + '/' + JOBMANAGER_ADDRESS_FILE);
      if (jmAddressFile.exists()) {
        try {
          String address=FileUtils.readFileToString(jmAddressFile).trim();
          System.out.println("Found a " + JOBMANAGER_ADDRESS_FILE + " file, using \""+ address+ "\" to connect to the JobManager");
          InetSocketAddress jobManagerAddress=RemoteExecutor.getInetFromHostport(address);
          configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,jobManagerAddress.getAddress().getHostAddress());
          configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,jobManagerAddress.getPort());
        }
 catch (        Exception e) {
          System.out.println("Found a " + JOBMANAGER_ADDRESS_FILE + " file, but could not read the JobManager address from the file. "+ e.getMessage());
          printHelpForRun();
          return 1;
        }
        webFrontendAddress=null;
      }
 else {
        String jobManagerAddress=configuration.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null);
        if (jobManagerAddress == null) {
          System.out.println("Error: Found no configuration in the config directory '" + getConfigurationDirectory() + "' that specifies the JobManager address.");
          printHelpForRun();
          return 1;
        }
        if (configuration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,-1) == -1) {
          System.out.println("Error: Found no configuration in the config directory '" + getConfigurationDirectory() + "' that specifies the JobManager port.");
          printHelpForRun();
          return 1;
        }
        webFrontendAddress=jobManagerAddress + ':' + configuration.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT);
      }
    }
    client=new Client(configuration);
    client.setPrintStatusDuringExecution(true);
  }
  boolean wait=line.hasOption(WAIT_OPTION.getOpt());
  int parallelism=-1;
  if (line.hasOption(PARALLELISM_OPTION.getOpt())) {
    String parString=line.getOptionValue(PARALLELISM_OPTION.getOpt());
    try {
      parallelism=Integer.parseInt(parString);
    }
 catch (    NumberFormatException e) {
      System.out.println("The value " + parString + " is invalid for the degree of parallelism.");
      printHelpForRun();
      return 1;
    }
    if (parallelism <= 0) {
      System.out.println("Invalid value for the degree-of-parallelism. Parallelism must be greater than zero.");
      printHelpForRun();
      return 1;
    }
  }
  return executeProgram(program,client,parallelism,wait,webFrontendAddress);
}
