{
  CommandLine line;
  try {
    line=parser.parse(RUN_OPTIONS,args,false);
    evaluateGeneralOptions(line);
  }
 catch (  MissingOptionException e) {
    System.out.println(e.getMessage());
    printHelpForRun();
    return 1;
  }
catch (  UnrecognizedOptionException e) {
    System.out.println(e.getMessage());
    printHelpForRun();
    return 2;
  }
catch (  Exception e) {
    return handleError(e);
  }
  if (printHelp) {
    printHelpForRun();
    return 0;
  }
  File jarFile=null;
  String entryPointClass=null;
  String[] programArgs=null;
  String address=null;
  boolean wait=false;
  if (line.hasOption(ADDRESS_OPTION.getOpt())) {
    address=line.getOptionValue(ADDRESS_OPTION.getOpt());
  }
  if (line.hasOption(JAR_OPTION.getOpt())) {
    String jarFilePath=line.getOptionValue(JAR_OPTION.getOpt());
    jarFile=new File(jarFilePath);
    if (!jarFile.exists()) {
      System.out.println("Error: Jar file does not exist.");
      printHelpForRun();
      return 1;
    }
 else     if (!jarFile.isFile()) {
      System.out.println("Error: Jar file is not a file.");
      printHelpForRun();
      return 1;
    }
  }
 else {
    System.out.println("Error: Jar file is not set.");
    printHelpForRun();
    return 1;
  }
  if (line.hasOption(CLASS_OPTION.getOpt())) {
    entryPointClass=line.getOptionValue(CLASS_OPTION.getOpt());
  }
  if (line.hasOption(ARGS_OPTION.getOpt())) {
    programArgs=line.getOptionValues(ARGS_OPTION.getOpt());
  }
 else {
    programArgs=line.getArgs();
  }
  String loc=getConfigurationDirectory();
  File jmAddressFile=new File(loc + "/" + JOBMANAGER_ADDRESS_FILE);
  if (jmAddressFile.exists()) {
    try {
      address=FileUtils.readFileToString(jmAddressFile).trim();
      System.out.println("Found a " + JOBMANAGER_ADDRESS_FILE + " file, using \""+ address+ "\" to connect to the JobManager");
    }
 catch (    IOException e) {
    }
  }
  wait=line.hasOption(WAIT_OPTION.getOpt());
  PackagedProgram program;
  try {
    if (entryPointClass == null) {
      program=new PackagedProgram(jarFile,programArgs);
    }
 else {
      program=new PackagedProgram(jarFile,entryPointClass,programArgs);
    }
  }
 catch (  ProgramInvocationException e) {
    return handleError(e);
  }
  Configuration configuration=getConfiguration();
  Client client;
  InetSocketAddress socket=null;
  if (address != null && !address.isEmpty()) {
    socket=RemoteExecutor.getInetFromHostport(address);
    client=new Client(socket,configuration);
  }
 else {
    client=new Client(configuration);
  }
  client.setPrintStatusDuringExecution(true);
  JobExecutionResult execResult;
  try {
    execResult=client.run(program,wait);
  }
 catch (  ProgramInvocationException e) {
    return handleError(e);
  }
 finally {
    program.deleteExtractedLibraries();
  }
  if (wait && execResult != null) {
    System.out.println("Job Runtime: " + execResult.getNetRuntime());
    Map<String,Object> accumulatorsResult=execResult.getAllAccumulatorResults();
    if (accumulatorsResult.size() > 0) {
      System.out.println("Accumulator Results: ");
      System.out.println(AccumulatorHelper.getResultsFormated(accumulatorsResult));
    }
  }
 else {
    if (address != null && !address.isEmpty()) {
      System.out.println("Job successfully submitted. Use -w (or --wait) option to track the progress here.\n" + "JobManager web interface: http://" + socket.getHostName() + ":"+ configuration.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT));
    }
 else {
      System.out.println("Job successfully submitted. Use -w (or --wait) option to track the progress here.\n" + "JobManager web interface: http://" + configuration.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null) + ":"+ configuration.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT));
    }
  }
  return 0;
}
