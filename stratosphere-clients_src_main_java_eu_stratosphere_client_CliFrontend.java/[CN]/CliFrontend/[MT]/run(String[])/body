{
  File jarFile=null;
  String assemblerClass=null;
  String[] programArgs=null;
  String address=null;
  boolean wait=false;
  CommandLine line=null;
  try {
    line=parser.parse(this.options.get(ACTION_RUN),args,false);
  }
 catch (  Exception e) {
    handleError(e);
  }
  if (line.hasOption(ADDRESS_OPTION.getOpt())) {
    address=line.getOptionValue(ADDRESS_OPTION.getOpt());
  }
  if (line.hasOption(JAR_OPTION.getOpt())) {
    String jarFilePath=line.getOptionValue(JAR_OPTION.getOpt());
    jarFile=new File(jarFilePath);
    if (!jarFile.exists()) {
      System.err.println("Error: Jar file does not exist.");
      printHelp();
      System.exit(1);
    }
 else     if (!jarFile.isFile()) {
      System.err.println("Error: Jar file is not a file.");
      printHelp();
      System.exit(1);
    }
  }
 else {
    System.err.println("Error: Jar file is not set.");
    printHelp();
    System.exit(1);
  }
  if (line.hasOption(CLASS_OPTION.getOpt())) {
    assemblerClass=line.getOptionValue(CLASS_OPTION.getOpt());
  }
  if (line.hasOption(ARGS_OPTION.getOpt())) {
    programArgs=line.getOptionValues(ARGS_OPTION.getOpt());
  }
  String loc=getConfigurationDirectory();
  File jmAddressFile=new File(loc + "/.yarn-jobmanager");
  if (jmAddressFile.exists()) {
    try {
      address=FileUtils.readFileToString(jmAddressFile).trim();
      System.out.println("Found a .yarn-jobmanager file, using \"" + address + "\" to connect to the JobManager");
    }
 catch (    IOException e) {
    }
  }
  wait=line.hasOption(WAIT_OPTION.getOpt());
  PackagedProgram program=null;
  try {
    if (assemblerClass == null) {
      program=new PackagedProgram(jarFile,programArgs);
    }
 else {
      program=new PackagedProgram(jarFile,assemblerClass,programArgs);
    }
  }
 catch (  ProgramInvocationException e) {
    handleError(e);
  }
  Configuration configuration=getConfiguration();
  Client client;
  InetSocketAddress socket=null;
  if (address != null && !address.isEmpty()) {
    socket=RemoteExecutor.getInetFromHostport(address);
    client=new Client(socket,configuration);
  }
 else {
    client=new Client(configuration);
  }
  client.setPrintStatusDuringExecution(true);
  JobExecutionResult execResult=null;
  try {
    execResult=client.run(program.getPlanWithJars(),wait);
  }
 catch (  ProgramInvocationException e) {
    handleError(e);
  }
catch (  JobInstantiationException e) {
    handleError(e);
  }
catch (  IOException e) {
    handleError(e);
  }
 finally {
    program.deleteExtractedLibraries();
  }
  if (wait) {
    System.out.println("Job Runtime: " + execResult.getNetRuntime());
    Map<String,Object> accumulatorsResult=execResult.getAllAccumulatorResults();
    if (accumulatorsResult.size() > 0) {
      System.out.println("Accumulator Results: ");
      System.out.println(AccumulatorHelper.getResultsFormated(accumulatorsResult));
    }
  }
 else {
    if (address != null && !address.isEmpty()) {
      System.out.println("Job successfully submitted. Use -w (or --wait) option to track the progress here.\n" + "JobManager web interface: http://" + socket.getHostName() + ":"+ configuration.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT));
    }
 else {
      System.out.println("Job successfully submitted. Use -w (or --wait) option to track the progress here.\n" + "JobManager web interface: http://" + configuration.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null) + ":"+ configuration.getInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT));
    }
  }
}
