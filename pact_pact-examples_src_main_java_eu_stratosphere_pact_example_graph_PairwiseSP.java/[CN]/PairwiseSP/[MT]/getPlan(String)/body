{
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String paths=(args.length > 1 ? args[1] : "");
  String output=(args.length > 2 ? args[2] : "");
  boolean rdfInput=(args.length > 3 ? Boolean.parseBoolean(args[3]) : false);
  FileDataSource pathsInput;
  if (rdfInput) {
    pathsInput=new FileDataSource(RDFTripleInFormat.class,paths);
  }
 else {
    pathsInput=new FileDataSource(PathInFormat.class,paths);
  }
  pathsInput.setDegreeOfParallelism(noSubTasks);
  MapContract pathStarts=new MapContract(ProjectPathStart.class,"Project Starts");
  pathStarts.setDegreeOfParallelism(noSubTasks);
  MapContract pathEnds=new MapContract(ProjectPathEnd.class,"Project Ends");
  pathEnds.setDegreeOfParallelism(noSubTasks);
  MatchContract concatPaths=new MatchContract(ConcatPaths.class,PactString.class,0,0,"Concat Paths");
  concatPaths.setDegreeOfParallelism(noSubTasks);
  CoGroupContract findShortestPaths=new CoGroupContract(FindShortestPath.class,Edge.class,0,0,"Find Shortest Paths");
  findShortestPaths.setDegreeOfParallelism(noSubTasks);
  FileDataSink result=new FileDataSink(PathOutFormat.class,output);
  result.setDegreeOfParallelism(noSubTasks);
  result.setInput(findShortestPaths);
  findShortestPaths.setFirstInput(pathsInput);
  findShortestPaths.setSecondInput(concatPaths);
  concatPaths.setFirstInput(pathStarts);
  pathStarts.setInput(pathsInput);
  concatPaths.setSecondInput(pathEnds);
  pathEnds.setInput(pathsInput);
  return new Plan(result,"Pairwise Shortest Paths");
}
