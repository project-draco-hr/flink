{
  int minLength=Integer.MAX_VALUE;
  List<Path> shortestPaths=new ArrayList<Path>();
  while (inputPaths.hasNext()) {
    Path value=inputPaths.next();
    LOG.debug("Process: [" + key + ","+ value+ "]");
    if (value.getLength() == minLength) {
      shortestPaths.add(value);
    }
 else     if (value.getLength() < minLength) {
      minLength=value.getLength();
      shortestPaths.clear();
      shortestPaths.add(value);
    }
  }
  while (concatPaths.hasNext()) {
    Path value=concatPaths.next();
    LOG.debug("Process: [" + key + ","+ value+ "]");
    if (value.getLength() == minLength) {
      shortestPaths.add(value);
    }
 else     if (value.getLength() < minLength) {
      minLength=value.getLength();
      shortestPaths.clear();
      shortestPaths.add(value);
    }
  }
  for (  Path shortestPath : shortestPaths) {
    LOG.debug("Emit: [" + key + ","+ shortestPath+ "]");
    out.collect(new PactNull(),shortestPath);
  }
}
