{
  int minLength=Integer.MAX_VALUE;
  List<Path> shortestPaths=new ArrayList<Path>();
  Edge key=null;
  while (inputRecords.hasNext()) {
    PactRecord inputRecord=inputRecords.next();
    if (key == null) {
      key=inputRecord.getField(0,Edge.class);
    }
    Path value=inputRecord.getField(1,Path.class);
    LOG.debug("Process: [" + key + ","+ value+ "]");
    if (value.getLength() == minLength) {
      shortestPaths.add(value);
    }
 else     if (value.getLength() < minLength) {
      minLength=value.getLength();
      shortestPaths.clear();
      shortestPaths.add(value);
    }
  }
  while (concatRecords.hasNext()) {
    PactRecord concatRecord=concatRecords.next();
    if (key == null) {
      key=concatRecord.getField(0,Edge.class);
    }
    Path value=concatRecord.getField(1,Path.class);
    LOG.debug("Process: [" + key + ","+ value+ "]");
    if (value.getLength() == minLength) {
      shortestPaths.add(value);
    }
 else     if (value.getLength() < minLength) {
      minLength=value.getLength();
      shortestPaths.clear();
      shortestPaths.add(value);
    }
  }
  for (  Path shortestPath : shortestPaths) {
    LOG.debug("Emit: [" + key + ","+ shortestPath+ "]");
    outputRecord.setField(0,shortestPath);
    out.collect(outputRecord);
  }
}
