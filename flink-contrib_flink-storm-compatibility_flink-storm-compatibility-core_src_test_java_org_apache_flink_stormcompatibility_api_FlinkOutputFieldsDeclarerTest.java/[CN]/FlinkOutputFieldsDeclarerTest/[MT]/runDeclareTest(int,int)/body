{
  final FlinkOutputFieldsDeclarer declarer=new FlinkOutputFieldsDeclarer();
  final String[] attributes=new String[numberOfAttributes];
  for (int i=0; i < numberOfAttributes; ++i) {
    attributes[i]="a" + i;
  }
switch (testCase) {
case 0:
    this.declareSimple(declarer,attributes);
  break;
case 1:
this.declareNonDirect(declarer,attributes);
break;
case 2:
this.declareDefaultStream(declarer,attributes);
break;
default :
this.declareFull(declarer,attributes);
}
final TypeInformation<?> type=declarer.getOutputType();
if (numberOfAttributes == 0) {
Assert.assertNull(type);
}
 else {
Assert.assertEquals(numberOfAttributes,type.getArity());
if (numberOfAttributes == 1) {
Assert.assertFalse(type.isTupleType());
}
 else {
Assert.assertTrue(type.isTupleType());
}
}
}
