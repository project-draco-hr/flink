{
  final int SINKS=5;
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(DEFAULT_PARALLELISM);
    DataSet<Long> source=env.generateSequence(1,10000);
    DataSet<Long> mappedA=source.map(new IdentityMapper<Long>());
    DataSet<Long> mappedC=source.map(new IdentityMapper<Long>());
    for (int sink=0; sink < SINKS; sink++) {
      mappedA.output(new DiscardingOutputFormat<Long>());
      mappedC.output(new DiscardingOutputFormat<Long>());
    }
    Plan plan=env.createProgramPlan("Plans With Multiple Data Sinks");
    OptimizedPlan oPlan=compileNoStats(plan);
    new JobGraphGenerator().compileJobGraph(oPlan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
