{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(DEFAULT_PARALLELISM);
  DataSet<Tuple2<Long,Long>> source=env.generateSequence(0,1).map(new Duplicator<Long>());
  DataSet<Tuple2<Long,Long>> map=source.map(new IdentityMapper<Tuple2<Long,Long>>());
  DataSet<Tuple2<Long,Long>> reduce=source.reduceGroup(new IdentityGroupReducer<Tuple2<Long,Long>>());
  DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> loop=source.iterateDelta(map,10,0);
  DataSet<Tuple2<Long,Long>> workset=loop.getWorkset().join(reduce).where(0).equalTo(0).with(new IdentityJoiner<Tuple2<Long,Long>>()).name("Next work set");
  DataSet<Tuple2<Long,Long>> delta=loop.getSolutionSet().join(workset).where(0).equalTo(0).with(new IdentityJoiner<Tuple2<Long,Long>>()).name("Solution set delta");
  DataSet<Tuple2<Long,Long>> result=loop.closeWith(delta,workset);
  result.output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
  Plan plan=env.createProgramPlan();
  try {
    compileNoStats(plan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
