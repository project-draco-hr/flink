{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setDegreeOfParallelism(DEFAULT_PARALLELISM);
    DataSet<Tuple2<Long,Long>> source=env.generateSequence(1,10000000).map(new Duplicator<Long>());
    DataSet<Tuple2<Long,Long>> joined1=source.join(source).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> joined2=source.join(joined1).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> joined3=source.join(joined2).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> joined4=source.join(joined3).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> joined5=source.join(joined4).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> mapped=source.map(new MapFunction<Tuple2<Long,Long>,Tuple2<Long,Long>>(){
      @Override public Tuple2<Long,Long> map(      Tuple2<Long,Long> value){
        return null;
      }
    }
);
    DataSet<Tuple2<Long,Long>> joined6=mapped.join(mapped).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> joined7=mapped.join(joined6).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> joined8=mapped.join(joined7).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> joined9=mapped.join(joined8).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    DataSet<Tuple2<Long,Long>> joined10=mapped.join(joined9).where(0).equalTo(0).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    joined5.coGroup(joined10).where(1).equalTo(1).with(new DummyCoGroupFunction<Tuple2<Long,Long>,Tuple2<Long,Long>>()).output(new DiscardingOutputFormat<Tuple2<Tuple2<Long,Long>,Tuple2<Long,Long>>>());
    Plan plan=env.createProgramPlan();
    OptimizedPlan oPlan=compileNoStats(plan);
    new JobGraphGenerator().compileJobGraph(oPlan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
