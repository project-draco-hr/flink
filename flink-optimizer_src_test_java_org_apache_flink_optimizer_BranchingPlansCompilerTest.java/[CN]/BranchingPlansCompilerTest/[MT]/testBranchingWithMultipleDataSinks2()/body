{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(DEFAULT_PARALLELISM);
    DataSet<Long> source=env.generateSequence(1,10000);
    DataSet<Long> mappedA=source.map(new IdentityMapper<Long>());
    DataSet<Long> mappedB=mappedA.map(new IdentityMapper<Long>());
    DataSet<Long> mappedC=mappedA.map(new IdentityMapper<Long>());
    mappedB.output(new DiscardingOutputFormat<Long>());
    mappedC.output(new DiscardingOutputFormat<Long>());
    mappedC.output(new DiscardingOutputFormat<Long>());
    Plan plan=env.createProgramPlan();
    Set<Operator<?>> sinks=new HashSet<Operator<?>>(plan.getDataSinks());
    OptimizedPlan oPlan=compileNoStats(plan);
    assertEquals("Wrong number of data sinks.",3,oPlan.getDataSinks().size());
    for (    SinkPlanNode sink : oPlan.getDataSinks()) {
      assertTrue(sinks.remove(sink.getProgramOperator()));
    }
    assertTrue(sinks.isEmpty());
    new JobGraphGenerator().compileJobGraph(oPlan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
