{
  try {
    String outPath1="/tmp/out1";
    String outPath2="/tmp/out2";
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(DEFAULT_PARALLELISM);
    DataSet<Long> source1=env.generateSequence(0,1);
    source1.writeAsText(outPath1);
    source1.writeAsText(outPath2);
    Plan plan=env.createProgramPlan();
    OptimizedPlan oPlan=compileNoStats(plan);
    Assert.assertEquals("Wrong number of data sinks.",2,oPlan.getDataSinks().size());
    Set<String> allSinks=new HashSet<String>();
    allSinks.add(outPath1);
    allSinks.add(outPath2);
    for (    SinkPlanNode n : oPlan.getDataSinks()) {
      String path=((TextOutputFormat<String>)n.getSinkNode().getOperator().getFormatWrapper().getUserCodeObject()).getOutputFilePath().toString();
      Assert.assertTrue("Invalid data sink.",allSinks.remove(path));
    }
    JobGraphGenerator jobGen=new JobGraphGenerator();
    jobGen.compileJobGraph(oPlan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
