{
  IOManagerAsync ioMan=new IOManagerAsync();
  try {
    final int NUM_BLOCKS=100;
    final MemorySegment seg=new MemorySegment(new byte[32 * 1024]);
    final AtomicInteger callbackCounter=new AtomicInteger();
    final AtomicBoolean exceptionOccurred=new AtomicBoolean();
    final RequestDoneCallback callback=new RequestDoneCallback(){
      @Override public void requestSuccessful(      MemorySegment buffer){
        callbackCounter.set(callbackCounter.get() + 1);
        if (buffer != seg) {
          exceptionOccurred.set(true);
        }
      }
      @Override public void requestFailed(      MemorySegment buffer,      IOException e){
        exceptionOccurred.set(true);
      }
    }
;
    BlockChannelWriterWithCallback writer=ioMan.createBlockChannelWriter(ioMan.createChannel(),callback);
    try {
      for (int i=0; i < NUM_BLOCKS; i++) {
        writer.writeBlock(seg);
      }
      writer.close();
      assertEquals(NUM_BLOCKS,callbackCounter.get());
      assertFalse(exceptionOccurred.get());
    }
  finally {
      writer.closeAndDelete();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    ioMan.shutdown();
  }
}
