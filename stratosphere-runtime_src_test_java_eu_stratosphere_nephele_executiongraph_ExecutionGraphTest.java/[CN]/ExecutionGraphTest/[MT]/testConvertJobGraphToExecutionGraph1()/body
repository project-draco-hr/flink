{
  File inputFile=null;
  JobID jobID=null;
  try {
    inputFile=ServerTestUtils.createInputFile(0);
    final JobGraph jg=new JobGraph("Job Graph 1");
    jobID=jg.getJobID();
    final JobInputVertex i1=new JobInputVertex("Input 1",jg);
    i1.setNumberOfSubtasks(1);
    i1.setInvokableClass(DataSourceTask.class);
    TextInputFormat inputFormat=new TextInputFormat(new Path(inputFile.toURI()));
    i1.setInputFormat(inputFormat);
    final JobTaskVertex t1=new JobTaskVertex("Task 1",jg);
    t1.setInvokableClass(ForwardTask1Input1Output.class);
    final JobOutputVertex o1=new JobOutputVertex("Output 1",jg);
    o1.setNumberOfSubtasks(1);
    o1.setInvokableClass(DataSinkTask.class);
    o1.setOutputFormat(new DiscardingOuputFormat<Object>());
    o1.setVertexToShareInstancesWith(i1);
    i1.setVertexToShareInstancesWith(t1);
    i1.connectTo(t1);
    t1.connectTo(o1);
    LibraryCacheManager.register(jobID,new String[0]);
    final ExecutionGraph eg=new ExecutionGraph(jg,1);
    final ExecutionStage executionStage=eg.getCurrentExecutionStage();
    assertEquals(1,executionStage.getMaxNumberSubtasks());
    assertEquals(jobID,eg.getJobID());
    assertEquals(0,eg.getIndexOfCurrentExecutionStage());
    assertEquals(1,eg.getNumberOfInputVertices());
    assertEquals(1,eg.getNumberOfOutputVertices());
    assertEquals(1,eg.getNumberOfStages());
    assertNotNull(eg.getInputVertex(0));
    assertNull(eg.getInputVertex(1));
    assertNotNull(eg.getOutputVertex(0));
    assertNull(eg.getOutputVertex(1));
    assertNotNull(eg.getStage(0));
    assertNull(eg.getStage(1));
    ExecutionStage es=eg.getStage(0);
    assertEquals(3,es.getNumberOfStageMembers());
    assertEquals(0,es.getStageNumber());
    assertNotNull(es.getStageMember(0));
    assertNotNull(es.getStageMember(1));
    assertNotNull(es.getStageMember(2));
    assertNull(es.getStageMember(3));
    ExecutionGroupVertex egv0=null;
    ExecutionGroupVertex egv1=null;
    ExecutionGroupVertex egv2=null;
    if (es.getStageMember(0).getName().equals("Input 1")) {
      egv0=es.getStageMember(0);
    }
 else     if (es.getStageMember(0).getName().equals("Output 1")) {
      egv1=es.getStageMember(0);
    }
 else {
      egv2=es.getStageMember(0);
    }
    if (es.getStageMember(1).getName().equals("Input 1")) {
      egv0=es.getStageMember(1);
    }
 else     if (es.getStageMember(1).getName().equals("Output 1")) {
      egv1=es.getStageMember(1);
    }
 else {
      egv2=es.getStageMember(1);
    }
    if (es.getStageMember(2).getName().equals("Input 1")) {
      egv0=es.getStageMember(2);
    }
 else     if (es.getStageMember(2).getName().equals("Output 1")) {
      egv1=es.getStageMember(2);
    }
 else {
      egv2=es.getStageMember(2);
    }
    assertNull(egv0.getBackwardEdge(0));
    assertNotNull(egv0.getConfiguration());
    assertEquals(1,egv0.getCurrentNumberOfGroupMembers());
    assertNotNull(egv0.getExecutionSignature());
    assertEquals(es,egv0.getExecutionStage());
    assertNotNull(egv0.getForwardEdge(0));
    assertNull(egv0.getForwardEdge(1));
    assertNotNull(egv0.getForwardEdges(egv2));
    assertNotNull(egv0.getGroupMember(0));
    assertNull(egv0.getGroupMember(1));
    assertEquals(1,egv0.getInputSplits().length);
    assertEquals("Input 1",egv0.getName());
    assertEquals(0,egv0.getNumberOfBackwardLinks());
    assertEquals(1,egv0.getNumberOfForwardLinks());
    assertEquals(0,egv0.getStageNumber());
    assertEquals(1,egv0.getUserDefinedNumberOfMembers());
    assertEquals("Task 1",egv0.getVertexToShareInstancesWith().getName());
    assertNotNull(egv1.getBackwardEdge(0));
    assertNull(egv1.getBackwardEdge(1));
    assertNotNull(egv1.getBackwardEdges(egv2));
    assertNotNull(egv1.getConfiguration());
    assertEquals(1,egv1.getCurrentNumberOfGroupMembers());
    assertNotNull(egv1.getExecutionSignature());
    assertEquals(es,egv1.getExecutionStage());
    assertNull(egv1.getForwardEdge(0));
    assertNotNull(egv1.getGroupMember(0));
    assertNull(egv1.getGroupMember(1));
    assertEquals("Output 1",egv1.getName());
    assertEquals(1,egv1.getNumberOfBackwardLinks());
    assertEquals(0,egv1.getNumberOfForwardLinks());
    assertEquals(0,egv1.getStageNumber());
    assertEquals(1,egv1.getUserDefinedNumberOfMembers());
    assertEquals("Input 1",egv1.getVertexToShareInstancesWith().getName());
    assertNotNull(egv2.getBackwardEdge(0));
    assertNull(egv2.getBackwardEdge(1));
    assertNotNull(egv2.getBackwardEdges(egv0));
    assertNotNull(egv2.getConfiguration());
    assertEquals(1,egv2.getCurrentNumberOfGroupMembers());
    assertNotNull(egv2.getExecutionSignature());
    assertEquals(es,egv2.getExecutionStage());
    assertNotNull(egv2.getForwardEdge(0));
    assertNull(egv2.getForwardEdge(1));
    assertNotNull(egv2.getForwardEdges(egv1));
    assertNotNull(egv2.getGroupMember(0));
    assertNull(egv2.getGroupMember(1));
    assertEquals("Task 1",egv2.getName());
    assertEquals(1,egv2.getNumberOfBackwardLinks());
    assertEquals(1,egv2.getNumberOfForwardLinks());
    assertEquals(0,egv2.getStageNumber());
    assertEquals(1,egv2.getUserDefinedNumberOfMembers());
    assertNull(egv2.getVertexToShareInstancesWith());
    ExecutionVertex ev0=egv0.getGroupMember(0);
    ExecutionVertex ev1=egv1.getGroupMember(0);
    ExecutionVertex ev2=egv2.getGroupMember(0);
    assertEquals(egv0,ev0.getGroupVertex());
    assertNotNull(ev0.getID());
    assertEquals("Input 1",ev0.getName());
    assertEquals(egv1,ev1.getGroupVertex());
    assertNotNull(ev1.getID());
    assertEquals("Output 1",ev1.getName());
    assertEquals(egv2,ev2.getGroupVertex());
    assertNotNull(ev2.getID());
    assertEquals("Task 1",ev2.getName());
    assertEquals(ev0.getAllocatedResource(),ev1.getAllocatedResource());
    assertEquals(ev0.getAllocatedResource(),ev2.getAllocatedResource());
    assertEquals(ChannelType.NETWORK,eg.getChannelType(ev0,ev2));
    assertEquals(ChannelType.NETWORK,eg.getChannelType(ev2,ev1));
  }
 catch (  GraphConversionException e) {
    fail(e.getMessage());
  }
catch (  JobGraphDefinitionException e) {
    fail(e.getMessage());
  }
catch (  IOException e) {
    fail(e.getMessage());
  }
 finally {
    if (inputFile != null) {
      inputFile.delete();
    }
    if (jobID != null) {
      try {
        LibraryCacheManager.unregister(jobID);
      }
 catch (      IOException e) {
      }
    }
  }
}
