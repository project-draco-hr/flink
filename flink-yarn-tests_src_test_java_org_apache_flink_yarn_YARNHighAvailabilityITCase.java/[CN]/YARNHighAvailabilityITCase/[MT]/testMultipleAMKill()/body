{
  final int numberKillingAttempts=numberApplicationAttempts - 1;
  TestingYarnClusterDescriptor flinkYarnClient=new TestingYarnClusterDescriptor();
  Assert.assertNotNull("unable to get yarn client",flinkYarnClient);
  flinkYarnClient.setTaskManagerCount(1);
  flinkYarnClient.setJobManagerMemory(768);
  flinkYarnClient.setTaskManagerMemory(1024);
  flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()));
  flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()));
  String confDirPath=System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR);
  flinkYarnClient.setConfigurationDirectory(confDirPath);
  String fsStateHandlePath=temp.getRoot().getPath();
  File configDirectory=new File(confDirPath);
  GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath());
  flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration());
  flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" + zkServer.getConnectString() + "@@yarn.application-attempts="+ numberApplicationAttempts+ "@@"+ ConfigConstants.STATE_BACKEND+ "=FILESYSTEM"+ "@@"+ FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY+ "="+ fsStateHandlePath+ "/checkpoints"+ "@@"+ ConfigConstants.HA_ZOOKEEPER_STORAGE_PATH+ "="+ fsStateHandlePath+ "/recovery");
  flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"));
  ClusterClient yarnCluster=null;
  final FiniteDuration timeout=new FiniteDuration(2,TimeUnit.MINUTES);
  try {
    yarnCluster=flinkYarnClient.deploy();
    final Configuration config=yarnCluster.getFlinkConfiguration();
    new JavaTestKit(actorSystem){
{
        for (int attempt=0; attempt < numberKillingAttempts; attempt++) {
          new Within(timeout){
            @Override protected void run(){
              try {
                LeaderRetrievalService lrs=LeaderRetrievalUtils.createLeaderRetrievalService(config);
                ActorGateway gateway=LeaderRetrievalUtils.retrieveLeaderGateway(lrs,actorSystem,timeout);
                ActorGateway selfGateway=new AkkaActorGateway(getRef(),gateway.leaderSessionID());
                gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1),selfGateway);
                expectMsgEquals(Messages.getAcknowledge());
                gateway.tell(PoisonPill.getInstance());
              }
 catch (              Exception e) {
                throw new AssertionError("Could not complete test.",e);
              }
            }
          }
;
        }
        new Within(timeout){
          @Override protected void run(){
            try {
              LeaderRetrievalService lrs=LeaderRetrievalUtils.createLeaderRetrievalService(config);
              ActorGateway gateway2=LeaderRetrievalUtils.retrieveLeaderGateway(lrs,actorSystem,timeout);
              ActorGateway selfGateway=new AkkaActorGateway(getRef(),gateway2.leaderSessionID());
              gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1),selfGateway);
              expectMsgEquals(Messages.getAcknowledge());
            }
 catch (            Exception e) {
              throw new AssertionError("Could not complete test.",e);
            }
          }
        }
;
      }
    }
;
  }
  finally {
    if (yarnCluster != null) {
      yarnCluster.shutdown();
    }
  }
}
