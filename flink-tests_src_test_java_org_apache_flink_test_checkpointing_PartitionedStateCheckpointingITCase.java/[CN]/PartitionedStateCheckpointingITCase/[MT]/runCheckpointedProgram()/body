{
  final long NUM_STRINGS=10000000L;
  assertTrue("Broken test setup",(NUM_STRINGS / 2) % 40 == 0);
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getJobManagerRPCPort());
    env.setParallelism(PARALLELISM);
    env.enableCheckpointing(500);
    env.getConfig().disableSysoutLogging();
    DataStream<Integer> stream1=env.addSource(new IntGeneratingSourceFunction(NUM_STRINGS / 2));
    DataStream<Integer> stream2=env.addSource(new IntGeneratingSourceFunction(NUM_STRINGS / 2));
    stream1.union(stream2).groupBy(new IdentityKeySelector<Integer>()).map(new OnceFailingPartitionedSum(NUM_STRINGS)).keyBy(0).addSink(new CounterSink());
    env.execute();
    for (    Entry<Integer,Long> sum : OnceFailingPartitionedSum.allSums.entrySet()) {
      assertEquals(new Long(sum.getKey() * NUM_STRINGS / 40),sum.getValue());
    }
    System.out.println("new");
    for (    Long count : CounterSink.allCounts.values()) {
      assertEquals(new Long(NUM_STRINGS / 40),count);
    }
    assertEquals(40,CounterSink.allCounts.size());
    assertEquals(40,OnceFailingPartitionedSum.allSums.size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
