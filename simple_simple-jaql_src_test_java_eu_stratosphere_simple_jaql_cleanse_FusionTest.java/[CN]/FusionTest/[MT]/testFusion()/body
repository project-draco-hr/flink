{
  SopremoPlan actualPlan=parseScript("using cleansing;" + "$personCluster = read 'personCluster.json';" + "abbr = fn(str, prefix) str + prefix;"+ "MergeAddresses = javaudf('eu.stratosphere.simple.jaql.CleansOperatorTest.mergeAddresses');"+ "$fusedPersons = fuse $personCluster"+ "	into { "+ "		id: generateId('person'),"+ "		lastName: [vote(abbr), longest],"+ "		firstName: [vote(abbr), first],"+ "		addresses: MergeAddresses,"+ "		originalRecords: $[*].id"+ "	};"+ "write $fusedPersons to hdfs('fusedPersons.json');");
  SopremoPlan expectedPlan=new SopremoPlan();
  Source input=new Source("input.json");
  Selection selection=new Selection().withCondition(new OrExpression(new UnaryExpression(JsonUtil.createPath("$","mgr")),new ComparativeExpression(JsonUtil.createPath("$","income"),BinaryOperator.GREATER,new ConstantExpression(30000)))).withInputs(input);
  Sink output=new Sink("fusedPersons.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
