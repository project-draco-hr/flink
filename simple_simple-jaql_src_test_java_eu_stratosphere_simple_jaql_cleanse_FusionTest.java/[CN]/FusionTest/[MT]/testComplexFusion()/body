{
  final SopremoPlan actualPlan=this.parseScript("using cleansing;\n" + "$personCluster = read 'personCluster.json';\n" + "abbr = fn(str, prefix) str + prefix;\n"+ "MergeAddresses = javaudf('eu.stratosphere.simple.jaql.cleanse.FusionTest.mergeAddresses');\n"+ "$fusedPersons = fuse [$member, $sponsor] in $personCluster\n"+ "	with weights { \n"+ "		$member: 0.99,\n"+ "		$sponsor: 0.99 * {\n"+ "			addresses: 0.7\n"+ "		}\n"+ "	}\n"+ "	into { \n"+ "		id: generateId('person'),\n"+ "		lastName: [vote(abbr), longest],\n"+ "		firstName: [vote(abbr), first],\n"+ "		addresses: MergeAddresses,\n"+ "		originalRecords: $[*].id\n"+ "	}\n"+ "	update {\n"+ "		$.relative[*].id: $.id,\n"+ "	};\n"+ "write $fusedPersons to hdfs('fusedPersons.json');");
  final SopremoPlan expectedPlan=new SopremoPlan();
  final Source personCluster=new Source("personCluster.json");
  final Fusion fusion=new Fusion().withInputs(personCluster);
  fusion.addFusionRule(new MethodCall("generateId",new ConstantExpression("person")),new ObjectAccess("id"));
  fusion.addFusionRule(new BeliefResolution(new MethodCall("abbr",EvaluationExpression.VALUE)),new ObjectAccess("lastName"));
  fusion.addFusionRule(new MethodCall("longest",EvaluationExpression.VALUE),new ObjectAccess("lastName"));
  fusion.addFusionRule(new BeliefResolution(new MethodCall("abbr",EvaluationExpression.VALUE)),new ObjectAccess("firstName"));
  fusion.addFusionRule(new MethodCall("first",EvaluationExpression.VALUE),new ObjectAccess("firstName"));
  fusion.addFusionRule(new MethodCall("MergeAddresses",EvaluationExpression.VALUE),new ObjectAccess("addresses"));
  fusion.addFusionRule(new ArrayProjection(new ObjectAccess("id")),new ObjectAccess("originalRecords"));
  fusion.addUpdateRule(JsonUtil.createPath("0","id"),new PathExpression(new JsonStreamExpression(fusion),new ObjectAccess("relative"),new ArrayProjection(new ObjectAccess("id"))));
  fusion.setWeight(0.99,0,new PathExpression());
  fusion.setWeight(0.99,1,new PathExpression());
  fusion.setWeight(0.7,1,new PathExpression(new ObjectAccess("addresses")));
  final Sink fusedPersons=new Sink("fusedPersons.json").withInputs(fusion);
  expectedPlan.setSinks(fusedPersons);
  assertEquals(expectedPlan,actualPlan);
}
