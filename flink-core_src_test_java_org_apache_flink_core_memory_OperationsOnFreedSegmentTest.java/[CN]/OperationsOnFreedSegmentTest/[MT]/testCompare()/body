{
  try {
    MemorySegment aliveHeap=new HeapMemorySegment(new byte[PAGE_SIZE]);
    MemorySegment aliveHybridHeap=new HybridMemorySegment(new byte[PAGE_SIZE]);
    MemorySegment aliveHybridOffHeap=new HybridMemorySegment(ByteBuffer.allocateDirect(PAGE_SIZE));
    MemorySegment freedHeap=new HeapMemorySegment(new byte[PAGE_SIZE]);
    MemorySegment freedHybridHeap=new HybridMemorySegment(new byte[PAGE_SIZE]);
    MemorySegment freedHybridOffHeap=new HybridMemorySegment(ByteBuffer.allocateDirect(PAGE_SIZE));
    freedHeap.free();
    freedHybridHeap.free();
    freedHybridOffHeap.free();
    MemorySegment[] alive={aliveHeap,aliveHybridHeap,aliveHybridOffHeap};
    MemorySegment[] free={freedHeap,freedHybridHeap,freedHybridOffHeap};
    for (    MemorySegment seg1 : alive) {
      for (      MemorySegment seg2 : free) {
        testCompare(seg1,seg2);
      }
    }
    for (    MemorySegment seg1 : free) {
      for (      MemorySegment seg2 : alive) {
        testCompare(seg1,seg2);
      }
    }
    for (    MemorySegment seg1 : free) {
      for (      MemorySegment seg2 : free) {
        testCompare(seg1,seg2);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
