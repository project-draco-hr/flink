{
  ExecutionEnvironment env=input.getContext();
  DataSet<Edge<Long,NullValue>> edges=input.getEdges().map(new OrderEdges()).distinct();
  Graph<Long,TreeMap<Long,Integer>,NullValue> graph=Graph.fromDataSet(edges,new VertexInitializer(),env);
  DataSet<Tuple2<Long,TreeMap<Long,Integer>>> higherIdNeighbors=graph.reduceOnNeighbors(new GatherHigherIdNeighbors(),EdgeDirection.IN);
  Graph<Long,TreeMap<Long,Integer>,NullValue> graphWithReinitializedVertexValues=graph.mapVertices(new VertexInitializerEmptyTreeMap());
  DataSet<Vertex<Long,TreeMap<Long,Integer>>> verticesWithHigherIdNeighbors=graphWithReinitializedVertexValues.joinWithVertices(higherIdNeighbors,new AttachValues()).getVertices();
  Graph<Long,TreeMap<Long,Integer>,NullValue> graphWithNeighbors=Graph.fromDataSet(verticesWithHigherIdNeighbors,edges,env);
  DataSet<Tuple2<Long,TreeMap<Long,Integer>>> propagatedValues=graphWithNeighbors.reduceOnNeighbors(new GatherHigherIdNeighbors(),EdgeDirection.IN);
  DataSet<Vertex<Long,TreeMap<Long,Integer>>> verticesWithPropagatedValues=graphWithReinitializedVertexValues.joinWithVertices(propagatedValues,new AttachValues()).getVertices();
  Graph<Long,TreeMap<Long,Integer>,NullValue> graphWithPropagatedNeighbors=Graph.fromDataSet(verticesWithPropagatedValues,graphWithNeighbors.getEdges(),env);
  DataSet<Tuple1<Integer>> numberOfTriangles=graphWithPropagatedNeighbors.getTriplets().map(new ComputeTriangles()).reduce(new ReduceFunction<Tuple1<Integer>>(){
    @Override public Tuple1<Integer> reduce(    Tuple1<Integer> firstTuple,    Tuple1<Integer> secondTuple) throws Exception {
      return new Tuple1<Integer>(firstTuple.f0 + secondTuple.f0);
    }
  }
);
  return numberOfTriangles;
}
