{
  ExecutionEnvironment env=input.getContext();
  DataSet<Edge<K,NullValue>> edges=input.getEdges().map(new OrderEdges<K,EV>()).distinct();
  Graph<K,TreeMap<K,Integer>,NullValue> graph=Graph.fromDataSet(edges,new VertexInitializer<K>(),env);
  DataSet<Tuple2<K,TreeMap<K,Integer>>> higherIdNeighbors=graph.reduceOnNeighbors(new GatherHigherIdNeighbors<K>(),EdgeDirection.IN);
  Graph<K,TreeMap<K,Integer>,NullValue> graphWithReinitializedVertexValues=graph.mapVertices(new VertexInitializerEmptyTreeMap<K>());
  DataSet<Vertex<K,TreeMap<K,Integer>>> verticesWithHigherIdNeighbors=graphWithReinitializedVertexValues.joinWithVertices(higherIdNeighbors,new AttachValues<K>()).getVertices();
  Graph<K,TreeMap<K,Integer>,NullValue> graphWithNeighbors=Graph.fromDataSet(verticesWithHigherIdNeighbors,edges,env);
  DataSet<Tuple2<K,TreeMap<K,Integer>>> propagatedValues=graphWithNeighbors.reduceOnNeighbors(new GatherHigherIdNeighbors<K>(),EdgeDirection.IN);
  DataSet<Vertex<K,TreeMap<K,Integer>>> verticesWithPropagatedValues=graphWithReinitializedVertexValues.joinWithVertices(propagatedValues,new AttachValues<K>()).getVertices();
  Graph<K,TreeMap<K,Integer>,NullValue> graphWithPropagatedNeighbors=Graph.fromDataSet(verticesWithPropagatedValues,graphWithNeighbors.getEdges(),env);
  DataSet<Integer> numberOfTriangles=graphWithPropagatedNeighbors.getTriplets().map(new ComputeTriangles<K>()).reduce(new ReduceFunction<Integer>(){
    @Override public Integer reduce(    Integer first,    Integer second) throws Exception {
      return first + second;
    }
  }
);
  return numberOfTriangles;
}
