{
  TypeInformationSerializationSchema<Tuple2<Long,Integer>> sourceSchema=new TypeInformationSerializationSchema<>(inputTypeInfo,env.getConfig());
  FlinkKafkaConsumerBase<Tuple2<Long,Integer>> source=kafkaServer.getConsumer(topics,sourceSchema,standardProps).assignTimestampsAndWatermarks(new TestPunctuatedTSExtractor());
  DataStreamSource<Tuple2<Long,Integer>> consuming=env.setParallelism(1).addSource(source);
  return consuming.transform("testingWatermarkOperator",inputTypeInfo,new WMTestingOperator()).addSink(new RichSinkFunction<Tuple2<Long,Integer>>(){
    private int elementCount=0;
    @Override public void invoke(    Tuple2<Long,Integer> value) throws Exception {
      elementCount++;
      if (elementCount == totalElementsToExpect) {
        throw new SuccessException();
      }
    }
    @Override public void close() throws Exception {
      super.close();
    }
  }
);
}
