{
  final int NUM_TOPICS=5;
  final int NUM_ELEMENTS=20;
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flinkPort);
  env.getConfig().disableSysoutLogging();
  final List<String> topics=new ArrayList<>();
  for (int i=0; i < NUM_TOPICS; i++) {
    final String topic="topic-" + i;
    topics.add(topic);
    createTestTopic(topic,i + 1,1);
  }
  DataStream<Tuple3<Integer,Integer,String>> stream=env.addSource(new RichParallelSourceFunction<Tuple3<Integer,Integer,String>>(){
    @Override public void run(    SourceContext<Tuple3<Integer,Integer,String>> ctx) throws Exception {
      int partition=getRuntimeContext().getIndexOfThisSubtask();
      for (int topicId=0; topicId < NUM_TOPICS; topicId++) {
        for (int i=0; i < NUM_ELEMENTS; i++) {
          ctx.collect(new Tuple3<>(partition,i,"topic-" + topicId));
        }
      }
    }
    @Override public void cancel(){
    }
  }
);
  Tuple2WithTopicSchema schema=new Tuple2WithTopicSchema(env.getConfig());
  Properties props=new Properties();
  props.putAll(standardProps);
  props.putAll(secureProps);
  stream.addSink(kafkaServer.getProducer("dummy",schema,props,null));
  env.execute("Write to topics");
  env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flinkPort);
  env.getConfig().disableSysoutLogging();
  stream=env.addSource(kafkaServer.getConsumer(topics,schema,props));
  stream.flatMap(new FlatMapFunction<Tuple3<Integer,Integer,String>,Integer>(){
    Map<String,Integer> countPerTopic=new HashMap<>(NUM_TOPICS);
    @Override public void flatMap(    Tuple3<Integer,Integer,String> value,    Collector<Integer> out) throws Exception {
      Integer count=countPerTopic.get(value.f2);
      if (count == null) {
        count=1;
      }
 else {
        count++;
      }
      countPerTopic.put(value.f2,count);
      for (      Map.Entry<String,Integer> el : countPerTopic.entrySet()) {
        if (el.getValue() < NUM_ELEMENTS) {
          break;
        }
        if (el.getValue() > NUM_ELEMENTS) {
          throw new RuntimeException("There is a failure in the test. I've read " + el.getValue() + " from topic "+ el.getKey());
        }
      }
      throw new SuccessException();
    }
  }
).setParallelism(1);
  tryExecute(env,"Count elements from the topics");
  for (int i=0; i < NUM_TOPICS; i++) {
    final String topic="topic-" + i;
    deleteTestTopic(topic);
  }
}
