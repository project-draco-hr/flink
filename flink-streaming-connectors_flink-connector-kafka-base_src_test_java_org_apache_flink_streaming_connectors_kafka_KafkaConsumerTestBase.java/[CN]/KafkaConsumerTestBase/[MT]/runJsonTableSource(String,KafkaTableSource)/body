{
  final ObjectMapper mapper=new ObjectMapper();
  final int numElements=1024;
  final long[] longs=new long[numElements];
  final String[] strings=new String[numElements];
  final boolean[] booleans=new boolean[numElements];
  final double[] doubles=new double[numElements];
  final byte[][] serializedJson=new byte[numElements][];
  ThreadLocalRandom random=ThreadLocalRandom.current();
  for (int i=0; i < numElements; i++) {
    longs[i]=random.nextLong();
    strings[i]=Integer.toHexString(random.nextInt());
    booleans[i]=random.nextBoolean();
    doubles[i]=random.nextDouble();
    ObjectNode entry=mapper.createObjectNode();
    entry.put("long",longs[i]);
    entry.put("string",strings[i]);
    entry.put("boolean",booleans[i]);
    entry.put("double",doubles[i]);
    serializedJson[i]=mapper.writeValueAsBytes(entry);
  }
  createTestTopic(topic,1,1);
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flinkPort);
  env.getConfig().disableSysoutLogging();
  env.addSource(new SourceFunction<byte[]>(){
    @Override public void run(    SourceContext<byte[]> ctx) throws Exception {
      for (int i=0; i < numElements; i++) {
        ctx.collect(serializedJson[i]);
      }
    }
    @Override public void cancel(){
    }
  }
).addSink(kafkaServer.getProducer(topic,new ByteArraySerializationSchema(),standardProps,null));
  env.execute();
  StreamTableEnvironment tableEnvironment=StreamTableEnvironment.getTableEnvironment(env);
  tableEnvironment.registerTableSource("kafka",kafkaTableSource);
  Table result=tableEnvironment.ingest("kafka");
  tableEnvironment.toDataStream(result,Row.class).addSink(new SinkFunction<Row>(){
    int i=0;
    @Override public void invoke(    Row value) throws Exception {
      assertEquals(5,value.productArity());
      assertEquals(longs[i],value.productElement(0));
      assertEquals(strings[i],value.productElement(1));
      assertEquals(booleans[i],value.productElement(2));
      assertEquals(doubles[i],value.productElement(3));
      assertNull(value.productElement(4));
      if (i == numElements - 1) {
        throw new SuccessException();
      }
 else {
        i++;
      }
    }
  }
);
  tryExecutePropagateExceptions(env,"KafkaTableSource");
}
