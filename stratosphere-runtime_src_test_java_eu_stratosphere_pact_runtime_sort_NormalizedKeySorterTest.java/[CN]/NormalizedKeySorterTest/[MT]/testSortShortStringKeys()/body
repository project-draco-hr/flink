{
  final int numSegments=MEMORY_SIZE / MEMORY_PAGE_SIZE;
  final List<MemorySegment> memory=this.memoryManager.allocatePages(new DummyInvokable(),numSegments);
  @SuppressWarnings("unchecked") RecordComparator accessors=new RecordComparator(new int[]{1},new Class[]{Value.class});
  NormalizedKeySorter<Record> sorter=new NormalizedKeySorter<Record>(RecordSerializer.get(),accessors,memory);
  TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,5,KeyMode.RANDOM,ValueMode.FIX_LENGTH);
  Record record=new Record();
  do {
    generator.next(record);
  }
 while (sorter.write(record));
  QuickSort qs=new QuickSort();
  qs.sort(sorter);
  MutableObjectIterator<Record> iter=sorter.getIterator();
  Record readTarget=new Record();
  Value current=new Value();
  Value last=new Value();
  iter.next(readTarget);
  readTarget.getFieldInto(1,last);
  while ((readTarget=iter.next(readTarget)) != null) {
    readTarget.getFieldInto(1,current);
    final int cmp=last.compareTo(current);
    if (cmp > 0) {
      Assert.fail("Next value is not larger or equal to previous value.");
    }
    Value tmp=current;
    current=last;
    last=tmp;
  }
  this.memoryManager.release(sorter.dispose());
}
