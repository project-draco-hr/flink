{
  final int NUM_ELEMENTS=20;
  final int PARALLELISM=2;
  final String outPath=hdfsURI + "/string-non-rolling-out";
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(PARALLELISM);
  DataStream<Tuple2<Integer,String>> source=env.addSource(new TestSourceFunction(NUM_ELEMENTS)).broadcast().filter(new OddEvenFilter());
  RollingSink<String> sink=new RollingSink<String>(outPath).setBucketer(new NonRollingBucketer()).setPartPrefix("part").setPendingPrefix("").setPendingSuffix("");
  source.map(new MapFunction<Tuple2<Integer,String>,String>(){
    private static final long serialVersionUID=1L;
    @Override public String map(    Tuple2<Integer,String> value) throws Exception {
      return value.f1;
    }
  }
).addSink(sink);
  env.execute("RollingSink String Write Test");
  FSDataInputStream inStream=dfs.open(new Path(outPath + "/part-0-0"));
  BufferedReader br=new BufferedReader(new InputStreamReader(inStream));
  for (int i=0; i < NUM_ELEMENTS; i+=2) {
    String line=br.readLine();
    Assert.assertEquals("message #" + i,line);
  }
  inStream.close();
  inStream=dfs.open(new Path(outPath + "/part-1-0"));
  br=new BufferedReader(new InputStreamReader(inStream));
  for (int i=1; i < NUM_ELEMENTS; i+=2) {
    String line=br.readLine();
    Assert.assertEquals("message #" + i,line);
  }
  inStream.close();
}
