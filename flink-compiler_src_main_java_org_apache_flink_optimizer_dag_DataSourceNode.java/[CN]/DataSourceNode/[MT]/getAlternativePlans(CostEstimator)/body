{
  if (this.cachedPlans != null) {
    return this.cachedPlans;
  }
  SourcePlanNode candidate=new SourcePlanNode(this,"DataSource (" + this.getOperator().getName() + ")",this.gprops,this.lprops);
  if (!replicatedInput) {
    candidate.updatePropertiesWithUniqueSets(getUniqueFields());
    final Costs costs=new Costs();
    if (FileInputFormat.class.isAssignableFrom(getOperator().getFormatWrapper().getUserCodeClass()) && this.estimatedOutputSize >= 0) {
      estimator.addFileInputCost(this.estimatedOutputSize,costs);
    }
    candidate.setCosts(costs);
  }
 else {
    final Costs costs=new Costs();
    InputFormat<?,?> inputFormat=((ReplicatingInputFormat<?,?>)getOperator().getFormatWrapper().getUserCodeObject()).getReplicatedInputFormat();
    if (FileInputFormat.class.isAssignableFrom(inputFormat.getClass()) && this.estimatedOutputSize >= 0) {
      estimator.addFileInputCost(this.estimatedOutputSize * this.getParallelism(),costs);
    }
    candidate.setCosts(costs);
  }
  List<PlanNode> plans=new ArrayList<PlanNode>(1);
  plans.add(candidate);
  this.cachedPlans=plans;
  return plans;
}
