{
  List<List<Path>> onPaths=new ArrayList<List<Path>>();
  for (int index=0; index < expr.numBindings(); index++) {
    Expr onExpr=expr.onExpr(index);
    ArrayList<Path> onPath=new ArrayList<Path>();
    if (onExpr instanceof ArrayExpr)     for (int i=0; i < onExpr.numChildren(); i++)     onPath.add((Path)OperatorParser.this.queryParser.parsePath(onExpr.child(i)));
 else     onPath.add((Path)OperatorParser.this.queryParser.parsePath(onExpr));
    for (    Path path : onPath)     path.getFragments().remove(1);
    onPaths.add(onPath);
  }
  List<BooleanExpression> expressions=new ArrayList<BooleanExpression>();
  for (int index=0; index < onPaths.get(0).size(); index++)   expressions.add(new Comparison(onPaths.get(0).get(index),BinaryOperator.EQUAL,onPaths.get(1).get(index)));
  return Condition.valueOf(expressions,Combination.AND);
}
