{
  try {
{
      String[] parameters={"-v","-l","-a","some","program","arguments"};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      int retCode=testFrontend.run(parameters);
      assertTrue(retCode == 2);
    }
{
      String[] arguments={"-j","/some/none/existing/path","-a","plenty","of","arguments"};
      TestingCliFrontend frontend=new TestingCliFrontend();
      int returnCode=frontend.run(arguments);
      assertTrue(returnCode != 0);
    }
{
      String[] arguments={"-j",getNonJarFilePath(),"-a","plenty","of","arguments"};
      TestingCliFrontend frontend=new TestingCliFrontend();
      int returnCode=frontend.run(arguments);
      assertTrue(returnCode != 0);
    }
{
      String[] parameters={"-v","-j",getTestJarPath(),"-a","some","program","arguments"};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      testFrontend.expectedArguments=new String[]{"some","program","arguments"};
      testFrontend.expectedMainClass=TEST_JAR_MAIN_CLASS;
      assertEquals(0,testFrontend.run(parameters));
    }
{
      String[] parameters={"-v","-j",getTestJarPath(),"some","program","arguments"};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      testFrontend.expectedArguments=new String[]{"some","program","arguments"};
      testFrontend.expectedMainClass=TEST_JAR_MAIN_CLASS;
      assertEquals(0,testFrontend.run(parameters));
    }
{
      String[] parameters={"-v",getTestJarPath(),"some","program","arguments"};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      testFrontend.expectedArguments=new String[]{"some","program","arguments"};
      testFrontend.expectedMainClass=TEST_JAR_MAIN_CLASS;
      assertEquals(0,testFrontend.run(parameters));
    }
{
      String[] parameters={"-v"};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      assertTrue(0 != testFrontend.run(parameters));
    }
{
      String[] parameters={"-v","/some/none/existing/path","some","program","arguments"};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      assertTrue(0 != testFrontend.run(parameters));
    }
{
      String[] parameters={"-v","/some/none/existing/path","some","program","arguments"};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      assertTrue(0 != testFrontend.run(parameters));
    }
{
      String[] parameters={"-v","-p","42",getTestJarPath()};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      testFrontend.expectedArguments=new String[0];
      testFrontend.expectedMainClass=TEST_JAR_MAIN_CLASS;
      testFrontend.expectedDop=42;
      assertEquals(0,testFrontend.run(parameters));
    }
{
      String[] parameters={"-v","-p","text",getTestJarPath()};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      assertTrue(0 != testFrontend.run(parameters));
    }
{
      String[] parameters={"-v","-p","475871387138",getTestJarPath()};
      TestingCliFrontend testFrontend=new TestingCliFrontend();
      assertTrue(0 != testFrontend.run(parameters));
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Program caused an exception: " + e.getMessage());
  }
}
