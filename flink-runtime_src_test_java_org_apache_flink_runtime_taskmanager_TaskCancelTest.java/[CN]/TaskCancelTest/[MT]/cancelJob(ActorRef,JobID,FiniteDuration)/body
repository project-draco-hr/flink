{
  checkNotNull(jobManager);
  checkNotNull(jobId);
  checkNotNull(timeout);
  Future<Object> ask=Patterns.ask(jobManager,new CancelJob(jobId),new Timeout(timeout));
  Object result=Await.result(ask,timeout);
  if (result instanceof CancellationSuccess) {
    CancellationSuccess success=(CancellationSuccess)result;
    if (!success.jobID().equals(jobId)) {
      throw new Exception("JobManager responded for wrong job ID. Request: " + jobId + ", response: "+ success.jobID()+ ".");
    }
  }
 else   if (result instanceof CancellationFailure) {
    CancellationFailure failure=(CancellationFailure)result;
    throw new Exception("Failed to cancel job with ID " + failure.jobID() + ".",failure.cause());
  }
 else {
    throw new Exception("Unexpected response to cancel request: " + result);
  }
}
