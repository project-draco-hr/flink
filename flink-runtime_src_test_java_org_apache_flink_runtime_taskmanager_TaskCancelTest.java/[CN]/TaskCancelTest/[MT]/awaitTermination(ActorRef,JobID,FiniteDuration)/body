{
  checkNotNull(jobManager);
  checkNotNull(jobId);
  checkNotNull(timeout);
  while (true) {
    Future<Object> ask=Patterns.ask(jobManager,new RequestJobStatus(jobId),new Timeout(timeout));
    Object result=Await.result(ask,timeout);
    if (result instanceof CurrentJobStatus) {
      CurrentJobStatus status=(CurrentJobStatus)result;
      if (!status.jobID().equals(jobId)) {
        throw new Exception("JobManager responded for wrong job ID. Request: " + jobId + ", response: "+ status.jobID()+ ".");
      }
      if (status.status().isTerminalState()) {
        return status.status();
      }
    }
 else     if (result instanceof JobNotFound) {
      throw new Exception("Cannot find job with ID " + jobId + ".");
    }
 else {
      throw new Exception("Unexpected response to cancel request: " + result);
    }
  }
}
