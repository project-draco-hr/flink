{
  try {
    final int numElements=1000000;
    List<MemorySegment> memory=getMemory(10000,32 * 1024);
    CompactingHashTable<Tuple2<Long,String>> table=new CompactingHashTable<Tuple2<Long,String>>(serializer,comparator,memory,10000);
    table.open();
    for (long i=0; i < numElements; i++) {
      table.insertOrReplaceRecord(new Tuple2<Long,String>(i,String.valueOf(i)));
    }
{
      BitSet bitSet=new BitSet(numElements);
      MutableObjectIterator<Tuple2<Long,String>> iter=table.getEntryIterator();
      Tuple2<Long,String> next;
      while ((next=iter.next()) != null) {
        assertNotNull(next.f0);
        assertNotNull(next.f1);
        assertEquals(next.f0.longValue(),Long.parseLong(next.f1));
        bitSet.set(next.f0.intValue());
      }
      assertEquals(numElements,bitSet.cardinality());
    }
{
      CompactingHashTable<Tuple2<Long,String>>.HashTableProber<Long> proper=table.getProber(probeComparator,pairComparator);
      for (long i=0; i < numElements; i++) {
        assertNotNull(proper.getMatchFor(i));
        assertNull(proper.getMatchFor(i + numElements));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
