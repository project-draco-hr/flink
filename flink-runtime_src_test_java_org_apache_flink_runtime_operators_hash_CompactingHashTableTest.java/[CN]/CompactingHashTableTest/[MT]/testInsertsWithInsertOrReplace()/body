{
  try {
    final int numElements=1000;
    final String longString=getLongString(10000);
    List<MemorySegment> memory=getMemory(1000,32 * 1024);
    CompactingHashTable<Tuple2<Long,String>> table=new CompactingHashTable<>(tuple2LongStringSerializer,tuple2LongStringComparator,memory,100);
    table.open();
    for (long i=0; i < numElements; i++) {
      table.insertOrReplaceRecord(Tuple2.of(i,longString));
    }
    for (long i=0; i < numElements; i++) {
      table.insertOrReplaceRecord(Tuple2.of(i,longString));
    }
    for (long i=0; i < numElements; i++) {
      table.insertOrReplaceRecord(Tuple2.of(i + numElements,longString));
    }
    CompactingHashTable<Tuple2<Long,String>>.HashTableProber<Tuple2<Long,String>> prober=table.getProber(tuple2LongStringComparator,new SameTypePairComparator<>(tuple2LongStringComparator));
    Tuple2<Long,String> reuse=new Tuple2<>();
    for (long i=0; i < numElements; i++) {
      assertNotNull(prober.getMatchFor(Tuple2.of(i,longString),reuse));
      assertNotNull(prober.getMatchFor(Tuple2.of(i + numElements,longString),reuse));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
