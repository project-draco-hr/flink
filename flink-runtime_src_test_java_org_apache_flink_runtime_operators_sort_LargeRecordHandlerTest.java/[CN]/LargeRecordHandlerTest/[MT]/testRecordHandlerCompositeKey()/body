{
  final IOManager ioMan=new IOManagerAsync();
  final int PAGE_SIZE=4 * 1024;
  final int NUM_PAGES=24;
  final int NUM_RECORDS=25000;
  try {
    final MemoryManager memMan=new MemoryManager(NUM_PAGES * PAGE_SIZE,1,PAGE_SIZE,MemoryType.HEAP,true);
    final AbstractInvokable owner=new DummyInvokable();
    final List<MemorySegment> initialMemory=memMan.allocatePages(owner,6);
    final List<MemorySegment> sortMemory=memMan.allocatePages(owner,NUM_PAGES - 6);
    final TupleTypeInfo<Tuple3<Long,String,Byte>> typeInfo=(TupleTypeInfo<Tuple3<Long,String,Byte>>)TypeInfoParser.<Tuple3<Long,String,Byte>>parse("Tuple3<Long, String, Byte>");
    final TypeSerializer<Tuple3<Long,String,Byte>> serializer=typeInfo.createSerializer(new ExecutionConfig());
    final TypeComparator<Tuple3<Long,String,Byte>> comparator=typeInfo.createComparator(new int[]{2,0},new boolean[]{true,true},0,new ExecutionConfig());
    LargeRecordHandler<Tuple3<Long,String,Byte>> handler=new LargeRecordHandler<Tuple3<Long,String,Byte>>(serializer,comparator,ioMan,memMan,initialMemory,owner,128);
    assertFalse(handler.hasData());
    Random rnd=new Random();
    for (int i=0; i < NUM_RECORDS; i++) {
      long val=rnd.nextLong();
      handler.addRecord(new Tuple3<Long,String,Byte>(val,String.valueOf(val),(byte)val));
      assertTrue(handler.hasData());
    }
    MutableObjectIterator<Tuple3<Long,String,Byte>> sorted=handler.finishWriteAndSortKeys(sortMemory);
    try {
      handler.addRecord(new Tuple3<Long,String,Byte>(92L,"peter pepper",(byte)1));
      fail("should throw an exception");
    }
 catch (    IllegalStateException e) {
    }
    Tuple3<Long,String,Byte> previous=null;
    Tuple3<Long,String,Byte> next;
    while ((next=sorted.next(null)) != null) {
      assertTrue(next.f0.equals(Long.parseLong(next.f1)));
      assertTrue(next.f0.byteValue() == next.f2);
      if (previous != null) {
        assertTrue(previous.f2 <= next.f2);
        assertTrue(previous.f2.byteValue() != next.f2.byteValue() || previous.f0 <= next.f0);
      }
      previous=next;
    }
    handler.close();
    assertFalse(handler.hasData());
    handler.close();
    try {
      handler.addRecord(new Tuple3<Long,String,Byte>(92L,"peter pepper",(byte)1));
      fail("should throw an exception");
    }
 catch (    IllegalStateException e) {
    }
    assertTrue(memMan.verifyEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    ioMan.shutdown();
  }
}
