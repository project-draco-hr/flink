{
  final IOManager ioMan=new IOManagerAsync();
  final int PAGE_SIZE=4 * 1024;
  final int NUM_PAGES=50;
  try {
    final DefaultMemoryManager memMan=new DefaultMemoryManager(NUM_PAGES * PAGE_SIZE,1,PAGE_SIZE);
    final AbstractInvokable owner=new DummyInvokable();
    final List<MemorySegment> memory=memMan.allocatePages(owner,NUM_PAGES);
    final TupleTypeInfo<Tuple2<Long,String>> typeInfo=(TupleTypeInfo<Tuple2<Long,String>>)TypeInfoParser.<Tuple2<Long,String>>parse("Tuple2<Long, String>");
    final TypeSerializer<Tuple2<Long,String>> serializer=typeInfo.createSerializer(new ExecutionConfig());
    final TypeComparator<Tuple2<Long,String>> comparator=typeInfo.createComparator(new int[]{0},new boolean[]{true},0,new ExecutionConfig());
    LargeRecordHandler<Tuple2<Long,String>> handler=new LargeRecordHandler<Tuple2<Long,String>>(serializer,comparator,ioMan,memMan,memory,owner,128);
    assertFalse(handler.hasData());
    handler.close();
    assertFalse(handler.hasData());
    handler.close();
    try {
      handler.addRecord(new Tuple2<Long,String>(92L,"peter pepper"));
      fail("should throw an exception");
    }
 catch (    IllegalStateException e) {
    }
    assertTrue(memMan.verifyEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    if (ioMan != null) {
      ioMan.shutdown();
    }
  }
}
