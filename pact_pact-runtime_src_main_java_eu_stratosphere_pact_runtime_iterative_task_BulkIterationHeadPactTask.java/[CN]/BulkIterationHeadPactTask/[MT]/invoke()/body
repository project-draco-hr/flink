{
  int numIterations=0;
  BlockingBackChannel backChannel=initBackChannel();
  final SuperstepBarrier barrier=new SuperstepBarrier();
  eventualOutputs.get(eventualOutputs.size() - 2).subscribeToEvent(barrier,AllWorkersDoneEvent.class);
  TypeSerializer serializer=getInputSerializer(ITERATION_INPUT);
  output=(Collector<OT>)iterationCollector();
  while (numIterations < 3) {
    log.info("Head: starting iteration [" + numIterations + "] ["+ System.currentTimeMillis()+ "]");
    if (numIterations > 0) {
      reinstantiateDriver();
    }
    barrier.setup();
    super.invoke();
    EndOfSuperstepEvent endOfSuperstepEvent=new EndOfSuperstepEvent();
    sendEventToAllIterationOutputs(endOfSuperstepEvent);
    DataInputView superStepResult=backChannel.getReadEndAfterSuperstepEnded();
    log.info("finishing iteration [" + numIterations + "] ["+ System.currentTimeMillis()+ "]");
    log.info("waiting for other workers in iteration [" + numIterations + "] ["+ System.currentTimeMillis()+ "]");
    sendEventToSync(endOfSuperstepEvent);
    barrier.waitForOtherWorkers();
    feedBackSuperstepResult(superStepResult,serializer);
    numIterations++;
  }
  sendEventToAllIterationOutputs(new TerminationEvent());
  sendEventToSync(new TerminationEvent());
  log.info("streaming out final result [" + numIterations + "] ["+ System.currentTimeMillis()+ "]");
  streamOutFinalOutput();
}
