@register(TypeType)
def save_type(pickler, obj):
    if (obj in _typemap):
        log.info(('T1: %s' % obj))
        pickler.save_reduce(_load_type, (_typemap[obj],), obj=obj)
    elif (obj.__module__ == '__main__'):
        try:
            [getattr(obj, attr) for attr in ('_fields', '_asdict', '_make', '_replace')]
            log.info(('T6: %s' % obj))
            StockPickler.save_global(pickler, obj)
            return
        except AttributeError:
            pass
        if (type(obj) == type):
            if (is_dill(pickler) and (not pickler._byref)):
                log.info(('T2: %s' % obj))
                _dict = _dict_from_dictproxy(obj.__dict__)
            else:
                log.info(('T5: %s' % obj))
                StockPickler.save_global(pickler, obj)
                return
        else:
            log.info(('T3: %s' % obj))
            _dict = obj.__dict__
        pickler.save_reduce(_create_type, (type(obj), obj.__name__, obj.__bases__, _dict), obj=obj)
    else:
        log.info(('T4: %s' % obj))
        StockPickler.save_global(pickler, obj)
    return
