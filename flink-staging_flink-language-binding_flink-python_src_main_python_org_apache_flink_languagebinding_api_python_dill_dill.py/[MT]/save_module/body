@register(ModuleType)
def save_module(pickler, obj):
    if False:
        if (obj.__name__ != 'dill'):
            try:
                changed = diff.whats_changed(obj, seen=pickler._diff_cache)[0]
            except RuntimeError:
                pass
            else:
                log.info(('M1: %s with diff' % obj))
                log.info('Diff: %s', changed.keys())
                pickler.save_reduce(_import_module, (obj.__name__,), obj=obj, state=changed)
                return
        log.info(('M2: %s' % obj))
        pickler.save_reduce(_import_module, (obj.__name__,), obj=obj)
    else:
        prefix = getattr(sys, 'base_prefix', sys.prefix)
        std_mod = getattr(obj, '__file__', prefix).startswith(prefix)
        if (((obj.__name__ not in ('builtins', 'dill')) and (not std_mod)) or (is_dill(pickler) and (obj is pickler._main_module))):
            log.info(('M1: %s' % obj))
            _main_dict = obj.__dict__.copy()
            [_main_dict.pop(item, None) for item in (singletontypes + ['__builtins__', '__loader__'])]
            pickler.save_reduce(_import_module, (obj.__name__,), obj=obj, state=_main_dict)
        else:
            log.info(('M2: %s' % obj))
            pickler.save_reduce(_import_module, (obj.__name__,), obj=obj)
        return
    return
