{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(8);
    DataSet<Tuple2<Long,Long>> verticesWithInitialId=env.fromElements(new Tuple2<Long,Long>(1L,2L));
    DataSet<Tuple2<Long,Long>> edges=env.fromElements(new Tuple2<Long,Long>(1L,2L));
    DataSet<Tuple2<Long,Long>> bulkResult=doBulkIteration(verticesWithInitialId,edges);
    DataSet<Tuple2<Long,Long>> mappedBulk=bulkResult.map(new DummyMap());
    DataSet<Tuple2<Long,Long>> depResult=doDeltaIteration(mappedBulk,edges);
    depResult.output(new DiscardingOutputFormat<Tuple2<Long,Long>>());
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    assertEquals(1,op.getDataSinks().size());
    assertTrue(op.getDataSinks().iterator().next().getInput().getSource() instanceof WorksetIterationPlanNode);
    WorksetIterationPlanNode wipn=(WorksetIterationPlanNode)op.getDataSinks().iterator().next().getInput().getSource();
    assertEquals(ShipStrategyType.PARTITION_HASH,wipn.getInput1().getShipStrategy());
    assertTrue(wipn.getInput2().getTempMode().breaksPipeline());
    new JobGraphGenerator().compileJobGraph(op);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
