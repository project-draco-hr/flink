{
  ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(DEFAULT_PARALLELISM);
  TupleTypeInfo<Tuple1<String>> typeInfo=TupleTypeInfo.getBasicTupleTypeInfo(String.class);
  ReplicatingInputFormat<Tuple1<String>,FileInputSplit> rif=new ReplicatingInputFormat<Tuple1<String>,FileInputSplit>(new TupleCsvInputFormat<Tuple1<String>>(new Path("/some/path"),typeInfo));
  DataSet<Tuple1<String>> source1=env.createInput(rif,new TupleTypeInfo<Tuple1<String>>(BasicTypeInfo.STRING_TYPE_INFO));
  DataSet<Tuple1<String>> source2=env.readCsvFile("/some/otherpath").types(String.class);
  DataSink<Tuple2<Tuple1<String>,Tuple1<String>>> out=source1.join(source2).where("*").equalTo("*").writeAsText("/some/newpath");
  JavaPlan plan=env.createProgramPlan();
  OptimizedPlan oPlan=compileNoStats(plan);
  SinkPlanNode sinkNode=oPlan.getDataSinks().iterator().next();
  DualInputPlanNode joinNode=(DualInputPlanNode)sinkNode.getPredecessor();
  ShipStrategyType joinIn1=joinNode.getInput1().getShipStrategy();
  ShipStrategyType joinIn2=joinNode.getInput2().getShipStrategy();
  Assert.assertEquals("Invalid ship strategy for an operator.",ShipStrategyType.FORWARD,joinIn1);
  Assert.assertEquals("Invalid ship strategy for an operator.",ShipStrategyType.FORWARD,joinIn2);
}
