{
  FileBaseStatistics stats=null;
  if (cachedStatistics != null && cachedStatistics instanceof FileBaseStatistics) {
    stats=(FileBaseStatistics)cachedStatistics;
  }
 else {
    stats=new FileBaseStatistics(-1,BaseStatistics.UNKNOWN,BaseStatistics.UNKNOWN);
  }
  try {
    final Path file=this.filePath;
    final URI uri=file.toUri();
    final FileSystem fs=FileSystem.get(uri);
    List<FileStatus> files=null;
{
      FileStatus status=fs.getFileStatus(file);
      if (status.isDir()) {
        FileStatus[] fss=fs.listStatus(file);
        files=new ArrayList<FileStatus>(fss.length);
        boolean unmodified=stats.getAverageRecordWidth() == (float)this.recordLength;
        for (        FileStatus s : fss) {
          if (!s.isDir()) {
            files.add(s);
            if (s.getModificationTime() > stats.getLastModificationTime()) {
              stats.setLastModificationTime(s.getModificationTime());
              unmodified=false;
            }
          }
        }
        if (unmodified) {
          return stats;
        }
      }
 else {
        long modTime=status.getModificationTime();
        if (stats.getLastModificationTime() == modTime) {
          return stats;
        }
        stats.setLastModificationTime(modTime);
        files=new ArrayList<FileStatus>(1);
        files.add(status);
      }
    }
    stats.setAverageRecordWidth(this.recordLength);
    long len=0;
    for (    FileStatus s : files) {
      len+=s.getLen();
    }
    stats.setTotalInputSize(len);
    if (stats.getTotalInputSize() <= 0) {
      stats.setLastModificationTime(BaseStatistics.UNKNOWN);
      return stats;
    }
  }
 catch (  IOException ioex) {
    if (LOG.isWarnEnabled())     LOG.warn("Could not determine complete statistics for file '" + filePath + "' due to an io error: "+ ioex.getMessage());
  }
catch (  Throwable t) {
    if (LOG.isErrorEnabled())     LOG.error("Unexpected problen while getting the file statistics for file '" + filePath + "': "+ t.getMessage(),t);
  }
  return stats;
}
