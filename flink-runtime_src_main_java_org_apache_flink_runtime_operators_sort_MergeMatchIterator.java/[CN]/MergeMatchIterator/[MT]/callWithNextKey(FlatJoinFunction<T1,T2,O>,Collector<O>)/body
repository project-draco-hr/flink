{
  if (!this.iterator1.nextKey() || !this.iterator2.nextKey()) {
    while (this.iterator1.nextKey())     ;
    while (this.iterator2.nextKey())     ;
    return false;
  }
  final TypePairComparator<T1,T2> comparator=this.comp;
  comparator.setReference(this.iterator1.getCurrent());
  T2 current2=this.iterator2.getCurrent();
  while (true) {
    final int comp=comparator.compareToReference(current2);
    if (comp == 0) {
      break;
    }
    if (comp < 0) {
      if (!this.iterator2.nextKey()) {
        return false;
      }
      current2=this.iterator2.getCurrent();
    }
 else {
      if (!this.iterator1.nextKey()) {
        return false;
      }
      comparator.setReference(this.iterator1.getCurrent());
    }
  }
  final ReusingKeyGroupedIterator<T1>.ValuesIterator values1=this.iterator1.getValues();
  final ReusingKeyGroupedIterator<T2>.ValuesIterator values2=this.iterator2.getValues();
  final T1 firstV1=values1.next();
  final T2 firstV2=values2.next();
  final boolean v1HasNext=values1.hasNext();
  final boolean v2HasNext=values2.hasNext();
  if (v1HasNext) {
    if (v2HasNext) {
      crossMwithNValues(firstV1,values1,firstV2,values2,matchFunction,collector);
    }
 else {
      crossSecond1withNValues(firstV2,firstV1,values1,matchFunction,collector);
    }
  }
 else {
    if (v2HasNext) {
      crossFirst1withNValues(firstV1,firstV2,values2,matchFunction,collector);
    }
 else {
      matchFunction.join(firstV1,firstV2,collector);
    }
  }
  return true;
}
