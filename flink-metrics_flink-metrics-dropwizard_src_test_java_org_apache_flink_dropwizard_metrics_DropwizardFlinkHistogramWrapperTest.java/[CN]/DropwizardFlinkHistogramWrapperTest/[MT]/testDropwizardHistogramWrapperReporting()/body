{
  long reportingInterval=1000;
  long timeout=30000;
  int size=10;
  String histogramMetricName="histogram";
  Configuration config=new Configuration();
  config.setString(ConfigConstants.METRICS_REPORTER_CLASS,TestingReporter.class.getName());
  config.setString(ConfigConstants.METRICS_REPORTER_INTERVAL,reportingInterval + " MILLISECONDS");
  MetricRegistry registry=null;
  try {
    registry=new MetricRegistry(config);
    DropwizardHistogramWrapper histogramWrapper=new DropwizardHistogramWrapper(new com.codahale.metrics.Histogram(new SlidingWindowReservoir(size)));
    TaskManagerMetricGroup metricGroup=new TaskManagerMetricGroup(registry,"localhost","tmId");
    metricGroup.histogram(histogramMetricName,histogramWrapper);
    String fullMetricName=metricGroup.getMetricIdentifier(histogramMetricName);
    Field f=registry.getClass().getDeclaredField("reporter");
    f.setAccessible(true);
    MetricReporter reporter=(MetricReporter)f.get(registry);
    assertTrue(reporter instanceof TestingReporter);
    TestingReporter testingReporter=(TestingReporter)reporter;
    TestingScheduledReporter scheduledReporter=testingReporter.scheduledReporter;
    assertEquals(1,testingReporter.getMetrics().size());
    for (int i=0; i < size; i++) {
      histogramWrapper.update(i);
    }
    Future<Snapshot> snapshotFuture=scheduledReporter.getNextHistogramSnapshot(fullMetricName);
    Snapshot snapshot=snapshotFuture.get(timeout,TimeUnit.MILLISECONDS);
    assertEquals(0,snapshot.getMin());
    assertEquals((size - 1) / 2.0,snapshot.getMedian(),0.001);
    assertEquals(size - 1,snapshot.getMax());
    assertEquals(size,snapshot.size());
    registry.unregister(histogramWrapper,"histogram",metricGroup);
    assertEquals(0,testingReporter.getMetrics().size());
  }
  finally {
    if (registry != null) {
      registry.shutdown();
    }
  }
}
