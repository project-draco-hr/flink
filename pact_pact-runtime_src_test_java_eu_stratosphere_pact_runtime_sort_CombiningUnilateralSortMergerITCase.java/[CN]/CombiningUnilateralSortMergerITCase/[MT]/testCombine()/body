{
  final SerializationFactory<TestData.Key> keySerialization=new WritableSerializationFactory<TestData.Key>(TestData.Key.class);
  final SerializationFactory<PactInteger> valSerialization=new WritableSerializationFactory<PactInteger>(PactInteger.class);
  int noKeys=100;
  int noKeyCnt=10000;
  final Comparator<TestData.Key> keyComparator=new TestData.KeyComparator();
  MockRecordReader<KeyValuePair<TestData.Key,PactInteger>> reader=new MockRecordReader<KeyValuePair<TestData.Key,PactInteger>>();
  LOG.debug("initializing sortmerger");
  SortMerger<TestData.Key,PactInteger> merger=new CombiningUnilateralSortMerger<TestData.Key,PactInteger>(new TestCountCombiner(),memoryManager,ioManager,6,1024 * 1024 * 8,1024 * 1024 * 64,128,keySerialization,valSerialization,keyComparator,reader,OFFSETS_PERCENTAGE,parentTask,true);
  Iterator<KeyValuePair<TestData.Key,PactInteger>> iterator=merger.getIterator();
  for (int i=0; i < noKeyCnt; i++) {
    for (int j=0; j < noKeys; j++) {
      KeyValuePair<TestData.Key,PactInteger> pair=new KeyValuePair<Key,PactInteger>(new TestData.Key(j),new PactInteger(1));
      reader.emit(pair);
    }
  }
  reader.close();
  while (iterator.hasNext()) {
    Assert.assertEquals(noKeyCnt,iterator.next().getValue().getValue());
  }
}
