{
  @SuppressWarnings("unchecked") final TypeComparator<Record> intComp=new RecordComparatorFactory(new int[]{0},new Class[]{IntValue.class}).createComparator();
  final ChannelSelector<SerializationDelegate<Record>> oe1=new OutputEmitter<Record>(ShipStrategyType.FORWARD,intComp);
  final SerializationDelegate<Record> delegate=new SerializationDelegate<Record>(new RecordSerializerFactory().getSerializer());
  int numChannels=100;
  int numRecords=50000 + numChannels / 2;
  int[] hit=new int[numChannels];
  for (int i=0; i < numRecords; i++) {
    IntValue k=new IntValue(i);
    Record rec=new Record(k);
    delegate.setInstance(rec);
    int[] chans=oe1.selectChannels(delegate,hit.length);
    for (int j=0; j < chans.length; j++) {
      hit[chans[j]]++;
    }
  }
  assertTrue(hit[0] == numRecords);
  for (int i=1; i < hit.length; i++) {
    assertTrue(hit[i] == 0);
  }
  @SuppressWarnings("unchecked") final TypeComparator<Record> stringComp=new RecordComparatorFactory(new int[]{0},new Class[]{StringValue.class}).createComparator();
  final ChannelSelector<SerializationDelegate<Record>> oe2=new OutputEmitter<Record>(ShipStrategyType.FORWARD,stringComp);
  numChannels=100;
  numRecords=10000 + numChannels / 2;
  hit=new int[numChannels];
  for (int i=0; i < numRecords; i++) {
    StringValue k=new StringValue(i + "");
    Record rec=new Record(k);
    delegate.setInstance(rec);
    int[] chans=oe2.selectChannels(delegate,hit.length);
    for (int j=0; j < chans.length; j++) {
      hit[chans[j]]++;
    }
  }
  assertTrue(hit[0] == numRecords);
  for (int i=1; i < hit.length; i++) {
    assertTrue(hit[i] == 0);
  }
}
