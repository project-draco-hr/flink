{
  @SuppressWarnings({"unchecked","rawtypes"}) final TypeComparator<Record> intComp=new RecordComparatorFactory(new int[]{0},new Class[]{IntValue.class}).createComparator();
  final ChannelSelector<SerializationDelegate<Record>> oe1=new OutputEmitter<Record>(ShipStrategyType.PARTITION_HASH,intComp);
  final SerializationDelegate<Record> delegate=new SerializationDelegate<Record>(new RecordSerializerFactory().getSerializer());
  int numChans=100;
  int numRecs=50000;
  int[] hit=new int[numChans];
  for (int i=0; i < numRecs; i++) {
    IntValue k=new IntValue(i);
    Record rec=new Record(k);
    delegate.setInstance(rec);
    int[] chans=oe1.selectChannels(delegate,hit.length);
    for (    int chan : chans) {
      hit[chan]++;
    }
  }
  int cnt=0;
  for (  int aHit : hit) {
    assertTrue(aHit > 0);
    cnt+=aHit;
  }
  assertTrue(cnt == numRecs);
  @SuppressWarnings({"unchecked","rawtypes"}) final TypeComparator<Record> stringComp=new RecordComparatorFactory(new int[]{0},new Class[]{StringValue.class}).createComparator();
  final ChannelSelector<SerializationDelegate<Record>> oe2=new OutputEmitter<Record>(ShipStrategyType.PARTITION_HASH,stringComp);
  numChans=100;
  numRecs=10000;
  hit=new int[numChans];
  for (int i=0; i < numRecs; i++) {
    StringValue k=new StringValue(i + "");
    Record rec=new Record(k);
    delegate.setInstance(rec);
    int[] chans=oe2.selectChannels(delegate,hit.length);
    for (    int chan : chans) {
      hit[chan]++;
    }
  }
  cnt=0;
  for (  int aHit : hit) {
    assertTrue(aHit > 0);
    cnt+=aHit;
  }
  assertTrue(cnt == numRecs);
  final TestIntComparator testIntComp=new TestIntComparator();
  final ChannelSelector<SerializationDelegate<Integer>> oe3=new OutputEmitter<Integer>(ShipStrategyType.PARTITION_HASH,testIntComp);
  final SerializationDelegate<Integer> intDel=new SerializationDelegate<Integer>(new IntSerializer());
  numChans=100;
  intDel.setInstance(Integer.MIN_VALUE);
  int[] chans=oe3.selectChannels(intDel,numChans);
  assertTrue(chans.length == 1);
  assertTrue(chans[0] >= 0 && chans[0] <= numChans - 1);
  intDel.setInstance(-1);
  chans=oe3.selectChannels(intDel,hit.length);
  assertTrue(chans.length == 1);
  assertTrue(chans[0] >= 0 && chans[0] <= numChans - 1);
  intDel.setInstance(0);
  chans=oe3.selectChannels(intDel,hit.length);
  assertTrue(chans.length == 1);
  assertTrue(chans[0] >= 0 && chans[0] <= numChans - 1);
  intDel.setInstance(1);
  chans=oe3.selectChannels(intDel,hit.length);
  assertTrue(chans.length == 1);
  assertTrue(chans[0] >= 0 && chans[0] <= numChans - 1);
  intDel.setInstance(Integer.MAX_VALUE);
  chans=oe3.selectChannels(intDel,hit.length);
  assertTrue(chans.length == 1);
  assertTrue(chans[0] >= 0 && chans[0] <= numChans - 1);
}
