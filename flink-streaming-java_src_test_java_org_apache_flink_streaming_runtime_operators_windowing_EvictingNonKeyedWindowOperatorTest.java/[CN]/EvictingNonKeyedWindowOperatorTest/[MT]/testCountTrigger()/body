{
  AtomicInteger closeCalled=new AtomicInteger(0);
  final int WINDOW_SIZE=4;
  final int WINDOW_SLIDE=2;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  EvictingNonKeyedWindowOperator<Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator=new EvictingNonKeyedWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new ListWindowBuffer.Factory<Tuple2<String,Integer>>(inputType.createSerializer(new ExecutionConfig())),new ReduceIterableAllWindowFunction<GlobalWindow,Tuple2<String,Integer>>(new SumReducer()),CountTrigger.of(WINDOW_SLIDE),CountEvictor.of(WINDOW_SIZE));
  operator.setInputType(inputType,new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",2),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",4),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",4),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.close();
}
