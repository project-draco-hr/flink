{
  RecordDeserializer<KeyValuePair<Key,Value>> deserializer=new KeyValuePairDeserializer(this.format.getKeyType(),this.format.getValueType());
  DistributionPattern dp=null;
switch (this.config.getInputShipStrategy(0)) {
case FORWARD:
    dp=new PointwiseDistributionPattern();
  break;
case PARTITION_RANGE:
dp=new BipartiteDistributionPattern();
break;
default :
throw new RuntimeException("No valid input ship strategy provided for DataSinkTask.");
}
final int numberOfInputs=this.config.getNumInputs();
if (numberOfInputs == 1) {
this.reader=new RecordReader<KeyValuePair<Key,Value>>(this,deserializer,dp);
}
 else {
RecordReader<KeyValuePair<Key,Value>>[] readers=new RecordReader[numberOfInputs];
for (int i=0; i < numberOfInputs; ++i) {
readers[i]=new RecordReader<KeyValuePair<Key,Value>>(this,deserializer,dp);
}
this.reader=new UnionRecordReader<KeyValuePair<Key,Value>>(readers);
}
this.availableMemory=this.config.getMemorySize();
this.maxFileHandles=this.config.getNumFilehandles();
this.spillThreshold=this.config.getSortSpillingTreshold();
}
