{
  if (LOG.isInfoEnabled())   LOG.info(getLogString("Start PACT code"));
  final MutableObjectIterator<PactRecord> reader=this.reader;
  final OutputFormat format=this.format;
  final PactRecord record=new PactRecord();
  try {
    if (this.taskCanceled) {
      return;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Iterator obtained: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
      LOG.debug(getLogString("Starting to produce output"));
    }
    format.open(this.getEnvironment().getIndexInSubtaskGroup() + 1);
    while (!this.taskCanceled && reader.next(record)) {
      format.writeRecord(record);
    }
    if (!this.taskCanceled) {
      this.format.close();
      this.format=null;
    }
  }
 catch (  Exception ex) {
    if (!this.taskCanceled) {
      if (LOG.isErrorEnabled())       LOG.error(getLogString("Error in Pact user code: " + ex.getMessage()),ex);
      throw ex;
    }
  }
 finally {
    if (this.format != null) {
      try {
        this.format.close();
      }
 catch (      Throwable t) {
        if (LOG.isWarnEnabled())         LOG.warn(getLogString("Error closing the ouput format."),t);
      }
    }
  }
  if (!this.taskCanceled) {
    if (LOG.isDebugEnabled())     LOG.debug(getLogString("Finished producing output"));
    if (LOG.isInfoEnabled())     LOG.info(getLogString("Finished PACT code"));
  }
 else {
    if (LOG.isWarnEnabled())     LOG.warn(getLogString("PACT code cancelled"));
  }
}
