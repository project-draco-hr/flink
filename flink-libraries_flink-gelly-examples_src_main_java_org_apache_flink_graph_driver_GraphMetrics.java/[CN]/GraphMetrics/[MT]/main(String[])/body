{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().enableObjectReuse();
  ParameterTool parameters=ParameterTool.fromArgs(args);
  if (!parameters.has("directed")) {
    printUsage();
    return;
  }
  boolean directedAlgorithm=parameters.getBoolean("directed");
  GraphAnalytic vm;
  GraphAnalytic em;
switch (parameters.get("input","")) {
case "csv":
{
      String lineDelimiter=StringEscapeUtils.unescapeJava(parameters.get("input_line_delimiter",CsvOutputFormat.DEFAULT_LINE_DELIMITER));
      String fieldDelimiter=StringEscapeUtils.unescapeJava(parameters.get("input_field_delimiter",CsvOutputFormat.DEFAULT_FIELD_DELIMITER));
      GraphCsvReader reader=Graph.fromCsvReader(parameters.get("input_filename"),env).ignoreCommentsEdges("#").lineDelimiterEdges(lineDelimiter).fieldDelimiterEdges(fieldDelimiter);
switch (parameters.get("type","")) {
case "integer":
{
          Graph<LongValue,NullValue,NullValue> graph=reader.keyType(LongValue.class);
          if (directedAlgorithm) {
            if (parameters.getBoolean("simplify",false)) {
              graph=graph.run(new org.apache.flink.graph.asm.simple.directed.Simplify<LongValue,NullValue,NullValue>());
            }
            vm=graph.run(new org.apache.flink.graph.library.metric.directed.VertexMetrics<LongValue,NullValue,NullValue>());
            em=graph.run(new org.apache.flink.graph.library.metric.directed.EdgeMetrics<LongValue,NullValue,NullValue>());
          }
 else {
            if (parameters.getBoolean("simplify",false)) {
              graph=graph.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<LongValue,NullValue,NullValue>(false));
            }
            vm=graph.run(new org.apache.flink.graph.library.metric.undirected.VertexMetrics<LongValue,NullValue,NullValue>());
            em=graph.run(new org.apache.flink.graph.library.metric.undirected.EdgeMetrics<LongValue,NullValue,NullValue>());
          }
        }
      break;
case "string":
{
      Graph<StringValue,NullValue,NullValue> graph=reader.keyType(StringValue.class);
      if (directedAlgorithm) {
        if (parameters.getBoolean("simplify",false)) {
          graph=graph.run(new org.apache.flink.graph.asm.simple.directed.Simplify<StringValue,NullValue,NullValue>());
        }
        vm=graph.run(new org.apache.flink.graph.library.metric.directed.VertexMetrics<StringValue,NullValue,NullValue>());
        em=graph.run(new org.apache.flink.graph.library.metric.directed.EdgeMetrics<StringValue,NullValue,NullValue>());
      }
 else {
        if (parameters.getBoolean("simplify",false)) {
          graph=graph.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<StringValue,NullValue,NullValue>(false));
        }
        vm=graph.run(new org.apache.flink.graph.library.metric.undirected.VertexMetrics<StringValue,NullValue,NullValue>());
        em=graph.run(new org.apache.flink.graph.library.metric.undirected.EdgeMetrics<StringValue,NullValue,NullValue>());
      }
    }
  break;
default :
printUsage();
return;
}
}
break;
case "rmat":
{
int scale=parameters.getInt("scale",DEFAULT_SCALE);
int edgeFactor=parameters.getInt("edge_factor",DEFAULT_EDGE_FACTOR);
RandomGenerableFactory<JDKRandomGenerator> rnd=new JDKRandomGeneratorFactory();
long vertexCount=1L << scale;
long edgeCount=vertexCount * edgeFactor;
Graph<LongValue,NullValue,NullValue> graph=new RMatGraph<>(env,rnd,vertexCount,edgeCount).generate();
if (directedAlgorithm) {
if (scale > 32) {
Graph<LongValue,NullValue,NullValue> newGraph=graph.run(new org.apache.flink.graph.asm.simple.directed.Simplify<LongValue,NullValue,NullValue>());
vm=newGraph.run(new org.apache.flink.graph.library.metric.directed.VertexMetrics<LongValue,NullValue,NullValue>());
em=newGraph.run(new org.apache.flink.graph.library.metric.directed.EdgeMetrics<LongValue,NullValue,NullValue>());
}
 else {
Graph<IntValue,NullValue,NullValue> newGraph=graph.run(new TranslateGraphIds<LongValue,IntValue,NullValue,NullValue>(new LongValueToIntValue())).run(new org.apache.flink.graph.asm.simple.directed.Simplify<IntValue,NullValue,NullValue>());
vm=newGraph.run(new org.apache.flink.graph.library.metric.directed.VertexMetrics<IntValue,NullValue,NullValue>());
em=newGraph.run(new org.apache.flink.graph.library.metric.directed.EdgeMetrics<IntValue,NullValue,NullValue>());
}
}
 else {
boolean clipAndFlip=parameters.getBoolean("clip_and_flip",DEFAULT_CLIP_AND_FLIP);
if (scale > 32) {
Graph<LongValue,NullValue,NullValue> newGraph=graph.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<LongValue,NullValue,NullValue>(clipAndFlip));
vm=newGraph.run(new org.apache.flink.graph.library.metric.undirected.VertexMetrics<LongValue,NullValue,NullValue>());
em=newGraph.run(new org.apache.flink.graph.library.metric.undirected.EdgeMetrics<LongValue,NullValue,NullValue>());
}
 else {
Graph<IntValue,NullValue,NullValue> newGraph=graph.run(new TranslateGraphIds<LongValue,IntValue,NullValue,NullValue>(new LongValueToIntValue())).run(new org.apache.flink.graph.asm.simple.undirected.Simplify<IntValue,NullValue,NullValue>(clipAndFlip));
vm=newGraph.run(new org.apache.flink.graph.library.metric.undirected.VertexMetrics<IntValue,NullValue,NullValue>());
em=newGraph.run(new org.apache.flink.graph.library.metric.undirected.EdgeMetrics<IntValue,NullValue,NullValue>());
}
}
}
break;
default :
printUsage();
return;
}
env.execute("Graph Metrics");
System.out.print("Vertex metrics:\n  ");
System.out.println(vm.getResult().toString().replace(";","\n "));
System.out.print("\nEdge metrics:\n  ");
System.out.println(em.getResult().toString().replace(";","\n "));
JobExecutionResult result=env.getLastJobExecutionResult();
NumberFormat nf=NumberFormat.getInstance();
System.out.println("\nExecution runtime: " + nf.format(result.getNetRuntime()) + " ms");
}
