{
  final int[] positions=fields.toArray();
  @SuppressWarnings("unchecked") final Class<? extends Key>[] keyTypes=new Class[fields.size()];
  for (int i=0; i < fields.size(); i++) {
    Class<? extends Value> type=schema.getType(positions[i]);
    if (!Key.class.isAssignableFrom(type)) {
      throw new CompilerException("The field type " + type.getName() + " cannot be used as a key because it does not implement the interface 'Key'");
    }
    @SuppressWarnings("unchecked") Class<? extends Key> keyType=(Class<? extends Key>)type;
    if (type == null) {
      throw new MissingFieldTypeInfoException(i);
    }
 else {
      keyTypes[i]=keyType;
    }
  }
  return new ArrayRecordComparatorFactory(positions,keyTypes,directions);
}
