{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple2<Long,Long>> input=env.generateSequence(1,10).map(new Duplicator<Long>()).name("proper input");
    DataSet<Long> bc_input1=env.generateSequence(1,10).name("BC input 1");
    DataSet<Long> bc_input2=env.generateSequence(1,10).name("BC input 1");
    DataSet<Tuple2<Long,Long>> joinInput1=input.map(new IdentityMapper<Tuple2<Long,Long>>()).withBroadcastSet(bc_input1.map(new IdentityMapper<Long>()),"bc1").withBroadcastSet(bc_input2,"bc2");
    DataSet<Tuple2<Long,Long>> joinInput2=input.map(new IdentityMapper<Tuple2<Long,Long>>()).withBroadcastSet(bc_input1,"bc1").withBroadcastSet(bc_input2,"bc2");
    DataSet<Tuple2<Long,Long>> joinResult=joinInput1.join(joinInput2,JoinHint.REPARTITION_HASH_FIRST).where(0).equalTo(1).with(new DummyFlatJoinFunction<Tuple2<Long,Long>>());
    input.map(new IdentityMapper<Tuple2<Long,Long>>()).withBroadcastSet(bc_input1,"bc1").union(joinResult).print();
    Plan plan=env.createProgramPlan();
    compileNoStats(plan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
