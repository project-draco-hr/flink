{
  LinkedList<TriggerPolicy<IN>> clonedDistributedTriggerPolicies=new LinkedList<TriggerPolicy<IN>>();
  LinkedList<EvictionPolicy<IN>> clonedDistributedEvictionPolicies=new LinkedList<EvictionPolicy<IN>>();
  for (  CloneableTriggerPolicy<IN> trigger : this.distributedTriggerPolicies) {
    clonedDistributedTriggerPolicies.add(trigger.clone());
  }
  for (  CloneableEvictionPolicy<IN> eviction : this.distributedEvictionPolicies) {
    clonedDistributedEvictionPolicies.add(eviction.clone());
  }
  WindowInvokable<IN,OUT> groupInvokable;
  if (userFunction instanceof ReduceFunction) {
    groupInvokable=(WindowInvokable<IN,OUT>)new WindowReduceInvokable<IN>((ReduceFunction<IN>)userFunction,clonedDistributedTriggerPolicies,clonedDistributedEvictionPolicies);
  }
 else {
    groupInvokable=new WindowGroupReduceInvokable<IN,OUT>((GroupReduceFunction<IN,OUT>)userFunction,clonedDistributedTriggerPolicies,clonedDistributedEvictionPolicies);
  }
  groupInvokable.setup(taskContext,executionConfig);
  groupInvokable.open(this.parameters);
  windowingGroups.put(keySelector.getKey(element.getObject()),groupInvokable);
  return groupInvokable;
}
