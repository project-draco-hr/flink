{
  try {
    LifoSetQueue<Integer> queue=new LifoSetQueue<Integer>();
    assertEquals(0,queue.size());
    assertNull(queue.poll());
    assertNull(queue.peek());
    assertTrue(queue.add(1));
    assertTrue(queue.offer(2));
    assertTrue(queue.offer(3));
    assertEquals(3,queue.size());
    assertEquals(3,queue.peek().intValue());
    assertTrue(queue.add(1));
    assertTrue(queue.offer(1));
    assertTrue(queue.add(3));
    assertTrue(queue.offer(3));
    assertTrue(queue.add(2));
    assertTrue(queue.offer(2));
    assertEquals(3,queue.size());
    assertEquals(3,queue.peek().intValue());
    assertEquals(3,queue.size());
    assertEquals(3,queue.poll().intValue());
    assertEquals(2,queue.size());
    assertEquals(2,queue.peek().intValue());
    assertEquals(2,queue.size());
    assertEquals(2,queue.poll().intValue());
    assertEquals(1,queue.size());
    assertEquals(1,queue.peek().intValue());
    assertEquals(1,queue.size());
    assertEquals(1,queue.poll().intValue());
    assertEquals(0,queue.size());
    assertTrue(queue.isEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getClass().getSimpleName() + " : " + e.getMessage());
  }
}
