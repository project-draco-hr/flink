{
  List<StreamTransformation<T>> unionedTransforms=new ArrayList<>();
  unionedTransforms.add(this.transformation);
  Collection<StreamTransformation<?>> thisPredecessors=this.getTransformation().getTransitivePredecessors();
  for (  DataStream<T> newStream : streams) {
    if (!getType().equals(newStream.getType())) {
      throw new IllegalArgumentException("Cannot union streams of different types: " + getType() + " and "+ newStream.getType());
    }
    unionedTransforms.add(newStream.getTransformation());
  }
  return new DataStream<>(this.environment,new UnionTransformation<>(unionedTransforms));
}
