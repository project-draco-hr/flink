{
synchronized (priorityQueue) {
    if (this.executionState != null && this.executionState.ordinal() >= executionState.ordinal()) {
      return Futures.successful(executionState);
    }
 else {
      Promise<ExecutionState> promise=new Promise.DefaultPromise<ExecutionState>();
      priorityQueue.offer(Tuple2.of(executionState,promise));
      return promise.future();
    }
  }
}
