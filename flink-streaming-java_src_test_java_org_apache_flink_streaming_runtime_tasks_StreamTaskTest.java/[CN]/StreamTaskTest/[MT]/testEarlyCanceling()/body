{
  Deadline deadline=new FiniteDuration(2,TimeUnit.MINUTES).fromNow();
  StreamConfig cfg=new StreamConfig(new Configuration());
  cfg.setStreamOperator(new SlowlyDeserializingOperator());
  cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);
  Task task=createTask(SourceStreamTask.class,cfg);
  TestingExecutionStateListener testingExecutionStateListener=new TestingExecutionStateListener();
  task.registerExecutionListener(testingExecutionStateListener);
  task.startTaskThread();
  Future<ExecutionState> running=testingExecutionStateListener.notifyWhenExecutionState(ExecutionState.RUNNING);
  ExecutionState executionState=Await.result(running,deadline.timeLeft());
  if (executionState != ExecutionState.RUNNING) {
    fail("Task entered state " + task.getExecutionState() + " with error "+ ExceptionUtils.stringifyException(task.getFailureCause()));
  }
  task.cancelExecution();
  Future<ExecutionState> canceling=testingExecutionStateListener.notifyWhenExecutionState(ExecutionState.CANCELING);
  executionState=Await.result(canceling,deadline.timeLeft());
  assertTrue(executionState == ExecutionState.CANCELING || executionState == ExecutionState.CANCELED);
  task.getExecutingThread().join(deadline.timeLeft().toMillis());
  assertFalse("Task did not cancel",task.getExecutingThread().isAlive());
  assertEquals(ExecutionState.CANCELED,task.getExecutionState());
}
