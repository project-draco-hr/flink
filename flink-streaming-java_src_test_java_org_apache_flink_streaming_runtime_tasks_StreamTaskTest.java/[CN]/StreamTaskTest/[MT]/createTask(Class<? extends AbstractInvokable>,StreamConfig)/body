{
  LibraryCacheManager libCache=mock(LibraryCacheManager.class);
  when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader());
  ResultPartitionManager partitionManager=mock(ResultPartitionManager.class);
  ResultPartitionConsumableNotifier consumableNotifier=mock(ResultPartitionConsumableNotifier.class);
  NetworkEnvironment network=mock(NetworkEnvironment.class);
  when(network.getPartitionManager()).thenReturn(partitionManager);
  when(network.getPartitionConsumableNotifier()).thenReturn(consumableNotifier);
  when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC);
  when(network.createKvStateTaskRegistry(any(JobID.class),any(JobVertexID.class))).thenReturn(mock(TaskKvStateRegistry.class));
  TaskDeploymentDescriptor tdd=new TaskDeploymentDescriptor(new JobID(),"Job Name",new JobVertexID(),new ExecutionAttemptID(),new SerializedValue<>(new ExecutionConfig()),"Test Task",1,0,1,0,new Configuration(),taskConfig.getConfiguration(),invokable.getName(),Collections.<ResultPartitionDeploymentDescriptor>emptyList(),Collections.<InputGateDeploymentDescriptor>emptyList(),Collections.<BlobKey>emptyList(),Collections.<URL>emptyList(),0);
  return new Task(tdd,mock(MemoryManager.class),mock(IOManager.class),network,mock(BroadcastVariableManager.class),new DummyGateway(),new DummyGateway(),new FiniteDuration(60,TimeUnit.SECONDS),libCache,mock(FileCache.class),new TaskManagerRuntimeInfo("localhost",new Configuration(),System.getProperty("java.io.tmpdir")),mock(TaskMetricGroup.class));
}
