{
  KinesisDataFetcher mockedFetcher=Mockito.mock(KinesisDataFetcher.class);
  PowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);
  PowerMockito.mockStatic(KinesisConfigUtil.class);
  PowerMockito.doNothing().when(KinesisConfigUtil.class);
  HashMap<KinesisStreamShard,SequenceNumber> fakeRestoredState=new HashMap<>();
  fakeRestoredState.put(new KinesisStreamShard("fakeStream1",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(0))),new SequenceNumber(UUID.randomUUID().toString()));
  fakeRestoredState.put(new KinesisStreamShard("fakeStream1",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(1))),new SequenceNumber(UUID.randomUUID().toString()));
  fakeRestoredState.put(new KinesisStreamShard("fakeStream1",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),new SequenceNumber(UUID.randomUUID().toString()));
  fakeRestoredState.put(new KinesisStreamShard("fakeStream2",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(0))),new SequenceNumber(UUID.randomUUID().toString()));
  fakeRestoredState.put(new KinesisStreamShard("fakeStream2",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(1))),new SequenceNumber(UUID.randomUUID().toString()));
  TestableFlinkKinesisConsumer consumer=new TestableFlinkKinesisConsumer("fakeStream",new Properties(),10,2);
  consumer.restoreState(fakeRestoredState);
  consumer.open(new Configuration());
  consumer.run(Mockito.mock(SourceFunction.SourceContext.class));
  Mockito.verify(mockedFetcher).setIsRestoringFromFailure(true);
  for (  Map.Entry<KinesisStreamShard,SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {
    Mockito.verify(mockedFetcher).advanceLastDiscoveredShardOfStream(restoredShard.getKey().getStreamName(),restoredShard.getKey().getShard().getShardId());
    Mockito.verify(mockedFetcher).registerNewSubscribedShardState(new KinesisStreamShardState(restoredShard.getKey(),restoredShard.getValue()));
  }
}
