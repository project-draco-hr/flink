{
  try {
    List<KinesisStreamShard> fakeShards=ReferenceKinesisShardTopologies.flatTopologyWithFourOpenShards();
    int consumerTaskCount=fakeShards.size() + 3;
    for (int consumerNum=0; consumerNum < consumerTaskCount; consumerNum++) {
      List<KinesisStreamShard> assignedShardsToThisConsumerTask=FlinkKinesisConsumer.assignShards(fakeShards,consumerTaskCount,consumerNum);
      if (consumerNum < fakeShards.size()) {
        assertEquals(1,assignedShardsToThisConsumerTask.size());
        assertTrue(assignedShardsToThisConsumerTask.get(0).equals(fakeShards.get(consumerNum)));
      }
 else {
        assertEquals(0,assignedShardsToThisConsumerTask.size());
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
