{
  DataSet op1=(DataSet)sets.get(info.parentID);
  DataSet op2=(DataSet)sets.get(info.otherID);
  if (info.types != null && (info.projections == null || info.projections.length == 0)) {
    sets.put(info.setID,applyJoinOperation(op1,op2,info.keys1,info.keys2,mode,info));
  }
 else {
    DefaultJoin defaultResult;
switch (mode) {
case NONE:
      defaultResult=op1.join(op2).where(info.keys1).equalTo(info.keys2);
    break;
case HUGE:
  defaultResult=op1.joinWithHuge(op2).where(info.keys1).equalTo(info.keys2);
break;
case TINY:
defaultResult=op1.joinWithTiny(op2).where(info.keys1).equalTo(info.keys2);
break;
default :
throw new IllegalArgumentException("Invalid join mode specified.");
}
if (info.projections.length == 0) {
sets.put(info.setID,defaultResult.name("DefaultJoin"));
}
 else {
ProjectJoin project=null;
for (ProjectionEntry pe : info.projections) {
switch (pe.side) {
case FIRST:
project=project == null ? defaultResult.projectFirst(pe.keys) : project.projectFirst(pe.keys);
break;
case SECOND:
project=project == null ? defaultResult.projectSecond(pe.keys) : project.projectSecond(pe.keys);
break;
}
}
sets.put(info.setID,project.name("ProjectJoin"));
}
}
}
