{
  final int numRetries=5;
  final int waitBetweenRetriesMillis=2000;
  final int connectTimeout=1000;
  boolean success=false;
  for (int i=0; i < numRetries && !success; i++) {
    boolean canConnect=false;
    String host=WikipediaEditsSource.DEFAULT_HOST;
    int port=WikipediaEditsSource.DEFAULT_PORT;
    try (Socket s=new Socket()){
      s.connect(new InetSocketAddress(host,port),connectTimeout);
      canConnect=s.isConnected();
    }
 catch (    Throwable ignored) {
    }
    if (canConnect) {
      StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
      env.getConfig().disableSysoutLogging();
      DataStream<WikipediaEditEvent> edits=env.addSource(new WikipediaEditsSource());
      edits.addSink(new SinkFunction<WikipediaEditEvent>(){
        @Override public void invoke(        WikipediaEditEvent value) throws Exception {
          throw new Exception("Expected test exception");
        }
      }
);
      try {
        env.execute();
        fail("Did not throw expected Exception.");
      }
 catch (      Exception e) {
        assertNotNull(e.getCause());
        assertEquals("Expected test exception",e.getCause().getMessage());
      }
      success=true;
    }
 else {
      LOG.info("Failed to connect to IRC server ({}/{}). Retrying in {} ms.",i + 1,numRetries,waitBetweenRetriesMillis);
      Thread.sleep(waitBetweenRetriesMillis);
    }
  }
  if (success) {
    LOG.info("Successfully ran test.");
  }
 else {
    LOG.info("Skipped test, because not able to connect to IRC server.");
  }
}
