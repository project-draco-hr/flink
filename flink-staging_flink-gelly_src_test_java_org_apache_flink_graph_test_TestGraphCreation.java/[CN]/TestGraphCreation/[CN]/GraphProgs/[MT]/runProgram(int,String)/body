{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,NullValue,Long> graph=Graph.create(TestGraphUtils.getLongLongEdgeData(env),env);
      graph.getVertices().writeAsCsv(resultPath);
      env.execute();
      return "1,(null)\n" + "2,(null)\n" + "3,(null)\n"+ "4,(null)\n"+ "5,(null)\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongEdgeData(env),new MapFunction<Long,Long>(){
      public Long map(      Long vertexId){
        return vertexId;
      }
    }
,env);
    graph.getVertices().writeAsCsv(resultPath);
    env.execute();
    return "1,1\n" + "2,2\n" + "3,3\n"+ "4,4\n"+ "5,5\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,DummyCustomParameterizedType<Double>,Long> graph=Graph.create(TestGraphUtils.getLongLongEdgeData(env),new MapFunction<Long,DummyCustomParameterizedType<Double>>(){
    DummyCustomParameterizedType<Double> dummyValue=new DummyCustomParameterizedType<Double>();
    public DummyCustomParameterizedType<Double> map(    Long vertexId){
      dummyValue.setIntField(vertexId.intValue() - 1);
      dummyValue.setTField(vertexId * 2.0);
      return dummyValue;
    }
  }
,env);
  graph.getVertices().writeAsCsv(resultPath);
  env.execute();
  return "1,(2.0,0)\n" + "2,(4.0,1)\n" + "3,(6.0,2)\n"+ "4,(8.0,3)\n"+ "5,(10.0,4)\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Vertex<Long,Long>> vertices=TestGraphUtils.getLongLongVertexData(env);
DataSet<Edge<Long,Long>> edges=TestGraphUtils.getLongLongEdgeData(env);
Graph<Long,Long,Long> graph=new Graph<Long,Long,Long>(vertices,edges,env);
DataSet<Boolean> result=graph.validate(new InvalidVertexIdsValidator<Long,Long,Long>());
result.writeAsText(resultPath);
env.execute();
return "true\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Vertex<Long,Long>> vertices=TestGraphUtils.getLongLongInvalidVertexData(env);
DataSet<Edge<Long,Long>> edges=TestGraphUtils.getLongLongEdgeData(env);
Graph<Long,Long,Long> graph=new Graph<Long,Long,Long>(vertices,edges,env);
DataSet<Boolean> result=graph.validate(new InvalidVertexIdsValidator<Long,Long,Long>());
result.writeAsText(resultPath);
env.execute();
return "false\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
