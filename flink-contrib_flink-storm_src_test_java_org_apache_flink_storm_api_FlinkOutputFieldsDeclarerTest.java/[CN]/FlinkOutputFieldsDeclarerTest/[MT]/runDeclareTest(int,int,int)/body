{
  final FlinkOutputFieldsDeclarer declarer=new FlinkOutputFieldsDeclarer();
  String[] streams=null;
  if (numberOfStreams > 1 || r.nextBoolean()) {
    streams=new String[numberOfStreams];
    for (int i=0; i < numberOfStreams; ++i) {
      streams[i]="stream" + i;
    }
  }
  final String[] attributes=new String[numberOfAttributes];
  for (int i=0; i < attributes.length; ++i) {
    attributes[i]="a" + i;
  }
switch (testCase) {
case 0:
    this.declareSimple(declarer,streams,attributes);
  break;
default :
this.declareNonDirect(declarer,streams,attributes);
}
if (streams == null) {
streams=new String[]{Utils.DEFAULT_STREAM_ID};
}
for (String stream : streams) {
final TypeInformation<?> type=declarer.getOutputType(stream);
Assert.assertEquals(numberOfAttributes + 1,type.getArity());
Assert.assertTrue(type.isTupleType());
}
}
