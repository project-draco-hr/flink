{
  final long NUM_STRINGS=10000000L;
  assertTrue("Broken test setup",NUM_STRINGS % 40 == 0);
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getJobManagerRPCPort());
    env.setParallelism(PARALLELISM);
    env.enableCheckpointing(500);
    env.getConfig().disableSysoutLogging();
    DataStream<String> stream=env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS));
    stream.filter(new StringRichFilterFunction()).map(new StringPrefixCountRichMapFunction()).startNewChain().map(new StatefulCounterFunction()).partitionByHash("prefix").flatMap(new OnceFailingAggregator(NUM_STRINGS)).addSink(new ValidatingSink());
    env.execute();
    long filterSum=0;
    for (    long l : StringRichFilterFunction.counts) {
      filterSum+=l;
    }
    long mapSum=0;
    for (    long l : StringPrefixCountRichMapFunction.counts) {
      mapSum+=l;
    }
    long countSum=0;
    for (    long l : StatefulCounterFunction.counts) {
      countSum+=l;
    }
    assertEquals(NUM_STRINGS,filterSum);
    assertEquals(NUM_STRINGS,mapSum);
    assertEquals(NUM_STRINGS,countSum);
    for (    Map<Character,Long> map : ValidatingSink.maps) {
      for (      Long count : map.values()) {
        assertEquals(NUM_STRINGS / 40,count.longValue());
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
