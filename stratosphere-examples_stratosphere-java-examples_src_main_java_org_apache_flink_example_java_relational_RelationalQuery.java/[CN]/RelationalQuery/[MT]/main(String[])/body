{
  if (!parseParameters(args)) {
    return;
  }
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple5<Integer,String,String,String,Integer>> orders=getOrdersDataSet(env);
  DataSet<Tuple2<Integer,Double>> lineitems=getLineitemDataSet(env);
  DataSet<Tuple2<Integer,Integer>> ordersFilteredByYear=orders.filter(new FilterFunction<Tuple5<Integer,String,String,String,Integer>>(){
    @Override public boolean filter(    Tuple5<Integer,String,String,String,Integer> t){
      if (!t.f1.equals(STATUS_FILTER)) {
        return false;
      }
 else       if (Integer.parseInt(t.f2.substring(0,4)) <= YEAR_FILTER) {
        return false;
      }
 else       if (!t.f3.startsWith(OPRIO_FILTER)) {
        return false;
      }
      return true;
    }
  }
).project(0,4).types(Integer.class,Integer.class);
  DataSet<Tuple3<Integer,Integer,Double>> lineitemsOfOrders=ordersFilteredByYear.joinWithHuge(lineitems).where(0).equalTo(0).projectFirst(0,1).projectSecond(1).types(Integer.class,Integer.class,Double.class);
  DataSet<Tuple3<Integer,Integer,Double>> priceSums=lineitemsOfOrders.groupBy(0,1).aggregate(Aggregations.SUM,2);
  priceSums.writeAsCsv(outputPath);
  env.execute("Relational Query Example");
}
