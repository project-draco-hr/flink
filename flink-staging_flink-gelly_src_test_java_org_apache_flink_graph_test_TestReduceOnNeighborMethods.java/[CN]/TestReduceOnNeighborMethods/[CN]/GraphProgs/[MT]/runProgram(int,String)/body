{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
      DataSet<Tuple2<Long,Long>> verticesWithSumOfOutNeighborValues=graph.reduceOnNeighbors(new NeighborsFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>>(){
        public Tuple2<Long,Long> iterateNeighbors(        Vertex<Long,Long> vertex,        Iterable<Tuple2<Edge<Long,Long>,Vertex<Long,Long>>> neighbors){
          long sum=0;
          for (          Tuple2<Edge<Long,Long>,Vertex<Long,Long>> neighbor : neighbors) {
            sum+=neighbor.f1.getValue();
          }
          return new Tuple2<Long,Long>(vertex.getId(),sum);
        }
      }
,EdgeDirection.OUT);
      verticesWithSumOfOutNeighborValues.writeAsCsv(resultPath);
      env.execute();
      return "1,5\n" + "2,3\n" + "3,9\n"+ "4,5\n"+ "5,1\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
    DataSet<Tuple2<Long,Long>> verticesWithSum=graph.reduceOnNeighbors(new NeighborsFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>>(){
      public Tuple2<Long,Long> iterateNeighbors(      Vertex<Long,Long> vertex,      Iterable<Tuple2<Edge<Long,Long>,Vertex<Long,Long>>> neighbors){
        long sum=0;
        for (        Tuple2<Edge<Long,Long>,Vertex<Long,Long>> neighbor : neighbors) {
          sum+=neighbor.f0.getValue() * neighbor.f1.getValue();
        }
        return new Tuple2<Long,Long>(vertex.getId(),sum);
      }
    }
,EdgeDirection.IN);
    verticesWithSum.writeAsCsv(resultPath);
    env.execute();
    return "1,255\n" + "2,12\n" + "3,59\n"+ "4,102\n"+ "5,285\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
  DataSet<Tuple2<Long,Long>> verticesWithSumOfOutNeighborValues=graph.reduceOnNeighbors(new NeighborsFunctionWithVertexValue<Long,Long,Long,Tuple2<Long,Long>>(){
    public Tuple2<Long,Long> iterateNeighbors(    Vertex<Long,Long> vertex,    Iterable<Tuple2<Edge<Long,Long>,Vertex<Long,Long>>> neighbors){
      long sum=0;
      for (      Tuple2<Edge<Long,Long>,Vertex<Long,Long>> neighbor : neighbors) {
        sum+=neighbor.f1.getValue();
      }
      return new Tuple2<Long,Long>(vertex.getId(),sum + vertex.getValue());
    }
  }
,EdgeDirection.ALL);
  verticesWithSumOfOutNeighborValues.writeAsCsv(resultPath);
  env.execute();
  return "1,11\n" + "2,6\n" + "3,15\n"+ "4,12\n"+ "5,13\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
DataSet<Tuple2<Long,Long>> verticesWithSumOfOutNeighborValues=graph.reduceOnNeighbors(new NeighborsFunction<Long,Long,Long,Tuple2<Long,Long>>(){
  public Tuple2<Long,Long> iterateNeighbors(  Iterable<Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>> neighbors){
    long sum=0;
    Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>> first=new Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>();
    Iterator<Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>> neighborsIterator=neighbors.iterator();
    if (neighborsIterator.hasNext()) {
      first=neighborsIterator.next();
      sum=first.f2.getValue();
    }
    while (neighborsIterator.hasNext()) {
      sum+=neighborsIterator.next().f2.getValue();
    }
    return new Tuple2<Long,Long>(first.f0,sum);
  }
}
,EdgeDirection.OUT);
verticesWithSumOfOutNeighborValues.writeAsCsv(resultPath);
env.execute();
return "1,5\n" + "2,3\n" + "3,9\n"+ "4,5\n"+ "5,1\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
DataSet<Tuple2<Long,Long>> verticesWithSum=graph.reduceOnNeighbors(new NeighborsFunction<Long,Long,Long,Tuple2<Long,Long>>(){
public Tuple2<Long,Long> iterateNeighbors(Iterable<Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>> neighbors){
  long sum=0;
  Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>> first=new Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>();
  Iterator<Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>> neighborsIterator=neighbors.iterator();
  if (neighborsIterator.hasNext()) {
    first=neighborsIterator.next();
    sum=first.f2.getValue() * first.f1.getValue();
  }
  while (neighborsIterator.hasNext()) {
    Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>> next=neighborsIterator.next();
    sum+=next.f2.getValue() * next.f1.getValue();
  }
  return new Tuple2<Long,Long>(first.f0,sum);
}
}
,EdgeDirection.IN);
verticesWithSum.writeAsCsv(resultPath);
env.execute();
return "1,255\n" + "2,12\n" + "3,59\n"+ "4,102\n"+ "5,285\n";
}
case 6:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
DataSet<Tuple2<Long,Long>> verticesWithSumOfOutNeighborValues=graph.reduceOnNeighbors(new NeighborsFunction<Long,Long,Long,Tuple2<Long,Long>>(){
public Tuple2<Long,Long> iterateNeighbors(Iterable<Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>> neighbors){
long sum=0;
Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>> first=new Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>();
Iterator<Tuple3<Long,Edge<Long,Long>,Vertex<Long,Long>>> neighborsIterator=neighbors.iterator();
if (neighborsIterator.hasNext()) {
  first=neighborsIterator.next();
  sum=first.f2.getValue();
}
while (neighborsIterator.hasNext()) {
  sum+=neighborsIterator.next().f2.getValue();
}
return new Tuple2<Long,Long>(first.f0,sum);
}
}
,EdgeDirection.ALL);
verticesWithSumOfOutNeighborValues.writeAsCsv(resultPath);
env.execute();
return "1,10\n" + "2,4\n" + "3,12\n"+ "4,8\n"+ "5,8\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
