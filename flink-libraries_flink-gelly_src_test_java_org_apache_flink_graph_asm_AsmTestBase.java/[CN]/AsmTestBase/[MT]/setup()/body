{
  env=ExecutionEnvironment.createCollectionsEnvironment();
  Object[][] edges=new Object[][]{new Object[]{0,1},new Object[]{0,2},new Object[]{1,2},new Object[]{1,3},new Object[]{2,3},new Object[]{3,4},new Object[]{3,5}};
  List<Edge<IntValue,NullValue>> directedEdgeList=new LinkedList<>();
  for (  Object[] edge : edges) {
    directedEdgeList.add(new Edge<>(new IntValue((int)edge[0]),new IntValue((int)edge[1]),NullValue.getInstance()));
  }
  directedSimpleGraph=Graph.fromCollection(directedEdgeList,env);
  undirectedSimpleGraph=directedSimpleGraph.getUndirected();
  completeGraph=new CompleteGraph(env,completeGraphVertexCount).generate();
  emptyGraph=new EmptyGraph(env,3).generate();
  long rmatVertexCount=1 << 10;
  long rmatEdgeCount=16 * rmatVertexCount;
  directedRMatGraph=new RMatGraph<>(env,new JDKRandomGeneratorFactory(),rmatVertexCount,rmatEdgeCount).generate();
  undirectedRMatGraph=new RMatGraph<>(env,new JDKRandomGeneratorFactory(),rmatVertexCount,rmatEdgeCount).setSimpleGraph(true,false).generate();
}
