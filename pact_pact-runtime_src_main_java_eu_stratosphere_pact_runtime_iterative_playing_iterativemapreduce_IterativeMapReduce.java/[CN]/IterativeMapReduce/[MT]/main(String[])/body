{
  int degreeOfParallelism=2;
  JobGraph jobGraph=new JobGraph("Iterative MapReduce");
  JobInputVertex input=JobGraphUtils.createInput(TokenTokenInputFormat.class,"file://" + PlayConstants.PLAY_DIR + "test-inputs/iterative-mapreduce/","FileInput",jobGraph,degreeOfParallelism);
  JobTaskVertex head=JobGraphUtils.createTask(BulkIterationHeadPactTask.class,"BulkIterationHead",jobGraph,degreeOfParallelism);
  TaskConfig headConfig=new TaskConfig(head.getConfiguration());
  headConfig.setDriver(MapDriver.class);
  headConfig.setStubClass(AppendTokenMapper.class);
  headConfig.setMemorySize(10 * JobGraphUtils.MEGABYTE);
  headConfig.setBackChannelMemoryFraction(0.8f);
  headConfig.setNumberOfIterations(3);
  headConfig.setComparatorFactoryForOutput(PactRecordComparatorFactory.class,0);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(head.getConfiguration(),headConfig.getPrefixForOutputParameters(0),new int[]{0},new Class[]{PactString.class});
  JobTaskVertex tail=JobGraphUtils.createTask(BulkIterationTailPactTask.class,"BulkIterationTail",jobGraph,degreeOfParallelism);
  TaskConfig tailConfig=new TaskConfig(tail.getConfiguration());
  tailConfig.setLocalStrategy(TaskConfig.LocalStrategy.SORT);
  tailConfig.setDriver(ReduceDriver.class);
  tailConfig.setStubClass(AppendTokenReducer.class);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(tail.getConfiguration(),tailConfig.getPrefixForInputParameters(0),new int[]{0},new Class[]{PactString.class});
  tailConfig.setMemorySize(3 * JobGraphUtils.MEGABYTE);
  tailConfig.setNumFilehandles(2);
  tailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,degreeOfParallelism);
  JobOutputVertex sync=JobGraphUtils.createSync(jobGraph,degreeOfParallelism);
  JobOutputVertex output=JobGraphUtils.createFileOutput(jobGraph,"FinalOutput",degreeOfParallelism);
  TaskConfig outputConfig=new TaskConfig(output.getConfiguration());
  outputConfig.setStubClass(AppendTokenOutFormat.class);
  outputConfig.setStubParameter(FileOutputFormat.FILE_PARAMETER_KEY,"file:///tmp/stratosphere/iterations");
  JobOutputVertex fakeTailOutput=JobGraphUtils.createFakeOutput(jobGraph,"FakeTailOutput",degreeOfParallelism);
  JobGraphUtils.connectLocal(input,head);
  JobGraphUtils.connectLocal(head,tail,DistributionPattern.BIPARTITE,ShipStrategy.PARTITION_HASH);
  JobGraphUtils.connectLocal(head,sync);
  JobGraphUtils.connectLocal(head,output);
  JobGraphUtils.connectLocal(tail,fakeTailOutput);
  head.setVertexToShareInstancesWith(tail);
  GlobalConfiguration.loadConfiguration(PlayConstants.PLAY_DIR + "local-conf");
  Configuration conf=GlobalConfiguration.getConfiguration();
  JobGraphUtils.submit(jobGraph,conf);
}
