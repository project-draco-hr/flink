{
  final EvaluationExpression REMOVED=new UnevaluableExpression("Removed value");
  EvaluationExpression taggedValues=transformRecursively(new TransformFunction(){
    @Override public EvaluationExpression call(    EvaluationExpression evaluationExpression){
      if (predicate.isTrue(evaluationExpression))       return REMOVED;
      if (evaluationExpression instanceof ContainerExpression) {
        List<EvaluationExpression> children=new IdentityList<EvaluationExpression>();
        children.addAll(((ContainerExpression)evaluationExpression).getChildren());
        children.removeAll(Arrays.asList(REMOVED));
        ((ContainerExpression)evaluationExpression).setChildren(children);
      }
      return evaluationExpression;
    }
  }
);
  return taggedValues.replace(new IsSamePredicate(REMOVED),REMOVED);
}
