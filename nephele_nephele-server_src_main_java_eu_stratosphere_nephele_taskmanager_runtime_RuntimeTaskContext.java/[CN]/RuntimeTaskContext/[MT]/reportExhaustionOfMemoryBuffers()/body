{
  if (this.ephemeralCheckpoint == null) {
    return;
  }
  if (!this.ephemeralCheckpoint.isUndecided()) {
    return;
  }
  final RuntimeEnvironment environment=this.task.getRuntimeEnvironment();
  System.out.println("PACT input/output for task " + environment.getTaskNameWithIndex() + ": "+ this.task.getPACTInputOutputRatio());
  final long timestamp=System.currentTimeMillis();
  if (environment.getInputGate(0) != null && environment.getInputGate(0).getExecutionStart() < timestamp) {
    this.startTime=environment.getInputGate(0).getExecutionStart();
  }
  LOG.info("Task " + environment.getTaskNameWithIndex() + " started "+ this.startTime);
  ThreadMXBean threadBean=ManagementFactory.getThreadMXBean();
  long userCPU=(threadBean.getCurrentThreadUserTime() / NANO_TO_MILLISECONDS) * 100 / (timestamp - this.startTime);
  LOG.info("USER CPU for " + environment.getTaskNameWithIndex() + " : "+ userCPU);
  final Map<ChannelID,Long> channelUtilization=new HashMap<ChannelID,Long>();
  long totalOutputAmount=0;
  int numrec=0;
  long averageOutputRecordSize=0;
  for (int i=0; i < environment.getNumberOfOutputGates(); ++i) {
    final OutputGate<? extends Record> outputGate=environment.getOutputGate(i);
    numrec+=outputGate.getNumRecords();
    for (int j=0; j < outputGate.getNumberOfOutputChannels(); ++j) {
      final AbstractOutputChannel<? extends Record> outputChannel=outputGate.getOutputChannel(j);
      channelUtilization.put(outputChannel.getID(),Long.valueOf(outputChannel.getAmountOfDataTransmitted()));
      totalOutputAmount+=outputChannel.getAmountOfDataTransmitted();
    }
  }
  if (numrec != 0) {
    averageOutputRecordSize=totalOutputAmount / numrec;
  }
  boolean allClosed=true;
  int numinrec=0;
  long totalInputAmount=0;
  long averageInputRecordSize=0;
  for (int i=0; i < environment.getNumberOfInputGates(); ++i) {
    final InputGate<? extends Record> inputGate=environment.getInputGate(i);
    numinrec+=inputGate.getNumRecords();
    for (int j=0; j < inputGate.getNumberOfInputChannels(); ++j) {
      final AbstractInputChannel<? extends Record> inputChannel=inputGate.getInputChannel(j);
      channelUtilization.put(inputChannel.getID(),Long.valueOf(inputChannel.getAmountOfDataTransmitted()));
      totalInputAmount+=inputChannel.getAmountOfDataTransmitted();
      try {
        if (!inputChannel.isClosed()) {
          allClosed=false;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  if (numinrec != 0) {
    averageInputRecordSize=totalInputAmount / numinrec;
  }
  final ResourceUtilizationSnapshot rus=new ResourceUtilizationSnapshot(timestamp,channelUtilization,userCPU,totalInputAmount,totalOutputAmount,averageOutputRecordSize,averageInputRecordSize,this.task.getPACTInputOutputRatio(),allClosed);
  System.out.println("Making checkpoint decision for " + environment.getTaskNameWithIndex());
  final boolean checkpointDecision=CheckpointDecision.getDecision(this.task,rus);
  System.out.println("Checkpoint decision for " + environment.getTaskNameWithIndex() + " is "+ checkpointDecision);
  this.ephemeralCheckpoint.setCheckpointDecisionSynchronously(checkpointDecision);
}
