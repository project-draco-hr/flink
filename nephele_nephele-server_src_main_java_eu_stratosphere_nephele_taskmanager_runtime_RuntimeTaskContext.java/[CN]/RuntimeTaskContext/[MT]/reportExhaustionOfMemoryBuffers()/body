{
  if (this.ephemeralCheckpoint == null) {
    return;
  }
  if (!this.ephemeralCheckpoint.isUndecided()) {
    return;
  }
  final RuntimeEnvironment environment=this.task.getRuntimeEnvironment();
  final Map<ChannelID,Long> channelUtilization=new HashMap<ChannelID,Long>();
  long totalOutputAmount=0;
  long averageOutputRecordSize=0;
  for (int i=0; i < environment.getNumberOfOutputGates(); ++i) {
    final OutputGate<? extends Record> outputGate=environment.getOutputGate(i);
    for (int j=0; j < outputGate.getNumberOfOutputChannels(); ++j) {
      final AbstractOutputChannel<? extends Record> outputChannel=outputGate.getOutputChannel(j);
      channelUtilization.put(outputChannel.getID(),Long.valueOf(outputChannel.getAmountOfDataTransmitted()));
      totalOutputAmount+=outputChannel.getAmountOfDataTransmitted();
    }
  }
  boolean allClosed=true;
  long totalInputAmount=0;
  for (int i=0; i < environment.getNumberOfInputGates(); ++i) {
    final InputGate<? extends Record> inputGate=environment.getInputGate(i);
    for (int j=0; j < inputGate.getNumberOfInputChannels(); ++j) {
      final AbstractInputChannel<? extends Record> inputChannel=inputGate.getInputChannel(j);
      channelUtilization.put(inputChannel.getID(),Long.valueOf(inputChannel.getAmountOfDataTransmitted()));
      totalInputAmount+=inputChannel.getAmountOfDataTransmitted();
      try {
        if (!inputChannel.isClosed()) {
          allClosed=false;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  final boolean checkpointDecision=false;
  this.ephemeralCheckpoint.setCheckpointDecisionSynchronously(checkpointDecision);
}
