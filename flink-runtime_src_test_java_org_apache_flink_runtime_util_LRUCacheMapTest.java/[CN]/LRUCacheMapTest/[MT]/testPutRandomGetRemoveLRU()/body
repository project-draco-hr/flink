{
  final LRUCacheMap<Integer,Integer> lruCache=new LRUCacheMap<Integer,Integer>();
  final Random random=new Random();
  final int numEntries=5;
  final int[] expectedLruOrder=new int[numEntries];
  for (int i=0; i < numEntries; i++) {
    lruCache.put(i,i);
    expectedLruOrder[i]=i;
  }
  for (int i=0; i < numEntries * 10; i++) {
    final int randomKey=random.nextInt(numEntries);
    int currentPosition=expectedLruOrder[randomKey];
    for (int j=0; j < numEntries; j++) {
      if (expectedLruOrder[j] > currentPosition) {
        expectedLruOrder[j]--;
      }
    }
    expectedLruOrder[randomKey]=numEntries - 1;
    lruCache.get(randomKey);
  }
  for (int i=0; i < numEntries; i++) {
    int lru=lruCache.removeLRU();
    Assert.assertEquals(expectedLruOrder[lru],i);
  }
  Assert.assertEquals(0,lruCache.size());
  Assert.assertNull(lruCache.removeLRU());
}
