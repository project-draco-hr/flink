{
  KeyValuePair<Key,Value> pair=null;
  if (LOG.isInfoEnabled())   LOG.info(getLogString("Start PACT code"));
  final Iterator<InputSplit> splitIterator=getInputSplits();
  while (!this.taskCanceled && splitIterator.hasNext()) {
    final InputSplit split=splitIterator.next();
    if (LOG.isDebugEnabled())     LOG.debug(getLogString("Opening input split " + split.toString()));
    if (this.taskCanceled) {
      return;
    }
    final InputFormat format=this.format;
    try {
      format.open(split);
      if (LOG.isDebugEnabled())       LOG.debug(getLogString("Starting to read input from split " + split.toString()));
      while (!this.taskCanceled && !format.reachedEnd()) {
        pair=format.createPair();
        if (format.nextRecord(pair)) {
          this.output.collect(pair.getKey(),pair.getValue());
        }
      }
      if (!this.taskCanceled) {
        if (LOG.isDebugEnabled())         LOG.debug(getLogString("Closing input split " + split.toString()));
        format.close();
      }
    }
 catch (    Exception ex) {
      try {
        format.close();
      }
 catch (      Throwable t) {
      }
      if (!this.taskCanceled) {
        if (LOG.isErrorEnabled())         LOG.error(getLogString("Unexpected ERROR in PACT code"));
        throw ex;
      }
    }
  }
  if (!this.taskCanceled) {
    if (LOG.isInfoEnabled())     LOG.info(getLogString("Finished PACT code"));
  }
 else {
    if (LOG.isWarnEnabled())     LOG.warn(getLogString("PACT code cancelled"));
  }
}
