{
  KeyValuePair<Key,Value> pair=null;
  LOG.info("Start PACT code: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
  FileInputSplit[] splits=getFileInputSplits();
  boolean immutable=config.getMutability() == Config.Mutability.IMMUTABLE;
  for (int i=0; i < splits.length; i++) {
    if (this.taskCanceled) {
      break;
    }
    FileInputSplit split=splits[i];
    long start=split.getStart();
    long length=split.getLength();
    LOG.debug("Opening input split " + split.getPath() + " : "+ this.getEnvironment().getTaskName()+ " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
    InputSplitOpenThread isot=new InputSplitOpenThread(split);
    isot.start();
    try {
      isot.join();
    }
 catch (    InterruptedException ie) {
    }
    if (!this.taskCanceled) {
      try {
        if (!isot.fsDataInputStreamSuccessfullyObtained()) {
          throw isot.getException();
        }
        FSDataInputStream fdis=isot.getFSDataInputStream();
        format.setInput(new DistributedDataInputStream(fdis),start,length,(1024 * 1024));
        format.open();
        LOG.debug("Starting reader on file " + split.getPath() + " : "+ this.getEnvironment().getTaskName()+ " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
        if (!immutable) {
          pair=format.createPair();
        }
        while (!this.taskCanceled && !format.reachedEnd()) {
          if (immutable) {
            pair=format.createPair();
          }
          boolean valid=format.nextPair(pair);
          if (valid) {
            output.collect(pair.getKey(),pair.getValue());
          }
        }
        format.close();
        LOG.debug("Closing input split " + split.getPath() + " : "+ this.getEnvironment().getTaskName()+ " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
      }
 catch (      Exception ex) {
        if (!this.taskCanceled) {
          LOG.error("Unexpected ERROR in PACT code: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
          throw ex;
        }
      }
    }
  }
  if (!this.taskCanceled) {
    LOG.info("Finished PACT code: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
  }
 else {
    LOG.warn("PACT code cancelled: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
  }
}
