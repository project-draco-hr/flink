{
  final int numOutputs=this.config.getNumOutputs();
  final int numChained=this.config.getNumberOfChainedStubs();
  if (numChained > 0) {
    if (numOutputs != 1 || config.getOutputShipStrategy(0) != ShipStrategy.FORWARD) {
      throw new RuntimeException("Found a chained stub that is not connected to an only forward connection.");
    }
    this.chainedTasks=new ChainedTask[numChained];
    Collector previous=null;
    for (int i=numChained - 1; i >= 0; --i) {
      final ChainedTask ct;
      try {
        Class<? extends ChainedTask> ctc=this.config.getChainedTask(i);
        ct=ctc.newInstance();
      }
 catch (      Exception ex) {
        throw new RuntimeException("Could not instantiate chained task.",ex);
      }
      final TaskConfig chainedStubConf=this.config.getChainedStubConfig(i);
      final String taskName=this.config.getChainedTaskName(i);
      if (i == numChained - 1) {
        previous=AbstractPactTask.getOutputCollector(this,chainedStubConf,cl,chainedStubConf.getNumOutputs());
      }
      ct.setup(chainedStubConf,taskName,this,cl,previous);
      this.chainedTasks[i]=ct;
      previous=ct;
    }
    this.output=previous;
  }
 else {
    this.chainedTasks=new ChainedTask[0];
    this.output=AbstractPactTask.getOutputCollector(this,this.config,cl,numOutputs);
  }
}
