{
  Ordering order=new Ordering(0,PactInteger.class,Order.ASCENDING);
  order.appendOrdering(5,PactString.class,Order.ASCENDING);
  order.appendOrdering(4,PactInteger.class,Order.DESCENDING);
  DataDistribution<PactRecord> dd=new PactRecordDataDistribution(order,new Key[][]{{new PactInteger(1),new PactString("A"),new PactInteger(1)},{new PactInteger(2),new PactString("A"),new PactInteger(1)},{new PactInteger(3),new PactString("A"),new PactInteger(1)}});
  Assert.assertTrue(dd != null);
  int[] keyPos=dd.getBoundaryKeyPositions();
  Assert.assertTrue(keyPos.length == 3);
  Assert.assertTrue(keyPos[0] == 0);
  Assert.assertTrue(keyPos[1] == 5);
  Assert.assertTrue(keyPos[2] == 4);
  Class<? extends Key>[] keyTypes=dd.getBoundaryKeyTypes();
  Assert.assertTrue(keyTypes.length == 3);
  Assert.assertTrue(keyTypes[0].equals(PactInteger.class));
  Assert.assertTrue(keyTypes[1].equals(PactString.class));
  Assert.assertTrue(keyTypes[2].equals(PactInteger.class));
  Order[] keyOrders=dd.getBoundaryKeyOrders();
  Assert.assertTrue(keyOrders.length == 3);
  Assert.assertTrue(keyOrders[0].equals(Order.ASCENDING));
  Assert.assertTrue(keyOrders[1].equals(Order.ASCENDING));
  Assert.assertTrue(keyOrders[2].equals(Order.DESCENDING));
  dd=new PactRecordDataDistribution(order,new Key[][]{{new PactInteger(1),new PactString("A"),new PactInteger(1)},{new PactInteger(1),new PactString("B"),new PactInteger(1)},{new PactInteger(1),new PactString("C"),new PactInteger(1)}});
  Assert.assertTrue(dd != null);
  dd=new PactRecordDataDistribution(order,new Key[][]{{new PactInteger(1),new PactString("A"),new PactInteger(3)},{new PactInteger(2),new PactString("A"),new PactInteger(2)},{new PactInteger(3),new PactString("A"),new PactInteger(1)}});
  Assert.assertTrue(dd != null);
  dd=new PactRecordDataDistribution(order,new Key[][]{{new PactInteger(1),new PactString("A")},{new PactInteger(2),new PactString("A")},{new PactInteger(3),new PactString("A")}});
  Assert.assertTrue(dd != null);
  try {
    dd=new PactRecordDataDistribution(order,new Key[][]{{new PactInteger(1),new PactString("A"),new PactDouble(1.3d)},{new PactInteger(2),new PactString("B"),new PactInteger(1)}});
    Assert.fail("Data distribution accepts incorrect key types");
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    dd=new PactRecordDataDistribution(order,new Key[][]{{new PactInteger(1)},{new PactInteger(2),new PactInteger(2)},{new PactInteger(3)}});
    Assert.fail("Data distribution accepts bucket boundaries with inconsistent many keys");
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    dd=new PactRecordDataDistribution(order,new Key[][]{{new PactInteger(1),new PactString("A"),new PactInteger(3)},{new PactInteger(1),new PactString("A"),new PactInteger(2)},{new PactInteger(1),new PactString("A"),new PactInteger(3)}});
    Assert.fail("Data distribution accepts bucket boundaries in incorrect order");
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    dd=new PactRecordDataDistribution(order,new Key[][]{{new PactInteger(1),new PactString("A"),new PactInteger(3)},{new PactInteger(1),new PactString("B"),new PactInteger(2)},{new PactInteger(1),new PactString("A"),new PactInteger(3)}});
    Assert.fail("Data distribution accepts bucket boundaries in incorrect order");
  }
 catch (  IllegalArgumentException iae) {
  }
}
