{
  DataDistribution<PactRecord> dd=new PactRecordDataDistribution(new int[]{0,5,4},new Key[][]{{new PactInteger(1),new PactString("A"),new PactInteger(1)},{new PactInteger(2),new PactString("A"),new PactInteger(1)},{new PactInteger(3),new PactString("A"),new PactInteger(1)}});
  Assert.assertTrue(dd != null);
  try {
    dd=new PactRecordDataDistribution(new int[]{0,5,4},new Key[][]{{new PactInteger(1),new PactString("A")},{new PactInteger(2),new PactString("A")},{new PactInteger(3),new PactString("A")}});
    Assert.fail("Data distribution accepts key position and key boundary arrays of different length");
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    dd=new PactRecordDataDistribution(new int[]{0,5,4},new Key[][]{{new PactInteger(1),new PactString("A"),new PactDouble(1.3d)},{new PactInteger(2),new PactString("B"),new PactInteger(1)}});
    Assert.fail("Data distribution accepts incorrect key types");
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    dd=new PactRecordDataDistribution(new int[]{0,5},new Key[][]{{new PactInteger(1),new PactInteger(2)},{new PactInteger(2),new PactInteger(2)},{new PactInteger(3)}});
    Assert.fail("Data distribution accepts bucket boundaries with inconsistent many keys");
  }
 catch (  IllegalArgumentException iae) {
  }
}
