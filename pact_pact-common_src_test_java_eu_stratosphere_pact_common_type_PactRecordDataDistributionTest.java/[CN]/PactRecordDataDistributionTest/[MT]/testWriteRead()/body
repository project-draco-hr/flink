{
  DataDistribution<PactRecord> ddWrite=new PactRecordDataDistribution(new int[]{0,5,4},new Key[][]{{new PactInteger(1),new PactString("A"),new PactInteger(1)},{new PactInteger(2),new PactString("A"),new PactInteger(1)},{new PactInteger(2),new PactString("B"),new PactInteger(4)},{new PactInteger(2),new PactString("B"),new PactInteger(3)},{new PactInteger(2),new PactString("B"),new PactInteger(2)}});
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  final DataOutputStream dos=new DataOutputStream(baos);
  try {
    ddWrite.write(dos);
  }
 catch (  IOException e) {
    Assert.fail("Error serializing the DataDistribution: " + e.getMessage());
  }
  byte[] seralizedDD=baos.toByteArray();
  final ByteArrayInputStream bais=new ByteArrayInputStream(seralizedDD);
  final DataInputStream in=new DataInputStream(bais);
  DataDistribution<PactRecord> ddRead=new PactRecordDataDistribution();
  try {
    ddRead.read(in);
  }
 catch (  Exception ex) {
    Assert.fail("The deserialization of the encoded data distribution caused an error");
  }
  for (int i=0; i < 6; i++) {
    PactRecord recW=ddWrite.getBucketBoundary(0,6);
    PactRecord recR=ddWrite.getBucketBoundary(0,6);
    Assert.assertTrue(recW.getField(0,PactInteger.class).compareTo(recR.getField(0,PactInteger.class)) == 0);
    Assert.assertTrue(recW.getField(5,PactString.class).compareTo(recR.getField(5,PactString.class)) == 0);
    Assert.assertTrue(recW.getField(4,PactInteger.class).compareTo(recR.getField(4,PactInteger.class)) == 0);
  }
}
