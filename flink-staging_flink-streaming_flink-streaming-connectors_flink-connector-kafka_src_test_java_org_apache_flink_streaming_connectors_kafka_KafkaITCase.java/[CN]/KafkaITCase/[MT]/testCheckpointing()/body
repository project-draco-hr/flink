{
  createTestTopic("testCheckpointing",1,1);
  Properties props=new Properties();
  props.setProperty("zookeeper.connect",zookeeperConnectionString);
  props.setProperty("group.id","testCheckpointing");
  props.setProperty("auto.commit.enable","false");
  ConsumerConfig cc=new ConsumerConfig(props);
  PersistentKafkaSource<String> source=new PersistentKafkaSource<String>("testCheckpointing",new FakeDeserializationSchema(),cc);
  Field pendingCheckpointsField=PersistentKafkaSource.class.getDeclaredField("pendingCheckpoints");
  pendingCheckpointsField.setAccessible(true);
  LinkedMap pendingCheckpoints=(LinkedMap)pendingCheckpointsField.get(source);
  Assert.assertEquals(0,pendingCheckpoints.size());
  source.restoreState(new long[]{1337});
  source.open(new Configuration());
  long[] state1=source.snapshotState(1,15);
  Assert.assertArrayEquals(new long[]{1337},state1);
  long[] state2=source.snapshotState(2,30);
  Assert.assertArrayEquals(new long[]{1337},state2);
  Assert.assertEquals(2,pendingCheckpoints.size());
  source.notifyCheckpointComplete(1);
  Assert.assertEquals(1,pendingCheckpoints.size());
  source.notifyCheckpointComplete(2);
  Assert.assertEquals(0,pendingCheckpoints.size());
  source.notifyCheckpointComplete(666);
  Assert.assertEquals(0,pendingCheckpoints.size());
  for (int i=0; i < 500; i++) {
    source.snapshotState(i,15 * i);
  }
  Assert.assertEquals(500,pendingCheckpoints.size());
  source.notifyCheckpointComplete(498);
  Assert.assertEquals(1,pendingCheckpoints.size());
  source.notifyCheckpointComplete(490);
  source.notifyCheckpointComplete(499);
  Assert.assertEquals(0,pendingCheckpoints.size());
}
