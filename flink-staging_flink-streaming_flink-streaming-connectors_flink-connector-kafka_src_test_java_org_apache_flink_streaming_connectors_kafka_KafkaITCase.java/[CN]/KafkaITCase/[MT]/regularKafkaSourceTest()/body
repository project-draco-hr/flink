{
  LOG.info("Starting KafkaITCase.regularKafkaSourceTest()");
  String topic="regularKafkaSourceTestTopic";
  createTestTopic(topic,1,1);
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.createLocalEnvironment(1);
  DataStreamSource<Tuple2<Long,String>> consuming=env.addSource(new KafkaSource<Tuple2<Long,String>>(zookeeperConnectionString,topic,"myFlinkGroup",new TypeInformationSerializationSchema<Tuple2<Long,String>>(new Tuple2<Long,String>(1L,""),env.getConfig()),5000));
  consuming.addSink(new SinkFunction<Tuple2<Long,String>>(){
    private static final long serialVersionUID=1L;
    int elCnt=0;
    int start=-1;
    BitSet validator=new BitSet(101);
    @Override public void invoke(    Tuple2<Long,String> value) throws Exception {
      LOG.debug("Got value = " + value);
      String[] sp=value.f1.split("-");
      int v=Integer.parseInt(sp[1]);
      assertEquals(value.f0 - 1000,(long)v);
      if (start == -1) {
        start=v;
      }
      Assert.assertFalse("Received tuple twice",validator.get(v - start));
      validator.set(v - start);
      elCnt++;
      if (elCnt == 100) {
        int nc;
        if ((nc=validator.nextClearBit(0)) != 100) {
          throw new RuntimeException("The bitset was not set to 1 on all elements. Next clear:" + nc + " Set: "+ validator);
        }
        throw new SuccessException();
      }
    }
  }
);
  DataStream<Tuple2<Long,String>> stream=env.addSource(new SourceFunction<Tuple2<Long,String>>(){
    private static final long serialVersionUID=1L;
    boolean running=true;
    @Override public void run(    SourceContext<Tuple2<Long,String>> ctx) throws Exception {
      LOG.info("Starting source.");
      int cnt=0;
      while (running) {
        ctx.collect(new Tuple2<Long,String>(1000L + cnt,"kafka-" + cnt++));
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
    @Override public void cancel(){
      LOG.info("Source got cancel()");
      running=false;
    }
  }
);
  stream.addSink(new KafkaSink<Tuple2<Long,String>>(brokerConnectionStrings,topic,new TypeInformationSerializationSchema<Tuple2<Long,String>>(new Tuple2<Long,String>(1L,""),env.getConfig())));
  tryExecute(env,"regular kafka source test");
  LOG.info("Finished KafkaITCase.regularKafkaSourceTest()");
}
