{
  try {
    final FieldList keysLeft=new FieldList(1);
    final FieldList keysRight=new FieldList(3);
    final Partitioner<Object> part=new Partitioner<Object>(){
      @Override public int partition(      Object key,      int numPartitions){
        return 0;
      }
    }
;
    final Partitioner<Object> part2=new Partitioner<Object>(){
      @Override public int partition(      Object key,      int numPartitions){
        return 0;
      }
    }
;
    SortMergeJoinDescriptor descr=new SortMergeJoinDescriptor(keysLeft,keysRight);
{
      RequestedGlobalProperties reqLeft=new RequestedGlobalProperties();
      reqLeft.setAnyPartitioning(keysLeft);
      RequestedGlobalProperties reqRight=new RequestedGlobalProperties();
      reqRight.setAnyPartitioning(keysRight);
      GlobalProperties propsLeft=new GlobalProperties();
      propsLeft.setHashPartitioned(keysLeft);
      GlobalProperties propsRight=new GlobalProperties();
      propsRight.setCustomPartitioned(keysRight,part);
      assertFalse(descr.areCompatible(reqLeft,reqRight,propsLeft,propsRight));
    }
{
      RequestedGlobalProperties reqLeft=new RequestedGlobalProperties();
      reqLeft.setAnyPartitioning(keysLeft);
      RequestedGlobalProperties reqRight=new RequestedGlobalProperties();
      reqRight.setAnyPartitioning(keysRight);
      GlobalProperties propsLeft=new GlobalProperties();
      propsLeft.setCustomPartitioned(keysLeft,part);
      GlobalProperties propsRight=new GlobalProperties();
      propsRight.setCustomPartitioned(keysRight,part2);
      assertFalse(descr.areCompatible(reqLeft,reqRight,propsLeft,propsRight));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
