{
  CoStreamWindow<Integer,Integer,Integer> invokable1=new CoStreamWindow<Integer,Integer,Integer>(new MyCoGroup1(),2,1,new TimestampWrapper<Integer>(new MyTS1(),1),new TimestampWrapper<Integer>(new MyTS1(),1));
  List<Integer> input11=new ArrayList<Integer>();
  input11.add(1);
  input11.add(1);
  input11.add(2);
  input11.add(3);
  input11.add(3);
  List<Integer> input12=new ArrayList<Integer>();
  input12.add(1);
  input12.add(2);
  input12.add(3);
  input12.add(3);
  input12.add(5);
  List<Integer> expected1=new ArrayList<Integer>();
  expected1.add(3);
  expected1.add(2);
  expected1.add(3);
  expected1.add(3);
  expected1.add(2);
  expected1.add(2);
  expected1.add(0);
  expected1.add(1);
  List<Integer> actual1=MockCoContext.createAndExecute(invokable1,input11,input12);
  assertEquals(expected1,actual1);
  CoStreamWindow<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>,Integer> invokable2=new CoStreamWindow<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>,Integer>(new MyCoGroup2(),2,3,new TimestampWrapper<Tuple2<Integer,Integer>>(new MyTS2(),1),new TimestampWrapper<Tuple2<Integer,Integer>>(new MyTS2(),1));
  List<Tuple2<Integer,Integer>> input21=new ArrayList<Tuple2<Integer,Integer>>();
  input21.add(new Tuple2<Integer,Integer>(1,1));
  input21.add(new Tuple2<Integer,Integer>(1,2));
  input21.add(new Tuple2<Integer,Integer>(2,3));
  input21.add(new Tuple2<Integer,Integer>(3,4));
  input21.add(new Tuple2<Integer,Integer>(3,5));
  input21.add(new Tuple2<Integer,Integer>(4,6));
  input21.add(new Tuple2<Integer,Integer>(4,7));
  input21.add(new Tuple2<Integer,Integer>(5,8));
  List<Tuple2<Integer,Integer>> input22=new ArrayList<Tuple2<Integer,Integer>>();
  input22.add(new Tuple2<Integer,Integer>(1,1));
  input22.add(new Tuple2<Integer,Integer>(2,0));
  input22.add(new Tuple2<Integer,Integer>(2,2));
  input22.add(new Tuple2<Integer,Integer>(3,9));
  input22.add(new Tuple2<Integer,Integer>(3,4));
  input22.add(new Tuple2<Integer,Integer>(4,10));
  input22.add(new Tuple2<Integer,Integer>(5,8));
  input22.add(new Tuple2<Integer,Integer>(5,7));
  List<Integer> expected2=new ArrayList<Integer>();
  expected2.add(1);
  expected2.add(2);
  expected2.add(8);
  expected2.add(7);
  List<Integer> actual2=MockCoContext.createAndExecute(invokable2,input21,input22);
  assertEquals(expected2,actual2);
}
