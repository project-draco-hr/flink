{
  newKeyGroup=false;
  newKVState=false;
  final RocksIterator rocksIterator=currentSubIterator.getIterator();
  rocksIterator.next();
  byte[] oldKey=currentSubIterator.getCurrentKey();
  if (rocksIterator.isValid()) {
    currentSubIterator.currentKey=rocksIterator.key();
    if (isDifferentKeyGroup(oldKey,currentSubIterator.getCurrentKey())) {
      heap.offer(currentSubIterator);
      currentSubIterator=heap.poll();
      newKVState=currentSubIterator.getIterator() != rocksIterator;
      detectNewKeyGroup(oldKey);
    }
  }
 else   if (heap.isEmpty()) {
    valid=false;
  }
 else {
    currentSubIterator=heap.poll();
    newKVState=true;
    detectNewKeyGroup(oldKey);
  }
}
