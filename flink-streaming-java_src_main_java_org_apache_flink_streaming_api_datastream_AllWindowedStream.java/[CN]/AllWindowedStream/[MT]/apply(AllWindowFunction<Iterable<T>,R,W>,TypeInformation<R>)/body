{
  function=input.getExecutionEnvironment().clean(function);
  String callLocation=Utils.getCallLocationName();
  String udfName="AllWindowedStream." + callLocation;
  SingleOutputStreamOperator<R,?> result=createFastTimeOperatorIfValid(function,resultType,udfName);
  if (result != null) {
    return result;
  }
  String opName="TriggerWindow(" + windowAssigner + ", "+ trigger+ ", "+ udfName+ ")";
  NonKeyedWindowOperator<T,R,W> operator;
  boolean setProcessingTime=input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime;
  if (evictor != null) {
    operator=new EvictingNonKeyedWindowOperator<>(windowAssigner,windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),new HeapWindowBuffer.Factory<T>(),function,trigger,evictor).enableSetProcessingTime(setProcessingTime);
  }
 else {
    operator=new NonKeyedWindowOperator<>(windowAssigner,windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),new HeapWindowBuffer.Factory<T>(),function,trigger).enableSetProcessingTime(setProcessingTime);
  }
  return input.transform(opName,resultType,operator).setParallelism(1);
}
