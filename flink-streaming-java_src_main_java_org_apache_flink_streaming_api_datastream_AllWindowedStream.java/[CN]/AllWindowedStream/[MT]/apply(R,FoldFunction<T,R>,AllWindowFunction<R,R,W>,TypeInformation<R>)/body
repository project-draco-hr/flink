{
  if (foldFunction instanceof RichFunction) {
    throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.");
  }
  if (windowAssigner instanceof MergingWindowAssigner) {
    throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.");
  }
  function=input.getExecutionEnvironment().clean(function);
  foldFunction=input.getExecutionEnvironment().clean(foldFunction);
  String callLocation=Utils.getCallLocationName();
  String udfName="WindowedStream." + callLocation;
  String opName;
  KeySelector<T,Byte> keySel=input.getKeySelector();
  OneInputStreamOperator<T,R> operator;
  if (evictor != null) {
    ListStateDescriptor<StreamRecord<T>> stateDesc=new ListStateDescriptor<>("window-contents",new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())));
    opName="TriggerWindow(" + windowAssigner + ", "+ stateDesc+ ", "+ trigger+ ", "+ evictor+ ", "+ udfName+ ")";
    operator=new EvictingWindowOperator<>(windowAssigner,windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),keySel,input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),stateDesc,new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue,foldFunction,function)),trigger,evictor);
  }
 else {
    FoldingStateDescriptor<T,R> stateDesc=new FoldingStateDescriptor<>("window-contents",initialValue,foldFunction,resultType);
    opName="TriggerWindow(" + windowAssigner + ", "+ stateDesc+ ", "+ trigger+ ", "+ udfName+ ")";
    operator=new WindowOperator<>(windowAssigner,windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),keySel,input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),stateDesc,new InternalSingleValueAllWindowFunction<>(function),trigger);
  }
  return input.transform(opName,resultType,operator).setParallelism(1);
}
