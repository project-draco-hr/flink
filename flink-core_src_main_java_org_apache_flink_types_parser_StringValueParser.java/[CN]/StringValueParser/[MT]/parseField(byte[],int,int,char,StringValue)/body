{
  this.result=reusable;
  int i=startPos;
  final byte delByte=(byte)delim;
  byte current;
  while (i < length && ((current=bytes[i]) == WHITESPACE_SPACE || current == WHITESPACE_TAB)) {
    i++;
  }
  if (i < length && bytes[i] == QUOTE_DOUBLE) {
    i++;
    int quoteStart=i;
    while (i < length && bytes[i] != QUOTE_DOUBLE) {
      i++;
    }
    if (i < length) {
      reusable.setValueAscii(bytes,quoteStart,i - quoteStart);
      i++;
      while (i < length && (current=bytes[i]) != delByte) {
        if (current == WHITESPACE_SPACE || current == WHITESPACE_TAB) {
          i++;
        }
 else {
          setErrorState(ParseErrorState.UNQUOTED_CHARS_AFTER_QUOTED_STRING);
          return -1;
        }
      }
      return (i == length ? length : i + 1);
    }
 else {
      setErrorState(ParseErrorState.UNTERMINATED_QUOTED_STRING);
      return -1;
    }
  }
 else {
    while (i < length && bytes[i] != delByte) {
      i++;
    }
    reusable.setValueAscii(bytes,startPos,i - startPos);
    return (i == length ? length : i + 1);
  }
}
