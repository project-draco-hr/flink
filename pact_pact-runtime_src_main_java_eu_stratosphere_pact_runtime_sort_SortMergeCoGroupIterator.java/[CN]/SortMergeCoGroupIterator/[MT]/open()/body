{
  returnStatus=ReturnStatus.RETURN_NONE;
  matchStatus=MatchStatus.NONE_REMAINED;
  try {
    final Comparator<K> keyComparator=new Comparator<K>(){
      @Override public int compare(      K k1,      K k2){
        return k1.compareTo(k2);
      }
    }
;
{
      final SerializationFactory<K> keySerialization=new WritableSerializationFactory<K>(keyClass);
      final SerializationFactory<V1> valSerialization=new WritableSerializationFactory<V1>(valueClass1);
      sortMerger1=new UnilateralSortMerger<K,V1>(memoryManager,ioManager,numSortBufferPerChannel,sizeSortBufferPerChannel,ioMemoryPerChannel,fileHandlesPerChannel,keySerialization,valSerialization,keyComparator,reader1,0.1f,parentTask);
      iterator1=new KeyValueIterator<V1>(sortMerger1.getIterator());
    }
{
      final SerializationFactory<K> keySerialization=new WritableSerializationFactory<K>(keyClass);
      final SerializationFactory<V2> valSerialization=new WritableSerializationFactory<V2>(valueClass2);
      sortMerger2=new UnilateralSortMerger<K,V2>(memoryManager,ioManager,numSortBufferPerChannel,sizeSortBufferPerChannel,ioMemoryPerChannel,fileHandlesPerChannel,keySerialization,valSerialization,keyComparator,reader2,0.1f,parentTask);
      iterator2=new KeyValueIterator<V2>(sortMerger2.getIterator());
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}
