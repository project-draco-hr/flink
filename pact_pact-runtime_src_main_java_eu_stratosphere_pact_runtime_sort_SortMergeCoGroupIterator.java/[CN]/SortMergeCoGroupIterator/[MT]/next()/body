{
  Key[] keys1=null;
  Key[] keys2=null;
  if (matchStatus != MatchStatus.FIRST_EMPTY) {
    if (matchStatus == MatchStatus.FIRST_REMAINED) {
      keys1=iterator1.getKeys();
    }
 else {
      if (iterator1.nextKey()) {
        keys1=iterator1.getKeys();
      }
    }
  }
  if (matchStatus != MatchStatus.SECOND_EMPTY) {
    if (matchStatus == MatchStatus.SECOND_REMAINED) {
      keys2=iterator2.getKeys();
    }
 else {
      if (iterator2.nextKey()) {
        keys2=iterator2.getKeys();
      }
    }
  }
  if (keys1 == null && keys2 == null) {
    return false;
  }
 else   if (keys1 == null && keys2 != null) {
    returnStatus=ReturnStatus.RETURN_SECOND;
    matchStatus=MatchStatus.FIRST_EMPTY;
    return true;
  }
 else   if (keys1 != null && keys2 == null) {
    returnStatus=ReturnStatus.RETURN_FIRST;
    matchStatus=MatchStatus.SECOND_EMPTY;
    return true;
  }
 else {
    int comp=0;
    for (int i=0; i < keys1.length; i++) {
      int c=keys1[i].compareTo(keys2[i]);
      if (c != 0) {
        comp=c;
        break;
      }
    }
    if (0 == comp) {
      returnStatus=ReturnStatus.RETURN_BOTH;
      matchStatus=MatchStatus.NONE_REMAINED;
    }
 else     if (0 > comp) {
      returnStatus=ReturnStatus.RETURN_FIRST;
      matchStatus=MatchStatus.SECOND_REMAINED;
    }
 else {
      returnStatus=ReturnStatus.RETURN_SECOND;
      matchStatus=MatchStatus.FIRST_REMAINED;
    }
    return true;
  }
}
