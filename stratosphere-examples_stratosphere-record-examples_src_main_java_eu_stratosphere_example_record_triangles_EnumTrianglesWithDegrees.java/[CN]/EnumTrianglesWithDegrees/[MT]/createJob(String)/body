{
  final int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String edgeInput=args.length > 1 ? args[1] : "";
  final String output=args.length > 2 ? args[2] : "";
  final char delimiter=args.length > 3 ? (char)Integer.parseInt(args[3]) : ',';
  FileDataSource edges=new FileDataSource(new EdgeInputFormat(),edgeInput,"Input Edges");
  edges.setParameter(EdgeInputFormat.ID_DELIMITER_CHAR,delimiter);
  MapOperator projectEdge=MapOperator.builder(new ProjectEdge()).input(edges).name("Project Edge").build();
  ReduceOperator edgeCounter=ReduceOperator.builder(new CountEdges(),PactInteger.class,0).input(projectEdge).name("Count Edges for Vertex").build();
  ReduceOperator countJoiner=ReduceOperator.builder(new JoinCountsAndUniquify(),PactInteger.class,0).keyField(PactInteger.class,1).input(edgeCounter).name("Join Counts").build();
  MapOperator toLowerDegreeEdge=MapOperator.builder(new ProjectToLowerDegreeVertex()).input(countJoiner).name("Select lower-degree Edge").build();
  MapOperator projectOutCounts=MapOperator.builder(new ProjectOutCounts()).input(countJoiner).name("Project out Counts").build();
  ReduceOperator buildTriads=ReduceOperator.builder(new BuildTriads(),PactInteger.class,0).input(toLowerDegreeEdge).name("Build Triads").build();
  JoinOperator closeTriads=JoinOperator.builder(new CloseTriads(),PactInteger.class,1,0).keyField(PactInteger.class,2,1).input1(buildTriads).input2(projectOutCounts).name("Close Triads").build();
  closeTriads.setParameter("INPUT_SHIP_STRATEGY","SHIP_REPARTITION_HASH");
  closeTriads.setParameter("LOCAL_STRATEGY","LOCAL_STRATEGY_HASH_BUILD_SECOND");
  FileDataSink triangles=new FileDataSink(new TriangleOutputFormat(),output,closeTriads,"Triangles");
  Job p=new Job(triangles,"Enumerate Triangles");
  p.setDefaultParallelism(numSubTasks);
  return p;
}
