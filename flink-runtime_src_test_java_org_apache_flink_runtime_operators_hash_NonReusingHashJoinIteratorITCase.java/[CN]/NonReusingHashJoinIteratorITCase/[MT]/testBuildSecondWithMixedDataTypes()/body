{
  try {
    MutableObjectIterator<IntPair> input1=new UniformIntPairGenerator(500,40,false);
    final TupleGenerator generator2=new TupleGenerator(SEED2,500,2048,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TestData.TupleGeneratorIterator input2=new TestData.TupleGeneratorIterator(generator2,INPUT_2_SIZE);
    final Map<Integer,Collection<TupleIntPairMatch>> expectedMatchesMap=joinIntPairs(collectIntPairData(input1),collectTupleData(input2));
    final FlatJoinFunction<IntPair,Tuple2<Integer,String>,Tuple2<Integer,String>> matcher=new TupleIntPairMatchRemovingMatcher(expectedMatchesMap);
    final Collector<Tuple2<Integer,String>> collector=new DiscardingOutputCollector<>();
    input1=new UniformIntPairGenerator(500,40,false);
    generator2.reset();
    input2.reset();
    NonReusingBuildFirstHashJoinIterator<IntPair,Tuple2<Integer,String>,Tuple2<Integer,String>> iterator=new NonReusingBuildFirstHashJoinIterator<>(input1,input2,this.pairSerializer,this.pairComparator,this.recordSerializer,this.record2Comparator,this.recordPairPairComparator,this.memoryManager,this.ioManager,this.parentTask,1.0,false,false,true);
    iterator.open();
    while (iterator.callWithNextKey(matcher,collector))     ;
    iterator.close();
    for (    Entry<Integer,Collection<TupleIntPairMatch>> entry : expectedMatchesMap.entrySet()) {
      if (!entry.getValue().isEmpty()) {
        Assert.fail("Collection for key " + entry.getKey() + " is not empty");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
