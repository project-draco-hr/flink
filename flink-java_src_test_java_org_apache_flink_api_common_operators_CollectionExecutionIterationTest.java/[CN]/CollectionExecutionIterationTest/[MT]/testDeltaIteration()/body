{
  try {
    ExecutionEnvironment env=new CollectionEnvironment();
    @SuppressWarnings("unchecked") DataSet<Tuple2<Integer,Integer>> solInput=env.fromElements(new Tuple2<Integer,Integer>(1,0),new Tuple2<Integer,Integer>(2,0),new Tuple2<Integer,Integer>(3,0),new Tuple2<Integer,Integer>(4,0));
    @SuppressWarnings("unchecked") DataSet<Tuple1<Integer>> workInput=env.fromElements(new Tuple1<Integer>(1),new Tuple1<Integer>(2),new Tuple1<Integer>(3),new Tuple1<Integer>(4));
    DeltaIteration<Tuple2<Integer,Integer>,Tuple1<Integer>> iteration=solInput.iterateDelta(workInput,10,0);
    DataSet<Tuple2<Integer,Integer>> solDelta=iteration.getSolutionSet().join(iteration.getWorkset()).where(0).equalTo(0).with(new JoinFunction<Tuple2<Integer,Integer>,Tuple1<Integer>,Tuple2<Integer,Integer>>(){
      @Override public Tuple2<Integer,Integer> join(      Tuple2<Integer,Integer> first,      Tuple1<Integer> second) throws Exception {
        return new Tuple2<Integer,Integer>(first.f0,first.f1 + 1);
      }
    }
);
    DataSet<Tuple1<Integer>> nextWorkset=solDelta.flatMap(new FlatMapFunction<Tuple2<Integer,Integer>,Tuple1<Integer>>(){
      @Override public void flatMap(      Tuple2<Integer,Integer> in,      Collector<Tuple1<Integer>> out) throws Exception {
        if (in.f1 < in.f0) {
          out.collect(new Tuple1<Integer>(in.f0));
        }
      }
    }
);
    List<Tuple2<Integer,Integer>> collected=new ArrayList<Tuple2<Integer,Integer>>();
    iteration.closeWith(solDelta,nextWorkset).output(new LocalCollectionOutputFormat<Tuple2<Integer,Integer>>(collected));
    env.execute();
    for (    Tuple2<Integer,Integer> t : collected) {
      assertEquals(t.f0,t.f1);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
