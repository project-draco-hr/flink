{
  return new Iterator<KeyValuePair<K,V>>(){
    private final int size=size();
    private int current=0;
    @Override public boolean hasNext(){
      return this.current < this.size;
    }
    @Override public KeyValuePair<K,V> next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      try {
        final K key=keySerialization.newInstance();
        final V val=valSerialization.newInstance();
        final KeyValuePair<K,V> pair=new KeyValuePair<K,V>(key,val);
        getKeyValuePair(pair,this.current++);
        return pair;
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
