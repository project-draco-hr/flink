{
  return new Iterator<KeyValuePair<K,V>>(){
    int current=0;
    @Override public boolean hasNext(){
      if (current < size()) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override public KeyValuePair<K,V> next(){
      try {
        keyDeserializer.open(memory.inputView);
        valDeserializer.open(memory.inputView);
        int index=readOffset(current);
        int keyStart=readIndexKeyAbs(index);
        int valStart=readIndexValueAbs(index);
        K key=keySerialization.newInstance();
        V val=valSerialization.newInstance();
        memory.inputView.setPosition(keyStart);
        keyDeserializer.deserialize(key);
        memory.inputView.setPosition(valStart);
        valDeserializer.deserialize(val);
        current++;
        return new KeyValuePair<K,V>(key,val);
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
    @Override public void remove(){
    }
  }
;
}
