{
  if (this.taskVertices.isEmpty()) {
    return Collections.emptyList();
  }
  List<JobVertex> sorted=new ArrayList<JobVertex>(this.taskVertices.size());
  Set<JobVertex> remaining=new LinkedHashSet<JobVertex>(this.taskVertices.values());
{
    Iterator<JobVertex> iter=remaining.iterator();
    while (iter.hasNext()) {
      JobVertex vertex=iter.next();
      if (vertex.hasNoConnectedInputs()) {
        sorted.add(vertex);
        iter.remove();
      }
    }
  }
  int startNodePos=0;
  while (!remaining.isEmpty()) {
    if (startNodePos >= sorted.size()) {
      throw new InvalidProgramException("The job graph is cyclic.");
    }
    JobVertex current=sorted.get(startNodePos++);
    addNodesThatHaveNoNewPredecessors(current,sorted,remaining);
  }
  return sorted;
}
