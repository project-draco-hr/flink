{
  final Configuration conf=getOperator().getParameters();
  final String shipStrategy=conf.getString(Optimizer.HINT_SHIP_STRATEGY,null);
  final ShipStrategyType preSet;
  if (shipStrategy != null) {
    if (shipStrategy.equalsIgnoreCase(Optimizer.HINT_SHIP_STRATEGY_REPARTITION_HASH)) {
      preSet=ShipStrategyType.PARTITION_HASH;
    }
 else     if (shipStrategy.equalsIgnoreCase(Optimizer.HINT_SHIP_STRATEGY_REPARTITION_RANGE)) {
      preSet=ShipStrategyType.PARTITION_RANGE;
    }
 else     if (shipStrategy.equalsIgnoreCase(Optimizer.HINT_SHIP_STRATEGY_FORWARD)) {
      preSet=ShipStrategyType.FORWARD;
    }
 else     if (shipStrategy.equalsIgnoreCase(Optimizer.HINT_SHIP_STRATEGY_REPARTITION)) {
      preSet=ShipStrategyType.PARTITION_RANDOM;
    }
 else {
      throw new CompilerException("Unrecognized ship strategy hint: " + shipStrategy);
    }
  }
 else {
    preSet=null;
  }
  Operator<?> children=((SingleInputOperator<?,?,?>)getOperator()).getInput();
  OptimizerNode pred;
  DagConnection conn;
  if (children == null) {
    throw new CompilerException("Error: Node for '" + getOperator().getName() + "' has no input.");
  }
 else {
    pred=contractToNode.get(children);
    conn=new DagConnection(pred,this,defaultExchangeMode);
    if (preSet != null) {
      conn.setShipStrategy(preSet);
    }
  }
  setIncomingConnection(conn);
  pred.addOutgoingConnection(conn);
}
