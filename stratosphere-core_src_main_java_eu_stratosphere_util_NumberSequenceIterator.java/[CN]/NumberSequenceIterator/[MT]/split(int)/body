{
  if (numPartitions < 1) {
    throw new IllegalArgumentException("The number of partitions must be at least 1.");
  }
  if (numPartitions == 1) {
    return new NumberSequenceIterator[]{new NumberSequenceIterator(current,to)};
  }
  long elementsPerSplit;
  if (to - current >= 0) {
    elementsPerSplit=(to - current) / numPartitions;
  }
 else {
    final long halfDiff;
    if (current == Long.MIN_VALUE) {
      halfDiff=(Long.MAX_VALUE / 2 + 1) + to / 2;
    }
 else {
      long posFrom=-current;
      if (posFrom > to) {
        halfDiff=to + ((posFrom - to) / 2);
      }
 else {
        halfDiff=posFrom + ((to - posFrom) / 2);
      }
    }
    elementsPerSplit=halfDiff / numPartitions * 2;
  }
  if (elementsPerSplit < Long.MAX_VALUE) {
    long numWithExtra=-(elementsPerSplit * numPartitions) + to - current;
    if (numWithExtra > numPartitions) {
      elementsPerSplit++;
      numWithExtra-=numPartitions;
      if (numWithExtra > numPartitions) {
        throw new RuntimeException("Bug in splitting logic. To much rounding loss.");
      }
    }
    NumberSequenceIterator[] iters=new NumberSequenceIterator[numPartitions];
    long curr=current;
    int i=0;
    for (; i < numWithExtra; i++) {
      long next=curr + elementsPerSplit + 1;
      iters[i]=new NumberSequenceIterator(curr,next);
      curr=next;
    }
    for (; i < numPartitions; i++) {
      long next=curr + elementsPerSplit;
      iters[i]=new NumberSequenceIterator(curr,next);
      curr=next;
    }
    return iters;
  }
 else {
    if (numPartitions != 2) {
      throw new RuntimeException("Bug in splitting logic.");
    }
    return new NumberSequenceIterator[]{new NumberSequenceIterator(current,current + elementsPerSplit),new NumberSequenceIterator(current + elementsPerSplit,to)};
  }
}
