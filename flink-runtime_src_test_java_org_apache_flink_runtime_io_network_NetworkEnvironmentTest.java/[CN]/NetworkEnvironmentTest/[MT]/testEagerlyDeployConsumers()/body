{
  final ActorGateway jobManager=mock(ActorGateway.class);
  when(jobManager.ask(anyObject(),any(FiniteDuration.class))).thenReturn(new Promise.DefaultPromise<>().future());
  NetworkEnvironmentConfiguration config=new NetworkEnvironmentConfiguration(20,1024,MemoryType.HEAP,IOManager.IOMode.SYNC,0,0,0,Some.<NettyConfig>empty(),0,0);
  NetworkEnvironment env=new NetworkEnvironment(new NetworkBufferPool(config.numNetworkBuffers(),config.networkBufferSize(),config.memoryType()),new LocalConnectionManager(),new ResultPartitionManager(),new TaskEventDispatcher(),new KvStateRegistry(),null,config.ioMode(),config.partitionRequestInitialBackoff(),config.partitinRequestMaxBackoff());
  env.start();
  ResultPartitionConsumableNotifier resultPartitionConsumableNotifier=new ActorGatewayResultPartitionConsumableNotifier(TestingUtils.defaultExecutionContext(),jobManager,new FiniteDuration(30L,TimeUnit.SECONDS));
  JobID jobId=new JobID();
  Task mockTask=mock(Task.class);
  ResultPartition[] partitions=new ResultPartition[2];
  partitions[0]=createPartition(mockTask,"p1",jobId,true,env,resultPartitionConsumableNotifier);
  partitions[1]=createPartition(mockTask,"p2",jobId,false,env,resultPartitionConsumableNotifier);
  ResultPartitionWriter[] writers=new ResultPartitionWriter[2];
  writers[0]=new ResultPartitionWriter(partitions[0]);
  writers[1]=new ResultPartitionWriter(partitions[1]);
  when(mockTask.getAllInputGates()).thenReturn(new SingleInputGate[0]);
  when(mockTask.getAllWriters()).thenReturn(writers);
  when(mockTask.getProducedPartitions()).thenReturn(partitions);
  env.registerTask(mockTask);
  ResultPartitionID eagerPartitionId=partitions[0].getPartitionId();
  verify(jobManager,times(1)).ask(eq(new ScheduleOrUpdateConsumers(jobId,eagerPartitionId)),any(FiniteDuration.class));
}
