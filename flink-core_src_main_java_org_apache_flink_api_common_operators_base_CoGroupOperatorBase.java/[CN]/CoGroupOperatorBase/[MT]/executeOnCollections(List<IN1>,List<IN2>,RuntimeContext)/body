{
  TypeInformation<IN1> inputType1=getOperatorInfo().getFirstInputType();
  TypeInformation<IN2> inputType2=getOperatorInfo().getSecondInputType();
  int[] inputKeys1=getKeyColumns(0);
  int[] inputKeys2=getKeyColumns(1);
  boolean[] inputSortDirections1=new boolean[inputKeys1.length];
  boolean[] inputSortDirections2=new boolean[inputKeys2.length];
  Arrays.fill(inputSortDirections1,true);
  Arrays.fill(inputSortDirections2,true);
  final TypeComparator<IN1> inputComparator1=getTypeComparator(inputType1,inputKeys1,inputSortDirections1);
  final TypeComparator<IN2> inputComparator2=getTypeComparator(inputType2,inputKeys2,inputSortDirections2);
  CoGroupSortListIterator<IN1,IN2> coGroupIterator=new CoGroupSortListIterator<IN1,IN2>(input1,inputComparator1,input2,inputComparator2);
  CoGroupFunction<IN1,IN2,OUT> function=userFunction.getUserCodeObject();
  FunctionUtils.setFunctionRuntimeContext(function,ctx);
  FunctionUtils.openFunction(function,parameters);
  List<OUT> result=new ArrayList<OUT>();
  Collector<OUT> resultCollector=new ListCollector<OUT>(result);
  while (coGroupIterator.next()) {
    function.coGroup(coGroupIterator.getValues1(),coGroupIterator.getValues2(),resultCollector);
  }
  FunctionUtils.closeFunction(function);
  return result;
}
