{
  int degreeOfParallelism=2;
  JobGraph jobGraph=new JobGraph("PageRank");
  JobInputVertex pageWithRankInput=JobGraphUtils.createInput(PageWithRankInputFormat.class,"file://" + PlayConstants.PLAY_DIR + "test-inputs/pagerank/pageWithRank","PageWithRankInput",jobGraph,degreeOfParallelism);
  JobInputVertex transitionMatrixInput=JobGraphUtils.createInput(TransitionMatrixInputFormat.class,"file://" + PlayConstants.PLAY_DIR + "test-inputs/pagerank/transitionMatrix","TransitionMatrixInput",jobGraph,degreeOfParallelism);
  TaskConfig transitionMatrixInputConfig=new TaskConfig(transitionMatrixInput.getConfiguration());
  transitionMatrixInputConfig.setComparatorFactoryForOutput(PactRecordComparatorFactory.class,0);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(transitionMatrixInputConfig.getConfigForOutputParameters(0),new int[]{1},new Class[]{PactLong.class},new boolean[]{true});
  JobTaskVertex head=JobGraphUtils.createTask(IterationHeadPactTask.class,"BulkIterationHead",jobGraph,degreeOfParallelism);
  TaskConfig headConfig=new TaskConfig(head.getConfiguration());
  headConfig.setDriver(MapDriver.class);
  headConfig.setStubClass(IdentityMap.class);
  headConfig.setMemorySize(3 * JobGraphUtils.MEGABYTE);
  headConfig.setBackChannelMemoryFraction(0.8f);
  JobTaskVertex intermediate=JobGraphUtils.createTask(IterationIntermediatePactTask.class,"BulkIterationIntermediate",jobGraph,degreeOfParallelism);
  TaskConfig intermediateConfig=new TaskConfig(intermediate.getConfiguration());
  intermediateConfig.setDriver(MatchDriver.class);
  intermediateConfig.setStubClass(DotProductMatch.class);
  intermediateConfig.setLocalStrategy(TaskConfig.LocalStrategy.HYBRIDHASH_FIRST);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(intermediateConfig.getConfigForInputParameters(0),new int[]{0},new Class[]{PactLong.class},new boolean[]{true});
  PactRecordComparatorFactory.writeComparatorSetupToConfig(intermediateConfig.getConfigForInputParameters(1),new int[]{0},new Class[]{PactLong.class},new boolean[]{true});
  intermediateConfig.setMemorySize(20 * JobGraphUtils.MEGABYTE);
  intermediateConfig.setGateCached(1);
  intermediateConfig.setInputGateCacheMemoryFraction(0.5f);
  JobTaskVertex tail=JobGraphUtils.createTask(IterationTailPactTask.class,"BulkIterationTail",jobGraph,degreeOfParallelism);
  TaskConfig tailConfig=new TaskConfig(tail.getConfiguration());
  tailConfig.setLocalStrategy(TaskConfig.LocalStrategy.SORT);
  tailConfig.setDriver(ReduceDriver.class);
  tailConfig.setStubClass(DotProductReducer.class);
  PactRecordComparatorFactory.writeComparatorSetupToConfig(tailConfig.getConfigForInputParameters(0),new int[]{0},new Class[]{PactLong.class},new boolean[]{true});
  tailConfig.setMemorySize(3 * JobGraphUtils.MEGABYTE);
  tailConfig.setNumFilehandles(2);
  JobOutputVertex sync=JobGraphUtils.createSync(jobGraph,degreeOfParallelism);
  TaskConfig syncConfig=new TaskConfig(sync.getConfiguration());
  syncConfig.setNumberOfIterations(25);
  JobOutputVertex output=JobGraphUtils.createFileOutput(jobGraph,"FinalOutput",degreeOfParallelism);
  TaskConfig outputConfig=new TaskConfig(output.getConfiguration());
  outputConfig.setStubClass(PageWithRankOutFormat.class);
  outputConfig.setStubParameter(FileOutputFormat.FILE_PARAMETER_KEY,"file:///tmp/stratosphere/iterations");
  JobOutputVertex fakeTailOutput=JobGraphUtils.createFakeOutput(jobGraph,"FakeTailOutput",degreeOfParallelism);
  JobGraphUtils.connect(pageWithRankInput,head,ChannelType.INMEMORY,DistributionPattern.POINTWISE,ShipStrategyType.FORWARD);
  JobGraphUtils.connect(head,intermediate,ChannelType.NETWORK,DistributionPattern.BIPARTITE,ShipStrategyType.BROADCAST);
  JobGraphUtils.connect(transitionMatrixInput,intermediate,ChannelType.NETWORK,DistributionPattern.BIPARTITE,ShipStrategyType.PARTITION_HASH);
  intermediateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,degreeOfParallelism);
  JobGraphUtils.connect(head,sync,ChannelType.NETWORK,DistributionPattern.POINTWISE,ShipStrategyType.FORWARD);
  JobGraphUtils.connect(head,output,ChannelType.INMEMORY,DistributionPattern.POINTWISE,ShipStrategyType.FORWARD);
  JobGraphUtils.connect(tail,fakeTailOutput,ChannelType.INMEMORY,DistributionPattern.POINTWISE,ShipStrategyType.FORWARD);
  JobGraphUtils.connect(intermediate,tail,ChannelType.NETWORK,DistributionPattern.POINTWISE,ShipStrategyType.FORWARD);
  tailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  fakeTailOutput.setVertexToShareInstancesWith(tail);
  tail.setVertexToShareInstancesWith(head);
  pageWithRankInput.setVertexToShareInstancesWith(head);
  transitionMatrixInput.setVertexToShareInstancesWith(head);
  intermediate.setVertexToShareInstancesWith(head);
  output.setVertexToShareInstancesWith(head);
  sync.setVertexToShareInstancesWith(head);
  GlobalConfiguration.loadConfiguration(PlayConstants.PLAY_DIR + "local-conf");
  Configuration conf=GlobalConfiguration.getConfiguration();
  JobGraphUtils.submit(jobGraph,conf);
}
