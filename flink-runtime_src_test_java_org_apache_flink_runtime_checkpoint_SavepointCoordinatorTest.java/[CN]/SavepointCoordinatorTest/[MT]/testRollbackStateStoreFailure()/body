{
  ApplicationID appId=new ApplicationID();
  JobID jobId=new JobID();
  ExecutionJobVertex jobVertex=mockExecutionJobVertex(jobId,new JobVertexID(),4);
  HeapStateStore<Savepoint> savepointStore=spy(new HeapStateStore<Savepoint>());
  SavepointCoordinator coordinator=createSavepointCoordinator(appId,jobId,60 * 1000,jobVertex.getTaskVertices(),jobVertex.getTaskVertices(),new ExecutionVertex[]{},new MockCheckpointIdCounter(),savepointStore);
  Future<String> savepointPathFuture=coordinator.triggerSavepoint(1231273123);
  for (  ExecutionVertex vertex : jobVertex.getTaskVertices()) {
    ExecutionAttemptID attemptId=vertex.getCurrentExecutionAttempt().getAttemptId();
    coordinator.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jobId,attemptId,0,createSerializedStateHandle(vertex),0));
  }
  String savepointPath=Await.result(savepointPathFuture,FiniteDuration.Zero());
  assertNotNull(savepointPath);
  doThrow(new Exception("TestException")).when(savepointStore).getState(anyString());
  try {
    coordinator.restoreSavepoint(createExecutionJobVertexMap(jobVertex),savepointPath);
    fail("Did not throw expected Exception after rollback with savepoint store failure.");
  }
 catch (  Exception ignored) {
  }
  assertEquals(0,getSavepointPromises(coordinator).size());
  coordinator.shutdown();
}
