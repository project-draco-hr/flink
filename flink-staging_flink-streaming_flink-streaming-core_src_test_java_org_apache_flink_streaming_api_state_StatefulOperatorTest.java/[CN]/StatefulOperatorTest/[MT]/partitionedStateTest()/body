{
  List<String> out=new ArrayList<String>();
  StreamMap<Integer,String> map=createOperatorWithContext(out,new ModKey(2),null);
  StreamingRuntimeContext context=map.getRuntimeContext();
  processInputs(map,Arrays.asList(1,2,3,4,5));
  assertEquals(Arrays.asList("1","2","3","4","5"),out);
  assertEquals(ImmutableMap.of(0,2,1,3),context.getOperatorStates().get("counter").getPartitionedState());
  assertEquals(ImmutableMap.of(0,"24",1,"135"),context.getOperatorStates().get("concat").getPartitionedState());
  byte[] serializedState=InstantiationUtil.serializeObject(map.getStateSnapshotFromFunction(1,1));
  StreamMap<Integer,String> restoredMap=createOperatorWithContext(out,new ModKey(2),serializedState);
  StreamingRuntimeContext restoredContext=restoredMap.getRuntimeContext();
  assertEquals(ImmutableMap.of(0,2,1,3),restoredContext.getOperatorStates().get("counter").getPartitionedState());
  assertEquals(ImmutableMap.of(0,"24",1,"135"),restoredContext.getOperatorStates().get("concat").getPartitionedState());
  out.clear();
  processInputs(restoredMap,Arrays.asList(7,8));
  assertEquals(Arrays.asList("7","8"),out);
  assertEquals(ImmutableMap.of(0,3,1,4),restoredContext.getOperatorStates().get("counter").getPartitionedState());
  assertEquals(ImmutableMap.of(0,"248",1,"1357"),restoredContext.getOperatorStates().get("concat").getPartitionedState());
}
