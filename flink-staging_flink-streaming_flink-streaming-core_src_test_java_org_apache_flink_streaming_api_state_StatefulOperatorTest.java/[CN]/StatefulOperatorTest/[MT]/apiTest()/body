{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(3);
  KeyedDataStream<Integer> keyedStream=env.fromCollection(Arrays.asList(0,1,2,3,4,5,6)).keyBy(new ModKey(4));
  keyedStream.map(new StatefulMapper()).addSink(new SinkFunction<String>(){
    private static final long serialVersionUID=1L;
    public void invoke(    String value) throws Exception {
    }
  }
);
  keyedStream.map(new StatefulMapper2()).setParallelism(1).addSink(new SinkFunction<String>(){
    private static final long serialVersionUID=1L;
    public void invoke(    String value) throws Exception {
    }
  }
);
  try {
    keyedStream.shuffle();
    fail();
  }
 catch (  UnsupportedOperationException e) {
  }
  env.fromElements(0,1,2,2,2,3,4,3,4).keyBy(new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
).map(new PStateKeyRemovalTestMapper()).setParallelism(1).addSink(new SinkFunction<String>(){
    private static final long serialVersionUID=1L;
    public void invoke(    String value) throws Exception {
    }
  }
);
  env.execute();
}
