{
  List<String> out=new ArrayList<String>();
  StreamMap<Integer,String> map=createOperatorWithContext(out,new ModKey(2),null);
  StreamingRuntimeContext context=map.getRuntimeContext();
  processInputs(map,Arrays.asList(1,2,3,4,5));
  assertEquals(Arrays.asList("1","2","3","4","5"),out);
  assertEquals((Integer)5,context.getOperatorState("counter",0,false).value());
  assertEquals(ImmutableMap.of(0,new MutableInt(2),1,new MutableInt(3)),context.getOperatorStates().get("groupCounter").getPartitionedState());
  assertEquals("12345",context.getOperatorState("concat","",false).value());
  assertEquals((Integer)5,((StatefulMapper)map.getUserFunction()).checkpointedCounter);
  byte[] serializedState0=InstantiationUtil.serializeObject(map.getStateSnapshotFromFunction(1,1));
  byte[] serializedState=InstantiationUtil.serializeObject(createOperatorWithContext(out,new ModKey(2),serializedState0).getStateSnapshotFromFunction(1,1));
  StreamMap<Integer,String> restoredMap=createOperatorWithContext(out,new ModKey(2),serializedState);
  StreamingRuntimeContext restoredContext=restoredMap.getRuntimeContext();
  assertEquals((Integer)5,restoredContext.getOperatorState("counter",0,false).value());
  assertEquals(ImmutableMap.of(0,new MutableInt(2),1,new MutableInt(3)),context.getOperatorStates().get("groupCounter").getPartitionedState());
  assertEquals("12345",restoredContext.getOperatorState("concat","",false).value());
  assertEquals((Integer)5,((StatefulMapper)restoredMap.getUserFunction()).checkpointedCounter);
  out.clear();
  processInputs(restoredMap,Arrays.asList(7,8));
  assertEquals(Arrays.asList("7","8"),out);
  assertEquals((Integer)7,restoredContext.getOperatorState("counter",0,false).value());
  assertEquals(ImmutableMap.of(0,new MutableInt(3),1,new MutableInt(4)),restoredContext.getOperatorStates().get("groupCounter").getPartitionedState());
  assertEquals("1234578",restoredContext.getOperatorState("concat","",false).value());
  assertEquals((Integer)7,((StatefulMapper)restoredMap.getUserFunction()).checkpointedCounter);
}
