{
  if (LOG.isDebugEnabled()) {
    LOG.debug(this.taskContext.formatLogString("Reducer preprocessing done. Running Reducer code."));
  }
  final MutableObjectIterator<T> input=this.input;
  final TypeSerializer<T> serializer=this.serializer;
  final TypeComparator<T> comparator=this.comparator;
  final GenericReduce<T> function=this.taskContext.getStub();
  final Collector<T> output=this.taskContext.getOutputCollector();
  T value=input.next(serializer.createInstance());
  while (this.running && value != null) {
    comparator.setReference(value);
    T res=value;
    while ((value=input.next(serializer.createInstance())) != null) {
      if (comparator.equalToReference(value)) {
        res=function.reduce(res,value);
      }
 else {
        break;
      }
    }
    output.collect(res);
  }
}
