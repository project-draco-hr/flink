{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.get3TupleDataSet(env);
      DataSet<Tuple3<Integer,Long,String>> reduceDs=ds.groupBy(1).reduce(new Tuple3Reduce("B-)"));
      reduceDs.writeAsCsv(resultPath);
      env.execute();
      return "1,1,Hi\n" + "5,2,B-)\n" + "15,3,B-)\n"+ "34,4,B-)\n"+ "65,5,B-)\n"+ "111,6,B-)\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,Integer,String,Long>> ds=CollectionDataSets.get5TupleDataSet(env);
    DataSet<Tuple5<Integer,Long,Integer,String,Long>> reduceDs=ds.groupBy(4,0).reduce(new Tuple5Reduce());
    reduceDs.writeAsCsv(resultPath);
    env.execute();
    return "1,1,0,Hallo,1\n" + "2,3,2,Hallo Welt wie,1\n" + "2,2,1,Hallo Welt,2\n"+ "3,9,0,P-),2\n"+ "3,6,5,BCD,3\n"+ "4,17,0,P-),1\n"+ "4,17,0,P-),2\n"+ "5,11,10,GHI,1\n"+ "5,29,0,P-),2\n"+ "5,25,0,P-),3\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.get3TupleDataSet(env);
  DataSet<Tuple3<Integer,Long,String>> reduceDs=ds.groupBy(new KeySelector<Tuple3<Integer,Long,String>,Long>(){
    private static final long serialVersionUID=1L;
    @Override public Long getKey(    Tuple3<Integer,Long,String> in){
      return in.f1;
    }
  }
).reduce(new Tuple3Reduce("B-)"));
  reduceDs.writeAsCsv(resultPath);
  env.execute();
  return "1,1,Hi\n" + "5,2,B-)\n" + "15,3,B-)\n"+ "34,4,B-)\n"+ "65,5,B-)\n"+ "111,6,B-)\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<CustomType> ds=CollectionDataSets.getCustomTypeDataSet(env);
DataSet<CustomType> reduceDs=ds.groupBy(new KeySelector<CustomType,Integer>(){
  private static final long serialVersionUID=1L;
  @Override public Integer getKey(  CustomType in){
    return in.myInt;
  }
}
).reduce(new CustomTypeReduce());
reduceDs.writeAsText(resultPath);
env.execute();
return "1,0,Hi\n" + "2,3,Hello!\n" + "3,12,Hello!\n"+ "4,30,Hello!\n"+ "5,60,Hello!\n"+ "6,105,Hello!\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.get3TupleDataSet(env);
DataSet<Tuple3<Integer,Long,String>> reduceDs=ds.reduce(new AllAddingTuple3Reduce());
reduceDs.writeAsCsv(resultPath);
env.execute();
return "231,91,Hello World\n";
}
case 6:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<CustomType> ds=CollectionDataSets.getCustomTypeDataSet(env);
DataSet<CustomType> reduceDs=ds.reduce(new AllAddingCustomTypeReduce());
reduceDs.writeAsText(resultPath);
env.execute();
return "91,210,Hello!";
}
case 7:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Integer> intDs=CollectionDataSets.getIntegerDataSet(env);
DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.get3TupleDataSet(env);
DataSet<Tuple3<Integer,Long,String>> reduceDs=ds.groupBy(1).reduce(new BCTuple3Reduce()).withBroadcastSet(intDs,"ints");
reduceDs.writeAsCsv(resultPath);
env.execute();
return "1,1,Hi\n" + "5,2,55\n" + "15,3,55\n"+ "34,4,55\n"+ "65,5,55\n"+ "111,6,55\n";
}
case 8:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.get3TupleDataSet(env);
DataSet<Tuple3<Integer,Long,String>> reduceDs=ds.groupBy(1).reduce(new InputReturningTuple3Reduce());
reduceDs.writeAsCsv(resultPath);
env.execute();
return "1,1,Hi\n" + "5,2,Hi again!\n" + "15,3,Hi again!\n"+ "34,4,Hi again!\n"+ "65,5,Hi again!\n"+ "111,6,Hi again!\n";
}
case 9:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Tuple5<Integer,Long,Integer,String,Long>> ds=CollectionDataSets.get5TupleDataSet(env);
DataSet<Tuple5<Integer,Long,Integer,String,Long>> reduceDs=ds.groupBy(new KeySelector<Tuple5<Integer,Long,Integer,String,Long>,Tuple2<Integer,Long>>(){
private static final long serialVersionUID=1L;
@Override public Tuple2<Integer,Long> getKey(Tuple5<Integer,Long,Integer,String,Long> t){
return new Tuple2<Integer,Long>(t.f0,t.f4);
}
}
).reduce(new Tuple5Reduce());
reduceDs.writeAsCsv(resultPath);
env.execute();
return "1,1,0,Hallo,1\n" + "2,3,2,Hallo Welt wie,1\n" + "2,2,1,Hallo Welt,2\n"+ "3,9,0,P-),2\n"+ "3,6,5,BCD,3\n"+ "4,17,0,P-),1\n"+ "4,17,0,P-),2\n"+ "5,11,10,GHI,1\n"+ "5,29,0,P-),2\n"+ "5,25,0,P-),3\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
