{
  @SuppressWarnings("unchecked") final Keys.SelectorFunctionKeys<T,K> keys=(Keys.SelectorFunctionKeys<T,K>)rawKeys;
  TypeInformation<Tuple2<K,T>> typeInfoWithKey=new TupleTypeInfo<Tuple2<K,T>>(keys.getKeyType(),inputType);
  UnaryOperatorInformation<Tuple2<K,T>,Tuple2<K,T>> operatorInfo=new UnaryOperatorInformation<Tuple2<K,T>,Tuple2<K,T>>(typeInfoWithKey,typeInfoWithKey);
  KeyExtractingMapper<T,K> extractor=new KeyExtractingMapper<T,K>(keys.getKeyExtractor());
  MapOperatorBase<T,Tuple2<K,T>,MapFunction<T,Tuple2<K,T>>> keyExtractingMap=new MapOperatorBase<T,Tuple2<K,T>,MapFunction<T,Tuple2<K,T>>>(extractor,new UnaryOperatorInformation<T,Tuple2<K,T>>(inputType,typeInfoWithKey),"Key Extractor");
  PartitionOperatorBase<Tuple2<K,T>> noop=new PartitionOperatorBase<Tuple2<K,T>>(operatorInfo,pMethod,new int[]{0},name);
  MapOperatorBase<Tuple2<K,T>,T,MapFunction<Tuple2<K,T>,T>> keyRemovingMap=new MapOperatorBase<Tuple2<K,T>,T,MapFunction<Tuple2<K,T>,T>>(new KeyRemovingMapper<T,K>(),new UnaryOperatorInformation<Tuple2<K,T>,T>(typeInfoWithKey,inputType),"Key Extractor");
  keyExtractingMap.setInput(input);
  noop.setInput(keyExtractingMap);
  keyRemovingMap.setInput(noop);
  keyExtractingMap.setDegreeOfParallelism(input.getDegreeOfParallelism());
  noop.setDegreeOfParallelism(partitionDop);
  keyRemovingMap.setDegreeOfParallelism(partitionDop);
  return keyRemovingMap;
}
