{
  final SelectorFunctionKeys<T,K> keys=(SelectorFunctionKeys<T,K>)rawKeys;
  TypeInformation<Tuple2<K,T>> typeInfoWithKey=KeyFunctions.createTypeWithKey(keys);
  Operator<Tuple2<K,T>> keyedInput=KeyFunctions.appendKeyExtractor(input,keys);
  PartitionOperatorBase<Tuple2<K,T>> keyedPartitionedInput=new PartitionOperatorBase<>(new UnaryOperatorInformation<>(typeInfoWithKey,typeInfoWithKey),pMethod,new int[]{0},name);
  keyedPartitionedInput.setInput(keyedInput);
  keyedPartitionedInput.setCustomPartitioner(customPartitioner);
  keyedPartitionedInput.setParallelism(partitionDop);
  keyedPartitionedInput.setOrdering(new Ordering(0,null,orders != null ? orders[0] : Order.ASCENDING));
  return KeyFunctions.appendKeyRemover(keyedPartitionedInput,keys);
}
