{
  super(input,input.getType());
  Preconditions.checkNotNull(pMethod);
  Preconditions.checkArgument(pKeys != null || pMethod == PartitionMethod.REBALANCE,"Partitioning requires keys");
  Preconditions.checkArgument(pMethod != PartitionMethod.CUSTOM || customPartitioner != null,"Custom partioning requires a partitioner.");
  Preconditions.checkArgument(distribution == null || pMethod == PartitionMethod.RANGE,"Customized data distribution is only neccessary for range partition.");
  if (distribution != null) {
    Preconditions.checkArgument(pKeys.getNumberOfKeyFields() <= distribution.getNumberOfFields(),"The distribution must provide at least as many fields as flat key fields are specified.");
    Preconditions.checkArgument(Arrays.equals(pKeys.getKeyFieldTypes(),Arrays.copyOfRange(distribution.getKeyTypes(),0,pKeys.getNumberOfKeyFields())),"The types of the flat key fields must be equal to the types of the fields of the distribution.");
  }
  if (customPartitioner != null) {
    pKeys.validateCustomPartitioner(customPartitioner,partitionerTypeInfo);
  }
  this.pMethod=pMethod;
  this.pKeys=pKeys;
  this.partitionLocationName=partitionLocationName;
  this.customPartitioner=customPartitioner;
  this.distribution=distribution;
}
