{
  super(input,input.getType());
  Preconditions.checkNotNull(pMethod);
  Preconditions.checkArgument(pKeys != null || pMethod == PartitionMethod.REBALANCE,"Partitioning requires keys");
  Preconditions.checkArgument(pMethod != PartitionMethod.CUSTOM || customPartitioner != null,"Custom partioning requires a partitioner.");
  Preconditions.checkArgument(distribution == null || pMethod == PartitionMethod.RANGE,"Customized data distribution is only neccessary for range partition.");
  if (distribution != null) {
    Preconditions.checkArgument(distribution.getNumberOfFields() == pKeys.getNumberOfKeyFields(),"The number of key fields in the distribution and range partitioner should be the same.");
    Preconditions.checkArgument(Arrays.equals(distribution.getKeyTypes(),pKeys.getKeyFieldTypes()),"The types of key from the distribution and range partitioner are not equal.");
  }
  if (customPartitioner != null) {
    pKeys.validateCustomPartitioner(customPartitioner,partitionerTypeInfo);
  }
  this.pMethod=pMethod;
  this.pKeys=pKeys;
  this.partitionLocationName=partitionLocationName;
  this.customPartitioner=customPartitioner;
  this.distribution=distribution;
}
