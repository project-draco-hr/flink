{
  final int bufferNumI=i / this.indexEntriesPerSegment;
  final int segmentOffsetI=(i % this.indexEntriesPerSegment) * this.indexEntrySize;
  final int bufferNumJ=j / this.indexEntriesPerSegment;
  final int segmentOffsetJ=(j % this.indexEntriesPerSegment) * this.indexEntrySize;
  final MemorySegment segI=this.sortIndex.get(bufferNumI);
  final MemorySegment segJ=this.sortIndex.get(bufferNumJ);
  final byte[] bI=segI.getBackingArray();
  final byte[] bJ=segJ.getBackingArray();
  int val=0;
  for (int pos=0, posI=segI.translateOffset(segmentOffsetI + OFFSET_LEN), posJ=segJ.translateOffset(segmentOffsetJ + OFFSET_LEN); pos < this.numKeyBytes & (val=(bI[posI] & 0xff) - (bJ[posJ] & 0xff)) == 0; pos++, posI++, posJ++)   ;
  if (val != 0) {
    return val;
  }
  final long pointerI=segI.getLong(segmentOffsetI);
  final long pointerJ=segJ.getLong(segmentOffsetJ);
  return compareRecords(pointerI,pointerJ);
}
