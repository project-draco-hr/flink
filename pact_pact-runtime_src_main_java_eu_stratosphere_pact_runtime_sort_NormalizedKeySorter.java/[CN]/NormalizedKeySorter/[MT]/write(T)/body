{
  if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {
    if (memoryAvailable()) {
      this.currentSortIndexSegment=nextMemorySegment();
      this.sortIndex.add(this.currentSortIndexSegment);
    }
 else     return false;
  }
  this.currentSortIndexSegment.putLong(this.currentSortIndexOffset,this.currentDataBufferOffset);
  this.accessors.putNormalizedKey(this.currentSortIndexSegment.getBackingArray(),this.currentSortIndexSegment.translateOffset(this.currentSortIndexOffset + OFFSET_LEN));
  long bytes=this.accessors.serialize(record,this.currentDataBufferSegment,this.freeMemory,this.recordBuffers);
  if (bytes >= 0) {
    this.currentDataBufferOffset+=bytes;
    this.currentDataBufferSegment=null;
    this.numRecords++;
    return true;
  }
 else {
    return false;
  }
}
