{
  if (LOG.isInfoEnabled())   LOG.info(getLogString("Start PACT code"));
  final MemoryManager memoryManager=getEnvironment().getMemoryManager();
  final IOManager ioManager=getEnvironment().getIOManager();
  tempIterator=null;
  try {
    tempIterator=new SpillingResettableIterator<KeyValuePair<Key,Value>>(memoryManager,ioManager,new NepheleReaderIterator<KeyValuePair<Key,Value>>(this.reader),this.availableMemory,new KeyValuePairDeserializer<Key,Value>(stub.getOutKeyType(),stub.getOutValueType()),this);
    if (LOG.isDebugEnabled())     LOG.debug(getLogString("Start temping records"));
    tempIterator.open();
    if (LOG.isDebugEnabled()) {
      LOG.debug(getLogString("Finished temping records"));
      LOG.debug(getLogString("Start serving records"));
    }
    while (!this.taskCanceled && tempIterator.hasNext()) {
      KeyValuePair<Key,Value> pair=tempIterator.next();
      writer.emit(pair);
    }
    if (!this.taskCanceled) {
      if (LOG.isDebugEnabled())       LOG.debug(getLogString("Finished serving records"));
    }
  }
 catch (  MemoryAllocationException mae) {
    throw new RuntimeException("Unable to obtain SpillingResettableIterator for TempTask",mae);
  }
catch (  ServiceException se) {
    throw new RuntimeException(se);
  }
catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
catch (  Exception ie) {
    if (!this.taskCanceled) {
      LOG.error("Unexpected ERROR in PACT code: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
      throw ie;
    }
  }
 finally {
    if (tempIterator != null) {
      tempIterator.close();
    }
  }
  if (!this.taskCanceled) {
    if (LOG.isInfoEnabled())     LOG.info(getLogString("Finished PACT code"));
  }
 else {
    if (LOG.isWarnEnabled())     LOG.warn(getLogString("Finished PACT code"));
  }
}
