{
  final int sequenceNumber=envelope.getSequenceNumber();
synchronized (this.queuedEnvelopes) {
    if (this.destroyCalled) {
      final Buffer buffer=envelope.getBuffer();
      if (buffer != null) {
        buffer.recycleBuffer();
      }
      return;
    }
    final int expectedSequenceNumber=this.lastReceivedEnvelope + 1;
    if (sequenceNumber != expectedSequenceNumber) {
      reportIOException(new IOException("Expected data packet " + expectedSequenceNumber + " but received "+ sequenceNumber));
      notifyGateThatInputIsAvailable();
      if (LOG.isDebugEnabled()) {
        LOG.debug("Input channel " + this.toString() + " expected envelope "+ expectedSequenceNumber+ " but received "+ sequenceNumber);
      }
      final Buffer buffer=envelope.getBuffer();
      if (buffer != null) {
        buffer.recycleBuffer();
      }
    }
 else {
      this.queuedEnvelopes.add(envelope);
      this.lastReceivedEnvelope=sequenceNumber;
      if (envelope.getBuffer() != null) {
        notifyGateThatInputIsAvailable();
      }
      List<? extends AbstractEvent> events=envelope.deserializeEvents();
      if (events != null) {
        for (int i=0; i < events.size(); i++) {
          notifyGateThatInputIsAvailable();
        }
      }
    }
  }
}
