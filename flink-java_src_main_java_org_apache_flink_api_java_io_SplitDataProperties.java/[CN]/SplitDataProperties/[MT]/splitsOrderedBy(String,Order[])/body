{
  if (orderFields == null || orders == null) {
    throw new InvalidProgramException("OrderFields or Orders may not be null.");
  }
  String[] orderKeysA=orderFields.split(";");
  if (orderKeysA.length == 0) {
    throw new InvalidProgramException("OrderFields may not be empty.");
  }
 else   if (orders.length == 0) {
    throw new InvalidProgramException("Orders may not be empty");
  }
 else   if (orderKeysA.length != orders.length) {
    throw new InvalidProgramException("Number of OrderFields and Orders must match.");
  }
  if (this.splitGroupKeys != null) {
    throw new InvalidProgramException("DataSource may either be grouped or sorted.");
  }
  this.splitOrdering=new Ordering();
  for (int i=0; i < orderKeysA.length; i++) {
    String keyExp=orderKeysA[i];
    Keys.ExpressionKeys<T> ek=new Keys.ExpressionKeys<>(keyExp,this.type);
    int[] flatKeys=ek.computeLogicalKeyPositions();
    for (    int key : flatKeys) {
      for (      int okey : splitOrdering.getFieldPositions()) {
        if (key == okey) {
          throw new InvalidProgramException("Duplicate field in field expression " + keyExp);
        }
      }
      this.splitOrdering.appendOrdering(key,null,orders[i]);
    }
  }
  return this;
}
