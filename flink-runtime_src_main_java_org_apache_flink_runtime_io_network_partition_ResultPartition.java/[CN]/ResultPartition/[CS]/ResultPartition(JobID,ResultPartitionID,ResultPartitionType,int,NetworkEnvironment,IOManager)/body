{
  this.jobId=checkNotNull(jobId);
  this.partitionId=checkNotNull(partitionId);
  this.partitionType=checkNotNull(partitionType);
  this.subpartitions=new ResultSubpartition[numberOfSubpartitions];
  this.networkEnvironment=checkNotNull(networkEnvironment);
switch (partitionType) {
case BLOCKING:
    for (int i=0; i < subpartitions.length; i++) {
      subpartitions[i]=new SpillableSubpartition(i,this,ioManager,networkEnvironment.getDefaultIOMode());
    }
  break;
case PIPELINED:
for (int i=0; i < subpartitions.length; i++) {
  subpartitions[i]=new PipelinedSubpartition(i,this);
}
break;
default :
throw new IllegalArgumentException("Unsupported result partition type.");
}
pin();
LOG.debug("Initialized {}",this);
}
