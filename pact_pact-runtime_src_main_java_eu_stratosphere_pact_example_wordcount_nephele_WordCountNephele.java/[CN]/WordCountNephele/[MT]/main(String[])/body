{
  String path=(args.length > 0 ? args[0] : "");
  int numSendingTasks=(args.length > 1 ? Integer.parseInt(args[1]) : 1);
  int numReceivingTasks=(args.length > 2 ? Integer.parseInt(args[2]) : 1);
  String outPath=(args.length > 3 ? args[3] : "");
  final JobGraph jobGraph=new JobGraph("Word Count");
  JobInputVertex sourceVertex=new JobInputVertex("File Data Source",jobGraph);
  sourceVertex.setInputClass(DataSourceTask.class);
  sourceVertex.setNumberOfSubtasks(numSendingTasks);
  sourceVertex.setNumberOfSubtasksPerInstance(numSendingTasks / NUM_NODES + (numSendingTasks % NUM_NODES == 0 ? 0 : 1));
  TaskConfig sourceConfig=new TaskConfig(sourceVertex.getConfiguration());
  sourceConfig.setStubClass(BinaryIntInputFormat.class);
  sourceConfig.setStubParameter(FileInputFormat.FILE_PARAMETER_KEY,path);
  sourceConfig.setStubParameter(FixedLengthInputFormat.RECORDLENGTH_PARAMETER_KEY,String.valueOf(4));
  sourceConfig.setStubParameter(BinaryIntInputFormat.PAYLOAD_SIZE_PARAMETER_KEY,String.valueOf(4));
  sourceConfig.setLocalStrategy(LocalStrategy.NONE);
  sourceConfig.addOutputShipStrategy(ShipStrategy.FORWARD);
  JobTaskVertex mapVertex=new JobTaskVertex("Identity Map",jobGraph);
  mapVertex.setTaskClass(MapTask.class);
  mapVertex.setNumberOfSubtasks(numSendingTasks);
  mapVertex.setNumberOfSubtasksPerInstance(numSendingTasks / NUM_NODES + (numSendingTasks % NUM_NODES == 0 ? 0 : 1));
  TaskConfig mapConfig=new TaskConfig(mapVertex.getConfiguration());
  mapConfig.setStubClass(Identity.class);
  mapConfig.setLocalStrategy(LocalStrategy.NONE);
  mapConfig.addInputShipStrategy(ShipStrategy.FORWARD);
  mapConfig.addOutputShipStrategy(ShipStrategy.PARTITION_HASH,new int[]{0},new Class[]{PactInteger.class});
  JobTaskVertex reduceVertex=new JobTaskVertex("Count Records",jobGraph);
  reduceVertex.setTaskClass(ReduceTask.class);
  reduceVertex.setNumberOfSubtasks(numReceivingTasks);
  reduceVertex.setNumberOfSubtasksPerInstance(numReceivingTasks / NUM_NODES + (numReceivingTasks % NUM_NODES == 0 ? 0 : 1));
  TaskConfig reduceConfig=new TaskConfig(reduceVertex.getConfiguration());
  reduceConfig.setStubClass(CountRecords.class);
  reduceConfig.setLocalStrategy(LocalStrategy.SORT);
  reduceConfig.setLocalStrategyKeyTypes(new Class[]{PactInteger.class});
  reduceConfig.setLocalStrategyKeyTypes(0,new int[]{0});
  reduceConfig.setMemorySize(MEMORY_PER_NODE / (numReceivingTasks / NUM_NODES + (numReceivingTasks % NUM_NODES == 0 ? 0 : 1)));
  reduceConfig.setNumFilehandles(64);
  reduceConfig.addInputShipStrategy(ShipStrategy.PARTITION_HASH);
  reduceConfig.addOutputShipStrategy(ShipStrategy.FORWARD);
  JobOutputVertex sinkVertex=new JobOutputVertex("Frequency Output",jobGraph);
  sinkVertex.setOutputClass(DataSinkTask.class);
  sinkVertex.setNumberOfSubtasks(numReceivingTasks);
  sinkVertex.setNumberOfSubtasksPerInstance(numReceivingTasks / NUM_NODES + (numReceivingTasks % NUM_NODES == 0 ? 0 : 1));
  sinkVertex.getConfiguration().setInteger(DataSinkTask.DEGREE_OF_PARALLELISM_KEY,numReceivingTasks);
  TaskConfig sinkConfig=new TaskConfig(sinkVertex.getConfiguration());
  sinkConfig.setStubClass(FrequencyOutFormat.class);
  sinkConfig.setLocalStrategy(LocalStrategy.NONE);
  sinkConfig.setStubParameter(FileOutputFormat.FILE_PARAMETER_KEY,outPath);
  sinkConfig.addInputShipStrategy(ShipStrategy.FORWARD);
  sourceVertex.connectTo(mapVertex,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
  mapVertex.connectTo(reduceVertex,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
  reduceVertex.connectTo(sinkVertex,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
  if (numReceivingTasks > numSendingTasks) {
    sourceVertex.setVertexToShareInstancesWith(reduceVertex);
    mapVertex.setVertexToShareInstancesWith(reduceVertex);
    sinkVertex.setVertexToShareInstancesWith(reduceVertex);
  }
 else {
    sourceVertex.setVertexToShareInstancesWith(mapVertex);
    reduceVertex.setVertexToShareInstancesWith(mapVertex);
    sinkVertex.setVertexToShareInstancesWith(mapVertex);
  }
  Configuration cfg=new Configuration();
  cfg.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,"localhost");
  cfg.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,6123);
  JobClient client=new JobClient(jobGraph,cfg);
  client.submitJobAndWait();
}
