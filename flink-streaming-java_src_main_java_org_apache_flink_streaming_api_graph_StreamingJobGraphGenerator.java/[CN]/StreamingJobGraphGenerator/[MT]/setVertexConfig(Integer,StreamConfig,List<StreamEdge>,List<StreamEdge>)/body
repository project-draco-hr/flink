{
  StreamNode vertex=streamGraph.getStreamNode(vertexID);
  config.setVertexID(vertexID);
  config.setBufferTimeout(vertex.getBufferTimeout());
  config.setTypeSerializerIn1(vertex.getTypeSerializerIn1());
  config.setTypeSerializerIn2(vertex.getTypeSerializerIn2());
  config.setTypeSerializerOut(vertex.getTypeSerializerOut());
  config.setStreamOperator(vertex.getOperator());
  config.setOutputSelectors(vertex.getOutputSelectors());
  config.setNumberOfOutputs(nonChainableOutputs.size());
  config.setNonChainedOutputs(nonChainableOutputs);
  config.setChainedOutputs(chainableOutputs);
  final CheckpointConfig ceckpointCfg=streamGraph.getCheckpointConfig();
  config.setStateBackend(streamGraph.getStateBackend());
  config.setCheckpointingEnabled(ceckpointCfg.isCheckpointingEnabled());
  if (ceckpointCfg.isCheckpointingEnabled()) {
    config.setCheckpointMode(ceckpointCfg.getCheckpointingMode());
  }
 else {
    config.setCheckpointMode(CheckpointingMode.AT_LEAST_ONCE);
  }
  config.setStatePartitioner(0,vertex.getStatePartitioner1());
  config.setStatePartitioner(1,vertex.getStatePartitioner2());
  config.setStateKeySerializer(vertex.getStateKeySerializer());
  Class<? extends AbstractInvokable> vertexClass=vertex.getJobVertexClass();
  if (vertexClass.equals(StreamIterationHead.class) || vertexClass.equals(StreamIterationTail.class)) {
    config.setIterationId(streamGraph.getBrokerID(vertexID));
    config.setIterationWaitTime(streamGraph.getLoopTimeout(vertexID));
  }
  List<StreamEdge> allOutputs=new ArrayList<StreamEdge>(chainableOutputs);
  allOutputs.addAll(nonChainableOutputs);
  vertexConfigs.put(vertexID,config);
}
