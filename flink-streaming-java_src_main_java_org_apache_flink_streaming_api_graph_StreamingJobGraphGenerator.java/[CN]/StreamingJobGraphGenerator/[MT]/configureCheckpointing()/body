{
  CheckpointConfig cfg=streamGraph.getCheckpointConfig();
  if (cfg.isCheckpointingEnabled()) {
    long interval=cfg.getCheckpointInterval();
    if (interval < 1) {
      throw new IllegalArgumentException("The checkpoint interval must be positive");
    }
    List<JobVertexID> triggerVertices=new ArrayList<JobVertexID>();
    List<JobVertexID> ackVertices=new ArrayList<JobVertexID>(jobVertices.size());
    List<JobVertexID> commitVertices=new ArrayList<JobVertexID>();
    for (    JobVertex vertex : jobVertices.values()) {
      if (vertex.isInputVertex()) {
        triggerVertices.add(vertex.getID());
      }
      commitVertices.add(vertex.getID());
      ackVertices.add(vertex.getID());
    }
    JobSnapshottingSettings settings=new JobSnapshottingSettings(triggerVertices,ackVertices,commitVertices,interval,cfg.getCheckpointTimeout(),cfg.getMinPauseBetweenCheckpoints(),cfg.getMaxConcurrentCheckpoints());
    jobGraph.setSnapshotSettings(settings);
    int executionRetries=streamGraph.getExecutionConfig().getNumberOfExecutionRetries();
    if (executionRetries == -1) {
      streamGraph.getExecutionConfig().setNumberOfExecutionRetries(Integer.MAX_VALUE);
    }
  }
}
