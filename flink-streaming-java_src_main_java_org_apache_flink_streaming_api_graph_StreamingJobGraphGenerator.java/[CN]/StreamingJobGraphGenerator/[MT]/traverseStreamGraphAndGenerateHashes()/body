{
  final HashFunction hashFunction=Hashing.murmur3_128(0);
  final Map<Integer,byte[]> hashes=new HashMap<>();
  Set<Integer> visited=new HashSet<>();
  Queue<StreamNode> remaining=new ArrayDeque<>();
  List<Integer> sources=new ArrayList<>();
  for (  Integer sourceNodeId : streamGraph.getSourceIDs()) {
    sources.add(sourceNodeId);
  }
  Collections.sort(sources);
  for (  Integer sourceNodeId : sources) {
    remaining.add(streamGraph.getStreamNode(sourceNodeId));
    visited.add(sourceNodeId);
  }
  StreamNode currentNode;
  while ((currentNode=remaining.poll()) != null) {
    if (generateNodeHash(currentNode,hashFunction,hashes)) {
      for (      StreamEdge outEdge : currentNode.getOutEdges()) {
        StreamNode child=outEdge.getTargetVertex();
        if (!visited.contains(child.getId())) {
          remaining.add(child);
          visited.add(child.getId());
        }
      }
    }
 else {
      visited.remove(currentNode.getId());
    }
  }
  return hashes;
}
