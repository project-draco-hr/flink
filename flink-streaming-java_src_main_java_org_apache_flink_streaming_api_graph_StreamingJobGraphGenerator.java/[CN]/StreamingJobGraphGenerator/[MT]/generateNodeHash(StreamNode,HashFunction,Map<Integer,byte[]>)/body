{
  String userSpecifiedHash=node.getTransformationId();
  if (userSpecifiedHash == null) {
    for (    StreamEdge inEdge : node.getInEdges()) {
      if (!hashes.containsKey(inEdge.getSourceId())) {
        return false;
      }
    }
    Hasher hasher=hashFunction.newHasher();
    byte[] hash=generateDeterministicHash(node,hasher,hashes);
    if (hashes.put(node.getId(),hash) != null) {
      throw new IllegalStateException("Unexpected state. Tried to add node hash " + "twice. This is probably a bug in the JobGraph generator.");
    }
    return true;
  }
 else {
    for (    StreamEdge inEdge : node.getInEdges()) {
      if (isChainable(inEdge)) {
        throw new UnsupportedOperationException("Cannot assign user-specified hash " + "to intermediate node in chain. This will be supported in future " + "versions of Flink. As a work around start new chain at task " + node.getOperatorName() + ".");
      }
    }
    Hasher hasher=hashFunction.newHasher();
    byte[] hash=generateUserSpecifiedHash(node,hasher);
    for (    byte[] previousHash : hashes.values()) {
      if (Arrays.equals(previousHash,hash)) {
        throw new IllegalArgumentException("Hash collision on user-specified ID. " + "Most likely cause is a non-unique ID. Please check that all IDs " + "specified via `uid(String)` are unique.");
      }
    }
    if (hashes.put(node.getId(),hash) != null) {
      throw new IllegalStateException("Unexpected state. Tried to add node hash " + "twice. This is probably a bug in the JobGraph generator.");
    }
    return true;
  }
}
