{
  final int REPEATED_VALUE_1=40559;
  final int REPEATED_VALUE_2=92882;
  final int REPEATED_VALUE_COUNT_BUILD=200000;
  final int REPEATED_VALUE_COUNT_PROBE=5;
  final int NUM_KEYS=1000000;
  final int BUILD_VALS_PER_KEY=3;
  final int PROBE_VALS_PER_KEY=10;
  MutableObjectIterator<Tuple2<Integer,Integer>> build1=new UniformIntTupleGenerator(NUM_KEYS,BUILD_VALS_PER_KEY,false);
  MutableObjectIterator<Tuple2<Integer,Integer>> build2=new TestData.ConstantIntIntTuplesIterator(REPEATED_VALUE_1,17,REPEATED_VALUE_COUNT_BUILD);
  MutableObjectIterator<Tuple2<Integer,Integer>> build3=new TestData.ConstantIntIntTuplesIterator(REPEATED_VALUE_2,23,REPEATED_VALUE_COUNT_BUILD);
  List<MutableObjectIterator<Tuple2<Integer,Integer>>> builds=new ArrayList<>();
  builds.add(build1);
  builds.add(build2);
  builds.add(build3);
  MutableObjectIterator<Tuple2<Integer,Integer>> buildInput=new UnionIterator<>(builds);
  List<MemorySegment> memSegments;
  try {
    memSegments=this.memoryManager.allocatePages(MEM_OWNER,896);
  }
 catch (  MemoryAllocationException maex) {
    fail("Memory for the Join could not be provided.");
    return;
  }
  HashMap<Integer,Long> map=new HashMap<Integer,Long>(NUM_KEYS);
  final ReOpenableMutableHashTable<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> join=new ReOpenableMutableHashTable<>(this.recordBuildSideAccesssor,this.recordProbeSideAccesssor,this.recordBuildSideComparator,this.recordProbeSideComparator,this.pactRecordComparator,memSegments,ioManager,true);
  for (int probe=0; probe < NUM_PROBES; probe++) {
    MutableObjectIterator<Tuple2<Integer,Integer>> probeInput=getProbeInput(NUM_KEYS,PROBE_VALS_PER_KEY,REPEATED_VALUE_1,REPEATED_VALUE_2);
    if (probe == 0) {
      join.open(buildInput,probeInput);
    }
 else {
      join.reopenProbe(probeInput);
    }
    Tuple2<Integer,Integer> record;
    final Tuple2<Integer,Integer> recordReuse=new Tuple2<>();
    while (join.nextRecord()) {
      long numBuildValues=0;
      final Tuple2<Integer,Integer> probeRec=join.getCurrentProbeRecord();
      Integer key=probeRec.f0;
      HashBucketIterator<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> buildSide=join.getBuildSideIterator();
      if ((record=buildSide.next(recordReuse)) != null) {
        numBuildValues=1;
        Assert.assertEquals("Probe-side key was different than build-side key.",key,record.f0);
      }
 else {
        fail("No build side values found for a probe key.");
      }
      while ((record=buildSide.next(record)) != null) {
        numBuildValues++;
        Assert.assertEquals("Probe-side key was different than build-side key.",key,record.f0);
      }
      Long contained=map.get(key);
      if (contained == null) {
        contained=numBuildValues;
      }
 else {
        contained=contained + numBuildValues;
      }
      map.put(key,contained);
    }
  }
  join.close();
  Assert.assertEquals("Wrong number of keys",NUM_KEYS,map.size());
  for (  Entry<Integer,Long> entry : map.entrySet()) {
    long val=entry.getValue();
    int key=entry.getKey();
    if (key == REPEATED_VALUE_1 || key == REPEATED_VALUE_2) {
      Assert.assertEquals("Wrong number of values in per-key cross product for key " + key,(PROBE_VALS_PER_KEY + REPEATED_VALUE_COUNT_PROBE) * (BUILD_VALS_PER_KEY + REPEATED_VALUE_COUNT_BUILD) * NUM_PROBES,val);
    }
 else {
      Assert.assertEquals("Wrong number of values in per-key cross product for key " + key,PROBE_VALS_PER_KEY * BUILD_VALS_PER_KEY * NUM_PROBES,val);
    }
  }
  this.memoryManager.release(join.getFreedMemory());
}
