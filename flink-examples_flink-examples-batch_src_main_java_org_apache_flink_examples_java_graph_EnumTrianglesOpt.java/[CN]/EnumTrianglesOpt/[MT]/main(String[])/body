{
  if (!parseParameters(args)) {
    return;
  }
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<EnumTrianglesDataTypes.Edge> edges=getEdgeDataSet(env);
  DataSet<EnumTrianglesDataTypes.EdgeWithDegrees> edgesWithDegrees=edges.flatMap(new EdgeDuplicator()).groupBy(EnumTrianglesDataTypes.Edge.V1).sortGroup(EnumTrianglesDataTypes.Edge.V2,Order.ASCENDING).reduceGroup(new DegreeCounter()).groupBy(EnumTrianglesDataTypes.EdgeWithDegrees.V1,EnumTrianglesDataTypes.EdgeWithDegrees.V2).reduce(new DegreeJoiner());
  DataSet<EnumTrianglesDataTypes.Edge> edgesByDegree=edgesWithDegrees.map(new EdgeByDegreeProjector());
  DataSet<EnumTrianglesDataTypes.Edge> edgesById=edgesByDegree.map(new EdgeByIdProjector());
  DataSet<EnumTrianglesDataTypes.Triad> triangles=edgesByDegree.groupBy(EnumTrianglesDataTypes.Edge.V1).sortGroup(EnumTrianglesDataTypes.Edge.V2,Order.ASCENDING).reduceGroup(new TriadBuilder()).join(edgesById).where(EnumTrianglesDataTypes.Triad.V2,EnumTrianglesDataTypes.Triad.V3).equalTo(EnumTrianglesDataTypes.Edge.V1,EnumTrianglesDataTypes.Edge.V2).with(new TriadFilter());
  if (fileOutput) {
    triangles.writeAsCsv(outputPath,"\n",",");
    env.execute("Triangle Enumeration Example");
  }
 else {
    triangles.print();
  }
}
