{
  FileSystem fs;
synchronized (SYNCHRONIZATION_OBJECT) {
    if (uri.getScheme() == null) {
      try {
        uri=new URI("file",null,uri.getPath(),null);
      }
 catch (      URISyntaxException e) {
        try {
          uri=new URI("file",null,new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(),null);
        }
 catch (        URISyntaxException ex) {
          throw new IOException("The file URI '" + uri.toString() + "' is not valid.");
        }
      }
    }
    if (uri.getScheme().equals("file") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {
      String supposedUri="file:///" + uri.getAuthority() + uri.getPath();
      throw new IOException("Found local file path with authority '" + uri.getAuthority() + "' in path '"+ uri.toString()+ "'. Hint: Did you forget a slash? (correct path would be '"+ supposedUri+ "')");
    }
    final FSKey key=new FSKey(uri.getScheme(),uri.getAuthority());
    if (CACHE.containsKey(key)) {
      return CACHE.get(key);
    }
    if (!FSDIRECTORY.containsKey(uri.getScheme())) {
      Class<?> wrapperClass=getHadoopWrapperClassNameForFileSystem(uri.getScheme());
      if (wrapperClass != null) {
        FSKey wrappedKey=new FSKey(HADOOP_WRAPPER_SCHEME + "+" + uri.getScheme(),uri.getAuthority());
        if (CACHE.containsKey(wrappedKey)) {
          return CACHE.get(wrappedKey);
        }
        fs=instantiateHadoopFileSystemWrapper(wrapperClass);
        fs.initialize(uri);
        CACHE.put(wrappedKey,fs);
      }
 else {
        throw new IOException("No file system found with scheme " + uri.getScheme() + ", referenced in file URI '"+ uri.toString()+ "'.");
      }
    }
 else {
      String fsClass=FSDIRECTORY.get(uri.getScheme());
      if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {
        fs=instantiateHadoopFileSystemWrapper(null);
      }
 else {
        fs=instantiateFileSystem(fsClass);
      }
      fs.initialize(uri);
      CACHE.put(key,fs);
    }
  }
  return fs;
}
