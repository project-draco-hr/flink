{
  FileSystem fs=null;
synchronized (SYNCHRONIZATION_OBJECT) {
    if (uri.getScheme() == null) {
      try {
        uri=new URI("file",null,uri.getPath(),null);
      }
 catch (      URISyntaxException e) {
        throw new IOException("The file URI '" + uri.toString() + "' is not valid. "+ " File URIs need to specify aboslute file paths.");
      }
    }
    if (uri.getScheme().equals("file") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {
      String supposedUri="file:///" + uri.getAuthority() + uri.getPath();
      throw new IOException("Found local file path with authority '" + uri.getAuthority() + "' in path '"+ uri.toString()+ "'. Hint: Did you forget a slash? (correct path would be '"+ supposedUri+ "')");
    }
    final FSKey key=new FSKey(uri.getScheme(),uri.getAuthority());
    if (CACHE.containsKey(key)) {
      return CACHE.get(key);
    }
    if (!FSDIRECTORY.containsKey(uri.getScheme())) {
      throw new IOException("No file system found with scheme " + uri.getScheme() + ", referenced in file URI '"+ uri.toString()+ "'.");
    }
    Class<? extends FileSystem> fsClass=null;
    try {
      fsClass=ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));
    }
 catch (    ClassNotFoundException e1) {
      throw new IOException(StringUtils.stringifyException(e1));
    }
    try {
      fs=fsClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IOException("Could not instantiate file system class: " + e.getMessage(),e);
    }
catch (    IllegalAccessException e) {
      throw new IOException("Could not instantiate file system class: " + e.getMessage(),e);
    }
    fs.initialize(uri);
    CACHE.put(key,fs);
  }
  return fs;
}
