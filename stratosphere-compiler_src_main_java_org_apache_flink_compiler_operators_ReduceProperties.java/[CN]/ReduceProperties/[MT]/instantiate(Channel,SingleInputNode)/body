{
  if (in.getShipStrategy() == ShipStrategyType.FORWARD || (node.getBroadcastConnections() != null && !node.getBroadcastConnections().isEmpty())) {
    return new SingleInputPlanNode(node,"Reduce (" + node.getPactContract().getName() + ")",in,DriverStrategy.SORTED_REDUCE,this.keyList);
  }
 else {
    Channel toCombiner=new Channel(in.getSource());
    toCombiner.setShipStrategy(ShipStrategyType.FORWARD);
    ReduceNode combinerNode=((ReduceNode)node).getCombinerUtilityNode();
    combinerNode.setDegreeOfParallelism(in.getSource().getDegreeOfParallelism());
    SingleInputPlanNode combiner=new SingleInputPlanNode(combinerNode,"Combine (" + node.getPactContract().getName() + ")",toCombiner,DriverStrategy.SORTED_PARTIAL_REDUCE,this.keyList);
    combiner.setCosts(new Costs(0,0));
    combiner.initProperties(toCombiner.getGlobalProperties(),toCombiner.getLocalProperties());
    Channel toReducer=new Channel(combiner);
    toReducer.setShipStrategy(in.getShipStrategy(),in.getShipStrategyKeys(),in.getShipStrategySortOrder());
    toReducer.setLocalStrategy(LocalStrategy.SORT,in.getLocalStrategyKeys(),in.getLocalStrategySortOrder());
    return new SingleInputPlanNode(node,"Reduce(" + node.getPactContract().getName() + ")",toReducer,DriverStrategy.SORTED_REDUCE,this.keyList);
  }
}
