{
  try {
    final OneInputStreamTask<String,String> mapTask=new OneInputStreamTask<>();
    final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<>(mapTask,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
    StreamConfig streamConfig=testHarness.getStreamConfig();
    StreamMap<String,String> mapOperator=new StreamMap<>(new DummyMapFunction<String>());
    streamConfig.setStreamOperator(mapOperator);
    testHarness.invoke();
    final AtomicReference<Throwable> errorRef=new AtomicReference<>();
    final long t1=System.currentTimeMillis();
    final long t2=System.currentTimeMillis() - 200;
    final long t3=System.currentTimeMillis() + 100;
    final long t4=System.currentTimeMillis() + 200;
    mapTask.registerTimer(t1,new ValidatingTriggerable(errorRef,t1,0));
    mapTask.registerTimer(t2,new ValidatingTriggerable(errorRef,t2,1));
    mapTask.registerTimer(t3,new ValidatingTriggerable(errorRef,t3,2));
    mapTask.registerTimer(t4,new ValidatingTriggerable(errorRef,t4,3));
    testHarness.endInput();
    testHarness.waitForTaskCompletion();
    long deadline=System.currentTimeMillis() + 5000;
    while (errorRef.get() == null && ValidatingTriggerable.numInSequence < 4 && System.currentTimeMillis() < deadline) {
      Thread.sleep(100);
    }
    if (errorRef.get() != null) {
      errorRef.get().printStackTrace();
      fail(errorRef.get().getMessage());
    }
    assertEquals(4,ValidatingTriggerable.numInSequence);
    deadline=System.currentTimeMillis() + 4000;
    while (StreamTask.TRIGGER_THREAD_GROUP.activeCount() > 0 && System.currentTimeMillis() < deadline) {
      Thread.sleep(10);
    }
    assertEquals("Trigger timer thread did not properly shut down",0,StreamTask.TRIGGER_THREAD_GROUP.activeCount());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
