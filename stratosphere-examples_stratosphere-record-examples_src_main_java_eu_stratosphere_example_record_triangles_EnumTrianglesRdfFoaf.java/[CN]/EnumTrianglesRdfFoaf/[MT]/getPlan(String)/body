{
  int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String edgeInput=(args.length > 1 ? args[1] : "");
  String output=(args.length > 2 ? args[2] : "");
  FileDataSource edges=new FileDataSource(new EdgeInFormat(),edgeInput,"BTC Edges");
  ReduceOperator buildTriads=ReduceOperator.builder(new BuildTriads(),StringValue.class,0).name("Build Triads").build();
  JoinOperator closeTriads=JoinOperator.builder(new CloseTriads(),StringValue.class,1,0).keyField(StringValue.class,2,1).name("Close Triads").build();
  closeTriads.setParameter("INPUT_LEFT_SHIP_STRATEGY","SHIP_REPARTITION_HASH");
  closeTriads.setParameter("INPUT_RIGHT_SHIP_STRATEGY","SHIP_REPARTITION_HASH");
  closeTriads.setParameter("LOCAL_STRATEGY","LOCAL_STRATEGY_HASH_BUILD_SECOND");
  FileDataSink triangles=new FileDataSink(new CsvOutputFormat(),output,"Output");
  CsvOutputFormat.configureRecordFormat(triangles).recordDelimiter('\n').fieldDelimiter(' ').field(StringValue.class,0).field(StringValue.class,1).field(StringValue.class,2);
  triangles.setInput(closeTriads);
  closeTriads.setSecondInput(edges);
  closeTriads.setFirstInput(buildTriads);
  buildTriads.setInput(edges);
  Plan plan=new Plan(triangles,"Enumerate Triangles");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
