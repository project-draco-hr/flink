{
  int noSubtasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String input1Path=(args.length > 1 ? args[1] : "");
  String input2Path=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  int noSubtasksInput2=(args.length > 4 ? Integer.parseInt(args[4]) : 1);
  FileDataSource input1=new FileDataSource(RecordInputFormat.class,input1Path,"Input 1");
  input1.setDegreeOfParallelism(noSubtasks);
  input1.setParameter(RecordInputFormat.RECORD_DELIMITER,"\n");
  input1.setParameter(RecordInputFormat.FIELD_DELIMITER_PARAMETER,"|");
  input1.setParameter(RecordInputFormat.NUM_FIELDS_PARAMETER,2);
  input1.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 0,DecimalTextIntParser.class);
  input1.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 0,0);
  input1.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 1,DecimalTextIntParser.class);
  input1.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 1,1);
  ReduceContract aggInput1=new ReduceContract.Builder(DummyReduce.class,PactInteger.class,0).input(input1).name("AggOrders").build();
  aggInput1.setDegreeOfParallelism(noSubtasks);
  FileDataSource input2=new FileDataSource(RecordInputFormat.class,input2Path,"Input 2");
  input2.setDegreeOfParallelism(noSubtasksInput2);
  input2.setParameter(RecordInputFormat.RECORD_DELIMITER,"\n");
  input2.setParameter(RecordInputFormat.FIELD_DELIMITER_PARAMETER,"|");
  input2.setParameter(RecordInputFormat.NUM_FIELDS_PARAMETER,2);
  input2.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 0,DecimalTextIntParser.class);
  input2.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 0,0);
  input2.getParameters().setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 1,DecimalTextIntParser.class);
  input2.setParameter(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 1,1);
  ReduceContract aggInput2=new ReduceContract.Builder(DummyReduce.class,PactInteger.class,0).input(input2).name("AggLines").build();
  aggInput2.setDegreeOfParallelism(noSubtasksInput2);
  MatchContract joinLiO=MatchContract.builder(JoinInputs.class,PactInteger.class,0,0).input1(aggInput1).input2(aggInput2).name("JoinLiO").build();
  joinLiO.setDegreeOfParallelism(noSubtasks);
  FileDataSink result=new FileDataSink(RecordOutputFormat.class,output,joinLiO,"Output");
  result.setDegreeOfParallelism(noSubtasks);
  result.getParameters().setString(RecordOutputFormat.RECORD_DELIMITER_PARAMETER,"\n");
  result.getParameters().setString(RecordOutputFormat.FIELD_DELIMITER_PARAMETER,"|");
  result.getParameters().setBoolean(RecordOutputFormat.LENIENT_PARSING,true);
  result.getParameters().setInteger(RecordOutputFormat.NUM_FIELDS_PARAMETER,3);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 0,PactInteger.class);
  result.getParameters().setInteger(RecordOutputFormat.RECORD_POSITION_PARAMETER_PREFIX + 0,0);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 1,PactInteger.class);
  result.getParameters().setInteger(RecordOutputFormat.RECORD_POSITION_PARAMETER_PREFIX + 1,1);
  result.getParameters().setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 2,PactInteger.class);
  result.getParameters().setInteger(RecordOutputFormat.RECORD_POSITION_PARAMETER_PREFIX + 2,2);
  Plan plan=new Plan(result,"Merge Only Join");
  plan.setDefaultParallelism(noSubtasks);
  return plan;
}
