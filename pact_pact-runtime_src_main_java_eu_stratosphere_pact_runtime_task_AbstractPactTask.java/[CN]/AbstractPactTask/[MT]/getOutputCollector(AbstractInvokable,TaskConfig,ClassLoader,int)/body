{
  OutputCollector output=new OutputCollector();
  for (int i=0; i < numOutputs; i++) {
    final ShipStrategy strategy=config.getOutputShipStrategy(i);
    final int[] keyPositions=config.getOutputShipKeyPositions(i);
    final Class<? extends Key>[] keyClasses;
    try {
      keyClasses=config.getOutputShipKeyTypes(i,cl);
    }
 catch (    ClassNotFoundException cnfex) {
      throw new RuntimeException("The classes for the keys determining the partitioning for output " + i + "  could not be loaded.");
    }
    final OutputEmitter oe=(keyPositions == null || keyClasses == null) ? new OutputEmitter(strategy) : new OutputEmitter(strategy,keyPositions,keyClasses);
    if (strategy == ShipStrategy.BROADCAST) {
      if (task instanceof AbstractTask) {
        output.addWriter(new BroadcastRecordWriter<PactRecord>((AbstractTask)task,PactRecord.class));
      }
 else       if (task instanceof AbstractInputTask<?>) {
        output.addWriter(new BroadcastRecordWriter<PactRecord>((AbstractInputTask<?>)task,PactRecord.class));
      }
    }
 else {
      if (task instanceof AbstractTask) {
        output.addWriter(new RecordWriter<PactRecord>((AbstractTask)task,PactRecord.class,oe));
      }
 else       if (task instanceof AbstractInputTask<?>) {
        output.addWriter(new RecordWriter<PactRecord>((AbstractInputTask<?>)task,PactRecord.class,oe));
      }
    }
  }
  return output;
}
