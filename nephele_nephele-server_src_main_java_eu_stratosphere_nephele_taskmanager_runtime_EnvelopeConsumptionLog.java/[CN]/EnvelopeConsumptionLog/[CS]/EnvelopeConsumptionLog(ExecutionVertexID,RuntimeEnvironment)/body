{
  this.vertexID=vertexID;
  this.environment=environment;
  final String fileName=constructFileName(vertexID);
  this.logFile=new File(fileName);
  if (this.logFile.exists()) {
    final long length=this.logFile.length();
    if (length % SIZE_OF_INTEGER != 0) {
      LOG.error("Channel consumption log " + fileName + " appears to be corrupt, discarding it...");
      FileUtils.deleteSilently(this.logFile);
      this.numberOfInitialLogEntries=0L;
    }
 else {
      this.numberOfInitialLogEntries=length / SIZE_OF_INTEGER;
    }
    LOG.info("Found existing consumption log for task " + this.vertexID + " with a size of "+ length+ " bytes");
  }
 else {
    this.numberOfInitialLogEntries=0L;
  }
  this.outstandingEnvelopesAsByteBuffer=ByteBuffer.allocate(LOG_WINDOW_SIZE);
  this.outstandingEnvelopesAsIntBuffer=this.outstandingEnvelopesAsByteBuffer.asIntBuffer();
  this.announcedEnvelopesAsByteBuffer=ByteBuffer.allocate(LOG_WINDOW_SIZE);
  this.announcedEnvelopesAsIntBuffer=this.announcedEnvelopesAsByteBuffer.asIntBuffer();
  this.outstandingEnvelopesAsIntBuffer.limit(0);
  if (this.numberOfInitialLogEntries > 0) {
    loadNextOutstandingEnvelopes();
  }
}
