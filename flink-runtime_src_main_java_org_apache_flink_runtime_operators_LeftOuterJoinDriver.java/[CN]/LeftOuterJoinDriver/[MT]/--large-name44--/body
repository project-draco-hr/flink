{
switch (driverStrategy) {
case LEFT_OUTER_MERGE:
    int numPages=memoryManager.computeNumberOfPages(driverMemFraction);
  return new ReusingMergeOuterJoinIterator<>(OuterJoinType.LEFT,in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,numPages,super.taskContext.getContainingTask());
case LEFT_HYBRIDHASH_BUILD_FIRST:
return new ReusingBuildFirstHashJoinIterator<>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator21(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getContainingTask(),driverMemFraction,false,true,false);
case LEFT_HYBRIDHASH_BUILD_SECOND:
return new ReusingBuildSecondHashJoinIterator<>(in1,in2,serializer1,comparator1,serializer2,comparator2,pairComparatorFactory.createComparator12(comparator1,comparator2),memoryManager,ioManager,this.taskContext.getContainingTask(),driverMemFraction,true,false,false);
default :
throw new Exception("Unsupported driver strategy for left outer join driver: " + driverStrategy.name());
}
}
