def nested(func):
    'get any functions inside of func (e.g. inner functions in a closure)\n\n    NOTE: results may differ if the function has been executed or not.\n    If len(nestedcode(func)) > len(nested(func)), try calling func().\n    If possible, python builds code objects, but delays building functions\n    until func() is called.\n    '
    if PY3:
        att1 = '__code__'
        att0 = '__func__'
    else:
        att1 = 'func_code'
        att0 = 'im_func'
    import gc
    funcs = []
    for co in nestedcode(func):
        for obj in gc.get_referrers(co):
            _ = getattr(obj, att0, None)
            if (getattr(_, att1, None) is co):
                funcs.append(obj)
            elif (getattr(obj, att1, None) is co):
                funcs.append(obj)
            elif (getattr(obj, 'f_code', None) is co):
                funcs.append(obj)
            elif (hasattr(obj, 'co_code') and (obj is co)):
                funcs.append(obj)
    return funcs
