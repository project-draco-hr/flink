{
  if (op instanceof SingleInputOperator) {
    SingleInputOperator<?,?,?> siop=(SingleInputOperator<?,?,?>)op;
    if (dynamicPathOperations.contains(siop.getInput())) {
      dynamicPathOperations.add(op);
    }
 else {
      for (      Operator<?> o : siop.getBroadcastInputs().values()) {
        if (dynamicPathOperations.contains(o)) {
          dynamicPathOperations.add(op);
          break;
        }
      }
    }
  }
 else   if (op instanceof DualInputOperator) {
    DualInputOperator<?,?,?,?> siop=(DualInputOperator<?,?,?,?>)op;
    if (dynamicPathOperations.contains(siop.getFirstInput())) {
      dynamicPathOperations.add(op);
    }
 else     if (dynamicPathOperations.contains(siop.getSecondInput())) {
      dynamicPathOperations.add(op);
    }
 else {
      for (      Operator<?> o : siop.getBroadcastInputs().values()) {
        if (dynamicPathOperations.contains(o)) {
          dynamicPathOperations.add(op);
          break;
        }
      }
    }
  }
 else   if (op.getClass() == PartialSolutionPlaceHolder.class || op.getClass() == WorksetPlaceHolder.class || op.getClass() == SolutionSetPlaceHolder.class) {
    dynamicPathOperations.add(op);
  }
 else   if (op instanceof GenericDataSourceBase) {
  }
 else {
    throw new RuntimeException("Cannot handle operator type " + op.getClass().getName());
  }
}
