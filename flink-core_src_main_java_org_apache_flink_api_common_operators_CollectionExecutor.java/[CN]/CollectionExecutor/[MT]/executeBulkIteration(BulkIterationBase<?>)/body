{
  Operator<?> inputOp=iteration.getInput();
  if (inputOp == null) {
    throw new InvalidProgramException("The iteration " + iteration.getName() + " has no input (initial partial solution).");
  }
  if (iteration.getNextPartialSolution() == null) {
    throw new InvalidProgramException("The iteration " + iteration.getName() + " has no next partial solution defined (is not closed).");
  }
  List<T> inputData=(List<T>)execute(inputOp);
  Set<Operator<?>> dynamics=new LinkedHashSet<Operator<?>>();
  DynamicPathCollector dynCollector=new DynamicPathCollector(dynamics);
  iteration.getNextPartialSolution().accept(dynCollector);
  if (iteration.getTerminationCriterion() != null) {
    iteration.getTerminationCriterion().accept(dynCollector);
  }
  for (  AggregatorWithName<?> a : iteration.getAggregators().getAllRegisteredAggregators()) {
    aggregators.put(a.getName(),a.getAggregator());
  }
  String convCriterionAggName=iteration.getAggregators().getConvergenceCriterionAggregatorName();
  ConvergenceCriterion<Value> convCriterion=(ConvergenceCriterion<Value>)iteration.getAggregators().getConvergenceCriterion();
  List<T> currentResult=inputData;
  final int maxIterations=iteration.getMaximumNumberOfIterations();
  for (int superstep=1; superstep <= maxIterations; superstep++) {
    this.intermediateResults.put(iteration.getPartialSolution(),currentResult);
    currentResult=(List<T>)execute(iteration.getNextPartialSolution(),superstep);
    if (iteration.getTerminationCriterion() != null) {
      execute(iteration.getTerminationCriterion(),superstep);
    }
    if (convCriterion != null && convCriterionAggName != null) {
      Value v=aggregators.get(convCriterionAggName).getAggregate();
      if (convCriterion.isConverged(superstep,v)) {
        break;
      }
    }
    for (    Operator<?> o : dynamics) {
      intermediateResults.remove(o);
    }
    for (    Map.Entry<String,Aggregator<?>> e : aggregators.entrySet()) {
      previousAggregates.put(e.getKey(),e.getValue().getAggregate());
      e.getValue().reset();
    }
  }
  previousAggregates.clear();
  aggregators.clear();
  return currentResult;
}
