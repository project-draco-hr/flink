{
  Expr input_expr=filter_expr.binding().inExpr();
  Var filter_pipe_var=filter_expr.binding().var;
  ArrayList<Expr> pred_list=filter_expr.conjunctivePredList();
  for (int i=0; i < child_ids.size(); i++) {
    Var newVar=new Var(filter_pipe_var.name());
    VarMap vm=new VarMap();
    vm.put(filter_pipe_var,newVar);
    ArrayList<Expr> predClone_list=new ArrayList<Expr>();
    for (int j=0; j < pred_list.size(); j++)     predClone_list.add(pred_list.get(j).clone(vm));
    Expr branch=input_expr.child(child_ids.get(i));
    BindingExpr new_filter_input=new BindingExpr(Type.IN,newVar,null,branch);
    FilterExpr new_fe=new FilterExpr(new_filter_input,predClone_list);
    input_expr.setChild(child_ids.get(i),new_fe);
  }
  filter_expr.replaceInParent(input_expr);
  return true;
}
