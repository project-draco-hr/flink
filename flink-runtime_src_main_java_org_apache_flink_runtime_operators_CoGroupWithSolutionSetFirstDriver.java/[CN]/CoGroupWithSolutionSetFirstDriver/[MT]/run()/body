{
  final CoGroupFunction<IT1,IT2,OT> coGroupStub=taskContext.getStub();
  final Collector<OT> collector=taskContext.getOutputCollector();
  final KeyGroupedIterator<IT2> probeSideInput=new KeyGroupedIterator<IT2>(taskContext.<IT2>getInput(0),probeSideSerializer,probeSideComparator);
  final SingleElementIterator<IT1> siIter=new SingleElementIterator<IT1>();
  final Iterable<IT1> emptySolutionSide=Collections.emptySet();
  if (this.hashTable != null) {
    final CompactingHashTable<IT1> join=hashTable;
    final CompactingHashTable<IT1>.HashTableProber<IT2> prober=join.getProber(this.probeSideComparator,this.pairComparator);
    IT1 buildSideRecord=solutionSideRecord;
    while (this.running && probeSideInput.nextKey()) {
      IT2 current=probeSideInput.getCurrent();
      buildSideRecord=prober.getMatchFor(current,buildSideRecord);
      if (buildSideRecord != null) {
        siIter.set(buildSideRecord);
        coGroupStub.coGroup(siIter,probeSideInput.getValues(),collector);
      }
 else {
        coGroupStub.coGroup(emptySolutionSide,probeSideInput.getValues(),collector);
      }
    }
  }
 else {
    final JoinHashMap<IT1> join=this.objectMap;
    final JoinHashMap<IT1>.Prober<IT2> prober=join.createProber(this.probeSideComparator,this.pairComparator);
    final TypeSerializer<IT1> serializer=join.getBuildSerializer();
    while (this.running && probeSideInput.nextKey()) {
      IT2 current=probeSideInput.getCurrent();
      IT1 buildSideRecord=prober.lookupMatch(current);
      if (buildSideRecord != null) {
        siIter.set(serializer.copy(buildSideRecord));
        coGroupStub.coGroup(siIter,probeSideInput.getValues(),collector);
      }
 else {
        coGroupStub.coGroup(emptySolutionSide,probeSideInput.getValues(),collector);
      }
    }
  }
}
