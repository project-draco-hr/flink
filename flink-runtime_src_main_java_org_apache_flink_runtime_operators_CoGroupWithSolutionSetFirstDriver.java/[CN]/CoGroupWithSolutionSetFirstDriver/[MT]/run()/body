{
  final CoGroupFunction<IT1,IT2,OT> coGroupStub=taskContext.getStub();
  final Collector<OT> collector=taskContext.getOutputCollector();
  IT1 buildSideRecord=solutionSideRecord;
  final CompactingHashTable<IT1> join=hashTable;
  final KeyGroupedIterator<IT2> probeSideInput=new KeyGroupedIterator<IT2>(taskContext.<IT2>getInput(0),probeSideSerializer,probeSideComparator);
  final SingleElementIterator<IT1> siIter=new SingleElementIterator<IT1>();
  final Iterator<IT1> emptySolutionSide=EmptyIterator.<IT1>get();
  final CompactingHashTable<IT1>.HashTableProber<IT2> prober=join.getProber(this.probeSideComparator,this.pairComparator);
  while (this.running && probeSideInput.nextKey()) {
    IT2 current=probeSideInput.getCurrent();
    if (prober.getMatchFor(current,buildSideRecord)) {
      siIter.set(buildSideRecord);
      coGroupStub.coGroup(siIter,probeSideInput.getValues(),collector);
    }
 else {
      coGroupStub.coGroup(emptySolutionSide,probeSideInput.getValues(),collector);
    }
  }
}
