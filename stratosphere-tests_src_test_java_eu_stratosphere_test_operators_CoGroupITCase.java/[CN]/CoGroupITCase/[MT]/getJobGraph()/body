{
  String pathPrefix=getFilesystemProvider().getURIPrefix() + getFilesystemProvider().getTempDirPath();
  FileDataSource input_left=new FileDataSource(new CoGroupTestInFormat(),pathPrefix + "/cogroup_left");
  DelimitedInputFormat.configureDelimitedFormat(input_left).recordDelimiter('\n');
  input_left.setDegreeOfParallelism(config.getInteger("CoGroupTest#NoSubtasks",1));
  FileDataSource input_right=new FileDataSource(new CoGroupTestInFormat(),pathPrefix + "/cogroup_right");
  DelimitedInputFormat.configureDelimitedFormat(input_right).recordDelimiter('\n');
  input_right.setDegreeOfParallelism(config.getInteger("CoGroupTest#NoSubtasks",1));
  CoGroupOperator testCoGrouper=CoGroupOperator.builder(new TestCoGrouper(),StringValue.class,0,0).build();
  testCoGrouper.setDegreeOfParallelism(config.getInteger("CoGroupTest#NoSubtasks",1));
  testCoGrouper.getParameters().setString(PactCompiler.HINT_LOCAL_STRATEGY,config.getString("CoGroupTest#LocalStrategy",""));
  testCoGrouper.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY,config.getString("CoGroupTest#ShipStrategy",""));
  FileDataSink output=new FileDataSink(new CoGroupOutFormat(),pathPrefix + "/result.txt");
  output.setDegreeOfParallelism(1);
  output.setInput(testCoGrouper);
  testCoGrouper.setFirstInput(input_left);
  testCoGrouper.setSecondInput(input_right);
  Plan plan=new Plan(output);
  PactCompiler pc=new PactCompiler(new DataStatistics());
  OptimizedPlan op=pc.compile(plan);
  NepheleJobGraphGenerator jgg=new NepheleJobGraphGenerator();
  return jgg.compileJobGraph(op);
}
