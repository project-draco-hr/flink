{
  try {
    TestTaskContext<GroupReduceFunction<Tuple2<StringValue,IntValue>,Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>> context=new TestTaskContext<GroupReduceFunction<Tuple2<StringValue,IntValue>,Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>>();
    List<Tuple2<StringValue,IntValue>> data=DriverTestData.createReduceMutableData();
    TupleTypeInfo<Tuple2<StringValue,IntValue>> typeInfo=(TupleTypeInfo<Tuple2<StringValue,IntValue>>)TypeExtractor.getForObject(data.get(0));
    MutableObjectIterator<Tuple2<StringValue,IntValue>> input=new RegularToMutableObjectIterator<Tuple2<StringValue,IntValue>>(data.iterator(),typeInfo.createSerializer());
    TypeComparator<Tuple2<StringValue,IntValue>> comparator=typeInfo.createComparator(new int[]{0},new boolean[]{true},0);
    GatheringCollector<Tuple2<StringValue,IntValue>> result=new GatheringCollector<Tuple2<StringValue,IntValue>>(typeInfo.createSerializer());
    context.setDriverStrategy(DriverStrategy.SORTED_GROUP_REDUCE);
    context.setInput1(input,typeInfo.createSerializer());
    context.setComparator1(comparator);
    context.setCollector(result);
    context.setUdf(new ConcatSumMutableAccumulatingReducer());
    GroupReduceDriver<Tuple2<StringValue,IntValue>,Tuple2<StringValue,IntValue>> driver=new GroupReduceDriver<Tuple2<StringValue,IntValue>,Tuple2<StringValue,IntValue>>();
    driver.setup(context);
    driver.prepare();
    driver.run();
    Object[] res=result.getList().toArray();
    Object[] expected=DriverTestData.createReduceMutableDataGroupedResult().toArray();
    try {
      DriverTestData.compareTupleArrays(expected,res);
      Assert.fail("Accumulationg mutable objects is expected to result in incorrect values.");
    }
 catch (    AssertionError e) {
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
