{
  try {
    final int NUM_ELEMENTS=10000;
    List<Integer> data=new ArrayList<Integer>(NUM_ELEMENTS);
    List<Integer> result=new ArrayList<Integer>(NUM_ELEMENTS);
    for (int i=0; i < NUM_ELEMENTS; i++) {
      data.add(i);
    }
    final FromElementsFunction<Integer> source=new FromElementsFunction<Integer>(IntSerializer.INSTANCE,data);
    final FromElementsFunction<Integer> sourceCopy=CommonTestUtils.createCopySerializable(source);
    final SourceFunction.SourceContext<Integer> ctx=new ListSourceContext<Integer>(result,2L);
    final Throwable[] error=new Throwable[1];
    Thread runner=new Thread(){
      @Override public void run(){
        try {
          source.run(ctx);
        }
 catch (        Throwable t) {
          error[0]=t;
        }
      }
    }
;
    runner.start();
    Thread.sleep(1000);
    int count;
    List<Integer> checkpointData=new ArrayList<Integer>(NUM_ELEMENTS);
synchronized (ctx.getCheckpointLock()) {
      count=source.snapshotState(566,System.currentTimeMillis());
      checkpointData.addAll(result);
    }
    source.cancel();
    runner.join();
    if (error[0] != null) {
      System.err.println("Error in asynchronous source runner");
      error[0].printStackTrace();
      fail("Error in asynchronous source runner");
    }
    SourceFunction.SourceContext<Integer> newCtx=new ListSourceContext<Integer>(checkpointData);
    sourceCopy.restoreState(count);
    sourceCopy.run(newCtx);
    assertEquals(data,checkpointData);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
