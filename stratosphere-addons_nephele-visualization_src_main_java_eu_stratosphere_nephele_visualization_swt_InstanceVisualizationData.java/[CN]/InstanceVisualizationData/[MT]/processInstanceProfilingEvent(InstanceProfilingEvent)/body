{
  double timestamp=VertexVisualizationData.getTimestamp(instanceProfilingEvent);
  final long instanceMemoryInMB=instanceProfilingEvent.getTotalMemory() / KILOBYTE_TO_MEGABYTE;
  if (instanceMemoryInMB > this.totalMemoryinMB) {
    this.totalMemoryinMB=instanceMemoryInMB;
  }
  final long cachedMemory=instanceProfilingEvent.getBufferedMemory() + instanceProfilingEvent.getCachedMemory() + instanceProfilingEvent.getCachedSwapMemory();
  final long usedMemory=instanceProfilingEvent.getTotalMemory() - instanceProfilingEvent.getFreeMemory() - cachedMemory;
  this.cpuUsrSeries.addOrUpdate(timestamp,instanceProfilingEvent.getUserCPU());
  this.cpuSysSeries.addOrUpdate(timestamp,instanceProfilingEvent.getSystemCPU());
  this.cpuWaitSeries.addOrUpdate(timestamp,instanceProfilingEvent.getIOWaitCPU());
  this.cpuHardIrqSeries.addOrUpdate(timestamp,instanceProfilingEvent.getHardIrqCPU());
  this.cpuSoftIrqSeries.addOrUpdate(timestamp,instanceProfilingEvent.getSoftIrqCPU());
  this.totalMemorySeries.addOrUpdate(timestamp,instanceProfilingEvent.getTotalMemory() / KILOBYTE_TO_MEGABYTE);
  this.usedMemorySeries.addOrUpdate(timestamp,usedMemory / KILOBYTE_TO_MEGABYTE);
  this.cachedMemorySeries.addOrUpdate(timestamp,cachedMemory / KILOBYTE_TO_MEGABYTE);
  this.networkReceivedSeries.addOrUpdate(timestamp,toMBitPerSec(instanceProfilingEvent.getReceivedBytes(),instanceProfilingEvent.getProfilingInterval()));
  this.networkTransmittedSeries.addOrUpdate(timestamp,toMBitPerSec(instanceProfilingEvent.getTransmittedBytes(),instanceProfilingEvent.getProfilingInterval()));
}
