{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.getConfig().setExecutionMode(execMode);
    DataSet<Tuple2<Long,Long>> data=env.generateSequence(1,100000).map(new MapFunction<Long,Tuple2<Long,Long>>(){
      @Override public Tuple2<Long,Long> map(      Long value){
        return new Tuple2<Long,Long>(value,value);
      }
    }
);
    data.filter(new FilterFunction<Tuple2<Long,Long>>(){
      @Override public boolean filter(      Tuple2<Long,Long> value){
        return false;
      }
    }
).output(new DiscardingOutputFormat<Tuple2<Long,Long>>()).name("sink1");
    data.join(env.fromElements(new Tuple2<Long,Long>(1L,2L))).where(1).equalTo(0).output(new DiscardingOutputFormat<Tuple2<Tuple2<Long,Long>,Tuple2<Long,Long>>>()).name("sink2");
    data.output(new DiscardingOutputFormat<Tuple2<Long,Long>>()).name("sink3");
    OptimizedPlan optPlan=compileNoStats(env.createProgramPlan());
    SinkPlanNode filterSink=findSink(optPlan.getDataSinks(),"sink1");
    SinkPlanNode joinSink=findSink(optPlan.getDataSinks(),"sink2");
    SinkPlanNode directSink=findSink(optPlan.getDataSinks(),"sink3");
    SingleInputPlanNode filterNode=(SingleInputPlanNode)filterSink.getPredecessor();
    SingleInputPlanNode mapNode=(SingleInputPlanNode)filterNode.getPredecessor();
    DualInputPlanNode joinNode=(DualInputPlanNode)joinSink.getPredecessor();
    assertEquals(mapNode,joinNode.getInput1().getSource());
    assertEquals(mapNode,directSink.getPredecessor());
    assertEquals(toFilterSink,filterSink.getInput().getDataExchangeMode());
    assertEquals(toJoinSink,joinSink.getInput().getDataExchangeMode());
    assertEquals(toDirectSink,directSink.getInput().getDataExchangeMode());
    assertEquals(toMap,mapNode.getInput().getDataExchangeMode());
    assertEquals(toFilter,filterNode.getInput().getDataExchangeMode());
    assertEquals(toJoin1,joinNode.getInput1().getDataExchangeMode());
    assertEquals(toJoin2,joinNode.getInput2().getDataExchangeMode());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
