{
  HashMap<String,ArrayList<PlanNode>> map=new HashMap<String,ArrayList<PlanNode>>();
  for (  PlanNode n : p.getAllNodes()) {
    Operator<?> c=n.getOriginalOptimizerNode().getPactContract();
    String name=c.getName();
    ArrayList<PlanNode> list=map.get(name);
    if (list == null) {
      list=new ArrayList<PlanNode>(2);
      map.put(name,list);
    }
    boolean shouldAdd=true;
    for (Iterator<PlanNode> iter=list.iterator(); iter.hasNext(); ) {
      PlanNode in=iter.next();
      if (in.getOriginalOptimizerNode().getPactContract() == c) {
        if (in instanceof SingleInputPlanNode && n instanceof SingleInputPlanNode) {
          SingleInputPlanNode thisNode=(SingleInputPlanNode)n;
          SingleInputPlanNode otherNode=(SingleInputPlanNode)in;
          if (thisNode.getPredecessor() == otherNode) {
            iter.remove();
          }
 else           if (otherNode.getPredecessor() == thisNode) {
            shouldAdd=false;
          }
        }
 else {
          throw new RuntimeException("Unrecodnized case in test.");
        }
      }
    }
    if (shouldAdd) {
      list.add(n);
    }
  }
  this.map=map;
}
