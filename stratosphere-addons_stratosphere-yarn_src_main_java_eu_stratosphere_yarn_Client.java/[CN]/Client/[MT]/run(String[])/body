{
  Options options=new Options();
  options.addOption(VERBOSE);
  options.addOption(STRATOSPHERE_CONF);
  options.addOption(STRATOSPHERE_JAR);
  options.addOption(JM_MEMORY);
  options.addOption(TM_MEMORY);
  options.addOption(TM_CORES);
  options.addOption(CONTAINER);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  MissingOptionException moe) {
    System.err.println(moe.getMessage());
    System.out.println("Usage:");
    HelpFormatter formatter=new HelpFormatter();
    formatter.setWidth(200);
    formatter.setLeftPadding(5);
    formatter.setSyntaxPrefix("   Required");
    Options req=new Options();
    req.addOption(CONTAINER);
    formatter.printHelp(" ",req);
    formatter.setSyntaxPrefix("   Optional");
    Options opt=new Options();
    opt.addOption(VERBOSE);
    opt.addOption(GEN_CONF);
    opt.addOption(STRATOSPHERE_CONF);
    opt.addOption(STRATOSPHERE_JAR);
    opt.addOption(JM_MEMORY);
    opt.addOption(TM_MEMORY);
    opt.addOption(TM_CORES);
    formatter.printHelp(" ",opt);
    System.exit(1);
  }
  if (System.getProperty("log4j.configuration") == null) {
    Logger root=Logger.getRootLogger();
    root.removeAllAppenders();
    PatternLayout layout=new PatternLayout("%d{HH:mm:ss,SSS} %-5p %-60c %x - %m%n");
    ConsoleAppender appender=new ConsoleAppender(layout,"System.err");
    root.addAppender(appender);
    if (cmd.hasOption(VERBOSE.getOpt())) {
      root.setLevel(Level.DEBUG);
      LOG.debug("CLASSPATH: " + System.getProperty("java.class.path"));
    }
 else {
      root.setLevel(Level.INFO);
    }
  }
  final int taskManagerCount=Integer.valueOf(cmd.getOptionValue(CONTAINER.getOpt()));
  Path localJarPath;
  if (cmd.hasOption(STRATOSPHERE_JAR.getOpt())) {
    String userPath=cmd.getOptionValue(STRATOSPHERE_JAR.getOpt());
    if (!userPath.startsWith("file://")) {
      userPath="file://" + userPath;
    }
    localJarPath=new Path(userPath);
  }
 else {
    localJarPath=new Path("file://" + Client.class.getProtectionDomain().getCodeSource().getLocation().getPath());
  }
  if (cmd.hasOption(GEN_CONF.getOpt())) {
    LOG.info("Placing default configuration in current directory");
    File outFile=generateDefaultConf(localJarPath);
    LOG.info("File written to " + outFile.getAbsolutePath());
    System.exit(0);
  }
  Path confPath=null;
  if (cmd.hasOption(STRATOSPHERE_CONF.getOpt())) {
    confPath=new Path(cmd.getOptionValue(STRATOSPHERE_CONF.getOpt()));
  }
 else {
    System.out.println("No configuration file has been specified");
    File currDir=new File(".");
    File[] candidates=currDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      final File dir,      final String name){
        return name != null && name.endsWith(".yaml");
      }
    }
);
    if (candidates == null || candidates.length == 0) {
      System.out.println("No configuration file has been found in current directory.\n" + "Copying default.");
      File outFile=generateDefaultConf(localJarPath);
      confPath=new Path(outFile.toURI());
    }
 else {
      if (candidates.length > 1) {
        System.out.println("Multiple .yaml configuration files were found in the current directory\n" + "Please specify one explicitly");
        System.exit(1);
      }
 else       if (candidates.length == 1) {
        confPath=new Path(candidates[0].toURI());
      }
    }
  }
  int jmMemory=512;
  if (cmd.hasOption(JM_MEMORY.getOpt())) {
    jmMemory=Integer.valueOf(cmd.getOptionValue(JM_MEMORY.getOpt()));
  }
  int tmMemory=1000;
  if (cmd.hasOption(TM_MEMORY.getOpt())) {
    tmMemory=Integer.valueOf(cmd.getOptionValue(TM_MEMORY.getOpt()));
  }
  int tmCores=1;
  if (cmd.hasOption(TM_CORES.getOpt())) {
    tmCores=Integer.valueOf(cmd.getOptionValue(TM_CORES.getOpt()));
  }
  Utils.getStratosphereConfiguration(confPath.toUri().getPath());
  int jmPort=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,0);
  if (jmPort == 0) {
    LOG.warn("Unable to find job manager port in configuration!");
    jmPort=ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT;
  }
  System.out.println("Using values:");
  System.out.println("\tContainer Count = " + taskManagerCount);
  System.out.println("\tJar Path = " + localJarPath.toUri().getPath());
  System.out.println("\tConfiguration file = " + confPath.toUri().getPath());
  System.out.println("\tJobManager memory = " + jmMemory);
  System.out.println("\tTaskManager memory = " + tmMemory);
  System.out.println("\tTaskManager cores = " + tmCores);
  conf=Utils.initializeYarnConfiguration();
  LOG.info("Copy App Master jar from local filesystem and add to local environment");
  FileSystem fs=FileSystem.get(conf);
  YarnClient yarnClient=YarnClient.createYarnClient();
  yarnClient.init(conf);
  yarnClient.start();
  YarnClientApplication app=yarnClient.createApplication();
  ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);
  final String amCommand="$JAVA_HOME/bin/java" + " -Xmx" + jmMemory + "M"+ " eu.stratosphere.yarn.ApplicationMaster"+ " "+ " 1>"+ ApplicationConstants.LOG_DIR_EXPANSION_VAR+ "/stdout"+ " 2>"+ ApplicationConstants.LOG_DIR_EXPANSION_VAR+ "/stderr";
  amContainer.setCommands(Collections.singletonList(amCommand));
  System.err.println("amCommand=" + amCommand);
  ApplicationSubmissionContext appContext=app.getApplicationSubmissionContext();
  ApplicationId appId=appContext.getApplicationId();
  LocalResource appMasterJar=Records.newRecord(LocalResource.class);
  LocalResource stratosphereConf=Records.newRecord(LocalResource.class);
  Path remotePathJar=Utils.setupLocalResource(conf,fs,appId.getId(),localJarPath,appMasterJar);
  Utils.setupLocalResource(conf,fs,appId.getId(),confPath,stratosphereConf);
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>(2);
  localResources.put("stratosphere.jar",appMasterJar);
  localResources.put("stratosphere-conf.yaml",stratosphereConf);
  amContainer.setLocalResources(localResources);
  Map<String,String> appMasterEnv=new HashMap<String,String>();
  Utils.setupEnv(conf,appMasterEnv);
  appMasterEnv.put(Client.ENV_TM_COUNT,String.valueOf(taskManagerCount));
  appMasterEnv.put(Client.ENV_TM_CORES,String.valueOf(tmCores));
  appMasterEnv.put(Client.ENV_TM_MEMORY,String.valueOf(tmMemory));
  appMasterEnv.put(Client.STRATOSPHERE_JAR_PATH,remotePathJar.toString());
  appMasterEnv.put(Client.ENV_APP_ID,String.valueOf(appId.getId()));
  amContainer.setEnvironment(appMasterEnv);
  Resource capability=Records.newRecord(Resource.class);
  capability.setMemory(jmMemory);
  capability.setVirtualCores(1);
  appContext.setApplicationName("Stratosphere");
  appContext.setAMContainerSpec(amContainer);
  appContext.setResource(capability);
  appContext.setQueue("default");
  System.out.println("Submitting application master " + appId);
  yarnClient.submitApplication(appContext);
  ApplicationReport appReport=yarnClient.getApplicationReport(appId);
  YarnApplicationState appState=appReport.getYarnApplicationState();
  boolean told=false;
  while (appState != YarnApplicationState.FINISHED && appState != YarnApplicationState.KILLED && appState != YarnApplicationState.FAILED) {
    if (!told && appState == YarnApplicationState.RUNNING) {
      System.err.println("JobManager is now running on " + appReport.getHost() + ":"+ jmPort);
      told=true;
    }
    System.err.println("JobManager is now running on " + appReport.getHost() + ":"+ jmPort+ "\n"+ "Application report from ASM: \n"+ "\t application identifier: "+ appId.toString()+ "\n"+ "\t appId: "+ appId.getId()+ "\n"+ "\t appDiagnostics: "+ appReport.getDiagnostics()+ "\n"+ "\t appMasterHost: "+ appReport.getHost()+ "\n"+ "\t appQueue: "+ appReport.getQueue()+ "\n"+ "\t appMasterRpcPort: "+ appReport.getRpcPort()+ "\n"+ "\t appStartTime: "+ appReport.getStartTime()+ "\n"+ "\t yarnAppState: "+ appReport.getYarnApplicationState()+ "\n"+ "\t distributedFinalState: "+ appReport.getFinalApplicationStatus()+ "\n"+ "\t appTrackingUrl: "+ appReport.getTrackingUrl()+ "\n"+ "\t appUser: "+ appReport.getUser());
    Thread.sleep(5000);
    appReport=yarnClient.getApplicationReport(appId);
    appState=appReport.getYarnApplicationState();
  }
  System.out.println("Application " + appId + " finished with"+ " state "+ appState+ " at "+ appReport.getFinishTime());
}
