{
switch (direction) {
case IN:
    return edges.map(new ProjectVertexWithEdgeValueMap<K,EV>(1)).withForwardedFields("f1->f0").groupBy(0).reduce(new ApplyReduceFunction<K,EV>(reduceEdgesFunction));
case OUT:
  return edges.map(new ProjectVertexWithEdgeValueMap<K,EV>(0)).withForwardedFields("f0->f0").groupBy(0).reduce(new ApplyReduceFunction<K,EV>(reduceEdgesFunction));
case ALL:
return edges.flatMap(new EmitOneVertexWithEdgeValuePerNode<K,EV>()).withForwardedFields("f2->f1").groupBy(0).reduce(new ApplyReduceFunction<K,EV>(reduceEdgesFunction));
default :
throw new IllegalArgumentException("Illegal edge direction");
}
}
