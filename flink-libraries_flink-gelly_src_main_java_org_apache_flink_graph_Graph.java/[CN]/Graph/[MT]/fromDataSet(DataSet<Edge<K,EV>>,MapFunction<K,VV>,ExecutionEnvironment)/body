{
  TypeInformation<K> keyType=((TupleTypeInfo<?>)edges.getType()).getTypeAt(0);
  TypeInformation<VV> valueType=TypeExtractor.createTypeInfo(MapFunction.class,mapper.getClass(),1,null,null);
  @SuppressWarnings({"unchecked","rawtypes"}) TypeInformation<Vertex<K,VV>> returnType=(TypeInformation<Vertex<K,VV>>)new TupleTypeInfo(Vertex.class,keyType,valueType);
  DataSet<Vertex<K,VV>> vertices=edges.flatMap(new EmitSrcAndTargetAsTuple1<K,EV>()).distinct().map(new MapFunction<Tuple1<K>,Vertex<K,VV>>(){
    public Vertex<K,VV> map(    Tuple1<K> value) throws Exception {
      return new Vertex<K,VV>(value.f0,mapper.map(value.f0));
    }
  }
).returns(returnType).withForwardedFields("f0");
  return new Graph<K,VV,EV>(vertices,edges,context);
}
