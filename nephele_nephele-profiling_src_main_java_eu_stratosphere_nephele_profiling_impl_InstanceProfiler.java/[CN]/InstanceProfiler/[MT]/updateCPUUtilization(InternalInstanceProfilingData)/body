{
  try {
    FileReader fileReader=new FileReader(PROC_STAT);
    final BufferedReader in=new BufferedReader(fileReader);
    final String output=in.readLine();
    if (output == null) {
      throw new ProfilingException("Cannot read CPU utilization, return value is null");
    }
    in.close();
    final Matcher cpuMatcher=CPU_PATTERN.matcher(output);
    if (!cpuMatcher.matches()) {
      throw new ProfilingException("Cannot extract CPU utilization from output \"" + output + "\"");
    }
    final long cpuUser=Long.parseLong(cpuMatcher.group(1));
    final long cpuNice=Long.parseLong(cpuMatcher.group(2));
    final long cpuSys=Long.parseLong(cpuMatcher.group(3));
    final long cpuIdle=Long.parseLong(cpuMatcher.group(4));
    final long cpuIOWait=Long.parseLong(cpuMatcher.group(5));
    final long cpuIrq=Long.parseLong(cpuMatcher.group(6));
    final long cpuSoftirq=Long.parseLong(cpuMatcher.group(7));
    final long deltaCpuUser=cpuUser - this.lastCpuUser;
    final long deltaCpuNice=cpuNice - this.lastCpuNice;
    final long deltaCpuSys=cpuSys - this.lastCpuSys;
    final long deltaCpuIdle=cpuIdle - this.lastCpuIdle;
    final long deltaCpuIOWait=cpuIOWait - this.lastCpuIOWait;
    final long deltaCpuIrq=cpuIrq - this.lastCpuIrq;
    final long deltaCpuSoftirq=cpuSoftirq - this.lastCpuSoftirq;
    final long deltaSum=deltaCpuUser + deltaCpuNice + deltaCpuSys+ deltaCpuIdle+ deltaCpuIOWait+ deltaCpuIrq+ deltaCpuSoftirq;
    if (deltaSum > 0) {
      profilingData.setIdleCPU((int)((deltaCpuIdle * PERCENT) / deltaSum));
      profilingData.setUserCPU((int)((deltaCpuUser * PERCENT) / deltaSum));
      profilingData.setSystemCPU((int)((deltaCpuSys * PERCENT) / deltaSum));
      profilingData.setIoWaitCPU((int)((deltaCpuIOWait * PERCENT) / deltaSum));
      profilingData.setHardIrqCPU((int)((deltaCpuIrq * PERCENT) / deltaSum));
      profilingData.setSoftIrqCPU((int)((deltaCpuSoftirq * PERCENT) / deltaSum));
    }
 else {
      profilingData.setIdleCPU((int)(deltaCpuIdle));
      profilingData.setUserCPU((int)(deltaCpuUser));
      profilingData.setSystemCPU((int)(deltaCpuSys));
      profilingData.setIoWaitCPU((int)(deltaCpuIOWait));
      profilingData.setHardIrqCPU((int)(deltaCpuIrq));
      profilingData.setSoftIrqCPU((int)(deltaCpuSoftirq));
    }
    this.lastCpuUser=cpuUser;
    this.lastCpuNice=cpuNice;
    this.lastCpuSys=cpuSys;
    this.lastCpuIdle=cpuIdle;
    this.lastCpuIOWait=cpuIOWait;
    this.lastCpuIrq=cpuIrq;
    this.lastCpuSoftirq=cpuSoftirq;
    fileReader.close();
  }
 catch (  IOException ioe) {
    throw new ProfilingException("Error while reading CPU utilization: " + StringUtils.stringifyException(ioe));
  }
catch (  NumberFormatException nfe) {
    throw new ProfilingException("Error while reading CPU utilization: " + StringUtils.stringifyException(nfe));
  }
}
