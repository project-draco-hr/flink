{
  try {
    FileReader fileReader=new FileReader(ETC_NETWORK_INTERFACES);
    BufferedReader in=new BufferedReader(fileReader);
    String instanceAdress=this.instanceConnectionInfo.getAddress().getHostAddress();
    String output;
    String eth="";
    boolean found=false;
    int foundEths=0;
    while ((output=in.readLine()) != null) {
      int ethIndex=output.indexOf("eth");
      if (ethIndex != -1) {
        eth=output.substring(ethIndex,ethIndex + 4);
        foundEths++;
        continue;
      }
      int ipIndex=output.indexOf(instanceAdress);
      if (ipIndex != -1) {
        found=true;
        this.interfaceName=eth;
        break;
      }
    }
    if (!found && foundEths == 1)     this.interfaceName=eth;
    in.close();
    if (found) {
      in=new BufferedReader(new FileReader(VAR_LOG_DMESG));
      while ((output=in.readLine()) != null) {
        int ethIndex=output.indexOf(eth);
        if (ethIndex != -1) {
          int speedIndex=output.indexOf("Mbps");
          if (speedIndex != -1) {
            int speedIndex2=output.indexOf('1',speedIndex - 6);
            if (speedIndex2 != -1) {
              String speed=output.substring(speedIndex2,speedIndex);
              int ethspeed=Integer.parseInt(speed.trim());
              this.networkSpeedPerSecondInBytes=ethspeed * 125000;
            }
            break;
          }
          continue;
        }
      }
      in.close();
    }
  }
 catch (  IOException ioe) {
    throw new ProfilingException("Error while reading network utilization: " + StringUtils.stringifyException(ioe));
  }
catch (  NumberFormatException nfe) {
    throw new ProfilingException("Error while reading network utilization: " + StringUtils.stringifyException(nfe));
  }
}
