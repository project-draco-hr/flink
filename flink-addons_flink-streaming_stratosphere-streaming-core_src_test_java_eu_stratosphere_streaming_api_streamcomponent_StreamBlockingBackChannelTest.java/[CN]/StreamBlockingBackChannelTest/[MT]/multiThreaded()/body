{
  message.setSeralizationDelegate(sd);
  BlockingQueue<StreamRecord> dataChannel=new ArrayBlockingQueue<StreamRecord>(1);
  BlockingQueueBroker.instance().handIn("dc",dataChannel);
  BlockingQueue<StreamRecord> dc=BlockingQueueBroker.instance().getAndRemove("dc");
  List<String> actionLog=Lists.newArrayList();
  List<MemorySegment> segments=new ArrayList<MemorySegment>();
  IOManager io=new IOManager();
  MemoryManager mm=new DefaultMemoryManager(1024000000,1,8192);
  mm.allocatePages(new AbstractInvokable(){
    @Override public void registerInputOutput(){
    }
    @Override public void invoke() throws Exception {
    }
  }
,segments,mm.getPageSize());
  SerializedUpdateBuffer buffer=new SerializedUpdateBuffer(segments,mm.getPageSize(),io);
  BlockingBackChannel channel=new BlockingBackChannel(buffer);
  Thread head=new Thread(new IterationHead(channel,dc,actionLog));
  Thread tail=new Thread(new IterationTail(channel,dc,actionLog));
  tail.start();
  head.start();
  head.join();
  tail.join();
  assertEquals(12,actionLog.size());
  assertEquals("head sends data",actionLog.get(0));
  assertEquals("tail receives data",actionLog.get(1));
  assertEquals("tail writes in iteration 0",actionLog.get(2));
  assertEquals("head reads in iteration 0",actionLog.get(3));
  assertEquals("head sends data",actionLog.get(4));
  assertEquals("tail receives data",actionLog.get(5));
  assertEquals("tail writes in iteration 1",actionLog.get(6));
  assertEquals("head reads in iteration 1",actionLog.get(7));
  assertEquals("head sends data",actionLog.get(8));
  assertEquals("tail receives data",actionLog.get(9));
  assertEquals("tail writes in iteration 2",actionLog.get(10));
  assertEquals("head reads in iteration 2",actionLog.get(11));
}
