{
  statistics.processCollectedData();
  final long now=System.currentTimeMillis();
  final Iterator<Map.Entry<Integer,CachedResponse>> it=cachedResponses.entrySet().iterator();
  while (it.hasNext()) {
    final Map.Entry<Integer,CachedResponse> entry=it.next();
    final CachedResponse cachedResponse=entry.getValue();
    if (cachedResponse.creationTime + CLEANUP_INTERVAL < now) {
      it.remove();
    }
  }
  final Iterator<Map.Entry<MultiPacketInputStreamKey,MultiPacketInputStream>> it2=incompleteInputStreams.entrySet().iterator();
  while (it2.hasNext()) {
    final Map.Entry<MultiPacketInputStreamKey,MultiPacketInputStream> entry=it2.next();
    final MultiPacketInputStream mpis=entry.getValue();
    if (mpis.getCreationTime() + CLEANUP_INTERVAL < now) {
      it2.remove();
    }
  }
}
