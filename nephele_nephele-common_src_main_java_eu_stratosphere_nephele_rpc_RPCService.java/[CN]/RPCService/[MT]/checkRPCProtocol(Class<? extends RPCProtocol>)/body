{
  if (!protocol.isInterface()) {
    throw new IllegalArgumentException("Provided protocol " + protocol + " is not an interface");
  }
  try {
    final Method[] methods=protocol.getMethods();
    for (int i=0; i < methods.length; ++i) {
      final Method method=methods[i];
      final Class<?>[] exceptionTypes=method.getExceptionTypes();
      boolean ioExceptionFound=false;
      boolean interruptedExceptionFound=false;
      for (int j=0; j < exceptionTypes.length; ++j) {
        if (IOException.class.equals(exceptionTypes[j])) {
          ioExceptionFound=true;
        }
 else         if (InterruptedException.class.equals(exceptionTypes[j])) {
          interruptedExceptionFound=true;
        }
      }
      if (!ioExceptionFound) {
        throw new IllegalArgumentException("Method " + method.getName() + " must be declared to throw an IOException");
      }
      if (!interruptedExceptionFound) {
        throw new IllegalArgumentException("Method " + method.getName() + " must be declared to throw an InterruptedException");
      }
    }
  }
 catch (  SecurityException se) {
    if (Log.DEBUG) {
      Log.debug(StringUtils.stringifyException(se));
    }
  }
}
