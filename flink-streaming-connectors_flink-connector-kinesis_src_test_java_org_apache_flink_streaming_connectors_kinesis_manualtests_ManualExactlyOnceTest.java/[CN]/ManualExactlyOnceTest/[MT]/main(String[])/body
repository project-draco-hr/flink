{
  final ParameterTool pt=ParameterTool.fromArgs(args);
  LOG.info("Starting exactly once test");
  final String streamName="flink-test-" + UUID.randomUUID().toString();
  final String accessKey=pt.getRequired("accessKey");
  final String secretKey=pt.getRequired("secretKey");
  final String region=pt.getRequired("region");
  Properties configProps=new Properties();
  configProps.setProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_ACCESSKEYID,accessKey);
  configProps.setProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_SECRETKEY,secretKey);
  configProps.setProperty(KinesisConfigConstants.CONFIG_AWS_REGION,region);
  AmazonKinesisClient client=AWSUtil.createKinesisClient(configProps);
  client.createStream(streamName,1);
  DescribeStreamResult status=client.describeStream(streamName);
  LOG.info("status {}",status);
  while (!status.getStreamDescription().getStreamStatus().equals("ACTIVE")) {
    status=client.describeStream(streamName);
    LOG.info("Status of stream {}",status);
    Thread.sleep(1000);
  }
  final Configuration flinkConfig=new Configuration();
  flinkConfig.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER,1);
  flinkConfig.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,8);
  flinkConfig.setInteger(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,16);
  flinkConfig.setString(ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_DELAY,"0 s");
  ForkableFlinkMiniCluster flink=new ForkableFlinkMiniCluster(flinkConfig,false);
  flink.start();
  final int flinkPort=flink.getLeaderRPCPort();
  try {
    final AtomicReference<Throwable> producerError=new AtomicReference<>();
    Thread producerThread=KinesisEventsGeneratorProducerThread.create(TOTAL_EVENT_COUNT,2,accessKey,secretKey,region,streamName,producerError,flinkPort,flinkConfig);
    producerThread.start();
    final AtomicReference<Throwable> consumerError=new AtomicReference<>();
    Thread consumerThread=ExactlyOnceValidatingConsumerThread.create(TOTAL_EVENT_COUNT,200,2,500,500,accessKey,secretKey,region,streamName,consumerError,flinkPort,flinkConfig);
    consumerThread.start();
    boolean deadlinePassed=false;
    long deadline=System.currentTimeMillis() + (1000 * 2 * 60);
    while ((consumerThread.isAlive() || producerThread.isAlive()) && (producerError.get() == null && consumerError.get() == null)) {
      Thread.sleep(1000);
      if (System.currentTimeMillis() >= deadline) {
        LOG.warn("Deadline passed");
        deadlinePassed=true;
        break;
      }
    }
    if (producerThread.isAlive()) {
      producerThread.interrupt();
    }
    if (consumerThread.isAlive()) {
      consumerThread.interrupt();
    }
    if (producerError.get() != null) {
      LOG.info("+++ TEST failed! +++");
      throw new RuntimeException("Producer failed",producerError.get());
    }
    if (consumerError.get() != null) {
      LOG.info("+++ TEST failed! +++");
      throw new RuntimeException("Consumer failed",consumerError.get());
    }
    if (!deadlinePassed) {
      LOG.info("+++ TEST passed! +++");
    }
 else {
      LOG.info("+++ TEST failed! +++");
    }
  }
  finally {
    client.deleteStream(streamName);
    client.shutdown();
    flink.stop();
  }
}
