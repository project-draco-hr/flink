{
  final long NUM_STRINGS=10000000L;
  assertTrue("Broken test setup",NUM_STRINGS % 40 == 0);
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getJobManagerRPCPort());
    env.setParallelism(PARALLELISM);
    env.enableCheckpointing(500);
    env.getConfig().disableSysoutLogging();
    DataStream<String> stream=env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS));
    stream.filter(new StringRichFilterFunction()).shuffle().map(new StringPrefixCountRichMapFunction()).startNewChain().map(new StatefulCounterFunction()).groupBy("prefix").map(new OnceFailingPrefixCounter(NUM_STRINGS)).addSink(new SinkFunction<PrefixCount>(){
      @Override public void invoke(      PrefixCount value) throws Exception {
      }
    }
);
    env.execute();
    long filterSum=0;
    for (    long l : StringRichFilterFunction.counts) {
      filterSum+=l;
    }
    long mapSum=0;
    for (    long l : StringPrefixCountRichMapFunction.counts) {
      mapSum+=l;
    }
    long countSum=0;
    for (    long l : StatefulCounterFunction.counts) {
      countSum+=l;
    }
    long reduceInputCount=0;
    for (    long l : OnceFailingPrefixCounter.counts) {
      reduceInputCount+=l;
    }
    assertEquals(NUM_STRINGS,filterSum);
    assertEquals(NUM_STRINGS,mapSum);
    assertEquals(NUM_STRINGS,countSum);
    assertEquals(NUM_STRINGS,reduceInputCount);
    for (    Long count : OnceFailingPrefixCounter.prefixCounts.values()) {
      assertEquals(new Long(NUM_STRINGS / 40),count);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
