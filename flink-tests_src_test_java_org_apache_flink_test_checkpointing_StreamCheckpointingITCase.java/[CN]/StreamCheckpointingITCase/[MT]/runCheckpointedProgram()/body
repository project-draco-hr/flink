{
  final long NUM_STRINGS=10000000L;
  assertTrue("Broken test setup",NUM_STRINGS % 40 == 0);
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getJobManagerRPCPort());
    env.setParallelism(PARALLELISM);
    env.enableCheckpointing(500);
    env.getConfig().disableSysoutLogging();
    DataStream<String> stream=env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS));
    stream.filter(new FilterFunction<String>(){
      @Override public boolean filter(      String value){
        return value.length() < 100;
      }
    }
).map(new MapFunction<String,PrefixCount>(){
      @Override public PrefixCount map(      String value){
        return new PrefixCount(value.substring(0,1),value,1L);
      }
    }
).startNewChain().map(new StatefulCounterFunction()).groupBy("prefix").reduce(new OnceFailingReducer(NUM_STRINGS)).addSink(new RichSinkFunction<PrefixCount>(){
      private Map<Character,Long> counts=new HashMap<Character,Long>();
      @Override public void invoke(      PrefixCount value){
        Character first=value.prefix.charAt(0);
        Long previous=counts.get(first);
        if (previous == null) {
          counts.put(first,value.count);
        }
 else {
          counts.put(first,Math.max(previous,value.count));
        }
      }
    }
);
    env.execute();
    long countSum=0;
    for (    long l : StatefulCounterFunction.counts) {
      countSum+=l;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
