{
  this.estimatedNumRecords=0;
  this.estimatedOutputSize=0;
  for (  FieldSet fieldSet : getIncomingConnections().get(0).getSource().getEstimatedCardinalities().keySet()) {
    this.estimatedCardinality.put(fieldSet,-1L);
  }
  for (  PactConnection inConn : getIncomingConnections()) {
    OptimizerNode inputPact=inConn.getSource();
    long estimatedNumRecordForInput=inputPact.estimatedNumRecords;
    if (estimatedNumRecordForInput != -1 && this.estimatedNumRecords != -1) {
      this.estimatedNumRecords+=estimatedNumRecordForInput;
    }
 else {
      this.estimatedNumRecords=-1;
    }
    long estimatedOutputSizeForInput=inputPact.estimatedOutputSize;
    if (estimatedOutputSizeForInput != -1 && this.estimatedOutputSize != -1) {
      this.estimatedOutputSize+=estimatedOutputSizeForInput;
    }
 else {
      this.estimatedOutputSize=-1;
    }
    Set<FieldSet> toRemove=new HashSet<FieldSet>();
    for (    Entry<FieldSet,Long> cardinality : this.estimatedCardinality.entrySet()) {
      long inputCard=inputPact.getEstimatedCardinality(cardinality.getKey());
      if (inputCard == -1) {
        toRemove.add(cardinality.getKey());
      }
 else {
        inputCard=Math.max(inputCard,cardinality.getValue());
        cardinality.setValue(inputCard);
      }
    }
    this.estimatedCardinality.keySet().removeAll(toRemove);
  }
}
