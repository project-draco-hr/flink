{
  if (this.cachedPlans != null) {
    return this.cachedPlans;
  }
  final List<? extends PlanNode> subPlans1=getFirstPredecessorNode().getAlternativePlans(estimator);
  final List<? extends PlanNode> subPlans2=getSecondPredecessorNode().getAlternativePlans(estimator);
  final ArrayList<PlanNode> outputPlans=new ArrayList<PlanNode>();
  final BinaryUnionOpDescriptor operator=new BinaryUnionOpDescriptor();
  final RequestedLocalProperties noLocalProps=new RequestedLocalProperties();
  final int dop=getDegreeOfParallelism();
  final int subPerInstance=getSubtasksPerInstance();
  final int numInstances=dop / subPerInstance + (dop % subPerInstance == 0 ? 0 : 1);
  final int inDop1=getFirstPredecessorNode().getDegreeOfParallelism();
  final int inSubPerInstance1=getFirstPredecessorNode().getSubtasksPerInstance();
  final int inNumInstances1=inDop1 / inSubPerInstance1 + (inDop1 % inSubPerInstance1 == 0 ? 0 : 1);
  final int inDop2=getSecondPredecessorNode().getDegreeOfParallelism();
  final int inSubPerInstance2=getSecondPredecessorNode().getSubtasksPerInstance();
  final int inNumInstances2=inDop2 / inSubPerInstance2 + (inDop2 % inSubPerInstance2 == 0 ? 0 : 1);
  final boolean globalDopChange1=numInstances != inNumInstances1;
  final boolean globalDopChange2=numInstances != inNumInstances2;
  final boolean localDopChange1=numInstances == inNumInstances1 & subPerInstance != inSubPerInstance1;
  final boolean localDopChange2=numInstances == inNumInstances2 & subPerInstance != inSubPerInstance2;
  for (  PlanNode child1 : subPlans1) {
    for (    PlanNode child2 : subPlans2) {
      if (!areBranchCompatible(child1,child2)) {
        continue;
      }
      for (      RequestedGlobalProperties igps : this.channelProps) {
        Channel c1=new Channel(child1,this.input1.getMaterializationMode());
        if (this.input1.getShipStrategy() == null) {
          igps.parameterizeChannel(c1,globalDopChange1,localDopChange1);
          if (globalDopChange1 && !c1.getShipStrategy().isNetworkStrategy()) {
            c1.getGlobalProperties().reset();
          }
          if (localDopChange1 && !(c1.getShipStrategy().isNetworkStrategy() || c1.getShipStrategy().compensatesForLocalDOPChanges())) {
            c1.getGlobalProperties().reset();
          }
        }
 else {
          if (this.keys1 != null) {
            c1.setShipStrategy(this.input1.getShipStrategy(),this.keys1.toFieldList());
          }
 else {
            c1.setShipStrategy(this.input1.getShipStrategy());
          }
          if (globalDopChange1) {
            c1.adjustGlobalPropertiesForFullParallelismChange();
          }
 else           if (localDopChange1) {
            c1.adjustGlobalPropertiesForLocalParallelismChange();
          }
        }
        Channel c2=new Channel(child2,this.input2.getMaterializationMode());
        if (this.input2.getShipStrategy() == null) {
          igps.parameterizeChannel(c2,globalDopChange2,localDopChange2);
          if (globalDopChange2 && !c2.getShipStrategy().isNetworkStrategy()) {
            c2.getGlobalProperties().reset();
          }
          if (localDopChange2 && !(c2.getShipStrategy().isNetworkStrategy() || c2.getShipStrategy().compensatesForLocalDOPChanges())) {
            c2.getGlobalProperties().reset();
          }
        }
 else {
          if (this.keys2 != null) {
            c2.setShipStrategy(this.input2.getShipStrategy(),this.keys2.toFieldList());
          }
 else {
            c2.setShipStrategy(this.input2.getShipStrategy());
          }
          if (globalDopChange2) {
            c2.adjustGlobalPropertiesForFullParallelismChange();
          }
 else           if (localDopChange2) {
            c2.adjustGlobalPropertiesForLocalParallelismChange();
          }
        }
        GlobalProperties p1=c1.getGlobalProperties();
        GlobalProperties p2=c2.getGlobalProperties();
        p1.clearUniqueFieldCombinations();
        p2.clearUniqueFieldCombinations();
        if (!igps.isTrivial() && !(p1.equals(p2))) {
          if (c1.getShipStrategy() == ShipStrategyType.FORWARD && c2.getShipStrategy() != ShipStrategyType.FORWARD) {
            c2=c2.clone();
            p1.parameterizeChannel(c2,globalDopChange2);
          }
 else           if (c2.getShipStrategy() == ShipStrategyType.FORWARD && c1.getShipStrategy() != ShipStrategyType.FORWARD) {
            c1=c1.clone();
            p2.parameterizeChannel(c1,globalDopChange1);
          }
 else           if (c1.getShipStrategy() == ShipStrategyType.FORWARD && c2.getShipStrategy() == ShipStrategyType.FORWARD) {
            boolean adjustC1=c1.getEstimatedOutputSize() <= 0 || c2.getEstimatedOutputSize() <= 0 || c1.getEstimatedOutputSize() <= c2.getEstimatedOutputSize();
            if (adjustC1) {
              c2=c2.clone();
              p1.parameterizeChannel(c2,globalDopChange2);
            }
 else {
              c1=c1.clone();
              p2.parameterizeChannel(c1,globalDopChange1);
            }
          }
 else {
            throw new CompilerException("Bug in Plan Enumeration for Union Node.");
          }
        }
        instantiate(operator,c1,c2,outputPlans,estimator,igps,igps,noLocalProps,noLocalProps);
      }
    }
  }
  for (  PlanNode node : outputPlans) {
    estimator.costOperator(node);
  }
  prunePlanAlternatives(outputPlans);
  outputPlans.trimToSize();
  this.cachedPlans=outputPlans;
  return outputPlans;
}
