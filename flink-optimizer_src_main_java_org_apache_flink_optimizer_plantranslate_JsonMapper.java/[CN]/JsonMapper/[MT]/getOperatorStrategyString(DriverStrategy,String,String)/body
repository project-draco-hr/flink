{
  if (strategy == null) {
    return "(null)";
  }
switch (strategy) {
case SOURCE:
    return "Data Source";
case SINK:
  return "Data Sink";
case NONE:
return "(none)";
case BINARY_NO_OP:
case UNARY_NO_OP:
return "No-Op";
case MAP:
return "Map";
case FLAT_MAP:
return "FlatMap";
case MAP_PARTITION:
return "Map Partition";
case ALL_REDUCE:
return "Reduce All";
case ALL_GROUP_REDUCE:
case ALL_GROUP_REDUCE_COMBINE:
return "Group Reduce All";
case SORTED_REDUCE:
return "Sorted Reduce";
case SORTED_PARTIAL_REDUCE:
return "Sorted Combine/Reduce";
case SORTED_GROUP_REDUCE:
return "Sorted Group Reduce";
case SORTED_GROUP_COMBINE:
return "Sorted Combine";
case HYBRIDHASH_BUILD_FIRST:
return "Hybrid Hash (build: " + firstInputName + ")";
case HYBRIDHASH_BUILD_SECOND:
return "Hybrid Hash (build: " + secondInputName + ")";
case HYBRIDHASH_BUILD_FIRST_CACHED:
return "Hybrid Hash (CACHED) (build: " + firstInputName + ")";
case HYBRIDHASH_BUILD_SECOND_CACHED:
return "Hybrid Hash (CACHED) (build: " + secondInputName + ")";
case NESTEDLOOP_BLOCKED_OUTER_FIRST:
return "Nested Loops (Blocked Outer: " + firstInputName + ")";
case NESTEDLOOP_BLOCKED_OUTER_SECOND:
return "Nested Loops (Blocked Outer: " + secondInputName + ")";
case NESTEDLOOP_STREAMED_OUTER_FIRST:
return "Nested Loops (Streamed Outer: " + firstInputName + ")";
case NESTEDLOOP_STREAMED_OUTER_SECOND:
return "Nested Loops (Streamed Outer: " + secondInputName + ")";
case INNER_MERGE:
return "Merge";
case FULL_OUTER_MERGE:
return "Full Outer Merge";
case LEFT_OUTER_MERGE:
return "Left Outer Merge";
case RIGHT_OUTER_MERGE:
return "Right Outer Merge";
case CO_GROUP:
return "Co-Group";
default :
return strategy.name();
}
}
