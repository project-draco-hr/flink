def next(self):
    if self.has_next():
        custom_types = self._env._types
        read = self._read
        if (self._deserializer is None):
            type = read(1)
            if (type == Types.TYPE_ARRAY):
                key_des = _get_deserializer(read, custom_types)
                self._deserializer = ArrayDeserializer(key_des)
                return key_des.deserialize(read)
            elif (type == Types.TYPE_KEY_VALUE):
                size = ord(read(1))
                key_des = []
                keys = []
                for _ in range(size):
                    new_d = _get_deserializer(read, custom_types)
                    key_des.append(new_d)
                    keys.append(new_d.deserialize(read))
                val_des = _get_deserializer(read, custom_types)
                val = val_des.deserialize(read)
                self._deserializer = KeyValueDeserializer(key_des, val_des)
                return (tuple(keys), val)
            elif (type == Types.TYPE_VALUE_VALUE):
                des1 = _get_deserializer(read, custom_types)
                field1 = des1.deserialize(read)
                des2 = _get_deserializer(read, custom_types)
                field2 = des2.deserialize(read)
                self._deserializer = ValueValueDeserializer(des1, des2)
                return (field1, field2)
            else:
                raise Exception(('Invalid type ID encountered: ' + str(ord(type))))
        return self._deserializer.deserialize(self._read)
    else:
        raise StopIteration
