def _get_deserializer(group, read, custom_types, type=None):
    if (type is None):
        type = read(1, group)
        return _get_deserializer(group, read, custom_types, type)
    elif (type == Types.TYPE_TUPLE):
        return TupleDeserializer(read, group, custom_types)
    elif (type == Types.TYPE_BYTE):
        return ByteDeserializer()
    elif (type == Types.TYPE_BYTES):
        return ByteArrayDeserializer()
    elif (type == Types.TYPE_BOOLEAN):
        return BooleanDeserializer()
    elif (type == Types.TYPE_FLOAT):
        return FloatDeserializer()
    elif (type == Types.TYPE_DOUBLE):
        return DoubleDeserializer()
    elif (type == Types.TYPE_INTEGER):
        return IntegerDeserializer()
    elif (type == Types.TYPE_LONG):
        return LongDeserializer()
    elif (type == Types.TYPE_STRING):
        return StringDeserializer()
    elif (type == Types.TYPE_NULL):
        return NullDeserializer()
    else:
        for entry in custom_types:
            if (type == entry[0]):
                return entry[3]
        raise Exception(('Unable to find deserializer for type ID ' + str(type)))
