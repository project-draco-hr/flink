{
  this.groupId=props.getProperty(ConsumerConfig.GROUP_ID_CONFIG);
  if (this.groupId == null) {
    throw new IllegalArgumentException("Required property '" + ConsumerConfig.GROUP_ID_CONFIG + "' has not been set");
  }
  String zkConnect=props.getProperty("zookeeper.connect");
  if (zkConnect == null) {
    throw new IllegalArgumentException("Required property 'zookeeper.connect' has not been set");
  }
  int sessionTimeoutMs=Integer.valueOf(props.getProperty("zookeeper.session.timeout.ms","60000"));
  int connectionTimeoutMs=Integer.valueOf(props.getProperty("zookeeper.connection.timeout.ms","15000"));
  int backoffBaseSleepTime=Integer.valueOf(props.getProperty("flink.zookeeper.base-sleep-time.ms","100"));
  int backoffMaxRetries=Integer.valueOf(props.getProperty("flink.zookeeper.max-retries","10"));
  RetryPolicy retryPolicy=new ExponentialBackoffRetry(backoffBaseSleepTime,backoffMaxRetries);
  curatorClient=CuratorFrameworkFactory.newClient(zkConnect,sessionTimeoutMs,connectionTimeoutMs,retryPolicy);
  curatorClient.start();
}
