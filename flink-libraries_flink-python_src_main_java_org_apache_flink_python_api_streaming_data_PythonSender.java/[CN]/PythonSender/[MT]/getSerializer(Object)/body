{
  String className=value.getClass().getSimpleName().toUpperCase();
  if (className.startsWith("TUPLE")) {
    className="TUPLE";
  }
  if (className.startsWith("BYTE[]")) {
    className="BYTES";
  }
  SupportedTypes type=SupportedTypes.valueOf(className);
switch (type) {
case TUPLE:
    fileBuffer.put(TYPE_TUPLE);
  fileBuffer.putInt(((Tuple)value).getArity());
return new TupleSerializer((Tuple)value);
case BOOLEAN:
fileBuffer.put(TYPE_BOOLEAN);
return new BooleanSerializer();
case BYTE:
fileBuffer.put(TYPE_BYTE);
return new ByteSerializer();
case BYTES:
fileBuffer.put(TYPE_BYTES);
return new BytesSerializer();
case CHARACTER:
fileBuffer.put(TYPE_CHAR);
return new CharSerializer();
case SHORT:
fileBuffer.put(TYPE_SHORT);
return new ShortSerializer();
case INTEGER:
fileBuffer.put(TYPE_INTEGER);
return new IntSerializer();
case LONG:
fileBuffer.put(TYPE_LONG);
return new LongSerializer();
case STRING:
fileBuffer.put(TYPE_STRING);
return new StringSerializer();
case FLOAT:
fileBuffer.put(TYPE_FLOAT);
return new FloatSerializer();
case DOUBLE:
fileBuffer.put(TYPE_DOUBLE);
return new DoubleSerializer();
case NULL:
fileBuffer.put(TYPE_NULL);
return new NullSerializer();
case CUSTOMTYPEWRAPPER:
fileBuffer.put(((CustomTypeWrapper)value).getType());
return new CustomTypeSerializer();
default :
throw new IllegalArgumentException("Unknown Type encountered: " + type);
}
}
