{
  if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {
    if (memoryAvailable()) {
      this.currentSortIndexSegment=nextMemorySegment();
      this.sortIndex.add(this.currentSortIndexSegment);
      this.currentSortIndexOffset=0;
      this.sortIndexBytes+=this.segmentSize;
    }
 else {
      return false;
    }
  }
  try {
    this.serializer.serialize(record,this.recordCollector);
  }
 catch (  EOFException e) {
    return false;
  }
  final long newOffset=this.recordCollector.getCurrentOffset();
  final boolean shortRecord=newOffset - this.currentDataBufferOffset < LARGE_RECORD_THRESHOLD;
  this.currentSortIndexSegment.putLong(this.currentSortIndexOffset,shortRecord ? this.currentDataBufferOffset : -this.currentDataBufferOffset);
  if (this.numKeyBytes != 0) {
    this.comparator.putNormalizedKey(record,this.currentSortIndexSegment,this.currentSortIndexOffset + OFFSET_LEN,this.numKeyBytes);
  }
  this.currentSortIndexOffset+=this.indexEntrySize;
  this.currentDataBufferOffset=newOffset;
  this.numRecords++;
  return true;
}
