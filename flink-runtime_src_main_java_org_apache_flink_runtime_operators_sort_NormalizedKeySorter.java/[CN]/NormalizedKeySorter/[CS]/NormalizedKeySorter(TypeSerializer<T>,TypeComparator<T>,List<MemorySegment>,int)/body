{
  if (serializer == null || comparator == null || memory == null) {
    throw new NullPointerException();
  }
  if (maxNormalizedKeyBytes < 0) {
    throw new IllegalArgumentException("Maximal number of normalized key bytes must not be negative.");
  }
  this.serializer=serializer;
  this.comparator=comparator;
  this.useNormKeyUninverted=!comparator.invertNormalizedKey();
  this.totalNumBuffers=memory.size();
  if (this.totalNumBuffers < MIN_REQUIRED_BUFFERS) {
    throw new IllegalArgumentException("Normalized-Key sorter requires at least " + MIN_REQUIRED_BUFFERS + " memory buffers.");
  }
  this.segmentSize=memory.get(0).size();
  this.freeMemory=new ArrayList<MemorySegment>(memory);
  this.sortIndex=new ArrayList<MemorySegment>(16);
  this.recordBufferSegments=new ArrayList<MemorySegment>(16);
  this.recordCollector=new SimpleCollectingOutputView(this.recordBufferSegments,new ListMemorySegmentSource(this.freeMemory),this.segmentSize);
  this.recordBuffer=new RandomAccessInputView(this.recordBufferSegments,this.segmentSize);
  this.recordBufferForComparison=new RandomAccessInputView(this.recordBufferSegments,this.segmentSize);
  if (this.comparator.supportsNormalizedKey()) {
    int numPartialKeys;
    try {
      numPartialKeys=this.comparator.getFlatComparators().length;
    }
 catch (    Throwable t) {
      numPartialKeys=1;
    }
    int maxLen=Math.min(maxNormalizedKeyBytes,MAX_NORMALIZED_KEY_LEN_PER_ELEMENT * numPartialKeys);
    this.numKeyBytes=Math.min(this.comparator.getNormalizeKeyLen(),maxLen);
    this.normalizedKeyFullyDetermines=!this.comparator.isNormalizedKeyPrefixOnly(this.numKeyBytes);
  }
 else {
    this.numKeyBytes=0;
    this.normalizedKeyFullyDetermines=false;
  }
  this.indexEntrySize=this.numKeyBytes + OFFSET_LEN;
  this.indexEntriesPerSegment=segmentSize / this.indexEntrySize;
  this.lastIndexEntryOffset=(this.indexEntriesPerSegment - 1) * this.indexEntrySize;
  this.swapBuffer=new byte[this.indexEntrySize];
  this.currentSortIndexSegment=nextMemorySegment();
  this.sortIndex.add(this.currentSortIndexSegment);
}
