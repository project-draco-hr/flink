{
  WindowingOptimzier.optimizeGraph(this);
  try {
    JSONObject json=new JSONObject();
    JSONArray nodes=new JSONArray();
    json.put("nodes",nodes);
    List<Integer> operatorIDs=new ArrayList<Integer>(operatorNames.keySet());
    Collections.sort(operatorIDs);
    for (    Integer id : operatorIDs) {
      JSONObject node=new JSONObject();
      nodes.put(node);
      node.put("id",id);
      node.put("type",getOperatorName(id));
      if (sources.contains(id)) {
        node.put("pact","Data Source");
      }
 else {
        node.put("pact","Data Stream");
      }
      if (getInvokable(id) != null && getInvokable(id).getUserFunction() != null) {
        node.put("contents",getOperatorName(id) + " at " + getInvokable(id).getUserFunction().getClass().getSimpleName());
      }
 else {
        node.put("contents",getOperatorName(id));
      }
      node.put("parallelism",getParallelism(id));
      int numIn=getInEdges(id).size();
      if (numIn > 0) {
        JSONArray inputs=new JSONArray();
        node.put("predecessors",inputs);
        for (int i=0; i < numIn; i++) {
          Integer inID=getInEdges(id).get(i);
          JSONObject input=new JSONObject();
          inputs.put(input);
          input.put("id",inID);
          input.put("ship_strategy",getOutPartitioner(inID,id).getStrategy());
          if (i == 0) {
            input.put("side","first");
          }
 else           if (i == 1) {
            input.put("side","second");
          }
        }
      }
    }
    return json.toString();
  }
 catch (  JSONException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("JSON plan creation failed: {}",e);
    }
    return "";
  }
}
