{
  containingMaps=new ArrayList<Map<Integer,?>>();
  operatorParallelisms=new HashMap<Integer,Integer>();
  containingMaps.add(operatorParallelisms);
  bufferTimeouts=new HashMap<Integer,Long>();
  containingMaps.add(bufferTimeouts);
  outEdgeLists=new HashMap<Integer,List<Integer>>();
  containingMaps.add(outEdgeLists);
  outEdgeTypes=new HashMap<Integer,List<Integer>>();
  containingMaps.add(outEdgeTypes);
  selectedNames=new HashMap<Integer,List<List<String>>>();
  containingMaps.add(selectedNames);
  inEdgeLists=new HashMap<Integer,List<Integer>>();
  containingMaps.add(inEdgeLists);
  outputPartitioners=new HashMap<Integer,List<StreamPartitioner<?>>>();
  containingMaps.add(outputPartitioners);
  operatorNames=new HashMap<Integer,String>();
  containingMaps.add(operatorNames);
  invokableObjects=new HashMap<Integer,StreamInvokable<?,?>>();
  containingMaps.add(invokableObjects);
  typeSerializersIn1=new HashMap<Integer,StreamRecordSerializer<?>>();
  containingMaps.add(typeSerializersIn1);
  typeSerializersIn2=new HashMap<Integer,StreamRecordSerializer<?>>();
  containingMaps.add(typeSerializersIn2);
  typeSerializersOut1=new HashMap<Integer,StreamRecordSerializer<?>>();
  containingMaps.add(typeSerializersOut1);
  typeSerializersOut2=new HashMap<Integer,StreamRecordSerializer<?>>();
  containingMaps.add(typeSerializersOut1);
  outputSelectors=new HashMap<Integer,List<OutputSelector<?>>>();
  containingMaps.add(outputSelectors);
  jobVertexClasses=new HashMap<Integer,Class<? extends AbstractInvokable>>();
  containingMaps.add(jobVertexClasses);
  iterationIds=new HashMap<Integer,Integer>();
  containingMaps.add(jobVertexClasses);
  iterationIDtoHeadID=new HashMap<Integer,Integer>();
  iterationIDtoTailID=new HashMap<Integer,Integer>();
  iterationTailCount=new HashMap<Integer,Integer>();
  containingMaps.add(iterationTailCount);
  iterationTimeouts=new HashMap<Integer,Long>();
  containingMaps.add(iterationTailCount);
  inputFormatLists=new HashMap<Integer,InputFormat<String,?>>();
  containingMaps.add(inputFormatLists);
  sources=new HashSet<Integer>();
}
