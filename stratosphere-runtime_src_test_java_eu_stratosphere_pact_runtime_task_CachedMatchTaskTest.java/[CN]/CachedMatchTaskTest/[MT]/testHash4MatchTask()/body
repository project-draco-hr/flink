{
  int keyCnt1=20;
  int valCnt1=20;
  int keyCnt2=20;
  int valCnt2=1;
  addInput(new UniformRecordGenerator(keyCnt1,valCnt1,false));
  addInput(new UniformRecordGenerator(keyCnt2,valCnt2,false));
  addInputComparator(this.comparator1);
  addInputComparator(this.comparator2);
  getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get());
  setOutput(this.outList);
  getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED);
  getTaskConfig().setRelativeMemoryDriver(1.0f);
  BuildSecondCachedMatchDriver<Record,Record,Record> testTask=new BuildSecondCachedMatchDriver<Record,Record,Record>();
  try {
    testResettableDriver(testTask,MockMatchStub.class,3);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("Test caused an exception.");
  }
  final int expCnt=valCnt1 * valCnt2 * Math.min(keyCnt1,keyCnt2);
  Assert.assertEquals("Wrong result set size.",expCnt,this.outList.size());
  this.outList.clear();
}
