{
  final int depth=this.networkTopology.getDepth();
  if (depth == 0) {
    return;
  }
  final int[] nodesPerLevel=new int[depth];
  final int[] nodesLayoutedPerLevel=new int[depth];
  final int cellHeight=this.rect.height / depth;
  for (int i=0; i < depth; i++) {
    nodesPerLevel[i]=this.rootNode.getNumberOfNodesOnLevel(i + 1);
    nodesLayoutedPerLevel[i]=0;
  }
  final Iterator<AbstractSWTComponent> it=getChildren();
  while (it.hasNext()) {
    final AbstractSWTComponent abstractSWTComponent=it.next();
    if (abstractSWTComponent instanceof SWTNetworkNode) {
      final SWTNetworkNode swtNetworkNode=(SWTNetworkNode)abstractSWTComponent;
      final int nodeDepth=swtNetworkNode.getDepth() - 1;
      final int cellWidth=this.rect.width / nodesPerLevel[nodeDepth];
      swtNetworkNode.setHeight(Math.min(cellHeight,SWTNetworkNode.MAXHEIGHT));
      swtNetworkNode.setWidth(Math.min(cellWidth,SWTNetworkNode.MAXWIDTH));
      int y=this.rect.y + nodeDepth * cellHeight;
      if (SWTNetworkNode.MAXHEIGHT < cellHeight) {
        y+=(cellHeight - SWTNetworkNode.MAXHEIGHT) / 2;
      }
      swtNetworkNode.setY(y);
      int x=this.rect.x + (this.rect.width / 2) - (nodesPerLevel[nodeDepth] * cellWidth) / 2;
      x+=(nodesLayoutedPerLevel[nodeDepth]++) * cellWidth;
      if (SWTNetworkNode.MAXWIDTH < cellWidth) {
        x+=(cellWidth - SWTNetworkNode.MAXWIDTH) / 2;
      }
      swtNetworkNode.setX(x);
    }
  }
  layoutChildren();
}
