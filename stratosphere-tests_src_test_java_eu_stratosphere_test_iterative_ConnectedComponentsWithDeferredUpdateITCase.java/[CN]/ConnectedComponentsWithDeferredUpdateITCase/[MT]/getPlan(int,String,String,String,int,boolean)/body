{
  FileDataSource initialVertices=new FileDataSource(new DuplicateLongInputFormat(),verticesInput,"Vertices");
  WorksetIteration iteration=new WorksetIteration(0,"Connected Components Iteration");
  iteration.setInitialSolutionSet(initialVertices);
  iteration.setInitialWorkset(initialVertices);
  iteration.setMaximumNumberOfIterations(maxIterations);
  FileDataSource edges=new FileDataSource(new LongLongInputFormat(),edgeInput,"Edges");
  JoinOperator joinWithNeighbors=JoinOperator.builder(new NeighborWithComponentIDJoin(),PactLong.class,0,0).input1(iteration.getWorkset()).input2(edges).name("Join Candidate Id With Neighbor").build();
  ReduceOperator minCandidateId=ReduceOperator.builder(new MinimumComponentIDReduce(),PactLong.class,0).input(joinWithNeighbors).name("Find Minimum Candidate Id").build();
  JoinOperator updateComponentId=JoinOperator.builder(new UpdateComponentIdMatchNonPreserving(),PactLong.class,0,0).input1(minCandidateId).input2(iteration.getSolutionSet()).name("Update Component Id").build();
  if (extraMap) {
    MapOperator mapper=MapOperator.builder(IdentityMap.class).input(updateComponentId).name("idmap").build();
    iteration.setSolutionSetDelta(mapper);
  }
 else {
    iteration.setSolutionSetDelta(updateComponentId);
  }
  iteration.setNextWorkset(updateComponentId);
  FileDataSink result=new FileDataSink(new CsvOutputFormat(),output,iteration,"Result");
  CsvOutputFormat.configureRecordFormat(result).recordDelimiter('\n').fieldDelimiter(' ').field(PactLong.class,0).field(PactLong.class,1);
  Job plan=new Job(result,"Workset Connected Components");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
