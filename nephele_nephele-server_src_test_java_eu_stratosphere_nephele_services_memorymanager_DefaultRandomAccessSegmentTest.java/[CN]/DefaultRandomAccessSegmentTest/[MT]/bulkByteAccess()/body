{
{
    byte[] bytes=new byte[SEGMENT_SIZE / 4];
    try {
      segment.randomAccessView.put(3 * (SEGMENT_SIZE / 4) + 1,bytes);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
    try {
      segment.randomAccessView.put(7 * (SEGMENT_SIZE / 8) + 1,bytes,0,bytes.length / 2);
      fail("IndexOutOfBoundsException expected");
    }
 catch (    Exception e) {
      assertTrue(e instanceof IndexOutOfBoundsException);
    }
  }
{
    long seed=random.nextLong();
    random.setSeed(seed);
    byte[] src=new byte[SEGMENT_SIZE / 8];
    for (int i=0; i < 8; i++) {
      random.nextBytes(src);
      segment.randomAccessView.put(i * (SEGMENT_SIZE / 8),src);
    }
    random.setSeed(seed);
    byte[] expected=new byte[SEGMENT_SIZE / 8];
    byte[] actual=new byte[SEGMENT_SIZE / 8];
    for (int i=0; i < 8; i++) {
      random.nextBytes(expected);
      segment.randomAccessView.get(i * (SEGMENT_SIZE / 8),actual);
      assertArrayEquals(expected,actual);
    }
  }
{
    byte[] expected=new byte[SEGMENT_SIZE];
    random.nextBytes(expected);
    for (int i=0; i < 16; i++) {
      segment.randomAccessView.put(i * (SEGMENT_SIZE / 16),expected,i * (SEGMENT_SIZE / 16),SEGMENT_SIZE / 16);
    }
    byte[] actual=new byte[SEGMENT_SIZE];
    for (int i=0; i < 16; i++) {
      segment.randomAccessView.get(i * (SEGMENT_SIZE / 16),actual,i * (SEGMENT_SIZE / 16),SEGMENT_SIZE / 16);
    }
    assertArrayEquals(expected,actual);
  }
}
