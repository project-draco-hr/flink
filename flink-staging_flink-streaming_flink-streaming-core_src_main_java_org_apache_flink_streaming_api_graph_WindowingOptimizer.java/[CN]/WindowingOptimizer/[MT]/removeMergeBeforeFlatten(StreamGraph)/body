{
  Set<Tuple2<Integer,StreamOperator<?>>> operators=streamGraph.getOperators();
  List<Integer> flatteners=new ArrayList<Integer>();
  for (  Tuple2<Integer,StreamOperator<?>> entry : operators) {
    if (entry.f1 instanceof WindowFlattener) {
      flatteners.add(entry.f0);
    }
  }
  for (  Integer flattenerId : flatteners) {
    StreamNode input=streamGraph.getStreamNode(flattenerId).getInEdges().get(0).getSourceVertex();
    if (input.getOperator() instanceof WindowMerger) {
      StreamNode mergeInput=input.getInEdges().get(0).getSourceVertex();
      streamGraph.addEdge(mergeInput.getId(),flattenerId,0);
      if (input.getOutEdges().size() > 1) {
        streamGraph.removeEdge(streamGraph.getStreamEdge(input.getId(),flattenerId));
      }
 else {
        streamGraph.removeVertex(input);
      }
      streamGraph.setParallelism(flattenerId,mergeInput.getParallelism());
    }
  }
}
