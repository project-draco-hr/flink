{
  Collection<StreamNode> nodes=streamGraph.getStreamNodes();
  List<StreamNode> discretizers=new ArrayList<StreamNode>();
  for (  StreamNode node : nodes) {
    if (node.getOperator() instanceof StreamDiscretizer) {
      discretizers.add(node);
    }
  }
  List<Tuple2<StreamDiscretizer<?>,List<StreamNode>>> matchingDiscretizers=new ArrayList<Tuple2<StreamDiscretizer<?>,List<StreamNode>>>();
  for (  StreamNode discretizer : discretizers) {
    boolean matchedAny=false;
    for (    Tuple2<StreamDiscretizer<?>,List<StreamNode>> candidate : matchingDiscretizers) {
      Set<Integer> discretizerInEdges=new HashSet<Integer>(discretizer.getInEdgeIndices());
      Set<Integer> toMatchInEdges=new HashSet<Integer>(candidate.f1.get(0).getInEdgeIndices());
      boolean partitionersMatch=true;
      for (      StreamEdge edge1 : discretizer.getInEdges()) {
        for (        StreamEdge edge2 : candidate.f1.get(0).getInEdges()) {
          if (edge1.getPartitioner().getStrategy() != edge2.getPartitioner().getStrategy()) {
            partitionersMatch=false;
          }
        }
      }
      if (partitionersMatch && discretizer.getParallelism() == candidate.f1.get(0).getParallelism() && discretizer.getOperator().equals(candidate.f0) && discretizerInEdges.equals(toMatchInEdges)) {
        candidate.f1.add(discretizer);
        matchedAny=true;
        break;
      }
    }
    if (!matchedAny) {
      List<StreamNode> matchingNodes=new ArrayList<StreamNode>();
      matchingNodes.add(discretizer);
      matchingDiscretizers.add(new Tuple2<StreamDiscretizer<?>,List<StreamNode>>((StreamDiscretizer<?>)discretizer.getOperator(),matchingNodes));
    }
  }
  for (  Tuple2<StreamDiscretizer<?>,List<StreamNode>> matching : matchingDiscretizers) {
    List<StreamNode> matchList=matching.f1;
    if (matchList.size() > 1) {
      StreamNode first=matchList.get(0);
      for (int i=1; i < matchList.size(); i++) {
        replaceDiscretizer(streamGraph,matchList.get(i).getId(),first.getId());
      }
    }
  }
}
