{
  DataStream<Either<Tuple2<Map<String,T>,Long>,Map<String,T>>> patternStream=CEPOperatorUtils.createTimeoutPatternStream(inputStream,pattern);
  TypeInformation<L> leftTypeInfo=TypeExtractor.getUnaryOperatorReturnType(patternTimeoutFunction,PatternTimeoutFunction.class,1,-1,inputStream.getType(),null,false);
  TypeInformation<R> rightTypeInfo=TypeExtractor.getUnaryOperatorReturnType(patternSelectFunction,PatternSelectFunction.class,1,-1,inputStream.getType(),null,false);
  TypeInformation<Either<L,R>> outTypeInfo=new EitherTypeInfo<>(leftTypeInfo,rightTypeInfo);
  return patternStream.map(new PatternSelectTimeoutMapper<>(patternStream.getExecutionEnvironment().clean(patternSelectFunction),patternStream.getExecutionEnvironment().clean(patternTimeoutFunction))).returns(outTypeInfo);
}
