{
  long completeMemorySize=config.getMemorySize();
  long hashjoinMemorySize=(long)(completeMemorySize * config.getWorksetHashjoinMemoryFraction());
  config.setMemorySize(completeMemorySize - hashjoinMemorySize);
  TypeSerializer<IT1> probesideSerializer=TypeUtils.instantiateTypeSerializer(config.getWorksetHashjoinProbesideSerializerFactoryClass(userCodeClassLoader));
  TypeSerializer<IT2> buildsideSerializer=TypeUtils.instantiateTypeSerializer(config.getWorksetHashjoinBuildsideSerializerFactoryClass(userCodeClassLoader));
  TypeComparator<IT1> probesideComparator=TypeUtils.instantiateTypeComparator(config.getConfiguration(),userCodeClassLoader,config.getWorksetHashJoinProbeSideComparatorFactoryClass(userCodeClassLoader),config.getWorksetHashjoinProbesideComparatorPrefix());
  TypeComparator<IT2> buildSideComparator=TypeUtils.instantiateTypeComparator(config.getConfiguration(),userCodeClassLoader,config.getWorksetHashJoinBuildSideComparatorFactoryClass(userCodeClassLoader),config.getWorksetHashjoinBuildsideComparatorPrefix());
  TypePairComparatorFactory<IT1,IT2> pairComparatorFactory=TypeUtils.instantiateTypePairComparator((Class<? extends TypePairComparatorFactory<IT1,IT2>>)config.getWorksetHashJoinTypePairComparatorFactoryClass(userCodeClassLoader));
  List<MemorySegment> memSegments=getMemoryManager().allocatePages(getOwningNepheleTask(),hashjoinMemorySize);
  MutableHashTable hashJoin=new MutableHashTable(buildsideSerializer,probesideSerializer,buildSideComparator,probesideComparator,pairComparatorFactory.createComparator12(probesideComparator,buildSideComparator),memSegments,getIOManager());
  Broker<MutableHashTable> solutionsetBroker=SolutionsetBroker.instance();
  solutionsetBroker.handIn(brokerKey(),hashJoin);
  return hashJoin;
}
