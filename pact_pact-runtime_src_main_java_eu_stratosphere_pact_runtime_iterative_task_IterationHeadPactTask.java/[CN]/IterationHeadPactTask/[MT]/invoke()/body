{
  BlockingBackChannel backChannel=initBackChannel();
  SuperstepBarrier barrier=initSuperstepBarrier();
  MutableHashTable hashJoin=config.usesWorkset() ? initHashJoin() : null;
  TypeSerializer serializer=getInputSerializer(getIterationInputIndex());
  output=(Collector<OT>)iterationCollector();
  while (!terminationRequested()) {
    if (log.isInfoEnabled()) {
      log.info(formatLogString("starting iteration [" + currentIteration() + "]"));
    }
    if (!inFirstIteration()) {
      reinstantiateDriver();
    }
    barrier.setup();
    super.invoke();
    EndOfSuperstepEvent endOfSuperstepEvent=new EndOfSuperstepEvent();
    sendEventToAllIterationOutputs(endOfSuperstepEvent);
    DataInputView superstepResult=backChannel.getReadEndAfterSuperstepEnded();
    if (log.isInfoEnabled()) {
      log.info(formatLogString("finishing iteration [" + currentIteration() + "]"));
    }
    sendEventToSync(endOfSuperstepEvent);
    if (log.isInfoEnabled()) {
      log.info(formatLogString("waiting for other workers in iteration [" + currentIteration() + "]"));
    }
    barrier.waitForOtherWorkers();
    if (barrier.terminationSignaled()) {
      if (log.isInfoEnabled()) {
        log.info(formatLogString("head received termination request in iteration [" + currentIteration() + "]"));
      }
      requestTermination();
      sendEventToAllIterationOutputs(new TerminationEvent());
    }
 else {
      incrementIterationCounter();
    }
    feedBackSuperstepResult(superstepResult,serializer);
  }
  if (log.isInfoEnabled()) {
    log.info(formatLogString("streaming out final result after [" + currentIteration() + "] iterations"));
  }
  if (config.usesWorkset()) {
    streamOutFinalOutputWorkset(hashJoin);
  }
 else {
    streamOutFinalOutputBulk();
  }
}
