{
  final int workerIndex=getEnvironment().getIndexInSubtaskGroup();
  BlockingBackChannel backChannel=initBackChannel();
  SuperstepBarrier barrier=initSuperstepBarrier();
  this.partialSolutionInput=this.config.getIterationHeadPartialSolutionInputIndex();
  this.solutionTypeSerializer=getInputSerializer(this.partialSolutionInput);
  excludeFromReset(this.partialSolutionInput);
  aggregatorRegistry=new RuntimeAggregatorRegistry(config.getIterationAggregators());
  IterationGlobalBroker.instance().handIn(brokerKey(),aggregatorRegistry);
  DataInputView superstepResult=null;
  while (this.running && !terminationRequested()) {
    if (log.isInfoEnabled()) {
      log.info(formatLogString("starting iteration [" + currentIteration() + "]"));
    }
    barrier.setup();
    if (!inFirstIteration()) {
      feedBackSuperstepResult(superstepResult);
    }
    super.run();
    EndOfSuperstepEvent endOfSuperstepEvent=new EndOfSuperstepEvent();
    sendEventToAllIterationOutputs(endOfSuperstepEvent);
    superstepResult=backChannel.getReadEndAfterSuperstepEnded();
    if (log.isInfoEnabled()) {
      log.info(formatLogString("finishing iteration [" + currentIteration() + "]"));
    }
    sendEventToSync(new WorkerDoneEvent(workerIndex,aggregatorRegistry.getAllAggregators()));
    if (log.isInfoEnabled()) {
      log.info(formatLogString("waiting for other workers in iteration [" + currentIteration() + "]"));
    }
    barrier.waitForOtherWorkers();
    if (barrier.terminationSignaled()) {
      if (log.isInfoEnabled()) {
        log.info(formatLogString("head received termination request in iteration [" + currentIteration() + "]"));
      }
      requestTermination();
      sendEventToAllIterationOutputs(new TerminationEvent());
    }
 else {
      incrementIterationCounter();
      String[] globalAggregateNames=barrier.getAggregatorNames();
      Value[] globalAggregates=barrier.getAggregates();
      aggregatorRegistry.updateGlobalAggregatesAndReset(globalAggregateNames,globalAggregates);
    }
  }
  if (log.isInfoEnabled()) {
    log.info(formatLogString("streaming out final result after [" + currentIteration() + "] iterations"));
  }
  streamOutFinalOutputBulk(new InputViewIterator<X>(superstepResult,this.solutionTypeSerializer));
  IterationGlobalBroker.instance().getAndRemove(brokerKey());
}
