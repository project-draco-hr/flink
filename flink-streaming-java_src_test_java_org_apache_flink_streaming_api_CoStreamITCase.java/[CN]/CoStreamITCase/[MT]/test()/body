{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  TestListResultSink<String> resultSink=new TestListResultSink<String>();
  DataStream<Integer> src=env.fromElements(1,3,5);
  DataStream<Integer> filter1=src.filter(new FilterFunction<Integer>(){
    @Override public boolean filter(    Integer value) throws Exception {
      return true;
    }
  }
).keyBy(new KeySelector<Integer,Integer>(){
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
);
  DataStream<Tuple2<Integer,Integer>> filter2=src.map(new MapFunction<Integer,Tuple2<Integer,Integer>>(){
    @Override public Tuple2<Integer,Integer> map(    Integer value) throws Exception {
      return new Tuple2<>(value,value + 1);
    }
  }
).rebalance().filter(new FilterFunction<Tuple2<Integer,Integer>>(){
    @Override public boolean filter(    Tuple2<Integer,Integer> value) throws Exception {
      return true;
    }
  }
).disableChaining().keyBy(new KeySelector<Tuple2<Integer,Integer>,Integer>(){
    @Override public Integer getKey(    Tuple2<Integer,Integer> value) throws Exception {
      return value.f0;
    }
  }
);
  DataStream<String> connected=filter1.connect(filter2).flatMap(new CoFlatMapFunction<Integer,Tuple2<Integer,Integer>,String>(){
    @Override public void flatMap1(    Integer value,    Collector<String> out) throws Exception {
      out.collect(value.toString());
    }
    @Override public void flatMap2(    Tuple2<Integer,Integer> value,    Collector<String> out) throws Exception {
      out.collect(value.toString());
    }
  }
);
  connected.addSink(resultSink);
  env.execute();
  List<String> expected=Arrays.asList("(1,2)","(3,4)","(5,6)","1","3","5");
  List<String> result=resultSink.getResult();
  Collections.sort(result);
  assertEquals(expected,result);
}
