{
  LogUtils.initializeDefaultConsoleLogger(Level.OFF,Level.OFF);
  LocalStreamEnvironment env=StreamExecutionEnvironment.createLocalEnvironment(PARALLELISM);
  fillFromCollectionSet();
  @SuppressWarnings("unused") DataStream<Integer> dataStream=env.fromCollection(fromCollectionSet).flatMap(new MyFlatMap()).addSink(new MySink());
  fillExpectedList();
  fillFromCollectionSet();
  DataStream<Integer> source=env.fromCollection(fromCollectionSet);
  @SuppressWarnings("unused") DataStream<Integer> map=source.flatMap(new ParallelFlatMap()).addSink(new MySink());
  @SuppressWarnings("unused") DataStream<Integer> map2=source.flatMap(new ParallelFlatMap()).addSink(new MySink());
  DataStream<Integer> fromElementsMap=env.fromElements(2,5,9).flatMap(new MyFlatMap());
  @SuppressWarnings("unused") DataStream<Integer> sink=fromElementsMap.addSink(new FromElementsSink());
  fillFromElementsExpected();
  fillFromCollectionSet();
  DataStream<Integer> fromCollectionMap=env.fromCollection(fromCollectionSet).flatMap(new MyFlatMap());
  @SuppressWarnings("unused") DataStream<Integer> fromCollectionSink=fromCollectionMap.addSink(new FromCollectionSink());
  fillSequenceSet();
  DataStream<Long> generateSequenceMap=env.generateSequence(0,9).flatMap(new GenerateSequenceFlatMap());
  @SuppressWarnings("unused") DataStream<Long> generateSequenceSink=generateSequenceMap.addSink(new GenerateSequenceSink());
  fillLongSequenceSet();
  env.executeTest(MEMORYSIZE);
  assertTrue(expected.equals(result));
  assertEquals(20,numberOfElements);
  assertEquals(fromElementsExpected,fromElementsResult);
  assertEquals(sequenceExpected,fromCollectionResult);
  assertEquals(sequenceLongExpected,generateSequenceResult);
}
