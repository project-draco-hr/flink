{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  final int numIterations=10;
  DataSet<Tuple3<String,String,Integer>> triplets=MusicProfilesData.getUserSongTriplets(env);
  DataSet<Tuple1<String>> mismatches=MusicProfilesData.getMismatches(env).map(new ExtractMismatchSongIds());
  DataSet<Tuple3<String,String,Integer>> validTriplets=triplets.coGroup(mismatches).where(1).equalTo(0).with(new FilterOutMismatches());
  DataSet<Edge<String,Integer>> userSongEdges=validTriplets.map(new Tuple3ToEdgeMap<String,Integer>());
  Graph<String,NullValue,Integer> userSongGraph=Graph.create(userSongEdges,env);
  DataSet<Tuple2<String,String>> usersWithTopTrack=userSongGraph.reduceOnEdges(new GetTopSongPerUser(),EdgeDirection.OUT).filter(new FilterSongNodes());
  usersWithTopTrack.print();
  DataSet<Edge<String,NullValue>> similarUsers=userSongGraph.getEdges().groupBy(1).reduceGroup(new CreateSimilarUserEdges()).distinct();
  Graph<String,Long,NullValue> similarUsersGraph=Graph.create(similarUsers,new MapFunction<String,Long>(){
    public Long map(    String value){
      return 1l;
    }
  }
,env).getUndirected();
  DataSet<Tuple2<String,Long>> idsWithInitialLabels=similarUsersGraph.getVertices().reduceGroup(new AssignInitialLabelReducer());
  DataSet<Vertex<String,Long>> verticesWithCommunity=similarUsersGraph.joinWithVertices(idsWithInitialLabels,new MapFunction<Tuple2<Long,Long>,Long>(){
    public Long map(    Tuple2<Long,Long> value){
      return value.f1;
    }
  }
).run(new LabelPropagation<String>(numIterations)).getVertices();
  verticesWithCommunity.print();
  env.execute();
}
