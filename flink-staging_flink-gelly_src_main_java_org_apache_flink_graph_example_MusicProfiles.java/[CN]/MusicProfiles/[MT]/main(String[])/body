{
  if (!parseParameters(args)) {
    return;
  }
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<String,String,Integer>> triplets=getUserSongTripletsData(env);
  DataSet<Tuple1<String>> mismatches=getMismatchesData(env).map(new ExtractMismatchSongIds());
  DataSet<Tuple3<String,String,Integer>> validTriplets=triplets.coGroup(mismatches).where(1).equalTo(0).with(new FilterOutMismatches());
  Graph<String,NullValue,Integer> userSongGraph=Graph.fromTupleDataSet(validTriplets,env);
  DataSet<Tuple2<String,String>> usersWithTopTrack=userSongGraph.groupReduceOnEdges(new GetTopSongPerUser(),EdgeDirection.OUT).filter(new FilterSongNodes());
  if (fileOutput) {
    usersWithTopTrack.writeAsCsv(topTracksOutputPath,"\n","\t");
  }
 else {
    usersWithTopTrack.print();
  }
  DataSet<Edge<String,NullValue>> similarUsers=userSongGraph.getEdges().groupBy(1).reduceGroup(new CreateSimilarUserEdges()).distinct();
  Graph<String,Long,NullValue> similarUsersGraph=Graph.fromDataSet(similarUsers,new MapFunction<String,Long>(){
    public Long map(    String value){
      return 1l;
    }
  }
,env).getUndirected();
  DataSet<Tuple2<String,Long>> idsWithInitialLabels=similarUsersGraph.getVertices().reduceGroup(new AssignInitialLabelReducer());
  DataSet<Vertex<String,Long>> verticesWithCommunity=similarUsersGraph.joinWithVertices(idsWithInitialLabels,new MapFunction<Tuple2<Long,Long>,Long>(){
    public Long map(    Tuple2<Long,Long> value){
      return value.f1;
    }
  }
).run(new LabelPropagationAlgorithm<String>(maxIterations)).getVertices();
  if (fileOutput) {
    verticesWithCommunity.writeAsCsv(communitiesOutputPath,"\n","\t");
  }
 else {
    verticesWithCommunity.print();
  }
  env.execute();
}
