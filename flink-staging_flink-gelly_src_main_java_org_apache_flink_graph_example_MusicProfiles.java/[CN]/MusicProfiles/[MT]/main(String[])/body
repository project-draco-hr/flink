{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<String,String,Integer>> triplets=env.readCsvFile(args[0]).lineDelimiter("\n").fieldDelimiter('\t').types(String.class,String.class,Integer.class);
  DataSet<Tuple1<String>> mismatches=env.readTextFile(args[1]).map(new ExtractMismatchSongIds());
  DataSet<Tuple3<String,String,Integer>> validTriplets=triplets.coGroup(mismatches).where(1).equalTo(0).with(new FilterOutMismatches());
  DataSet<Edge<String,Integer>> userSongEdges=validTriplets.map(new Tuple3ToEdgeMap<String,Integer>());
  Graph<String,NullValue,Integer> userSongGraph=Graph.create(userSongEdges,env);
  DataSet<Tuple2<String,String>> usersWithTopTrack=userSongGraph.reduceOnEdges(new GetTopSongPerUser(),EdgeDirection.OUT);
  DataSet<Edge<String,NullValue>> similarUsers=userSongGraph.getEdges().groupBy(1).reduceGroup(new CreateSimilarUserEdges()).distinct();
  Graph<String,NullValue,NullValue> similarUsersGraph=Graph.create(similarUsers,env).getUndirected();
}
