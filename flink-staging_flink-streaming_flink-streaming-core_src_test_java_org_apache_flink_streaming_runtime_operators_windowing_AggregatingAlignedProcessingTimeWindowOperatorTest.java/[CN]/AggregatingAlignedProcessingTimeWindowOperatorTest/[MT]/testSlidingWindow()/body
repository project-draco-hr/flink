{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final CollectingOutput<Integer> out=new CollectingOutput<>(50);
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    AggregatingProcessingTimeWindowOperator<Integer,Integer> op=new AggregatingProcessingTimeWindowOperator<>(sumFunction,identitySelector,IntSerializer.INSTANCE,IntSerializer.INSTANCE,150,50);
    op.setup(mockTask,new StreamConfig(new Configuration()),out);
    op.open();
    final int numElements=1000;
    for (int i=0; i < numElements; i++) {
synchronized (lock) {
        op.processElement(new StreamRecord<Integer>(i));
      }
      Thread.sleep(1);
    }
synchronized (lock) {
      op.close();
    }
    op.dispose();
    List<Integer> result=out.getElements();
    if (result.size() < numElements || result.size() > 3 * numElements) {
      System.out.println(result);
      fail("Wrong number of results: " + result.size());
    }
    Collections.sort(result);
    int lastNum=-1;
    int lastCount=-1;
    for (    int num : result) {
      if (num == lastNum) {
        lastCount++;
        assertTrue(lastCount <= 3);
      }
 else {
        lastNum=num;
        lastCount=1;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdownNow();
  }
}
