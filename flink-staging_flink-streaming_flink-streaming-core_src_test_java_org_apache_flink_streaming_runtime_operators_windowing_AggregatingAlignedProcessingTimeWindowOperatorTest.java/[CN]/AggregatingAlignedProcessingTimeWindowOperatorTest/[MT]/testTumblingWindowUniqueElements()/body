{
  final ScheduledExecutorService timerService=Executors.newSingleThreadScheduledExecutor();
  try {
    final int windowSize=50;
    final CollectingOutput<Integer> out=new CollectingOutput<>(windowSize);
    AggregatingProcessingTimeWindowOperator<Integer,Integer> op=new AggregatingProcessingTimeWindowOperator<>(sumFunction,identitySelector,IntSerializer.INSTANCE,IntSerializer.INSTANCE,windowSize,windowSize);
    final Object lock=new Object();
    final StreamTask<?,?> mockTask=createMockTaskWithTimer(timerService,lock);
    op.setup(mockTask,new StreamConfig(new Configuration()),out);
    op.open();
    final int numElements=1000;
    for (int i=0; i < numElements; i++) {
synchronized (lock) {
        op.processElement(new StreamRecord<Integer>(i));
      }
      Thread.sleep(1);
    }
synchronized (lock) {
      op.close();
    }
    op.dispose();
    List<Integer> result=out.getElements();
    assertEquals(numElements,result.size());
    Collections.sort(result);
    for (int i=0; i < numElements; i++) {
      assertEquals(i,result.get(i).intValue());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    timerService.shutdownNow();
  }
}
