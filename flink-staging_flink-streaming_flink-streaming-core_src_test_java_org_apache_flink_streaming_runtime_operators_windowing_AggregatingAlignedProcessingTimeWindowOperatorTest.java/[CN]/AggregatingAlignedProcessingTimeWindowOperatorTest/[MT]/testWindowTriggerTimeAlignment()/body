{
  try {
    @SuppressWarnings("unchecked") final Output<StreamRecord<String>> mockOut=mock(Output.class);
    final StreamingRuntimeContext mockContext=mock(StreamingRuntimeContext.class);
    when(mockContext.getTaskName()).thenReturn("Test task name");
    AggregatingProcessingTimeWindowOperator<String,String> op;
    op=new AggregatingProcessingTimeWindowOperator<>(mockFunction,mockKeySelector,5000,1000);
    op.setup(mockOut,mockContext);
    op.open(new Configuration());
    assertTrue(op.getNextSlideTime() % 1000 == 0);
    assertTrue(op.getNextEvaluationTime() % 1000 == 0);
    op.dispose();
    op=new AggregatingProcessingTimeWindowOperator<>(mockFunction,mockKeySelector,1000,1000);
    op.setup(mockOut,mockContext);
    op.open(new Configuration());
    assertTrue(op.getNextSlideTime() % 1000 == 0);
    assertTrue(op.getNextEvaluationTime() % 1000 == 0);
    op.dispose();
    op=new AggregatingProcessingTimeWindowOperator<>(mockFunction,mockKeySelector,1500,1000);
    op.setup(mockOut,mockContext);
    op.open(new Configuration());
    assertTrue(op.getNextSlideTime() % 500 == 0);
    assertTrue(op.getNextEvaluationTime() % 1000 == 0);
    op.dispose();
    op=new AggregatingProcessingTimeWindowOperator<>(mockFunction,mockKeySelector,1200,1100);
    op.setup(mockOut,mockContext);
    op.open(new Configuration());
    assertTrue(op.getNextSlideTime() % 100 == 0);
    assertTrue(op.getNextEvaluationTime() % 1100 == 0);
    op.dispose();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
