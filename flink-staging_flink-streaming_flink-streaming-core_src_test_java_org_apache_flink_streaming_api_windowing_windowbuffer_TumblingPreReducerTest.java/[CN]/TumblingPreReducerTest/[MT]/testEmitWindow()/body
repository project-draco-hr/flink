{
  List<Tuple2<Integer,Integer>> inputs=new ArrayList<Tuple2<Integer,Integer>>();
  inputs.add(new Tuple2<Integer,Integer>(1,1));
  inputs.add(new Tuple2<Integer,Integer>(2,0));
  inputs.add(new Tuple2<Integer,Integer>(3,-1));
  inputs.add(new Tuple2<Integer,Integer>(4,-2));
  TestOutput<StreamWindow<Tuple2<Integer,Integer>>> collector=new TestOutput<StreamWindow<Tuple2<Integer,Integer>>>();
  List<StreamWindow<Tuple2<Integer,Integer>>> collected=collector.getCollected();
  WindowBuffer<Tuple2<Integer,Integer>> wb=new TumblingPreReducer<Tuple2<Integer,Integer>>(reducer,serializer);
  wb.store(serializer.copy(inputs.get(0)));
  wb.store(serializer.copy(inputs.get(1)));
  wb.emitWindow(collector);
  wb.evict(2);
  assertEquals(1,collected.size());
  assertEquals(StreamWindow.fromElements(new Tuple2<Integer,Integer>(3,1)),collected.get(0));
  wb.store(serializer.copy(inputs.get(0)));
  wb.store(serializer.copy(inputs.get(1)));
  wb.store(serializer.copy(inputs.get(2)));
  wb.store(serializer.copy(inputs.get(3)));
  wb.emitWindow(collector);
  wb.evict(4);
  assertEquals(2,collected.size());
  assertEquals(StreamWindow.fromElements(new Tuple2<Integer,Integer>(10,-2)),collected.get(1));
  assertEquals(4,reducer.allInputs.size());
  assertEquals(reducer.allInputs.get(0),inputs.get(1));
  assertEquals(reducer.allInputs.get(1),inputs.get(1));
  assertEquals(reducer.allInputs.get(2),inputs.get(2));
  assertEquals(reducer.allInputs.get(3),inputs.get(3));
}
