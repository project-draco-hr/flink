{
  try {
    String firstLevelDir=TestFileUtils.randomFileName();
    String secondLevelDir=TestFileUtils.randomFileName();
    File nestedDir=new File(tempPath + System.getProperty("file.separator") + firstLevelDir);
    nestedDir.mkdirs();
    nestedDir.deleteOnExit();
    File insideNestedDir=new File(tempPath + System.getProperty("file.separator") + firstLevelDir+ System.getProperty("file.separator")+ secondLevelDir);
    insideNestedDir.mkdirs();
    insideNestedDir.deleteOnExit();
    TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(),"paella");
    TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(),"kalamari");
    TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(),"fideua");
    this.format.setFilePath(new Path(nestedDir.toURI().toString()));
    this.config.setBoolean("recursive.file.enumeration",true);
    format.configure(this.config);
    FileInputSplit[] splits=format.createInputSplits(1);
    Assert.assertEquals(3,splits.length);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    Assert.fail(ex.getMessage());
  }
}
