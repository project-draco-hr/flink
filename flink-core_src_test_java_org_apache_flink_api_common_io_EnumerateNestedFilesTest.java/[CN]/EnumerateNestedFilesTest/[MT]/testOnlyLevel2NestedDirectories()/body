{
  try {
    String rootDir=TestFileUtils.randomFileName();
    String nestedDir=TestFileUtils.randomFileName();
    String firstNestedNestedDir=TestFileUtils.randomFileName();
    String secondNestedNestedDir=TestFileUtils.randomFileName();
    File testDir=new File(tempPath + System.getProperty("file.separator") + rootDir);
    testDir.mkdirs();
    testDir.deleteOnExit();
    File nested=new File(testDir.getAbsolutePath() + System.getProperty("file.separator") + nestedDir);
    nested.mkdirs();
    nested.deleteOnExit();
    File nestedNestedDir1=new File(nested.getAbsolutePath() + System.getProperty("file.separator") + firstNestedNestedDir);
    nestedNestedDir1.mkdirs();
    nestedNestedDir1.deleteOnExit();
    File nestedNestedDir2=new File(nested.getAbsolutePath() + System.getProperty("file.separator") + secondNestedNestedDir);
    nestedNestedDir2.mkdirs();
    nestedNestedDir2.deleteOnExit();
    TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(),"paella");
    TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(),"kalamari");
    TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(),"fideua");
    TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(),"bravas");
    this.format.setFilePath(new Path(testDir.getAbsolutePath()));
    this.config.setBoolean("recursive.file.enumeration",true);
    format.configure(this.config);
    FileInputSplit[] splits=format.createInputSplits(1);
    Assert.assertEquals(4,splits.length);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    Assert.fail(ex.getMessage());
  }
}
