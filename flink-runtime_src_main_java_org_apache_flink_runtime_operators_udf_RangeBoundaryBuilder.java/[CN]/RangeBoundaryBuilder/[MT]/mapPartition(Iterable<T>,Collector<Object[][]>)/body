{
  final TypeComparator<T> comparator=this.comparatorFactory.createComparator();
  List<T> sampledData=new ArrayList<>();
  for (  T value : values) {
    sampledData.add(value);
  }
  Collections.sort(sampledData,new Comparator<T>(){
    @Override public int compare(    T first,    T second){
      return comparator.compare(first,second);
    }
  }
);
  int boundarySize=parallelism - 1;
  Object[][] boundaries=new Object[boundarySize][];
  double avgRange=sampledData.size() / (double)parallelism;
  int numKey=comparator.getFlatComparators().length;
  for (int i=1; i < parallelism; i++) {
    T record=sampledData.get((int)(i * avgRange));
    Object[] keys=new Object[numKey];
    comparator.extractKeys(record,keys,0);
    boundaries[i - 1]=keys;
  }
  out.collect(boundaries);
}
