{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<Integer,Integer,Integer>> set=env.readCsvFile(IN_FILE).types(Integer.class,Integer.class,Integer.class);
  set=set.map(new MockMapper()).withForwardedFields("*").groupBy(0).reduce(new MockReducer()).withForwardedFields("f0->f1").map(new MockMapper()).withForwardedFields("*").groupBy(1).reduce(new MockReducer()).withForwardedFields("*");
  set.output(new DiscardingOutputFormat<Tuple3<Integer,Integer,Integer>>());
  JavaPlan plan=env.createProgramPlan();
  OptimizedPlan oPlan=compileWithStats(plan);
  oPlan.accept(new Visitor<PlanNode>(){
    @Override public boolean preVisit(    PlanNode visitable){
      if (visitable instanceof SingleInputPlanNode && visitable.getProgramOperator() instanceof ReduceOperatorBase) {
        for (        Channel input : visitable.getInputs()) {
          GlobalProperties gprops=visitable.getGlobalProperties();
          LocalProperties lprops=visitable.getLocalProperties();
          Assert.assertTrue("Reduce should just forward the input if it is already partitioned",input.getShipStrategy() == ShipStrategyType.FORWARD);
          Assert.assertTrue("Wrong GlobalProperties on Reducer",gprops.isPartitionedOnFields(new FieldSet(1)));
          Assert.assertTrue("Wrong GlobalProperties on Reducer",gprops.getPartitioning() == PartitioningProperty.HASH_PARTITIONED);
          Assert.assertTrue("Wrong LocalProperties on Reducer",lprops.getGroupedFields().contains(1));
        }
      }
      if (visitable instanceof SingleInputPlanNode && visitable.getProgramOperator() instanceof MapOperatorBase) {
        for (        Channel input : visitable.getInputs()) {
          GlobalProperties gprops=visitable.getGlobalProperties();
          LocalProperties lprops=visitable.getLocalProperties();
          Assert.assertTrue("Map should just forward the input if it is already partitioned",input.getShipStrategy() == ShipStrategyType.FORWARD);
          Assert.assertTrue("Wrong GlobalProperties on Mapper",gprops.isPartitionedOnFields(new FieldSet(1)));
          Assert.assertTrue("Wrong GlobalProperties on Mapper",gprops.getPartitioning() == PartitioningProperty.HASH_PARTITIONED);
          Assert.assertTrue("Wrong LocalProperties on Mapper",lprops.getGroupedFields().contains(1));
        }
        return false;
      }
      return true;
    }
    @Override public void postVisit(    PlanNode visitable){
    }
  }
);
}
