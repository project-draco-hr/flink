{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<Integer,Integer,Integer>> in1=env.readCsvFile(IN_FILE).types(Integer.class,Integer.class,Integer.class);
  DataSet<Tuple3<Integer,Integer,Integer>> in2=env.readCsvFile(IN_FILE).types(Integer.class,Integer.class,Integer.class);
  in1=in1.map(new MockMapper()).withForwardedFields("*").groupBy(0).reduce(new MockReducer()).withForwardedFields("f0->f1");
  in2=in2.map(new MockMapper()).withForwardedFields("*").groupBy(1).reduce(new MockReducer()).withForwardedFields("f1->f2");
  DataSet<Tuple3<Integer,Integer,Integer>> out=in1.join(in2).where(1).equalTo(2).with(new MockJoin());
  out.output(new DiscardingOutputFormat<Tuple3<Integer,Integer,Integer>>());
  JavaPlan plan=env.createProgramPlan();
  OptimizedPlan oPlan=compileWithStats(plan);
  oPlan.accept(new Visitor<PlanNode>(){
    @Override public boolean preVisit(    PlanNode visitable){
      if (visitable instanceof DualInputPlanNode && visitable.getProgramOperator() instanceof JoinOperatorBase) {
        DualInputPlanNode node=((DualInputPlanNode)visitable);
        final Channel inConn1=node.getInput1();
        final Channel inConn2=node.getInput2();
        Assert.assertTrue("Join should just forward the input if it is already partitioned",inConn1.getShipStrategy() == ShipStrategyType.FORWARD);
        Assert.assertTrue("Join should just forward the input if it is already partitioned",inConn2.getShipStrategy() == ShipStrategyType.FORWARD);
        return false;
      }
      return true;
    }
    @Override public void postVisit(    PlanNode visitable){
    }
  }
);
}
