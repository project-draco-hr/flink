{
  if (windowSize1 < 1 || windowSize2 < 1) {
    throw new IllegalArgumentException("Window size must be positive");
  }
  if (slideInterval1 < 1 || slideInterval2 < 1) {
    throw new IllegalArgumentException("Slide interval must be positive");
  }
  if (windowSize1 < slideInterval1 || windowSize2 < slideInterval2) {
    throw new IllegalArgumentException("Window size must be at least slide interval");
  }
  FunctionTypeWrapper<IN1> in1TypeWrapper=new FunctionTypeWrapper<IN1>(coReducer,CoGroupReduceFunction.class,0);
  FunctionTypeWrapper<IN2> in2TypeWrapper=new FunctionTypeWrapper<IN2>(coReducer,CoGroupReduceFunction.class,1);
  FunctionTypeWrapper<OUT> outTypeWrapper=new FunctionTypeWrapper<OUT>(coReducer,CoGroupReduceFunction.class,2);
  return addCoFunction("coWindowReduce",coReducer,in1TypeWrapper,in2TypeWrapper,outTypeWrapper,new CoGroupedWindowGroupReduceInvokable<IN1,IN2,OUT>(coReducer,windowSize1,windowSize2,slideInterval1,slideInterval2,keyPosition1,keyPosition2,timestamp1,timestamp2));
}
