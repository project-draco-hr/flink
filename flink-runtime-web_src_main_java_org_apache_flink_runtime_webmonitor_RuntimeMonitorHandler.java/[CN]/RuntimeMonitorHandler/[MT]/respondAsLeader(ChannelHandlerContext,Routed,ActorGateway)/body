{
  DefaultFullHttpResponse response;
  try {
    Map<String,String> queryParams=new HashMap<>();
    for (    String key : routed.queryParams().keySet()) {
      queryParams.put(key,routed.queryParam(key));
    }
    InetSocketAddress address=(InetSocketAddress)ctx.channel().localAddress();
    queryParams.put(WEB_MONITOR_ADDRESS_KEY,address.getHostName() + ":" + address.getPort());
    String result=handler.handleRequest(routed.pathParams(),queryParams,jobManager);
    byte[] bytes=result.getBytes(ENCODING);
    response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,Unpooled.wrappedBuffer(bytes));
    response.headers().set(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,"*");
    response.headers().set(HttpHeaders.Names.CONTENT_TYPE,contentType);
  }
 catch (  NotFoundException e) {
    ByteBuf message=e.getMessage() == null ? Unpooled.buffer(0) : Unpooled.wrappedBuffer(e.getMessage().getBytes(ENCODING));
    response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.NOT_FOUND,message);
    response.headers().set(HttpHeaders.Names.CONTENT_TYPE,"text/plain");
  }
catch (  Exception e) {
    byte[] bytes=ExceptionUtils.stringifyException(e).getBytes(ENCODING);
    response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR,Unpooled.wrappedBuffer(bytes));
    response.headers().set(HttpHeaders.Names.CONTENT_TYPE,"text/plain");
  }
  response.headers().set(HttpHeaders.Names.CONTENT_ENCODING,"utf-8");
  response.headers().set(HttpHeaders.Names.CONTENT_LENGTH,response.content().readableBytes());
  KeepAliveWrite.flush(ctx,routed.request(),response);
}
