{
  final ClassLoader userCodeClassloader=containingTask.getUserCodeClassLoader();
  final StreamConfig configuration=containingTask.getConfiguration();
  final boolean enableTimestamps=containingTask.getExecutionConfig().areTimestampsEnabled();
  Map<Integer,StreamConfig> chainedConfigs=configuration.getTransitiveChainedTaskConfigs(userCodeClassloader);
  chainedConfigs.put(configuration.getVertexID(),configuration);
  List<StreamEdge> outEdgesInOrder=configuration.getOutEdgesInOrder(userCodeClassloader);
  Map<StreamEdge,RecordWriterOutput<?>> streamOutputMap=new HashMap<>(outEdgesInOrder.size());
  this.streamOutputs=new RecordWriterOutput<?>[outEdgesInOrder.size()];
  for (int i=0; i < outEdgesInOrder.size(); i++) {
    StreamEdge outEdge=outEdgesInOrder.get(i);
    RecordWriterOutput<?> streamOutput=createStreamOutput(outEdge,chainedConfigs.get(outEdge.getSourceId()),i,containingTask.getEnvironment(),enableTimestamps,reporter,containingTask.getName());
    streamOutputMap.put(outEdge,streamOutput);
    this.streamOutputs[i]=streamOutput;
  }
  List<StreamOperator<?>> allOps=new ArrayList<>(chainedConfigs.size());
  this.chainEntryPoint=createOutputCollector(containingTask,configuration,chainedConfigs,userCodeClassloader,streamOutputMap,allOps);
  this.allOperators=allOps.toArray(new StreamOperator<?>[allOps.size() + 1]);
  this.allOperators[this.allOperators.length - 1]=headOperator;
}
