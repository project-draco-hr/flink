{
  List<BufferOrEvent> input1=new LinkedList<BufferOrEvent>();
  input1.add(BarrierBufferTest.createBuffer(0));
  input1.add(BarrierBufferTest.createSuperstep(1,0));
  input1.add(BarrierBufferTest.createBuffer(0));
  InputGate ig1=new MockInputGate(1,input1);
  List<BufferOrEvent> input2=new LinkedList<BufferOrEvent>();
  input2.add(BarrierBufferTest.createBuffer(0));
  input2.add(BarrierBufferTest.createBuffer(0));
  input2.add(BarrierBufferTest.createSuperstep(1,0));
  input2.add(BarrierBufferTest.createBuffer(0));
  InputGate ig2=new MockInputGate(1,input2);
  CoRecordReader<?,?> coReader=new CoRecordReader<IOReadableWritable,IOReadableWritable>(ig1,ig2);
  BarrierBuffer b1=coReader.barrierBuffer1;
  BarrierBuffer b2=coReader.barrierBuffer2;
  coReader.addToAvailable(ig1);
  coReader.addToAvailable(ig2);
  coReader.addToAvailable(ig2);
  coReader.addToAvailable(ig1);
  assertEquals(1,coReader.getNextReaderIndexBlocking());
  b1.getNextNonBlocked();
  assertEquals(2,coReader.getNextReaderIndexBlocking());
  b2.getNextNonBlocked();
  assertEquals(2,coReader.getNextReaderIndexBlocking());
  b2.getNextNonBlocked();
  assertEquals(1,coReader.getNextReaderIndexBlocking());
  b1.getNextNonBlocked();
  b1.processSuperstep(input1.get(1));
  coReader.addToAvailable(ig1);
  coReader.addToAvailable(ig2);
  coReader.addToAvailable(ig2);
  assertEquals(2,coReader.getNextReaderIndexBlocking());
  b2.getNextNonBlocked();
  b2.processSuperstep(input2.get(2));
  assertEquals(1,coReader.getNextReaderIndexBlocking());
  b1.getNextNonBlocked();
  assertEquals(2,coReader.getNextReaderIndexBlocking());
  b2.getNextNonBlocked();
}
