{
  List<NumberType> widestTypes=Arrays.asList(NumberType.DOUBLE,NumberType.FLOAT,NumberType.BIG_DECIMAL,NumberType.BIG_INTEGER,NumberType.LONG,NumberType.INT);
  for (int leftIndex=0; leftIndex < NUMBER_TYPES_COUNT; leftIndex++)   for (int rightIndex=0; rightIndex < NUMBER_TYPES_COUNT; rightIndex++) {
    int coerceIndex=Math.min(widestTypes.indexOf(NumberType.values()[leftIndex]),widestTypes.indexOf(NumberType.values()[rightIndex]));
    this.typeCoerceMatrix[leftIndex][rightIndex]=widestTypes.get(coerceIndex);
  }
  this.coercers.put(NumberType.INT,new Coercer(){
    @Override public NumericNode coerce(    NumericNode node){
      return IntNode.valueOf(node.getIntValue());
    }
  }
);
  this.coercers.put(NumberType.LONG,new Coercer(){
    @Override public NumericNode coerce(    NumericNode node){
      return LongNode.valueOf(node.getLongValue());
    }
  }
);
  this.coercers.put(NumberType.DOUBLE,new Coercer(){
    @Override public NumericNode coerce(    NumericNode node){
      return DoubleNode.valueOf(node.getDoubleValue());
    }
  }
);
  this.coercers.put(NumberType.FLOAT,new Coercer(){
    @Override public NumericNode coerce(    NumericNode node){
      return DoubleNode.valueOf(node.getDoubleValue());
    }
  }
);
  this.coercers.put(NumberType.BIG_INTEGER,new Coercer(){
    @Override public NumericNode coerce(    NumericNode node){
      return BigIntegerNode.valueOf(node.getBigIntegerValue());
    }
  }
);
  this.coercers.put(NumberType.BIG_DECIMAL,new Coercer(){
    @Override public NumericNode coerce(    NumericNode node){
      return DecimalNode.valueOf(node.getDecimalValue());
    }
  }
);
}
