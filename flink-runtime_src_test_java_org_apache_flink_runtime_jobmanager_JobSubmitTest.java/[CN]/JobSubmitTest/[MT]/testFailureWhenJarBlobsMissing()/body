{
  try {
    JobVertex jobVertex=new JobVertex("Test Vertex");
    jobVertex.setInvokableClass(Tasks.NoOpInvokable.class);
    JobGraph jg=new JobGraph("test job",jobVertex);
    Future<Object> future=jobManager.ask(JobManagerMessages.getRequestBlobManagerPort(),timeout);
    int blobPort=(Integer)Await.result(future,timeout);
    BlobKey key1, key2;
    BlobClient bc=new BlobClient(new InetSocketAddress("localhost",blobPort));
    try {
      key1=bc.put(new byte[10]);
      key2=bc.put(new byte[10]);
      bc.delete(key2);
    }
  finally {
      bc.close();
    }
    jg.addBlob(key1);
    jg.addBlob(key2);
    Future<Object> submitFuture=jobManager.ask(new JobManagerMessages.SubmitJob(jg,false),timeout);
    try {
      Await.result(submitFuture,timeout);
    }
 catch (    JobExecutionException e) {
      assertTrue(e.getCause() instanceof IOException);
    }
catch (    Exception e) {
      fail("Wrong exception type");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
