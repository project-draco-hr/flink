{
  final int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String dataPointInput=(args.length > 1 ? args[1] : "");
  final String clusterInput=(args.length > 2 ? args[2] : "");
  final String output=(args.length > 3 ? args[3] : "");
  final int numIterations=(args.length > 4 ? Integer.parseInt(args[4]) : 1);
  FileDataSource initialClusterPoints=new FileDataSource(new PointInFormat(),clusterInput,"Centers");
  initialClusterPoints.setDegreeOfParallelism(1);
  BulkIteration iteration=new BulkIteration("K-Means Loop");
  iteration.setInput(initialClusterPoints);
  iteration.setMaximumNumberOfIterations(numIterations);
  FileDataSource dataPoints=new FileDataSource(new PointInFormat(),dataPointInput,"Data Points");
  CrossOperator computeDistance=CrossOperator.builder(new ComputeDistance()).input1(dataPoints).input2(iteration.getPartialSolution()).name("Compute Distances").build();
  ReduceOperator findNearestClusterCenters=ReduceOperator.builder(new FindNearestCenter(),IntValue.class,0).input(computeDistance).name("Find Nearest Centers").build();
  ReduceOperator recomputeClusterCenter=ReduceOperator.builder(new RecomputeClusterCenter(),IntValue.class,0).input(findNearestClusterCenters).name("Recompute Center Positions").build();
  iteration.setNextPartialSolution(recomputeClusterCenter);
  FileDataSource dataPoints2=new FileDataSource(new PointInFormat(),dataPointInput,"Data Points 2");
  CrossOperator computeFinalDistance=CrossOperator.builder(new ComputeDistance()).input1(dataPoints2).input2(iteration).name("Compute Final Distances").build();
  ReduceOperator findNearestFinalCluster=ReduceOperator.builder(new FindNearestCenter(),IntValue.class,0).input(computeFinalDistance).name("Find Nearest Final Centers").build();
  FileDataSink finalClusters=new FileDataSink(new PointOutFormat(),output + "/centers",iteration,"Cluster Positions");
  FileDataSink clusterAssignments=new FileDataSink(new PointOutFormat(),output + "/points",findNearestFinalCluster,"Cluster Assignments");
  List<FileDataSink> sinks=new ArrayList<FileDataSink>();
  sinks.add(finalClusters);
  sinks.add(clusterAssignments);
  Plan plan=new Plan(sinks,"Iterative KMeans");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
