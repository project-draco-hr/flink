{
  try {
    final SerializedValue<StateHandle<?>> serializedState=new SerializedValue<StateHandle<?>>(new LocalStateHandle<SerializableObject>(new SerializableObject()));
    final JobID jid=new JobID();
    final JobVertexID statefulId=new JobVertexID();
    final JobVertexID statelessId=new JobVertexID();
    Execution statefulExec1=mockExecution();
    Execution statefulExec2=mockExecution();
    Execution statefulExec3=mockExecution();
    Execution statelessExec1=mockExecution();
    Execution statelessExec2=mockExecution();
    ExecutionVertex stateful1=mockExecutionVertex(statefulExec1,statefulId,0);
    ExecutionVertex stateful2=mockExecutionVertex(statefulExec2,statefulId,1);
    ExecutionVertex stateful3=mockExecutionVertex(statefulExec3,statefulId,2);
    ExecutionVertex stateless1=mockExecutionVertex(statelessExec1,statelessId,0);
    ExecutionVertex stateless2=mockExecutionVertex(statelessExec2,statelessId,1);
    ExecutionJobVertex stateful=mockExecutionJobVertex(statefulId,new ExecutionVertex[]{stateful1,stateful2,stateful3});
    ExecutionJobVertex stateless=mockExecutionJobVertex(statelessId,new ExecutionVertex[]{stateless1,stateless2});
    Map<JobVertexID,ExecutionJobVertex> map=new HashMap<JobVertexID,ExecutionJobVertex>();
    map.put(statefulId,stateful);
    map.put(statelessId,stateless);
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,200000L,new ExecutionVertex[]{stateful1,stateful2,stateful3,stateless1,stateless2},new ExecutionVertex[]{stateful1,stateful2,stateful3,stateless1,stateless2},new ExecutionVertex[0],cl,new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(1,cl),RecoveryMode.STANDALONE);
    final long timestamp=34623786L;
    coord.triggerCheckpoint(timestamp);
    PendingCheckpoint pending=coord.getPendingCheckpoints().values().iterator().next();
    final long checkpointId=pending.getCheckpointId();
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statefulExec1.getAttemptId(),checkpointId,serializedState));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statefulExec2.getAttemptId(),checkpointId,serializedState));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statefulExec3.getAttemptId(),checkpointId,serializedState));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statelessExec1.getAttemptId(),checkpointId));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statelessExec2.getAttemptId(),checkpointId));
    assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    coord.restoreLatestCheckpointedState(map,true,false);
    verify(statefulExec1,times(1)).setInitialState(Mockito.eq(serializedState),Mockito.anyLong());
    verify(statefulExec2,times(1)).setInitialState(Mockito.eq(serializedState),Mockito.anyLong());
    verify(statefulExec3,times(1)).setInitialState(Mockito.eq(serializedState),Mockito.anyLong());
    verify(statelessExec1,times(0)).setInitialState(Mockito.<SerializedValue<StateHandle<?>>>any(),Mockito.anyLong());
    verify(statelessExec2,times(0)).setInitialState(Mockito.<SerializedValue<StateHandle<?>>>any(),Mockito.anyLong());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
