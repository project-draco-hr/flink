{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple2<Long,Long>> source=env.generateSequence(1,1000).map(new DuplicateValueScalar<Long>());
    DataSet<Tuple2<Long,Long>> invariantInput=env.generateSequence(1,1000).map(new DuplicateValueScalar<Long>());
    DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iter=source.iterateDelta(source,1000,1);
    DataSet<Tuple2<Long,Long>> result=invariantInput.map(new IdentityMapper<Tuple2<Long,Long>>()).withBroadcastSet(iter.getWorkset(),"bc data").join(iter.getSolutionSet()).where(0).equalTo(1).projectFirst(1).projectSecond(1);
    iter.closeWith(result.map(new IdentityMapper<Tuple2<Long,Long>>()),result).print();
    OptimizedPlan p=compileNoStats(env.createProgramPlan());
    new PlanJSONDumpGenerator().getOptimizerPlanAsJSON(p);
    new NepheleJobGraphGenerator().compileJobGraph(p);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
