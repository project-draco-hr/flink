{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Long> width=env.generateSequence(1,10);
    DataSet<Long> update=env.generateSequence(1,10);
    DataSet<Long> lastGradient=env.generateSequence(1,10);
    DataSet<Long> init=width.union(update).union(lastGradient);
    IterativeDataSet<Long> iteration=init.iterate(10);
    width=iteration.filter(new IdFilter<Long>());
    update=iteration.filter(new IdFilter<Long>());
    lastGradient=iteration.filter(new IdFilter<Long>());
    DataSet<Long> gradient=width.map(new IdentityMapper<Long>());
    DataSet<Long> term=gradient.join(lastGradient).where(new IdentityKeyExtractor<Long>()).equalTo(new IdentityKeyExtractor<Long>()).with(new JoinFunction<Long,Long,Long>(){
      public Long join(      Long first,      Long second){
        return null;
      }
    }
);
    update=update.map(new RichMapFunction<Long,Long>(){
      public Long map(      Long value){
        return null;
      }
    }
).withBroadcastSet(term,"some-name");
    DataSet<Long> result=iteration.closeWith(width.union(update).union(lastGradient));
    result.print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    new NepheleJobGraphGenerator().compileJobGraph(op);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
