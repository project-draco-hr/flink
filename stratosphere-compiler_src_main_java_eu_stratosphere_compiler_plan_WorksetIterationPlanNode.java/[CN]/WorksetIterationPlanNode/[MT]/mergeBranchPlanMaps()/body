{
  Map<OptimizerNode,PlanNode> branchPlan1=input1.getSource().branchPlan;
  Map<OptimizerNode,PlanNode> branchPlan2=input2.getSource().branchPlan;
  if (this.template.hasUnclosedBranches()) {
    if (this.branchPlan == null) {
      this.branchPlan=new HashMap<OptimizerNode,PlanNode>(8);
    }
    for (    OptimizerNode.UnclosedBranchDescriptor uc : this.template.getOpenBranches()) {
      OptimizerNode brancher=uc.getBranchingNode();
      PlanNode selectedCandidate=null;
      if (branchPlan1 != null) {
        selectedCandidate=branchPlan1.get(brancher);
      }
      if (selectedCandidate == null && branchPlan2 != null) {
        selectedCandidate=branchPlan2.get(brancher);
      }
      if (selectedCandidate == null && getSolutionSetDeltaPlanNode() != null && getSolutionSetDeltaPlanNode().branchPlan != null) {
        selectedCandidate=getSolutionSetDeltaPlanNode().branchPlan.get(brancher);
      }
      if (selectedCandidate == null && getNextWorkSetPlanNode() != null && getNextWorkSetPlanNode().branchPlan != null) {
        selectedCandidate=getNextWorkSetPlanNode().branchPlan.get(brancher);
      }
      if (selectedCandidate == null) {
        throw new CompilerException("Candidates for a node with open branches are missing information about the selected candidate ");
      }
      this.branchPlan.put(brancher,selectedCandidate);
    }
  }
}
