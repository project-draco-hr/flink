{
  try {
    Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
    assertEquals(0,scheduler.getNumberOfAvailableSlots());
    scheduler.newInstanceAvailable(getRandomInstance(2));
    scheduler.newInstanceAvailable(getRandomInstance(1));
    scheduler.newInstanceAvailable(getRandomInstance(2));
    assertEquals(5,scheduler.getNumberOfAvailableSlots());
    SimpleSlot s1=scheduler.allocateSlot(new ScheduledUnit(getDummyTask()),false).get();
    SimpleSlot s2=scheduler.allocateSlot(new ScheduledUnit(getDummyTask()),false).get();
    SimpleSlot s3=scheduler.allocateSlot(new ScheduledUnit(getDummyTask()),false).get();
    SimpleSlot s4=scheduler.allocateSlot(new ScheduledUnit(getDummyTask()),false).get();
    SimpleSlot s5=scheduler.allocateSlot(new ScheduledUnit(getDummyTask()),false).get();
    assertTrue(areAllDistinct(s1,s2,s3,s4,s5));
    try {
      scheduler.allocateSlot(new ScheduledUnit(getDummyTask()),false);
      fail("Scheduler accepted scheduling request without available resource.");
    }
 catch (    NoResourceAvailableException e) {
    }
    s3.releaseSlot();
    s4.releaseSlot();
    assertEquals(2,scheduler.getNumberOfAvailableSlots());
    SimpleSlot s6=scheduler.allocateSlot(new ScheduledUnit(getDummyTask()),false).get();
    SimpleSlot s7=scheduler.allocateSlot(new ScheduledUnit(getDummyTask()),false).get();
    assertTrue(areAllDistinct(s1,s2,s3,s4,s5,s6,s7));
    s1.releaseSlot();
    s2.releaseSlot();
    s5.releaseSlot();
    s6.releaseSlot();
    s7.releaseSlot();
    assertEquals(5,scheduler.getNumberOfAvailableSlots());
    s1.releaseSlot();
    s2.releaseSlot();
    s5.releaseSlot();
    s6.releaseSlot();
    s7.releaseSlot();
    assertEquals(5,scheduler.getNumberOfAvailableSlots());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
