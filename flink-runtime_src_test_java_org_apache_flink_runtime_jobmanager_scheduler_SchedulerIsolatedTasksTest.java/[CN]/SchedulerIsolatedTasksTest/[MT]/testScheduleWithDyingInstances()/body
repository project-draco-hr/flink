{
  try {
    Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
    Instance i1=getRandomInstance(2);
    Instance i2=getRandomInstance(2);
    Instance i3=getRandomInstance(1);
    scheduler.newInstanceAvailable(i1);
    scheduler.newInstanceAvailable(i2);
    scheduler.newInstanceAvailable(i3);
    List<SimpleSlot> slots=new ArrayList<SimpleSlot>();
    slots.add(scheduler.scheduleImmediately(new ScheduledUnit(getDummyTask())));
    slots.add(scheduler.scheduleImmediately(new ScheduledUnit(getDummyTask())));
    slots.add(scheduler.scheduleImmediately(new ScheduledUnit(getDummyTask())));
    slots.add(scheduler.scheduleImmediately(new ScheduledUnit(getDummyTask())));
    slots.add(scheduler.scheduleImmediately(new ScheduledUnit(getDummyTask())));
    i2.markDead();
    for (    SimpleSlot slot : slots) {
      if (slot.getInstance() == i2) {
        assertTrue(slot.isCanceled());
      }
 else {
        assertFalse(slot.isCanceled());
      }
      slot.releaseSlot();
    }
    assertEquals(3,scheduler.getNumberOfAvailableSlots());
    i1.markDead();
    i3.markDead();
    try {
      scheduler.scheduleImmediately(new ScheduledUnit(getDummyTask()));
      fail("Scheduler served a slot from a dead instance");
    }
 catch (    NoResourceAvailableException e) {
    }
catch (    Exception e) {
      fail("Wrong exception type.");
    }
    assertEquals(0,scheduler.getNumberOfInstancesWithAvailableSlots());
    assertEquals(0,scheduler.getNumberOfAvailableSlots());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
