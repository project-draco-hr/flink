{
  try {
    Scheduler scheduler=new Scheduler();
    Instance i1=getRandomInstance(2);
    Instance i2=getRandomInstance(2);
    Instance i3=getRandomInstance(2);
    scheduler.newInstanceAvailable(i1);
    scheduler.newInstanceAvailable(i2);
    scheduler.newInstanceAvailable(i3);
    AllocatedSlot s1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(Collections.<Instance>emptyList())));
    Instance first=s1.getInstance();
    Instance second=first != i1 ? i1 : i2;
    Instance third=first == i3 ? i2 : i3;
    AllocatedSlot s2=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(Collections.singletonList(s1.getInstance()))));
    assertEquals(first,s2.getInstance());
    AllocatedSlot s3=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(Arrays.asList(first,second))));
    assertEquals(second,s3.getInstance());
    AllocatedSlot s4=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(Arrays.asList(first,third))));
    AllocatedSlot s5=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(Arrays.asList(first,third))));
    assertEquals(third,s4.getInstance());
    assertEquals(third,s5.getInstance());
    AllocatedSlot s6=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(Arrays.asList(first,third))));
    assertEquals(second,s6.getInstance());
    s2.releaseSlot();
    s6.releaseSlot();
    AllocatedSlot s7=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(Arrays.asList(first,third))));
    assertEquals(first,s7.getInstance());
    assertEquals(1,scheduler.getNumberOfUnconstrainedAssignments());
    assertEquals(1,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(5,scheduler.getNumberOfLocalizedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
