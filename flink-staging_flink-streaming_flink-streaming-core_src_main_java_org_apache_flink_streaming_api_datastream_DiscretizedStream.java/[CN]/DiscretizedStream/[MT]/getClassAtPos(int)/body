{
  Class<?> type;
  TypeInformation<OUT> outTypeInfo=getType();
  if (outTypeInfo.isTupleType()) {
    type=((TupleTypeInfo)outTypeInfo).getTypeAt(pos).getTypeClass();
  }
 else   if (outTypeInfo instanceof BasicArrayTypeInfo) {
    type=((BasicArrayTypeInfo)outTypeInfo).getComponentTypeClass();
  }
 else   if (outTypeInfo instanceof PrimitiveArrayTypeInfo) {
    Class<?> clazz=outTypeInfo.getTypeClass();
    if (clazz == boolean[].class) {
      type=Boolean.class;
    }
 else     if (clazz == short[].class) {
      type=Short.class;
    }
 else     if (clazz == int[].class) {
      type=Integer.class;
    }
 else     if (clazz == long[].class) {
      type=Long.class;
    }
 else     if (clazz == float[].class) {
      type=Float.class;
    }
 else     if (clazz == double[].class) {
      type=Double.class;
    }
 else     if (clazz == char[].class) {
      type=Character.class;
    }
 else {
      throw new IndexOutOfBoundsException("Type could not be determined for array");
    }
  }
 else   if (pos == 0) {
    type=outTypeInfo.getTypeClass();
  }
 else {
    throw new IndexOutOfBoundsException("Position is out of range");
  }
  return type;
}
