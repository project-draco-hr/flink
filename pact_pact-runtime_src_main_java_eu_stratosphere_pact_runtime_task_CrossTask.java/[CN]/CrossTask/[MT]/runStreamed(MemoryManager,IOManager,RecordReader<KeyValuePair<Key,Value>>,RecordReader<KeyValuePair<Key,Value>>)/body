{
  LastRepeatableIterator<KeyValuePair<Key,Value>> outerInput=new LastRepeatableIterator<KeyValuePair<Key,Value>>(){
    SerializationCopier<KeyValuePair<Key,Value>> copier=new SerializationCopier<KeyValuePair<Key,Value>>();
    KeyValuePairDeserializer<Key,Value> deserializer=new KeyValuePairDeserializer<Key,Value>(stub.getSecondInKeyType(),stub.getSecondInValueType());
    @Override public boolean hasNext(){
      return outerReader.hasNext();
    }
    @Override public KeyValuePair<Key,Value> next(){
      try {
        KeyValuePair<Key,Value> pair=outerReader.next();
        copier.setCopy(pair);
        return pair;
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    @Override public KeyValuePair<Key,Value> repeatLast(){
      KeyValuePair<Key,Value> pair=deserializer.getInstance();
      copier.getCopy(pair);
      return pair;
    }
  }
;
  SpillingResettableIterator<KeyValuePair<Key,Value>> innerInput=null;
  try {
    try {
      innerInput=new SpillingResettableIterator<KeyValuePair<Key,Value>>(memoryManager,ioManager,innerReader,MEMORY_IO,new KeyValuePairDeserializer<Key,Value>(stub.getFirstInKeyType(),stub.getFirstInValueType()),this);
    }
 catch (    MemoryAllocationException mae) {
      throw new RuntimeException("Unable to obtain SpillingResettable iterator for inner side.",mae);
    }
    try {
      innerInput.open();
    }
 catch (    ServiceException se) {
      throw new RuntimeException("Unable to open SpillingResettable iterator for inner side.",se);
    }
catch (    IOException ioe) {
      throw new RuntimeException("Unable to open SpillingResettable iterator for inner side.",ioe);
    }
catch (    InterruptedException ie) {
      throw new RuntimeException("Unable to open SpillingResettable iterator for inner side.",ie);
    }
    LOG.debug("Resetable iterator obtained: " + this.getEnvironment().getTaskName() + " ("+ (this.getEnvironment().getIndexInSubtaskGroup() + 1)+ "/"+ this.getEnvironment().getCurrentNumberOfSubtasks()+ ")");
    stub.open();
    while (outerInput.hasNext()) {
      KeyValuePair outerPair=outerInput.next();
      while (innerInput.hasNext()) {
        KeyValuePair innerPair=innerInput.next();
        if (config.getLocalStrategy() == LocalStrategy.NESTEDLOOP_STREAMED_OUTER_SECOND) {
          stub.cross(innerPair.getKey(),innerPair.getValue(),outerPair.getKey(),outerPair.getValue(),output);
        }
 else {
          stub.cross(outerPair.getKey(),outerPair.getValue(),innerPair.getKey(),innerPair.getValue(),output);
        }
        outerPair=outerInput.repeatLast();
      }
      if (outerInput.hasNext()) {
        innerInput.reset();
      }
    }
    stub.close();
  }
  finally {
    try {
      if (innerInput != null)       innerInput.close();
    }
 catch (    ServiceException se) {
      LOG.warn(se);
      throw new RuntimeException("Unable to close SpillingResettable iterator",se);
    }
  }
}
