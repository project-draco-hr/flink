{
  final int NUM_INPUTS=4;
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<String> source=env.readTextFile(IN_FILE);
  DataSet<Tuple2<String,Integer>> lastUnion=source.flatMap(new DummyFlatMap());
  for (int i=1; i < NUM_INPUTS; i++) {
    lastUnion=lastUnion.union(source.flatMap(new DummyFlatMap()));
  }
  DataSet<Tuple2<String,Integer>> result=lastUnion.groupBy(0).aggregate(Aggregations.SUM,1);
  result.writeAsText(OUT_FILE);
  Plan plan=env.createProgramPlan("Test union on new java-api");
  OptimizedPlan oPlan=compileNoStats(plan);
  NepheleJobGraphGenerator jobGen=new NepheleJobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
  oPlan.accept(new Visitor<PlanNode>(){
    @Override public boolean preVisit(    PlanNode visitable){
      if (visitable instanceof SingleInputPlanNode && visitable.getPactContract() instanceof PlanGroupReduceOperator) {
        final Channel inConn=((SingleInputPlanNode)visitable).getInput();
        Assert.assertTrue("Union should just forward the Partitioning",inConn.getShipStrategy() == ShipStrategyType.FORWARD);
        Assert.assertTrue("Union Node should be under Group operator",inConn.getSource() instanceof NAryUnionPlanNode);
      }
      if (visitable instanceof NAryUnionPlanNode) {
        int numberInputs=0;
        for (Iterator<Channel> inputs=visitable.getInputs(); inputs.hasNext(); numberInputs++) {
          final Channel inConn=inputs.next();
          PlanNode inNode=inConn.getSource();
          Assert.assertTrue("Input of Union should be FlatMapOperators",inNode.getPactContract() instanceof PlanFlatMapOperator);
          Assert.assertTrue("Shipment strategy under union should partition the data",inConn.getShipStrategy() == ShipStrategyType.PARTITION_HASH);
        }
        Assert.assertTrue("NAryUnion should have " + NUM_INPUTS + " inputs",numberInputs == NUM_INPUTS);
        return false;
      }
      return true;
    }
    @Override public void postVisit(    PlanNode visitable){
    }
  }
);
}
