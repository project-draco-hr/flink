{
  final String ipcAddressString=GlobalConfiguration.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null);
  InetAddress ipcAddress=null;
  if (ipcAddressString != null) {
    try {
      ipcAddress=InetAddress.getByName(ipcAddressString);
    }
 catch (    UnknownHostException e) {
      throw new Exception("Cannot convert " + ipcAddressString + " to an IP address: "+ e.getMessage(),e);
    }
  }
  final int ipcPort=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
  this.recommendedClientPollingInterval=GlobalConfiguration.getInteger(ConfigConstants.JOBCLIENT_POLLING_INTERVAL_KEY,ConfigConstants.DEFAULT_JOBCLIENT_POLLING_INTERVAL);
  this.eventCollector=new EventCollector(this.recommendedClientPollingInterval);
  int archived_items=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_WEB_ARCHIVE_COUNT,ConfigConstants.DEFAULT_JOB_MANAGER_WEB_ARCHIVE_COUNT);
  if (archived_items > 0) {
    this.archive=new MemoryArchivist(archived_items);
    this.eventCollector.registerArchivist(archive);
  }
 else {
    this.archive=null;
  }
  this.accumulatorManager=new AccumulatorManager(Math.min(1,archived_items));
  final InetSocketAddress rpcServerAddress=new InetSocketAddress(ipcAddress,ipcPort);
  try {
    final int handlerCount=GlobalConfiguration.getInteger(ConfigConstants.JOB_MANAGER_IPC_HANDLERS_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_HANDLERS);
    this.jobManagerServer=RPC.getServer(this,rpcServerAddress.getHostName(),rpcServerAddress.getPort(),handlerCount);
    this.jobManagerServer.start();
  }
 catch (  IOException e) {
    throw new Exception("Cannot start RPC server: " + e.getMessage(),e);
  }
  LOG.info("Starting job manager in " + executionMode + " mode");
  if (executionMode == ExecutionMode.LOCAL) {
    final int numTaskManagers=GlobalConfiguration.getInteger(ConfigConstants.LOCAL_INSTANCE_MANAGER_NUMBER_TASK_MANAGER,1);
    this.instanceManager=new LocalInstanceManager(numTaskManagers);
  }
 else   if (executionMode == ExecutionMode.CLUSTER) {
    this.instanceManager=new DefaultInstanceManager();
  }
 else {
    throw new IllegalArgumentException("ExecutionMode");
  }
  final String schedulerClassName=JobManagerUtils.getSchedulerClassName(executionMode);
  LOG.info("Trying to load " + schedulerClassName + " as scheduler");
  this.scheduler=JobManagerUtils.loadScheduler(schedulerClassName,this,this.instanceManager);
  if (this.scheduler == null) {
    throw new Exception("Unable to load scheduler " + schedulerClassName);
  }
}
