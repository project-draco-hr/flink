{
  final GenericMatcher<IT1,IT2,OT> matchStub=taskContext.getStub();
  final UpdateSolutionsetOutputCollector<OT> collector=(UpdateSolutionsetOutputCollector<OT>)this.collector;
  final MutableObjectIterator<IT1> probeSide=taskContext.getInput(0);
  final MutableObjectIterator<IT2> buildSide=taskContext.getInput(1);
  final MutableHashTable<IT2,IT1> hashJoin=Preconditions.checkNotNull(this.hashJoin);
  if (firstIteration) {
    hashJoin.open(buildSide,EmptyMutableObjectIterator.<IT1>get());
  }
  final IT1 probeSideRecord=taskContext.<IT1>getInputSerializer(0).createInstance();
  final IT2 buildSideRecord=taskContext.<IT2>getInputSerializer(1).createInstance();
  while (running && probeSide.next(probeSideRecord)) {
    PactRecord debug=(PactRecord)probeSideRecord;
    System.out.println("Probing (" + debug.getField(0,PactLong.class).getValue() + ", "+ debug.getField(1,PactLong.class).getValue()+ ")");
    MutableHashTable.HashBucketIterator<IT2,IT1> bucket=hashJoin.getMatchesFor(probeSideRecord);
    boolean matched=bucket.next(buildSideRecord);
    Preconditions.checkState(matched);
    collector.setHashBucket(bucket);
    matchStub.match(probeSideRecord,buildSideRecord,collector);
  }
}
