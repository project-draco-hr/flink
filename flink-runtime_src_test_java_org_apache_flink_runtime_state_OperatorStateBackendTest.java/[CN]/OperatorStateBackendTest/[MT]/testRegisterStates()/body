{
  OperatorStateBackend operatorStateBackend=createNewOperatorStateBackend();
  ListStateDescriptor<Serializable> stateDescriptor1=new ListStateDescriptor<>("test1",new JavaSerializer<>());
  ListStateDescriptor<Serializable> stateDescriptor2=new ListStateDescriptor<>("test2",new JavaSerializer<>());
  ListState<Serializable> listState1=operatorStateBackend.getPartitionableState(stateDescriptor1);
  assertNotNull(listState1);
  assertEquals(1,operatorStateBackend.getRegisteredStateNames().size());
  Iterator<Serializable> it=listState1.get().iterator();
  assertTrue(!it.hasNext());
  listState1.add(42);
  listState1.add(4711);
  it=listState1.get().iterator();
  assertEquals(42,it.next());
  assertEquals(4711,it.next());
  assertTrue(!it.hasNext());
  ListState<Serializable> listState2=operatorStateBackend.getPartitionableState(stateDescriptor2);
  assertNotNull(listState2);
  assertEquals(2,operatorStateBackend.getRegisteredStateNames().size());
  assertTrue(!it.hasNext());
  listState2.add(7);
  listState2.add(13);
  listState2.add(23);
  it=listState2.get().iterator();
  assertEquals(7,it.next());
  assertEquals(13,it.next());
  assertEquals(23,it.next());
  assertTrue(!it.hasNext());
  ListState<Serializable> listState1b=operatorStateBackend.getPartitionableState(stateDescriptor1);
  assertNotNull(listState1b);
  listState1b.add(123);
  it=listState1b.get().iterator();
  assertEquals(42,it.next());
  assertEquals(4711,it.next());
  assertEquals(123,it.next());
  assertTrue(!it.hasNext());
  it=listState1.get().iterator();
  assertEquals(42,it.next());
  assertEquals(4711,it.next());
  assertEquals(123,it.next());
  assertTrue(!it.hasNext());
  it=listState1b.get().iterator();
  assertEquals(42,it.next());
  assertEquals(4711,it.next());
  assertEquals(123,it.next());
  assertTrue(!it.hasNext());
}
