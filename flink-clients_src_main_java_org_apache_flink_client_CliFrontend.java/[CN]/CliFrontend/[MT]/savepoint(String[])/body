{
  LOG.info("Running 'savepoint' command.");
  SavepointOptions options;
  try {
    options=CliFrontendParser.parseSavepointCommand(args);
  }
 catch (  CliArgsException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  if (options.isPrintHelp()) {
    CliFrontendParser.printHelpForCancel();
    return 0;
  }
  if (options.isDispose()) {
    return disposeSavepoint(options,options.getDisposeSavepointPath());
  }
 else {
    String[] cleanedArgs=options.getArgs();
    JobID jobId;
    if (cleanedArgs.length > 0) {
      String jobIdString=cleanedArgs[0];
      try {
        jobId=new JobID(StringUtils.hexStringToByte(jobIdString));
      }
 catch (      Exception e) {
        return handleError(new IllegalArgumentException("Error: The value for the Job ID is not a valid ID."));
      }
    }
 else {
      return handleError(new IllegalArgumentException("Error: The value for the Job ID is not a valid ID. " + "Specify a Job ID to trigger a savepoint."));
    }
    return triggerSavepoint(options,jobId);
  }
}
