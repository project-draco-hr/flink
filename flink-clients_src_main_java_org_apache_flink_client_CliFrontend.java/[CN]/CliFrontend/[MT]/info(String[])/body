{
  CommandLine line;
  try {
    line=parser.parse(INFO_OPTIONS,args,false);
    evaluateGeneralOptions(line);
  }
 catch (  MissingOptionException e) {
    return handleArgException(e);
  }
catch (  MissingArgumentException e) {
    return handleArgException(e);
  }
catch (  UnrecognizedOptionException e) {
    return handleArgException(e);
  }
catch (  Exception e) {
    return handleError(e);
  }
  if (printHelp) {
    printHelpForInfo();
    return 0;
  }
  PackagedProgram program;
  try {
    program=buildProgram(line);
  }
 catch (  FileNotFoundException e) {
    return handleError(e);
  }
catch (  ProgramInvocationException e) {
    return handleError(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  int parallelism=-1;
  if (line.hasOption(PARALLELISM_OPTION.getOpt())) {
    String parString=line.getOptionValue(PARALLELISM_OPTION.getOpt());
    try {
      parallelism=Integer.parseInt(parString);
    }
 catch (    NumberFormatException e) {
      System.out.println("The value " + parString + " is invalid for the degree of parallelism.");
      return 1;
    }
    if (parallelism <= 0) {
      System.out.println("Invalid value for the degree-of-parallelism. Parallelism must be greater than zero.");
      return 1;
    }
  }
  try {
    Client client=getClient(line,program.getUserCodeClassLoader(),program.getMainClassName());
    String jsonPlan=client.getOptimizedPlanAsJson(program,parallelism);
    if (jsonPlan != null) {
      System.out.println("----------------------- Execution Plan -----------------------");
      System.out.println(jsonPlan);
      System.out.println("--------------------------------------------------------------");
    }
 else {
      System.out.println("JSON plan could not be compiled.");
    }
    return 0;
  }
 catch (  Throwable t) {
    return handleError(t);
  }
 finally {
    program.deleteExtractedLibraries();
  }
}
