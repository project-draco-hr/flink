{
  LOG.info("Running 'info' command.");
  InfoOptions options;
  try {
    options=CliFrontendParser.parseInfoCommand(args);
  }
 catch (  CliArgsException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  if (options.isPrintHelp()) {
    CliFrontendParser.printHelpForInfo();
    return 0;
  }
  if (options.getJarFilePath() == null) {
    return handleArgException(new CliArgsException("The program JAR file was not specified."));
  }
  PackagedProgram program;
  try {
    LOG.info("Building program from JAR file");
    program=buildProgram(options);
  }
 catch (  Throwable t) {
    return handleError(t);
  }
  try {
    int parallelism=options.getParallelism();
    LOG.info("Creating program plan dump");
    Optimizer compiler=new Optimizer(new DataStatistics(),new DefaultCostEstimator(),config);
    FlinkPlan flinkPlan=Client.getOptimizedPlan(compiler,program,parallelism);
    if (webFrontend) {
      this.optimizedPlan=flinkPlan;
      this.packagedProgram=program;
    }
 else {
      String jsonPlan=null;
      if (flinkPlan instanceof OptimizedPlan) {
        jsonPlan=new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan)flinkPlan);
      }
 else       if (flinkPlan instanceof StreamingPlan) {
        jsonPlan=((StreamingPlan)flinkPlan).getStreamingPlanAsJSON();
      }
      if (jsonPlan != null) {
        System.out.println("----------------------- Execution Plan -----------------------");
        System.out.println(jsonPlan);
        System.out.println("--------------------------------------------------------------");
      }
 else {
        System.out.println("JSON plan could not be generated.");
      }
      String description=program.getDescription();
      if (description != null) {
        System.out.println();
        System.out.println(description);
      }
 else {
        System.out.println();
        System.out.println("No description provided.");
      }
    }
    return 0;
  }
 catch (  Throwable t) {
    return handleError(t);
  }
 finally {
    program.deleteExtractedLibraries();
  }
}
