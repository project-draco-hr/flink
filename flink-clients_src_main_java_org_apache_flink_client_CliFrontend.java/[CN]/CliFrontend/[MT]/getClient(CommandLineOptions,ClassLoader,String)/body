{
  InetSocketAddress jobManagerAddress;
  if (YARN_DEPLOY_JOBMANAGER.equals(options.getJobManagerAddress())) {
    logAndSysout("YARN cluster mode detected. Switching Log4j output to console");
    CommandLine commandLine=options.getCommandLine();
    AbstractFlinkYarnClient flinkYarnClient=CliFrontendParser.getFlinkYarnSessionCli().createFlinkYarnClient(commandLine);
    if (flinkYarnClient == null) {
      throw new RuntimeException("Unable to create Flink YARN Client. Check previous log messages");
    }
    try {
      yarnCluster=flinkYarnClient.deploy("Flink Application: " + programName);
    }
 catch (    Exception e) {
      throw new RuntimeException("Error deploying the YARN cluster",e);
    }
    jobManagerAddress=yarnCluster.getJobManagerAddress();
    logAndSysout("YARN cluster started");
    logAndSysout("JobManager web interface address " + yarnCluster.getWebInterfaceURL());
    logAndSysout("Waiting until all TaskManagers have connected");
    while (true) {
      FlinkYarnClusterStatus status=yarnCluster.getClusterStatus();
      if (status != null) {
        if (status.getNumberOfTaskManagers() < flinkYarnClient.getTaskManagerCount()) {
          logAndSysout("TaskManager status (" + status.getNumberOfTaskManagers() + "/"+ flinkYarnClient.getTaskManagerCount()+ ")");
        }
 else {
          logAndSysout("All TaskManagers are connected");
          break;
        }
      }
 else {
        logAndSysout("No status updates from YARN cluster received so far. Waiting ...");
      }
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
        LOG.error("Interrupted while waiting for TaskManagers");
        System.err.println("Thread is interrupted");
        Thread.currentThread().interrupt();
      }
    }
  }
 else {
    jobManagerAddress=getJobManagerAddress(options);
  }
  return new Client(jobManagerAddress,config,classLoader);
}
