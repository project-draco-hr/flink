{
  String jmAddrString=getJobManagerAddressString(line);
  InetSocketAddress jobManagerAddress=null;
  if (jmAddrString.equals(YARN_DEPLOY_JOBMANAGER)) {
    System.out.println("YARN cluster mode detected. Switching Log4j output to console");
    LogManager.getRootLogger().addAppender(new ConsoleAppender(new PatternLayout(DEFAULT_LOG4J_PATTERN_LAYOUT)));
    this.runInYarnCluster=true;
    AbstractFlinkYarnClient flinkYarnClient=yarnSessionCLi.createFlinkYarnClient(line);
    if (flinkYarnClient == null) {
      throw new RuntimeException("Unable to create Flink YARN Client. Check previous log messages");
    }
    try {
      yarnCluster=flinkYarnClient.deploy("Flink Application: " + programName);
    }
 catch (    Exception e) {
      throw new RuntimeException("Error deploying the YARN cluster",e);
    }
    jobManagerAddress=yarnCluster.getJobManagerAddress();
    System.out.println("YARN cluster started");
    System.out.println("JobManager web interface address " + yarnCluster.getWebInterfaceURL());
    System.out.println("Waiting until all TaskManagers have connected");
    while (true) {
      FlinkYarnClusterStatus status=yarnCluster.getClusterStatus();
      if (status != null) {
        if (status.getNumberOfTaskManagers() < flinkYarnClient.getTaskManagerCount()) {
          System.out.println("TaskManager status  (" + status.getNumberOfTaskManagers() + "/"+ flinkYarnClient.getTaskManagerCount()+ ")");
        }
 else {
          System.out.println("Enough TaskManagers are connected");
          break;
        }
      }
 else {
        System.out.println("No status updates from YARN cluster received so far. Waiting ...");
      }
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
        System.err.println("Thread as interrupted");
        Thread.currentThread().interrupt();
      }
    }
  }
 else {
    jobManagerAddress=RemoteExecutor.getInetFromHostport(jmAddrString);
  }
  return new Client(jobManagerAddress,getGlobalConfiguration(),classLoader);
}
