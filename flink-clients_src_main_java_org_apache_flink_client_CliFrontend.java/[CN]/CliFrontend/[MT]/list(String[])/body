{
  LOG.info("Running 'list' command.");
  ListOptions options;
  try {
    options=CliFrontendParser.parseListCommand(args);
  }
 catch (  CliArgsException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  if (options.isPrintHelp()) {
    CliFrontendParser.printHelpForList();
    return 0;
  }
  boolean running=options.getRunning();
  boolean scheduled=options.getScheduled();
  if (!running && !scheduled) {
    running=true;
    scheduled=true;
  }
  try {
    ActorRef jobManager=getJobManager(options);
    LOG.info("Connecting to JobManager to retrieve list of jobs");
    Future<Object> response=Patterns.ask(jobManager,JobManagerMessages.getRequestRunningJobsStatus(),new Timeout(askTimeout));
    Object result;
    try {
      result=Await.result(response,askTimeout);
    }
 catch (    Exception e) {
      throw new Exception("Could not retrieve running jobs from the JobManager.",e);
    }
    if (result instanceof RunningJobsStatus) {
      LOG.info("Successfully retrieved list of jobs");
      List<JobStatusMessage> jobs=((RunningJobsStatus)result).getStatusMessages();
      ArrayList<JobStatusMessage> runningJobs=null;
      ArrayList<JobStatusMessage> scheduledJobs=null;
      if (running) {
        runningJobs=new ArrayList<JobStatusMessage>();
      }
      if (scheduled) {
        scheduledJobs=new ArrayList<JobStatusMessage>();
      }
      for (      JobStatusMessage rj : jobs) {
        if (running && rj.getJobState().equals(JobStatus.RUNNING)) {
          runningJobs.add(rj);
        }
        if (scheduled && rj.getJobState().equals(JobStatus.CREATED)) {
          scheduledJobs.add(rj);
        }
      }
      SimpleDateFormat df=new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
      Comparator<JobStatusMessage> njec=new Comparator<JobStatusMessage>(){
        @Override public int compare(        JobStatusMessage o1,        JobStatusMessage o2){
          return (int)(o1.getStartTime() - o2.getStartTime());
        }
      }
;
      if (running) {
        if (runningJobs.size() == 0) {
          System.out.println("No running jobs.");
        }
 else {
          Collections.sort(runningJobs,njec);
          System.out.println("------------------------ Running Jobs ------------------------");
          for (          JobStatusMessage rj : runningJobs) {
            System.out.println(df.format(new Date(rj.getStartTime())) + " : " + rj.getJobId()+ " : "+ rj.getJobName());
          }
          System.out.println("--------------------------------------------------------------");
        }
      }
      if (scheduled) {
        if (scheduledJobs.size() == 0) {
          System.out.println("No scheduled jobs.");
        }
 else {
          Collections.sort(scheduledJobs,njec);
          System.out.println("----------------------- Scheduled Jobs -----------------------");
          for (          JobStatusMessage rj : scheduledJobs) {
            System.out.println(df.format(new Date(rj.getStartTime())) + " : " + rj.getJobId()+ " : "+ rj.getJobName());
          }
          System.out.println("--------------------------------------------------------------");
        }
      }
      return 0;
    }
 else {
      throw new Exception("ReqeustRunningJobs requires a response of type " + "RunningJobs. Instead the response is of type " + result.getClass() + ".");
    }
  }
 catch (  Throwable t) {
    return handleError(t);
  }
}
