{
  CommandLine line;
  try {
    line=parser.parse(LIST_OPTIONS,args,false);
  }
 catch (  MissingOptionException e) {
    System.out.println(e.getMessage());
    printHelpForList();
    return 1;
  }
catch (  UnrecognizedOptionException e) {
    System.out.println(e.getMessage());
    printHelpForList();
    return 2;
  }
catch (  Exception e) {
    return handleError(e);
  }
  if (printHelp) {
    printHelpForList();
    return 0;
  }
  boolean running=line.hasOption(RUNNING_OPTION.getOpt());
  boolean scheduled=line.hasOption(SCHEDULED_OPTION.getOpt());
  if (!running && !scheduled) {
    System.out.println("Error: Specify the status of the jobs to list.");
    printHelpForList();
    return 1;
  }
  try {
    ActorRef jobManager=getJobManager(line);
    if (jobManager == null) {
      printHelpForList();
      return 1;
    }
    Iterable<ExecutionGraph> jobs=AkkaUtils.<RunningJobs>ask(jobManager,RequestRunningJobs$.MODULE$,getAkkaTimeout()).asJavaIterable();
    ArrayList<ExecutionGraph> runningJobs=null;
    ArrayList<ExecutionGraph> scheduledJobs=null;
    if (running) {
      runningJobs=new ArrayList<ExecutionGraph>();
    }
    if (scheduled) {
      scheduledJobs=new ArrayList<ExecutionGraph>();
    }
    for (    ExecutionGraph rj : jobs) {
      if (running && rj.getState().equals(JobStatus.RUNNING)) {
        runningJobs.add(rj);
      }
      if (scheduled && rj.getState().equals(JobStatus.CREATED)) {
        scheduledJobs.add(rj);
      }
    }
    SimpleDateFormat df=new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
    Comparator<ExecutionGraph> njec=new Comparator<ExecutionGraph>(){
      @Override public int compare(      ExecutionGraph o1,      ExecutionGraph o2){
        return (int)(o1.getStatusTimestamp(o1.getState()) - o2.getStatusTimestamp(o2.getState()));
      }
    }
;
    if (running) {
      if (runningJobs.size() == 0) {
        System.out.println("No running jobs.");
      }
 else {
        Collections.sort(runningJobs,njec);
        System.out.println("------------------------ Running Jobs ------------------------");
        for (        ExecutionGraph rj : runningJobs) {
          System.out.println(df.format(new Date(rj.getStatusTimestamp(rj.getState()))) + " : " + rj.getJobID().toString()+ " : "+ rj.getJobName());
        }
        System.out.println("--------------------------------------------------------------");
      }
    }
    if (scheduled) {
      if (scheduledJobs.size() == 0) {
        System.out.println("No scheduled jobs.");
      }
 else {
        Collections.sort(scheduledJobs,njec);
        System.out.println("----------------------- Scheduled Jobs -----------------------");
        for (        ExecutionGraph rj : scheduledJobs) {
          System.out.println(df.format(new Date(rj.getStatusTimestamp(rj.getState()))) + " : " + rj.getJobID().toString()+ " : "+ rj.getJobName());
        }
        System.out.println("--------------------------------------------------------------");
      }
    }
    return 0;
  }
 catch (  Throwable t) {
    return handleError(t);
  }
}
