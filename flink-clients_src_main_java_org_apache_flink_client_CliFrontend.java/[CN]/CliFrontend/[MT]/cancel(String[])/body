{
  CommandLine line;
  try {
    line=parser.parse(CANCEL_OPTIONS,args,false);
    evaluateGeneralOptions(line);
  }
 catch (  MissingOptionException e) {
    return handleArgException(e);
  }
catch (  MissingArgumentException e) {
    return handleArgException(e);
  }
catch (  UnrecognizedOptionException e) {
    return handleArgException(e);
  }
catch (  Exception e) {
    return handleError(e);
  }
  if (printHelp) {
    printHelpForCancel();
    return 0;
  }
  String[] cleanedArgs=line.getArgs();
  JobID jobId;
  if (cleanedArgs.length > 0) {
    String jobIdString=cleanedArgs[0];
    try {
      jobId=new JobID(StringUtils.hexStringToByte(jobIdString));
    }
 catch (    Exception e) {
      System.out.println("Error: The value for the Job ID is not a valid ID.");
      return 1;
    }
  }
 else {
    System.out.println("Error: Specify a Job ID to cancel a job.");
    return 1;
  }
  try {
    ActorRef jobManager=getJobManager(line,getGlobalConfiguration());
    if (jobManager == null) {
      return 1;
    }
    final Future<Object> response=Patterns.ask(jobManager,new CancelJob(jobId),new Timeout(getAkkaTimeout()));
    try {
      Await.ready(response,getAkkaTimeout());
    }
 catch (    Exception exception) {
      throw new IOException("Canceling the job with job ID " + jobId + " failed.",exception);
    }
    return 0;
  }
 catch (  Throwable t) {
    return handleError(t);
  }
}
