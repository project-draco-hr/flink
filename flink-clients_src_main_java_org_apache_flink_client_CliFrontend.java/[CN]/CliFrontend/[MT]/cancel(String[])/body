{
  LOG.info("Running 'cancel' command.");
  CancelOptions options;
  try {
    options=CliFrontendParser.parseCancelCommand(args);
  }
 catch (  CliArgsException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  if (options.isPrintHelp()) {
    CliFrontendParser.printHelpForCancel();
    return 0;
  }
  String[] cleanedArgs=options.getArgs();
  JobID jobId;
  if (cleanedArgs.length > 0) {
    String jobIdString=cleanedArgs[0];
    try {
      jobId=new JobID(StringUtils.hexStringToByte(jobIdString));
    }
 catch (    Exception e) {
      LOG.error("Error: The value for the Job ID is not a valid ID.");
      System.out.println("Error: The value for the Job ID is not a valid ID.");
      return 1;
    }
  }
 else {
    LOG.error("Missing JobID in the command line arguments.");
    System.out.println("Error: Specify a Job ID to cancel a job.");
    return 1;
  }
  try {
    ActorGateway jobManager=getJobManagerGateway(options);
    Future<Object> response=jobManager.ask(new CancelJob(jobId),clientTimeout);
    try {
      Await.result(response,clientTimeout);
      return 0;
    }
 catch (    Exception e) {
      throw new Exception("Canceling the job with ID " + jobId + " failed.",e);
    }
  }
 catch (  Throwable t) {
    return handleError(t);
  }
}
