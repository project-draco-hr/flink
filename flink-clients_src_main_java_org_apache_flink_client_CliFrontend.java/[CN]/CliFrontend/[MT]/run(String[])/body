{
  LOG.info("Running 'run' command.");
  RunOptions options;
  try {
    options=CliFrontendParser.parseRunCommand(args);
  }
 catch (  CliArgsException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  if (options.isPrintHelp()) {
    CliFrontendParser.printHelpForRun();
    return 0;
  }
  if (options.getJarFilePath() == null) {
    return handleArgException(new CliArgsException("The program JAR file was not specified."));
  }
  PackagedProgram program;
  try {
    LOG.info("Building program from JAR file");
    program=buildProgram(options);
  }
 catch (  FileNotFoundException e) {
    return handleArgException(e);
  }
catch (  ProgramInvocationException e) {
    return handleError(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  try {
    Client client=getClient(options,program.getUserCodeClassLoader(),program.getMainClassName());
    int parallelism=options.getParallelism();
    int exitCode=executeProgram(program,client,parallelism);
    if (yarnCluster != null) {
      List<String> msgs=yarnCluster.getNewMessages();
      if (msgs != null && msgs.size() > 1) {
        logAndSysout("The following messages were created by the YARN cluster while running the Job:");
        for (        String msg : msgs) {
          logAndSysout(msg);
        }
      }
      if (yarnCluster.hasFailed()) {
        logAndSysout("YARN cluster is in failed state!");
        logAndSysout("YARN Diagnostics: " + yarnCluster.getDiagnostics());
      }
    }
    return exitCode;
  }
 catch (  Throwable t) {
    return handleError(t);
  }
 finally {
    if (yarnCluster != null) {
      logAndSysout("Shutting down YARN cluster");
      yarnCluster.shutdown();
    }
    if (program != null) {
      program.deleteExtractedLibraries();
    }
  }
}
