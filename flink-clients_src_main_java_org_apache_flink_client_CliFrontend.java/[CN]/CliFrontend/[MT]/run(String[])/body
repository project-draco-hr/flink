{
  LOG.info("Running 'run' command.");
  RunOptions options;
  try {
    options=CliFrontendParser.parseRunCommand(args);
  }
 catch (  CliArgsException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  if (options.isPrintHelp()) {
    CliFrontendParser.printHelpForRun();
    return 0;
  }
  if (options.getJarFilePath() == null) {
    return handleArgException(new CliArgsException("The program JAR file was not specified."));
  }
  PackagedProgram program;
  try {
    LOG.info("Building program from JAR file");
    program=buildProgram(options);
  }
 catch (  FileNotFoundException e) {
    return handleArgException(e);
  }
catch (  ProgramInvocationException e) {
    return handleError(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  int exitCode=1;
  try {
    int userParallelism=options.getParallelism();
    LOG.debug("User parallelism is set to {}",userParallelism);
    Client client=getClient(options,program.getMainClassName(),userParallelism);
    client.setPrintStatusDuringExecution(options.getStdoutLogging());
    LOG.debug("Client slots is set to {}",client.getMaxSlots());
    try {
      if (client.getMaxSlots() != -1 && userParallelism == -1) {
        logAndSysout("Using the parallelism provided by the remote cluster (" + client.getMaxSlots() + "). "+ "To use another parallelism, set it at the ./bin/flink client.");
        userParallelism=client.getMaxSlots();
      }
      if (yarnCluster != null && yarnCluster.isDetached()) {
        logAndSysout("The Flink YARN client has been started in detached mode. In order to stop " + "Flink on YARN, use the following command or a YARN web interface to stop it:\n" + "yarn application -kill " + yarnCluster.getApplicationId() + "\n"+ "Please also note that the temporary files of the YARN session in the home directoy will not be removed.");
        exitCode=executeProgramDetached(program,client,userParallelism);
      }
 else {
        exitCode=executeProgramBlocking(program,client,userParallelism);
      }
      if (yarnCluster != null && !yarnCluster.isDetached()) {
        List<String> msgs=yarnCluster.getNewMessages();
        if (msgs != null && msgs.size() > 1) {
          logAndSysout("The following messages were created by the YARN cluster while running the Job:");
          for (          String msg : msgs) {
            logAndSysout(msg);
          }
        }
        if (yarnCluster.hasFailed()) {
          logAndSysout("YARN cluster is in failed state!");
          logAndSysout("YARN Diagnostics: " + yarnCluster.getDiagnostics());
        }
      }
      return exitCode;
    }
  finally {
      client.shutdown();
    }
  }
 catch (  Throwable t) {
    return handleError(t);
  }
 finally {
    if (yarnCluster != null && !yarnCluster.isDetached()) {
      logAndSysout("Shutting down YARN cluster");
      yarnCluster.shutdown(exitCode != 0);
    }
    if (program != null) {
      program.deleteExtractedLibraries();
    }
  }
}
