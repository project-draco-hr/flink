{
  LOG.info("Running 'run' command.");
  RunOptions options;
  try {
    options=CliFrontendParser.parseRunCommand(args);
  }
 catch (  CliArgsException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  if (options.isPrintHelp()) {
    CliFrontendParser.printHelpForRun();
    return 0;
  }
  if (options.getJarFilePath() == null) {
    return handleArgException(new CliArgsException("The program JAR file was not specified."));
  }
  PackagedProgram program;
  try {
    LOG.info("Building program from JAR file");
    program=buildProgram(options);
  }
 catch (  FileNotFoundException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  ClusterClient client=null;
  try {
    client=createClient(options,program.getMainClassName());
    client.setPrintStatusDuringExecution(options.getStdoutLogging());
    client.setDetached(options.getDetachedMode());
    LOG.debug("Client slots is set to {}",client.getMaxSlots());
    LOG.debug("Savepoint path is set to {}",options.getSavepointPath());
    int userParallelism=options.getParallelism();
    LOG.debug("User parallelism is set to {}",userParallelism);
    if (client.getMaxSlots() != -1 && userParallelism == -1) {
      logAndSysout("Using the parallelism provided by the remote cluster (" + client.getMaxSlots() + "). "+ "To use another parallelism, set it at the ./bin/flink client.");
      userParallelism=client.getMaxSlots();
    }
    return executeProgram(program,client,userParallelism);
  }
 catch (  Throwable t) {
    return handleError(t);
  }
 finally {
    if (client != null) {
      client.shutdown();
    }
    if (program != null) {
      program.deleteExtractedLibraries();
    }
  }
}
