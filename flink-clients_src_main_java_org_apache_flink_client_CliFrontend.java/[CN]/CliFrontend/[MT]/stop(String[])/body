{
  LOG.info("Running 'stop' command.");
  StopOptions options;
  try {
    options=CliFrontendParser.parseStopCommand(args);
  }
 catch (  CliArgsException e) {
    return handleArgException(e);
  }
catch (  Throwable t) {
    return handleError(t);
  }
  if (options.isPrintHelp()) {
    CliFrontendParser.printHelpForStop();
    return 0;
  }
  String[] stopArgs=options.getArgs();
  JobID jobId;
  if (stopArgs.length > 0) {
    String jobIdString=stopArgs[0];
    try {
      jobId=new JobID(StringUtils.hexStringToByte(jobIdString));
    }
 catch (    Exception e) {
      return handleError(e);
    }
  }
 else {
    return handleArgException(new CliArgsException("Missing JobID"));
  }
  try {
    ActorGateway jobManager=getJobManagerGateway(options);
    Future<Object> response=jobManager.ask(new StopJob(jobId),clientTimeout);
    final Object rc=Await.result(response,clientTimeout);
    if (rc instanceof StoppingFailure) {
      throw new Exception("Stopping the job with ID " + jobId + " failed.",((StoppingFailure)rc).cause());
    }
    return 0;
  }
 catch (  Throwable t) {
    return handleError(t);
  }
}
