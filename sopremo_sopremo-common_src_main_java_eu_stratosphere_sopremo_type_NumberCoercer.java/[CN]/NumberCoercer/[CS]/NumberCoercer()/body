{
  this.coercers.put(AbstractJsonNode.Type.IntNode,new Coercer<INumericNode,IntNode>(){
    @Override public IntNode coerce(    final INumericNode from,    final IntNode target){
      target.setValue(from.getIntValue());
      return target;
    }
  }
);
  this.coercers.put(AbstractJsonNode.Type.LongNode,new Coercer<INumericNode,LongNode>(){
    @Override public LongNode coerce(    final INumericNode from,    final LongNode target){
      target.setValue(from.getLongValue());
      return target;
    }
  }
);
  this.coercers.put(AbstractJsonNode.Type.DoubleNode,new Coercer<INumericNode,DoubleNode>(){
    @Override public DoubleNode coerce(    final INumericNode from,    final DoubleNode target){
      target.setValue(from.getDoubleValue());
      return target;
    }
  }
);
  this.coercers.put(AbstractJsonNode.Type.DecimalNode,new Coercer<INumericNode,DecimalNode>(){
    @Override public DecimalNode coerce(    final INumericNode from,    final DecimalNode target){
      target.setValue(from.getDecimalValue());
      return target;
    }
  }
);
  this.coercers.put(AbstractJsonNode.Type.BigIntegerNode,new Coercer<INumericNode,BigIntegerNode>(){
    @Override public BigIntegerNode coerce(    final INumericNode from,    final BigIntegerNode target){
      target.setValue(from.getBigIntegerValue());
      return target;
    }
  }
);
  for (  final Entry<AbstractJsonNode.Type,Coercer<? extends INumericNode,? extends INumericNode>> entry : this.coercers.entrySet())   this.classCoercers.put(entry.getKey().getClazz(),entry.getValue());
}
