{
  byte type=(byte)input.readByte();
switch (type) {
case TYPE_TUPLE:
    int tupleSize=input.readByte();
  Tuple tuple=createTuple(tupleSize);
for (int x=0; x < tupleSize; x++) {
  tuple.setField(receiveField(normalized),x);
}
return tuple;
case TYPE_BOOLEAN:
return input.readByte() == 1;
case TYPE_BYTE:
return (byte)input.readByte();
case TYPE_SHORT:
if (normalized) {
return (int)input.readShort();
}
 else {
return input.readShort();
}
case TYPE_INTEGER:
return input.readInt();
case TYPE_LONG:
if (normalized) {
return new Long(input.readLong()).intValue();
}
 else {
return input.readLong();
}
case TYPE_FLOAT:
if (normalized) {
return (double)input.readFloat();
}
 else {
return input.readFloat();
}
case TYPE_DOUBLE:
return input.readDouble();
case TYPE_STRING:
int stringSize=input.readInt();
byte[] string=new byte[stringSize];
input.readFully(string);
return new String(string);
case TYPE_BYTES:
int bytessize=input.readInt();
byte[] bytes=new byte[bytessize];
input.readFully(bytes);
return bytes;
case TYPE_NULL:
return null;
default :
int size=input.readInt();
byte[] data=new byte[size];
input.readFully(data);
return new CustomTypeWrapper(type,data);
}
}
