{
  final Map<String,AbstractPluginLoader> tmpPluginList=new LinkedHashMap<String,AbstractPluginLoader>();
  final DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
  docBuilderFactory.setIgnoringComments(true);
  docBuilderFactory.setNamespaceAware(true);
  try {
    final DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();
    final Document doc=builder.parse(configFile);
    if (doc == null) {
      LOG.error("Unable to load plugins: doc is null");
      return Collections.emptyMap();
    }
    final Element root=doc.getDocumentElement();
    if (root == null) {
      LOG.error("Unable to load plugins: root is null");
      return Collections.emptyMap();
    }
    if (!"plugins".equals(root.getNodeName())) {
      LOG.error("Unable to load plugins: unknown element " + root.getNodeName());
      return Collections.emptyMap();
    }
    final NodeList pluginNodes=root.getChildNodes();
    int pluginCounter=0;
    for (int i=0; i < pluginNodes.getLength(); ++i) {
      final Node pluginNode=pluginNodes.item(i);
      if (pluginNode instanceof Text) {
        continue;
      }
      if (!"plugin".equals(pluginNode.getNodeName())) {
        LOG.error("Unable to load plugins: unknown element " + pluginNode.getNodeName());
        continue;
      }
      ++pluginCounter;
      final NodeList pluginChildren=pluginNode.getChildNodes();
      String pluginName=null;
      String pluginClass=null;
      Configuration pluginConfiguration=null;
      for (int j=0; j < pluginChildren.getLength(); ++j) {
        final Node pluginChild=pluginChildren.item(j);
        if (pluginChild instanceof Text) {
          continue;
        }
        if ("name".equals(pluginChild.getNodeName())) {
          pluginName=getTextChild(pluginChild);
          if (pluginName == null) {
            LOG.error("Skipping plugin " + pluginCounter + " from configuration because it does not provide a proper name");
            continue;
          }
        }
        if ("class".equals(pluginChild.getNodeName())) {
          pluginClass=getTextChild(pluginChild);
          if (pluginClass == null) {
            LOG.error("Skipping plugin " + pluginCounter + " from configuration because it does not provide a loader class");
            continue;
          }
        }
        if ("configuration".equals(pluginChild.getNodeName())) {
          pluginConfiguration=new Configuration();
          final NodeList configurationNodes=pluginChild.getChildNodes();
          for (int k=0; k < configurationNodes.getLength(); ++k) {
            final Node configurationNode=configurationNodes.item(k);
            if (configurationNode instanceof Text) {
              continue;
            }
            if (!"property".equals(configurationNode.getNodeName())) {
              LOG.error("Unexpected node " + configurationNode.getNodeName() + ", skipping...");
              continue;
            }
            String key=null;
            String value=null;
            final NodeList properties=configurationNode.getChildNodes();
            for (int l=0; l < properties.getLength(); ++l) {
              final Node property=properties.item(l);
              if (configurationNode instanceof Text) {
                continue;
              }
              if ("key".equals(property.getNodeName())) {
                key=getTextChild(property);
                if (key == null) {
                  LOG.warn("Skipping configuration entry for plugin " + pluginName + " because of invalid key");
                  continue;
                }
              }
              if ("value".equals(property.getNodeName())) {
                value=getTextChild(property);
                if (value == null) {
                  LOG.warn("Skipping configuration entry for plugin " + pluginName + " because of invalid value");
                  continue;
                }
              }
            }
            if (key != null && value != null) {
              pluginConfiguration.setString(key,value);
            }
          }
        }
      }
      if (pluginName == null) {
        LOG.error("Plugin " + pluginCounter + " does not provide a name, skipping...");
        continue;
      }
      if (pluginClass == null) {
        LOG.error("Plugin " + pluginCounter + " does not provide a loader class, skipping...");
        continue;
      }
      if (pluginConfiguration == null) {
        LOG.warn("Plugin " + pluginCounter + " does not provide a configuration, using default configuration");
        pluginConfiguration=new Configuration();
      }
      Class<? extends AbstractPluginLoader> loaderClass;
      try {
        loaderClass=(Class<? extends AbstractPluginLoader>)Class.forName(pluginClass);
      }
 catch (      ClassNotFoundException e) {
        LOG.error("Unable to load plugin " + pluginName + ": "+ StringUtils.stringifyException(e));
        continue;
      }
      if (loaderClass == null) {
        LOG.error("Unable to load plugin " + pluginName + ": loaderClass is null");
        continue;
      }
      Constructor<? extends AbstractPluginLoader> constructor;
      try {
        constructor=(Constructor<? extends AbstractPluginLoader>)loaderClass.getConstructor(String.class,Configuration.class,PluginLookupService.class);
      }
 catch (      SecurityException e) {
        LOG.error("Unable to load plugin " + pluginName + ": "+ StringUtils.stringifyException(e));
        continue;
      }
catch (      NoSuchMethodException e) {
        LOG.error("Unable to load plugin " + pluginName + ": "+ StringUtils.stringifyException(e));
        continue;
      }
      if (constructor == null) {
        LOG.error("Unable to load plugin " + pluginName + ": constructor is null");
        continue;
      }
      AbstractPluginLoader pluginLoader=null;
      try {
        pluginLoader=constructor.newInstance(pluginName,pluginConfiguration,pluginLookupService);
      }
 catch (      IllegalArgumentException e) {
        LOG.error("Unable to load plugin " + pluginName + ": "+ StringUtils.stringifyException(e));
        continue;
      }
catch (      InstantiationException e) {
        LOG.error("Unable to load plugin " + pluginName + ": "+ StringUtils.stringifyException(e));
        continue;
      }
catch (      IllegalAccessException e) {
        LOG.error("Unable to load plugin " + pluginName + ": "+ StringUtils.stringifyException(e));
        continue;
      }
catch (      InvocationTargetException e) {
        LOG.error("Unable to load plugin " + pluginName + ": "+ StringUtils.stringifyException(e));
        continue;
      }
      if (pluginLoader == null) {
        LOG.error("Unable to load plugin " + pluginName + ": pluginLoader is null");
        continue;
      }
      LOG.info("Successfully loaded plugin " + pluginName);
      tmpPluginList.put(pluginName,pluginLoader);
    }
  }
 catch (  IOException e) {
    LOG.error("Error while loading plugins: " + StringUtils.stringifyException(e));
  }
catch (  SAXException e) {
    LOG.error("Error while loading plugins: " + StringUtils.stringifyException(e));
  }
catch (  ParserConfigurationException e) {
    LOG.error("Error while loading plugins: " + StringUtils.stringifyException(e));
  }
  return Collections.unmodifiableMap(tmpPluginList);
}
