{
  assertTrue(cluster.getCurrentlyRunningJobsJava().isEmpty());
  final JobVertex sender=new JobVertex("Sender");
  sender.setParallelism(2);
  sender.setInvokableClass(StoppableInvokable.class);
  final JobGraph jobGraph=new JobGraph("Stoppable streaming test job",sender);
  final JobID jid=jobGraph.getJobID();
  cluster.submitJobDetached(jobGraph);
  while (cluster.getCurrentlyRunningJobsJava().isEmpty()) {
    Thread.sleep(10);
  }
  final FiniteDuration testTimeout=new FiniteDuration(2,TimeUnit.MINUTES);
  final Deadline deadline=testTimeout.fromNow();
  while (!cluster.getCurrentlyRunningJobsJava().isEmpty()) {
    try (HttpTestClient client=new HttpTestClient("localhost",port)){
      client.sendDeleteRequest("/jobs/" + jid + "/stop",deadline.timeLeft());
      HttpTestClient.SimpleHttpResponse response=client.getNextResponse(deadline.timeLeft());
      assertEquals(HttpResponseStatus.OK,response.getStatus());
      assertEquals(response.getType(),MimeTypes.getMimeTypeForExtension("json"));
      assertEquals("{}",response.getContent());
    }
     Thread.sleep(20);
  }
  try (HttpTestClient client=new HttpTestClient("localhost",port)){
    FiniteDuration timeout=new FiniteDuration(30,TimeUnit.SECONDS);
    client.sendGetRequest("/jobs/" + jid + "/config",timeout);
    HttpTestClient.SimpleHttpResponse response=client.getNextResponse(timeout);
    assertEquals(HttpResponseStatus.OK,response.getStatus());
    assertEquals(response.getType(),MimeTypes.getMimeTypeForExtension("json"));
    assertEquals("{\"jid\":\"" + jid + "\",\"name\":\"Stoppable streaming test job\","+ "\"execution-config\":{\"execution-mode\":\"PIPELINED\",\"restart-strategy\":\"default\","+ "\"job-parallelism\":-1,\"object-reuse-mode\":false}}",response.getContent());
  }
 }
