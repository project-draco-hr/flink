{
  NetworkTopology topology;
  try {
    topology=NetworkTopology.fromFile(getPathToTopologyFile());
  }
 catch (  IOException e) {
    fail(e.getMessage());
    return;
  }
  final NetworkNode node01=topology.getNodeByName("node01");
  final NetworkNode node02=topology.getNodeByName("node02");
  final NetworkNode node05=topology.getNodeByName("node05");
  final NetworkNode node11=topology.getNodeByName("node11");
  final NetworkNode rackswitch1=topology.getNodeByName("rackswitch1");
  final NetworkNode mainswitch1=topology.getNodeByName("mainswitch1");
  assertNotNull(node01);
  assertNotNull(node02);
  assertNotNull(node05);
  assertNotNull(node11);
  assertNotNull(rackswitch1);
  assertNotNull(mainswitch1);
  assertNull(topology.getNodeByName("nonexistant node"));
  assertEquals(0,node01.getDistance(node01));
  assertEquals(2,node01.getDistance(node02));
  assertEquals(4,node01.getDistance(node05));
  assertEquals(6,node01.getDistance(node11));
  assertEquals(1,node01.getDistance(rackswitch1));
  assertEquals(1,rackswitch1.getDistance(node01));
  assertEquals(2,mainswitch1.getDistance(node02));
  assertEquals(3,topology.getRootNode().getDistance(node11));
  final NetworkTopology otherTopology=new NetworkTopology();
  final NetworkNode nodeFromOtherTopology=new NetworkNode("node from other topology",otherTopology.getRootNode(),otherTopology);
  assertEquals(Integer.MAX_VALUE,node01.getDistance(nodeFromOtherTopology));
}
