{
  final ArithmeticExpression arithmetic=new ArithmeticExpression(new InputSelection(0),this.operator,new InputSelection(1));
  final IJsonNode result=arithmetic.evaluate(JsonUtil.asArray(JsonUtil.OBJECT_MAPPER.valueToTree(this.left),JsonUtil.OBJECT_MAPPER.valueToTree(this.right)),new EvaluationContext());
  final IJsonNode expectedNode=JsonUtil.OBJECT_MAPPER.valueToTree(this.expected);
  Assert.assertEquals(String.format("%s%s%s",this.left.getClass().getSimpleName(),this.operator,this.right.getClass().getSimpleName(),result.getType(),expectedNode.getType()),expectedNode.getType(),result.getType());
  if (expectedNode instanceof BigIntegerNode)   Assert.assertEquals(String.format("%s%s%s",this.left,this.operator,this.right,result,expectedNode),((BigIntegerNode)expectedNode).getBigIntegerValue(),((BigIntegerNode)result).getBigIntegerValue());
 else   if (expectedNode instanceof DecimalNode)   Assert.assertEquals(String.format("%s%s%s",this.left,this.operator,this.right,result,expectedNode),expectedNode,result);
 else   Assert.assertEquals(String.format("%s%s%s",this.left,this.operator,this.right,result,expectedNode),this.expected.doubleValue(),((INumericNode)result).getDoubleValue(),0.0001);
}
