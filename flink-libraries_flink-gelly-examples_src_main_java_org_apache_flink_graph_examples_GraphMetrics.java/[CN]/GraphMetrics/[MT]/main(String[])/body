{
  if (!parseParameters(args)) {
    return;
  }
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,NullValue,NullValue> graph=Graph.fromDataSet(getEdgesDataSet(env),env);
  long numVertices=graph.numberOfVertices();
  long numEdges=graph.numberOfEdges();
  DataSet<Tuple2<Long,LongValue>> verticesWithDegrees=graph.getDegrees();
  DataSet<Double> avgNodeDegree=verticesWithDegrees.aggregate(Aggregations.SUM,1).map(new AvgNodeDegreeMapper(numVertices));
  DataSet<Long> maxInDegreeVertex=graph.inDegrees().maxBy(1).map(new ProjectVertexId());
  DataSet<Long> minInDegreeVertex=graph.inDegrees().minBy(1).map(new ProjectVertexId());
  DataSet<Long> maxOutDegreeVertex=graph.outDegrees().maxBy(1).map(new ProjectVertexId());
  DataSet<Long> minOutDegreeVertex=graph.outDegrees().minBy(1).map(new ProjectVertexId());
  ExampleUtils.printResult(env.fromElements(numVertices),"Total number of vertices");
  ExampleUtils.printResult(env.fromElements(numEdges),"Total number of edges");
  ExampleUtils.printResult(avgNodeDegree,"Average node degree");
  ExampleUtils.printResult(maxInDegreeVertex,"Vertex with Max in-degree");
  ExampleUtils.printResult(minInDegreeVertex,"Vertex with Min in-degree");
  ExampleUtils.printResult(maxOutDegreeVertex,"Vertex with Max out-degree");
  ExampleUtils.printResult(minOutDegreeVertex,"Vertex with Min out-degree");
  env.execute();
}
