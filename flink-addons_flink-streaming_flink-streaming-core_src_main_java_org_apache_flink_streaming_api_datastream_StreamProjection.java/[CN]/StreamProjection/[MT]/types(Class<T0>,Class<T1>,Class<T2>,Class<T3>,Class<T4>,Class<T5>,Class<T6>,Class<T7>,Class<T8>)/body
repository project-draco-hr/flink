{
  Class<?>[] types={type0,type1,type2,type3,type4,type5,type6,type7,type8};
  if (types.length != this.fieldIndexes.length) {
    throw new IllegalArgumentException("Numbers of projected fields and types do not match.");
  }
  @SuppressWarnings("unchecked") TypeInformation<Tuple9<T0,T1,T2,T3,T4,T5,T6,T7,T8>> outType=(TypeInformation<Tuple9<T0,T1,T2,T3,T4,T5,T6,T7,T8>>)extractFieldTypes(fieldIndexes,types,inTypeInfo);
  return dataStream.transform("projection",outType,new ProjectInvokable<IN,Tuple9<T0,T1,T2,T3,T4,T5,T6,T7,T8>>(fieldIndexes,outType));
}
