{
  try {
    JobID jid=new JobID();
    JobVertex vertex=new JobVertex("vertex");
    vertex.setParallelism(1);
    SlotSharingGroup sharingGroup=new SlotSharingGroup(vertex.getID());
    SlotSharingGroupAssignment assignment=sharingGroup.getTaskAssignment();
    CoLocationGroup constraintGroup=new CoLocationGroup(vertex);
    CoLocationConstraint constraint=constraintGroup.getLocationConstraint(0);
    assertFalse(constraint.isAssigned());
    assertFalse(constraint.isAssignedAndAlive());
    Instance instance1=SchedulerTestUtils.getRandomInstance(2);
    Instance instance2=SchedulerTestUtils.getRandomInstance(2);
    SharedSlot slot1_1=instance1.allocateSharedSlot(jid,assignment);
    SharedSlot slot1_2=instance1.allocateSharedSlot(jid,assignment);
    SharedSlot slot2_1=instance2.allocateSharedSlot(jid,assignment);
    SharedSlot slot2_2=instance2.allocateSharedSlot(jid,assignment);
    assertFalse(constraint.isAssigned());
    assertFalse(constraint.isAssignedAndAlive());
    constraint.setSharedSlot(slot1_1);
    assertFalse(constraint.isAssigned());
    assertFalse(constraint.isAssignedAndAlive());
    try {
      constraint.getLocation();
      fail("should throw an IllegalStateException");
    }
 catch (    IllegalStateException e) {
    }
catch (    Exception e) {
      fail("wrong exception, should be IllegalStateException");
    }
    constraint.setSharedSlot(slot2_1);
    assertTrue(slot1_1.isReleased());
    assertFalse(constraint.isAssigned());
    assertFalse(constraint.isAssignedAndAlive());
    constraint.setSharedSlot(slot2_1);
    assertFalse(slot2_1.isReleased());
    assertFalse(constraint.isAssigned());
    assertFalse(constraint.isAssignedAndAlive());
    constraint.lockLocation();
    assertTrue(constraint.isAssigned());
    assertTrue(constraint.isAssignedAndAlive());
    assertEquals(instance2.getTaskManagerLocation(),constraint.getLocation());
    slot2_1.releaseSlot();
    assertTrue(constraint.isAssigned());
    assertFalse(constraint.isAssignedAndAlive());
    assertEquals(instance2.getTaskManagerLocation(),constraint.getLocation());
    try {
      constraint.setSharedSlot(slot1_2);
      fail("should throw an IllegalArgumentException");
    }
 catch (    IllegalArgumentException e) {
    }
catch (    Exception e) {
      fail("wrong exception, should be IllegalArgumentException");
    }
    constraint.setSharedSlot(slot2_2);
    assertTrue(constraint.isAssigned());
    assertTrue(constraint.isAssignedAndAlive());
    assertEquals(instance2.getTaskManagerLocation(),constraint.getLocation());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
