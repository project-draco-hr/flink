{
  final Deadline deadline=TestTimeout.fromNow();
  ActorSystem[] jobManagerSystem=new ActorSystem[2];
  WebRuntimeMonitor[] webMonitor=new WebRuntimeMonitor[2];
  List<LeaderRetrievalService> leaderRetrievalServices=new ArrayList<>();
  try (TestingServer zooKeeper=new TestingServer()){
    final Configuration config=ZooKeeperTestUtils.createZooKeeperRecoveryModeConfig(zooKeeper.getConnectString(),temporaryFolder.getRoot().getPath());
    File logDir=temporaryFolder.newFolder();
    Files.createFile(new File(logDir,"jobmanager.log").toPath());
    Files.createFile(new File(logDir,"jobmanager.out").toPath());
    config.setInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,0);
    config.setString(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY,logDir.getAbsolutePath());
    for (int i=0; i < jobManagerSystem.length; i++) {
      jobManagerSystem[i]=AkkaUtils.createActorSystem(new Configuration(),new Some<>(new Tuple2<String,Object>("localhost",0)));
    }
    for (int i=0; i < webMonitor.length; i++) {
      LeaderRetrievalService lrs=ZooKeeperUtils.createLeaderRetrievalService(config);
      leaderRetrievalServices.add(lrs);
      webMonitor[i]=new WebRuntimeMonitor(config,lrs,jobManagerSystem[i]);
    }
    ActorRef[] jobManager=new ActorRef[2];
    String[] jobManagerAddress=new String[2];
    for (int i=0; i < jobManager.length; i++) {
      Configuration jmConfig=config.clone();
      jmConfig.setInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,webMonitor[i].getServerPort());
      jobManager[i]=JobManager.startJobManagerActors(jmConfig,jobManagerSystem[i],StreamingMode.STREAMING,JobManager.class,MemoryArchivist.class)._1();
      jobManagerAddress[i]=AkkaUtils.getAkkaURL(jobManagerSystem[i],jobManager[i]);
      webMonitor[i].start(jobManagerAddress[i]);
    }
    LeaderRetrievalService lrs=ZooKeeperUtils.createLeaderRetrievalService(config);
    leaderRetrievalServices.add(lrs);
    TestingListener leaderListener=new TestingListener();
    lrs.start(leaderListener);
    leaderListener.waitForNewLeader(deadline.timeLeft().toMillis());
    String leaderAddress=leaderListener.getAddress();
    int leaderIndex=leaderAddress.equals(jobManagerAddress[0]) ? 0 : 1;
    int followerIndex=(leaderIndex + 1) % 2;
    ActorSystem leadingSystem=jobManagerSystem[leaderIndex];
    ActorSystem followerSystem=jobManagerSystem[followerIndex];
    WebMonitor leadingWebMonitor=webMonitor[leaderIndex];
    WebMonitor followerWebMonitor=webMonitor[followerIndex];
    JobManagerRetriever leadingRetriever=Whitebox.getInternalState(leadingWebMonitor,"retriever");
    JobManagerRetriever followerRetriever=Whitebox.getInternalState(followerWebMonitor,"retriever");
    waitForLeaderNotification(leadingSystem,jobManager[leaderIndex],leadingRetriever,deadline);
    waitForLeaderNotification(leadingSystem,jobManager[leaderIndex],followerRetriever,deadline);
    try (HttpTestClient leaderClient=new HttpTestClient("localhost",leadingWebMonitor.getServerPort());HttpTestClient followingClient=new HttpTestClient("localhost",followerWebMonitor.getServerPort())){
      String expected=new Scanner(new File(MAIN_RESOURCES_PATH + "/index.html")).useDelimiter("\\A").next();
      leaderClient.sendGetRequest("index.html",deadline.timeLeft());
      HttpTestClient.SimpleHttpResponse response=leaderClient.getNextResponse(deadline.timeLeft());
      assertEquals(HttpResponseStatus.OK,response.getStatus());
      assertEquals(response.getType(),MimeTypes.getMimeTypeForExtension("html"));
      assertEquals(expected,response.getContent());
      followingClient.sendGetRequest("index.html",deadline.timeLeft());
      response=followingClient.getNextResponse(deadline.timeLeft());
      assertEquals(HttpResponseStatus.TEMPORARY_REDIRECT,response.getStatus());
      assertTrue(response.getLocation().contains("" + leadingWebMonitor.getServerPort()));
      leadingSystem.shutdown();
      waitForLeaderNotification(followerSystem,jobManager[followerIndex],followerRetriever,deadline);
      followingClient.sendGetRequest("index.html",deadline.timeLeft());
      response=followingClient.getNextResponse(deadline.timeLeft());
      assertEquals(HttpResponseStatus.OK,response.getStatus());
      assertEquals(response.getType(),MimeTypes.getMimeTypeForExtension("html"));
      assertEquals(expected,response.getContent());
      followingClient.sendGetRequest("/overview",deadline.timeLeft());
      response=followingClient.getNextResponse(deadline.timeLeft());
      assertEquals(HttpResponseStatus.OK,response.getStatus());
      assertEquals(response.getType(),MimeTypes.getMimeTypeForExtension("json"));
      assertTrue(response.getContent().contains("\"taskmanagers\":1") || response.getContent().contains("\"taskmanagers\":0"));
    }
   }
  finally {
    for (    ActorSystem system : jobManagerSystem) {
      if (system != null) {
        system.shutdown();
      }
    }
    for (    WebMonitor monitor : webMonitor) {
      monitor.stop();
    }
    for (    LeaderRetrievalService lrs : leaderRetrievalServices) {
      lrs.stop();
    }
  }
}
