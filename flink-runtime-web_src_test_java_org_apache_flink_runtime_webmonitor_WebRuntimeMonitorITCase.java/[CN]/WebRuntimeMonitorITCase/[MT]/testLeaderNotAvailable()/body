{
  final Deadline deadline=TestTimeout.fromNow();
  ActorSystem actorSystem=null;
  WebRuntimeMonitor webRuntimeMonitor=null;
  try (TestingServer zooKeeper=new TestingServer()){
    final Configuration config=new Configuration();
    config.setString(WebMonitorConfig.JOB_MANAGER_WEB_DOC_ROOT_KEY,MAIN_RESOURCES_PATH);
    config.setBoolean(ConfigConstants.JOB_MANAGER_NEW_WEB_FRONTEND_KEY,true);
    config.setInteger(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,0);
    config.setString(ConfigConstants.RECOVERY_MODE,"ZOOKEEPER");
    config.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY,zooKeeper.getConnectString());
    actorSystem=AkkaUtils.createDefaultActorSystem();
    LeaderRetrievalService leaderRetrievalService=mock(LeaderRetrievalService.class);
    webRuntimeMonitor=new WebRuntimeMonitor(config,leaderRetrievalService,actorSystem);
    webRuntimeMonitor.start("akka://schmakka");
    try (HttpTestClient client=new HttpTestClient("localhost",webRuntimeMonitor.getServerPort())){
      client.sendGetRequest("index.html",deadline.timeLeft());
      HttpTestClient.SimpleHttpResponse response=client.getNextResponse();
      assertEquals(HttpResponseStatus.SERVICE_UNAVAILABLE,response.getStatus());
      assertEquals(MimeTypes.getMimeTypeForExtension("txt"),response.getType());
      assertTrue(response.getContent().contains("refresh"));
    }
   }
  finally {
    if (actorSystem != null) {
      actorSystem.shutdown();
    }
    if (webRuntimeMonitor != null) {
      webRuntimeMonitor.stop();
    }
  }
}
