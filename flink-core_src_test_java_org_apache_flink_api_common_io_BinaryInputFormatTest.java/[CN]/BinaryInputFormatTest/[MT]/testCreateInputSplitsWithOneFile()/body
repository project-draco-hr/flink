{
  final File tempFile=File.createTempFile("binary_input_format_test","tmp");
  tempFile.deleteOnExit();
  final int blockInfoSize=new BlockInfo().getInfoSize();
  final int blockSize=blockInfoSize + 8;
  final int numBlocks=3;
  FileOutputStream fileOutputStream=new FileOutputStream(tempFile);
  for (int i=0; i < blockSize * numBlocks; i++) {
    fileOutputStream.write(new byte[]{1});
  }
  fileOutputStream.close();
  final Configuration config=new Configuration();
  config.setLong("input.block_size",blockSize + 10);
  final BinaryInputFormat<Record> inputFormat=new MyBinaryInputFormat();
  inputFormat.setFilePath(tempFile.toURI().toString());
  inputFormat.setBlockSize(blockSize);
  inputFormat.configure(config);
  FileInputSplit[] inputSplits=inputFormat.createInputSplits(numBlocks);
  Assert.assertEquals("Returns requested numbers of splits.",numBlocks,inputSplits.length);
  Assert.assertEquals("1. split has block size length.",blockSize,inputSplits[0].getLength());
  Assert.assertEquals("2. split has block size length.",blockSize,inputSplits[1].getLength());
  Assert.assertEquals("3. split has block size length.",blockSize,inputSplits[2].getLength());
}
