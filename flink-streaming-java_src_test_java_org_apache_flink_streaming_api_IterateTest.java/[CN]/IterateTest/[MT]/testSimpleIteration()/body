{
  int numRetries=5;
  int timeoutScale=1;
  for (int numRetry=0; numRetry < numRetries; numRetry++) {
    try {
      StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
      iterated=new boolean[DEFAULT_PARALLELISM];
      DataStream<Boolean> source=env.fromCollection(Collections.nCopies(DEFAULT_PARALLELISM * 2,false)).map(NoOpBoolMap).name("ParallelizeMap");
      IterativeStream<Boolean> iteration=source.iterate(3000 * timeoutScale);
      DataStream<Boolean> increment=iteration.flatMap(new IterationHead()).map(NoOpBoolMap);
      iteration.map(NoOpBoolMap).addSink(new ReceiveCheckNoOpSink());
      iteration.closeWith(increment).addSink(new ReceiveCheckNoOpSink());
      env.execute();
      for (      boolean iter : iterated) {
        assertTrue(iter);
      }
      break;
    }
 catch (    Throwable t) {
      LOG.info("Run " + (numRetry + 1) + "/"+ numRetries+ " failed",t);
      if (numRetry >= numRetries - 1) {
        throw t;
      }
 else {
        timeoutScale*=2;
      }
    }
  }
}
