{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(2);
  DataStream<String> otherSource=env.fromElements("1000","2000").map(NoOpStrMap).name("ParallelizeMap");
  ConnectedIterativeStreams<Integer,String> coIt=env.fromElements(0,0).map(NoOpIntMap).name("ParallelizeMap").iterate(2000).withFeedbackType("String");
  try {
    coIt.keyBy(1,2);
    fail();
  }
 catch (  InvalidProgramException e) {
  }
  DataStream<String> head=coIt.flatMap(new RichCoFlatMapFunction<Integer,String,String>(){
    private static final long serialVersionUID=1L;
    boolean seenFromSource=false;
    @Override public void flatMap1(    Integer value,    Collector<String> out) throws Exception {
      out.collect(((Integer)(value + 1)).toString());
    }
    @Override public void flatMap2(    String value,    Collector<String> out) throws Exception {
      Integer intVal=Integer.valueOf(value);
      if (intVal < 2) {
        out.collect(((Integer)(intVal + 1)).toString());
      }
      if (intVal == 1000 || intVal == 2000) {
        seenFromSource=true;
      }
    }
    @Override public void close(){
      assertTrue(seenFromSource);
    }
  }
);
  coIt.map(new CoMapFunction<Integer,String,String>(){
    @Override public String map1(    Integer value) throws Exception {
      return value.toString();
    }
    @Override public String map2(    String value) throws Exception {
      return value;
    }
  }
).addSink(new ReceiveCheckNoOpSink<String>());
  coIt.closeWith(head.broadcast().union(otherSource));
  head.addSink(new TestSink()).setParallelism(1);
  assertEquals(1,env.getStreamGraph().getIterationSourceSinkPairs().size());
  env.execute();
  Collections.sort(TestSink.collected);
  assertEquals(Arrays.asList("1","1","2","2","2","2"),TestSink.collected);
}
