{
  JaqlTree.methodCalls_return retval=new JaqlTree.methodCalls_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree OBJECT_EXPR17=null;
  CommonTree VAR18=null;
  CommonTree FUNCTION_CALL19=null;
  CommonTree OBJECT_EXPR20=null;
  CommonTree VAR21=null;
  CommonTree FUNCTION_CALL22=null;
  CommonTree accesses=null;
  CommonTree name=null;
  CommonTree params=null;
  CommonTree OBJECT_EXPR17_tree=null;
  CommonTree VAR18_tree=null;
  CommonTree FUNCTION_CALL19_tree=null;
  CommonTree OBJECT_EXPR20_tree=null;
  CommonTree VAR21_tree=null;
  CommonTree FUNCTION_CALL22_tree=null;
  CommonTree accesses_tree=null;
  CommonTree name_tree=null;
  CommonTree params_tree=null;
  RewriteRuleNodeStream stream_VAR=new RewriteRuleNodeStream(adaptor,"token VAR");
  RewriteRuleNodeStream stream_OBJECT_EXPR=new RewriteRuleNodeStream(adaptor,"token OBJECT_EXPR");
  RewriteRuleNodeStream stream_FUNCTION_CALL=new RewriteRuleNodeStream(adaptor,"token FUNCTION_CALL");
  try {
    int alt11=2;
    alt11=dfa11.predict(input);
switch (alt11) {
case 1:
{
        _last=(CommonTree)input.LT(1);
{
          CommonTree _save_last_1=_last;
          CommonTree _first_1=null;
          _last=(CommonTree)input.LT(1);
          OBJECT_EXPR17=(CommonTree)match(input,OBJECT_EXPR,FOLLOW_OBJECT_EXPR_in_methodCalls206);
          if (state.failed)           return retval;
          if (state.backtracking == 1)           stream_OBJECT_EXPR.add(OBJECT_EXPR17);
          if (state.backtracking == 1)           if (_first_0 == null)           _first_0=OBJECT_EXPR17;
          match(input,Token.DOWN,null);
          if (state.failed)           return retval;
          _last=(CommonTree)input.LT(1);
          VAR18=(CommonTree)match(input,VAR,FOLLOW_VAR_in_methodCalls208);
          if (state.failed)           return retval;
          if (state.backtracking == 1)           stream_VAR.add(VAR18);
          int cnt8=0;
          loop8:           do {
            int alt8=2;
            alt8=dfa8.predict(input);
switch (alt8) {
case 1:
{
                _last=(CommonTree)input.LT(1);
                accesses=(CommonTree)input.LT(1);
                matchAny(input);
                if (state.failed)                 return retval;
                if (state.backtracking == 1)                 if (_first_1 == null)                 _first_1=accesses;
                if (state.backtracking == 1) {
                  retval.tree=(CommonTree)_first_0;
                  if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree)))                   retval.tree=(CommonTree)adaptor.getParent(retval.tree);
                }
              }
            break;
default :
          if (cnt8 >= 1)           break loop8;
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
      EarlyExitException eee=new EarlyExitException(8,input);
    throw eee;
}
cnt8++;
}
 while (true);
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_2=_last;
CommonTree _first_2=null;
_last=(CommonTree)input.LT(1);
FUNCTION_CALL19=(CommonTree)match(input,FUNCTION_CALL,FOLLOW_FUNCTION_CALL_in_methodCalls216);
if (state.failed) return retval;
if (state.backtracking == 1) stream_FUNCTION_CALL.add(FUNCTION_CALL19);
if (state.backtracking == 1) if (_first_1 == null) _first_1=FUNCTION_CALL19;
match(input,Token.DOWN,null);
if (state.failed) return retval;
_last=(CommonTree)input.LT(1);
name=(CommonTree)input.LT(1);
matchAny(input);
if (state.failed) return retval;
if (state.backtracking == 1) if (_first_2 == null) _first_2=name;
loop9: do {
  int alt9=2;
  int LA9_0=input.LA(1);
  if (((LA9_0 >= SCRIPT && LA9_0 <= 66))) {
    alt9=1;
  }
switch (alt9) {
case 1:
{
      _last=(CommonTree)input.LT(1);
      params=(CommonTree)input.LT(1);
      matchAny(input);
      if (state.failed)       return retval;
      if (state.backtracking == 1)       if (_first_2 == null)       _first_2=params;
      if (state.backtracking == 1) {
        retval.tree=(CommonTree)_first_0;
        if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree)))         retval.tree=(CommonTree)adaptor.getParent(retval.tree);
      }
    }
  break;
default :
break loop9;
}
}
 while (true);
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_2;
}
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_accesses=new RewriteRuleSubtreeStream(adaptor,"wildcard accesses",accesses);
RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"wildcard name",name);
RewriteRuleSubtreeStream stream_params=new RewriteRuleSubtreeStream(adaptor,"wildcard params",params);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL,"METHOD_CALL"),root_1);
{
CommonTree root_2=(CommonTree)adaptor.nil();
root_2=(CommonTree)adaptor.becomeRoot(stream_OBJECT_EXPR.nextNode(),root_2);
adaptor.addChild(root_2,stream_VAR.nextNode());
adaptor.addChild(root_2,stream_accesses.nextTree());
adaptor.addChild(root_1,root_2);
}
adaptor.addChild(root_1,stream_name.nextTree());
adaptor.addChild(root_1,stream_params.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
case 2:
{
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_1=_last;
CommonTree _first_1=null;
_last=(CommonTree)input.LT(1);
OBJECT_EXPR20=(CommonTree)match(input,OBJECT_EXPR,FOLLOW_OBJECT_EXPR_in_methodCalls254);
if (state.failed) return retval;
if (state.backtracking == 1) stream_OBJECT_EXPR.add(OBJECT_EXPR20);
if (state.backtracking == 1) if (_first_0 == null) _first_0=OBJECT_EXPR20;
match(input,Token.DOWN,null);
if (state.failed) return retval;
_last=(CommonTree)input.LT(1);
VAR21=(CommonTree)match(input,VAR,FOLLOW_VAR_in_methodCalls256);
if (state.failed) return retval;
if (state.backtracking == 1) stream_VAR.add(VAR21);
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_2=_last;
CommonTree _first_2=null;
_last=(CommonTree)input.LT(1);
FUNCTION_CALL22=(CommonTree)match(input,FUNCTION_CALL,FOLLOW_FUNCTION_CALL_in_methodCalls259);
if (state.failed) return retval;
if (state.backtracking == 1) stream_FUNCTION_CALL.add(FUNCTION_CALL22);
if (state.backtracking == 1) if (_first_1 == null) _first_1=FUNCTION_CALL22;
match(input,Token.DOWN,null);
if (state.failed) return retval;
_last=(CommonTree)input.LT(1);
name=(CommonTree)input.LT(1);
matchAny(input);
if (state.failed) return retval;
if (state.backtracking == 1) if (_first_2 == null) _first_2=name;
loop10: do {
int alt10=2;
int LA10_0=input.LA(1);
if (((LA10_0 >= SCRIPT && LA10_0 <= 66))) {
alt10=1;
}
switch (alt10) {
case 1:
{
_last=(CommonTree)input.LT(1);
params=(CommonTree)input.LT(1);
matchAny(input);
if (state.failed) return retval;
if (state.backtracking == 1) if (_first_2 == null) _first_2=params;
if (state.backtracking == 1) {
retval.tree=(CommonTree)_first_0;
if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree))) retval.tree=(CommonTree)adaptor.getParent(retval.tree);
}
}
break;
default :
break loop10;
}
}
 while (true);
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_2;
}
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"wildcard name",name);
RewriteRuleSubtreeStream stream_params=new RewriteRuleSubtreeStream(adaptor,"wildcard params",params);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL,"METHOD_CALL"),root_1);
adaptor.addChild(root_1,stream_name.nextTree());
adaptor.addChild(root_1,stream_params.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
