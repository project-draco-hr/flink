{
  JaqlTree.arrayAccess_return retval=new JaqlTree.arrayAccess_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree OBJECT_EXPR11=null;
  CommonTree VAR12=null;
  CommonTree ARRAY_ACCESS13=null;
  CommonTree OBJECT_EXPR14=null;
  CommonTree VAR15=null;
  CommonTree ARRAY_ACCESS16=null;
  CommonTree accesses=null;
  CommonTree qualifier=null;
  CommonTree OBJECT_EXPR11_tree=null;
  CommonTree VAR12_tree=null;
  CommonTree ARRAY_ACCESS13_tree=null;
  CommonTree OBJECT_EXPR14_tree=null;
  CommonTree VAR15_tree=null;
  CommonTree ARRAY_ACCESS16_tree=null;
  CommonTree accesses_tree=null;
  CommonTree qualifier_tree=null;
  RewriteRuleNodeStream stream_VAR=new RewriteRuleNodeStream(adaptor,"token VAR");
  RewriteRuleNodeStream stream_ARRAY_ACCESS=new RewriteRuleNodeStream(adaptor,"token ARRAY_ACCESS");
  RewriteRuleNodeStream stream_OBJECT_EXPR=new RewriteRuleNodeStream(adaptor,"token OBJECT_EXPR");
  try {
    int alt7=2;
    alt7=dfa7.predict(input);
switch (alt7) {
case 1:
{
        _last=(CommonTree)input.LT(1);
{
          CommonTree _save_last_1=_last;
          CommonTree _first_1=null;
          _last=(CommonTree)input.LT(1);
          OBJECT_EXPR11=(CommonTree)match(input,OBJECT_EXPR,FOLLOW_OBJECT_EXPR_in_arrayAccess132);
          if (state.failed)           return retval;
          if (state.backtracking == 1)           stream_OBJECT_EXPR.add(OBJECT_EXPR11);
          if (state.backtracking == 1)           if (_first_0 == null)           _first_0=OBJECT_EXPR11;
          match(input,Token.DOWN,null);
          if (state.failed)           return retval;
          _last=(CommonTree)input.LT(1);
          VAR12=(CommonTree)match(input,VAR,FOLLOW_VAR_in_arrayAccess134);
          if (state.failed)           return retval;
          if (state.backtracking == 1)           stream_VAR.add(VAR12);
          int cnt4=0;
          loop4:           do {
            int alt4=2;
            alt4=dfa4.predict(input);
switch (alt4) {
case 1:
{
                _last=(CommonTree)input.LT(1);
                accesses=(CommonTree)input.LT(1);
                matchAny(input);
                if (state.failed)                 return retval;
                if (state.backtracking == 1)                 if (_first_1 == null)                 _first_1=accesses;
                if (state.backtracking == 1) {
                  retval.tree=(CommonTree)_first_0;
                  if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree)))                   retval.tree=(CommonTree)adaptor.getParent(retval.tree);
                }
              }
            break;
default :
          if (cnt4 >= 1)           break loop4;
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
      EarlyExitException eee=new EarlyExitException(4,input);
    throw eee;
}
cnt4++;
}
 while (true);
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_2=_last;
CommonTree _first_2=null;
_last=(CommonTree)input.LT(1);
ARRAY_ACCESS13=(CommonTree)match(input,ARRAY_ACCESS,FOLLOW_ARRAY_ACCESS_in_arrayAccess142);
if (state.failed) return retval;
if (state.backtracking == 1) stream_ARRAY_ACCESS.add(ARRAY_ACCESS13);
if (state.backtracking == 1) if (_first_1 == null) _first_1=ARRAY_ACCESS13;
match(input,Token.DOWN,null);
if (state.failed) return retval;
int cnt5=0;
loop5: do {
  int alt5=2;
  int LA5_0=input.LA(1);
  if (((LA5_0 >= SCRIPT && LA5_0 <= 66))) {
    alt5=1;
  }
switch (alt5) {
case 1:
{
      _last=(CommonTree)input.LT(1);
      qualifier=(CommonTree)input.LT(1);
      matchAny(input);
      if (state.failed)       return retval;
      if (state.backtracking == 1)       if (_first_2 == null)       _first_2=qualifier;
      if (state.backtracking == 1) {
        retval.tree=(CommonTree)_first_0;
        if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree)))         retval.tree=(CommonTree)adaptor.getParent(retval.tree);
      }
    }
  break;
default :
if (cnt5 >= 1) break loop5;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(5,input);
throw eee;
}
cnt5++;
}
 while (true);
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_2;
}
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_accesses=new RewriteRuleSubtreeStream(adaptor,"wildcard accesses",accesses);
RewriteRuleSubtreeStream stream_qualifier=new RewriteRuleSubtreeStream(adaptor,"wildcard qualifier",qualifier);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot(stream_ARRAY_ACCESS.nextNode(),root_1);
{
CommonTree root_2=(CommonTree)adaptor.nil();
root_2=(CommonTree)adaptor.becomeRoot(stream_OBJECT_EXPR.nextNode(),root_2);
adaptor.addChild(root_2,stream_VAR.nextNode());
adaptor.addChild(root_2,stream_accesses.nextTree());
adaptor.addChild(root_1,root_2);
}
adaptor.addChild(root_1,stream_qualifier.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
case 2:
{
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_1=_last;
CommonTree _first_1=null;
_last=(CommonTree)input.LT(1);
OBJECT_EXPR14=(CommonTree)match(input,OBJECT_EXPR,FOLLOW_OBJECT_EXPR_in_arrayAccess173);
if (state.failed) return retval;
if (state.backtracking == 1) stream_OBJECT_EXPR.add(OBJECT_EXPR14);
if (state.backtracking == 1) if (_first_0 == null) _first_0=OBJECT_EXPR14;
match(input,Token.DOWN,null);
if (state.failed) return retval;
_last=(CommonTree)input.LT(1);
VAR15=(CommonTree)match(input,VAR,FOLLOW_VAR_in_arrayAccess175);
if (state.failed) return retval;
if (state.backtracking == 1) stream_VAR.add(VAR15);
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_2=_last;
CommonTree _first_2=null;
_last=(CommonTree)input.LT(1);
ARRAY_ACCESS16=(CommonTree)match(input,ARRAY_ACCESS,FOLLOW_ARRAY_ACCESS_in_arrayAccess178);
if (state.failed) return retval;
if (state.backtracking == 1) stream_ARRAY_ACCESS.add(ARRAY_ACCESS16);
if (state.backtracking == 1) if (_first_1 == null) _first_1=ARRAY_ACCESS16;
match(input,Token.DOWN,null);
if (state.failed) return retval;
int cnt6=0;
loop6: do {
int alt6=2;
int LA6_0=input.LA(1);
if (((LA6_0 >= SCRIPT && LA6_0 <= 66))) {
alt6=1;
}
switch (alt6) {
case 1:
{
_last=(CommonTree)input.LT(1);
qualifier=(CommonTree)input.LT(1);
matchAny(input);
if (state.failed) return retval;
if (state.backtracking == 1) if (_first_2 == null) _first_2=qualifier;
if (state.backtracking == 1) {
retval.tree=(CommonTree)_first_0;
if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree))) retval.tree=(CommonTree)adaptor.getParent(retval.tree);
}
}
break;
default :
if (cnt6 >= 1) break loop6;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(6,input);
throw eee;
}
cnt6++;
}
 while (true);
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_2;
}
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_qualifier=new RewriteRuleSubtreeStream(adaptor,"wildcard qualifier",qualifier);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot(stream_ARRAY_ACCESS.nextNode(),root_1);
adaptor.addChild(root_1,stream_VAR.nextNode());
adaptor.addChild(root_1,stream_qualifier.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
