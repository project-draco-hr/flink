{
  JaqlTree.fieldAccess_return retval=new JaqlTree.fieldAccess_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree OBJECT_EXPR5=null;
  CommonTree VAR6=null;
  CommonTree ID7=null;
  CommonTree OBJECT_EXPR8=null;
  CommonTree VAR9=null;
  CommonTree ID10=null;
  CommonTree accesses=null;
  CommonTree OBJECT_EXPR5_tree=null;
  CommonTree VAR6_tree=null;
  CommonTree ID7_tree=null;
  CommonTree OBJECT_EXPR8_tree=null;
  CommonTree VAR9_tree=null;
  CommonTree ID10_tree=null;
  CommonTree accesses_tree=null;
  RewriteRuleNodeStream stream_VAR=new RewriteRuleNodeStream(adaptor,"token VAR");
  RewriteRuleNodeStream stream_OBJECT_EXPR=new RewriteRuleNodeStream(adaptor,"token OBJECT_EXPR");
  RewriteRuleNodeStream stream_ID=new RewriteRuleNodeStream(adaptor,"token ID");
  try {
    int alt3=2;
    int LA3_0=input.LA(1);
    if ((LA3_0 == OBJECT_EXPR)) {
      int LA3_1=input.LA(2);
      if ((LA3_1 == DOWN)) {
        int LA3_2=input.LA(3);
        if ((LA3_2 == VAR)) {
          int LA3_3=input.LA(4);
          if ((LA3_3 == ID)) {
            int LA3_4=input.LA(5);
            if ((LA3_4 == UP)) {
              alt3=2;
            }
 else             if ((LA3_4 == DOWN || (LA3_4 >= SCRIPT && LA3_4 <= 66))) {
              alt3=1;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("",3,4,input);
              throw nvae;
            }
          }
 else           if (((LA3_3 >= SCRIPT && LA3_3 <= ARROW) || (LA3_3 >= INTEGER && LA3_3 <= 66))) {
            alt3=1;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",3,3,input);
            throw nvae;
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",3,2,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",3,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",3,0,input);
      throw nvae;
    }
switch (alt3) {
case 1:
{
        _last=(CommonTree)input.LT(1);
{
          CommonTree _save_last_1=_last;
          CommonTree _first_1=null;
          _last=(CommonTree)input.LT(1);
          OBJECT_EXPR5=(CommonTree)match(input,OBJECT_EXPR,FOLLOW_OBJECT_EXPR_in_fieldAccess74);
          if (state.failed)           return retval;
          if (state.backtracking == 1)           stream_OBJECT_EXPR.add(OBJECT_EXPR5);
          if (state.backtracking == 1)           if (_first_0 == null)           _first_0=OBJECT_EXPR5;
          match(input,Token.DOWN,null);
          if (state.failed)           return retval;
          _last=(CommonTree)input.LT(1);
          VAR6=(CommonTree)match(input,VAR,FOLLOW_VAR_in_fieldAccess76);
          if (state.failed)           return retval;
          if (state.backtracking == 1)           stream_VAR.add(VAR6);
          int cnt2=0;
          loop2:           do {
            int alt2=2;
            int LA2_0=input.LA(1);
            if ((LA2_0 == ID)) {
              int LA2_1=input.LA(2);
              if ((LA2_1 == DOWN || (LA2_1 >= SCRIPT && LA2_1 <= 66))) {
                alt2=1;
              }
            }
 else             if (((LA2_0 >= SCRIPT && LA2_0 <= ARROW) || (LA2_0 >= INTEGER && LA2_0 <= 66))) {
              alt2=1;
            }
switch (alt2) {
case 1:
{
                _last=(CommonTree)input.LT(1);
                accesses=(CommonTree)input.LT(1);
                matchAny(input);
                if (state.failed)                 return retval;
                if (state.backtracking == 1)                 if (_first_1 == null)                 _first_1=accesses;
                if (state.backtracking == 1) {
                  retval.tree=(CommonTree)_first_0;
                  if (adaptor.getParent(retval.tree) != null && adaptor.isNil(adaptor.getParent(retval.tree)))                   retval.tree=(CommonTree)adaptor.getParent(retval.tree);
                }
              }
            break;
default :
          if (cnt2 >= 1)           break loop2;
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
      EarlyExitException eee=new EarlyExitException(2,input);
    throw eee;
}
cnt2++;
}
 while (true);
_last=(CommonTree)input.LT(1);
ID7=(CommonTree)match(input,ID,FOLLOW_ID_in_fieldAccess83);
if (state.failed) return retval;
if (state.backtracking == 1) stream_ID.add(ID7);
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_accesses=new RewriteRuleSubtreeStream(adaptor,"wildcard accesses",accesses);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
  CommonTree root_1=(CommonTree)adaptor.nil();
  root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIELD,"FIELD"),root_1);
{
    CommonTree root_2=(CommonTree)adaptor.nil();
    root_2=(CommonTree)adaptor.becomeRoot(stream_OBJECT_EXPR.nextNode(),root_2);
    adaptor.addChild(root_2,stream_VAR.nextNode());
    adaptor.addChild(root_2,stream_accesses.nextTree());
    adaptor.addChild(root_1,root_2);
  }
  adaptor.addChild(root_1,stream_ID.nextNode());
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
case 2:
{
_last=(CommonTree)input.LT(1);
{
CommonTree _save_last_1=_last;
CommonTree _first_1=null;
_last=(CommonTree)input.LT(1);
OBJECT_EXPR8=(CommonTree)match(input,OBJECT_EXPR,FOLLOW_OBJECT_EXPR_in_fieldAccess107);
if (state.failed) return retval;
if (state.backtracking == 1) stream_OBJECT_EXPR.add(OBJECT_EXPR8);
if (state.backtracking == 1) if (_first_0 == null) _first_0=OBJECT_EXPR8;
match(input,Token.DOWN,null);
if (state.failed) return retval;
_last=(CommonTree)input.LT(1);
VAR9=(CommonTree)match(input,VAR,FOLLOW_VAR_in_fieldAccess109);
if (state.failed) return retval;
if (state.backtracking == 1) stream_VAR.add(VAR9);
_last=(CommonTree)input.LT(1);
ID10=(CommonTree)match(input,ID,FOLLOW_ID_in_fieldAccess111);
if (state.failed) return retval;
if (state.backtracking == 1) stream_ID.add(ID10);
match(input,Token.UP,null);
if (state.failed) return retval;
_last=_save_last_1;
}
if (state.backtracking == 1) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIELD,"FIELD"),root_1);
adaptor.addChild(root_1,stream_VAR.nextNode());
adaptor.addChild(root_1,stream_ID.nextNode());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
input.replaceChildren(adaptor.getParent(retval.start),adaptor.getChildIndex(retval.start),adaptor.getChildIndex(_last),retval.tree);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
