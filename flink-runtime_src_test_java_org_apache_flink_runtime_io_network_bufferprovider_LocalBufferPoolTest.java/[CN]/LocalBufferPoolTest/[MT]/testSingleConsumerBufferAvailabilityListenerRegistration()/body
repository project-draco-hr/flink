{
  final LocalBufferPool bufferPool=new LocalBufferPool(GLOBAL_BUFFER_POOL,NUM_BUFFERS);
  BufferAvailabilityListener listener=mock(BufferAvailabilityListener.class);
  doAnswer(RECYCLING_BUFFER_AVAILABLE_ANSWER).when(listener).bufferAvailable(Matchers.<Buffer>anyObject());
  Buffer[] requestedBuffers=new Buffer[NUM_BUFFERS];
  for (int i=0; i < NUM_BUFFERS; i++) {
    requestedBuffers[i]=bufferPool.requestBuffer(BUFFER_SIZE);
  }
  BufferAvailabilityRegistration registration;
  registration=bufferPool.registerBufferAvailabilityListener(listener);
  Assert.assertEquals(BufferAvailabilityRegistration.SUCCEEDED_REGISTERED,registration);
  requestedBuffers[0].recycleBuffer();
  verify(listener,times(1)).bufferAvailable(Matchers.<Buffer>anyObject());
  Assert.assertEquals("Expected single available buffer after recycle call in mock listener.",1,bufferPool.numAvailableBuffers());
  registration=bufferPool.registerBufferAvailabilityListener(listener);
  Assert.assertEquals(BufferAvailabilityRegistration.FAILED_BUFFER_AVAILABLE,registration);
  Buffer buffer=bufferPool.requestBuffer(BUFFER_SIZE);
  Assert.assertNotNull(buffer);
  buffer.recycleBuffer();
  bufferPool.destroy();
  registration=bufferPool.registerBufferAvailabilityListener(listener);
  Assert.assertEquals(BufferAvailabilityRegistration.FAILED_BUFFER_POOL_DESTROYED,registration);
  for (int i=1; i < requestedBuffers.length; i++) {
    requestedBuffers[i].recycleBuffer();
  }
}
