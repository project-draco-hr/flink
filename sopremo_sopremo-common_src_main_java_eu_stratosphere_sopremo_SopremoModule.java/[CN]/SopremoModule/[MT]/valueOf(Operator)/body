{
  final List<Operator> inputs=new ArrayList<Operator>();
  OneTimeTraverser.INSTANCE.traverse(sinks,OperatorNavigator.INSTANCE,new GraphTraverseListener<Operator>(){
    @Override public void nodeTraversed(    Operator node){
      if (node instanceof Source)       inputs.add(node);
 else       for (      Operator.Output output : node.getInputs())       if (output == null)       inputs.add(node);
    }
  }
);
  SopremoModule module=new SopremoModule(inputs.size(),sinks.length);
  for (int index=0; index < sinks.length; index++)   if (sinks[index] instanceof Sink)   module.outputNodes[index]=(Sink)sinks[index];
 else   module.getOutput(index).setInput(0,sinks[index]);
  for (int operatorIndex=0, moduleIndex=0; operatorIndex < inputs.size(); operatorIndex++) {
    Operator operator=inputs.get(operatorIndex);
    List<Output> operatorInputs=operator.getInputs();
    for (int inputIndex=0; inputIndex < sinks.length; inputIndex++)     if (operatorInputs.get(inputIndex) == null)     operatorInputs.set(inputIndex,module.getInput(moduleIndex++).getOutput(0));
    operator.setInputs(operatorInputs);
  }
  return module;
}
