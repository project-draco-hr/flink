{
  if (plans.size() == 1) {
    return;
  }
  if (this.openBranches == null) {
    prunePlansWithCommonBranchAlternatives(plans);
  }
 else {
    List<T> result=new ArrayList<T>();
    List<T> turn=new ArrayList<T>();
    while (!plans.isEmpty()) {
      turn.clear();
      T determiner=plans.remove(plans.size() - 1);
      turn.add(determiner);
      for (int k=plans.size() - 1; k >= 0; k--) {
        boolean equal=true;
        T toCheck=plans.get(k);
        for (int b=0; b < this.openBranches.size(); b++) {
          OptimizerNode brancher=this.openBranches.get(b).branchingNode;
          OptimizerNode cand1=determiner.branchPlan.get(brancher);
          OptimizerNode cand2=toCheck.branchPlan.get(brancher);
          if (cand1 != cand2) {
            equal=false;
            break;
          }
        }
        if (equal) {
          turn.add(plans.remove(k));
        }
      }
      if (turn.size() > 1) {
        prunePlansWithCommonBranchAlternatives(turn);
      }
      result.addAll(turn);
    }
    plans.clear();
    plans.addAll(result);
  }
}
