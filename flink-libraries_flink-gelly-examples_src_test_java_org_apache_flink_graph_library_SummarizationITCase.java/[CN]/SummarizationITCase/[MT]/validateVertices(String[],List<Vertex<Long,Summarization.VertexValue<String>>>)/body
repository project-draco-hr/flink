{
  Arrays.sort(expectedVertices);
  Collections.sort(actualVertices,new Comparator<Vertex<Long,Summarization.VertexValue<String>>>(){
    @Override public int compare(    Vertex<Long,Summarization.VertexValue<String>> o1,    Vertex<Long,Summarization.VertexValue<String>> o2){
      int result=o1.getId().compareTo(o2.getId());
      if (result == 0) {
        result=o1.getValue().getVertexGroupValue().compareTo(o2.getValue().getVertexGroupValue());
      }
      if (result == 0) {
        result=o1.getValue().getVertexGroupValue().compareTo(o2.getValue().getVertexGroupValue());
      }
      if (result == 0) {
        result=o1.getValue().getVertexGroupValue().compareTo(o2.getValue().getVertexGroupValue());
      }
      return result;
    }
  }
);
  for (int i=0; i < expectedVertices.length; i++) {
    validateVertex(expectedVertices[i],actualVertices.get(i));
  }
}
