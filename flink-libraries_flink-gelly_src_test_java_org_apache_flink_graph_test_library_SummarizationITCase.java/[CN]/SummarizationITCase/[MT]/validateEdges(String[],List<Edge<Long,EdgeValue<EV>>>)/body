{
  Arrays.sort(expectedEdges);
  Collections.sort(actualEdges,new Comparator<Edge<Long,EdgeValue<EV>>>(){
    @Override public int compare(    Edge<Long,EdgeValue<EV>> o1,    Edge<Long,EdgeValue<EV>> o2){
      int result=o1.getSource().compareTo(o2.getSource());
      if (result == 0) {
        result=o1.getTarget().compareTo(o2.getTarget());
      }
      if (result == 0) {
        result=o1.getTarget().compareTo(o2.getTarget());
      }
      if (result == 0) {
        result=o1.getValue().getEdgeGroupValue().compareTo(o2.getValue().getEdgeGroupValue());
      }
      if (result == 0) {
        result=o1.getValue().getEdgeGroupCount().compareTo(o2.getValue().getEdgeGroupCount());
      }
      return result;
    }
  }
);
  for (int i=0; i < expectedEdges.length; i++) {
    validateEdge(expectedEdges[i],actualEdges.get(i));
  }
}
