{
  final Promise<String> promise=new scala.concurrent.impl.Promise.DefaultPromise<>();
  try {
    final long checkpointId=getAndIncrementCheckpointId();
    if (checkpointId == -1) {
      throw new IllegalStateException("Failed to get checkpoint Id");
    }
    if (savepointPromises.put(checkpointId,promise) == null) {
      boolean success=false;
      try {
        success=triggerCheckpoint(timestamp,checkpointId);
      }
  finally {
        if (!success) {
          savepointPromises.remove(checkpointId);
          promise.failure(new Exception("Failed to trigger savepoint"));
        }
      }
    }
 else {
      throw new IllegalStateException("Duplicate checkpoint ID");
    }
  }
 catch (  Throwable t) {
    promise.failure(new Exception("Failed to trigger savepoint",t));
  }
  return promise.future();
}
