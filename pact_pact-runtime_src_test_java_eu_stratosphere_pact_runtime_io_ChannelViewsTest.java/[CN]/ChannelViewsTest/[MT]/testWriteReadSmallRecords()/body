{
  final TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_SHORT_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
  final Channel.ID channel=this.ioManager.createChannel();
  List<MemorySegment> memory=this.memoryManager.allocatePages(this.parentTask,NUM_MEMORY_SEGMENTS);
  final BlockChannelWriter writer=this.ioManager.createBlockChannelWriter(channel);
  final ChannelWriterOutputView outView=new ChannelWriterOutputView(writer,memory,MEMORY_PAGE_SIZE);
  final PactRecord rec=new PactRecord();
  for (int i=0; i < NUM_PAIRS_SHORT; i++) {
    generator.next(rec);
    rec.write(outView);
  }
  this.memoryManager.release(outView.close());
  memory=this.memoryManager.allocatePages(this.parentTask,NUM_MEMORY_SEGMENTS);
  final BlockChannelReader reader=this.ioManager.createBlockChannelReader(channel);
  final ChannelReaderInputView inView=new ChannelReaderInputView(reader,memory,outView.getBlockCount(),true);
  generator.reset();
  final PactRecord readRec=new PactRecord();
  for (int i=0; i < NUM_PAIRS_SHORT; i++) {
    generator.next(rec);
    readRec.read(inView);
    Key k1=rec.getField(0,Key.class);
    Value v1=rec.getField(1,Value.class);
    Key k2=readRec.getField(0,Key.class);
    Value v2=readRec.getField(1,Value.class);
    Assert.assertTrue("The re-generated and the read record do not match.",k1.equals(k2) && v1.equals(v2));
  }
  this.memoryManager.release(inView.close());
  reader.deleteChannel();
}
