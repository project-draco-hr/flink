{
  super(buildSideSerializer,buildSideComparator);
  if (memorySegments == null) {
    throw new NullPointerException();
  }
  if (memorySegments.size() < MIN_NUM_MEMORY_SEGMENTS) {
    throw new IllegalArgumentException("Too few memory segments provided. Hash Table needs at least " + MIN_NUM_MEMORY_SEGMENTS + " memory segments.");
  }
  this.availableMemory=(memorySegments instanceof ArrayList) ? (ArrayList<MemorySegment>)memorySegments : new ArrayList<MemorySegment>(memorySegments);
  this.avgRecordLen=buildSideSerializer.getLength() > 0 ? buildSideSerializer.getLength() : avgRecordLen;
  this.segmentSize=memorySegments.get(0).size();
  if ((this.segmentSize & this.segmentSize - 1) != 0) {
    throw new IllegalArgumentException("Hash Table requires buffers whose size is a power of 2.");
  }
  this.pageSizeInBits=MathUtils.log2strict(this.segmentSize);
  int bucketsPerSegment=this.segmentSize >> NUM_INTRA_BUCKET_BITS;
  if (bucketsPerSegment == 0) {
    throw new IllegalArgumentException("Hash Table requires buffers of at least " + HASH_BUCKET_SIZE + " bytes.");
  }
  this.bucketsPerSegmentMask=bucketsPerSegment - 1;
  this.bucketsPerSegmentBits=MathUtils.log2strict(bucketsPerSegment);
  this.partitions=new ArrayList<InMemoryPartition<T>>();
  this.closed=true;
}
