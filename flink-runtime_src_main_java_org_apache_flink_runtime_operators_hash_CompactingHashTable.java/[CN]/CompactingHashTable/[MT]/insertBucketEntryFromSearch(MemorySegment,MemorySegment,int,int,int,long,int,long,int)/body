{
  boolean checkForResize=false;
  if (countInCurrentBucket < NUM_ENTRIES_PER_BUCKET) {
    currentBucket.putInt(currentBucketOffset + BUCKET_HEADER_LENGTH + (countInCurrentBucket * HASH_CODE_LEN),hashCode);
    currentBucket.putLong(currentBucketOffset + BUCKET_POINTER_START_OFFSET + (countInCurrentBucket * POINTER_LEN),pointer);
    currentBucket.putInt(currentBucketOffset + HEADER_COUNT_OFFSET,countInCurrentBucket + 1);
  }
 else {
    final InMemoryPartition<T> partition=this.partitions.get(partitionNumber);
    MemorySegment overflowSeg;
    final int overflowSegmentNum;
    final int overflowBucketOffset;
    if (partition.nextOverflowBucket == 0) {
      overflowSeg=getNextBuffer();
      overflowBucketOffset=0;
      overflowSegmentNum=partition.numOverflowSegments;
      if (partition.overflowSegments.length <= partition.numOverflowSegments) {
        MemorySegment[] newSegsArray=new MemorySegment[partition.overflowSegments.length * 2];
        System.arraycopy(partition.overflowSegments,0,newSegsArray,0,partition.overflowSegments.length);
        partition.overflowSegments=newSegsArray;
      }
      partition.overflowSegments[partition.numOverflowSegments]=overflowSeg;
      partition.numOverflowSegments++;
      checkForResize=true;
    }
 else {
      overflowSegmentNum=partition.numOverflowSegments - 1;
      overflowSeg=partition.overflowSegments[overflowSegmentNum];
      overflowBucketOffset=partition.nextOverflowBucket << NUM_INTRA_BUCKET_BITS;
    }
    partition.nextOverflowBucket=(partition.nextOverflowBucket == this.bucketsPerSegmentMask ? 0 : partition.nextOverflowBucket + 1);
    overflowSeg.putLong(overflowBucketOffset + HEADER_FORWARD_OFFSET,originalForwardPointer);
    final long pointerToNewBucket=(((long)overflowSegmentNum) << 32) | ((long)overflowBucketOffset);
    originalBucket.putLong(originalBucketOffset + HEADER_FORWARD_OFFSET,pointerToNewBucket);
    overflowSeg.putInt(overflowBucketOffset + BUCKET_HEADER_LENGTH,hashCode);
    overflowSeg.putLong(overflowBucketOffset + BUCKET_POINTER_START_OFFSET,pointer);
    overflowSeg.putInt(overflowBucketOffset + HEADER_COUNT_OFFSET,1);
    if (checkForResize && !this.isResizing) {
      if (this.buckets.length <= getOverflowSegmentCount()) {
        resizeHashTable();
      }
    }
  }
}
