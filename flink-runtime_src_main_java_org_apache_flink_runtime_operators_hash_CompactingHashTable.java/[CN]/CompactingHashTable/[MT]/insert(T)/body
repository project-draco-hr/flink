{
  if (this.closed) {
    return;
  }
  final int hashCode=hash(this.buildSideComparator.hash(record));
  final int posHashCode=hashCode % this.numBuckets;
  final int bucketArrayPos=posHashCode >>> this.bucketsPerSegmentBits;
  final int bucketInSegmentPos=(posHashCode & this.bucketsPerSegmentMask) << NUM_INTRA_BUCKET_BITS;
  final MemorySegment bucket=this.buckets[bucketArrayPos];
  final int partitionNumber=bucket.get(bucketInSegmentPos + HEADER_PARTITION_OFFSET);
  InMemoryPartition<T> partition=this.partitions.get(partitionNumber);
  long pointer=insertRecordIntoPartition(record,partition,false);
  insertBucketEntryFromStart(bucket,bucketInSegmentPos,hashCode,pointer,partitionNumber);
}
