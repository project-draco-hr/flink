{
  if (this.closed.get()) {
    return;
  }
  final int hashCode=hash(this.buildSideComparator.hash(record));
  final int posHashCode=hashCode % this.numBuckets;
  final int bucketArrayPos=posHashCode >>> this.bucketsPerSegmentBits;
  final int bucketInSegmentPos=(posHashCode & this.bucketsPerSegmentMask) << NUM_INTRA_BUCKET_BITS;
  final MemorySegment bucket=this.buckets[bucketArrayPos];
  final int partitionNumber=bucket.get(bucketInSegmentPos + HEADER_PARTITION_OFFSET);
  InMemoryPartition<T> partition=this.partitions.get(partitionNumber);
  long pointer;
  try {
    pointer=partition.appendRecord(record);
    if ((pointer >> this.pageSizeInBits) > this.compactionMemory.getBlockCount()) {
      this.compactionMemory.allocateSegments((int)(pointer >> this.pageSizeInBits));
    }
  }
 catch (  EOFException e) {
    try {
      compactPartition(partitionNumber);
      partition=this.partitions.get(partitionNumber);
      pointer=partition.appendRecord(record);
    }
 catch (    EOFException ex) {
      throw new RuntimeException("Memory ran out. Compaction failed. " + getMemoryConsumptionString() + " Message: "+ ex.getMessage());
    }
catch (    IndexOutOfBoundsException ex) {
      throw new RuntimeException("Memory ran out. Compaction failed. " + getMemoryConsumptionString() + " Message: "+ ex.getMessage());
    }
  }
catch (  IndexOutOfBoundsException e1) {
    try {
      compactPartition(partitionNumber);
      partition=this.partitions.get(partitionNumber);
      pointer=partition.appendRecord(record);
    }
 catch (    EOFException ex) {
      throw new RuntimeException("Memory ran out. Compaction failed. " + getMemoryConsumptionString() + " Message: "+ ex.getMessage());
    }
catch (    IndexOutOfBoundsException ex) {
      throw new RuntimeException("Memory ran out. Compaction failed. " + getMemoryConsumptionString() + " Message: "+ ex.getMessage());
    }
  }
  insertBucketEntryFromStart(partition,bucket,bucketInSegmentPos,hashCode,pointer);
}
