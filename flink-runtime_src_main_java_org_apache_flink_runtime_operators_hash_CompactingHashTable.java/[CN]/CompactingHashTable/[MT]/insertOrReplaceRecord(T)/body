{
  if (this.closed) {
    return;
  }
  final int searchHashCode=MathUtils.jenkinsHash(this.buildSideComparator.hash(record));
  final int posHashCode=searchHashCode % this.numBuckets;
  final MemorySegment originalBucket=this.buckets[posHashCode >> this.bucketsPerSegmentBits];
  final int originalBucketOffset=(posHashCode & this.bucketsPerSegmentMask) << NUM_INTRA_BUCKET_BITS;
  MemorySegment bucket=originalBucket;
  int bucketInSegmentOffset=originalBucketOffset;
  final int partitionNumber=bucket.get(bucketInSegmentOffset + HEADER_PARTITION_OFFSET);
  final InMemoryPartition<T> partition=this.partitions.get(partitionNumber);
  final MemorySegment[] overflowSegments=partition.overflowSegments;
  this.buildSideComparator.setReference(record);
  int countInSegment=bucket.getInt(bucketInSegmentOffset + HEADER_COUNT_OFFSET);
  int numInSegment=0;
  int posInSegment=bucketInSegmentOffset + BUCKET_HEADER_LENGTH;
  while (true) {
    while (numInSegment < countInSegment) {
      final int thisCode=bucket.getInt(posInSegment);
      posInSegment+=HASH_CODE_LEN;
      if (thisCode == searchHashCode) {
        final int pointerOffset=bucketInSegmentOffset + BUCKET_POINTER_START_OFFSET + (numInSegment * POINTER_LEN);
        final long pointer=bucket.getLong(pointerOffset);
        T valueAtPosition=partition.readRecordAt(pointer);
        if (this.buildSideComparator.equalToReference(valueAtPosition)) {
          long newPointer=insertRecordIntoPartition(record,partition,true);
          bucket.putLong(pointerOffset,newPointer);
          return;
        }
      }
      numInSegment++;
    }
    long newForwardPointer=bucket.getLong(bucketInSegmentOffset + HEADER_FORWARD_OFFSET);
    if (newForwardPointer == BUCKET_FORWARD_POINTER_NOT_SET) {
      long pointer=insertRecordIntoPartition(record,partition,false);
      if (countInSegment < NUM_ENTRIES_PER_BUCKET) {
        bucket.putInt(bucketInSegmentOffset + BUCKET_HEADER_LENGTH + (countInSegment * HASH_CODE_LEN),searchHashCode);
        bucket.putLong(bucketInSegmentOffset + BUCKET_POINTER_START_OFFSET + (countInSegment * POINTER_LEN),pointer);
        bucket.putInt(bucketInSegmentOffset + HEADER_COUNT_OFFSET,countInSegment + 1);
      }
 else {
        insertBucketEntryFromStart(originalBucket,originalBucketOffset,searchHashCode,pointer,partitionNumber);
      }
      return;
    }
    final int overflowSegNum=(int)(newForwardPointer >>> 32);
    bucket=overflowSegments[overflowSegNum];
    bucketInSegmentOffset=(int)newForwardPointer;
    countInSegment=bucket.getInt(bucketInSegmentOffset + HEADER_COUNT_OFFSET);
    posInSegment=bucketInSegmentOffset + BUCKET_HEADER_LENGTH;
    numInSegment=0;
  }
}
