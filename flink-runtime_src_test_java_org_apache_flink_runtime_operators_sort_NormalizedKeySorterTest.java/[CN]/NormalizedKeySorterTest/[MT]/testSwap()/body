{
  final int numSegments=MEMORY_SIZE / MEMORY_PAGE_SIZE;
  final List<MemorySegment> memory=this.memoryManager.allocatePages(new DummyInvokable(),numSegments);
  NormalizedKeySorter<Tuple2<Integer,String>> sorter=newSortBuffer(memory);
  TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
  Tuple2<Integer,String> record=new Tuple2<>();
  int num=-1;
  do {
    generator.next(record);
    num++;
  }
 while (sorter.write(record));
  int start=0, end=num - 1;
  while (start < end) {
    sorter.swap(start++,end--);
  }
  generator.reset();
  Tuple2<Integer,String> readTarget=new Tuple2<>();
  int i=num - 1;
  while (i >= 0) {
    generator.next(record);
    readTarget=sorter.getRecord(readTarget,i--);
    int rk=readTarget.f0;
    int gk=record.f0;
    String rv=readTarget.f1;
    String gv=record.f1;
    Assert.assertEquals("The re-read key is wrong",gk,rk);
    Assert.assertEquals("The re-read value is wrong",gv,rv);
  }
  sorter.dispose();
  this.memoryManager.release(memory);
}
