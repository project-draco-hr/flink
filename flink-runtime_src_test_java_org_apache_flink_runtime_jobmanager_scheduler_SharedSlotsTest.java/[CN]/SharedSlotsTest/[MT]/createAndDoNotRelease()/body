{
  try {
    SlotSharingGroupAssignment assignment=mock(SlotSharingGroupAssignment.class);
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        final SubSlot sub=(SubSlot)invocation.getArguments()[0];
        final SharedSlot shared=(SharedSlot)invocation.getArguments()[1];
        shared.releaseSlot(sub);
        return null;
      }
    }
).when(assignment).releaseSubSlot(any(SubSlot.class),any(SharedSlot.class));
    Instance instance=SchedulerTestUtils.getRandomInstance(1);
    SharedSlot slot=new SharedSlot(instance.allocateSlot(new JobID()),assignment);
    assertFalse(slot.isDisposed());
    SubSlot ss1=slot.allocateSubSlot(new JobVertexID());
    assertNotNull(ss1);
    assertEquals(instance,ss1.getInstance());
    assertEquals(0,ss1.getSlotNumber());
    assertEquals(slot.getAllocatedSlot().getJobID(),ss1.getJobID());
    SubSlot ss2=slot.allocateSubSlot(new JobVertexID());
    assertNotNull(ss2);
    assertEquals(2,slot.getNumberOfAllocatedSubSlots());
    ss1.releaseSlot();
    assertFalse(slot.isDisposed());
    ss2.releaseSlot();
    assertFalse(slot.isDisposed());
    assertEquals(0,slot.getNumberOfAllocatedSubSlots());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
