{
  try {
    SlotSharingGroupAssignment assignment=mock(SlotSharingGroupAssignment.class);
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        final SimpleSlot simpleSlot=(SimpleSlot)invocation.getArguments()[0];
        final SharedSlot sharedSlot=simpleSlot.getParent();
        sharedSlot.freeSubSlot(simpleSlot);
        return null;
      }
    }
).when(assignment).releaseSimpleSlot(any(SimpleSlot.class));
    JobVertexID id1=new JobVertexID();
    Instance instance=SchedulerTestUtils.getRandomInstance(1);
    SharedSlot slot=instance.allocateSharedSlot(new JobID(),assignment,id1);
    assertFalse(slot.isDead());
    SimpleSlot ss1=slot.allocateSubSlot(id1);
    assertNotNull(ss1);
    assertEquals(instance,ss1.getInstance());
    assertEquals(0,ss1.getSlotNumber());
    assertEquals(slot.getJobID(),ss1.getJobID());
    SimpleSlot ss2=slot.allocateSubSlot(new JobVertexID());
    assertNotNull(ss2);
    assertEquals(2,slot.getNumberLeaves());
    ss1.releaseSlot();
    assertFalse(slot.isDead());
    ss2.releaseSlot();
    assertFalse(slot.isDead());
    assertEquals(0,slot.getNumberLeaves());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
