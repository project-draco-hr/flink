{
  final int numSegments=MEMORY_SIZE / MEMORY_PAGE_SIZE;
  final List<MemorySegment> memory=this.memoryManager.allocatePages(new DummyInvokable(),numSegments);
  FixedLengthRecordSorter<IntPair> sorter=newSortBuffer(memory);
  RandomIntPairGenerator generator=new RandomIntPairGenerator(SEED);
  IntPair record=new IntPair();
  int num=-1;
  do {
    generator.next(record);
    num++;
  }
 while (sorter.write(record) && num < 3354624);
  sorter.reset();
  generator.reset();
  int num2=-1;
  do {
    generator.next(record);
    num2++;
  }
 while (sorter.write(record) && num2 < 3354624);
  Assert.assertEquals("The number of records written after the reset was not the same as before.",num,num2);
  generator.reset();
  IntPair readTarget=new IntPair();
  int i=0;
  while (i < num) {
    generator.next(record);
    readTarget=sorter.getRecord(readTarget,i++);
    int rk=readTarget.getKey();
    int gk=record.getKey();
    int rv=readTarget.getValue();
    int gv=record.getValue();
    Assert.assertEquals("The re-read key is wrong",gk,rk);
    Assert.assertEquals("The re-read value is wrong",gv,rv);
  }
  this.memoryManager.release(sorter.dispose());
}
