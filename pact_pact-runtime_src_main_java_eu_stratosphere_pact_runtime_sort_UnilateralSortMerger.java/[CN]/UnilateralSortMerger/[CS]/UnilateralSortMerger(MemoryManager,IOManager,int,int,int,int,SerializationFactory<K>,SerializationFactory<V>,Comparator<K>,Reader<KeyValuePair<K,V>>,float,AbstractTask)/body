{
  if (memoryManager == null) {
    throw new NullPointerException("Memory manager must not be null.");
  }
  if (ioManager == null) {
    throw new NullPointerException("IO-Manager must not be null.");
  }
  if (parentTask == null) {
    throw new NullPointerException("Parent Task must not be null.");
  }
  this.maxNumFileHandles=maxNumFileHandles;
  this.memoryManager=memoryManager;
  this.ioManager=ioManager;
  this.keyComparator=keyComparator;
  this.keySerialization=keySerialization;
  this.valueSerialization=valueSerialization;
  this.parent=parentTask;
  this.allocatedMemory=new ArrayList<MemorySegment>();
  CircularQueues circularQueues=new CircularQueues();
  for (int i=0; i < numSortBuffers; i++) {
    Deserializer<K> keyDeserializer=keySerialization.getDeserializer();
    RawComparator comparator=new DeserializerComparator<K>(keyDeserializer,keyComparator);
    MemorySegment seg=memoryManager.allocate(parentTask,sizeSortBuffer);
    freeSegmentAtShutdown(seg);
    BufferSortable<K,V> buffer=new BufferSortable<K,V>(seg,comparator,keySerialization,valueSerialization,offsetArrayPerc);
    CircularElement element=new CircularElement(i,buffer);
    circularQueues.empty.add(element);
  }
  ExceptionHandler<IOException> exceptionHandler=new ExceptionHandler<IOException>(){
    public void handleException(    IOException exception){
      setResultIteratorException(exception);
      close();
    }
  }
;
  readThread=getReadingThread(exceptionHandler,reader,circularQueues,parentTask);
  sortThread=getSortingThread(exceptionHandler,circularQueues,parentTask);
  spillThread=getSpillingThread(exceptionHandler,circularQueues,memoryManager,ioManager,ioMemorySize,parentTask,numSortBuffers >= 3 ? numSortBuffers - 2 : 0);
  startThreads();
}
