{
  List<CircularElement> cache=new ArrayList<CircularElement>(buffersToKeepBeforeSpilling);
  CircularElement element=null;
  boolean cacheOnly=false;
  if (buffersToKeepBeforeSpilling > 0) {
    while (isRunning()) {
      if (cache.size() >= buffersToKeepBeforeSpilling) {
        cacheOnly=false;
        break;
      }
      try {
        element=this.queues.spill.take();
      }
 catch (      InterruptedException iex) {
        if (isRunning()) {
          LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " + "Retrying to grab buffer...");
          continue;
        }
 else {
          return;
        }
      }
      cache.add(element);
      if (element == SENTINEL) {
        cacheOnly=true;
        break;
      }
    }
  }
  if (cacheOnly) {
    LOG.debug("Initiating merge-iterator (in-memory segments).");
    List<Iterator<KeyValuePair<K,V>>> iterators=new ArrayList<Iterator<KeyValuePair<K,V>>>();
    for (    CircularElement cached : cache) {
      if (cached != SENTINEL) {
        iterators.add(cached.buffer.getIterator());
      }
    }
    LOG.debug("Releasing sort-buffer memory.");
    releaseSortBuffers();
    setResultIterator(new MergeIterator<K,V>(iterators,keyComparator));
    return;
  }
  final Channel.Enumerator enumerator=this.ioManager.createChannelEnumerator();
  final List<MemorySegment> writeBuffers;
  List<Channel.ID> channelIDs=new ArrayList<Channel.ID>();
  try {
    writeBuffers=this.memoryManager.allocate(UnilateralSortMerger.this.parent,writeMemSize,NUM_WRITE_BUFFERS,MIN_IO_BUFFER_SIZE);
    registerSegmentsToBeFreedAtShutdown(writeBuffers);
  }
 catch (  MemoryAllocationException maex) {
    throw new IOException("Spilling thread was unable to allocate memory for the channel writer.",maex);
  }
  while (isRunning()) {
    try {
      element=takeNext(queues.spill,cache);
    }
 catch (    InterruptedException iex) {
      if (isRunning()) {
        LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " + "Retrying to grab buffer...");
        continue;
      }
 else {
        return;
      }
    }
    if (!isRunning()) {
      return;
    }
    if (element == SENTINEL) {
      break;
    }
    Channel.ID channel=enumerator.next();
    channelIDs.add(channel);
    ChannelWriter writer=this.ioManager.createChannelWriter(channel,writeBuffers);
    LOG.debug("Spilling buffer " + element.id + ".");
    element.buffer.writeToChannel(writer);
    LOG.debug("Spilled buffer " + element.id + ".");
    writer.close();
    element.buffer.reset();
    queues.empty.add(element);
  }
  LOG.debug("Spilling done.");
  LOG.debug("Releasing sort-buffer memory.");
  releaseSortBuffers();
  try {
    while (channelIDs.size() > UnilateralSortMerger.this.maxNumFileHandles) {
      channelIDs=mergeChannelList(channelIDs,writeBuffers,this.readMemSize);
    }
    this.memoryManager.release(writeBuffers);
    unregisterSegmentsToBeFreedAtShutdown(writeBuffers);
    writeBuffers.clear();
    if (channelIDs.isEmpty()) {
      setResultIterator(EmptyIterator.<KeyValuePair<K,V>>get());
    }
 else {
      LOG.debug("Beginning final merge.");
      List<List<MemorySegment>> readBuffers=new ArrayList<List<MemorySegment>>(channelIDs.size());
      List<MemorySegment> allBuffers=getSegmentsForReaders(readBuffers,this.readMemSize,channelIDs.size());
      registerSegmentsToBeFreedAtShutdown(allBuffers);
      List<StreamChannelAccess<?>> readers=new ArrayList<StreamChannelAccess<?>>(channelIDs.size());
      registerChannelsToBeRemovedAtShudown(readers);
      setResultIterator(getMergingIterator(channelIDs,readBuffers,readers));
    }
  }
 catch (  MemoryAllocationException maex) {
    throw new IOException("Merging of sorted runs failed, because the memory for the I/O channels could not be allocated.",maex);
  }
  LOG.debug("Spilling and merging thread done.");
}
