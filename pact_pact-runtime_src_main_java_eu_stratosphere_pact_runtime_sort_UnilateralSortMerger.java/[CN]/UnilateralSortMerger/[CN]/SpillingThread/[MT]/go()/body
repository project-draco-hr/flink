{
  final Queue<CircularElement<E>> cache=new ArrayDeque<CircularElement<E>>();
  CircularElement<E> element=null;
  boolean cacheOnly=false;
  while (isRunning()) {
    try {
      element=this.queues.spill.take();
    }
 catch (    InterruptedException iex) {
      if (isRunning()) {
        LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " + "Retrying to grab buffer...");
        continue;
      }
 else       return;
    }
    if (element == SPILLING_MARKER) {
      break;
    }
 else     if (element == EOF_MARKER) {
      cacheOnly=true;
      break;
    }
    cache.add(element);
  }
  if (!isRunning()) {
    return;
  }
  if (cacheOnly) {
    if (LOG.isDebugEnabled())     LOG.debug("Initiating in memory merge.");
    List<MutableObjectIterator<E>> iterators=new ArrayList<MutableObjectIterator<E>>(cache.size());
    for (    CircularElement<E> cached : cache) {
      iterators.add(cached.buffer.getIterator());
    }
    if (LOG.isDebugEnabled())     LOG.debug("Releasing unused sort-buffer memory.");
    disposeSortBuffers(true);
    setResultIterator(iterators.size() == 1 ? iterators.get(0) : new MergeIterator<E>(iterators,this.serializer,this.comparator));
    return;
  }
  final Channel.Enumerator enumerator=this.ioManager.createChannelEnumerator();
  List<Channel.ID> channelIDs=new ArrayList<Channel.ID>();
  while (isRunning()) {
    try {
      element=takeNext(this.queues.spill,cache);
    }
 catch (    InterruptedException iex) {
      if (isRunning()) {
        LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " + "Retrying to grab buffer...");
        continue;
      }
 else       return;
    }
    if (!isRunning()) {
      return;
    }
    if (element == EOF_MARKER) {
      break;
    }
    Channel.ID channel=enumerator.next();
    channelIDs.add(channel);
    registerChannelToBeRemovedAtShudown(channel);
    final BlockChannelWriter writer=this.ioManager.createBlockChannelWriter(channel,this.numWriteBuffersToCluster);
    registerOpenChannelToBeRemovedAtShudown(writer);
    final ChannelWriterOutputView output=new ChannelWriterOutputView(writer,this.writeMemory,this.memManager.getPageSize());
    if (LOG.isDebugEnabled())     LOG.debug("Spilling buffer " + element.id + ".");
    element.buffer.writeToOutput(output);
    if (LOG.isDebugEnabled())     LOG.debug("Spilled buffer " + element.id + ".");
    output.close();
    unregisterOpenChannelToBeRemovedAtShudown(writer);
    element.buffer.reset();
    this.queues.empty.add(element);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Spilling done.");
    LOG.debug("Releasing sort-buffer memory.");
  }
  disposeSortBuffers(false);
  try {
    while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {
      channelIDs=mergeChannelList(channelIDs,this.sortReadMemory,this.writeMemory);
    }
    this.memManager.release(this.writeMemory);
    this.writeMemory.clear();
    if (channelIDs.isEmpty()) {
      setResultIterator(EmptyMutableObjectIterator.<E>get());
    }
 else {
      if (LOG.isDebugEnabled())       LOG.debug("Beginning final merge.");
      List<List<MemorySegment>> readBuffers=new ArrayList<List<MemorySegment>>(channelIDs.size());
      getSegmentsForReaders(readBuffers,this.sortReadMemory,channelIDs.size());
      setResultIterator(getMergingIterator(channelIDs,readBuffers,new ArrayList<BlockChannelAccess<?,?>>(channelIDs.size())));
    }
  }
 catch (  MemoryAllocationException maex) {
    throw new IOException("Merging of sorted runs failed, because the memory for the I/O channels could not be allocated.",maex);
  }
  if (LOG.isDebugEnabled())   LOG.debug("Spilling and merging thread done.");
}
