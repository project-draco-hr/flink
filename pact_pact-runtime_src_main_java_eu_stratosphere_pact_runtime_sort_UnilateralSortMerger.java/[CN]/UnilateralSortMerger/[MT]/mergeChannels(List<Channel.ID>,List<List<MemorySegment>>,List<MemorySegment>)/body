{
  List<BlockChannelAccess<?,?>> channelAccesses=new ArrayList<BlockChannelAccess<?,?>>(channelIDs.size());
  final MergeIterator<E> mergeIterator=getMergingIterator(channelIDs,readBuffers,channelAccesses);
  final Channel.ID mergedChannelID=this.ioManager.createChannel();
  final BlockChannelWriter writer=this.ioManager.createBlockChannelWriter(mergedChannelID);
  registerOpenChannelToBeRemovedAtShudown(writer);
  final ChannelWriterOutputView output=new ChannelWriterOutputView(writer,writeBuffers,this.ioBufferSize);
  final TypeAccessors<E> typeAccessors=this.typeAccessors;
  E rec=typeAccessors.createInstance();
  while (mergeIterator.next(rec)) {
    typeAccessors.serialize(rec,output);
  }
  output.close();
  unregisterOpenChannelToBeRemovedAtShudown(writer);
  registerChannelToBeRemovedAtShudown(mergedChannelID);
  for (int i=0; i < channelAccesses.size(); i++) {
    BlockChannelAccess<?,?> access=channelAccesses.get(i);
    if (!access.isClosed())     access.close();
    access.deleteChannel();
    unregisterOpenChannelToBeRemovedAtShudown(access);
  }
  return mergedChannelID;
}
