{
  final double MAX_DELTA=0.1;
  Comparator<String> deltaComp=new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      StringTokenizer st1=new StringTokenizer(o1,"|");
      StringTokenizer st2=new StringTokenizer(o2,"|");
      if (st1.countTokens() != st2.countTokens()) {
        return st1.countTokens() - st2.countTokens();
      }
      String t1=st1.nextToken();
      String t2=st2.nextToken();
      if (!t1.equals(t2)) {
        return t1.compareTo(t2);
      }
      while (st1.hasMoreTokens()) {
        t1=st1.nextToken();
        t2=st2.nextToken();
        double d1=Double.parseDouble(t1);
        double d2=Double.parseDouble(t2);
        if (Math.abs(d1 - d2) > MAX_DELTA) {
          return d1 < d2 ? -1 : 1;
        }
      }
      return 0;
    }
  }
;
  ArrayList<String> resultLines=new ArrayList<String>();
  for (  BufferedReader reader : getResultReader(resultPath)) {
    String line=null;
    while ((line=reader.readLine()) != null) {
      resultLines.add(line);
    }
    reader.close();
  }
  Collections.sort(resultLines,deltaComp);
  final String[] should=getNewCenters().split("\n");
  final String[] is=(String[])resultLines.toArray(new String[resultLines.size()]);
  Assert.assertEquals("Wrong number of result lines.",should.length,is.length);
  for (int i=0; i < should.length; i++) {
    StringTokenizer shouldRecord=new StringTokenizer(should[i],"|");
    StringTokenizer isRecord=new StringTokenizer(is[i],"|");
    Assert.assertEquals("Records don't match.",shouldRecord.countTokens(),isRecord.countTokens());
    String shouldToken=shouldRecord.nextToken();
    String isToken=isRecord.nextToken();
    Assert.assertEquals("Records don't match.",shouldToken,isToken);
    while (shouldRecord.hasMoreTokens()) {
      shouldToken=shouldRecord.nextToken();
      isToken=isRecord.nextToken();
      double shouldDouble=Double.parseDouble(shouldToken);
      double isDouble=Double.parseDouble(isToken);
      Assert.assertTrue(shouldDouble - MAX_DELTA < isDouble && shouldDouble + MAX_DELTA > isDouble);
    }
  }
}
