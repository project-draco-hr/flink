{
  try {
    final Future<Object> response=Patterns.ask(jobmanager,JobManagerMessages.getRequestRunningJobs(),new Timeout(timeout));
    Object result=null;
    try {
      result=Await.result(response,timeout);
    }
 catch (    Exception exception) {
      throw new IOException("Could not retrieve the running jobs from the job manager.",exception);
    }
    if (!(result instanceof RunningJobs)) {
      throw new RuntimeException("ReqeustRunningJobs requires a response of type " + "RunningJob. Instead the response is of type " + result.getClass() + ".");
    }
 else {
      final Iterator<ExecutionGraph> graphs=((RunningJobs)result).asJavaIterable().iterator();
      resp.setStatus(HttpServletResponse.SC_OK);
      PrintWriter wrt=resp.getWriter();
      wrt.write("[");
      while (graphs.hasNext()) {
        ExecutionGraph graph=graphs.next();
        wrt.write("{");
        wrt.write("\"jobid\": \"" + graph.getJobID() + "\",");
        if (graph.getJobName() != null) {
          wrt.write("\"jobname\": \"" + graph.getJobName() + "\",");
        }
        wrt.write("\"status\": \"" + graph.getState() + "\",");
        wrt.write("\"time\": " + graph.getStatusTimestamp(graph.getState()));
        wrt.write("}");
        if (graphs.hasNext()) {
          wrt.write(",");
        }
      }
      wrt.write("]");
    }
  }
 catch (  Throwable t) {
    resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    resp.getWriter().print(t.getMessage());
  }
}
