{
  try {
    String jmHost=config.getString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,null);
    int jmPort=config.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
    ActorRef jm=JobManager.getJobManager(new InetSocketAddress(jmHost,jmPort),system,timeout);
    Iterator<ExecutionGraph> graphs=AkkaUtils.<RunningJobs>ask(jm,RequestRunningJobs$.MODULE$,timeout).asJavaIterable().iterator();
    resp.setStatus(HttpServletResponse.SC_OK);
    PrintWriter wrt=resp.getWriter();
    wrt.write("[");
    while (graphs.hasNext()) {
      ExecutionGraph graph=graphs.next();
      wrt.write("{");
      wrt.write("\"jobid\": \"" + graph.getJobID() + "\",");
      if (graph.getJobName() != null) {
        wrt.write("\"jobname\": \"" + graph.getJobName() + "\",");
      }
      wrt.write("\"status\": \"" + graph.getState() + "\",");
      wrt.write("\"time\": " + graph.getStatusTimestamp(graph.getState()));
      wrt.write("}");
      if (graphs.hasNext()) {
        wrt.write(",");
      }
    }
    wrt.write("]");
  }
 catch (  Throwable t) {
    resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    resp.getWriter().print(t.getMessage());
  }
}
