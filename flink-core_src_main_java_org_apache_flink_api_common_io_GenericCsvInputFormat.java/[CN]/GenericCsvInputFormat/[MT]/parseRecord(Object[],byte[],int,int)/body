{
  boolean[] fieldIncluded=this.fieldIncluded;
  int startPos=offset;
  final int limit=offset + numBytes;
  for (int field=0, output=0; field < fieldIncluded.length; field++) {
    if (startPos >= limit) {
      if (lenient) {
        return false;
      }
 else {
        throw new ParseException("Row too short: " + new String(bytes,offset,numBytes));
      }
    }
    if (fieldIncluded[field]) {
      @SuppressWarnings("unchecked") FieldParser<Object> parser=(FieldParser<Object>)this.fieldParsers[output];
      Object reuse=holders[output];
      startPos=parser.parseField(bytes,startPos,limit,this.fieldDelim,reuse);
      holders[output]=parser.getLastResult();
      if (startPos < 0) {
        if (lenient) {
          return false;
        }
 else {
          String lineAsString=new String(bytes,offset,numBytes);
          throw new ParseException("Line could not be parsed: '" + lineAsString + "'\n"+ "ParserError "+ parser.getErrorState()+ " \n"+ "Expect field types: "+ fieldTypesToString()+ " \n"+ "in file: "+ filePath);
        }
      }
      output++;
    }
 else {
      startPos=skipFields(bytes,startPos,limit,this.fieldDelim);
      if (startPos < 0) {
        if (!lenient) {
          String lineAsString=new String(bytes,offset,numBytes);
          throw new ParseException("Line could not be parsed: '" + lineAsString + "'\n"+ "Expect field types: "+ fieldTypesToString()+ " \n"+ "in file: "+ filePath);
        }
      }
    }
  }
  return true;
}
