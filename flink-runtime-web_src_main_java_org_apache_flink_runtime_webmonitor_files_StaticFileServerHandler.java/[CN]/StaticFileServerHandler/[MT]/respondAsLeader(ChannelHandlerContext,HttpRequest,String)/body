{
  final File file=new File(rootPath,requestPath);
  if (!file.exists()) {
    ClassLoader cl=StaticFileServerHandler.class.getClassLoader();
    try (InputStream resourceStream=cl.getResourceAsStream("web" + requestPath)){
      boolean success=false;
      try {
        if (resourceStream != null) {
          URL root=cl.getResource("web");
          URL requested=cl.getResource("web" + requestPath);
          if (root != null && requested != null) {
            URI rootURI=new URI(root.getPath()).normalize();
            URI requestedURI=new URI(requested.getPath()).normalize();
            if (!rootURI.relativize(requestedURI).equals(requestedURI)) {
              logger.debug("Loading missing file from classloader: {}",requestPath);
              file.getParentFile().mkdirs();
              Files.copy(resourceStream,file.toPath());
              success=true;
            }
          }
        }
      }
 catch (      Throwable t) {
        logger.error("error while responding",t);
      }
 finally {
        if (!success) {
          logger.debug("Unable to load requested file {} from classloader",requestPath);
          sendError(ctx,NOT_FOUND);
          return;
        }
      }
    }
   }
  if (!file.exists() || file.isHidden() || file.isDirectory()|| !file.isFile()) {
    sendError(ctx,NOT_FOUND);
    return;
  }
  if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {
    sendError(ctx,NOT_FOUND);
    return;
  }
  final String ifModifiedSince=request.headers().get(IF_MODIFIED_SINCE);
  if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {
    SimpleDateFormat dateFormatter=new SimpleDateFormat(HTTP_DATE_FORMAT,Locale.US);
    Date ifModifiedSinceDate=dateFormatter.parse(ifModifiedSince);
    long ifModifiedSinceDateSeconds=ifModifiedSinceDate.getTime() / 1000;
    long fileLastModifiedSeconds=file.lastModified() / 1000;
    if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {
      if (logger.isDebugEnabled()) {
        logger.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'');
      }
      sendNotModified(ctx);
      return;
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Responding with file '" + file.getAbsolutePath() + '\'');
  }
  final RandomAccessFile raf;
  try {
    raf=new RandomAccessFile(file,"r");
  }
 catch (  FileNotFoundException e) {
    sendError(ctx,NOT_FOUND);
    return;
  }
  long fileLength=raf.length();
  HttpResponse response=new DefaultHttpResponse(HTTP_1_1,OK);
  setContentTypeHeader(response,file);
  if (!(requestPath.contains("log") || requestPath.contains("out"))) {
    setDateAndCacheHeaders(response,file);
  }
  if (HttpHeaders.isKeepAlive(request)) {
    response.headers().set(CONNECTION,HttpHeaders.Values.KEEP_ALIVE);
  }
  HttpHeaders.setContentLength(response,fileLength);
  ctx.write(response);
  ctx.write(new DefaultFileRegion(raf.getChannel(),0,fileLength),ctx.newProgressivePromise());
  ChannelFuture lastContentFuture=ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);
  if (!HttpHeaders.isKeepAlive(request)) {
    lastContentFuture.addListener(ChannelFutureListener.CLOSE);
  }
}
