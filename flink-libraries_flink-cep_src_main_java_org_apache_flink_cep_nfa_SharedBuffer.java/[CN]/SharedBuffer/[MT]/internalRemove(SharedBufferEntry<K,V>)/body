{
  Stack<SharedBufferEntry<K,V>> entriesToRemove=new Stack<>();
  entriesToRemove.add(entry);
  while (!entriesToRemove.isEmpty()) {
    SharedBufferEntry<K,V> currentEntry=entriesToRemove.pop();
    if (currentEntry.getReferenceCounter() == 0) {
      currentEntry.remove();
      for (      SharedBufferEdge<K,V> edge : currentEntry.getEdges()) {
        if (edge.getTarget() != null) {
          edge.getTarget().decreaseReferenceCounter();
          entriesToRemove.push(edge.getTarget());
        }
      }
    }
  }
}
