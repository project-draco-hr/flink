{
  DataInputViewStreamWrapper source=new DataInputViewStreamWrapper(ois);
  ArrayList<SharedBufferEntry<K,V>> entryList=new ArrayList<>();
  ois.defaultReadObject();
  this.pages=new HashMap<>();
  int numberPages=ois.readInt();
  for (int i=0; i < numberPages; i++) {
    @SuppressWarnings("unchecked") K key=(K)ois.readObject();
    SharedBufferPage<K,V> page=new SharedBufferPage<>(key);
    pages.put(key,page);
    int numberEntries=ois.readInt();
    for (int j=0; j < numberEntries; j++) {
      V value=valueSerializer.deserialize(source);
      long timestamp=ois.readLong();
      ValueTimeWrapper<V> valueTimeWrapper=new ValueTimeWrapper<>(value,timestamp);
      SharedBufferEntry<K,V> sharedBufferEntry=new SharedBufferEntry<K,V>(valueTimeWrapper,page);
      sharedBufferEntry.referenceCounter=ois.readInt();
      page.entries.put(valueTimeWrapper,sharedBufferEntry);
      entryList.add(sharedBufferEntry);
    }
  }
  int numberEdges=ois.readInt();
  for (int j=0; j < numberEdges; j++) {
    int sourceIndex=ois.readInt();
    int targetIndex=ois.readInt();
    if (sourceIndex >= entryList.size() || sourceIndex < 0) {
      throw new RuntimeException("Could not find source entry with index " + sourceIndex + ". This indicates a corrupted state.");
    }
 else {
      SharedBufferEntry<K,V> sourceEntry=entryList.get(sourceIndex);
      final DeweyNumber version=(DeweyNumber)ois.readObject();
      final SharedBufferEntry<K,V> target;
      if (targetIndex >= 0) {
        if (targetIndex >= entryList.size()) {
          throw new RuntimeException("Could not find target entry with index " + targetIndex + ". This indicates a corrupted state.");
        }
 else {
          target=entryList.get(targetIndex);
        }
      }
 else {
        target=null;
      }
      sourceEntry.edges.add(new SharedBufferEdge<K,V>(target,version));
    }
  }
}
