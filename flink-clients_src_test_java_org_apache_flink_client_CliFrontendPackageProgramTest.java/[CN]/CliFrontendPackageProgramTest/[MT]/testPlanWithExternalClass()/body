{
  final boolean[] callme={false};
  try {
    String[] arguments={"-j",getTestJarPath(),"-c",TEST_JAR_CLASSLOADERTEST_CLASS,"--verbose","true","arg1","arg2"};
    CommandLine line=new PosixParser().parse(CliFrontend.getProgramSpecificOptions(new Options()),arguments,true);
    CliFrontend frontend=new CliFrontend();
    Object result=frontend.buildProgram(line);
    assertTrue(result instanceof PackagedProgram);
    PackagedProgram prog=spy((PackagedProgram)result);
    ClassLoader testClassLoader=new ClassLoader(prog.getUserCodeClassLoader()){
      @Override public Class<?> loadClass(      String name) throws ClassNotFoundException {
        if ("org.apache.hadoop.hive.ql.io.RCFileInputFormat".equals(name)) {
          callme[0]=true;
          return String.class;
        }
 else {
          return super.loadClass(name);
        }
      }
    }
;
    when(prog.getUserCodeClassLoader()).thenReturn(testClassLoader);
    Assert.assertArrayEquals(new String[]{"--verbose","true","arg1","arg2"},prog.getArguments());
    Assert.assertEquals(TEST_JAR_CLASSLOADERTEST_CLASS,prog.getMainClassName());
    Configuration c=new Configuration();
    c.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,"devil");
    Client cli=new Client(c,getClass().getClassLoader());
    cli.getOptimizedPlanAsJson(prog,666);
  }
 catch (  ProgramInvocationException pie) {
    assertTrue("Classloader was not called",callme[0]);
    if (!(pie.getCause() instanceof ClassNotFoundException)) {
      System.err.println(pie.getMessage());
      pie.printStackTrace();
      fail("Program caused an exception: " + pie.getMessage());
    }
  }
catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    assertTrue("Classloader was not called",callme[0]);
    fail("Program caused an exception: " + e.getMessage());
  }
}
