{
  final boolean[] callme={false};
  try {
    String[] arguments={"-c",TEST_JAR_CLASSLOADERTEST_CLASS,getTestJarPath(),"true","arg1","arg2"};
    String[] progArgs={"true","arg1","arg2"};
    InfoOptions options=CliFrontendParser.parseInfoCommand(arguments);
    assertEquals(getTestJarPath(),options.getJarFilePath());
    assertEquals(TEST_JAR_CLASSLOADERTEST_CLASS,options.getEntryPointClassName());
    assertArrayEquals(progArgs,options.getProgramArgs());
    CliFrontend frontend=new CliFrontend(CliFrontendTestUtils.getConfigDir());
    PackagedProgram prog=spy(frontend.buildProgram(options));
    ClassLoader testClassLoader=new ClassLoader(prog.getUserCodeClassLoader()){
      @Override public Class<?> loadClass(      String name) throws ClassNotFoundException {
        if ("org.apache.hadoop.hive.ql.io.RCFileInputFormat".equals(name)) {
          callme[0]=true;
          return String.class;
        }
 else {
          return super.loadClass(name);
        }
      }
    }
;
    when(prog.getUserCodeClassLoader()).thenReturn(testClassLoader);
    assertEquals(TEST_JAR_CLASSLOADERTEST_CLASS,prog.getMainClassName());
    assertArrayEquals(progArgs,prog.getArguments());
    Configuration c=new Configuration();
    Optimizer compiler=new Optimizer(new DataStatistics(),new DefaultCostEstimator(),c);
    Client.getOptimizedPlanAsJson(compiler,prog,666);
    fail("Should have failed with a ClassNotFoundException");
  }
 catch (  ProgramInvocationException e) {
    if (!(e.getCause() instanceof ClassNotFoundException)) {
      e.printStackTrace();
      fail("Program didn't throw ClassNotFoundException");
    }
    assertTrue("Classloader was not called",callme[0]);
  }
catch (  Exception e) {
    e.printStackTrace();
    fail("Program failed with the wrong exception: " + e.getClass().getName());
  }
}
