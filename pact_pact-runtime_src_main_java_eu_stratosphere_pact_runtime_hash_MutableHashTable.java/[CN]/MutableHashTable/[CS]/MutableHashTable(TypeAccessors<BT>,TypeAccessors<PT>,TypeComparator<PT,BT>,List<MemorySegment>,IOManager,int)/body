{
  if (memorySegments == null) {
    throw new NullPointerException();
  }
  if (memorySegments.size() < MIN_NUM_MEMORY_SEGMENTS) {
    throw new IllegalArgumentException("Too few memory segments provided. Hash Join needs at least " + MIN_NUM_MEMORY_SEGMENTS + " memory segments.");
  }
  this.buildSideAccessors=buildSideAccessors;
  this.probeSideAccessors=probeSideAccessors;
  this.recordComparator=comparator;
  this.availableMemory=memorySegments;
  this.ioManager=ioManager;
  this.avgRecordLen=avgRecordLen > 0 ? avgRecordLen : buildSideAccessors.getLength() == -1 ? DEFAULT_RECORD_LEN : buildSideAccessors.getLength();
  this.totalNumBuffers=memorySegments.size();
  this.segmentSize=memorySegments.get(0).size();
  if ((this.segmentSize & this.segmentSize - 1) != 0) {
    throw new IllegalArgumentException("Hash Table requires buffers whose size is a power of 2.");
  }
  int bucketsPerSegment=this.segmentSize >> NUM_INTRA_BUCKET_BITS;
  if (bucketsPerSegment == 0) {
    throw new IllegalArgumentException("Hash Table requires buffers of at least " + HASH_BUCKET_SIZE + " bytes.");
  }
  this.bucketsPerSegmentMask=bucketsPerSegment - 1;
  this.bucketsPerSegmentBits=MathUtils.log2strict(bucketsPerSegment);
  this.writeBehindBuffers=new LinkedBlockingQueue<MemorySegment>();
  this.numWriteBehindBuffers=getNumWriteBehindBuffers(memorySegments.size());
  this.partitionsBeingBuilt=new ArrayList<HashPartition<BT,PT>>();
  this.partitionsPending=new ArrayList<HashPartition<BT,PT>>();
  this.closed=true;
}
