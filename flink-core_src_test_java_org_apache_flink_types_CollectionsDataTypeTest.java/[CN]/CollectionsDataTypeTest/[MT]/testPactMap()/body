{
  NfIntStringMap map0=new NfIntStringMap();
  map0.put(new IntValue(10),new StringValue("20"));
  for (  Entry<IntValue,StringValue> entry : map0.entrySet()) {
    Assert.assertEquals(entry.getValue(),new StringValue("20"));
    Assert.assertEquals(entry.getKey(),new IntValue(10));
  }
  map0.put(new IntValue(10),new StringValue("10"));
  for (  Entry<IntValue,StringValue> entry : map0.entrySet()) {
    Assert.assertEquals(entry.getValue(),new StringValue("10"));
    Assert.assertEquals(entry.getKey(),new IntValue(10));
  }
  map0.put(new IntValue(20),new StringValue("20"));
  map0.put(new IntValue(30),new StringValue("30"));
  map0.put(new IntValue(40),new StringValue("40"));
  NfStringIntMap mapinv=new NfStringIntMap();
  for (  Entry<IntValue,StringValue> entry : map0.entrySet()) {
    Assert.assertEquals(entry.getKey().getValue(),Integer.parseInt(entry.getValue().toString()));
    mapinv.put(entry.getValue(),entry.getKey());
  }
  for (  Entry<StringValue,IntValue> entry : mapinv.entrySet()) {
    Assert.assertEquals(entry.getValue().getValue(),Integer.parseInt(entry.getKey().toString()));
  }
  NfIntStringMap nMap=new NfIntStringMap();
  try {
    map0.write(out);
    nMap.read(in);
  }
 catch (  Exception e) {
    Assert.fail();
  }
  for (  Entry<IntValue,StringValue> entry : map0.entrySet()) {
    Assert.assertEquals(entry.getKey().getValue(),Integer.parseInt(entry.getValue().toString()));
  }
}
