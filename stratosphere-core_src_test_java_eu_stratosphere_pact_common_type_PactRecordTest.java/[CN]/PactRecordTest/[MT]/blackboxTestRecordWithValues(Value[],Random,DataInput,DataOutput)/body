{
  final int[] permutation1=createPermutation(rnd,values.length);
  final int[] permutation2=createPermutation(rnd,values.length);
  PactRecord rec=new PactRecord();
  for (int i=0; i < values.length; i++) {
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  testAllRetrievalMethods(rec,permutation2,values);
  rec=new PactRecord();
  for (int i=0; i < values.length; i++) {
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  rec.updateBinaryRepresenation();
  testAllRetrievalMethods(rec,permutation2,values);
  rec=new PactRecord();
  int updatePos=rnd.nextInt(values.length + 1);
  for (int i=0; i < values.length; i++) {
    if (i == updatePos)     rec.updateBinaryRepresenation();
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  if (updatePos == values.length)   rec.updateBinaryRepresenation();
  testAllRetrievalMethods(rec,permutation2,values);
  rec=new PactRecord();
  for (int i=0; i < values.length; i++) {
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  rec.write(writer);
  rec=new PactRecord();
  rec.read(reader);
  testAllRetrievalMethods(rec,permutation2,values);
  rec=new PactRecord();
  for (int i=0; i < values.length; i++) {
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  rec.write(writer);
  rec.read(reader);
  testAllRetrievalMethods(rec,permutation2,values);
  rec=new PactRecord();
  updatePos=rnd.nextInt(values.length + 1);
  for (int i=0; i < values.length; i++) {
    if (i == updatePos) {
      rec.write(writer);
      rec=new PactRecord();
      rec.read(reader);
    }
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  if (updatePos == values.length) {
    rec.write(writer);
    rec=new PactRecord();
    rec.read(reader);
  }
  testAllRetrievalMethods(rec,permutation2,values);
  rec=new PactRecord();
  updatePos=rnd.nextInt(values.length + 1);
  for (int i=0; i < values.length; i++) {
    if (i == updatePos) {
      rec.write(writer);
      rec.read(reader);
    }
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  if (updatePos == values.length) {
    rec.write(writer);
    rec.read(reader);
  }
  testAllRetrievalMethods(rec,permutation2,values);
  rec=new PactRecord();
  updatePos=rnd.nextInt(values.length + 1);
  for (int i=0; i < values.length; i++) {
    if (i == updatePos) {
      rec.write(writer);
      rec=new PactRecord();
      rec.read(reader);
    }
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  rec.write(writer);
  rec=new PactRecord();
  rec.read(reader);
  testAllRetrievalMethods(rec,permutation2,values);
  rec=new PactRecord();
  updatePos=rnd.nextInt(values.length + 1);
  for (int i=0; i < values.length; i++) {
    if (i == updatePos) {
      rec.write(writer);
      rec.read(reader);
    }
    final int pos=permutation1[i];
    rec.setField(pos,values[pos]);
  }
  rec.write(writer);
  rec.read(reader);
  testAllRetrievalMethods(rec,permutation2,values);
}
