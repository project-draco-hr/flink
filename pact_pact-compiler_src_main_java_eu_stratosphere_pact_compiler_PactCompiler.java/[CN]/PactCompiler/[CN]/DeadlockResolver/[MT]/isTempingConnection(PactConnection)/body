{
  if (conn.getTempMode() != TempMode.NONE) {
    return true;
  }
switch (conn.getTargetPact().getPactType()) {
case Reduce:
switch (conn.getTargetPact().getLocalStrategy()) {
case SORT:
      return true;
  }
return true;
case Match:
int inConnIdx=conn.getTargetPact().getIncomingConnections().indexOf(conn);
switch (conn.getTargetPact().getLocalStrategy()) {
case SORT_BOTH_MERGE:
return true;
case SORT_FIRST_MERGE:
if (inConnIdx == 0) return true;
return false;
case SORT_SECOND_MERGE:
if (inConnIdx == 1) return true;
return false;
case HYBRIDHASH_FIRST:
if (inConnIdx == 0) return true;
return false;
case HYBRIDHASH_SECOND:
if (inConnIdx == 1) return true;
return false;
case MMHASH_FIRST:
if (inConnIdx == 0) return true;
return false;
case MMHASH_SECOND:
if (inConnIdx == 1) return true;
return false;
default :
return false;
}
case Cross:
inConnIdx=conn.getTargetPact().getIncomingConnections().indexOf(conn);
switch (conn.getTargetPact().getLocalStrategy()) {
case NESTEDLOOP_BLOCKED_OUTER_SECOND:
if (inConnIdx == 0) return true;
return false;
case NESTEDLOOP_STREAMED_OUTER_SECOND:
if (inConnIdx == 0) return true;
return false;
case NESTEDLOOP_BLOCKED_OUTER_FIRST:
if (inConnIdx == 1) return true;
return false;
case NESTEDLOOP_STREAMED_OUTER_FIRST:
if (inConnIdx == 1) return true;
return false;
}
case Cogroup:
inConnIdx=conn.getTargetPact().getIncomingConnections().indexOf(conn);
switch (conn.getTargetPact().getLocalStrategy()) {
case SORT_BOTH_MERGE:
return true;
case SORT_FIRST_MERGE:
if (inConnIdx == 0) return true;
return false;
case SORT_SECOND_MERGE:
if (inConnIdx == 1) return true;
return false;
}
default :
return false;
}
}
