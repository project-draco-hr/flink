{
  if (this.con2node.containsKey(c)) {
    return false;
  }
  final OptimizerNode n;
  if (c instanceof GenericDataSink) {
    DataSinkNode dsn=new DataSinkNode((GenericDataSink)c);
    this.sinks.add(dsn);
    n=dsn;
  }
 else   if (c instanceof GenericDataSource) {
    DataSourceNode dsn=new DataSourceNode((GenericDataSource<?>)c);
    this.sources.add(dsn);
    n=dsn;
  }
 else   if (c instanceof GenericMapContract) {
    n=new MapNode((GenericMapContract<?>)c);
  }
 else   if (c instanceof GenericReduceContract) {
    n=new ReduceNode((GenericReduceContract<?>)c);
  }
 else   if (c instanceof GenericMatchContract) {
    n=new MatchNode((GenericMatchContract<?>)c);
  }
 else   if (c instanceof GenericCoGroupContract) {
    n=new CoGroupNode((GenericCoGroupContract<?>)c);
  }
 else   if (c instanceof GenericCrossContract) {
    n=new CrossNode((GenericCrossContract<?>)c);
  }
 else   if (c instanceof BulkIteration) {
    BulkIteration iter=(BulkIteration)c;
    n=new BulkIterationNode(iter);
  }
 else   if (c instanceof PartialSolutionPlaceHolder) {
    final PartialSolutionPlaceHolder holder=(PartialSolutionPlaceHolder)c;
    final BulkIteration enclosingIteration=holder.getContainingBulkIteration();
    final BulkIterationNode containingIterationNode=(BulkIterationNode)this.parent.con2node.get(enclosingIteration);
    PartialSolutionNode p=new PartialSolutionNode(holder,containingIterationNode);
    p.copyEstimates(containingIterationNode);
    n=p;
  }
 else {
    throw new IllegalArgumentException("Unknown contract type.");
  }
  this.con2node.put(c,n);
  this.numMemoryConsumers+=n.isMemoryConsumer() ? 1 : 0;
  int par=c.getDegreeOfParallelism();
  par=par >= 1 ? par : this.defaultParallelism;
  if (n.getDegreeOfParallelism() < 1) {
    n.setDegreeOfParallelism(par);
  }
  int tasksPerInstance=1;
  if (this.maxMachines > 0) {
    int p=n.getDegreeOfParallelism();
    tasksPerInstance=(p / this.maxMachines) + (p % this.maxMachines == 0 ? 0 : 1);
  }
  n.setSubtasksPerInstance(tasksPerInstance);
  return true;
}
