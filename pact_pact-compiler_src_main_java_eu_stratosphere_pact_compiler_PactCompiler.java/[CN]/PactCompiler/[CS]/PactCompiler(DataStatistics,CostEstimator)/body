{
  this.statistics=stats;
  this.costEstimator=estimator;
  Configuration config=GlobalConfiguration.getConfiguration();
  String instanceDescr=config.getString(PactConfigConstants.DEFAULT_INSTANCE_TYPE_KEY,PactConfigConstants.DEFAULT_INSTANCE_TYPE_DESCRIPTION);
  InstanceType type=null;
  try {
    type=InstanceType.getTypeFromString(instanceDescr);
  }
 catch (  IllegalArgumentException iaex) {
    LOG.error("Invalid description of standard instance type in PACT configuration: " + instanceDescr,iaex);
    type=InstanceType.getTypeFromString(PactConfigConstants.DEFAULT_INSTANCE_TYPE_DESCRIPTION);
  }
  this.pactInstanceType=type;
  int defaultParallelizationDegree=config.getInteger(PactConfigConstants.DEFAULT_PARALLELIZATION_DEGREE_KEY,PactConfigConstants.DEFAULT_PARALLELIZATION_DEGREE);
  if (defaultParallelizationDegree < 1) {
    defaultParallelizationDegree=PactConfigConstants.DEFAULT_PARALLELIZATION_DEGREE;
  }
  this.defaultDegreeOfParallelism=defaultParallelizationDegree;
  int defaultInNodePar=config.getInteger(PactConfigConstants.DEFAULT_PARALLELIZATION_INTRA_NODE_DEGREE_KEY,PactConfigConstants.DEFAULT_INTRA_NODE_PARALLELIZATION_DEGREE);
  if (defaultInNodePar < 1) {
    defaultInNodePar=PactConfigConstants.DEFAULT_INTRA_NODE_PARALLELIZATION_DEGREE;
  }
  this.defaultIntraNodeParallelism=defaultInNodePar;
  int memory=config.getInteger(ConfigConstants.MEMORY_MANAGER_AVAILABLE_MEMORY_SIZE_KEY,-1);
  if (memory == -1) {
    String frac=config.getString(ConfigConstants.MEMORY_MANAGER_AVAILABLE_MEMORY_FRACTION_KEY,String.valueOf(ConfigConstants.DEFAULT_MEMORY_MANAGER_AVAILABLE_MEMORY_FRACTION));
    float fraction;
    try {
      fraction=Float.parseFloat(frac);
    }
 catch (    NumberFormatException nfex) {
      fraction=ConfigConstants.DEFAULT_MEMORY_MANAGER_AVAILABLE_MEMORY_FRACTION;
    }
    memory=(int)(pactInstanceType.getMemorySize() * fraction);
  }
  this.memoryPerInstance=memory;
}
