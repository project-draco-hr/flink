{
  if (!alreadyDone.add(node)) {
    return;
  }
  if (node instanceof SinkPlanNode) {
    SinkPlanNode sn=(SinkPlanNode)node;
    Channel inchannel=sn.getInput();
    traverseChannel(inchannel);
  }
 else   if (node instanceof SourcePlanNode) {
    TypeInformation<?> typeInfo=getTypeInfoFromSource((SourcePlanNode)node);
    ((SourcePlanNode)node).setSerializer(createSerializer(typeInfo));
  }
 else   if (node instanceof BulkIterationPlanNode) {
    BulkIterationPlanNode iterationNode=(BulkIterationPlanNode)node;
    if (iterationNode.getRootOfStepFunction() instanceof NAryUnionPlanNode) {
      throw new CompilerException("Optimizer cannot compile an iteration step function where next partial solution is created by a Union node.");
    }
    if (iterationNode.getRootOfTerminationCriterion() != null) {
      SingleInputPlanNode addMapper=(SingleInputPlanNode)iterationNode.getRootOfTerminationCriterion();
      traverseChannel(addMapper.getInput());
    }
    BulkIterationBase<?> operator=(BulkIterationBase<?>)iterationNode.getProgramOperator();
    iterationNode.setSerializerForIterationChannel(createSerializer(operator.getOperatorInfo().getOutputType()));
    traverseChannel(iterationNode.getInput());
    traverse(iterationNode.getRootOfStepFunction());
  }
 else   if (node instanceof WorksetIterationPlanNode) {
    WorksetIterationPlanNode iterationNode=(WorksetIterationPlanNode)node;
    if (iterationNode.getNextWorkSetPlanNode() instanceof NAryUnionPlanNode) {
      throw new CompilerException("Optimizer cannot compile a workset iteration step function where the next workset is produced by a Union node.");
    }
    if (iterationNode.getSolutionSetDeltaPlanNode() instanceof NAryUnionPlanNode) {
      throw new CompilerException("Optimizer cannot compile a workset iteration step function where the solution set delta is produced by a Union node.");
    }
    DeltaIterationBase<?,?> operator=(DeltaIterationBase<?,?>)iterationNode.getProgramOperator();
    iterationNode.setSolutionSetSerializer(createSerializer(operator.getOperatorInfo().getFirstInputType()));
    iterationNode.setWorksetSerializer(createSerializer(operator.getOperatorInfo().getSecondInputType()));
    iterationNode.setSolutionSetComparator(createComparator(operator.getOperatorInfo().getFirstInputType(),iterationNode.getSolutionSetKeyFields(),getSortOrders(iterationNode.getSolutionSetKeyFields(),null)));
    traverseChannel(iterationNode.getInput1());
    traverseChannel(iterationNode.getInput2());
    traverse(iterationNode.getSolutionSetDeltaPlanNode());
    traverse(iterationNode.getNextWorkSetPlanNode());
  }
 else   if (node instanceof SingleInputPlanNode) {
    SingleInputPlanNode sn=(SingleInputPlanNode)node;
    if (!(sn.getOptimizerNode().getOperator() instanceof SingleInputOperator)) {
      if (sn.getOptimizerNode().getOperator() instanceof NoOpUnaryUdfOp) {
        traverseChannel(sn.getInput());
        return;
      }
 else {
        throw new RuntimeException("Wrong operator type found in post pass.");
      }
    }
    SingleInputOperator<?,?,?> singleInputOperator=(SingleInputOperator<?,?,?>)sn.getOptimizerNode().getOperator();
    for (int i=0; i < sn.getDriverStrategy().getNumRequiredComparators(); i++) {
      sn.setComparator(createComparator(singleInputOperator.getOperatorInfo().getInputType(),sn.getKeys(i),getSortOrders(sn.getKeys(i),sn.getSortOrders(i))),i);
    }
    traverseChannel(sn.getInput());
    for (    Channel c : sn.getBroadcastInputs()) {
      traverseChannel(c);
    }
  }
 else   if (node instanceof DualInputPlanNode) {
    DualInputPlanNode dn=(DualInputPlanNode)node;
    if (!(dn.getOptimizerNode().getOperator() instanceof DualInputOperator)) {
      throw new RuntimeException("Wrong operator type found in post pass.");
    }
    DualInputOperator<?,?,?,?> dualInputOperator=(DualInputOperator<?,?,?,?>)dn.getOptimizerNode().getOperator();
    if (dn.getDriverStrategy().getNumRequiredComparators() > 0) {
      dn.setComparator1(createComparator(dualInputOperator.getOperatorInfo().getFirstInputType(),dn.getKeysForInput1(),getSortOrders(dn.getKeysForInput1(),dn.getSortOrders())));
      dn.setComparator2(createComparator(dualInputOperator.getOperatorInfo().getSecondInputType(),dn.getKeysForInput2(),getSortOrders(dn.getKeysForInput2(),dn.getSortOrders())));
      dn.setPairComparator(createPairComparator(dualInputOperator.getOperatorInfo().getFirstInputType(),dualInputOperator.getOperatorInfo().getSecondInputType()));
    }
    traverseChannel(dn.getInput1());
    traverseChannel(dn.getInput2());
    for (    Channel c : dn.getBroadcastInputs()) {
      traverseChannel(c);
    }
  }
 else   if (node instanceof BulkPartialSolutionPlanNode || node instanceof SolutionSetPlanNode || node instanceof WorksetPlanNode) {
  }
 else   if (node instanceof NAryUnionPlanNode) {
    for (    Channel channel : node.getInputs()) {
      traverseChannel(channel);
    }
  }
 else {
    throw new CompilerPostPassException("Unknown node type encountered: " + node.getClass().getName());
  }
}
