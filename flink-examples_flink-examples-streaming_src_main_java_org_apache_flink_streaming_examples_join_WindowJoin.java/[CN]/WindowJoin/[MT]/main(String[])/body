{
  if (!parseParameters(args)) {
    return;
  }
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  Tuple2<DataStream<Tuple3<Long,String,Integer>>,DataStream<Tuple3<Long,String,Integer>>> input=getInputStreams(env);
  DataStream<Tuple3<Long,String,Integer>> grades=input.f0;
  DataStream<Tuple3<Long,String,Integer>> salaries=input.f1;
  grades=grades.assignTimestamps(new MyTimestampExtractor());
  salaries=salaries.assignTimestamps(new MyTimestampExtractor());
  DataStream<Tuple3<String,Integer,Integer>> joinedStream=grades.join(salaries).where(new NameKeySelector()).equalTo(new NameKeySelector()).window(TumblingTimeWindows.of(Time.of(5,TimeUnit.MILLISECONDS))).apply(new MyJoinFunction());
  if (fileOutput) {
    joinedStream.writeAsText(outputPath);
  }
 else {
    joinedStream.print();
  }
  env.execute("Windowed Join Example");
}
