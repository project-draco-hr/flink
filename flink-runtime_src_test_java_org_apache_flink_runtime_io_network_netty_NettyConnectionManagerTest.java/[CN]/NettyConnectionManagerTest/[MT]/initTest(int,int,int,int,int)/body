{
  final InetAddress bindAddress=InetAddress.getLocalHost();
  final int bindPort=20000;
  final int bufferSize=32 * 1024;
  senderManager=Mockito.spy(new NettyConnectionManager(bindAddress,bindPort,bufferSize,numInThreads,numOutThreads,closeAfterIdleForMs));
  receiverManager=new NettyConnectionManager(bindAddress,bindPort + 1,bufferSize,numInThreads,numOutThreads,closeAfterIdleForMs);
  channelManager=Mockito.mock(ChannelManager.class);
  senderManager.start(channelManager);
  receiverManager.start(channelManager);
  receivers=new RemoteReceiver[numProducers];
  for (int i=0; i < numProducers; i++) {
    receivers[i]=new RemoteReceiver(new InetSocketAddress(bindPort + 1),i);
  }
  receivedAllEnvelopesLatch=new CountDownLatch(numProducers);
  final ConcurrentMap<ChannelID,Integer> receivedSequenceNums=new ConcurrentHashMap<ChannelID,Integer>();
  Mockito.doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      final Envelope env=(Envelope)invocation.getArguments()[0];
      final int currentSeqNum=env.getSequenceNumber();
      final ChannelID cid=env.getSource();
      if (currentSeqNum < 0 || currentSeqNum >= numEnvelopesPerProducer) {
        Assert.fail("Received more envelopes than expected from " + cid);
      }
      Integer previousSeqNum=receivedSequenceNums.put(cid,currentSeqNum);
      if (previousSeqNum != null) {
        String errMsg=String.format("Received %s with unexpected sequence number.",env);
        Assert.assertEquals(errMsg,previousSeqNum + 1,currentSeqNum);
      }
      if (currentSeqNum == numEnvelopesPerProducer - 1) {
        receivedAllEnvelopesLatch.countDown();
      }
      return null;
    }
  }
).when(channelManager).dispatchFromNetwork(Matchers.any(Envelope.class));
}
