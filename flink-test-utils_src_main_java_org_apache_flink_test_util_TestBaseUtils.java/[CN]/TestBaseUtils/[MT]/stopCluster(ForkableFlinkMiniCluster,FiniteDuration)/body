{
  if (logDir != null) {
    FileUtils.deleteDirectory(logDir);
  }
  if (executor != null) {
    int numUnreleasedBCVars=0;
    int numActiveConnections=0;
{
      List<ActorRef> tms=executor.getTaskManagersAsJava();
      List<Future<Object>> bcVariableManagerResponseFutures=new ArrayList<Future<Object>>();
      List<Future<Object>> numActiveConnectionsResponseFutures=new ArrayList<Future<Object>>();
      for (      ActorRef tm : tms) {
        bcVariableManagerResponseFutures.add(Patterns.ask(tm,TestingTaskManagerMessages.RequestBroadcastVariablesWithReferences$.MODULE$,new Timeout(timeout)));
        numActiveConnectionsResponseFutures.add(Patterns.ask(tm,TestingTaskManagerMessages.RequestNumActiveConnections$.MODULE$,new Timeout(timeout)));
      }
      Future<Iterable<Object>> bcVariableManagerFutureResponses=Futures.sequence(bcVariableManagerResponseFutures,TestingUtils.defaultExecutionContext());
      Iterable<Object> responses=Await.result(bcVariableManagerFutureResponses,timeout);
      for (      Object response : responses) {
        numUnreleasedBCVars+=((TestingTaskManagerMessages.ResponseBroadcastVariablesWithReferences)response).number();
      }
      Future<Iterable<Object>> numActiveConnectionsFutureResponses=Futures.sequence(numActiveConnectionsResponseFutures,TestingUtils.defaultExecutionContext());
      responses=Await.result(numActiveConnectionsFutureResponses,timeout);
      for (      Object response : responses) {
        numActiveConnections+=((TestingTaskManagerMessages.ResponseNumActiveConnections)response).number();
      }
    }
    executor.stop();
    FileSystem.closeAll();
    System.gc();
    Assert.assertEquals("Not all broadcast variables were released.",0,numUnreleasedBCVars);
    Assert.assertEquals("Not all TCP connections were released.",0,numActiveConnections);
  }
}
