{
  try {
    final ClosableBlockingQueue<Integer> queue=new ClosableBlockingQueue<>();
    final AtomicReference<Throwable> pushErrorRef=new AtomicReference<>();
    final AtomicReference<Throwable> pollErrorRef=new AtomicReference<>();
    final int numElements=2000;
    Thread pusher=new Thread("pusher"){
      @Override public void run(){
        try {
          final Random rnd=new Random();
          for (int i=0; i < numElements; i++) {
            queue.add(i);
            int sleepTime=rnd.nextInt(3);
            if (sleepTime > 1) {
              Thread.sleep(sleepTime);
            }
          }
          while (true) {
            if (queue.close()) {
              break;
            }
 else {
              Thread.sleep(5);
            }
          }
        }
 catch (        Throwable t) {
          pushErrorRef.set(t);
        }
      }
    }
;
    pusher.start();
    Thread poller=new Thread("poller"){
      @SuppressWarnings("InfiniteLoopStatement") @Override public void run(){
        try {
          int count=0;
          try {
            final Random rnd=new Random();
            int nextExpected=0;
            while (true) {
              int getMethod=count % 7;
switch (getMethod) {
case 0:
{
                  Integer next=queue.getElementBlocking(1);
                  if (next != null) {
                    assertEquals(nextExpected,next.intValue());
                    nextExpected++;
                    count++;
                  }
                  break;
                }
case 1:
{
                List<Integer> nextList=queue.getBatchBlocking();
                for (                Integer next : nextList) {
                  assertNotNull(next);
                  assertEquals(nextExpected,next.intValue());
                  nextExpected++;
                  count++;
                }
                break;
              }
case 2:
{
              List<Integer> nextList=queue.getBatchBlocking(1);
              if (nextList != null) {
                for (                Integer next : nextList) {
                  assertNotNull(next);
                  assertEquals(nextExpected,next.intValue());
                  nextExpected++;
                  count++;
                }
              }
              break;
            }
case 3:
{
            Integer next=queue.poll();
            if (next != null) {
              assertEquals(nextExpected,next.intValue());
              nextExpected++;
              count++;
            }
            break;
          }
case 4:
{
          List<Integer> nextList=queue.pollBatch();
          if (nextList != null) {
            for (            Integer next : nextList) {
              assertNotNull(next);
              assertEquals(nextExpected,next.intValue());
              nextExpected++;
              count++;
            }
          }
          break;
        }
default :
{
        Integer next=queue.getElementBlocking();
        assertNotNull(next);
        assertEquals(nextExpected,next.intValue());
        nextExpected++;
        count++;
      }
  }
  int sleepTime=rnd.nextInt(3);
  if (sleepTime > 1) {
    Thread.sleep(sleepTime);
  }
}
}
 catch (IllegalStateException e) {
assertEquals(numElements,count);
}
}
 catch (Throwable t) {
pollErrorRef.set(t);
}
}
}
;
poller.start();
pusher.join();
poller.join();
if (pushErrorRef.get() != null) {
Throwable t=pushErrorRef.get();
t.printStackTrace();
fail("Error in pusher: " + t.getMessage());
}
if (pollErrorRef.get() != null) {
Throwable t=pollErrorRef.get();
t.printStackTrace();
fail("Error in poller: " + t.getMessage());
}
}
 catch (Exception e) {
e.printStackTrace();
fail(e.getMessage());
}
}
