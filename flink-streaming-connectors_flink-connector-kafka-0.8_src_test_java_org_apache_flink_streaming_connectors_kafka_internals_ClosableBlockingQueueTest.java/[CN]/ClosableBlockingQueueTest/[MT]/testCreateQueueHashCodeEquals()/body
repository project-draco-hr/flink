{
  try {
    ClosableBlockingQueue<String> queue1=new ClosableBlockingQueue<>();
    ClosableBlockingQueue<String> queue2=new ClosableBlockingQueue<>(22);
    assertTrue(queue1.isOpen());
    assertTrue(queue2.isOpen());
    assertTrue(queue1.isEmpty());
    assertTrue(queue2.isEmpty());
    assertEquals(0,queue1.size());
    assertEquals(0,queue2.size());
    assertTrue(queue1.hashCode() == queue2.hashCode());
    assertTrue(queue1.equals(queue1));
    assertTrue(queue2.equals(queue2));
    assertTrue(queue1.equals(queue2));
    assertNotNull(queue1.toString());
    assertNotNull(queue2.toString());
    List<String> elements=new ArrayList<>();
    elements.add("a");
    elements.add("b");
    elements.add("c");
    ClosableBlockingQueue<String> queue3=new ClosableBlockingQueue<>(elements);
    ClosableBlockingQueue<String> queue4=new ClosableBlockingQueue<>(asList("a","b","c"));
    assertTrue(queue3.isOpen());
    assertTrue(queue4.isOpen());
    assertFalse(queue3.isEmpty());
    assertFalse(queue4.isEmpty());
    assertEquals(3,queue3.size());
    assertEquals(3,queue4.size());
    assertTrue(queue3.hashCode() == queue4.hashCode());
    assertTrue(queue3.equals(queue3));
    assertTrue(queue4.equals(queue4));
    assertTrue(queue3.equals(queue4));
    assertNotNull(queue3.toString());
    assertNotNull(queue4.toString());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
