{
  fitsIntoMem=true;
  ArrayList<Buffer.Output> outputBuffers=new ArrayList<Buffer.Output>(nrOfBuffers);
  for (  MemorySegment segment : memorySegments) {
    Buffer.Output out=new Buffer.Output();
    out.bind(segment);
    outputBuffers.add(out);
  }
  while (recordReader.hasNext()) {
    next=recordReader.next();
    count++;
    if (!outputBuffers.get(currentBuffer).write(next)) {
      currentBuffer++;
      if (currentBuffer == nrOfBuffers) {
        fitsIntoMem=false;
        break;
      }
      outputBuffers.get(currentBuffer).write(next);
    }
  }
  if (!fitsIntoMem) {
    bufferID=this.ioManager.createChannel();
    ChannelWriter writer=ioManager.createChannelWriter(bufferID,outputBuffers,true);
    writer.write(next);
    while (recordReader.hasNext()) {
      count++;
      writer.write(recordReader.next());
    }
    writer.close();
    ioReader=ioManager.createChannelReader(bufferID,memorySegments);
    LOG.debug("Iterator opened, serialized " + count + " objects to disk.");
  }
 else {
    usedBuffers=currentBuffer + 1;
    inputBuffers=new ArrayList<Buffer.Input>(nrOfBuffers);
    for (    Buffer.Output out : outputBuffers) {
      int offset=out.getPosition();
      MemorySegment segment=out.unbind();
      Buffer.Input in=new Buffer.Input();
      in.bind(segment);
      in.reset(offset);
      inputBuffers.add(in);
    }
    currentBuffer=0;
    LOG.debug("Iterator opened, serialized " + count + " objects to memory.");
  }
  count=0;
  next=null;
}
