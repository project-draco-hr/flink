{
  fitsIntoMem=true;
  ArrayList<Buffer.Output> outputBuffers=new ArrayList<Buffer.Output>(this.numBuffers);
  for (  MemorySegment segment : memorySegments) {
    Buffer.Output out=new Buffer.Output(segment);
    outputBuffers.add(out);
  }
  T nextRecord=null;
  while (this.input.hasNext() && !this.abortFlag) {
    nextRecord=this.input.next();
    count++;
    if (!outputBuffers.get(currentBuffer).write(nextRecord)) {
      currentBuffer++;
      if (currentBuffer == this.numBuffers) {
        fitsIntoMem=false;
        break;
      }
      outputBuffers.get(currentBuffer).write(nextRecord);
    }
  }
  if (!fitsIntoMem) {
    bufferID=this.ioManager.createChannel();
    ChannelWriter writer=ioManager.createChannelWriter(bufferID,outputBuffers,true);
    writer.write(nextRecord);
    while (input.hasNext() && !this.abortFlag) {
      count++;
      writer.write(input.next());
    }
    writer.close();
    ioReader=ioManager.createChannelReader(bufferID,memorySegments,false);
    if (LOG.isDebugEnabled())     LOG.debug("Iterator opened, serialized " + count + " objects to disk.");
  }
 else {
    usedBuffers=currentBuffer + 1;
    inputBuffers=new ArrayList<Buffer.Input>(this.numBuffers);
    for (    Buffer.Output out : outputBuffers) {
      int offset=out.getPosition();
      MemorySegment segment=out.dispose();
      Buffer.Input in=new Buffer.Input(segment);
      in.reset(offset);
      inputBuffers.add(in);
    }
    currentBuffer=0;
    if (LOG.isDebugEnabled())     LOG.debug("Iterator opened, serialized " + count + " objects to memory.");
  }
  count=0;
  if (this.abortFlag) {
    this.close();
  }
}
