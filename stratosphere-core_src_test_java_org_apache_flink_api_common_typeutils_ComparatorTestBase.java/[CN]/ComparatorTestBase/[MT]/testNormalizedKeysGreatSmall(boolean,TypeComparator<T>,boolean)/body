{
  try {
    T[] data=getSortedData();
    int normKeyLen=getNormKeyLen(halfLength,data,comparator);
    MemorySegment memSegLow=setupNormalizedKeysMemSegment(data,normKeyLen,comparator);
    MemorySegment memSegHigh=setupNormalizedKeysMemSegment(data,normKeyLen,comparator);
    boolean fullyDetermines=!comparator.isNormalizedKeyPrefixOnly(normKeyLen);
    for (int l=0; l < data.length - 1; l++) {
      for (int h=l + 1; h < data.length; h++) {
        int cmp;
        if (greater) {
          cmp=MemorySegment.compare(memSegLow,memSegHigh,l * normKeyLen,h * normKeyLen,normKeyLen);
          if (fullyDetermines) {
            assertTrue(cmp < 0);
          }
 else {
            assertTrue(cmp <= 0);
          }
        }
 else {
          cmp=MemorySegment.compare(memSegHigh,memSegLow,h * normKeyLen,l * normKeyLen,normKeyLen);
          if (fullyDetermines) {
            assertTrue(cmp > 0);
          }
 else {
            assertTrue(cmp >= 0);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Exception in test: " + e.getMessage());
  }
}
