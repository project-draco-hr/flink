{
  Deadline deadline=TEST_TIMEOUT.fromNow();
  AtomicKvStateRequestStats stats=new AtomicKvStateRequestStats();
  KvStateClient client=null;
  Channel serverChannel=null;
  try {
    client=new KvStateClient(1,stats);
    final AtomicBoolean received=new AtomicBoolean();
    final AtomicReference<Channel> channel=new AtomicReference<>();
    serverChannel=createServerChannel(new ChannelInboundHandlerAdapter(){
      @Override public void channelActive(      ChannelHandlerContext ctx) throws Exception {
        channel.set(ctx.channel());
      }
      @Override public void channelRead(      ChannelHandlerContext ctx,      Object msg) throws Exception {
        received.set(true);
      }
    }
);
    KvStateServerAddress serverAddress=getKvStateServerAddress(serverChannel);
    Future<byte[]> future=client.getKvState(serverAddress,new KvStateID(),new byte[0]);
    while (!received.get() && deadline.hasTimeLeft()) {
      Thread.sleep(50);
    }
    assertTrue("Receive timed out",received.get());
    assertEquals(1,stats.getNumConnections());
    channel.get().close().await(deadline.timeLeft().toMillis(),TimeUnit.MILLISECONDS);
    try {
      Await.result(future,deadline.timeLeft());
      fail("Did not throw expected server failure");
    }
 catch (    ClosedChannelException ignored) {
    }
    assertEquals(0,stats.getNumConnections());
    while (deadline.hasTimeLeft() && (stats.getNumSuccessful() != 0 || stats.getNumFailed() != 1)) {
      Thread.sleep(100);
    }
    assertEquals(1,stats.getNumRequests());
    assertEquals(0,stats.getNumSuccessful());
    assertEquals(1,stats.getNumFailed());
  }
  finally {
    if (client != null) {
      client.shutDown();
    }
    if (serverChannel != null) {
      serverChannel.close();
    }
    assertEquals("Channel leak",0,stats.getNumConnections());
  }
}
