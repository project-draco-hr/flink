{
  DataStream<R> returnStream=new DataStreamSink<R>(environment,"iterationSink");
  jobGraphBuilder.addIterationSink(returnStream.getId(),iterationTail.getId(),iterationID.toString(),iterationTail.getParallelism(),iterationName);
  jobGraphBuilder.setIterationSourceParallelism(iterationID.toString(),iterationTail.getParallelism());
  if (iterationTail instanceof ConnectedDataStream) {
    for (    DataStream<T> stream : ((ConnectedDataStream<T>)iterationTail).connectedStreams) {
      String inputID=stream.getId();
      jobGraphBuilder.setEdge(inputID,returnStream.getId(),new ForwardPartitioner<T>(),0);
    }
  }
 else {
    jobGraphBuilder.setEdge(iterationTail.getId(),returnStream.getId(),new ForwardPartitioner<T>(),0);
  }
  return iterationTail;
}
