{
  final long currentTime=System.currentTimeMillis();
synchronized (this.collectedEvents) {
    final Iterator<JobID> it=this.collectedEvents.keySet().iterator();
    while (it.hasNext()) {
      final JobID jobID=it.next();
      final List<AbstractEvent> eventList=this.collectedEvents.get(jobID);
      if (eventList == null) {
        continue;
      }
      final Iterator<AbstractEvent> it2=eventList.iterator();
      while (it2.hasNext()) {
        final AbstractEvent event=it2.next();
        if ((event.getTimestamp() + this.timerTaskInterval) < currentTime) {
          archiveEvent(jobID,event);
          it2.remove();
        }
      }
      if (eventList.isEmpty()) {
        it.remove();
      }
    }
  }
synchronized (this.recentJobs) {
    final Iterator<Map.Entry<JobID,RecentJobEvent>> it=this.recentJobs.entrySet().iterator();
    while (it.hasNext()) {
      final Map.Entry<JobID,RecentJobEvent> entry=it.next();
      final JobStatus jobStatus=entry.getValue().getJobStatus();
      if (jobStatus != JobStatus.FINISHED && jobStatus != JobStatus.CANCELED && jobStatus != JobStatus.FINISHED) {
        continue;
      }
      if ((entry.getValue().getTimestamp() + this.timerTaskInterval) < currentTime) {
        archiveJobevent(entry.getKey(),entry.getValue());
        it.remove();
synchronized (this.recentManagementGraphs) {
          archiveManagementGraph(entry.getKey(),this.recentManagementGraphs.get(entry.getKey()));
          this.recentManagementGraphs.remove(entry.getValue());
        }
synchronized (this.recentNetworkTopologies) {
          archiveNetworkTopology(entry.getKey(),this.recentNetworkTopologies.get(entry.getKey()));
          this.recentNetworkTopologies.remove(entry.getValue());
        }
      }
    }
  }
}
