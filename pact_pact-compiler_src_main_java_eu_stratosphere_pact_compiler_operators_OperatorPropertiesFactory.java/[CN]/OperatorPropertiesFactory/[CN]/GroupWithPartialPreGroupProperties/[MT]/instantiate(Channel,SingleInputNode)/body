{
  if (in.getShipStrategy() == ShipStrategyType.FORWARD) {
    if (in.getLocalStrategy() == LocalStrategy.SORT) {
      if (!in.getLocalStrategyKeys().isValidUnorderedPrefix(this.keys)) {
        throw new RuntimeException("Bug: Inconsistent sort for group strategy.");
      }
      in.setLocalStrategy(LocalStrategy.COMBININGSORT);
    }
    return new SingleInputPlanNode(node,in,DriverStrategy.GROUP_OVER_ORDERED,this.keyList);
  }
 else {
    Channel toCombiner=new Channel(in.getSource());
    toCombiner.setShipStrategy(ShipStrategyType.FORWARD);
    SingleInputPlanNode combiner=new SingleInputPlanNode(node,toCombiner,DriverStrategy.PARTIAL_GROUP,this.keyList);
    combiner.setCosts(new Costs(0,0));
    Channel toReducer=new Channel(combiner);
    toReducer.setShipStrategy(in.getShipStrategy(),in.getShipStrategyKeys(),in.getShipStrategySortOrder());
    toReducer.setLocalStrategy(LocalStrategy.COMBININGSORT,in.getLocalStrategyKeys(),in.getLocalStrategySortOrder());
    return new SingleInputPlanNode(node,toReducer,DriverStrategy.GROUP_OVER_ORDERED,this.keyList);
  }
}
