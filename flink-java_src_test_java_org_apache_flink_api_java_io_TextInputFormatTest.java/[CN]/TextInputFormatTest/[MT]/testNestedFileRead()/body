{
  String[] dirs=new String[]{"tmp/first/","tmp/second/"};
  List<String> expectedFiles=new ArrayList<>();
  try {
    for (    String dir : dirs) {
      File tmpDir=new File(dir);
      if (!tmpDir.exists()) {
        tmpDir.mkdirs();
      }
      File tempFile=File.createTempFile("TextInputFormatTest",".tmp",tmpDir);
      tempFile.deleteOnExit();
      expectedFiles.add(new Path(tempFile.getAbsolutePath()).makeQualified(FileSystem.getLocalFileSystem()).toString());
    }
    File parentDir=new File("tmp");
    TextInputFormat inputFormat=new TextInputFormat(new Path(parentDir.toURI().toString()));
    inputFormat.setNestedFileEnumeration(true);
    inputFormat.setNumLineSamples(10);
    Configuration config=new Configuration();
    config.setBoolean("recursive.file.enumeration",false);
    config.setString("delimited-format.numSamples","20");
    inputFormat.configure(config);
    assertTrue(inputFormat.getNestedFileEnumeration());
    assertTrue(inputFormat.getNumLineSamples() == 10);
    FileInputSplit[] splits=inputFormat.createInputSplits(expectedFiles.size());
    List<String> paths=new ArrayList<>();
    for (    FileInputSplit split : splits) {
      paths.add(split.getPath().toString());
    }
    Collections.sort(expectedFiles);
    Collections.sort(paths);
    for (int i=0; i < expectedFiles.size(); i++) {
      assertTrue(expectedFiles.get(i).equals(paths.get(i)));
    }
  }
 catch (  Throwable t) {
    System.err.println("test failed with exception: " + t.getMessage());
    t.printStackTrace(System.err);
    fail("Test erroneous");
  }
}
