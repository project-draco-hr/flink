{
  File tmpOutPath=null;
  File tmpOutFile=null;
  try {
    tmpOutPath=File.createTempFile("fileOutputFormatTest","Test1");
    tmpOutFile=new File(tmpOutPath.getAbsolutePath() + "/1");
  }
 catch (  IOException e) {
    throw new RuntimeException("Test in error",e);
  }
  String tmpFilePath="file://" + tmpOutPath.getAbsolutePath();
  Configuration config=new Configuration();
  config.setString(FileOutputFormat.FILE_PARAMETER_KEY,tmpFilePath);
  config.setString(FileOutputFormat.WRITEMODE_PARAMETER_KEY,FileOutputFormat.WRITEMODE_OVERWRITE);
  config.setString(FileOutputFormat.OUT_DIRECTORY_PARAMETER_KEY,FileOutputFormat.OUT_DIRECTORY_PARONLY);
  DummyFileOutputFormat dfof=new DummyFileOutputFormat();
  dfof.configure(config);
  boolean exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
  tmpOutPath.delete();
  Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
  dfof=new DummyFileOutputFormat();
  dfof.configure(config);
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
  tmpOutPath.delete();
  dfof=new DummyFileOutputFormat();
  dfof.configure(config);
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isFile());
  config.setString(FileOutputFormat.OUT_DIRECTORY_PARAMETER_KEY,FileOutputFormat.OUT_DIRECTORY_ALWAYS);
  dfof=new DummyFileOutputFormat();
  dfof.configure(config);
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
  Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
  tmpOutFile.delete();
  tmpOutPath.delete();
  Assert.assertTrue("Directory could not be created.",tmpOutPath.mkdir());
  dfof=new DummyFileOutputFormat();
  dfof.configure(config);
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
  Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
  dfof=new DummyFileOutputFormat();
  dfof.configure(config);
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
  Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
  tmpOutFile.delete();
  tmpOutPath.delete();
  dfof=new DummyFileOutputFormat();
  dfof.configure(config);
  exception=false;
  try {
    dfof.open(0,1);
    dfof.close();
  }
 catch (  Exception e) {
    exception=true;
  }
  Assert.assertTrue(!exception);
  Assert.assertTrue(tmpOutPath.exists() && tmpOutPath.isDirectory());
  Assert.assertTrue(tmpOutFile.exists() && tmpOutFile.isFile());
  tmpOutFile.delete();
  tmpOutPath.delete();
}
