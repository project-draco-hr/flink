{
  try {
    final int parallelism=8;
    ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment(parallelism);
    DataSet<Tuple3<Double,StringValue,LongValue>> initialData=getSourceDataSet(env);
    initialData.reduce(new RichReduceFunction<Tuple3<Double,StringValue,LongValue>>(){
      public Tuple3<Double,StringValue,LongValue> reduce(      Tuple3<Double,StringValue,LongValue> value1,      Tuple3<Double,StringValue,LongValue> value2){
        return value1;
      }
    }
).output(new DiscardingOutputFormat<Tuple3<Double,StringValue,LongValue>>());
    Plan p=env.createProgramPlan();
    GenericDataSinkBase<?> sink=p.getDataSinks().iterator().next();
    ReduceOperatorBase<?,?> reducer=(ReduceOperatorBase<?,?>)sink.getInput();
    assertEquals(initialData.getType(),reducer.getOperatorInfo().getInputType());
    assertEquals(initialData.getType(),reducer.getOperatorInfo().getOutputType());
    assertTrue(reducer.getKeyColumns(0) == null || reducer.getKeyColumns(0).length == 0);
    assertTrue(reducer.getParallelism() == 1 || reducer.getParallelism() == -1);
    assertTrue(reducer.getInput() instanceof GenericDataSourceBase<?,?>);
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Test caused an error: " + e.getMessage());
  }
}
