{
  baos.reset();
  dos.writeInt(counters.size());
  dos.writeInt(gauges.size());
  dos.writeInt(histograms.size());
  dos.writeInt(meters.size());
  for (  Map.Entry<Counter,Tuple2<QueryScopeInfo,String>> entry : counters.entrySet()) {
    serializeMetricInfo(dos,entry.getValue().f0);
    serializeString(dos,entry.getValue().f1);
    serializeCounter(dos,entry.getKey());
  }
  for (  Map.Entry<Gauge<?>,Tuple2<QueryScopeInfo,String>> entry : gauges.entrySet()) {
    serializeMetricInfo(dos,entry.getValue().f0);
    serializeString(dos,entry.getValue().f1);
    serializeGauge(dos,entry.getKey());
  }
  for (  Map.Entry<Histogram,Tuple2<QueryScopeInfo,String>> entry : histograms.entrySet()) {
    serializeMetricInfo(dos,entry.getValue().f0);
    serializeString(dos,entry.getValue().f1);
    serializeHistogram(dos,entry.getKey());
  }
  for (  Map.Entry<Meter,Tuple2<QueryScopeInfo,String>> entry : meters.entrySet()) {
    serializeMetricInfo(dos,entry.getValue().f0);
    serializeString(dos,entry.getValue().f1);
    serializeMeter(dos,entry.getKey());
  }
  return baos.toByteArray();
}
