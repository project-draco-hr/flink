{
  JobManager jobManager=null;
  try {
    Constructor<JobManager> c=JobManager.class.getDeclaredConstructor(new Class[]{String.class,String.class});
    c.setAccessible(true);
    jobManager=c.newInstance(new Object[]{new String(System.getProperty("user.dir") + "/correct-conf"),new String("local")});
  }
 catch (  SecurityException e) {
    fail(e.getMessage());
  }
catch (  NoSuchMethodException e) {
    fail(e.getMessage());
  }
catch (  IllegalArgumentException e) {
    fail(e.getMessage());
  }
catch (  InstantiationException e) {
    fail(e.getMessage());
  }
catch (  IllegalAccessException e) {
    fail(e.getMessage());
  }
catch (  InvocationTargetException e) {
    fail(e.getMessage());
  }
  final JobManagerThread jobManagerThread=new JobManagerThread(jobManager);
  jobManagerThread.start();
  try {
    final String forwardClassName=ForwardTask.class.getSimpleName();
    final String inputFilename=getRandomFilename();
    final File inputFile=createInputFile(inputFilename);
    final File jarFile=createJarFile(forwardClassName);
    final JobGraph jg=new JobGraph("Job Graph 1");
    final JobFileInputVertex i1=new JobFileInputVertex("Input 1",jg);
    i1.setFileInputClass(FileLineReader.class);
    i1.setFilePath(new Path("file://" + getTempDir() + File.separator+ inputFilename));
    final JobTaskVertex t1=new JobTaskVertex("Task 1",jg);
    t1.setTaskClass(ForwardTask.class);
    final String outputFilename=getRandomFilename();
    JobFileOutputVertex o1=new JobFileOutputVertex("Output 1",jg);
    o1.setFileOutputClass(FileLineWriter.class);
    o1.setFilePath(new Path("file://" + getTempDir() + File.separator+ outputFilename));
    try {
      i1.connectTo(t1,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
      t1.connectTo(o1,ChannelType.INMEMORY,CompressionLevel.NO_COMPRESSION);
    }
 catch (    JobGraphDefinitionException e) {
      e.printStackTrace();
    }
    jg.addJar(new Path("file://" + getTempDir() + File.separator+ forwardClassName+ ".jar"));
    JobClient jobClient=new JobClient(jg);
    jobClient.submitJobAndWait();
    final char[] buffer=new char[INPUTCONTENT.toCharArray().length];
    FileReader fr=new FileReader(new File(getTempDir() + File.separator + outputFilename));
    fr.read(buffer);
    fr.close();
    assertEquals(INPUTCONTENT,new String(buffer));
    inputFile.delete();
    new File(getTempDir() + File.separator + outputFilename).delete();
    jarFile.delete();
  }
 catch (  IOException ioe) {
    fail(ioe.getMessage());
  }
 finally {
    jobManagerThread.interrupt();
    while (!jobManager.isShutDown()) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException i) {
        break;
      }
    }
  }
}
