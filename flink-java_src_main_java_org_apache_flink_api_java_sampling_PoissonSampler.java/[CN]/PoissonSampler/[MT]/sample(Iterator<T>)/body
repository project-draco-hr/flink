{
  if (fraction == 0) {
    return EMPTY_ITERABLE;
  }
  return new SampledIterator<T>(){
    T currentElement;
    int currentCount=0;
    @Override public boolean hasNext(){
      if (currentCount > 0) {
        return true;
      }
 else {
        moveToNextElement();
        if (currentCount > 0) {
          return true;
        }
 else {
          return false;
        }
      }
    }
    private void moveToNextElement(){
      while (input.hasNext()) {
        currentElement=input.next();
        currentCount=poissonDistribution.sample();
        if (currentCount > 0) {
          break;
        }
      }
    }
    @Override public T next(){
      if (currentCount == 0) {
        moveToNextElement();
      }
      if (currentCount == 0) {
        return null;
      }
 else {
        currentCount--;
        return currentElement;
      }
    }
  }
;
}
