{
  if (fraction == 0) {
    return EMPTY_ITERABLE;
  }
  return new SampledIterator<T>(){
    T currentElement;
    int currentCount=0;
    @Override public boolean hasNext(){
      if (currentCount > 0) {
        return true;
      }
 else {
        samplingProcess();
        if (currentCount > 0) {
          return true;
        }
 else {
          return false;
        }
      }
    }
    @Override public T next(){
      if (currentCount <= 0) {
        samplingProcess();
      }
      currentCount--;
      return currentElement;
    }
    public int poisson_ge1(    double p){
      double q=Math.pow(Math.E,-p);
      double t=q + (1 - q) * random.nextDouble();
      int k=1;
      t=t * random.nextDouble();
      while (t > q) {
        k++;
        t=t * random.nextDouble();
      }
      return k;
    }
    private void skipGapElements(    int num){
      int elementCount=0;
      while (input.hasNext() && elementCount < num) {
        currentElement=input.next();
        elementCount++;
      }
    }
    private void samplingProcess(){
      if (fraction <= THRESHOLD) {
        double u=Math.max(random.nextDouble(),EPSILON);
        int gap=(int)(Math.log(u) / -fraction);
        skipGapElements(gap);
        if (input.hasNext()) {
          currentElement=input.next();
          currentCount=poisson_ge1(fraction);
        }
      }
 else {
        while (input.hasNext()) {
          currentElement=input.next();
          currentCount=poissonDistribution.sample();
          if (currentCount > 0) {
            break;
          }
        }
      }
    }
  }
;
}
