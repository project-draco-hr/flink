{
  final int LARGE_SEGMENT_SIZE=1024 * 1024 * 1024;
  final byte[] largeSegment=new byte[LARGE_SEGMENT_SIZE];
  final ByteBuffer largeOffHeap=ByteBuffer.allocateDirect(LARGE_SEGMENT_SIZE);
  fillOnHeap(largeSegment,(byte)-1);
  fillOffHeap(largeOffHeap,(byte)-1);
  final MemorySegment coreHeap=HeapMemorySegment.FACTORY.wrapPooledHeapMemory(largeSegment,null);
  final MemorySegment coreHybridOnHeap=HybridMemorySegment.FACTORY.wrapPooledHeapMemory(largeSegment,null);
  final MemorySegment coreHybridOffHeap=HybridMemorySegment.FACTORY.wrapPooledOffHeapMemory(largeOffHeap,null);
  final PureHeapMemorySegment pureHeap=new PureHeapMemorySegment(largeSegment);
  final PureHybridMemorySegment pureHybridOnHeap=new PureHybridMemorySegment(largeSegment);
  final PureHybridMemorySegment pureHybridOffHeap=new PureHybridMemorySegment(largeOffHeap);
  final LongSerializer ser=LongSerializer.INSTANCE;
  final long innerRounds=LARGE_SEGMENT_SIZE / 8;
  final int outerRounds=10;
{
    System.out.println("testing core heap memory segment");
    ArrayList<MemorySegment> memory=new ArrayList<>();
    memory.add(coreHeap);
    ArrayList<MemorySegment> target=new ArrayList<>();
    CoreMemorySegmentOutView output=new CoreMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      for (long i=0; i < innerRounds; i++) {
        ser.serialize(i,output);
      }
      target.clear();
      memory.add(coreHeap);
      output.reset();
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Core heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing core hybrid on heap memory segment");
    ArrayList<MemorySegment> memory=new ArrayList<>();
    memory.add(coreHybridOnHeap);
    ArrayList<MemorySegment> target=new ArrayList<>();
    CoreMemorySegmentOutView output=new CoreMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      for (long i=0; i < innerRounds; i++) {
        ser.serialize(i,output);
      }
      target.clear();
      memory.add(coreHybridOnHeap);
      output.reset();
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Core hybrid on heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing core hybrid off heap memory segment");
    ArrayList<MemorySegment> memory=new ArrayList<>();
    memory.add(coreHybridOffHeap);
    ArrayList<MemorySegment> target=new ArrayList<>();
    CoreMemorySegmentOutView output=new CoreMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      for (long i=0; i < innerRounds; i++) {
        ser.serialize(i,output);
      }
      target.clear();
      memory.add(coreHybridOffHeap);
      output.reset();
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Core hybrid off heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing pure heap memory segment");
    ArrayList<PureHeapMemorySegment> memory=new ArrayList<>();
    memory.add(pureHeap);
    ArrayList<PureHeapMemorySegment> target=new ArrayList<>();
    PureHeapMemorySegmentOutView output=new PureHeapMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      for (long i=0; i < innerRounds; i++) {
        ser.serialize(i,output);
      }
      target.clear();
      memory.add(pureHeap);
      output.reset();
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Pure heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing pure hybrid memory segment on heap");
    ArrayList<PureHybridMemorySegment> memory=new ArrayList<>();
    memory.add(pureHybridOnHeap);
    ArrayList<PureHybridMemorySegment> target=new ArrayList<>();
    PureHybridMemorySegmentOutView output=new PureHybridMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      for (long i=0; i < innerRounds; i++) {
        ser.serialize(i,output);
      }
      target.clear();
      memory.add(pureHybridOnHeap);
      output.reset();
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Pure hybrid on heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
{
    System.out.println("testing pure hybrid memory segment off heap");
    ArrayList<PureHybridMemorySegment> memory=new ArrayList<>();
    memory.add(pureHybridOffHeap);
    ArrayList<PureHybridMemorySegment> target=new ArrayList<>();
    PureHybridMemorySegmentOutView output=new PureHybridMemorySegmentOutView(memory,target,LARGE_SEGMENT_SIZE);
    long start=System.nanoTime();
    for (int outer=0; outer < outerRounds; outer++) {
      for (long i=0; i < innerRounds; i++) {
        ser.serialize(i,output);
      }
      target.clear();
      memory.add(pureHybridOffHeap);
      output.reset();
    }
    long stop=System.nanoTime();
    System.out.println(String.format("Pure hybrid off heap memory segment took %,d msecs",(stop - start) / 1000000));
  }
}
