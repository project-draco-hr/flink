{
  if (args.length != 6) {
    System.out.println("Not correct parameters");
    System.exit(-1);
  }
  final int dop=Integer.valueOf(args[0]);
  final String input=args[1];
  final String output=args[2];
  final int spi=Integer.valueOf(args[3]);
  final int baseMemory=Integer.valueOf(args[4]);
  final int iterations=Integer.valueOf(args[5]);
  JobGraph graph=new JobGraph("Connected Components");
  JobInputVertex sourceVertex=createInput(AdjacencyListInput.class,input,graph,dop,spi);
  JobTaskVertex convert=createTask(ConvertToTransitiveClosureTypes.class,graph,dop,spi);
  convert.setVertexToShareInstancesWith(sourceVertex);
  JobTaskVertex initialState=createTask(InitialStateComponents.class,graph,dop,spi);
  initialState.setVertexToShareInstancesWith(sourceVertex);
  JobTaskVertex initialUpdateAssigner=createTask(InitialUpdates.class,graph,dop,spi);
  initialUpdateAssigner.setVertexToShareInstancesWith(sourceVertex);
  JobTaskVertex tmpTask=createTask(UpdateTempTask.class,graph,dop);
  tmpTask.setVertexToShareInstancesWith(sourceVertex);
  setMemorySize(tmpTask,baseMemory * 1 / 9);
  JobTaskVertex updatesMatch=createTask(UpdateableMatchingOptimizedBulk.class,graph,dop,spi);
  updatesMatch.setVertexToShareInstancesWith(sourceVertex);
  setMemorySize(updatesMatch,baseMemory * 6 / 9);
  JobTaskVertex reduceUpdates=createTask(UpdateReduceTask.class,graph,dop,spi);
  reduceUpdates.setVertexToShareInstancesWith(sourceVertex);
  setMemorySize(reduceUpdates,baseMemory * 2 / 9);
  JobOutputVertex sinkVertex=createOutput(NullOutput.class,output,graph,dop,spi);
  sinkVertex.setVertexToShareInstancesWith(sourceVertex);
  connectJobVertices(ShipStrategy.FORWARD,sourceVertex,convert,null,null);
  connectJobVertices(ShipStrategy.PARTITION_HASH,convert,initialState,null,null);
  connectJobVertices(ShipStrategy.FORWARD,initialState,initialUpdateAssigner,null,null);
  connectJobVertices(ShipStrategy.PARTITION_HASH,initialUpdateAssigner,tmpTask,null,null);
  NepheleUtil.connectBoundedRoundsIterationLoop(tmpTask,sinkVertex,new JobTaskVertex[]{reduceUpdates},new ShipStrategy[]{ShipStrategy.PARTITION_HASH},reduceUpdates,updatesMatch,ShipStrategy.FORWARD,iterations,graph,false);
  connectJobVertices(ShipStrategy.FORWARD,initialState,updatesMatch,null,null);
  submit(graph,getConfiguration());
}
