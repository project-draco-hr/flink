{
  String hadoopInputFormatClassName=in.readUTF();
  String keyClassName=in.readUTF();
  String valueClassName=in.readUTF();
  if (jobConf == null) {
    jobConf=new JobConf();
  }
  jobConf.readFields(in);
  try {
    this.mapredInputFormat=(org.apache.hadoop.mapred.InputFormat<K,V>)Class.forName(hadoopInputFormatClassName,true,Thread.currentThread().getContextClassLoader()).newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException("Unable to instantiate the hadoop input format",e);
  }
  try {
    this.keyClass=(Class<K>)Class.forName(keyClassName,true,Thread.currentThread().getContextClassLoader());
  }
 catch (  Exception e) {
    throw new RuntimeException("Unable to find key class.",e);
  }
  try {
    this.valueClass=(Class<V>)Class.forName(valueClassName,true,Thread.currentThread().getContextClassLoader());
  }
 catch (  Exception e) {
    throw new RuntimeException("Unable to find value class.",e);
  }
  ReflectionUtils.setConf(mapredInputFormat,jobConf);
}
