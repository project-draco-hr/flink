{
  Protos.FrameworkInfo.Builder frameworkInfo=Protos.FrameworkInfo.newBuilder().setUser("").setHostname(hostname);
  Protos.Credential.Builder credential=null;
  if (!flinkConfig.containsKey(ConfigConstants.MESOS_MASTER_URL)) {
    throw new IllegalConfigurationException(ConfigConstants.MESOS_MASTER_URL + " must be configured.");
  }
  String masterUrl=flinkConfig.getString(ConfigConstants.MESOS_MASTER_URL,null);
  Duration failoverTimeout=FiniteDuration.apply(flinkConfig.getInteger(ConfigConstants.MESOS_FAILOVER_TIMEOUT_SECONDS,ConfigConstants.DEFAULT_MESOS_FAILOVER_TIMEOUT_SECS),TimeUnit.SECONDS);
  frameworkInfo.setFailoverTimeout(failoverTimeout.toSeconds());
  frameworkInfo.setName(flinkConfig.getString(ConfigConstants.MESOS_RESOURCEMANAGER_FRAMEWORK_NAME,ConfigConstants.DEFAULT_MESOS_RESOURCEMANAGER_FRAMEWORK_NAME));
  frameworkInfo.setRole(flinkConfig.getString(ConfigConstants.MESOS_RESOURCEMANAGER_FRAMEWORK_ROLE,ConfigConstants.DEFAULT_MESOS_RESOURCEMANAGER_FRAMEWORK_ROLE));
  if (flinkConfig.containsKey(ConfigConstants.MESOS_RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)) {
    frameworkInfo.setPrincipal(flinkConfig.getString(ConfigConstants.MESOS_RESOURCEMANAGER_FRAMEWORK_PRINCIPAL,null));
    credential=Protos.Credential.newBuilder();
    credential.setPrincipal(frameworkInfo.getPrincipal());
    if (!flinkConfig.containsKey(ConfigConstants.MESOS_RESOURCEMANAGER_FRAMEWORK_SECRET)) {
      throw new IllegalConfigurationException(ConfigConstants.MESOS_RESOURCEMANAGER_FRAMEWORK_SECRET + " must be configured.");
    }
    credential.setSecret(flinkConfig.getString(ConfigConstants.MESOS_RESOURCEMANAGER_FRAMEWORK_SECRET,null));
  }
  MesosConfiguration mesos=new MesosConfiguration(masterUrl,frameworkInfo,Option.apply(credential));
  return mesos;
}
