{
  ActorSystem actorSystem=null;
  WebMonitor webMonitor=null;
  MesosArtifactServer artifactServer=null;
  try {
    final String workingDir=ENV.get(MesosConfigKeys.ENV_MESOS_SANDBOX);
    checkState(workingDir != null,"Sandbox directory variable (%s) not set",MesosConfigKeys.ENV_MESOS_SANDBOX);
    final String sessionID=ENV.get(MesosConfigKeys.ENV_SESSION_ID);
    checkState(sessionID != null,"Session ID (%s) not set",MesosConfigKeys.ENV_SESSION_ID);
    final String appMasterHostname=InetAddress.getLocalHost().getHostName();
    final Configuration dynamicProperties=FlinkMesosSessionCli.decodeDynamicProperties(ENV.get(MesosConfigKeys.ENV_DYNAMIC_PROPERTIES));
    LOG.debug("Mesos dynamic properties: {}",dynamicProperties);
    final Configuration config=createConfiguration(workingDir,dynamicProperties);
    final MesosConfiguration mesosConfig=createMesosConfig(config,appMasterHostname);
    final int taskManagerContainerMemory;
    final int numInitialTaskManagers;
    final int slotsPerTaskManager;
    try {
      taskManagerContainerMemory=Integer.parseInt(ENV.get(MesosConfigKeys.ENV_TM_MEMORY));
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Invalid value for " + MesosConfigKeys.ENV_TM_MEMORY + " : "+ e.getMessage());
    }
    try {
      numInitialTaskManagers=Integer.parseInt(ENV.get(MesosConfigKeys.ENV_TM_COUNT));
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Invalid value for " + MesosConfigKeys.ENV_TM_COUNT + " : "+ e.getMessage());
    }
    try {
      slotsPerTaskManager=Integer.parseInt(ENV.get(MesosConfigKeys.ENV_SLOTS));
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Invalid value for " + MesosConfigKeys.ENV_SLOTS + " : "+ e.getMessage());
    }
    final ContaineredTaskManagerParameters containeredParameters=ContaineredTaskManagerParameters.create(config,taskManagerContainerMemory,slotsPerTaskManager);
    final MesosTaskManagerParameters taskManagerParameters=MesosTaskManagerParameters.create(config,containeredParameters);
    LOG.info("TaskManagers will be created with {} task slots",taskManagerParameters.containeredParameters().numSlots());
    LOG.info("TaskManagers will be started with container size {} MB, JVM heap size {} MB, " + "JVM direct memory limit {} MB, {} cpus",taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB(),taskManagerParameters.containeredParameters().taskManagerHeapSizeMB(),taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB(),taskManagerParameters.cpus());
    final int listeningPort=config.getInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
    checkState(listeningPort >= 0 && listeningPort <= 65536,"Config parameter \"" + ConfigConstants.JOB_MANAGER_IPC_PORT_KEY + "\" is invalid, it must be between 0 and 65536");
    actorSystem=BootstrapTools.startActorSystem(config,appMasterHostname,listeningPort,LOG);
    Address address=AkkaUtils.getAddress(actorSystem);
    final String akkaHostname=address.host().get();
    final int akkaPort=(Integer)address.port().get();
    LOG.info("Actor system bound to hostname {}.",akkaHostname);
    LOG.debug("Starting Artifact Server");
    final int artifactServerPort=config.getInteger(ConfigConstants.MESOS_ARTIFACT_SERVER_PORT_KEY,ConfigConstants.DEFAULT_MESOS_ARTIFACT_SERVER_PORT);
    artifactServer=new MesosArtifactServer(sessionID,akkaHostname,artifactServerPort);
    final Configuration taskManagerConfig=BootstrapTools.generateTaskManagerConfiguration(config,akkaHostname,akkaPort,slotsPerTaskManager,TASKMANAGER_REGISTRATION_TIMEOUT);
    LOG.debug("TaskManager configuration: {}",taskManagerConfig);
    final Protos.TaskInfo.Builder taskManagerContext=createTaskManagerContext(config,ENV,taskManagerParameters,taskManagerConfig,workingDir,getTaskManagerClass(),artifactServer,LOG);
    LOG.debug("Starting JobManager actor");
    ActorRef jobManager=JobManager.startJobManagerActors(config,actorSystem,new scala.Some<>(JobManager.JOB_MANAGER_NAME()),scala.Option.<String>empty(),getJobManagerClass(),getArchivistClass())._1();
    LOG.debug("Starting Web Frontend");
    webMonitor=BootstrapTools.startWebMonitorIfConfigured(config,actorSystem,jobManager,LOG);
    if (webMonitor != null) {
      final URL webMonitorURL=new URL("http",appMasterHostname,webMonitor.getServerPort(),"/");
      mesosConfig.frameworkInfo().setWebuiUrl(webMonitorURL.toExternalForm());
    }
    LOG.debug("Starting Mesos Flink Resource Manager");
    MesosWorkerStore workerStore=createWorkerStore(config);
    LeaderRetrievalService leaderRetriever=LeaderRetrievalUtils.createLeaderRetrievalService(config,jobManager);
    Props resourceMasterProps=MesosFlinkResourceManager.createActorProps(getResourceManagerClass(),config,mesosConfig,workerStore,leaderRetriever,taskManagerParameters,taskManagerContext,numInitialTaskManagers,LOG);
    ActorRef resourceMaster=actorSystem.actorOf(resourceMasterProps,"Mesos_Resource_Master");
    LOG.debug("Starting process reapers for JobManager");
    actorSystem.actorOf(Props.create(ProcessReaper.class,resourceMaster,LOG,ACTOR_DIED_EXIT_CODE),"Mesos_Resource_Master_Process_Reaper");
    actorSystem.actorOf(Props.create(ProcessReaper.class,jobManager,LOG,ACTOR_DIED_EXIT_CODE),"JobManager_Process_Reaper");
  }
 catch (  Throwable t) {
    LOG.error("Mesos JobManager initialization failed",t);
    if (webMonitor != null) {
      try {
        webMonitor.stop();
      }
 catch (      Throwable ignored) {
        LOG.warn("Failed to stop the web frontend",ignored);
      }
    }
    if (artifactServer != null) {
      try {
        artifactServer.stop();
      }
 catch (      Throwable ignored) {
        LOG.error("Failed to stop the artifact server",ignored);
      }
    }
    if (actorSystem != null) {
      try {
        actorSystem.shutdown();
      }
 catch (      Throwable tt) {
        LOG.error("Error shutting down actor system",tt);
      }
    }
    return INIT_ERROR_EXIT_CODE;
  }
  LOG.info("Mesos JobManager started");
  actorSystem.awaitTermination();
  if (webMonitor != null) {
    try {
      webMonitor.stop();
    }
 catch (    Throwable t) {
      LOG.error("Failed to stop the web frontend",t);
    }
  }
  try {
    artifactServer.stop();
  }
 catch (  Throwable t) {
    LOG.error("Failed to stop the artifact server",t);
  }
  return 0;
}
