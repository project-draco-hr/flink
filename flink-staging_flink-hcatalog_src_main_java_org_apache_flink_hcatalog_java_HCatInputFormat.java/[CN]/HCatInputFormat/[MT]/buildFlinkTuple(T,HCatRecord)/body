{
  Tuple tuple=(Tuple)t;
  for (int i=0; i < this.fieldNames.length; i++) {
    Object o=record.get(this.fieldNames[i],this.outputSchema);
switch (this.outputSchema.get(i).getType()) {
case INT:
      if (o instanceof String) {
        tuple.setField(Integer.parseInt((String)o),i);
      }
 else {
        tuple.setField(o,i);
      }
    break;
case TINYINT:
  if (o instanceof String) {
    tuple.setField(Byte.parseByte((String)o),i);
  }
 else {
    tuple.setField(o,i);
  }
break;
case SMALLINT:
if (o instanceof String) {
tuple.setField(Short.parseShort((String)o),i);
}
 else {
tuple.setField(o,i);
}
break;
case BIGINT:
if (o instanceof String) {
tuple.setField(Long.parseLong((String)o),i);
}
 else {
tuple.setField(o,i);
}
break;
case BOOLEAN:
if (o instanceof String) {
tuple.setField(Boolean.parseBoolean((String)o),i);
}
 else {
tuple.setField(o,i);
}
break;
case FLOAT:
if (o instanceof String) {
tuple.setField(Float.parseFloat((String)o),i);
}
 else {
tuple.setField(o,i);
}
break;
case DOUBLE:
if (o instanceof String) {
tuple.setField(Double.parseDouble((String)o),i);
}
 else {
tuple.setField(o,i);
}
break;
case STRING:
tuple.setField(o,i);
break;
case BINARY:
if (o instanceof String) {
throw new RuntimeException("Cannot handle partition keys of type BINARY.");
}
 else {
tuple.setField(o,i);
}
break;
default :
throw new RuntimeException("Invalid Type");
}
}
return (T)tuple;
}
