{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  if (objectReuse) {
    env.getConfig().enableObjectReuse();
  }
 else {
    env.getConfig().disableObjectReuse();
  }
  DataSet<Tuple2<String,Integer>> input=env.fromCollection(REDUCE_DATA);
  DataSet<Tuple2<String,Integer>> result=input.reduce(new ReduceFunction<Tuple2<String,Integer>>(){
    @Override public Tuple2<String,Integer> reduce(    Tuple2<String,Integer> value1,    Tuple2<String,Integer> value2){
      if (value1.f1 % 3 == 0) {
        value1.f1+=value2.f1;
        return value1;
      }
 else {
        value2.f1+=value1.f1;
        return value2;
      }
    }
  }
);
  Tuple2<String,Integer> res=result.collect().get(0);
  assertEquals(new Tuple2<>("a",60),res);
}
