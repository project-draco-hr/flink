{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  if (objectReuse) {
    env.getConfig().enableObjectReuse();
  }
 else {
    env.getConfig().disableObjectReuse();
  }
  DataSet<Tuple2<String,Integer>> input=env.fromCollection(GROUP_REDUCE_DATA);
  DataSet<Tuple2<String,Integer>> result=input.reduceGroup(new GroupReduceFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>(){
    @Override public void reduce(    Iterable<Tuple2<String,Integer>> values,    Collector<Tuple2<String,Integer>> out){
      List<Tuple2<String,Integer>> list=new ArrayList<>();
      for (      Tuple2<String,Integer> val : values) {
        list.add(val);
      }
      for (      Tuple2<String,Integer> val : list) {
        out.collect(val);
      }
    }
  }
);
  List<Tuple2<String,Integer>> is=result.collect();
  Collections.sort(is,new TupleComparator<Tuple2<String,Integer>>());
  List<Tuple2<String,Integer>> expected=env.getConfig().isObjectReuseEnabled() ? Arrays.asList(new Tuple2<>("a",4),new Tuple2<>("a",4),new Tuple2<>("a",5),new Tuple2<>("a",5),new Tuple2<>("a",5)) : Arrays.asList(new Tuple2<>("a",1),new Tuple2<>("a",2),new Tuple2<>("a",3),new Tuple2<>("a",4),new Tuple2<>("a",5));
  assertEquals(expected,is);
}
