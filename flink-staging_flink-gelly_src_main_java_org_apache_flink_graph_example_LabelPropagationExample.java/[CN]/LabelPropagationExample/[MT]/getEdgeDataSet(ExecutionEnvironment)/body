{
  if (fileOutput) {
    return env.readCsvFile(edgeInputPath).fieldDelimiter(" ").lineDelimiter("\n").types(Long.class,Long.class).map(new MapFunction<Tuple2<Long,Long>,Edge<Long,NullValue>>(){
      @Override public Edge<Long,NullValue> map(      Tuple2<Long,Long> value) throws Exception {
        return new Edge<Long,NullValue>(value.f0,value.f1,NullValue.getInstance());
      }
    }
);
  }
  return env.generateSequence(1,numVertices).flatMap(new FlatMapFunction<Long,Edge<Long,NullValue>>(){
    @Override public void flatMap(    Long key,    Collector<Edge<Long,NullValue>> out){
      int numOutEdges=(int)(Math.random() * (numVertices / 2));
      for (int i=0; i < numOutEdges; i++) {
        long target=(long)(Math.random() * numVertices) + 1;
        out.collect(new Edge<Long,NullValue>(key,target,NullValue.getInstance()));
      }
    }
  }
);
}
