{
  try {
    SourcePlanNode target=new SourcePlanNode(getSourceNode(),"Source");
    Channel toMap1=new Channel(target);
    SingleInputPlanNode map1=new SingleInputPlanNode(getMapNode(),"Mapper 1",toMap1,DriverStrategy.MAP);
    Channel toMap2=new Channel(map1);
    SingleInputPlanNode map2=new SingleInputPlanNode(getMapNode(),"Mapper 2",toMap2,DriverStrategy.MAP);
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.EMPTY;
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldSet(2,5));
      toMap1.setShipStrategy(ShipStrategyType.PARTITION_HASH,new FieldList(2,5),DataExchangeMode.PIPELINED);
      toMap1.setLocalStrategy(LocalStrategy.NONE);
      toMap2.setShipStrategy(ShipStrategyType.FORWARD,DataExchangeMode.PIPELINED);
      toMap2.setLocalStrategy(LocalStrategy.NONE);
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.EMPTY;
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldSet(2,5));
      toMap1.setShipStrategy(ShipStrategyType.FORWARD,DataExchangeMode.PIPELINED);
      toMap1.setLocalStrategy(LocalStrategy.NONE);
      toMap2.setShipStrategy(ShipStrategyType.PARTITION_HASH,new FieldList(2,5),DataExchangeMode.PIPELINED);
      toMap2.setLocalStrategy(LocalStrategy.NONE);
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forOrdering(new Ordering(3,null,Order.ASCENDING).appendOrdering(1,null,Order.DESCENDING));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(4,1));
      toMap1.setShipStrategy(ShipStrategyType.FORWARD,DataExchangeMode.PIPELINED);
      toMap1.setLocalStrategy(LocalStrategy.SORT,new FieldList(5,7),new boolean[]{false,false});
      toMap2.setShipStrategy(ShipStrategyType.FORWARD,DataExchangeMode.PIPELINED);
      toMap2.setLocalStrategy(LocalStrategy.NONE);
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forOrdering(new Ordering(3,null,Order.ASCENDING).appendOrdering(1,null,Order.DESCENDING));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(4,1));
      toMap1.setShipStrategy(ShipStrategyType.FORWARD,DataExchangeMode.PIPELINED);
      toMap1.setLocalStrategy(LocalStrategy.NONE);
      toMap2.setShipStrategy(ShipStrategyType.FORWARD,DataExchangeMode.PIPELINED);
      toMap2.setLocalStrategy(LocalStrategy.SORT,new FieldList(5,7),new boolean[]{false,false});
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forOrdering(new Ordering(3,null,Order.ASCENDING).appendOrdering(1,null,Order.DESCENDING));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldSet(5,7));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(5,7));
      toMap1.setShipStrategy(ShipStrategyType.PARTITION_HASH,new FieldList(5,7),DataExchangeMode.PIPELINED);
      toMap1.setLocalStrategy(LocalStrategy.SORT,new FieldList(5,7),new boolean[]{false,false});
      toMap2.setShipStrategy(ShipStrategyType.FORWARD,DataExchangeMode.PIPELINED);
      toMap2.setLocalStrategy(LocalStrategy.NONE);
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(MET,report);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
