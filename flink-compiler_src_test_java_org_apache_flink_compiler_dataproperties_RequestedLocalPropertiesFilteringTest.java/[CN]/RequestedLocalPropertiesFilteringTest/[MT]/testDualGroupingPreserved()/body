{
  DualInputSemanticProperties dprops=new DualInputSemanticProperties();
  SemanticPropUtil.getSemanticPropsDualFromString(dprops,new String[]{"1->0;3;2->4"},new String[]{"0->7;1"},null,null,null,null,tupleInfo,tupleInfo,tupleInfo);
  RequestedLocalProperties lprops1=new RequestedLocalProperties();
  lprops1.setGroupedFields(new FieldSet(0,3,4));
  RequestedLocalProperties lprops2=new RequestedLocalProperties();
  lprops2.setGroupedFields(new FieldSet(7,1));
  RequestedLocalProperties filtered1=lprops1.filterBySemanticProperties(dprops,0);
  RequestedLocalProperties filtered2=lprops2.filterBySemanticProperties(dprops,1);
  assertNotNull(filtered1);
  assertNotNull(filtered1.getGroupedFields());
  assertEquals(3,filtered1.getGroupedFields().size());
  assertTrue(filtered1.getGroupedFields().contains(1));
  assertTrue(filtered1.getGroupedFields().contains(2));
  assertTrue(filtered1.getGroupedFields().contains(3));
  assertNull(filtered1.getOrdering());
  assertNotNull(filtered2);
  assertNotNull(filtered2.getGroupedFields());
  assertEquals(2,filtered2.getGroupedFields().size());
  assertTrue(filtered2.getGroupedFields().contains(0));
  assertTrue(filtered2.getGroupedFields().contains(1));
  assertNull(filtered2.getOrdering());
}
