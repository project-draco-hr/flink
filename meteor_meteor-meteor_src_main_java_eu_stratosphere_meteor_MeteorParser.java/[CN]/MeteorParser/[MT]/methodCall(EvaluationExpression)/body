{
  MeteorParser.methodCall_return retval=new MeteorParser.methodCall_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token packageName=null;
  Token name=null;
  Token char_literal57=null;
  Token char_literal58=null;
  Token char_literal59=null;
  Token char_literal60=null;
  MeteorParser.expression_return param=null;
  EvaluationExpression packageName_tree=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal57_tree=null;
  EvaluationExpression char_literal58_tree=null;
  EvaluationExpression char_literal59_tree=null;
  EvaluationExpression char_literal60_tree=null;
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  List<EvaluationExpression> params=new ArrayList();
  try {
{
      int alt27=2;
      int LA27_0=input.LA(1);
      if ((LA27_0 == ID)) {
        int LA27_1=input.LA(2);
        if ((LA27_1 == 47)) {
          alt27=1;
        }
      }
switch (alt27) {
case 1:
{
          packageName=(Token)match(input,ID,FOLLOW_ID_in_methodCall1261);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(packageName);
          char_literal57=(Token)match(input,47,FOLLOW_47_in_methodCall1263);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_47.add(char_literal57);
        }
      break;
  }
  name=(Token)match(input,ID,FOLLOW_ID_in_methodCall1269);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(name);
  char_literal58=(Token)match(input,38,FOLLOW_38_in_methodCall1271);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_38.add(char_literal58);
  int alt29=2;
  int LA29_0=input.LA(1);
  if ((LA29_0 == DECIMAL || LA29_0 == ID || LA29_0 == INTEGER || (LA29_0 >= STRING && LA29_0 <= UINT) || LA29_0 == VAR || LA29_0 == 35 || LA29_0 == 38 || LA29_0 == 41 || LA29_0 == 44 || LA29_0 == 57 || LA29_0 == 59 || (LA29_0 >= 61 && LA29_0 <= 62) || LA29_0 == 64 || (LA29_0 >= 66 && LA29_0 <= 67) || LA29_0 == 70)) {
    alt29=1;
  }
switch (alt29) {
case 1:
{
      pushFollow(FOLLOW_expression_in_methodCall1278);
      param=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(param.getTree());
      if (state.backtracking == 0) {
        params.add((param != null ? ((EvaluationExpression)param.tree) : null));
      }
      loop28:       do {
        int alt28=2;
        int LA28_0=input.LA(1);
        if ((LA28_0 == 42)) {
          alt28=1;
        }
switch (alt28) {
case 1:
{
            char_literal59=(Token)match(input,42,FOLLOW_42_in_methodCall1284);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_42.add(char_literal59);
            pushFollow(FOLLOW_expression_in_methodCall1288);
            param=expression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_expression.add(param.getTree());
            if (state.backtracking == 0) {
              params.add((param != null ? ((EvaluationExpression)param.tree) : null));
            }
          }
        break;
default :
      break loop28;
  }
}
 while (true);
}
break;
}
char_literal60=(Token)match(input,39,FOLLOW_39_in_methodCall1298);
if (state.failed) return retval;
if (state.backtracking == 0) stream_39.add(char_literal60);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,createCheckedMethodCall((packageName != null ? packageName.getText() : null),name,targetExpr,params.toArray(new EvaluationExpression[params.size()])));
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
