{
  genericOperator_stack.push(new genericOperator_scope());
  MeteorParser.genericOperator_return retval=new MeteorParser.genericOperator_return();
  retval.start=input.LT(1);
  int genericOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token char_literal101=null;
  MeteorParser.operatorFlag_return operatorFlag98=null;
  MeteorParser.arrayInput_return arrayInput99=null;
  MeteorParser.input_return input100=null;
  MeteorParser.input_return input102=null;
  MeteorParser.operatorOption_return operatorOption103=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal101_tree=null;
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_operatorOption=new RewriteRuleSubtreeStream(adaptor,"rule operatorOption");
  RewriteRuleSubtreeStream stream_input=new RewriteRuleSubtreeStream(adaptor,"rule input");
  RewriteRuleSubtreeStream stream_operatorFlag=new RewriteRuleSubtreeStream(adaptor,"rule operatorFlag");
  RewriteRuleSubtreeStream stream_arrayInput=new RewriteRuleSubtreeStream(adaptor,"rule arrayInput");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,35)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1767);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      if (!(((((genericOperator_scope)genericOperator_stack.peek()).operatorInfo=findOperatorGreedily(name)) != null))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"genericOperator"," ($genericOperator::operatorInfo = findOperatorGreedily($name)) != null ");
      }
      if (state.backtracking == 0) {
        ((operator_scope)operator_stack.peek()).result=((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.newInstance();
      }
      loop46:       do {
        int alt46=2;
        int LA46_0=input.LA(1);
        if ((LA46_0 == ID)) {
          alt46=1;
        }
switch (alt46) {
case 1:
{
            pushFollow(FOLLOW_operatorFlag_in_genericOperator1775);
            operatorFlag98=operatorFlag();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_operatorFlag.add(operatorFlag98.getTree());
          }
        break;
default :
      break loop46;
  }
}
 while (true);
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == 63)) {
  alt48=1;
}
 else if ((LA48_0 == VAR || LA48_0 == 69)) {
  alt48=2;
}
 else {
  if (state.backtracking > 0) {
    state.failed=true;
    return retval;
  }
  NoViableAltException nvae=new NoViableAltException("",48,0,input);
  throw nvae;
}
switch (alt48) {
case 1:
{
    pushFollow(FOLLOW_arrayInput_in_genericOperator1779);
    arrayInput99=arrayInput();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_arrayInput.add(arrayInput99.getTree());
  }
break;
case 2:
{
pushFollow(FOLLOW_input_in_genericOperator1783);
input100=input();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_input.add(input100.getTree());
loop47: do {
  int alt47=2;
  int LA47_0=input.LA(1);
  if ((LA47_0 == 31)) {
    int LA47_2=input.LA(2);
    if ((synpred74_Meteor())) {
      alt47=1;
    }
  }
switch (alt47) {
case 1:
{
      char_literal101=(Token)match(input,31,FOLLOW_31_in_genericOperator1786);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_31.add(char_literal101);
      pushFollow(FOLLOW_input_in_genericOperator1788);
      input102=input();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_input.add(input102.getTree());
    }
  break;
default :
break loop47;
}
}
 while (true);
}
break;
}
loop49: do {
int alt49=2;
int LA49_0=input.LA(1);
if ((LA49_0 == ID)) {
int LA49_2=input.LA(2);
if ((synpred75_Meteor())) {
alt49=1;
}
}
switch (alt49) {
case 1:
{
pushFollow(FOLLOW_operatorOption_in_genericOperator1794);
operatorOption103=operatorOption();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_operatorOption.add(operatorOption103.getTree());
}
break;
default :
break loop49;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,35,genericOperator_StartIndex);
}
genericOperator_stack.pop();
}
return retval;
}
