{
  genericOperator_stack.push(new genericOperator_scope());
  MeteorParser.genericOperator_return retval=new MeteorParser.genericOperator_return();
  retval.start=input.LT(1);
  int genericOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token packageName=null;
  Token name=null;
  Token char_literal100=null;
  Token char_literal104=null;
  MeteorParser.operatorFlag_return operatorFlag101=null;
  MeteorParser.arrayInput_return arrayInput102=null;
  MeteorParser.input_return input103=null;
  MeteorParser.input_return input105=null;
  MeteorParser.operatorOption_return operatorOption106=null;
  EvaluationExpression packageName_tree=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal100_tree=null;
  EvaluationExpression char_literal104_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
  RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
  RewriteRuleSubtreeStream stream_operatorOption=new RewriteRuleSubtreeStream(adaptor,"rule operatorOption");
  RewriteRuleSubtreeStream stream_input=new RewriteRuleSubtreeStream(adaptor,"rule input");
  RewriteRuleSubtreeStream stream_operatorFlag=new RewriteRuleSubtreeStream(adaptor,"rule operatorFlag");
  RewriteRuleSubtreeStream stream_arrayInput=new RewriteRuleSubtreeStream(adaptor,"rule arrayInput");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,35)) {
      return retval;
    }
{
      int alt49=2;
      int LA49_0=input.LA(1);
      if ((LA49_0 == ID)) {
        int LA49_1=input.LA(2);
        if ((LA49_1 == 35)) {
          alt49=1;
        }
      }
switch (alt49) {
case 1:
{
          packageName=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1792);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(packageName);
          char_literal100=(Token)match(input,35,FOLLOW_35_in_genericOperator1794);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_35.add(char_literal100);
        }
      break;
  }
  name=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1800);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(name);
  if (!(((((genericOperator_scope)genericOperator_stack.peek()).operatorInfo=findOperatorGreedily((packageName != null ? packageName.getText() : null),name)) != null))) {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    throw new FailedPredicateException(input,"genericOperator"," ($genericOperator::operatorInfo = findOperatorGreedily($packageName.text, $name)) != null ");
  }
  if (state.backtracking == 0) {
    ((operator_scope)operator_stack.peek()).result=((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.newInstance();
  }
  loop50:   do {
    int alt50=2;
    int LA50_0=input.LA(1);
    if ((LA50_0 == ID)) {
      alt50=1;
    }
switch (alt50) {
case 1:
{
        pushFollow(FOLLOW_operatorFlag_in_genericOperator1808);
        operatorFlag101=operatorFlag();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_operatorFlag.add(operatorFlag101.getTree());
      }
    break;
default :
  break loop50;
}
}
 while (true);
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == 63)) {
alt52=1;
}
 else if ((LA52_0 == VAR || LA52_0 == 69)) {
alt52=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",52,0,input);
throw nvae;
}
switch (alt52) {
case 1:
{
pushFollow(FOLLOW_arrayInput_in_genericOperator1812);
arrayInput102=arrayInput();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_arrayInput.add(arrayInput102.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_input_in_genericOperator1816);
input103=input();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_input.add(input103.getTree());
loop51: do {
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == 28)) {
int LA51_2=input.LA(2);
if ((synpred77_Meteor())) {
  alt51=1;
}
}
switch (alt51) {
case 1:
{
  char_literal104=(Token)match(input,28,FOLLOW_28_in_genericOperator1819);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_28.add(char_literal104);
  pushFollow(FOLLOW_input_in_genericOperator1821);
  input105=input();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_input.add(input105.getTree());
}
break;
default :
break loop51;
}
}
 while (true);
}
break;
}
loop53: do {
int alt53=2;
int LA53_0=input.LA(1);
if ((LA53_0 == ID)) {
int LA53_2=input.LA(2);
if ((synpred78_Meteor())) {
alt53=1;
}
}
switch (alt53) {
case 1:
{
pushFollow(FOLLOW_operatorOption_in_genericOperator1827);
operatorOption106=operatorOption();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_operatorOption.add(operatorOption106.getTree());
}
break;
default :
break loop53;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,35,genericOperator_StartIndex);
}
genericOperator_stack.pop();
}
return retval;
}
