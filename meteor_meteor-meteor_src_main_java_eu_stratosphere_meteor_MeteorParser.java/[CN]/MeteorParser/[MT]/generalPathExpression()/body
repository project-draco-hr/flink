{
  MeteorParser.generalPathExpression_return retval=new MeteorParser.generalPathExpression_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  MeteorParser.valueExpression_return value=null;
  MeteorParser.pathExpression_return path=null;
  RewriteRuleSubtreeStream stream_valueExpression=new RewriteRuleSubtreeStream(adaptor,"rule valueExpression");
  RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
  try {
{
      pushFollow(FOLLOW_valueExpression_in_generalPathExpression947);
      value=valueExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_valueExpression.add(value.getTree());
      int alt23=2;
      int LA23_0=input.LA(1);
      if ((LA23_0 == 56) && (synpred6_Meteor())) {
        alt23=1;
      }
 else       if ((LA23_0 == 45) && (synpred6_Meteor())) {
        alt23=1;
      }
 else       if ((LA23_0 == 57) && (synpred6_Meteor())) {
        alt23=1;
      }
 else       if ((LA23_0 == EOF || LA23_0 == AND || LA23_0 == AS || (LA23_0 >= ID && LA23_0 <= IN) || LA23_0 == NOT || LA23_0 == OR || LA23_0 == STAR || (LA23_0 >= 36 && LA23_0 <= 37) || (LA23_0 >= 39 && LA23_0 <= 40) || (LA23_0 >= 42 && LA23_0 <= 43) || (LA23_0 >= 46 && LA23_0 <= 50) || (LA23_0 >= 52 && LA23_0 <= 55) || LA23_0 == 58 || (LA23_0 >= 68 && LA23_0 <= 69))) {
        alt23=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",23,0,input);
        throw nvae;
      }
switch (alt23) {
case 1:
{
          pushFollow(FOLLOW_pathExpression_in_generalPathExpression961);
          path=pathExpression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_pathExpression.add(path.getTree());
          if (state.backtracking == 0) {
            retval.tree=root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
            root_0=(EvaluationExpression)adaptor.nil();
{
              adaptor.addChild(root_0,PathExpression.wrapIfNecessary((value != null ? ((EvaluationExpression)value.tree) : null),(path != null ? ((EvaluationExpression)path.tree) : null)));
            }
            retval.tree=root_0;
          }
        }
      break;
case 2:
{
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value",value != null ? value.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          adaptor.addChild(root_0,stream_value.nextTree());
        }
        retval.tree=root_0;
      }
    }
  break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
