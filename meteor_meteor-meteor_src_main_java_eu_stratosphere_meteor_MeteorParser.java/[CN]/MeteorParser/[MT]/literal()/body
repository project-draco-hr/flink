{
  MeteorParser.literal_return retval=new MeteorParser.literal_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token val=null;
  Token string_literal74=null;
  EvaluationExpression val_tree=null;
  EvaluationExpression string_literal74_tree=null;
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
  RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
  RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    int alt37=6;
switch (input.LA(1)) {
case 63:
{
        alt37=1;
      }
    break;
case 58:
{
    alt37=2;
  }
break;
case DECIMAL:
{
alt37=3;
}
break;
case STRING:
{
alt37=4;
}
break;
case INTEGER:
case UINT:
{
alt37=5;
}
break;
case 60:
{
alt37=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",37,0,input);
throw nvae;
}
switch (alt37) {
case 1:
{
val=(Token)match(input,63,FOLLOW_63_in_literal1450);
if (state.failed) return retval;
if (state.backtracking == 0) stream_63.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,Boolean.TRUE);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
val=(Token)match(input,58,FOLLOW_58_in_literal1466);
if (state.failed) return retval;
if (state.backtracking == 0) stream_58.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,Boolean.FALSE);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
val=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal1482);
if (state.failed) return retval;
if (state.backtracking == 0) stream_DECIMAL.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,new BigDecimal((val != null ? val.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 4:
{
val=(Token)match(input,STRING,FOLLOW_STRING_in_literal1498);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STRING.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,val.getText());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 5:
{
int alt36=2;
int LA36_0=input.LA(1);
if ((LA36_0 == UINT)) {
alt36=1;
}
 else if ((LA36_0 == INTEGER)) {
alt36=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",36,0,input);
throw nvae;
}
switch (alt36) {
case 1:
{
val=(Token)match(input,UINT,FOLLOW_UINT_in_literal1516);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(val);
}
break;
case 2:
{
val=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_literal1522);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(val);
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,parseInt((val != null ? val.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 6:
{
string_literal74=(Token)match(input,60,FOLLOW_60_in_literal1538);
if (state.failed) return retval;
if (state.backtracking == 0) stream_60.add(string_literal74);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,ConstantExpression.NULL);
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
