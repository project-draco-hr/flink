{
  MeteorParser.javaudf_return retval=new MeteorParser.javaudf_return();
  retval.start=input.LT(1);
  int javaudf_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token path=null;
  Token char_literal16=null;
  Token string_literal17=null;
  Token char_literal18=null;
  Token char_literal19=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression path_tree=null;
  EvaluationExpression char_literal16_tree=null;
  EvaluationExpression string_literal17_tree=null;
  EvaluationExpression char_literal18_tree=null;
  EvaluationExpression char_literal19_tree=null;
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  RewriteRuleTokenStream stream_29=new RewriteRuleTokenStream(adaptor,"token 29");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,6)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_javaudf307);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      char_literal16=(Token)match(input,29,FOLLOW_29_in_javaudf309);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_29.add(char_literal16);
      string_literal17=(Token)match(input,33,FOLLOW_33_in_javaudf311);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_33.add(string_literal17);
      char_literal18=(Token)match(input,31,FOLLOW_31_in_javaudf313);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_31.add(char_literal18);
      path=(Token)match(input,STRING,FOLLOW_STRING_in_javaudf317);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(path);
      char_literal19=(Token)match(input,32,FOLLOW_32_in_javaudf319);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_32.add(char_literal19);
      if (state.backtracking == 0) {
        addFunction(name.getText(),path.getText());
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          root_0=null;
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,6,javaudf_StartIndex);
    }
  }
  return retval;
}
