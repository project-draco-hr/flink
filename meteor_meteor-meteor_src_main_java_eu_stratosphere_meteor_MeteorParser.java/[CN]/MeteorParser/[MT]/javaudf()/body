{
  MeteorParser.javaudf_return retval=new MeteorParser.javaudf_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token name=null;
  Token path=null;
  Token char_literal16=null;
  Token JAVAUDF17=null;
  Token char_literal18=null;
  Token char_literal19=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression path_tree=null;
  EvaluationExpression char_literal16_tree=null;
  EvaluationExpression JAVAUDF17_tree=null;
  EvaluationExpression char_literal18_tree=null;
  EvaluationExpression char_literal19_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
  RewriteRuleTokenStream stream_JAVAUDF=new RewriteRuleTokenStream(adaptor,"token JAVAUDF");
  RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  try {
{
      name=(Token)match(input,ID,FOLLOW_ID_in_javaudf299);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      char_literal16=(Token)match(input,51,FOLLOW_51_in_javaudf301);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_51.add(char_literal16);
      JAVAUDF17=(Token)match(input,JAVAUDF,FOLLOW_JAVAUDF_in_javaudf303);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_JAVAUDF.add(JAVAUDF17);
      char_literal18=(Token)match(input,38,FOLLOW_38_in_javaudf305);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_38.add(char_literal18);
      path=(Token)match(input,STRING,FOLLOW_STRING_in_javaudf309);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(path);
      char_literal19=(Token)match(input,39,FOLLOW_39_in_javaudf311);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_39.add(char_literal19);
      if (state.backtracking == 0) {
        addFunction(name.getText(),path.getText());
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          root_0=null;
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
  }
  return retval;
}
