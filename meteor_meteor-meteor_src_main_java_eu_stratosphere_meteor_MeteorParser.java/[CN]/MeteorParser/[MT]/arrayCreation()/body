{
  MeteorParser.arrayCreation_return retval=new MeteorParser.arrayCreation_return();
  retval.start=input.LT(1);
  int arrayCreation_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal85=null;
  Token char_literal86=null;
  Token char_literal87=null;
  Token char_literal88=null;
  List list_elems=null;
  RuleReturnScope elems=null;
  EvaluationExpression char_literal85_tree=null;
  EvaluationExpression char_literal86_tree=null;
  EvaluationExpression char_literal87_tree=null;
  EvaluationExpression char_literal88_tree=null;
  RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
  RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
  RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,31)) {
      return retval;
    }
{
      char_literal85=(Token)match(input,63,FOLLOW_63_in_arrayCreation1633);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_63.add(char_literal85);
      pushFollow(FOLLOW_expression_in_arrayCreation1637);
      elems=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(elems.getTree());
      if (list_elems == null)       list_elems=new ArrayList();
      list_elems.add(elems.getTree());
      loop43:       do {
        int alt43=2;
        int LA43_0=input.LA(1);
        if ((LA43_0 == 28)) {
          int LA43_1=input.LA(2);
          if (((LA43_1 >= ID && LA43_1 <= STRING) || (LA43_1 >= DECIMAL && LA43_1 <= INTEGER) || LA43_1 == 31 || (LA43_1 >= 52 && LA43_1 <= 55) || LA43_1 == 58 || (LA43_1 >= 60 && LA43_1 <= 63) || LA43_1 == 65 || LA43_1 == 67)) {
            alt43=1;
          }
        }
switch (alt43) {
case 1:
{
            char_literal86=(Token)match(input,28,FOLLOW_28_in_arrayCreation1640);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_28.add(char_literal86);
            pushFollow(FOLLOW_expression_in_arrayCreation1644);
            elems=expression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_expression.add(elems.getTree());
            if (list_elems == null)             list_elems=new ArrayList();
            list_elems.add(elems.getTree());
          }
        break;
default :
      break loop43;
  }
}
 while (true);
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == 28)) {
  alt44=1;
}
switch (alt44) {
case 1:
{
    char_literal87=(Token)match(input,28,FOLLOW_28_in_arrayCreation1648);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_28.add(char_literal87);
  }
break;
}
char_literal88=(Token)match(input,64,FOLLOW_64_in_arrayCreation1651);
if (state.failed) return retval;
if (state.backtracking == 0) stream_64.add(char_literal88);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayCreation"),root_1);
  adaptor.addChild(root_1,list_elems.toArray(new EvaluationExpression[list_elems.size()]));
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,31,arrayCreation_StartIndex);
}
}
return retval;
}
