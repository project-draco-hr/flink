{
  MeteorParser.arrayCreation_return retval=new MeteorParser.arrayCreation_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token char_literal85=null;
  Token char_literal86=null;
  Token char_literal87=null;
  Token char_literal88=null;
  List list_elems=null;
  RuleReturnScope elems=null;
  EvaluationExpression char_literal85_tree=null;
  EvaluationExpression char_literal86_tree=null;
  EvaluationExpression char_literal87_tree=null;
  EvaluationExpression char_literal88_tree=null;
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
{
      char_literal85=(Token)match(input,56,FOLLOW_56_in_arrayCreation1702);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_56.add(char_literal85);
      pushFollow(FOLLOW_expression_in_arrayCreation1706);
      elems=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(elems.getTree());
      if (list_elems == null)       list_elems=new ArrayList();
      list_elems.add(elems.getTree());
      loop42:       do {
        int alt42=2;
        int LA42_0=input.LA(1);
        if ((LA42_0 == 42)) {
          int LA42_1=input.LA(2);
          if ((LA42_1 == DECIMAL || LA42_1 == ID || LA42_1 == INTEGER || (LA42_1 >= STRING && LA42_1 <= UINT) || LA42_1 == VAR || LA42_1 == 35 || LA42_1 == 38 || LA42_1 == 41 || LA42_1 == 44 || LA42_1 == 56 || LA42_1 == 58 || (LA42_1 >= 60 && LA42_1 <= 61) || LA42_1 == 63 || (LA42_1 >= 65 && LA42_1 <= 66) || LA42_1 == 69)) {
            alt42=1;
          }
        }
switch (alt42) {
case 1:
{
            char_literal86=(Token)match(input,42,FOLLOW_42_in_arrayCreation1709);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_42.add(char_literal86);
            pushFollow(FOLLOW_expression_in_arrayCreation1713);
            elems=expression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_expression.add(elems.getTree());
            if (list_elems == null)             list_elems=new ArrayList();
            list_elems.add(elems.getTree());
          }
        break;
default :
      break loop42;
  }
}
 while (true);
int alt43=2;
int LA43_0=input.LA(1);
if ((LA43_0 == 42)) {
  alt43=1;
}
switch (alt43) {
case 1:
{
    char_literal87=(Token)match(input,42,FOLLOW_42_in_arrayCreation1717);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_42.add(char_literal87);
  }
break;
}
char_literal88=(Token)match(input,57,FOLLOW_57_in_arrayCreation1720);
if (state.failed) return retval;
if (state.backtracking == 0) stream_57.add(char_literal88);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayCreation"),root_1);
  adaptor.addChild(root_1,list_elems.toArray(new EvaluationExpression[list_elems.size()]));
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
