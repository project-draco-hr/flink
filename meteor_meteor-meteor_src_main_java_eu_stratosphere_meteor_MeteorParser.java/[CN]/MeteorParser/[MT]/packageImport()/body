{
  MeteorParser.packageImport_return retval=new MeteorParser.packageImport_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token packageName=null;
  Token additionalPackage=null;
  Token string_literal8=null;
  Token char_literal9=null;
  EvaluationExpression packageName_tree=null;
  EvaluationExpression additionalPackage_tree=null;
  EvaluationExpression string_literal8_tree=null;
  EvaluationExpression char_literal9_tree=null;
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
{
      string_literal8=(Token)match(input,64,FOLLOW_64_in_packageImport164);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_64.add(string_literal8);
      packageName=(Token)match(input,ID,FOLLOW_ID_in_packageImport168);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(packageName);
      if (state.backtracking == 0) {
        getPackageManager().importPackage((packageName != null ? packageName.getText() : null));
      }
      char_literal9=(Token)match(input,42,FOLLOW_42_in_packageImport172);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_42.add(char_literal9);
      loop3:       do {
        int alt3=2;
        int LA3_0=input.LA(1);
        if ((LA3_0 == ID)) {
          alt3=1;
        }
switch (alt3) {
case 1:
{
            additionalPackage=(Token)match(input,ID,FOLLOW_ID_in_packageImport183);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_ID.add(additionalPackage);
            if (state.backtracking == 0) {
              getPackageManager().importPackage((additionalPackage != null ? additionalPackage.getText() : null));
            }
          }
        break;
default :
      break loop3;
  }
}
 while (true);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(EvaluationExpression)adaptor.nil();
{
    root_0=null;
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
