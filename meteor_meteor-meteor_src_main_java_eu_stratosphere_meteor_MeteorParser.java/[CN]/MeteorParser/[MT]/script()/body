{
  MeteorParser.script_return retval=new MeteorParser.script_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token char_literal2=null;
  MeteorParser.statement_return statement1=null;
  EvaluationExpression char_literal2_tree=null;
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
  try {
{
      int cnt1=0;
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == ID || LA1_0 == VAR || LA1_0 == 62 || (LA1_0 >= 65 && LA1_0 <= 66))) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            pushFollow(FOLLOW_statement_in_script121);
            statement1=statement();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_statement.add(statement1.getTree());
            char_literal2=(Token)match(input,48,FOLLOW_48_in_script123);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_48.add(char_literal2);
          }
        break;
default :
      if (cnt1 >= 1)       break loop1;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(1,input);
throw eee;
}
cnt1++;
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
