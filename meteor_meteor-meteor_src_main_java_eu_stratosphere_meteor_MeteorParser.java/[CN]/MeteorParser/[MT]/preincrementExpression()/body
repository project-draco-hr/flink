{
  MeteorParser.preincrementExpression_return retval=new MeteorParser.preincrementExpression_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token string_literal32=null;
  Token string_literal34=null;
  MeteorParser.preincrementExpression_return preincrementExpression33=null;
  MeteorParser.preincrementExpression_return preincrementExpression35=null;
  MeteorParser.unaryExpression_return unaryExpression36=null;
  EvaluationExpression string_literal32_tree=null;
  EvaluationExpression string_literal34_tree=null;
  try {
    int alt20=3;
switch (input.LA(1)) {
case 41:
{
        alt20=1;
      }
    break;
case 44:
{
    alt20=2;
  }
break;
case DECIMAL:
case ID:
case INTEGER:
case STRING:
case UINT:
case VAR:
case 35:
case 38:
case 56:
case 58:
case 60:
case 63:
case 66:
case 69:
{
alt20=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",20,0,input);
throw nvae;
}
switch (alt20) {
case 1:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal32=(Token)match(input,41,FOLLOW_41_in_preincrementExpression837);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal32_tree=(EvaluationExpression)adaptor.create(string_literal32);
adaptor.addChild(root_0,string_literal32_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression839);
preincrementExpression33=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression33.getTree());
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal34=(Token)match(input,44,FOLLOW_44_in_preincrementExpression844);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal34_tree=(EvaluationExpression)adaptor.create(string_literal34);
adaptor.addChild(root_0,string_literal34_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression846);
preincrementExpression35=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression35.getTree());
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_unaryExpression_in_preincrementExpression851);
unaryExpression36=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression36.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
