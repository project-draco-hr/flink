{
  MeteorParser.ternaryExpression_return retval=new MeteorParser.ternaryExpression_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token char_literal23=null;
  Token char_literal24=null;
  Token IF25=null;
  MeteorParser.orExpression_return ifClause=null;
  MeteorParser.orExpression_return ifExpr=null;
  MeteorParser.orExpression_return elseExpr=null;
  MeteorParser.orExpression_return ifExpr2=null;
  MeteorParser.orExpression_return ifClause2=null;
  MeteorParser.orExpression_return orExpression26=null;
  EvaluationExpression char_literal23_tree=null;
  EvaluationExpression char_literal24_tree=null;
  EvaluationExpression IF25_tree=null;
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
  RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
  RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
  try {
    int alt7=3;
switch (input.LA(1)) {
case 41:
{
        int LA7_1=input.LA(2);
        if ((synpred2_Meteor())) {
          alt7=1;
        }
 else         if ((synpred3_Meteor())) {
          alt7=2;
        }
 else         if ((true)) {
          alt7=3;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",7,1,input);
          throw nvae;
        }
      }
    break;
case 44:
{
    int LA7_2=input.LA(2);
    if ((synpred2_Meteor())) {
      alt7=1;
    }
 else     if ((synpred3_Meteor())) {
      alt7=2;
    }
 else     if ((true)) {
      alt7=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",7,2,input);
      throw nvae;
    }
  }
break;
case 35:
case 70:
{
int LA7_3=input.LA(2);
if ((synpred2_Meteor())) {
  alt7=1;
}
 else if ((synpred3_Meteor())) {
  alt7=2;
}
 else if ((true)) {
  alt7=3;
}
 else {
  if (state.backtracking > 0) {
    state.failed=true;
    return retval;
  }
  NoViableAltException nvae=new NoViableAltException("",7,3,input);
  throw nvae;
}
}
break;
case 38:
{
int LA7_4=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,4,input);
throw nvae;
}
}
break;
case ID:
{
int LA7_5=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,5,input);
throw nvae;
}
}
break;
case 64:
{
int LA7_6=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,6,input);
throw nvae;
}
}
break;
case 59:
{
int LA7_7=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,7,input);
throw nvae;
}
}
break;
case DECIMAL:
{
int LA7_8=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,8,input);
throw nvae;
}
}
break;
case STRING:
{
int LA7_9=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,9,input);
throw nvae;
}
}
break;
case UINT:
{
int LA7_10=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,10,input);
throw nvae;
}
}
break;
case INTEGER:
{
int LA7_11=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,11,input);
throw nvae;
}
}
break;
case 61:
{
int LA7_12=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,12,input);
throw nvae;
}
}
break;
case VAR:
{
int LA7_13=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,13,input);
throw nvae;
}
}
break;
case 57:
{
int LA7_14=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,14,input);
throw nvae;
}
}
break;
case 67:
{
int LA7_15=input.LA(2);
if ((synpred2_Meteor())) {
alt7=1;
}
 else if ((synpred3_Meteor())) {
alt7=2;
}
 else if ((true)) {
alt7=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,15,input);
throw nvae;
}
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",7,0,input);
throw nvae;
}
switch (alt7) {
case 1:
{
pushFollow(FOLLOW_orExpression_in_ternaryExpression381);
ifClause=orExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_orExpression.add(ifClause.getTree());
char_literal23=(Token)match(input,55,FOLLOW_55_in_ternaryExpression383);
if (state.failed) return retval;
if (state.backtracking == 0) stream_55.add(char_literal23);
pushFollow(FOLLOW_orExpression_in_ternaryExpression387);
ifExpr=orExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_orExpression.add(ifExpr.getTree());
char_literal24=(Token)match(input,47,FOLLOW_47_in_ternaryExpression389);
if (state.failed) return retval;
if (state.backtracking == 0) stream_47.add(char_literal24);
pushFollow(FOLLOW_orExpression_in_ternaryExpression393);
elseExpr=orExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_orExpression.add(elseExpr.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_ifClause=new RewriteRuleSubtreeStream(adaptor,"rule ifClause",ifClause != null ? ifClause.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"TernaryExpression"),root_1);
adaptor.addChild(root_1,stream_ifClause.nextTree());
adaptor.addChild(root_1,ifExpr == null ? EvaluationExpression.VALUE : (ifExpr != null ? ((EvaluationExpression)ifExpr.tree) : null));
adaptor.addChild(root_1,(elseExpr != null ? ((EvaluationExpression)elseExpr.tree) : null));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
pushFollow(FOLLOW_orExpression_in_ternaryExpression422);
ifExpr2=orExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_orExpression.add(ifExpr2.getTree());
IF25=(Token)match(input,IF,FOLLOW_IF_in_ternaryExpression424);
if (state.failed) return retval;
if (state.backtracking == 0) stream_IF.add(IF25);
pushFollow(FOLLOW_orExpression_in_ternaryExpression428);
ifClause2=orExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_orExpression.add(ifClause2.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_ifExpr2=new RewriteRuleSubtreeStream(adaptor,"rule ifExpr2",ifExpr2 != null ? ifExpr2.tree : null);
RewriteRuleSubtreeStream stream_ifClause2=new RewriteRuleSubtreeStream(adaptor,"rule ifClause2",ifClause2 != null ? ifClause2.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"TernaryExpression"),root_1);
adaptor.addChild(root_1,stream_ifClause2.nextTree());
adaptor.addChild(root_1,stream_ifExpr2.nextTree());
adaptor.addChild(root_1,EvaluationExpression.VALUE);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_orExpression_in_ternaryExpression451);
orExpression26=orExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,orExpression26.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
