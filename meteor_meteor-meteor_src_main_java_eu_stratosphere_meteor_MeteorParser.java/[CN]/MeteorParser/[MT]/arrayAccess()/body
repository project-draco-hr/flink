{
  MeteorParser.arrayAccess_return retval=new MeteorParser.arrayAccess_return();
  retval.start=input.LT(1);
  int arrayAccess_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token pos=null;
  Token start=null;
  Token end=null;
  Token char_literal73=null;
  Token STAR74=null;
  Token char_literal75=null;
  Token char_literal76=null;
  Token char_literal77=null;
  Token char_literal78=null;
  Token char_literal79=null;
  Token char_literal80=null;
  MeteorParser.pathExpression_return path=null;
  EvaluationExpression pos_tree=null;
  EvaluationExpression start_tree=null;
  EvaluationExpression end_tree=null;
  EvaluationExpression char_literal73_tree=null;
  EvaluationExpression STAR74_tree=null;
  EvaluationExpression char_literal75_tree=null;
  EvaluationExpression char_literal76_tree=null;
  EvaluationExpression char_literal77_tree=null;
  EvaluationExpression char_literal78_tree=null;
  EvaluationExpression char_literal79_tree=null;
  EvaluationExpression char_literal80_tree=null;
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
  RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
  RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,29)) {
      return retval;
    }
    int alt38=3;
    int LA38_0=input.LA(1);
    if ((LA38_0 == 63)) {
switch (input.LA(2)) {
case STAR:
{
          alt38=1;
        }
      break;
case INTEGER:
{
      int LA38_3=input.LA(3);
      if ((LA38_3 == 64)) {
        alt38=2;
      }
 else       if ((LA38_3 == 35)) {
        alt38=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",38,3,input);
        throw nvae;
      }
    }
  break;
case UINT:
{
  int LA38_4=input.LA(3);
  if ((LA38_4 == 64)) {
    alt38=2;
  }
 else   if ((LA38_4 == 35)) {
    alt38=3;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",38,4,input);
    throw nvae;
  }
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",38,1,input);
throw nvae;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",38,0,input);
throw nvae;
}
switch (alt38) {
case 1:
{
char_literal73=(Token)match(input,63,FOLLOW_63_in_arrayAccess1428);
if (state.failed) return retval;
if (state.backtracking == 0) stream_63.add(char_literal73);
STAR74=(Token)match(input,STAR,FOLLOW_STAR_in_arrayAccess1430);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STAR.add(STAR74);
char_literal75=(Token)match(input,64,FOLLOW_64_in_arrayAccess1432);
if (state.failed) return retval;
if (state.backtracking == 0) stream_64.add(char_literal75);
pushFollow(FOLLOW_pathExpression_in_arrayAccess1436);
path=pathExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_pathExpression.add(path.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path",path != null ? path.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayProjection"),root_1);
adaptor.addChild(root_1,stream_path.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
char_literal76=(Token)match(input,63,FOLLOW_63_in_arrayAccess1456);
if (state.failed) return retval;
if (state.backtracking == 0) stream_63.add(char_literal76);
int alt35=2;
int LA35_0=input.LA(1);
if ((LA35_0 == INTEGER)) {
alt35=1;
}
 else if ((LA35_0 == UINT)) {
alt35=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",35,0,input);
throw nvae;
}
switch (alt35) {
case 1:
{
pos=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1461);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(pos);
}
break;
case 2:
{
pos=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1467);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(pos);
}
break;
}
char_literal77=(Token)match(input,64,FOLLOW_64_in_arrayAccess1470);
if (state.failed) return retval;
if (state.backtracking == 0) stream_64.add(char_literal77);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((pos != null ? pos.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
char_literal78=(Token)match(input,63,FOLLOW_63_in_arrayAccess1488);
if (state.failed) return retval;
if (state.backtracking == 0) stream_63.add(char_literal78);
int alt36=2;
int LA36_0=input.LA(1);
if ((LA36_0 == INTEGER)) {
alt36=1;
}
 else if ((LA36_0 == UINT)) {
alt36=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",36,0,input);
throw nvae;
}
switch (alt36) {
case 1:
{
start=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1493);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(start);
}
break;
case 2:
{
start=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1499);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(start);
}
break;
}
char_literal79=(Token)match(input,35,FOLLOW_35_in_arrayAccess1502);
if (state.failed) return retval;
if (state.backtracking == 0) stream_35.add(char_literal79);
int alt37=2;
int LA37_0=input.LA(1);
if ((LA37_0 == INTEGER)) {
alt37=1;
}
 else if ((LA37_0 == UINT)) {
alt37=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",37,0,input);
throw nvae;
}
switch (alt37) {
case 1:
{
end=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1507);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(end);
}
break;
case 2:
{
end=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1513);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(end);
}
break;
}
char_literal80=(Token)match(input,64,FOLLOW_64_in_arrayAccess1516);
if (state.failed) return retval;
if (state.backtracking == 0) stream_64.add(char_literal80);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((start != null ? start.getText() : null)));
adaptor.addChild(root_1,Integer.valueOf((end != null ? end.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,29,arrayAccess_StartIndex);
}
}
return retval;
}
