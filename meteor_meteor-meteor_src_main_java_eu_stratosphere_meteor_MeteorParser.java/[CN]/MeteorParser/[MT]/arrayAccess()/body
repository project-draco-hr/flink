{
  MeteorParser.arrayAccess_return retval=new MeteorParser.arrayAccess_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token pos=null;
  Token start=null;
  Token end=null;
  Token char_literal75=null;
  Token STAR76=null;
  Token char_literal77=null;
  Token char_literal78=null;
  Token char_literal79=null;
  Token char_literal80=null;
  Token char_literal81=null;
  Token char_literal82=null;
  MeteorParser.pathExpression_return path=null;
  EvaluationExpression pos_tree=null;
  EvaluationExpression start_tree=null;
  EvaluationExpression end_tree=null;
  EvaluationExpression char_literal75_tree=null;
  EvaluationExpression STAR76_tree=null;
  EvaluationExpression char_literal77_tree=null;
  EvaluationExpression char_literal78_tree=null;
  EvaluationExpression char_literal79_tree=null;
  EvaluationExpression char_literal80_tree=null;
  EvaluationExpression char_literal81_tree=null;
  EvaluationExpression char_literal82_tree=null;
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
  try {
    int alt41=3;
    int LA41_0=input.LA(1);
    if ((LA41_0 == 56)) {
switch (input.LA(2)) {
case STAR:
{
          alt41=1;
        }
      break;
case INTEGER:
{
      int LA41_3=input.LA(3);
      if ((LA41_3 == 57)) {
        alt41=2;
      }
 else       if ((LA41_3 == 47)) {
        alt41=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",41,3,input);
        throw nvae;
      }
    }
  break;
case UINT:
{
  int LA41_4=input.LA(3);
  if ((LA41_4 == 57)) {
    alt41=2;
  }
 else   if ((LA41_4 == 47)) {
    alt41=3;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",41,4,input);
    throw nvae;
  }
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",41,1,input);
throw nvae;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",41,0,input);
throw nvae;
}
switch (alt41) {
case 1:
{
char_literal75=(Token)match(input,56,FOLLOW_56_in_arrayAccess1552);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal75);
STAR76=(Token)match(input,STAR,FOLLOW_STAR_in_arrayAccess1554);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STAR.add(STAR76);
char_literal77=(Token)match(input,57,FOLLOW_57_in_arrayAccess1556);
if (state.failed) return retval;
if (state.backtracking == 0) stream_57.add(char_literal77);
pushFollow(FOLLOW_pathExpression_in_arrayAccess1560);
path=pathExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_pathExpression.add(path.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path",path != null ? path.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayProjection"),root_1);
adaptor.addChild(root_1,stream_path.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
char_literal78=(Token)match(input,56,FOLLOW_56_in_arrayAccess1580);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal78);
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == INTEGER)) {
alt38=1;
}
 else if ((LA38_0 == UINT)) {
alt38=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",38,0,input);
throw nvae;
}
switch (alt38) {
case 1:
{
pos=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1585);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(pos);
}
break;
case 2:
{
pos=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1591);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(pos);
}
break;
}
char_literal79=(Token)match(input,57,FOLLOW_57_in_arrayAccess1594);
if (state.failed) return retval;
if (state.backtracking == 0) stream_57.add(char_literal79);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((pos != null ? pos.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
char_literal80=(Token)match(input,56,FOLLOW_56_in_arrayAccess1612);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal80);
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == INTEGER)) {
alt39=1;
}
 else if ((LA39_0 == UINT)) {
alt39=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",39,0,input);
throw nvae;
}
switch (alt39) {
case 1:
{
start=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1617);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(start);
}
break;
case 2:
{
start=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1623);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(start);
}
break;
}
char_literal81=(Token)match(input,47,FOLLOW_47_in_arrayAccess1626);
if (state.failed) return retval;
if (state.backtracking == 0) stream_47.add(char_literal81);
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 == INTEGER)) {
alt40=1;
}
 else if ((LA40_0 == UINT)) {
alt40=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",40,0,input);
throw nvae;
}
switch (alt40) {
case 1:
{
end=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1631);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(end);
}
break;
case 2:
{
end=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1637);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(end);
}
break;
}
char_literal82=(Token)match(input,57,FOLLOW_57_in_arrayAccess1640);
if (state.failed) return retval;
if (state.backtracking == 0) stream_57.add(char_literal82);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((start != null ? start.getText() : null)));
adaptor.addChild(root_1,Integer.valueOf((end != null ? end.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
