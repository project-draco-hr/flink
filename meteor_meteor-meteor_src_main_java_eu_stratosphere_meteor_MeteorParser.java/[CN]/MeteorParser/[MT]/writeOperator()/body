{
  MeteorParser.writeOperator_return retval=new MeteorParser.writeOperator_return();
  retval.start=input.LT(1);
  int writeOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token from=null;
  Token loc=null;
  Token file=null;
  Token string_literal94=null;
  Token string_literal95=null;
  Token char_literal96=null;
  Token char_literal97=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression loc_tree=null;
  EvaluationExpression file_tree=null;
  EvaluationExpression string_literal94_tree=null;
  EvaluationExpression string_literal95_tree=null;
  EvaluationExpression char_literal96_tree=null;
  EvaluationExpression char_literal97_tree=null;
  RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
  RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
  RewriteRuleTokenStream stream_30=new RewriteRuleTokenStream(adaptor,"token 30");
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,34)) {
      return retval;
    }
{
      string_literal94=(Token)match(input,67,FOLLOW_67_in_writeOperator1695);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_67.add(string_literal94);
      from=(Token)match(input,VAR,FOLLOW_VAR_in_writeOperator1699);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(from);
      string_literal95=(Token)match(input,68,FOLLOW_68_in_writeOperator1701);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_68.add(string_literal95);
      int alt45=2;
      int LA45_0=input.LA(1);
      if ((LA45_0 == ID)) {
        int LA45_1=input.LA(2);
        if ((LA45_1 == 30)) {
          alt45=2;
        }
 else         if ((LA45_1 == STRING)) {
          alt45=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",45,1,input);
          throw nvae;
        }
      }
 else       if ((LA45_0 == STRING)) {
        alt45=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",45,0,input);
        throw nvae;
      }
switch (alt45) {
case 1:
{
          int alt44=2;
          int LA44_0=input.LA(1);
          if ((LA44_0 == ID)) {
            alt44=1;
          }
switch (alt44) {
case 1:
{
              loc=(Token)match(input,ID,FOLLOW_ID_in_writeOperator1706);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_ID.add(loc);
            }
          break;
      }
      file=(Token)match(input,STRING,FOLLOW_STRING_in_writeOperator1711);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(file);
    }
  break;
case 2:
{
  loc=(Token)match(input,ID,FOLLOW_ID_in_writeOperator1717);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(loc);
  char_literal96=(Token)match(input,30,FOLLOW_30_in_writeOperator1719);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_30.add(char_literal96);
  file=(Token)match(input,STRING,FOLLOW_STRING_in_writeOperator1723);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_STRING.add(file);
  char_literal97=(Token)match(input,32,FOLLOW_32_in_writeOperator1725);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_32.add(char_literal97);
}
break;
}
if (state.backtracking == 0) {
Sink sink=new Sink(JsonOutputFormat.class,(file != null ? file.getText() : null));
((operator_scope)operator_stack.peek()).result=sink;
sink.setInputs(getBinding(from,JsonStreamExpression.class).getStream());
this.sinks.add(sink);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,34,writeOperator_StartIndex);
}
}
return retval;
}
