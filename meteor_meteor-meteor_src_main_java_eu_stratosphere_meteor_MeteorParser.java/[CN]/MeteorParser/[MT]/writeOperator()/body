{
  MeteorParser.writeOperator_return retval=new MeteorParser.writeOperator_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token from=null;
  Token loc=null;
  Token file=null;
  Token string_literal97=null;
  Token string_literal98=null;
  Token char_literal99=null;
  Token char_literal100=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression loc_tree=null;
  EvaluationExpression file_tree=null;
  EvaluationExpression string_literal97_tree=null;
  EvaluationExpression string_literal98_tree=null;
  EvaluationExpression char_literal99_tree=null;
  EvaluationExpression char_literal100_tree=null;
  RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
  RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  try {
{
      string_literal97=(Token)match(input,66,FOLLOW_66_in_writeOperator1912);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_66.add(string_literal97);
      from=(Token)match(input,VAR,FOLLOW_VAR_in_writeOperator1916);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(from);
      string_literal98=(Token)match(input,63,FOLLOW_63_in_writeOperator1918);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_63.add(string_literal98);
      int alt48=2;
      int LA48_0=input.LA(1);
      if ((LA48_0 == ID)) {
        int LA48_1=input.LA(2);
        if ((LA48_1 == 38)) {
          alt48=2;
        }
 else         if ((LA48_1 == STRING)) {
          alt48=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",48,1,input);
          throw nvae;
        }
      }
 else       if ((LA48_0 == STRING)) {
        alt48=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",48,0,input);
        throw nvae;
      }
switch (alt48) {
case 1:
{
          int alt47=2;
          int LA47_0=input.LA(1);
          if ((LA47_0 == ID)) {
            alt47=1;
          }
switch (alt47) {
case 1:
{
              loc=(Token)match(input,ID,FOLLOW_ID_in_writeOperator1923);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_ID.add(loc);
            }
          break;
      }
      file=(Token)match(input,STRING,FOLLOW_STRING_in_writeOperator1928);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(file);
    }
  break;
case 2:
{
  loc=(Token)match(input,ID,FOLLOW_ID_in_writeOperator1934);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(loc);
  char_literal99=(Token)match(input,38,FOLLOW_38_in_writeOperator1936);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_38.add(char_literal99);
  file=(Token)match(input,STRING,FOLLOW_STRING_in_writeOperator1940);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_STRING.add(file);
  char_literal100=(Token)match(input,39,FOLLOW_39_in_writeOperator1942);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_39.add(char_literal100);
}
break;
}
if (state.backtracking == 0) {
Sink sink=new Sink(JsonOutputFormat.class,(file != null ? file.getText() : null));
((operator_scope)operator_stack.peek()).result=sink;
sink.setInputs(getVariable(from).getStream());
this.sinks.add(sink);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
