{
  MeteorParser.elementExpression_return retval=new MeteorParser.elementExpression_return();
  retval.start=input.LT(1);
  int elementExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token not=null;
  Token string_literal30=null;
  MeteorParser.comparisonExpression_return elem=null;
  MeteorParser.comparisonExpression_return set=null;
  EvaluationExpression not_tree=null;
  EvaluationExpression string_literal30_tree=null;
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
  RewriteRuleSubtreeStream stream_comparisonExpression=new RewriteRuleSubtreeStream(adaptor,"rule comparisonExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,12)) {
      return retval;
    }
{
      pushFollow(FOLLOW_comparisonExpression_in_elementExpression515);
      elem=comparisonExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_comparisonExpression.add(elem.getTree());
      int alt13=2;
      int LA13_0=input.LA(1);
      if (((LA13_0 >= 41 && LA13_0 <= 42))) {
        alt13=1;
      }
switch (alt13) {
case 1:
{
          int alt12=2;
          int LA12_0=input.LA(1);
          if ((LA12_0 == 41)) {
            alt12=1;
          }
switch (alt12) {
case 1:
{
              not=(Token)match(input,41,FOLLOW_41_in_elementExpression520);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_41.add(not);
            }
          break;
      }
      string_literal30=(Token)match(input,42,FOLLOW_42_in_elementExpression523);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_42.add(string_literal30);
      pushFollow(FOLLOW_comparisonExpression_in_elementExpression527);
      set=comparisonExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_comparisonExpression.add(set.getTree());
    }
  break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_elem=new RewriteRuleSubtreeStream(adaptor,"rule elem",elem != null ? elem.tree : null);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_set=new RewriteRuleSubtreeStream(adaptor,"rule set",set != null ? set.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (set == null) {
  adaptor.addChild(root_0,stream_elem.nextTree());
}
 else {
{
    EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
    root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ElementInSetExpression"),root_1);
    adaptor.addChild(root_1,stream_elem.nextTree());
    adaptor.addChild(root_1,not == null ? ElementInSetExpression.Quantor.EXISTS_IN : ElementInSetExpression.Quantor.EXISTS_NOT_IN);
    adaptor.addChild(root_1,stream_set.nextTree());
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,12,elementExpression_StartIndex);
}
}
return retval;
}
