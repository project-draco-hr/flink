{
  MeteorParser.andExpression_return retval=new MeteorParser.andExpression_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token AND29=null;
  Token string_literal30=null;
  List list_exprs=null;
  RuleReturnScope exprs=null;
  EvaluationExpression AND29_tree=null;
  EvaluationExpression string_literal30_tree=null;
  RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
  RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
  RewriteRuleSubtreeStream stream_elementExpression=new RewriteRuleSubtreeStream(adaptor,"rule elementExpression");
  try {
{
      pushFollow(FOLLOW_elementExpression_in_andExpression503);
      exprs=elementExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_elementExpression.add(exprs.getTree());
      if (list_exprs == null)       list_exprs=new ArrayList();
      list_exprs.add(exprs.getTree());
      loop11:       do {
        int alt11=2;
        int LA11_0=input.LA(1);
        if ((LA11_0 == AND || LA11_0 == 37)) {
          alt11=1;
        }
switch (alt11) {
case 1:
{
            int alt10=2;
            int LA10_0=input.LA(1);
            if ((LA10_0 == AND)) {
              alt10=1;
            }
 else             if ((LA10_0 == 37)) {
              alt10=2;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("",10,0,input);
              throw nvae;
            }
switch (alt10) {
case 1:
{
                AND29=(Token)match(input,AND,FOLLOW_AND_in_andExpression507);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_AND.add(AND29);
              }
            break;
case 2:
{
            string_literal30=(Token)match(input,37,FOLLOW_37_in_andExpression511);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_37.add(string_literal30);
          }
        break;
    }
    pushFollow(FOLLOW_elementExpression_in_andExpression516);
    exprs=elementExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_elementExpression.add(exprs.getTree());
    if (list_exprs == null)     list_exprs=new ArrayList();
    list_exprs.add(exprs.getTree());
  }
break;
default :
break loop11;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (list_exprs.size() == 1) {
adaptor.addChild(root_0,list_exprs.get(0));
}
 else {
adaptor.addChild(root_0,AndExpression.valueOf(list_exprs));
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
