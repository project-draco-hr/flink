{
  operatorOption_stack.push(new operatorOption_scope());
  MeteorParser.operatorOption_return retval=new MeteorParser.operatorOption_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token name=null;
  MeteorParser.contextAwareExpression_return expr=null;
  EvaluationExpression name_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_contextAwareExpression=new RewriteRuleSubtreeStream(adaptor,"rule contextAwareExpression");
  try {
{
      name=(Token)match(input,ID,FOLLOW_ID_in_operatorOption1941);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      if (state.backtracking == 0) {
        ((operatorOption_scope)operatorOption_stack.peek()).property=findOperatorPropertyRelunctantly(((genericOperator_scope)genericOperator_stack.peek()).operatorInfo,name);
      }
      pushFollow(FOLLOW_contextAwareExpression_in_operatorOption1950);
      expr=contextAwareExpression(null);
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_contextAwareExpression.add(expr.getTree());
      if (state.backtracking == 0) {
        ((operatorOption_scope)operatorOption_stack.peek()).property.setValue(((operator_scope)operator_stack.peek()).result,(expr != null ? ((EvaluationExpression)expr.tree) : null));
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          root_0=null;
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    operatorOption_stack.pop();
  }
  return retval;
}
