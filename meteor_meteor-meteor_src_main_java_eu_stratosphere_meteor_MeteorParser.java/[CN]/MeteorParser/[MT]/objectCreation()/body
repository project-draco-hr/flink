{
  objectCreation_stack.push(new objectCreation_scope());
  MeteorParser.objectCreation_return retval=new MeteorParser.objectCreation_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token char_literal69=null;
  Token char_literal71=null;
  Token char_literal73=null;
  Token char_literal74=null;
  MeteorParser.fieldAssignment_return fieldAssignment70=null;
  MeteorParser.fieldAssignment_return fieldAssignment72=null;
  EvaluationExpression char_literal69_tree=null;
  EvaluationExpression char_literal71_tree=null;
  EvaluationExpression char_literal73_tree=null;
  EvaluationExpression char_literal74_tree=null;
  RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
  RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleSubtreeStream stream_fieldAssignment=new RewriteRuleSubtreeStream(adaptor,"rule fieldAssignment");
  ((objectCreation_scope)objectCreation_stack.peek()).mappings=new ArrayList<ObjectCreation.Mapping>();
  paraphrase.push("a json object");
  try {
{
      char_literal69=(Token)match(input,67,FOLLOW_67_in_objectCreation1478);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_67.add(char_literal69);
      int alt35=2;
      int LA35_0=input.LA(1);
      if ((LA35_0 == ID || LA35_0 == VAR)) {
        alt35=1;
      }
switch (alt35) {
case 1:
{
          pushFollow(FOLLOW_fieldAssignment_in_objectCreation1481);
          fieldAssignment70=fieldAssignment();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_fieldAssignment.add(fieldAssignment70.getTree());
          loop33:           do {
            int alt33=2;
            int LA33_0=input.LA(1);
            if ((LA33_0 == 42)) {
              int LA33_1=input.LA(2);
              if ((LA33_1 == ID || LA33_1 == VAR)) {
                alt33=1;
              }
            }
switch (alt33) {
case 1:
{
                char_literal71=(Token)match(input,42,FOLLOW_42_in_objectCreation1484);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_42.add(char_literal71);
                pushFollow(FOLLOW_fieldAssignment_in_objectCreation1486);
                fieldAssignment72=fieldAssignment();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_fieldAssignment.add(fieldAssignment72.getTree());
              }
            break;
default :
          break loop33;
      }
    }
 while (true);
    int alt34=2;
    int LA34_0=input.LA(1);
    if ((LA34_0 == 42)) {
      alt34=1;
    }
switch (alt34) {
case 1:
{
        char_literal73=(Token)match(input,42,FOLLOW_42_in_objectCreation1490);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_42.add(char_literal73);
      }
    break;
}
}
break;
}
char_literal74=(Token)match(input,69,FOLLOW_69_in_objectCreation1495);
if (state.failed) return retval;
if (state.backtracking == 0) stream_69.add(char_literal74);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ObjectCreation"),root_1);
adaptor.addChild(root_1,((objectCreation_scope)objectCreation_stack.peek()).mappings);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
paraphrase.pop();
}
}
 catch (MissingTokenException re) {
explainUsage("expected <,> or <}> after a complete field assignment inside of a json object",re);
}
 finally {
objectCreation_stack.pop();
}
return retval;
}
