{
  objectCreation_stack.push(new objectCreation_scope());
  MeteorParser.objectCreation_return retval=new MeteorParser.objectCreation_return();
  retval.start=input.LT(1);
  int objectCreation_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal68=null;
  Token char_literal70=null;
  Token char_literal72=null;
  Token char_literal73=null;
  MeteorParser.fieldAssignment_return fieldAssignment69=null;
  MeteorParser.fieldAssignment_return fieldAssignment71=null;
  EvaluationExpression char_literal68_tree=null;
  EvaluationExpression char_literal70_tree=null;
  EvaluationExpression char_literal72_tree=null;
  EvaluationExpression char_literal73_tree=null;
  RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
  RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
  RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
  RewriteRuleSubtreeStream stream_fieldAssignment=new RewriteRuleSubtreeStream(adaptor,"rule fieldAssignment");
  ((objectCreation_scope)objectCreation_stack.peek()).mappings=new ArrayList<ObjectCreation.Mapping>();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,27)) {
      return retval;
    }
{
      char_literal68=(Token)match(input,58,FOLLOW_58_in_objectCreation1343);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_58.add(char_literal68);
      int alt36=2;
      int LA36_0=input.LA(1);
      if (((LA36_0 >= ID && LA36_0 <= VAR))) {
        alt36=1;
      }
switch (alt36) {
case 1:
{
          pushFollow(FOLLOW_fieldAssignment_in_objectCreation1346);
          fieldAssignment69=fieldAssignment();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_fieldAssignment.add(fieldAssignment69.getTree());
          loop34:           do {
            int alt34=2;
            int LA34_0=input.LA(1);
            if ((LA34_0 == 28)) {
              int LA34_1=input.LA(2);
              if (((LA34_1 >= ID && LA34_1 <= VAR))) {
                alt34=1;
              }
            }
switch (alt34) {
case 1:
{
                char_literal70=(Token)match(input,28,FOLLOW_28_in_objectCreation1349);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_28.add(char_literal70);
                pushFollow(FOLLOW_fieldAssignment_in_objectCreation1351);
                fieldAssignment71=fieldAssignment();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_fieldAssignment.add(fieldAssignment71.getTree());
              }
            break;
default :
          break loop34;
      }
    }
 while (true);
    int alt35=2;
    int LA35_0=input.LA(1);
    if ((LA35_0 == 28)) {
      alt35=1;
    }
switch (alt35) {
case 1:
{
        char_literal72=(Token)match(input,28,FOLLOW_28_in_objectCreation1355);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_28.add(char_literal72);
      }
    break;
}
}
break;
}
char_literal73=(Token)match(input,59,FOLLOW_59_in_objectCreation1360);
if (state.failed) return retval;
if (state.backtracking == 0) stream_59.add(char_literal73);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ObjectCreation"),root_1);
adaptor.addChild(root_1,((objectCreation_scope)objectCreation_stack.peek()).mappings);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,27,objectCreation_StartIndex);
}
objectCreation_stack.pop();
}
return retval;
}
