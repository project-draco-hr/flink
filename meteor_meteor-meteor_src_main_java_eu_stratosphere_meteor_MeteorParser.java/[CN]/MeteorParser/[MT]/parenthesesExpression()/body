{
  MeteorParser.parenthesesExpression_return retval=new MeteorParser.parenthesesExpression_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token char_literal54=null;
  Token char_literal56=null;
  MeteorParser.expression_return expression55=null;
  EvaluationExpression char_literal54_tree=null;
  EvaluationExpression char_literal56_tree=null;
  RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
{
{
        char_literal54=(Token)match(input,38,FOLLOW_38_in_parenthesesExpression1233);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_38.add(char_literal54);
        pushFollow(FOLLOW_expression_in_parenthesesExpression1235);
        expression55=expression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_expression.add(expression55.getTree());
        char_literal56=(Token)match(input,39,FOLLOW_39_in_parenthesesExpression1237);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_39.add(char_literal56);
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          adaptor.addChild(root_0,stream_expression.nextTree());
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
  }
  return retval;
}
