{
  MeteorParser.parenthesesExpression_return retval=new MeteorParser.parenthesesExpression_return();
  retval.start=input.LT(1);
  int parenthesesExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal52=null;
  Token char_literal54=null;
  MeteorParser.expression_return expression53=null;
  EvaluationExpression char_literal52_tree=null;
  EvaluationExpression char_literal54_tree=null;
  RewriteRuleTokenStream stream_30=new RewriteRuleTokenStream(adaptor,"token 30");
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,24)) {
      return retval;
    }
{
{
        char_literal52=(Token)match(input,30,FOLLOW_30_in_parenthesesExpression1097);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_30.add(char_literal52);
        pushFollow(FOLLOW_expression_in_parenthesesExpression1099);
        expression53=expression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_expression.add(expression53.getTree());
        char_literal54=(Token)match(input,32,FOLLOW_32_in_parenthesesExpression1101);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_32.add(char_literal54);
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          adaptor.addChild(root_0,stream_expression.nextTree());
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,24,parenthesesExpression_StartIndex);
    }
  }
  return retval;
}
