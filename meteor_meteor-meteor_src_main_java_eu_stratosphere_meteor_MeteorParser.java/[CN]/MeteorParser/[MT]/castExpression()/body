{
  MeteorParser.castExpression_return retval=new MeteorParser.castExpression_return();
  retval.start=input.LT(1);
  int castExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token type=null;
  Token char_literal39=null;
  Token char_literal40=null;
  Token string_literal41=null;
  MeteorParser.generalPathExpression_return expr=null;
  EvaluationExpression type_tree=null;
  EvaluationExpression char_literal39_tree=null;
  EvaluationExpression char_literal40_tree=null;
  EvaluationExpression string_literal41_tree=null;
  RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_generalPathExpression=new RewriteRuleSubtreeStream(adaptor,"rule generalPathExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,18)) {
      return retval;
    }
{
      int alt23=3;
      alt23=dfa23.predict(input);
switch (alt23) {
case 1:
{
          char_literal39=(Token)match(input,31,FOLLOW_31_in_castExpression871);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_31.add(char_literal39);
          type=(Token)match(input,ID,FOLLOW_ID_in_castExpression875);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(type);
          char_literal40=(Token)match(input,32,FOLLOW_32_in_castExpression877);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_32.add(char_literal40);
          pushFollow(FOLLOW_generalPathExpression_in_castExpression881);
          expr=generalPathExpression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_generalPathExpression.add(expr.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_generalPathExpression_in_castExpression888);
      expr=generalPathExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_generalPathExpression.add(expr.getTree());
      string_literal41=(Token)match(input,56,FOLLOW_56_in_castExpression890);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_56.add(string_literal41);
      type=(Token)match(input,ID,FOLLOW_ID_in_castExpression894);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(type);
    }
  break;
case 3:
{
  pushFollow(FOLLOW_generalPathExpression_in_castExpression901);
  expr=generalPathExpression();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_generalPathExpression.add(expr.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr != null ? expr.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (type != null) {
adaptor.addChild(root_0,coerce((type != null ? type.getText() : null),(expr != null ? ((EvaluationExpression)expr.tree) : null)));
}
 else {
adaptor.addChild(root_0,stream_expr.nextTree());
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,18,castExpression_StartIndex);
}
}
return retval;
}
