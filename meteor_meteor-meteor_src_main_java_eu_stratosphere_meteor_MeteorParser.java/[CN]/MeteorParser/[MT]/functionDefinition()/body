{
  MeteorParser.functionDefinition_return retval=new MeteorParser.functionDefinition_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token name=null;
  Token param=null;
  Token char_literal11=null;
  Token FN12=null;
  Token char_literal13=null;
  Token char_literal14=null;
  Token char_literal15=null;
  MeteorParser.contextAwareExpression_return def=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression param_tree=null;
  EvaluationExpression char_literal11_tree=null;
  EvaluationExpression FN12_tree=null;
  EvaluationExpression char_literal13_tree=null;
  EvaluationExpression char_literal14_tree=null;
  EvaluationExpression char_literal15_tree=null;
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleTokenStream stream_FN=new RewriteRuleTokenStream(adaptor,"token FN");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
  RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  RewriteRuleSubtreeStream stream_contextAwareExpression=new RewriteRuleSubtreeStream(adaptor,"rule contextAwareExpression");
  List<Token> params=new ArrayList();
  try {
{
      name=(Token)match(input,ID,FOLLOW_ID_in_functionDefinition229);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      char_literal11=(Token)match(input,51,FOLLOW_51_in_functionDefinition231);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_51.add(char_literal11);
      FN12=(Token)match(input,FN,FOLLOW_FN_in_functionDefinition233);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_FN.add(FN12);
      char_literal13=(Token)match(input,38,FOLLOW_38_in_functionDefinition235);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_38.add(char_literal13);
      int alt5=2;
      int LA5_0=input.LA(1);
      if ((LA5_0 == ID)) {
        alt5=1;
      }
switch (alt5) {
case 1:
{
          param=(Token)match(input,ID,FOLLOW_ID_in_functionDefinition244);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(param);
          if (state.backtracking == 0) {
            params.add(param);
          }
          loop4:           do {
            int alt4=2;
            int LA4_0=input.LA(1);
            if ((LA4_0 == 42)) {
              alt4=1;
            }
switch (alt4) {
case 1:
{
                char_literal14=(Token)match(input,42,FOLLOW_42_in_functionDefinition251);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_42.add(char_literal14);
                param=(Token)match(input,ID,FOLLOW_ID_in_functionDefinition255);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_ID.add(param);
                if (state.backtracking == 0) {
                  params.add(param);
                }
              }
            break;
default :
          break loop4;
      }
    }
 while (true);
  }
break;
}
char_literal15=(Token)match(input,39,FOLLOW_39_in_functionDefinition266);
if (state.failed) return retval;
if (state.backtracking == 0) stream_39.add(char_literal15);
if (state.backtracking == 0) {
addConstantScope();
for (int index=0; index < params.size(); index++) this.getConstantRegistry().put(params.get(index).getText(),new InputSelection(index));
}
pushFollow(FOLLOW_contextAwareExpression_in_functionDefinition278);
def=contextAwareExpression(null);
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_contextAwareExpression.add(def.getTree());
if (state.backtracking == 0) {
addFunction(name.getText(),new ExpressionFunction(params.size(),def.tree));
removeConstantScope();
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
