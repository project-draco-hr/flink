{
  MeteorParser.streamIndexAccess_return retval=new MeteorParser.streamIndexAccess_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token op=null;
  Token char_literal84=null;
  Token char_literal85=null;
  MeteorParser.generalPathExpression_return path=null;
  EvaluationExpression op_tree=null;
  EvaluationExpression char_literal84_tree=null;
  EvaluationExpression char_literal85_tree=null;
  RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  RewriteRuleSubtreeStream stream_generalPathExpression=new RewriteRuleSubtreeStream(adaptor,"rule generalPathExpression");
  try {
{
      op=(Token)match(input,VAR,FOLLOW_VAR_in_streamIndexAccess1697);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(op);
      if (!((getVariable(op) != null))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"streamIndexAccess"," getVariable($op) != null ");
      }
      char_literal84=(Token)match(input,57,FOLLOW_57_in_streamIndexAccess1706);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_57.add(char_literal84);
      pushFollow(FOLLOW_generalPathExpression_in_streamIndexAccess1710);
      path=generalPathExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_generalPathExpression.add(path.getTree());
      char_literal85=(Token)match(input,58,FOLLOW_58_in_streamIndexAccess1712);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_58.add(char_literal85);
      if (!((!((path != null ? ((EvaluationExpression)path.tree) : null) instanceof ConstantExpression)))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"streamIndexAccess"," !($path.tree instanceof ConstantExpression) ");
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          adaptor.addChild(root_0,new StreamIndexExpression(getVariable(op).getStream(),(path != null ? ((EvaluationExpression)path.tree) : null)));
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
  }
  return retval;
}
