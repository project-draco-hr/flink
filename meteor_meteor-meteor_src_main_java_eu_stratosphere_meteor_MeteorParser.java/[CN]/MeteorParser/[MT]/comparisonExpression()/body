{
  MeteorParser.comparisonExpression_return retval=new MeteorParser.comparisonExpression_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token s=null;
  MeteorParser.arithmeticExpression_return e1=null;
  MeteorParser.arithmeticExpression_return e2=null;
  EvaluationExpression s_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
  RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
  RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
  RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
  RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
  RewriteRuleSubtreeStream stream_arithmeticExpression=new RewriteRuleSubtreeStream(adaptor,"rule arithmeticExpression");
  try {
{
      pushFollow(FOLLOW_arithmeticExpression_in_comparisonExpression598);
      e1=arithmeticExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_arithmeticExpression.add(e1.getTree());
      int alt15=2;
      int LA15_0=input.LA(1);
      if ((LA15_0 == 36 || (LA15_0 >= 49 && LA15_0 <= 50) || (LA15_0 >= 52 && LA15_0 <= 54))) {
        alt15=1;
      }
switch (alt15) {
case 1:
{
          int alt14=6;
switch (input.LA(1)) {
case 50:
{
              alt14=1;
            }
          break;
case 54:
{
          alt14=2;
        }
      break;
case 49:
{
      alt14=3;
    }
  break;
case 53:
{
  alt14=4;
}
break;
case 52:
{
alt14=5;
}
break;
case 36:
{
alt14=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",14,0,input);
throw nvae;
}
switch (alt14) {
case 1:
{
s=(Token)match(input,50,FOLLOW_50_in_comparisonExpression604);
if (state.failed) return retval;
if (state.backtracking == 0) stream_50.add(s);
}
break;
case 2:
{
s=(Token)match(input,54,FOLLOW_54_in_comparisonExpression610);
if (state.failed) return retval;
if (state.backtracking == 0) stream_54.add(s);
}
break;
case 3:
{
s=(Token)match(input,49,FOLLOW_49_in_comparisonExpression616);
if (state.failed) return retval;
if (state.backtracking == 0) stream_49.add(s);
}
break;
case 4:
{
s=(Token)match(input,53,FOLLOW_53_in_comparisonExpression622);
if (state.failed) return retval;
if (state.backtracking == 0) stream_53.add(s);
}
break;
case 5:
{
s=(Token)match(input,52,FOLLOW_52_in_comparisonExpression628);
if (state.failed) return retval;
if (state.backtracking == 0) stream_52.add(s);
}
break;
case 6:
{
s=(Token)match(input,36,FOLLOW_36_in_comparisonExpression634);
if (state.failed) return retval;
if (state.backtracking == 0) stream_36.add(s);
}
break;
}
pushFollow(FOLLOW_arithmeticExpression_in_comparisonExpression639);
e2=arithmeticExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_arithmeticExpression.add(e2.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1 != null ? e1.tree : null);
RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2 != null ? e2.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (s == null) {
adaptor.addChild(root_0,stream_e1.nextTree());
}
 else if (s.getText().equals("!=")) {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.NOT_EQUAL);
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
 else if (s.getText().equals("==")) {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.EQUAL);
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
 else {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.valueOfSymbol((s != null ? s.getText() : null)));
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
