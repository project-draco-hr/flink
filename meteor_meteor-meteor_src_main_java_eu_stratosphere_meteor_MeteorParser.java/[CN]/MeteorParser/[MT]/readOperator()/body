{
  MeteorParser.readOperator_return retval=new MeteorParser.readOperator_return();
  retval.start=input.LT(1);
  int readOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token loc=null;
  Token file=null;
  Token string_literal90=null;
  Token string_literal91=null;
  Token char_literal92=null;
  Token char_literal93=null;
  EvaluationExpression loc_tree=null;
  EvaluationExpression file_tree=null;
  EvaluationExpression string_literal90_tree=null;
  EvaluationExpression string_literal91_tree=null;
  EvaluationExpression char_literal92_tree=null;
  EvaluationExpression char_literal93_tree=null;
  RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
  RewriteRuleTokenStream stream_30=new RewriteRuleTokenStream(adaptor,"token 30");
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,33)) {
      return retval;
    }
{
      string_literal90=(Token)match(input,65,FOLLOW_65_in_readOperator1677);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_65.add(string_literal90);
      string_literal91=(Token)match(input,66,FOLLOW_66_in_readOperator1679);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_66.add(string_literal91);
      int alt43=2;
      int LA43_0=input.LA(1);
      if ((LA43_0 == ID)) {
        int LA43_1=input.LA(2);
        if ((LA43_1 == 30)) {
          alt43=2;
        }
 else         if ((LA43_1 == STRING)) {
          alt43=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",43,1,input);
          throw nvae;
        }
      }
 else       if ((LA43_0 == STRING)) {
        alt43=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",43,0,input);
        throw nvae;
      }
switch (alt43) {
case 1:
{
          int alt42=2;
          int LA42_0=input.LA(1);
          if ((LA42_0 == ID)) {
            alt42=1;
          }
switch (alt42) {
case 1:
{
              loc=(Token)match(input,ID,FOLLOW_ID_in_readOperator1684);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_ID.add(loc);
            }
          break;
      }
      file=(Token)match(input,STRING,FOLLOW_STRING_in_readOperator1689);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(file);
    }
  break;
case 2:
{
  loc=(Token)match(input,ID,FOLLOW_ID_in_readOperator1695);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(loc);
  char_literal92=(Token)match(input,30,FOLLOW_30_in_readOperator1697);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_30.add(char_literal92);
  file=(Token)match(input,STRING,FOLLOW_STRING_in_readOperator1701);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_STRING.add(file);
  char_literal93=(Token)match(input,32,FOLLOW_32_in_readOperator1703);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_32.add(char_literal93);
}
break;
}
if (state.backtracking == 0) {
((operator_scope)operator_stack.peek()).result=new Source(JsonInputFormat.class,(file != null ? file.getText() : null));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,33,readOperator_StartIndex);
}
}
return retval;
}
