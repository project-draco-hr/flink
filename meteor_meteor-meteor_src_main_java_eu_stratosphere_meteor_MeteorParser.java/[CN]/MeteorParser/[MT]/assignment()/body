{
  MeteorParser.assignment_return retval=new MeteorParser.assignment_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token target=null;
  Token char_literal10=null;
  MeteorParser.operator_return source=null;
  EvaluationExpression target_tree=null;
  EvaluationExpression char_literal10_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
  RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
  try {
{
      target=(Token)match(input,VAR,FOLLOW_VAR_in_assignment204);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(target);
      char_literal10=(Token)match(input,51,FOLLOW_51_in_assignment206);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_51.add(char_literal10);
      pushFollow(FOLLOW_operator_in_assignment210);
      source=operator();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_operator.add(source.getTree());
      if (state.backtracking == 0) {
        putVariable(target,new JsonStreamExpression((source != null ? source.op : null)));
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          root_0=null;
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    throw e;
  }
 finally {
  }
  return retval;
}
