{
  input_stack.push(new input_scope());
  MeteorParser.input_return retval=new MeteorParser.input_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token name=null;
  Token from=null;
  Token IN108=null;
  MeteorParser.contextAwareExpression_return expr=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression IN108_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
  RewriteRuleSubtreeStream stream_contextAwareExpression=new RewriteRuleSubtreeStream(adaptor,"rule contextAwareExpression");
  try {
{
      int alt54=2;
      int LA54_0=input.LA(1);
      if ((LA54_0 == VAR)) {
        int LA54_1=input.LA(2);
        if ((LA54_1 == IN)) {
          alt54=1;
        }
      }
switch (alt54) {
case 1:
{
          name=(Token)match(input,VAR,FOLLOW_VAR_in_input2087);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_VAR.add(name);
          IN108=(Token)match(input,IN,FOLLOW_IN_in_input2089);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_IN.add(IN108);
        }
      break;
  }
  from=(Token)match(input,VAR,FOLLOW_VAR_in_input2095);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_VAR.add(from);
  if (state.backtracking == 0) {
    int inputIndex=((operator_scope)operator_stack.peek()).numInputs++;
    JsonStreamExpression input=getVariable(from);
    ((operator_scope)operator_stack.peek()).result.setInput(inputIndex,input.getStream());
    JsonStreamExpression inputExpression=new JsonStreamExpression(input.getStream(),inputIndex);
    putVariable(name != null ? name : from,inputExpression);
  }
  int alt55=2;
  int LA55_0=input.LA(1);
  if ((LA55_0 == DECIMAL || LA55_0 == INTEGER || (LA55_0 >= STRING && LA55_0 <= UINT) || LA55_0 == VAR || LA55_0 == 35 || LA55_0 == 38 || LA55_0 == 41 || LA55_0 == 44 || LA55_0 == 57 || LA55_0 == 59 || LA55_0 == 61 || LA55_0 == 64 || LA55_0 == 67 || LA55_0 == 70) && (((((input_scope)input_stack.peek()).inputProperty=findInputPropertyRelunctantly(((genericOperator_scope)genericOperator_stack.peek()).operatorInfo,input.LT(1))) != null))) {
    alt55=1;
  }
 else   if ((LA55_0 == ID)) {
    int LA55_5=input.LA(2);
    if ((((((input_scope)input_stack.peek()).inputProperty=findInputPropertyRelunctantly(((genericOperator_scope)genericOperator_stack.peek()).operatorInfo,input.LT(1))) != null))) {
      alt55=1;
    }
  }
switch (alt55) {
case 1:
{
      if (!(((((input_scope)input_stack.peek()).inputProperty=findInputPropertyRelunctantly(((genericOperator_scope)genericOperator_stack.peek()).operatorInfo,input.LT(1))) != null))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"input"," ($input::inputProperty = findInputPropertyRelunctantly($genericOperator::operatorInfo, input.LT(1))) != null ");
      }
      if (state.backtracking == 0) {
        this.input.consume();
      }
      pushFollow(FOLLOW_contextAwareExpression_in_input2114);
      expr=contextAwareExpression(new InputSelection(((operator_scope)operator_stack.peek()).numInputs - 1));
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_contextAwareExpression.add(expr.getTree());
      if (state.backtracking == 0) {
        ((input_scope)input_stack.peek()).inputProperty.setValue(((operator_scope)operator_stack.peek()).result,((operator_scope)operator_stack.peek()).numInputs - 1,(expr != null ? ((EvaluationExpression)expr.tree) : null));
      }
    }
  break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
  root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
input_stack.pop();
}
return retval;
}
