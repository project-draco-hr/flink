{
  MeteorParser.operatorExpression_return retval=new MeteorParser.operatorExpression_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  MeteorParser.operator_return op=null;
  RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
  try {
{
      pushFollow(FOLLOW_operator_in_operatorExpression1220);
      op=operator();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_operator.add(op.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
{
            EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
            root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"NestedOperatorExpression"),root_1);
            adaptor.addChild(root_1,(op != null ? op.op : null));
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    throw e;
  }
 finally {
  }
  return retval;
}
