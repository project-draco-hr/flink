{
  MeteorParser.arrayInput_return retval=new MeteorParser.arrayInput_return();
  retval.start=input.LT(1);
  EvaluationExpression root_0=null;
  Token from=null;
  Token char_literal109=null;
  Token char_literal110=null;
  Token char_literal111=null;
  Token string_literal112=null;
  Token names=null;
  List list_names=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression char_literal109_tree=null;
  EvaluationExpression char_literal110_tree=null;
  EvaluationExpression char_literal111_tree=null;
  EvaluationExpression string_literal112_tree=null;
  EvaluationExpression names_tree=null;
  RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  try {
{
      char_literal109=(Token)match(input,57,FOLLOW_57_in_arrayInput2068);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_57.add(char_literal109);
      names=(Token)match(input,VAR,FOLLOW_VAR_in_arrayInput2072);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(names);
      if (list_names == null)       list_names=new ArrayList();
      list_names.add(names);
      int alt56=2;
      int LA56_0=input.LA(1);
      if ((LA56_0 == 42)) {
        alt56=1;
      }
switch (alt56) {
case 1:
{
          char_literal110=(Token)match(input,42,FOLLOW_42_in_arrayInput2075);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_42.add(char_literal110);
          names=(Token)match(input,VAR,FOLLOW_VAR_in_arrayInput2079);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_VAR.add(names);
          if (list_names == null)           list_names=new ArrayList();
          list_names.add(names);
        }
      break;
  }
  char_literal111=(Token)match(input,58,FOLLOW_58_in_arrayInput2083);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_58.add(char_literal111);
  string_literal112=(Token)match(input,IN,FOLLOW_IN_in_arrayInput2085);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_IN.add(string_literal112);
  from=(Token)match(input,VAR,FOLLOW_VAR_in_arrayInput2089);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_VAR.add(from);
  if (state.backtracking == 0) {
    ((operator_scope)operator_stack.peek()).result.setInput(0,getVariable(from).getStream());
    for (int index=0; index < list_names.size(); index++) {
      putVariable((Token)list_names.get(index),new JsonStreamExpression(null,index));
    }
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(EvaluationExpression)adaptor.nil();
{
      root_0=null;
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
}
return retval;
}
