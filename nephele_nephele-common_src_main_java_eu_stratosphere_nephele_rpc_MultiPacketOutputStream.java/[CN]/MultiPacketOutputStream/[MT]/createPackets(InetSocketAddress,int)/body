{
  if (this.totalLen == 0) {
    return new DatagramPacket[0];
  }
  final int maximumPacketSize=RPCMessage.MAXIMUM_MSG_SIZE + RPCMessage.METADATA_SIZE;
  final short numberOfPackets=(short)(this.totalLen / maximumPacketSize + 1);
  final DatagramPacket[] packets=new DatagramPacket[numberOfPackets];
  for (short i=0; i < numberOfPackets; ++i) {
    final boolean lastPacket=(i == (numberOfPackets - 1));
    int offset;
    if (lastPacket) {
      offset=(numberOfPackets - 1) * maximumPacketSize + this.lenInPacket;
    }
 else {
      offset=(i + 1) * maximumPacketSize - RPCMessage.METADATA_SIZE;
    }
    NumberUtils.shortToByteArray(i,this.buf,offset);
    NumberUtils.shortToByteArray(numberOfPackets,this.buf,offset + 2);
    NumberUtils.integerToByteArray(messageID,this.buf,offset + 4);
    DatagramPacket packet;
    if (lastPacket) {
      packet=new DatagramPacket(this.buf,i * maximumPacketSize,this.lenInPacket + RPCMessage.METADATA_SIZE);
    }
 else {
      packet=new DatagramPacket(this.buf,i * maximumPacketSize,maximumPacketSize);
    }
    packet.setSocketAddress(remoteAddress);
    packets[i]=packet;
  }
  return packets;
}
