{
  StreamExecutionEnvironment env=new TestStreamEnvironment(4,MEMORYSIZE);
  IterativeDataStream<Boolean> it=env.fromElements(true).iterate();
  IterativeDataStream<Boolean> it2=env.fromElements(true).iterate();
  DataStream<Boolean> head=it.map(new NoOpMap()).name("Head1").broadcast();
  DataStream<Boolean> head2=it2.map(new NoOpMap()).name("Head2").broadcast();
  it.closeWith(head.union(head.map(new NoOpMap()).shuffle()),true);
  it2.closeWith(head2,false);
  System.out.println(env.getExecutionPlan());
  StreamGraph graph=env.getStreamGraph();
  for (  StreamLoop loop : graph.getStreamLoops()) {
    StreamEdge tailToSink=loop.getSink().getInEdges().get(0);
    if (tailToSink.getSourceVertex().getOperatorName().contains("Head1")) {
      assertTrue(tailToSink.getPartitioner() instanceof BroadcastPartitioner);
      assertTrue(loop.getSink().getInEdges().get(1).getPartitioner() instanceof ShufflePartitioner);
    }
 else {
      assertTrue(tailToSink.getPartitioner() instanceof RebalancePartitioner);
    }
  }
}
