{
  StreamExecutionEnvironment env=new TestStreamEnvironment(4,MEMORYSIZE);
  DataStream<Integer> source1=env.fromElements(1,2,3,4,5).shuffle();
  DataStream<Integer> source2=env.fromElements(1,2,3,4,5);
  IterativeDataStream<Integer> iter1=source1.union(source2).iterate();
  DataStream<Integer> head1=iter1.map(NoOpIntMap);
  DataStream<Integer> head2=iter1.map(NoOpIntMap).setParallelism(2).name("shuffle");
  DataStream<Integer> head3=iter1.map(NoOpIntMap).setParallelism(2).addSink(new NoOpSink<Integer>());
  DataStream<Integer> head4=iter1.map(NoOpIntMap).addSink(new NoOpSink<Integer>());
  SplitDataStream<Integer> source3=env.fromElements(1,2,3,4,5).name("split").split(new OutputSelector<Integer>(){
    @Override public Iterable<String> select(    Integer value){
      return value % 2 == 0 ? Arrays.asList("even") : Arrays.asList("odd");
    }
  }
);
  iter1.closeWith(source3.select("even").union(head1.map(NoOpIntMap).broadcast().setParallelism(1).name("bc"),head2.shuffle()),true);
  StreamGraph graph=env.getStreamGraph();
  JobGraph jg=graph.getJobGraph();
  assertEquals(1,graph.getStreamLoops().size());
  StreamLoop loop=new ArrayList<StreamLoop>(graph.getStreamLoops()).get(0);
  assertEquals(4,loop.getHeads().size());
  assertEquals(3,loop.getTails().size());
  assertEquals(2,loop.getSourceSinkPairs().size());
  List<Tuple2<StreamNode,StreamNode>> pairs=loop.getSourceSinkPairs();
  Tuple2<StreamNode,StreamNode> pair1=pairs.get(0).f0.getParallelism() == 2 ? pairs.get(0) : pairs.get(1);
  Tuple2<StreamNode,StreamNode> pair2=pairs.get(0).f0.getParallelism() == 4 ? pairs.get(0) : pairs.get(1);
  assertEquals(pair1.f0.getParallelism(),pair1.f1.getParallelism());
  assertEquals(2,pair1.f0.getParallelism());
  assertEquals(2,pair1.f0.getOutEdges().size());
  assertEquals(3,pair1.f1.getInEdges().size());
  for (  StreamEdge edge : pair1.f0.getOutEdges()) {
    assertTrue(edge.getPartitioner() instanceof RebalancePartitioner);
    assertEquals(2,edge.getTargetVertex().getParallelism());
  }
  for (  StreamEdge edge : pair1.f1.getInEdges()) {
    String tailName=edge.getSourceVertex().getOperatorName();
    if (tailName.equals("split")) {
      assertTrue(edge.getPartitioner() instanceof RebalancePartitioner);
    }
 else     if (tailName.equals("bc")) {
      assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner);
    }
 else     if (tailName.equals("shuffle")) {
      assertTrue(edge.getPartitioner() instanceof ShufflePartitioner);
    }
  }
  assertEquals(pair2.f0.getParallelism(),pair2.f1.getParallelism());
  assertEquals(4,pair2.f0.getParallelism());
  assertEquals(2,pair2.f0.getOutEdges().size());
  assertEquals(3,pair2.f1.getInEdges().size());
  for (  StreamEdge edge : pair2.f0.getOutEdges()) {
    assertTrue(edge.getPartitioner() instanceof RebalancePartitioner);
    assertEquals(4,edge.getTargetVertex().getParallelism());
  }
  for (  StreamEdge edge : pair2.f1.getInEdges()) {
    String tailName=edge.getSourceVertex().getOperatorName();
    if (tailName.equals("split")) {
      assertTrue(edge.getPartitioner() instanceof RebalancePartitioner);
    }
 else     if (tailName.equals("bc")) {
      assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner);
    }
 else     if (tailName.equals("shuffle")) {
      assertTrue(edge.getPartitioner() instanceof ShufflePartitioner);
    }
  }
  assertTrue(loop.getTailSelectedNames().contains(Arrays.asList("even")));
  JobVertex itSource1=null;
  JobVertex itSource2=null;
  JobVertex itSink1=null;
  JobVertex itSink2=null;
  for (  JobVertex vertex : jg.getVertices()) {
    if (vertex.getName().contains("IterationSource")) {
      if (vertex.getName().contains("_0")) {
        itSource1=vertex;
      }
 else       if (vertex.getName().contains("_1")) {
        itSource2=vertex;
      }
    }
 else     if (vertex.getName().contains("IterationSink")) {
      if (vertex.getName().contains("_0")) {
        itSink1=vertex;
      }
 else       if (vertex.getName().contains("_1")) {
        itSink2=vertex;
      }
    }
  }
  assertTrue(itSource1.getCoLocationGroup() != null);
  assertTrue(itSource2.getCoLocationGroup() != null);
  assertEquals(itSource1.getCoLocationGroup(),itSink1.getCoLocationGroup());
  assertEquals(itSource2.getCoLocationGroup(),itSink2.getCoLocationGroup());
  assertNotEquals(itSource1.getCoLocationGroup(),itSource2.getCoLocationGroup());
}
