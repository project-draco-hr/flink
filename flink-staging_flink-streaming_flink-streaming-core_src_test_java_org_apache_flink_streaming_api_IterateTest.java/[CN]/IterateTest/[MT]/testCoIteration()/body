{
  StreamExecutionEnvironment env=new TestStreamEnvironment(2,MEMORYSIZE);
  ConnectedIterativeDataStream<Integer,String> coIt=env.fromElements(0,0).iterate(2000).withFeedbackType("String");
  try {
    coIt.groupBy(1,2);
    fail();
  }
 catch (  UnsupportedOperationException e) {
  }
  DataStream<String> head=coIt.flatMap(new CoFlatMapFunction<Integer,String,String>(){
    private static final long serialVersionUID=1L;
    @Override public void flatMap1(    Integer value,    Collector<String> out) throws Exception {
      out.collect(((Integer)(value + 1)).toString());
    }
    @Override public void flatMap2(    String value,    Collector<String> out) throws Exception {
      Integer intVal=Integer.valueOf(value);
      if (intVal < 2) {
        out.collect(((Integer)(intVal + 1)).toString());
      }
    }
  }
);
  coIt.closeWith(head.broadcast());
  head.addSink(new TestSink()).setParallelism(1);
  env.execute();
  assertEquals(new HashSet<String>(Arrays.asList("1","1","2","2","2","2")),TestSink.collected);
}
