{
  StreamExecutionEnvironment env=new TestStreamEnvironment(4,MEMORYSIZE);
  DataStream<Integer> source1=env.fromElements(1,2,3,4,5).shuffle();
  DataStream<Integer> source2=env.fromElements(1,2,3,4,5);
  IterativeDataStream<Integer> iter1=source1.union(source2).iterate();
  DataStream<Integer> head1=iter1.map(NoOpIntMap);
  DataStream<Integer> head2=iter1.map(NoOpIntMap).setParallelism(2);
  DataStream<Integer> head3=iter1.map(NoOpIntMap).setParallelism(2).addSink(new NoOpSink<Integer>());
  DataStream<Integer> head4=iter1.map(NoOpIntMap).addSink(new NoOpSink<Integer>());
  SplitDataStream<Integer> source3=env.fromElements(1,2,3,4,5).split(new OutputSelector<Integer>(){
    @Override public Iterable<String> select(    Integer value){
      return value % 2 == 0 ? Arrays.asList("even") : Arrays.asList("odd");
    }
  }
);
  iter1.closeWith(source3.select("even").union(head1.map(NoOpIntMap).broadcast().setParallelism(1),head2.shuffle()));
  StreamGraph graph=env.getStreamGraph();
  JobGraph jg=graph.getJobGraph();
  assertEquals(1,graph.getStreamLoops().size());
  StreamLoop loop=new ArrayList<StreamLoop>(graph.getStreamLoops()).get(0);
  assertEquals(4,loop.getHeads().size());
  assertEquals(3,loop.getTails().size());
  assertEquals(1,loop.getSourceSinkPairs().size());
  Tuple2<StreamNode,StreamNode> pair=loop.getSourceSinkPairs().get(0);
  assertEquals(pair.f0.getParallelism(),pair.f1.getParallelism());
  assertEquals(4,pair.f0.getOutEdges().size());
  assertEquals(3,pair.f1.getInEdges().size());
  for (  StreamEdge edge : pair.f0.getOutEdges()) {
    assertTrue(edge.getPartitioner() instanceof ShufflePartitioner);
  }
  for (  StreamEdge edge : pair.f1.getInEdges()) {
    assertTrue(edge.getPartitioner() instanceof RebalancePartitioner);
  }
  assertTrue(loop.getTailSelectedNames().contains(Arrays.asList("even")));
  JobVertex itSource1=null;
  JobVertex itSink1=null;
  for (  JobVertex vertex : jg.getVertices()) {
    if (vertex.getName().contains("IterationSource")) {
      itSource1=vertex;
    }
 else     if (vertex.getName().contains("IterationSink")) {
      itSink1=vertex;
    }
  }
  assertTrue(itSource1.getCoLocationGroup() != null);
  assertEquals(itSource1.getCoLocationGroup(),itSink1.getCoLocationGroup());
}
