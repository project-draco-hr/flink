{
  final JobID jobId=new JobID();
  v1.setParallelism(dop1);
  v2.setParallelism(dop2);
  v1.setInvokableClass(BatchTask.class);
  v2.setInvokableClass(BatchTask.class);
  ExecutionGraph eg=new ExecutionGraph(TestingUtils.directExecutionContext(),jobId,"some job",new Configuration(),AkkaUtils.getDefaultTimeout(),new NoRestartStrategy());
  eg.setQueuedSchedulingAllowed(false);
  List<JobVertex> ordered=Arrays.asList(v1,v2);
  eg.attachJobGraph(ordered);
  Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
  for (int i=0; i < dop1 + dop2; i++) {
    scheduler.newInstanceAvailable(ExecutionGraphTestUtils.getInstance(new ExecutionGraphTestUtils.SimpleActorGateway(TestingUtils.directExecutionContext())));
  }
  assertEquals(dop1 + dop2,scheduler.getNumberOfAvailableSlots());
  eg.scheduleForExecution(scheduler);
  Map<ExecutionAttemptID,Execution> executions=eg.getRegisteredExecutions();
  assertEquals(dop1 + dop2,executions.size());
  return executions;
}
