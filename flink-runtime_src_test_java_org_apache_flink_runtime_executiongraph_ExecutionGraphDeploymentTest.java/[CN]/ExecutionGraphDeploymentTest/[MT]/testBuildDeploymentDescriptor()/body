{
  try {
    TestingUtils.setCallingThreadDispatcher(system);
    final JobID jobId=new JobID();
    final JobVertexID jid1=new JobVertexID();
    final JobVertexID jid2=new JobVertexID();
    final JobVertexID jid3=new JobVertexID();
    final JobVertexID jid4=new JobVertexID();
    AbstractJobVertex v1=new AbstractJobVertex("v1",jid1);
    AbstractJobVertex v2=new AbstractJobVertex("v2",jid2);
    AbstractJobVertex v3=new AbstractJobVertex("v3",jid3);
    AbstractJobVertex v4=new AbstractJobVertex("v4",jid4);
    v1.setParallelism(10);
    v2.setParallelism(10);
    v3.setParallelism(10);
    v4.setParallelism(10);
    v1.setInvokableClass(RegularPactTask.class);
    v2.setInvokableClass(RegularPactTask.class);
    v3.setInvokableClass(RegularPactTask.class);
    v4.setInvokableClass(RegularPactTask.class);
    v2.connectNewDataSetAsInput(v1,DistributionPattern.BIPARTITE);
    v3.connectNewDataSetAsInput(v2,DistributionPattern.BIPARTITE);
    v4.connectNewDataSetAsInput(v2,DistributionPattern.BIPARTITE);
    ExecutionGraph eg=new ExecutionGraph(jobId,"some job",new Configuration());
    List<AbstractJobVertex> ordered=Arrays.asList(v1,v2,v3,v4);
    eg.attachJobGraph(ordered);
    ExecutionJobVertex ejv=eg.getAllVertices().get(jid2);
    ExecutionVertex vertex=ejv.getTaskVertices()[3];
    final TestActorRef simpleTaskManager=TestActorRef.create(system,Props.create(ExecutionGraphTestUtils.SimpleAcknowledgingTaskManager.class));
    ExecutionGraphTestUtils.SimpleAcknowledgingTaskManager tm=(ExecutionGraphTestUtils.SimpleAcknowledgingTaskManager)simpleTaskManager.underlyingActor();
    final Instance instance=getInstance(simpleTaskManager);
    final AllocatedSlot slot=instance.allocateSlot(jobId);
    assertEquals(ExecutionState.CREATED,vertex.getExecutionState());
    vertex.deployToSlot(slot);
    assertEquals(ExecutionState.RUNNING,vertex.getExecutionState());
    TaskDeploymentDescriptor descr=tm.lastTDD;
    assertNotNull(descr);
    assertEquals(jobId,descr.getJobID());
    assertEquals(jid2,descr.getVertexID());
    assertEquals(3,descr.getIndexInSubtaskGroup());
    assertEquals(10,descr.getCurrentNumberOfSubtasks());
    assertEquals(RegularPactTask.class.getName(),descr.getInvokableClassName());
    assertEquals("v2",descr.getTaskName());
    assertEquals(2,descr.getOutputGates().size());
    assertEquals(1,descr.getInputGates().size());
    assertEquals(10,descr.getOutputGates().get(0).getChannels().size());
    assertEquals(10,descr.getOutputGates().get(1).getChannels().size());
    assertEquals(10,descr.getInputGates().get(0).getChannels().size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    TestingUtils.setGlobalExecutionContext();
  }
}
