{
  try {
    final Partitioner<Tuple2<Long,Integer>> partitioner=new MockPartitioner();
    RequestedGlobalProperties req=new RequestedGlobalProperties();
    req.setCustomPartitioned(new FieldSet(6,2),partitioner);
{
      GlobalProperties gp1=new GlobalProperties();
      gp1.setCustomPartitioned(new FieldList(2,6),partitioner);
      assertTrue(req.isMetBy(gp1));
      GlobalProperties gp2=new GlobalProperties();
      gp2.setCustomPartitioned(new FieldList(6,2),partitioner);
      assertTrue(req.isMetBy(gp2));
      GlobalProperties gp3=new GlobalProperties();
      gp3.setCustomPartitioned(new FieldList(6,2),new MockPartitioner());
      assertFalse(req.isMetBy(gp3));
    }
{
      GlobalProperties gp1=new GlobalProperties();
      gp1.setAnyPartitioning(new FieldList(6,2));
      assertFalse(req.isMetBy(gp1));
      GlobalProperties gp2=new GlobalProperties();
      gp2.setHashPartitioned(new FieldList(6,2));
      assertFalse(req.isMetBy(gp2));
      GlobalProperties gp3=new GlobalProperties();
      gp3.setRangePartitioned(new Ordering(2,null,Order.DESCENDING).appendOrdering(6,null,Order.ASCENDING));
      assertFalse(req.isMetBy(gp3));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
