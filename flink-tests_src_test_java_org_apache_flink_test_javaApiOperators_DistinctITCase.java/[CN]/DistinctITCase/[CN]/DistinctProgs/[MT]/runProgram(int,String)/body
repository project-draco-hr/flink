{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getSmall3TupleDataSet(env);
      DataSet<Tuple3<Integer,Long,String>> distinctDs=ds.union(ds).distinct(0,1,2);
      distinctDs.writeAsCsv(resultPath);
      env.execute();
      return "1,1,Hi\n" + "2,2,Hello\n" + "3,2,Hello world\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple5<Integer,Long,Integer,String,Long>> ds=CollectionDataSets.getSmall5TupleDataSet(env);
    DataSet<Tuple1<Integer>> distinctDs=ds.union(ds).distinct(0).project(0).types(Integer.class);
    distinctDs.writeAsCsv(resultPath);
    env.execute();
    return "1\n" + "2\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple5<Integer,Long,Integer,String,Long>> ds=CollectionDataSets.getSmall5TupleDataSet(env);
  DataSet<Tuple1<Integer>> reduceDs=ds.union(ds).distinct(new KeySelector<Tuple5<Integer,Long,Integer,String,Long>,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getKey(    Tuple5<Integer,Long,Integer,String,Long> in){
      return in.f0;
    }
  }
).project(0).types(Integer.class);
  reduceDs.writeAsCsv(resultPath);
  env.execute();
  return "1\n" + "2\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<CustomType> ds=CollectionDataSets.getCustomTypeDataSet(env);
DataSet<Tuple1<Integer>> reduceDs=ds.distinct(new KeySelector<CustomType,Integer>(){
  private static final long serialVersionUID=1L;
  @Override public Integer getKey(  CustomType in){
    return in.myInt;
  }
}
).map(new RichMapFunction<CustomType,Tuple1<Integer>>(){
  @Override public Tuple1<Integer> map(  CustomType value) throws Exception {
    return new Tuple1<Integer>(value.myInt);
  }
}
);
reduceDs.writeAsCsv(resultPath);
env.execute();
return "1\n" + "2\n" + "3\n"+ "4\n"+ "5\n"+ "6\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getSmall3TupleDataSet(env);
DataSet<Tuple3<Integer,Long,String>> distinctDs=ds.union(ds).distinct();
distinctDs.writeAsCsv(resultPath);
env.execute();
return "1,1,Hi\n" + "2,2,Hello\n" + "3,2,Hello world\n";
}
case 6:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Tuple5<Integer,Long,Integer,String,Long>> ds=CollectionDataSets.get5TupleDataSet(env);
DataSet<Tuple2<Integer,Long>> reduceDs=ds.distinct(new KeySelector<Tuple5<Integer,Long,Integer,String,Long>,Tuple2<Integer,Long>>(){
private static final long serialVersionUID=1L;
@Override public Tuple2<Integer,Long> getKey(Tuple5<Integer,Long,Integer,String,Long> t){
return new Tuple2<Integer,Long>(t.f0,t.f4);
}
}
).project(0,4).types(Integer.class,Long.class);
reduceDs.writeAsCsv(resultPath);
env.execute();
return "1,1\n" + "2,1\n" + "2,2\n"+ "3,2\n"+ "3,3\n"+ "4,1\n"+ "4,2\n"+ "5,1\n"+ "5,2\n"+ "5,3\n";
}
case 7:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Tuple5<Integer,Long,Integer,String,Long>> ds=CollectionDataSets.getSmall5TupleDataSet(env);
DataSet<Tuple1<Integer>> reduceDs=ds.union(ds).distinct("f0").project(0).types(Integer.class);
reduceDs.writeAsCsv(resultPath);
env.execute();
return "1\n" + "2\n";
}
case 8:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<POJO> ds=CollectionDataSets.getDuplicatePojoDataSet(env);
DataSet<Integer> reduceDs=ds.distinct("nestedPojo.longNumber").map(new MapFunction<CollectionDataSets.POJO,Integer>(){
@Override public Integer map(POJO value) throws Exception {
return (int)value.nestedPojo.longNumber;
}
}
);
reduceDs.writeAsText(resultPath);
env.execute();
return "10000\n20000\n30000\n";
}
case 9:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<POJO> ds=CollectionDataSets.getDuplicatePojoDataSet(env);
DataSet<Integer> reduceDs=ds.distinct().map(new MapFunction<CollectionDataSets.POJO,Integer>(){
@Override public Integer map(POJO value) throws Exception {
return (int)value.nestedPojo.longNumber;
}
}
);
reduceDs.writeAsText(resultPath);
env.execute();
return "10000\n20000\n30000\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
