{
  final OptimizerPlanNodeResolver or=getOptimizerPlanNodeResolver(plan);
  final SinkPlanNode sink=or.getNode(SINK);
  final SingleInputPlanNode newCenterReducer=or.getNode(RECOMPUTE_CENTERS_REDUCER);
  final SingleInputPlanNode newCenterCombiner=(SingleInputPlanNode)newCenterReducer.getPredecessor();
  final SingleInputPlanNode nearestCenterReducer=or.getNode(NEAREST_CENTER_REDUCER);
  final SingleInputPlanNode nearestCenterCombiner=nearestCenterReducer.getPredecessor() instanceof SingleInputPlanNode ? (SingleInputPlanNode)nearestCenterReducer.getPredecessor() : null;
  final DualInputPlanNode cross=or.getNode(CROSS_NAME);
  checkStandardStrategies(nearestCenterReducer,nearestCenterCombiner,newCenterReducer,newCenterCombiner,sink);
  if ((ShipStrategyType.BROADCAST == cross.getInput1().getShipStrategy() && ShipStrategyType.FORWARD == cross.getInput2().getShipStrategy()) || (ShipStrategyType.FORWARD == cross.getInput1().getShipStrategy() && ShipStrategyType.BROADCAST == cross.getInput2().getShipStrategy())) {
  }
 else   if (ShipStrategyType.PARTITION_HASH == cross.getInput1().getShipStrategy() && ShipStrategyType.BROADCAST == cross.getInput2().getShipStrategy()) {
    Assert.assertEquals(set0,cross.getInput1().getShipStrategyKeys());
  }
 else {
    Assert.fail("Wrong strategy for the cross.");
  }
  Assert.assertTrue(cross.getDriverStrategy() == DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_FIRST || cross.getDriverStrategy() == DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_SECOND || cross.getDriverStrategy() == DriverStrategy.NESTEDLOOP_STREAMED_OUTER_FIRST || cross.getDriverStrategy() == DriverStrategy.NESTEDLOOP_STREAMED_OUTER_SECOND);
}
