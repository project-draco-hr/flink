{
  KeyGroupRange keyGroupRange1=KeyGroupRange.of(0,10);
  KeyGroupRange keyGroupRange2=KeyGroupRange.of(3,7);
  KeyGroupRange intersection=keyGroupRange1.getIntersection(keyGroupRange2);
  Assert.assertEquals(3,intersection.getStartKeyGroup());
  Assert.assertEquals(7,intersection.getEndKeyGroup());
  Assert.assertEquals(intersection,keyGroupRange2.getIntersection(keyGroupRange1));
  Assert.assertEquals(keyGroupRange1,keyGroupRange1.getIntersection(keyGroupRange1));
  keyGroupRange1=KeyGroupRange.of(0,5);
  keyGroupRange2=KeyGroupRange.of(6,10);
  intersection=keyGroupRange1.getIntersection(keyGroupRange2);
  Assert.assertEquals(KeyGroupRange.EMPTY_KEY_GROUP,intersection);
  Assert.assertEquals(intersection,keyGroupRange2.getIntersection(keyGroupRange1));
  keyGroupRange1=KeyGroupRange.of(0,10);
  keyGroupRange2=KeyGroupRange.of(5,20);
  intersection=keyGroupRange1.getIntersection(keyGroupRange2);
  Assert.assertEquals(5,intersection.getStartKeyGroup());
  Assert.assertEquals(10,intersection.getEndKeyGroup());
  Assert.assertEquals(intersection,keyGroupRange2.getIntersection(keyGroupRange1));
  keyGroupRange1=KeyGroupRange.of(3,12);
  keyGroupRange2=KeyGroupRange.of(0,10);
  intersection=keyGroupRange1.getIntersection(keyGroupRange2);
  Assert.assertEquals(3,intersection.getStartKeyGroup());
  Assert.assertEquals(10,intersection.getEndKeyGroup());
  Assert.assertEquals(intersection,keyGroupRange2.getIntersection(keyGroupRange1));
}
