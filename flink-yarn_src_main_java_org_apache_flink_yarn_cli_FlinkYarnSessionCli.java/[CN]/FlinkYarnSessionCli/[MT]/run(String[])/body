{
  Options options=new Options();
  addGeneralOptions(options);
  addRunOptions(options);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    printUsage();
    return 1;
  }
  if (cmd.hasOption(QUERY.getOpt())) {
    AbstractYarnClusterDescriptor yarnDescriptor=getClusterDescriptor();
    String description;
    try {
      description=yarnDescriptor.getClusterDescription();
    }
 catch (    Exception e) {
      System.err.println("Error while querying the YARN cluster for available resources: " + e.getMessage());
      e.printStackTrace(System.err);
      return 1;
    }
    System.out.println(description);
    return 0;
  }
 else   if (cmd.hasOption(APPLICATION_ID.getOpt())) {
    AbstractYarnClusterDescriptor yarnDescriptor=getClusterDescriptor();
    try {
      yarnCluster=yarnDescriptor.retrieve(cmd.getOptionValue(APPLICATION_ID.getOpt()));
    }
 catch (    Exception e) {
      throw new RuntimeException("Could not retrieve existing Yarn application",e);
    }
    if (detachedMode) {
      LOG.info("The Flink YARN client has been started in detached mode. In order to stop " + "Flink on YARN, use the following command or a YARN web interface to stop it:\n" + "yarn application -kill "+ APPLICATION_ID.getOpt());
      yarnCluster.disconnect();
    }
 else {
      runInteractiveCli(yarnCluster,true);
    }
  }
 else {
    AbstractYarnClusterDescriptor yarnDescriptor;
    try {
      yarnDescriptor=createDescriptor(null,cmd);
    }
 catch (    Exception e) {
      System.err.println("Error while starting the YARN Client: " + e.getMessage());
      e.printStackTrace(System.err);
      return 1;
    }
    try {
      yarnCluster=yarnDescriptor.deploy();
    }
 catch (    Exception e) {
      System.err.println("Error while deploying YARN cluster: " + e.getMessage());
      e.printStackTrace(System.err);
      return 1;
    }
    String jobManagerAddress=yarnCluster.getJobManagerAddress().getAddress().getHostAddress() + ":" + yarnCluster.getJobManagerAddress().getPort();
    System.out.println("Flink JobManager is now running on " + jobManagerAddress);
    System.out.println("JobManager Web Interface: " + yarnCluster.getWebInterfaceURL());
    File yarnPropertiesFile=getYarnPropertiesLocation(yarnCluster.getFlinkConfiguration());
    Properties yarnProps=new Properties();
    yarnProps.setProperty(YARN_APPLICATION_ID_KEY,yarnCluster.getApplicationId().toString());
    if (yarnDescriptor.getTaskManagerSlots() != -1) {
      String parallelism=Integer.toString(yarnDescriptor.getTaskManagerSlots() * yarnDescriptor.getTaskManagerCount());
      yarnProps.setProperty(YARN_PROPERTIES_PARALLELISM,parallelism);
    }
    if (yarnDescriptor.getDynamicPropertiesEncoded() != null) {
      yarnProps.setProperty(YARN_PROPERTIES_DYNAMIC_PROPERTIES_STRING,yarnDescriptor.getDynamicPropertiesEncoded());
    }
    writeYarnProperties(yarnProps,yarnPropertiesFile);
    if (detachedMode) {
      LOG.info("The Flink YARN client has been started in detached mode. In order to stop " + "Flink on YARN, use the following command or a YARN web interface to stop it:\n" + "yarn application -kill " + yarnCluster.getApplicationId() + System.lineSeparator()+ "Please also note that the temporary files of the YARN session in {} will not be removed.",yarnDescriptor.getSessionFilesDir());
      yarnCluster.disconnect();
    }
 else {
      runInteractiveCli(yarnCluster,acceptInteractiveInput);
    }
  }
  return 0;
}
