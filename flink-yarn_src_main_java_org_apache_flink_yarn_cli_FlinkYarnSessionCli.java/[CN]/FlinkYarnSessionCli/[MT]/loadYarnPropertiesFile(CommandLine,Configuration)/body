{
  String jobManagerOption=cmdLine.getOptionValue(ADDRESS_OPTION.getOpt(),null);
  if (jobManagerOption != null) {
    return null;
  }
  for (  Option option : cmdLine.getOptions()) {
    if (ALL_OPTIONS.hasOption(option.getOpt())) {
      if (!option.getOpt().equals(DETACHED.getOpt())) {
        return null;
      }
    }
  }
  File propertiesFile=getYarnPropertiesLocation(flinkConfiguration);
  if (!propertiesFile.exists()) {
    return null;
  }
  logAndSysout("Found YARN properties file " + propertiesFile.getAbsolutePath());
  Properties yarnProperties=new Properties();
  try {
    try (InputStream is=new FileInputStream(propertiesFile)){
      yarnProperties.load(is);
    }
   }
 catch (  IOException e) {
    throw new RuntimeException("Cannot read the YARN properties file",e);
  }
  String applicationID=yarnProperties.getProperty(YARN_APPLICATION_ID_KEY);
  if (applicationID == null) {
    throw new IllegalConfigurationException("Yarn properties file found but doesn't contain a " + "Yarn applicaiton id. Please delete the file at " + propertiesFile.getAbsolutePath());
  }
  try {
    ConverterUtils.toApplicationId(applicationID);
  }
 catch (  Exception e) {
    throw new RuntimeException("YARN properties contains an invalid entry for " + "application id: " + applicationID,e);
  }
  logAndSysout("Using Yarn application id from YARN properties " + applicationID);
  String propParallelism=yarnProperties.getProperty(YARN_PROPERTIES_PARALLELISM);
  if (propParallelism != null) {
    try {
      int parallelism=Integer.parseInt(propParallelism);
      flinkConfiguration.setInteger(ConfigConstants.DEFAULT_PARALLELISM_KEY,parallelism);
      logAndSysout("YARN properties set default parallelism to " + parallelism);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Error while parsing the YARN properties: " + "Property " + YARN_PROPERTIES_PARALLELISM + " is not an integer.");
    }
  }
  String dynamicPropertiesEncoded=yarnProperties.getProperty(YARN_PROPERTIES_DYNAMIC_PROPERTIES_STRING);
  Map<String,String> dynamicProperties=getDynamicProperties(dynamicPropertiesEncoded);
  for (  Map.Entry<String,String> dynamicProperty : dynamicProperties.entrySet()) {
    flinkConfiguration.setString(dynamicProperty.getKey(),dynamicProperty.getValue());
  }
  return applicationID;
}
