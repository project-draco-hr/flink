{
  super.initializeForJob(env,operatorIdentifier,keySerializer);
  this.nonPartitionedStateBackend.initializeForJob(env,operatorIdentifier,keySerializer);
  this.operatorIdentifier=operatorIdentifier.replace(" ","");
  this.jobId=env.getJobID();
  if (configuredDbBasePaths == null) {
    initializedDbBasePaths=env.getIOManager().getSpillingDirectories();
  }
 else {
    List<File> dirs=new ArrayList<>(configuredDbBasePaths.length);
    String errorMessage="";
    for (    Path path : configuredDbBasePaths) {
      File f=new File(path.toUri().getPath());
      File testDir=new File(f,UUID.randomUUID().toString());
      if (!testDir.mkdirs()) {
        String msg="Local DB files directory '" + path + "' does not exist and cannot be created. ";
        LOG.error(msg);
        errorMessage+=msg;
      }
 else {
        dirs.add(f);
      }
      testDir.delete();
    }
    if (dirs.isEmpty()) {
      throw new Exception("No local storage directories available. " + errorMessage);
    }
 else {
      initializedDbBasePaths=dirs.toArray(new File[dirs.size()]);
    }
  }
  nextDirectory=new Random().nextInt(initializedDbBasePaths.length);
  instanceBasePath=new File(getDbPath("dummy_state"),UUID.randomUUID().toString());
  instanceCheckpointPath=getCheckpointPath("dummy_state");
  instanceRocksDBPath=new File(instanceBasePath,"db");
  RocksDB.loadLibrary();
  if (!instanceBasePath.exists()) {
    if (!instanceBasePath.mkdirs()) {
      throw new RuntimeException("Could not create RocksDB data directory.");
    }
  }
  try {
    if (instanceRocksDBPath.exists()) {
      LOG.warn("Deleting already existing db directory {}.",instanceRocksDBPath);
      FileUtils.deleteDirectory(instanceRocksDBPath);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Error cleaning RocksDB data directory.",e);
  }
  dbCleanupLock=new Object();
  List<ColumnFamilyDescriptor> columnFamilyDescriptors=new ArrayList<>(1);
  columnFamilyDescriptors.add(new ColumnFamilyDescriptor("default".getBytes()));
  List<ColumnFamilyHandle> columnFamilyHandles=new ArrayList<>(1);
  try {
    db=RocksDB.open(getDbOptions(),instanceRocksDBPath.getAbsolutePath(),columnFamilyDescriptors,columnFamilyHandles);
  }
 catch (  RocksDBException e) {
    throw new RuntimeException("Error while opening RocksDB instance.",e);
  }
  kvStateInformation=new HashMap<>();
}
