{
  try {
    long startTime=System.currentTimeMillis();
    CheckpointStateOutputStream outputStream=backend.createCheckpointStateOutputStream(checkpointId,startTime);
    DataOutputView outputView=new DataOutputViewStreamWrapper(outputStream);
    outputView.writeInt(columnFamilies.size());
    byte count=0;
    Map<String,Byte> columnFamilyMapping=new HashMap<>();
    for (    Map.Entry<String,Tuple2<ColumnFamilyHandle,StateDescriptor>> column : columnFamilies.entrySet()) {
      columnFamilyMapping.put(column.getKey(),count);
      outputView.writeByte(count);
      ObjectOutputStream ooOut=new ObjectOutputStream(outputStream);
      ooOut.writeObject(column.getValue().f1);
      ooOut.flush();
      count++;
    }
    ReadOptions readOptions=new ReadOptions();
    readOptions.setSnapshot(snapshot);
    for (    Map.Entry<String,Tuple2<ColumnFamilyHandle,StateDescriptor>> column : columnFamilies.entrySet()) {
      byte columnByte=columnFamilyMapping.get(column.getKey());
synchronized (dbCleanupLock) {
        if (db == null) {
          throw new RuntimeException("RocksDB instance was disposed. This happens " + "when we are in the middle of a checkpoint and the job fails.");
        }
        RocksIterator iterator=db.newIterator(column.getValue().f0,readOptions);
        iterator.seekToFirst();
        while (iterator.isValid()) {
          outputView.writeByte(columnByte);
          BytePrimitiveArraySerializer.INSTANCE.serialize(iterator.key(),outputView);
          BytePrimitiveArraySerializer.INSTANCE.serialize(iterator.value(),outputView);
          iterator.next();
        }
      }
    }
    StreamStateHandle stateHandle=outputStream.closeAndGetHandle();
    long endTime=System.currentTimeMillis();
    LOG.info("Fully asynchronous RocksDB materialization to " + backupUri + " (asynchronous part) took "+ (endTime - startTime)+ " ms.");
    return new FinalFullyAsyncSnapshot(stateHandle,checkpointId);
  }
  finally {
synchronized (dbCleanupLock) {
      if (db != null) {
        db.releaseSnapshot(snapshot);
      }
    }
    snapshot=null;
  }
}
