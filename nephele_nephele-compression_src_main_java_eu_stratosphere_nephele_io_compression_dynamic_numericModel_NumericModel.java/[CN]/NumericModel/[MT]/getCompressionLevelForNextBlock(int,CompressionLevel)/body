{
  if (nextEvaluationRound == 0) {
    if (this.lastCompressionLevel == null) {
      this.lastCompressionLevel=CompressionLevel.LIGHT_COMPRESSION;
      nextEvaluationRound+=ROUNDS_WITHOUT_EVALUATION;
      return CompressionLevel.LIGHT_COMPRESSION;
    }
    if (lastCompressionLevel != null)     this.profilingResultsPerAlgorithm.put(lastCompressionLevel,profilingData);
    if (profilingData == null) {
      this.lastCompressionLevel=CompressionLevel.LIGHT_COMPRESSION;
      return CompressionLevel.LIGHT_COMPRESSION;
    }
 else {
      nextEvaluationRound+=ROUNDS_WITHOUT_EVALUATION;
      System.out.println("LastLevel: " + lastCompressionLevel + " CompressionRatio: "+ profilingData.getCompressionRatio()+ " CompressionTime: "+ profilingData.getCompressionTime()+ " IOWaitCPU: "+ profilingData.getIOWaitCPU()+ " IdleCPU: "+ profilingData.getIdleCPU()+ " SystemCPU: "+ profilingData.getSystemCPU()+ " UserCPU: "+ profilingData.getUserCPU());
      CompressionLevel next=null;
      if (!allLevelsTested)       next=checkIfLevelNotTested(lastCompressionLevel);
 else       if (nextResetRound <= 0) {
        allLevelsTested=false;
        this.profilingResultsPerAlgorithm.clear();
        next=checkIfLevelNotTested(lastCompressionLevel);
        System.out.println("Resetting results ...");
      }
      if (next == null) {
        next=getNextLevel();
      }
      this.lastCompressionLevel=next;
      return next;
    }
  }
 else {
    nextEvaluationRound--;
    nextResetRound--;
    if (lastCompressionLevel != null)     this.profilingResultsPerAlgorithm.put(lastCompressionLevel,profilingData);
    return lastCompressionLevel;
  }
}
