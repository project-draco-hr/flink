{
  if (!config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_TYPE)) {
    if (!config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_ACCESSKEYID) || !config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_SECRETKEY)) {
      throw new IllegalArgumentException("Need to set values for AWS Access Key ID and Secret Key when using the BASIC AWS credential provider type.");
    }
  }
 else {
    String credentialsProviderType=config.getProperty(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_TYPE);
    CredentialProviderType providerType;
    try {
      providerType=CredentialProviderType.valueOf(credentialsProviderType);
    }
 catch (    IllegalArgumentException e) {
      StringBuilder sb=new StringBuilder();
      for (      CredentialProviderType type : CredentialProviderType.values()) {
        sb.append(type.toString()).append(", ");
      }
      throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString());
    }
    if (providerType == CredentialProviderType.BASIC) {
      if (!config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_ACCESSKEYID) || !config.containsKey(KinesisConfigConstants.CONFIG_AWS_CREDENTIALS_PROVIDER_BASIC_SECRETKEY)) {
        throw new IllegalArgumentException("Need to set values for AWS Access Key ID and Secret Key when using the BASIC AWS credential provider type.");
      }
    }
  }
  if (!config.containsKey(KinesisConfigConstants.CONFIG_AWS_REGION)) {
    throw new IllegalArgumentException("The AWS region must be set in the config.");
  }
 else {
    if (!AWSUtil.isValidRegion(config.getProperty(KinesisConfigConstants.CONFIG_AWS_REGION))) {
      StringBuilder sb=new StringBuilder();
      for (      Regions region : Regions.values()) {
        sb.append(region.getName()).append(", ");
      }
      throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString());
    }
  }
  if (config.containsKey(KinesisConfigConstants.CONFIG_STREAM_INIT_POSITION_TYPE)) {
    String initPosType=config.getProperty(KinesisConfigConstants.CONFIG_STREAM_INIT_POSITION_TYPE);
    try {
      InitialPosition.valueOf(initPosType);
    }
 catch (    IllegalArgumentException e) {
      StringBuilder sb=new StringBuilder();
      for (      InitialPosition pos : InitialPosition.values()) {
        sb.append(pos.toString()).append(", ");
      }
      throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString());
    }
  }
  if (config.containsKey(KinesisConfigConstants.CONFIG_STREAM_DESCRIBE_RETRIES)) {
    try {
      Integer.parseInt(config.getProperty(KinesisConfigConstants.CONFIG_STREAM_DESCRIBE_RETRIES));
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("Invalid value given for describeStream stream operation retry count. Must be a valid integer value.");
    }
  }
  if (config.containsKey(KinesisConfigConstants.CONFIG_STREAM_DESCRIBE_BACKOFF)) {
    try {
      Long.parseLong(config.getProperty(KinesisConfigConstants.CONFIG_STREAM_DESCRIBE_BACKOFF));
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("Invalid value given for describeStream stream operation backoff milliseconds. Must be a valid long value.");
    }
  }
  if (config.containsKey(KinesisConfigConstants.CONFIG_SHARD_RECORDS_PER_GET)) {
    try {
      Integer.parseInt(config.getProperty(KinesisConfigConstants.CONFIG_SHARD_RECORDS_PER_GET));
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("Invalid value given for maximum records per getRecords shard operation. Must be a valid integer value.");
    }
  }
}
