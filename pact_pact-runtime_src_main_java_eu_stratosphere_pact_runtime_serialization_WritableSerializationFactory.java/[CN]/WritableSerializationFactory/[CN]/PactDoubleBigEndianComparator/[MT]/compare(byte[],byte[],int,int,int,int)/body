{
  long bits1=(((long)key1[start1] & 0xff) << 56) | (((long)key1[start1 + 1] & 0xff) << 48) | (((long)key1[start1 + 2] & 0xff) << 40)| (((long)key1[start1 + 3] & 0xff) << 32)| (((long)key1[start1 + 4] & 0xff) << 24)| (((long)key1[start1 + 5] & 0xff) << 16)| (((long)key1[start1 + 6] & 0xff) << 8)| (((long)key1[start1 + 7] & 0xff) << 0);
  long bits2=(((long)key2[start2] & 0xff) << 56) | (((long)key2[start2 + 1] & 0xff) << 48) | (((long)key2[start2 + 2] & 0xff) << 40)| (((long)key2[start2 + 3] & 0xff) << 32)| (((long)key2[start2 + 4] & 0xff) << 24)| (((long)key2[start2 + 5] & 0xff) << 16)| (((long)key2[start2 + 6] & 0xff) << 8)| (((long)key2[start2 + 7] & 0xff) << 0);
  double d1=Double.longBitsToDouble(bits1);
  double d2=Double.longBitsToDouble(bits2);
  return d1 < d2 ? -1 : d1 > d2 ? 1 : 0;
}
