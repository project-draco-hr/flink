{
  final int maxBit=0x1 << 7;
  int l1=key1[start1++];
  if (l1 >= maxBit) {
    int shift=7;
    int curr;
    l1=l1 & 0x7f;
    while ((curr=key1[start1++]) >= maxBit) {
      l1|=(curr & 0x7f) << shift;
      shift+=7;
    }
    l1|=curr << shift;
  }
  int l2=key1[start2++];
  if (l2 >= maxBit) {
    int shift=7;
    int curr;
    l2=l2 & 0x7f;
    while ((curr=key2[start2++]) >= maxBit) {
      l2|=(curr & 0x7f) << shift;
      shift+=7;
    }
    l2|=curr << shift;
  }
  int ll=Math.min(l1,l2);
  int l=0;
  while (l < ll) {
    int c1=key1[start1++];
    if (c1 >= maxBit) {
      int shift=7;
      int curr;
      c1=c1 & 0x7f;
      while ((curr=key1[start1++]) >= maxBit) {
        c1|=(curr & 0x7f) << shift;
        shift+=7;
      }
      c1|=curr << shift;
    }
    int c2=key2[start2++];
    if (c2 >= maxBit) {
      int shift=7;
      int curr;
      c2=c2 & 0x7f;
      while ((curr=key2[start2++]) >= maxBit) {
        c2|=(curr & 0x7f) << shift;
        shift+=7;
      }
      c2|=curr << shift;
    }
    l++;
    char cc1=(char)c1;
    char cc2=(char)c2;
    if (cc1 < cc2) {
      return -1;
    }
 else     if (cc1 > cc2) {
      return 1;
    }
  }
  return l1 < l2 ? -1 : l1 > l2 ? 1 : 0;
}
