{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Long,Long> graph=Graph.create(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
      DataSet<Tuple2<Long,Long>> verticesWithLowestOutNeighbor=graph.foreachEdge(new OutEdgesFunction<Long,Long,Long,Long>(){
        public Tuple2<Long,Long> iterateOutEdges(        Vertex<Long,Long> v,        Iterable<Edge<Long,Long>> outEdges){
          long weight=Long.MAX_VALUE;
          long minNeighorId=0;
          for (          Edge<Long,Long> edge : outEdges) {
            if (edge.getValue() < weight) {
              weight=edge.getValue();
              minNeighorId=edge.getTarget();
            }
          }
          return new Tuple2<Long,Long>(v.getId(),minNeighorId);
        }
      }
);
      verticesWithLowestOutNeighbor.writeAsCsv(resultPath);
      env.execute();
      return "1,2\n" + "2,3\n" + "3,4\n"+ "4,5\n"+ "5,1\n";
    }
default :
  throw new IllegalArgumentException("Invalid program id");
}
}
