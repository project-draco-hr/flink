{
  try {
    Object serializedLambda=null;
    for (Class<?> clazz=function.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
      try {
        Method replaceMethod=clazz.getDeclaredMethod("writeReplace");
        replaceMethod.setAccessible(true);
        Object serialVersion=replaceMethod.invoke(function);
        if (serialVersion.getClass().getName().equals("java.lang.invoke.SerializedLambda")) {
          try {
            Class.forName("java.lang.invoke.SerializedLambda");
          }
 catch (          Exception e) {
            throw new UnsupportedOperationException("User code tries to use lambdas, but framework is running with a Java version < 8");
          }
          serializedLambda=serialVersion;
          break;
        }
      }
 catch (      NoSuchMethodException e) {
      }
    }
    if (serializedLambda == null) {
      return null;
    }
    Method implClassMethod=serializedLambda.getClass().getDeclaredMethod("getImplClass");
    Method implMethodNameMethod=serializedLambda.getClass().getDeclaredMethod("getImplMethodName");
    String className=(String)implClassMethod.invoke(serializedLambda);
    String methodName=(String)implMethodNameMethod.invoke(serializedLambda);
    Class<?> implClass=Class.forName(className.replace('/','.'),true,Thread.currentThread().getContextClassLoader());
    Method[] methods=implClass.getDeclaredMethods();
    Method parameterizedMethod=null;
    for (    Method method : methods) {
      if (method.getName().equals(methodName)) {
        if (parameterizedMethod != null) {
          throw new Exception("Lambda method name is not unique.");
        }
 else {
          parameterizedMethod=method;
        }
      }
    }
    if (parameterizedMethod == null) {
      throw new Exception("No lambda method found.");
    }
    return parameterizedMethod;
  }
 catch (  Exception e) {
    throw new RuntimeException("Could not extract lambda method out of function: " + e.getClass().getSimpleName() + " - "+ e.getMessage(),e);
  }
}
