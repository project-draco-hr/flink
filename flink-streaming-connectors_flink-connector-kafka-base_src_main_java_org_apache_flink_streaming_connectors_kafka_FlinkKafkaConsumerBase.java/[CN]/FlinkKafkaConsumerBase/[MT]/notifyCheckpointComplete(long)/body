{
  if (!running) {
    LOG.debug("notifyCheckpointComplete() called on closed source");
    return;
  }
  final AbstractFetcher<?,?> fetcher=this.kafkaFetcher;
  if (fetcher == null) {
    LOG.debug("notifyCheckpointComplete() called on uninitialized source");
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Committing offsets to Kafka/ZooKeeper for checkpoint " + checkpointId);
  }
  try {
    final int posInMap=pendingCheckpoints.indexOf(checkpointId);
    if (posInMap == -1) {
      LOG.warn("Received confirmation for unknown checkpoint id {}",checkpointId);
      return;
    }
    @SuppressWarnings("unchecked") HashMap<KafkaTopicPartition,Long> checkpointOffsets=(HashMap<KafkaTopicPartition,Long>)pendingCheckpoints.remove(posInMap);
    for (int i=0; i < posInMap; i++) {
      pendingCheckpoints.remove(0);
    }
    if (checkpointOffsets == null || checkpointOffsets.size() == 0) {
      LOG.debug("Checkpoint state was empty.");
      return;
    }
    fetcher.commitSpecificOffsetsToKafka(checkpointOffsets);
  }
 catch (  Exception e) {
    if (running) {
      throw e;
    }
  }
}
