{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
  DataStream<Tuple2<String,Integer>> source=env.fromElements(Tuple2.of("hello",1),Tuple2.of("hello",2));
  DummyReducer reducer=new DummyReducer();
  DataStream<Tuple2<String,Integer>> window1=source.keyBy(0).window(SlidingTimeWindows.of(Time.of(1,TimeUnit.SECONDS),Time.of(100,TimeUnit.MILLISECONDS))).evictor(CountEvictor.of(100)).reduce(reducer);
  OneInputTransformation<Tuple2<String,Integer>,Tuple2<String,Integer>> transform1=(OneInputTransformation<Tuple2<String,Integer>,Tuple2<String,Integer>>)window1.getTransformation();
  OneInputStreamOperator<Tuple2<String,Integer>,Tuple2<String,Integer>> operator1=transform1.getOperator();
  Assert.assertTrue(operator1 instanceof EvictingWindowOperator);
  EvictingWindowOperator winOperator1=(EvictingWindowOperator)operator1;
  Assert.assertFalse(winOperator1.isSetProcessingTime());
  Assert.assertTrue(winOperator1.getTrigger() instanceof WatermarkTrigger);
  Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingTimeWindows);
  Assert.assertTrue(winOperator1.getEvictor() instanceof CountEvictor);
  Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof HeapWindowBuffer.Factory);
  DataStream<Tuple2<String,Integer>> window2=source.keyBy(0).window(TumblingTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).trigger(CountTrigger.of(100)).evictor(TimeEvictor.of(Time.of(100,TimeUnit.MILLISECONDS))).apply(new WindowFunction<Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple,TimeWindow>(){
    private static final long serialVersionUID=1L;
    @Override public void apply(    Tuple tuple,    TimeWindow window,    Iterable<Tuple2<String,Integer>> values,    Collector<Tuple2<String,Integer>> out) throws Exception {
    }
  }
);
  OneInputTransformation<Tuple2<String,Integer>,Tuple2<String,Integer>> transform2=(OneInputTransformation<Tuple2<String,Integer>,Tuple2<String,Integer>>)window2.getTransformation();
  OneInputStreamOperator<Tuple2<String,Integer>,Tuple2<String,Integer>> operator2=transform2.getOperator();
  Assert.assertTrue(operator2 instanceof EvictingWindowOperator);
  EvictingWindowOperator winOperator2=(EvictingWindowOperator)operator2;
  Assert.assertFalse(winOperator2.isSetProcessingTime());
  Assert.assertTrue(winOperator2.getTrigger() instanceof CountTrigger);
  Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingTimeWindows);
  Assert.assertTrue(winOperator2.getEvictor() instanceof TimeEvictor);
  Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof HeapWindowBuffer.Factory);
}
