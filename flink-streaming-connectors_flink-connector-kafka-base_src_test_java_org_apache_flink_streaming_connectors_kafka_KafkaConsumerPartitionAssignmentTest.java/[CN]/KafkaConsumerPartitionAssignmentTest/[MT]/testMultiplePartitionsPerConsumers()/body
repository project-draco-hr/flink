{
  try {
    final int[] partitionIDs={4,52,17,1,2,3,89,42,31,127,14};
    final List<KafkaTopicPartition> partitions=new ArrayList<>();
    final Set<KafkaTopicPartition> allPartitions=new HashSet<>();
    for (    int p : partitionIDs) {
      KafkaTopicPartition part=new KafkaTopicPartition("test-topic",p);
      partitions.add(part);
      allPartitions.add(part);
    }
    final int numConsumers=3;
    final int minPartitionsPerConsumer=partitions.size() / numConsumers;
    final int maxPartitionsPerConsumer=partitions.size() / numConsumers + 1;
    for (int i=0; i < numConsumers; i++) {
      List<KafkaTopicPartition> parts=FlinkKafkaConsumerBase.assignPartitions(partitions,numConsumers,i);
      assertNotNull(parts);
      assertTrue(parts.size() >= minPartitionsPerConsumer);
      assertTrue(parts.size() <= maxPartitionsPerConsumer);
      for (      KafkaTopicPartition p : parts) {
        assertTrue(allPartitions.remove(p));
      }
    }
    assertTrue(allPartitions.isEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
