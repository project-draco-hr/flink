{
  FileInputSplit[] inputSplits=this.createInputFormat().createInputSplits(0);
  Arrays.sort(inputSplits,new InputSplitSorter());
  int splitIndex=0;
  for (int fileIndex=0; fileIndex < this.degreeOfParallelism; fileIndex++) {
    List<FileInputSplit> sameFileSplits=new ArrayList<FileInputSplit>();
    Path lastPath=inputSplits[splitIndex].getPath();
    for (; splitIndex < inputSplits.length; splitIndex++) {
      if (!inputSplits[splitIndex].getPath().equals(lastPath)) {
        break;
      }
      sameFileSplits.add(inputSplits[splitIndex]);
    }
    Assert.assertEquals(this.getExpectedBlockCount(fileIndex),sameFileSplits.size());
    long lastBlockLength=this.rawDataSizes[fileIndex] % (this.blockSize - getInfoSize()) + getInfoSize();
    for (int index=0; index < sameFileSplits.size(); index++) {
      Assert.assertEquals(this.blockSize * index,sameFileSplits.get(index).getStart());
      if (index < sameFileSplits.size() - 1) {
        Assert.assertEquals(this.blockSize,sameFileSplits.get(index).getLength());
      }
    }
    Assert.assertEquals(lastBlockLength,sameFileSplits.get(sameFileSplits.size() - 1).getLength());
  }
}
