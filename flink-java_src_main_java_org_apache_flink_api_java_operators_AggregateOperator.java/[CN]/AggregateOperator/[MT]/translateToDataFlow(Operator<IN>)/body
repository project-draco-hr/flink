{
  if (this.aggregationFunctions.isEmpty() || this.aggregationFunctions.size() != this.fields.size()) {
    throw new IllegalStateException();
  }
  AggregationFunction<Object>[] aggFunctions=new AggregationFunction[this.aggregationFunctions.size()];
  int[] fields=new int[this.fields.size()];
  StringBuilder genName=new StringBuilder();
  for (int i=0; i < fields.length; i++) {
    aggFunctions[i]=(AggregationFunction<Object>)this.aggregationFunctions.get(i);
    fields[i]=this.fields.get(i);
    genName.append(aggFunctions[i].toString()).append('(').append(fields[i]).append(')').append(',');
  }
  genName.append(" at ").append(aggregateLocationName);
  genName.setLength(genName.length() - 1);
  @SuppressWarnings("rawtypes") RichGroupReduceFunction<IN,IN> function=new AggregatingUdf(aggFunctions,fields);
  String name=getName() != null ? getName() : genName.toString();
  if (this.grouping == null) {
    UnaryOperatorInformation<IN,IN> operatorInfo=new UnaryOperatorInformation<IN,IN>(getInputType(),getResultType());
    GroupReduceOperatorBase<IN,IN,GroupReduceFunction<IN,IN>> po=new GroupReduceOperatorBase<IN,IN,GroupReduceFunction<IN,IN>>(function,operatorInfo,new int[0],name);
    po.setCombinable(true);
    po.setInput(input);
    po.setParallelism(this.getParallelism());
    return po;
  }
  if (this.grouping.getKeys() instanceof Keys.ExpressionKeys) {
    int[] logicalKeyPositions=this.grouping.getKeys().computeLogicalKeyPositions();
    UnaryOperatorInformation<IN,IN> operatorInfo=new UnaryOperatorInformation<IN,IN>(getInputType(),getResultType());
    GroupReduceOperatorBase<IN,IN,GroupReduceFunction<IN,IN>> po=new GroupReduceOperatorBase<IN,IN,GroupReduceFunction<IN,IN>>(function,operatorInfo,logicalKeyPositions,name);
    po.setCombinable(true);
    po.setInput(input);
    po.setParallelism(this.getParallelism());
    po.setCustomPartitioner(grouping.getCustomPartitioner());
    SingleInputSemanticProperties props=new SingleInputSemanticProperties();
    for (int i=0; i < logicalKeyPositions.length; i++) {
      int keyField=logicalKeyPositions[i];
      boolean keyFieldUsedInAgg=false;
      for (int k=0; k < fields.length; k++) {
        int aggField=fields[k];
        if (keyField == aggField) {
          keyFieldUsedInAgg=true;
          break;
        }
      }
      if (!keyFieldUsedInAgg) {
        props.addForwardedField(keyField,keyField);
      }
    }
    po.setSemanticProperties(props);
    return po;
  }
 else   if (this.grouping.getKeys() instanceof Keys.SelectorFunctionKeys) {
    throw new UnsupportedOperationException("Aggregate does not support grouping with KeySelector functions, yet.");
  }
 else {
    throw new UnsupportedOperationException("Unrecognized key type.");
  }
}
