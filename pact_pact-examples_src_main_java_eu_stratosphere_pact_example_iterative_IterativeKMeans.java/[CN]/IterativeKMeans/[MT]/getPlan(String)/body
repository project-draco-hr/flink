{
  final int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String dataPointInput=(args.length > 1 ? args[1] : "");
  final String clusterInput=(args.length > 2 ? args[2] : "");
  final String output=(args.length > 3 ? args[3] : "");
  final int numIterations=(args.length > 4 ? Integer.parseInt(args[4]) : 1);
  FileDataSource initialClusterPoints=new FileDataSource(PointInFormat.class,clusterInput,"Centers");
  initialClusterPoints.setParameter(DelimitedInputFormat.RECORD_DELIMITER,"\n");
  initialClusterPoints.setDegreeOfParallelism(1);
  initialClusterPoints.getCompilerHints().setUniqueField(new FieldSet(0));
  BulkIteration iteration=new BulkIteration("K-Means Loop");
  iteration.setInput(initialClusterPoints);
  iteration.setNumberOfIterations(numIterations);
  FileDataSource dataPoints=new FileDataSource(PointInFormat.class,dataPointInput,"Data Points");
  dataPoints.setParameter(DelimitedInputFormat.RECORD_DELIMITER,"\n");
  dataPoints.getCompilerHints().setUniqueField(new FieldSet(0));
  CrossContract computeDistance=CrossContract.builder(ComputeDistance.class).input1(dataPoints).input2(iteration.getPartialSolution()).name("Compute Distances").build();
  computeDistance.getCompilerHints().setAvgBytesPerRecord(48);
  ReduceContract findNearestClusterCenters=ReduceContract.builder(FindNearestCenter.class,PactInteger.class,0).input(computeDistance).name("Find Nearest Centers").build();
  findNearestClusterCenters.getCompilerHints().setAvgBytesPerRecord(48);
  ReduceContract recomputeClusterCenter=ReduceContract.builder(RecomputeClusterCenter.class,PactInteger.class,0).input(findNearestClusterCenters).name("Recompute Center Positions").build();
  recomputeClusterCenter.getCompilerHints().setAvgBytesPerRecord(36);
  iteration.setNextPartialSolution(recomputeClusterCenter);
  FileDataSink finalResult=new FileDataSink(PointOutFormat.class,output,iteration,"New Center Positions");
  Plan plan=new Plan(finalResult,"Iterative KMeans");
  plan.setDefaultParallelism(noSubTasks);
  return plan;
}
