{
  try {
    BufferProvider mockBufferProvider=mock(BufferProvider.class);
    when(mockBufferProvider.requestBufferBlocking()).thenAnswer(new Answer<Buffer>(){
      @Override public Buffer answer(      InvocationOnMock invocationOnMock) throws Throwable {
        return new Buffer(MemorySegmentFactory.allocateUnpooledSegment(bufferSize),mock(BufferRecycler.class));
      }
    }
);
    ResultPartitionWriter mockWriter=mock(ResultPartitionWriter.class);
    when(mockWriter.getNumberOfOutputChannels()).thenReturn(1);
    when(mockWriter.getBufferProvider()).thenReturn(mockBufferProvider);
    final RecordDeserializer<DeserializationDelegate<T>> recordDeserializer=new AdaptiveSpanningRecordDeserializer<DeserializationDelegate<T>>();
    final NonReusingDeserializationDelegate<T> delegate=new NonReusingDeserializationDelegate<T>(serializer);
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocationOnMock) throws Throwable {
        Buffer buffer=(Buffer)invocationOnMock.getArguments()[0];
        recordDeserializer.setNextBuffer(buffer);
        while (recordDeserializer.hasUnfinishedData()) {
          RecordDeserializer.DeserializationResult result=recordDeserializer.getNextRecord(delegate);
          if (result.isFullRecord()) {
            outputList.add(delegate.getInstance());
          }
          if (result == RecordDeserializer.DeserializationResult.LAST_RECORD_FROM_BUFFER || result == RecordDeserializer.DeserializationResult.PARTIAL_RECORD) {
            break;
          }
        }
        return null;
      }
    }
).when(mockWriter).writeBuffer(any(Buffer.class),anyInt());
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocationOnMock) throws Throwable {
        AbstractEvent event=(AbstractEvent)invocationOnMock.getArguments()[0];
        outputList.add(event);
        return null;
      }
    }
).when(mockWriter).writeEvent(any(AbstractEvent.class),anyInt());
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocationOnMock) throws Throwable {
        AbstractEvent event=(AbstractEvent)invocationOnMock.getArguments()[0];
        outputList.add(event);
        return null;
      }
    }
).when(mockWriter).writeEventToAllChannels(any(AbstractEvent.class));
    outputs.add(mockWriter);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    fail(t.getMessage());
  }
}
