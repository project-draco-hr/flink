{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setDegreeOfParallelism(DOP);
  DataSet<Tuple2<Long,Long>> initialSolutionSet=env.fromCollection(verticesInput);
  DataSet<Tuple2<Long,Long>> edges=env.fromCollection(edgesInput);
  int keyPosition=0;
  DeltaIterativeDataSet<Tuple2<Long,Long>,Tuple2<Long,Long>> iteration=initialSolutionSet.iterateDelta(initialSolutionSet,MAX_ITERATIONS,keyPosition);
  DataSet<Long> candidates=iteration.join(edges).where(0).equalTo(0).with(new FindCandidatesJoin()).groupBy(new KeySelector<Long,Long>(){
    public Long getKey(    Long id){
      return id;
    }
  }
).reduceGroup(new RemoveDuplicatesReduce());
  DataSet<Tuple2<Long,Long>> candidatesDependencies=candidates.join(edges).where(new KeySelector<Long,Long>(){
    public Long getKey(    Long id){
      return id;
    }
  }
).equalTo(new KeySelector<Tuple2<Long,Long>,Long>(){
    public Long getKey(    Tuple2<Long,Long> vertexWithId){
      return vertexWithId.f1;
    }
  }
).with(new FindCandidatesDependenciesJoin());
  DataSet<Tuple2<Long,Long>> verticesWithNewComponents=candidatesDependencies.join(iteration.getSolutionSet()).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).reduceGroup(new MinimumReduce());
  DataSet<Tuple2<Long,Long>> updatedComponentId=verticesWithNewComponents.join(iteration.getSolutionSet()).where(0).equalTo(0).flatMap(new MinimumIdFilter());
  iteration.closeWith(updatedComponentId,updatedComponentId).writeAsText(resultPath);
  env.execute();
  return resultPath;
}
