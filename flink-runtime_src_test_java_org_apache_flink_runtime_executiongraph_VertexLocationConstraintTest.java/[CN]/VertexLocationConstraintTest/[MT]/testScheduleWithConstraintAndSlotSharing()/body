{
  try {
    final byte[] address1={10,0,1,4};
    final byte[] address2={10,0,1,5};
    final byte[] address3={10,0,1,6};
    final String hostname1="host1";
    final String hostname2="host2";
    final String hostname3="host3";
    Instance instance1=getInstance(address1,6789,hostname1);
    Instance instance2=getInstance(address2,6789,hostname2);
    Instance instance3=getInstance(address3,6789,hostname3);
    Scheduler scheduler=new Scheduler();
    scheduler.newInstanceAvailable(instance1);
    scheduler.newInstanceAvailable(instance2);
    scheduler.newInstanceAvailable(instance3);
    AbstractJobVertex jobVertex1=new AbstractJobVertex("v1",new JobVertexID());
    AbstractJobVertex jobVertex2=new AbstractJobVertex("v2",new JobVertexID());
    jobVertex1.setInvokableClass(DummyInvokable.class);
    jobVertex2.setInvokableClass(DummyInvokable.class);
    jobVertex1.setParallelism(2);
    jobVertex2.setParallelism(3);
    SlotSharingGroup sharingGroup=new SlotSharingGroup();
    jobVertex1.setSlotSharingGroup(sharingGroup);
    jobVertex2.setSlotSharingGroup(sharingGroup);
    JobGraph jg=new JobGraph("test job",jobVertex1,jobVertex2);
    ExecutionGraph eg=new ExecutionGraph(jg.getJobID(),jg.getName(),jg.getJobConfiguration(),timeout);
    eg.attachJobGraph(Arrays.asList(jobVertex1,jobVertex2));
    ExecutionJobVertex ejv=eg.getAllVertices().get(jobVertex1.getID());
    ExecutionVertex[] vertices=ejv.getTaskVertices();
    vertices[0].setLocationConstraintHosts(Arrays.asList(instance1,instance2));
    vertices[1].setLocationConstraintHosts(Collections.singletonList(instance3));
    vertices[0].setScheduleLocalOnly(true);
    vertices[1].setScheduleLocalOnly(true);
    ejv.scheduleAll(scheduler,false);
    SimpleSlot slot1=vertices[0].getCurrentAssignedResource();
    SimpleSlot slot2=vertices[1].getCurrentAssignedResource();
    assertNotNull(slot1);
    assertNotNull(slot2);
    Instance target1=slot1.getInstance();
    Instance target2=slot2.getInstance();
    assertNotNull(target1);
    assertNotNull(target2);
    assertTrue(target1 == instance1 || target1 == instance2);
    assertTrue(target2 == instance3);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
