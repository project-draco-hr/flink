{
  final Method m=FunctionUtils.checkAndExtractLambdaMethod(function);
  if (m != null) {
    validateLambdaGenericParameters(m);
    final int paramLen=m.getGenericParameterTypes().length - 1;
    final Type input1=(hasCollector) ? m.getGenericParameterTypes()[paramLen - 2] : m.getGenericParameterTypes()[paramLen - 1];
    final Type input2=(hasCollector) ? m.getGenericParameterTypes()[paramLen - 1] : m.getGenericParameterTypes()[paramLen];
    validateInputType((hasIterables) ? removeGenericWrapper(input1) : input1,in1Type);
    validateInputType((hasIterables) ? removeGenericWrapper(input2) : input2,in2Type);
    if (function instanceof ResultTypeQueryable) {
      return ((ResultTypeQueryable<OUT>)function).getProducedType();
    }
    return new TypeExtractor().privateCreateTypeInfo((hasCollector) ? removeGenericWrapper(m.getGenericParameterTypes()[paramLen]) : m.getGenericReturnType(),in1Type,in2Type);
  }
 else {
    validateInputType(baseClass,function.getClass(),0,in1Type);
    validateInputType(baseClass,function.getClass(),1,in2Type);
    if (function instanceof ResultTypeQueryable) {
      return ((ResultTypeQueryable<OUT>)function).getProducedType();
    }
    return new TypeExtractor().privateCreateTypeInfo(baseClass,function.getClass(),2,in1Type,in2Type);
  }
}
