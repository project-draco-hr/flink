{
  if (FunctionUtils.isLambdaFunction(selectorInterface)) {
    throw new UnsupportedLambdaExpressionException();
  }
  validateInputType(KeySelector.class,selectorInterface.getClass(),0,inType);
  if (selectorInterface instanceof ResultTypeQueryable) {
    return ((ResultTypeQueryable<OUT>)selectorInterface).getProducedType();
  }
  return new TypeExtractor().privateCreateTypeInfo(KeySelector.class,selectorInterface.getClass(),1,inType,null);
}
