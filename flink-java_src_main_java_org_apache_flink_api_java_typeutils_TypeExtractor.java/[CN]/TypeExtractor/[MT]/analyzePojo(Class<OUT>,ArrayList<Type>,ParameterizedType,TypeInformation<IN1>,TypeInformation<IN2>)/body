{
  if (!Modifier.isPublic(clazz.getModifiers())) {
    LOG.info("Class " + clazz.getName() + " is not public, cannot treat it as a POJO type. Will be handled as GenericType");
    return new GenericTypeInfo<OUT>(clazz);
  }
  if (parameterizedType != null) {
    getTypeHierarchy(typeHierarchy,parameterizedType,Object.class);
  }
 else   if (typeHierarchy.size() <= 1) {
    getTypeHierarchy(typeHierarchy,clazz,Object.class);
  }
  List<Field> fields=getAllDeclaredFields(clazz);
  if (fields.size() == 0) {
    LOG.info("No fields detected for " + clazz + ". Cannot be used as a PojoType. Will be handled as GenericType");
    return new GenericTypeInfo<OUT>(clazz);
  }
  List<PojoField> pojoFields=new ArrayList<PojoField>();
  for (  Field field : fields) {
    Type fieldType=field.getGenericType();
    if (!isValidPojoField(field,clazz,typeHierarchy)) {
      LOG.info(clazz + " is not a valid POJO type");
      return null;
    }
    try {
      ArrayList<Type> fieldTypeHierarchy=new ArrayList<Type>(typeHierarchy);
      fieldTypeHierarchy.add(fieldType);
      TypeInformation<?> ti=createTypeInfoWithTypeHierarchy(fieldTypeHierarchy,fieldType,in1Type,in2Type);
      pojoFields.add(new PojoField(field,ti));
    }
 catch (    InvalidTypesException e) {
      Class<?> genericClass=Object.class;
      if (isClassType(fieldType)) {
        genericClass=typeToClass(fieldType);
      }
      pojoFields.add(new PojoField(field,new GenericTypeInfo<OUT>((Class<OUT>)genericClass)));
    }
  }
  CompositeType<OUT> pojoType=new PojoTypeInfo<OUT>(clazz,pojoFields);
  List<Method> methods=getAllDeclaredMethods(clazz);
  for (  Method method : methods) {
    if (method.getName().equals("readObject") || method.getName().equals("writeObject")) {
      LOG.info(clazz + " contains custom serialization methods we do not call.");
      return null;
    }
  }
  Constructor defaultConstructor=null;
  try {
    defaultConstructor=clazz.getDeclaredConstructor();
  }
 catch (  NoSuchMethodException e) {
    if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) {
      LOG.info(clazz + " is abstract or an interface, having a concrete " + "type can increase performance.");
    }
 else {
      LOG.info(clazz + " must have a default constructor to be used as a POJO.");
      return null;
    }
  }
  if (defaultConstructor != null && !Modifier.isPublic(defaultConstructor.getModifiers())) {
    LOG.info("The default constructor of " + clazz + " should be Public to be used as a POJO.");
    return null;
  }
  return pojoType;
}
