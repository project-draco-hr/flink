{
  Preconditions.checkNotNull(value);
  if (value instanceof Tuple) {
    Tuple t=(Tuple)value;
    int numFields=t.getArity();
    if (numFields != countFieldsInClass(value.getClass())) {
      return analyzePojo((Class<X>)value.getClass(),new ArrayList<Type>(),null,null,null);
    }
    TypeInformation<?>[] infos=new TypeInformation[numFields];
    for (int i=0; i < numFields; i++) {
      Object field=t.getField(i);
      if (field == null) {
        throw new InvalidTypesException("Automatic type extraction is not possible on candidates with null values. " + "Please specify the types directly.");
      }
      infos[i]=privateGetForObject(field);
    }
    return new TupleTypeInfo(value.getClass(),infos);
  }
 else   if (value instanceof Either) {
    try {
      return (TypeInformation<X>)privateCreateTypeInfo(value.getClass());
    }
 catch (    InvalidTypesException e) {
      throw new InvalidTypesException("Automatic type extraction is not possible on an Either type " + "as it does not contain information about both possible types. " + "Please specify the types directly.");
    }
  }
 else {
    return privateGetForClass((Class<X>)value.getClass(),new ArrayList<Type>());
  }
}
