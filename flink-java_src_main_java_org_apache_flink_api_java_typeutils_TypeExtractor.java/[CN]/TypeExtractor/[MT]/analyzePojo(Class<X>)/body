{
  List<Field> fields=getAllDeclaredFields(clazz);
  List<PojoField> pojoFields=new ArrayList<PojoField>();
  for (  Field field : fields) {
    try {
      if (!Modifier.isTransient(field.getModifiers()) && !Modifier.isStatic(field.getModifiers())) {
        pojoFields.add(new PojoField(field,privateCreateTypeInfo(field.getType())));
      }
    }
 catch (    InvalidTypesException e) {
      return new GenericTypeInfo<X>(clazz);
    }
  }
  PojoTypeInfo<X> pojoType=new PojoTypeInfo<X>(clazz,pojoFields);
  List<Method> methods=getAllDeclaredMethods(clazz);
  boolean containsReadObjectOrWriteObject=false;
  for (  Method method : methods) {
    if (method.getName().equals("readObject") || method.getName().equals("writeObject")) {
      containsReadObjectOrWriteObject=true;
      break;
    }
  }
  boolean hasDefaultCtor=true;
  try {
    clazz.getDeclaredConstructor();
  }
 catch (  NoSuchMethodException e) {
    hasDefaultCtor=false;
  }
  if (!containsReadObjectOrWriteObject && hasDefaultCtor) {
    return pojoType;
  }
  return null;
}
