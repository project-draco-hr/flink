{
  TransformExpr transform_expr=(TransformExpr)filter_expr.binding().inExpr();
  Var transform_var=transform_expr.var();
  Var filter_pipe_var=filter_expr.binding().var;
  if (transform_expr.externalEffectProjection())   return false;
  MappingTable mt=transform_expr.getMappingTable();
  if (mt.replaceVarInAfterExpr(filter_pipe_var) == false)   return false;
  Var newVar=engine.env.makeVar(filter_pipe_var.name());
  ArrayList<Expr> pushed_pred=new ArrayList<Expr>();
  for (int k=0; k < filter_expr.conjunctivePred_count(); k++) {
    Expr crnt_pred=filter_expr.conjunctivePred(k);
    ArrayList<Expr> usedIn_list=findMaximalVarOrPathExpr(crnt_pred,filter_pipe_var);
    if (usedIn_list.size() == 0) {
      pushed_pred.add(crnt_pred);
      continue;
    }
    ArrayList<Expr> mappedTo_list=predMappedTo(usedIn_list,mt,true);
    if (mappedTo_list != null) {
      Expr modifiedPred=changePredicate(crnt_pred,usedIn_list,mappedTo_list,transform_var,newVar);
      pushed_pred.add(modifiedPred);
    }
  }
  if (pushed_pred.size() == 0)   return false;
  for (int i=0; i < pushed_pred.size(); i++)   pushed_pred.get(i).detach();
  if (filter_expr.conjunctivePred_count() == 0)   filter_expr.replaceInParent(filter_expr.binding().inExpr());
  BindingExpr transformBind=transform_expr.binding();
  BindingExpr bind=new BindingExpr(Type.IN,newVar,null,transformBind.inExpr());
  FilterExpr newFilter=new FilterExpr(bind,pushed_pred);
  transformBind.setChild(0,newFilter);
  return true;
}
