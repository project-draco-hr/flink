{
  ForExpr for_expr=(ForExpr)filter_expr.binding().inExpr();
  Var filter_pipe_var=filter_expr.binding().var;
  boolean is_unroll=(for_expr.collectExpr() instanceof UnrollExpr);
  boolean is_unroll_over_pathExpr=true;
  String unroll_str="";
  if (is_unroll) {
    UnrollExpr ue=(UnrollExpr)for_expr.collectExpr();
    if (!(ue.child(0) instanceof VarExpr))     is_unroll_over_pathExpr=false;
 else {
      unroll_str=filter_pipe_var.name();
      for (int i=1; i < ue.numChildren(); i++) {
        if ((ue.child(i) instanceof UnrollField) && ((ue.child(i)).numChildren() == 1) && ((ue.child(i)).child(0) instanceof ConstExpr)) {
          unroll_str=unroll_str + "." + (ue.child(i).child(0)).toString();
          continue;
        }
        is_unroll_over_pathExpr=false;
        break;
      }
    }
  }
  if ((!is_unroll) || !is_unroll_over_pathExpr) {
    ArrayList<Integer> child_ids=new ArrayList<Integer>();
    child_ids.add(1);
    return filterDirectpushRewrite(filter_expr,child_ids);
  }
  ArrayList<Expr> pushed_pred=new ArrayList<Expr>();
  for (int i=0; i < filter_expr.conjunctivePred_count(); i++) {
    Expr pred=filter_expr.conjunctivePred(i);
    ArrayList<Expr> usedIn_list=findMaximalVarOrPathExpr(pred,filter_pipe_var);
    if (usedIn_list.size() == 0) {
      pushed_pred.add(pred);
      continue;
    }
    String pred_str=pred.toString().replace("(","").replace(")","");
    if (!pred_str.contains(unroll_str))     pushed_pred.add(pred);
  }
  for (int i=0; i < pushed_pred.size(); i++)   pushed_pred.get(i).detach();
  if (pushed_pred.size() > 0) {
    BindingExpr for_input=for_expr.binding();
    BindingExpr new_filter_input=new BindingExpr(Type.IN,filter_pipe_var,null,for_input.child(0));
    FilterExpr new_fe=new FilterExpr(new_filter_input,pushed_pred);
    for_input.setChild(0,new_fe);
    replaceVarInFilter(new_fe,filter_pipe_var,new Var(filter_pipe_var.name()));
  }
  if (filter_expr.conjunctivePred_count() == 0)   filter_expr.replaceInParent(filter_expr.binding().inExpr());
 else {
    ArrayList<Integer> child_ids=new ArrayList<Integer>();
    child_ids.add(1);
    filterDirectpushRewrite(filter_expr,child_ids);
  }
  return true;
}
