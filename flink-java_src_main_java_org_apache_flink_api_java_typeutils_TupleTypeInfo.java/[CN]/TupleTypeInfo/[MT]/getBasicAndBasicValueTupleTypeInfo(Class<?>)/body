{
  if (basicTypes == null || basicTypes.length == 0) {
    throw new IllegalArgumentException();
  }
  TypeInformation<?>[] infos=new TypeInformation<?>[basicTypes.length];
  for (int i=0; i < infos.length; i++) {
    Class<?> type=basicTypes[i];
    if (type == null) {
      throw new IllegalArgumentException("Type at position " + i + " is null.");
    }
    TypeInformation<?> info=BasicTypeInfo.getInfoFor(type);
    if (info == null) {
      try {
        info=ValueTypeInfo.getValueTypeInfo((Class<Value>)type);
        if (!((ValueTypeInfo<?>)info).isBasicValueType()) {
          throw new IllegalArgumentException("Type at position " + i + " is not a basic or value type.");
        }
      }
 catch (      ClassCastException|InvalidTypesException e) {
        throw new IllegalArgumentException("Type at position " + i + " is not a basic or value type.",e);
      }
    }
    infos[i]=info;
  }
  return (TupleTypeInfo<X>)new TupleTypeInfo<>(infos);
}
