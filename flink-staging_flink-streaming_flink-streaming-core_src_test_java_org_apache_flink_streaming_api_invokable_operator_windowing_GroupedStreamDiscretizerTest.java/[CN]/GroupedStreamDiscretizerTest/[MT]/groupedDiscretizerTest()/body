{
  List<Integer> inputs=new ArrayList<Integer>();
  inputs.add(1);
  inputs.add(2);
  inputs.add(2);
  inputs.add(3);
  inputs.add(4);
  inputs.add(5);
  inputs.add(10);
  inputs.add(11);
  inputs.add(11);
  Set<StreamWindow<Integer>> expected=new HashSet<StreamWindow<Integer>>();
  expected.add(StreamWindow.fromElements(2,2));
  expected.add(StreamWindow.fromElements(1,3));
  expected.add(StreamWindow.fromElements(5,11));
  expected.add(StreamWindow.fromElements(4,10));
  expected.add(StreamWindow.fromElements(11));
  KeySelector<Integer,Integer> keySelector=new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getKey(    Integer value){
      return value % 2;
    }
  }
;
  CloneableTriggerPolicy<Integer> trigger=new CountTriggerPolicy<Integer>(2);
  CloneableEvictionPolicy<Integer> eviction=new TumblingEvictionPolicy<Integer>();
  GroupedStreamDiscretizer<Integer> discretizer=new GroupedStreamDiscretizer<Integer>(keySelector,trigger,eviction,new BasicWindowBuffer<Integer>());
  List<StreamWindow<Integer>> result=MockContext.createAndExecute(discretizer,inputs);
  assertEquals(expected,new HashSet<StreamWindow<Integer>>(result));
}
