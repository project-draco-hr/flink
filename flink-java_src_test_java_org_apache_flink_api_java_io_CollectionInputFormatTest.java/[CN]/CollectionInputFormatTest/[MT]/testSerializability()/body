{
  try {
    Collection<ElementType> inputCollection=new ArrayList<ElementType>();
    ElementType element1=new ElementType(1);
    ElementType element2=new ElementType(2);
    ElementType element3=new ElementType(3);
    inputCollection.add(element1);
    inputCollection.add(element2);
    inputCollection.add(element3);
    @SuppressWarnings("unchecked") TypeInformation<ElementType> info=(TypeInformation<ElementType>)TypeExtractor.createTypeInfo(ElementType.class);
    CollectionInputFormat<ElementType> inputFormat=new CollectionInputFormat<ElementType>(inputCollection,info.createSerializer(new ExecutionConfig()));
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    ObjectOutputStream out=new ObjectOutputStream(buffer);
    out.writeObject(inputFormat);
    ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
    Object serializationResult=in.readObject();
    assertNotNull(serializationResult);
    assertTrue(serializationResult instanceof CollectionInputFormat<?>);
    @SuppressWarnings("unchecked") CollectionInputFormat<ElementType> result=(CollectionInputFormat<ElementType>)serializationResult;
    GenericInputSplit inputSplit=new GenericInputSplit();
    inputFormat.open(inputSplit);
    result.open(inputSplit);
    while (!inputFormat.reachedEnd() && !result.reachedEnd()) {
      ElementType expectedElement=inputFormat.nextRecord(null);
      ElementType actualElement=result.nextRecord(null);
      assertEquals(expectedElement,actualElement);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.toString());
  }
}
