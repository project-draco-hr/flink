{
  final DistributionPattern distributionPattern;
switch (channel.getShipStrategy()) {
case FORWARD:
    distributionPattern=DistributionPattern.POINTWISE;
  break;
case PARTITION_RANDOM:
case BROADCAST:
case PARTITION_HASH:
case PARTITION_CUSTOM:
case PARTITION_RANGE:
case PARTITION_FORCED_REBALANCE:
distributionPattern=DistributionPattern.ALL_TO_ALL;
break;
default :
throw new RuntimeException("Unknown runtime ship strategy: " + channel.getShipStrategy());
}
final ResultPartitionType resultType;
switch (channel.getDataExchangeMode()) {
case PIPELINED:
resultType=ResultPartitionType.PIPELINED;
break;
case BATCH:
resultType=channel.getSource().isOnDynamicPath() ? ResultPartitionType.PIPELINED : ResultPartitionType.BLOCKING;
break;
case PIPELINE_WITH_BATCH_FALLBACK:
throw new UnsupportedOperationException("Data exchange mode " + channel.getDataExchangeMode() + " currently not supported.");
default :
throw new UnsupportedOperationException("Unknown data exchange mode.");
}
targetVertex.connectNewDataSetAsInput(sourceVertex,distributionPattern,resultType);
final int outputIndex=sourceConfig.getNumOutputs();
sourceConfig.addOutputShipStrategy(channel.getShipStrategy());
if (outputIndex == 0) {
sourceConfig.setOutputSerializer(channel.getSerializer());
}
if (channel.getShipStrategyComparator() != null) {
sourceConfig.setOutputComparator(channel.getShipStrategyComparator(),outputIndex);
}
if (channel.getShipStrategy() == ShipStrategyType.PARTITION_RANGE) {
final DataDistribution dataDistribution=channel.getDataDistribution();
if (dataDistribution != null) {
sourceConfig.setOutputDataDistribution(dataDistribution,outputIndex);
}
 else {
throw new RuntimeException("Range partitioning requires data distribution");
}
}
if (channel.getShipStrategy() == ShipStrategyType.PARTITION_CUSTOM) {
if (channel.getPartitioner() != null) {
sourceConfig.setOutputPartitioner(channel.getPartitioner(),outputIndex);
}
 else {
throw new CompilerException("The ship strategy was set to custom partitioning, but no partitioner was set.");
}
}
if (isBroadcast) {
targetConfig.addBroadcastInputToGroup(inputNumber);
}
 else {
targetConfig.addInputToGroup(inputNumber);
}
return distributionPattern;
}
