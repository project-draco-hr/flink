{
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String edgeInput=(args.length > 1 ? args[1] : "");
  String output=(args.length > 2 ? args[2] : "");
  FileDataSource edges=new FileDataSource(EdgeListInFormat.class,edgeInput);
  edges.setDegreeOfParallelism(noSubTasks);
  MapContract assignKeys=new MapContract(AssignKeys.class,"Assign Keys");
  assignKeys.setDegreeOfParallelism(noSubTasks);
  MatchContract buildTriads=new MatchContract(BuildTriads.class,PactLong.class,0,0,"Build Triads");
  buildTriads.setDegreeOfParallelism(noSubTasks);
  @SuppressWarnings("unchecked") MatchContract closeTriads=new MatchContract(CloseTriadsBuildApex.class,new Class[]{PactLong.class,PactLong.class},new int[]{1,2},new int[]{1,2},"Building Triangles and Apexes");
  closeTriads.setDegreeOfParallelism(noSubTasks);
  @SuppressWarnings("unchecked") ReduceContract neighbour=new ReduceContract(TriadNeighbours.class,new Class[]{PactLong.class,PactLong.class},new int[]{0,1},"Build triad neighbours");
  assignKeys.setDegreeOfParallelism(noSubTasks);
  FileDataSink triangles=new FileDataSink(EdgeApexOutFormat.class,output);
  triangles.setDegreeOfParallelism(noSubTasks);
  triangles.setInput(neighbour);
  neighbour.setInput(closeTriads);
  closeTriads.setSecondInput(edges);
  closeTriads.setFirstInput(buildTriads);
  buildTriads.setFirstInput(assignKeys);
  buildTriads.setSecondInput(assignKeys);
  assignKeys.setInput(edges);
  return new Plan(triangles,"Enumerate Triangles");
}
