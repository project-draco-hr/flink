{
  ByteArrayInputStream bais=new ByteArrayInputStream(elementsSerialized);
  final DataInputView input=new InputViewDataInputStreamWrapper(new DataInputStream(bais));
  int toSkip=numElementsToSkip;
  if (toSkip > 0) {
    try {
      while (toSkip > 0) {
        serializer.deserialize(input);
        toSkip--;
      }
    }
 catch (    Exception e) {
      throw new IOException("Failed to deserialize an element from the source. " + "If you are using user-defined serialization (Value and Writable types), check the " + "serialization functions.\nSerializer is "+ serializer);
    }
    this.numElementsEmitted=this.numElementsToSkip;
  }
  final Object lock=ctx.getCheckpointLock();
  while (isRunning && numElementsEmitted < numElements) {
    T next;
    try {
      next=serializer.deserialize(input);
    }
 catch (    Exception e) {
      throw new IOException("Failed to deserialize an element from the source. " + "If you are using user-defined serialization (Value and Writable types), check the " + "serialization functions.\nSerializer is "+ serializer);
    }
synchronized (lock) {
      ctx.collect(next);
      numElementsEmitted++;
    }
  }
}
