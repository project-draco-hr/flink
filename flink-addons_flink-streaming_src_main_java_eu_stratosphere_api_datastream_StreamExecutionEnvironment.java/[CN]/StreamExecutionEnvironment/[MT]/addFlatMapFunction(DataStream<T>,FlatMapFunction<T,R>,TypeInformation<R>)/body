{
  DataStream<R> returnStream=new DataStream<R>(this,returnType);
  jobGraphBuilder.setTask(inputStream.getId(),new UserTaskInvokable<T,R>(){
    private static final long serialVersionUID=1L;
    @Override public void invoke(    StreamRecord record,    StreamCollector<R> collector) throws Exception {
      int batchSize=record.getBatchSize();
      for (int i=0; i < batchSize; i++) {
        T tuple=(T)record.getTuple(i);
        flatMapper.flatMap(tuple,collector);
      }
    }
  }
);
  jobGraphBuilder.shuffleConnect(inputStream.getId(),returnStream.getId());
  return returnStream;
}
