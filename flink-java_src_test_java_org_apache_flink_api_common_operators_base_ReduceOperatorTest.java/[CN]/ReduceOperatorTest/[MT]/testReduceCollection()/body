{
  try {
    final ReduceFunction<Tuple2<String,Integer>> reducer=new ReduceFunction<Tuple2<String,Integer>>(){
      @Override public Tuple2<String,Integer> reduce(      Tuple2<String,Integer> value1,      Tuple2<String,Integer> value2) throws Exception {
        return new Tuple2<String,Integer>(value1.f0,value1.f1 + value2.f1);
      }
    }
;
    ReduceOperatorBase<Tuple2<String,Integer>,ReduceFunction<Tuple2<String,Integer>>> op=new ReduceOperatorBase<Tuple2<String,Integer>,ReduceFunction<Tuple2<String,Integer>>>(reducer,new UnaryOperatorInformation<Tuple2<String,Integer>,Tuple2<String,Integer>>(TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, Integer>"),TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, " + "Integer>")),new int[]{0},"TestReducer");
    List<Tuple2<String,Integer>> input=new ArrayList<Tuple2<String,Integer>>(asList(new Tuple2<String,Integer>("foo",1),new Tuple2<String,Integer>("foo",3),new Tuple2<String,Integer>("bar",2),new Tuple2<String,Integer>("bar",4)));
    ExecutionConfig executionConfig=new ExecutionConfig();
    executionConfig.disableObjectReuse();
    List<Tuple2<String,Integer>> resultMutableSafe=op.executeOnCollections(input,null,executionConfig);
    executionConfig.enableObjectReuse();
    List<Tuple2<String,Integer>> resultRegular=op.executeOnCollections(input,null,executionConfig);
    Set<Tuple2<String,Integer>> resultSetMutableSafe=new HashSet<Tuple2<String,Integer>>(resultMutableSafe);
    Set<Tuple2<String,Integer>> resultSetRegular=new HashSet<Tuple2<String,Integer>>(resultRegular);
    Set<Tuple2<String,Integer>> expectedResult=new HashSet<Tuple2<String,Integer>>(asList(new Tuple2<String,Integer>("foo",4),new Tuple2<String,Integer>("bar",6)));
    assertEquals(expectedResult,resultSetMutableSafe);
    assertEquals(expectedResult,resultSetRegular);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
