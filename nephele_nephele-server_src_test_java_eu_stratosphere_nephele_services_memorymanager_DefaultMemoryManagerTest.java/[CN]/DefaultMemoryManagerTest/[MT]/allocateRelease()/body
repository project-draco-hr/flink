{
  final AbstractInvokable memOwner=new DummyInvokable();
  MemorySegment segment=null;
  try {
    segment=memoryManager.allocate(memOwner,CHUNK_SIZE + 1);
    memoryManager.release(segment);
    fail("MemoryManagementAllocation expected");
  }
 catch (  MemoryAllocationException e) {
  }
  try {
    segment=memoryManager.allocate(memOwner,CHUNK_SIZE);
    memoryManager.release(segment);
  }
 catch (  MemoryAllocationException e) {
    fail("unexpected MemoryAllocationException");
  }
  for (  int segmentSize : SEGMENT_SIZES) {
    ArrayList<MemorySegment> segments=new ArrayList<MemorySegment>(MEMORY_SIZE / segmentSize);
    try {
      for (int i=0; i < MEMORY_SIZE / segmentSize; i++) {
        segments.add(i,memoryManager.allocate(memOwner,segmentSize));
      }
    }
 catch (    MemoryAllocationException e) {
      fail("unexpected MemoryAllocationException");
    }
 finally {
      Collections.shuffle(segments,random);
      for (      MemorySegment s : segments) {
        memoryManager.release(s);
      }
    }
  }
}
