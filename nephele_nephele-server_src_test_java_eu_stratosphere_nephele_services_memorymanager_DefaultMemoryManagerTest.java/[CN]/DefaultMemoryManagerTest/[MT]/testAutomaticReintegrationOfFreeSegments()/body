{
  final AbstractInvokable memOwner=new DummyInvokable();
  ArrayList<MemorySegment> segments=new ArrayList<MemorySegment>();
  try {
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 10));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 02));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 04));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 04));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 04));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 06));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 06));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 04));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 04));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 04));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 06));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 05));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 01));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 12));
    memoryManager.release(segments.get(6));
    memoryManager.release(segments.get(3));
    memoryManager.release(segments.get(2));
    memoryManager.release(segments.get(8));
    memoryManager.release(segments.get(9));
    memoryManager.release(segments.get(0));
    memoryManager.release(segments.get(1));
    memoryManager.release(segments.get(5));
    memoryManager.release(segments.get(13));
    memoryManager.release(segments.get(10));
    memoryManager.release(segments.get(12));
    memoryManager.release(segments.get(11));
    memoryManager.release(segments.get(4));
    memoryManager.release(segments.get(7));
    if (!memoryManager.verifyEmpty()) {
      throw new Exception("Memory manager is not complete empty and valid at the end of the test.");
    }
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 12));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 12));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 12));
    segments.add(memoryManager.allocate(memOwner,1024 * 1024 * 12));
    memoryManager.release(segments);
  }
 catch (  MemoryAllocationException e) {
    fail("unexpected MemoryAllocationException");
  }
}
