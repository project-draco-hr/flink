{
  Map<String,Integer> map=new HashMap<String,Integer>();
  map.put("a",1);
  map.put("b",2);
  map.put("c",3);
  MapState<String,Integer> mapState=new MapState<String,Integer>();
  mapState.putAll(map);
  StateCheckpoint<Map<String,Integer>> mcp=mapState.checkpoint();
  assertEquals(map,mcp.getCheckpointedState());
  Map<String,Integer> map2=new HashMap<String,Integer>();
  map2.put("a",0);
  map2.put("e",-1);
  mapState.put("a",0);
  mapState.put("e",-1);
  mapState.remove("b");
  StateCheckpoint<Map<String,Integer>> mcp2=new MapCheckpoint<String,Integer>(mapState);
  assertEquals(map2,mcp2.getCheckpointedState());
  mcp.update(mcp2);
  assertEquals(mapState.state,mcp.getCheckpointedState());
  mapState.clear();
  mapState.put("a",1);
  mapState.put("a",2);
  mapState.put("b",-3);
  mapState.put("c",0);
  mapState.remove("b");
  mcp.update(mapState.checkpoint());
  assertEquals(mapState.state,mcp.getCheckpointedState());
  MapState<String,Integer> mapState2=(MapState<String,Integer>)new MapState<String,Integer>().restore(mcp);
  assertTrue(mapState2.stateEquals(mapState));
  mapState2.reBuild(mapState2.repartition(10));
  assertTrue(mapState2.stateEquals(mapState));
  MapState<Integer,Integer> mapState3=new MapState<Integer,Integer>();
  mapState3.put(1,1);
  mapState3.put(2,1);
  mapState3.reBuild(mapState3.repartition(2)[0]);
  assertTrue(mapState3.containsKey(2));
  assertFalse(mapState3.containsKey(1));
}
