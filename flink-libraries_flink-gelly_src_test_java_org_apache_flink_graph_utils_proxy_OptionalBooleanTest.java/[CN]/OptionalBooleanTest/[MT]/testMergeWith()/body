{
  u.mergeWith(u);
  assertEquals(State.UNSET,u.getState());
  u.mergeWith(f);
  assertEquals(State.FALSE,u.getState());
  u.unset();
  u.mergeWith(t);
  assertEquals(State.TRUE,u.getState());
  u.unset();
  u.mergeWith(c);
  assertEquals(State.CONFLICTING,u.getState());
  u.unset();
  f.mergeWith(u);
  assertEquals(State.FALSE,f.getState());
  f.mergeWith(f);
  assertEquals(State.FALSE,f.getState());
  f.mergeWith(t);
  assertEquals(State.CONFLICTING,f.getState());
  f.set(false);
  f.mergeWith(c);
  assertEquals(State.CONFLICTING,f.getState());
  f.set(false);
  t.mergeWith(u);
  assertEquals(State.TRUE,t.getState());
  t.mergeWith(f);
  assertEquals(State.CONFLICTING,t.getState());
  t.set(true);
  t.mergeWith(t);
  assertEquals(State.TRUE,t.getState());
  t.mergeWith(c);
  assertEquals(State.CONFLICTING,t.getState());
  t.set(true);
  c.mergeWith(u);
  assertEquals(State.CONFLICTING,c.getState());
  c.mergeWith(f);
  assertEquals(State.CONFLICTING,c.getState());
  c.mergeWith(t);
  assertEquals(State.CONFLICTING,c.getState());
  c.mergeWith(c);
  assertEquals(State.CONFLICTING,c.getState());
}
