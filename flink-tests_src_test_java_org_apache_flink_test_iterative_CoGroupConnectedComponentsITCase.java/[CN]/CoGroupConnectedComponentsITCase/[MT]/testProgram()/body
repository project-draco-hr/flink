{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple1<Long>> initialVertices=env.readCsvFile(verticesPath).fieldDelimiter(" ").types(Long.class).name("Vertices");
  DataSet<Tuple2<Long,Long>> edges=env.readCsvFile(edgesPath).fieldDelimiter(" ").types(Long.class,Long.class).name("Edges");
  DataSet<Tuple2<Long,Long>> verticesWithId=initialVertices.map(new MapFunction<Tuple1<Long>,Tuple2<Long,Long>>(){
    @Override public Tuple2<Long,Long> map(    Tuple1<Long> value) throws Exception {
      return new Tuple2<>(value.f0,value.f0);
    }
  }
).name("Assign Vertex Ids");
  DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iteration=verticesWithId.iterateDelta(verticesWithId,MAX_ITERATIONS,0);
  JoinOperator<Tuple2<Long,Long>,Tuple2<Long,Long>,Tuple2<Long,Long>> joinWithNeighbors=iteration.getWorkset().join(edges).where(0).equalTo(0).with(new JoinFunction<Tuple2<Long,Long>,Tuple2<Long,Long>,Tuple2<Long,Long>>(){
    @Override public Tuple2<Long,Long> join(    Tuple2<Long,Long> first,    Tuple2<Long,Long> second) throws Exception {
      return new Tuple2<>(second.f1,first.f1);
    }
  }
).name("Join Candidate Id With Neighbor");
  CoGroupOperator<Tuple2<Long,Long>,Tuple2<Long,Long>,Tuple2<Long,Long>> minAndUpdate=joinWithNeighbors.coGroup(iteration.getSolutionSet()).where(0).equalTo(0).with(new MinIdAndUpdate()).name("min Id and Update");
  iteration.closeWith(minAndUpdate,minAndUpdate).writeAsCsv(resultPath,"\n"," ").name("Result");
  env.execute("Workset Connected Components");
}
