{
  try {
    final String BC_VAR_NAME="borat variable";
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(DEFAULT_PARALLELISM);
{
      DataSet<Long> bcVar=env.fromElements(1L);
      DataSet<Vertex<Long,Long>> initialVertices=env.fromElements(new Tuple2<>(1L,1L),new Tuple2<>(2L,2L)).map(new Tuple2ToVertexMap<Long,Long>());
      DataSet<Edge<Long,NullValue>> edges=env.fromElements(new Tuple2<>(1L,2L)).map(new MapFunction<Tuple2<Long,Long>,Edge<Long,NullValue>>(){
        public Edge<Long,NullValue> map(        Tuple2<Long,Long> edge){
          return new Edge<>(edge.f0,edge.f1,NullValue.getInstance());
        }
      }
);
      Graph<Long,Long,NullValue> graph=Graph.fromDataSet(initialVertices,edges,env);
      VertexCentricConfiguration parameters=new VertexCentricConfiguration();
      parameters.addBroadcastSet(BC_VAR_NAME,bcVar);
      DataSet<Vertex<Long,Long>> result=graph.runVertexCentricIteration(new CCCompute(),null,100,parameters).getVertices();
      result.output(new DiscardingOutputFormat<Vertex<Long,Long>>());
    }
    Plan p=env.createProgramPlan("Pregel Connected Components");
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy());
    assertEquals(DEFAULT_PARALLELISM,sink.getParallelism());
    WorksetIterationPlanNode iteration=(WorksetIterationPlanNode)sink.getInput().getSource();
    assertEquals(DEFAULT_PARALLELISM,iteration.getParallelism());
    PlanNode ssDelta=iteration.getSolutionSetDeltaPlanNode();
    assertTrue(ssDelta instanceof SingleInputPlanNode);
    SingleInputPlanNode ssFlatMap=(SingleInputPlanNode)((SingleInputPlanNode)(ssDelta)).getInput().getSource();
    assertEquals(DEFAULT_PARALLELISM,ssFlatMap.getParallelism());
    assertEquals(ShipStrategyType.FORWARD,ssFlatMap.getInput().getShipStrategy());
    DualInputPlanNode computationCoGroup=(DualInputPlanNode)(ssFlatMap.getInput().getSource());
    assertEquals(DEFAULT_PARALLELISM,computationCoGroup.getParallelism());
    assertEquals(ShipStrategyType.FORWARD,computationCoGroup.getInput1().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_HASH,computationCoGroup.getInput2().getShipStrategy());
    assertTrue(computationCoGroup.getInput2().getTempMode().isCached());
    assertEquals(new FieldList(0),computationCoGroup.getInput2().getShipStrategyKeys());
    assertEquals(ShipStrategyType.PARTITION_HASH,iteration.getInput1().getShipStrategy());
    assertEquals(new FieldList(0),iteration.getInput1().getShipStrategyKeys());
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail(e.getMessage());
  }
}
