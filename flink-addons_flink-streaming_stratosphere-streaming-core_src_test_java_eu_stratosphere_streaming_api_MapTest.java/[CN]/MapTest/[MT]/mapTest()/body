{
  LocalStreamEnvironment env=StreamExecutionEnvironment.createLocalEnvironment();
  fillFromCollectionSet();
  DataStream<Tuple1<Integer>> dataStream=env.fromCollection(fromCollectionSet).map(new MyMap(),PARALELISM).addSink(new MySink());
  fillExpectedList();
  fillFromCollectionSet();
  DataStream<Tuple1<Integer>> dataStream1=env.fromCollection(fromCollectionSet).broadcast().map(new MyMap(),3).addSink(new MyBroadcastSink());
  fillFromCollectionSet();
  DataStream<Tuple1<Integer>> dataStream2=env.fromCollection(fromCollectionSet).map(new MyMap(),3).addSink(new MyShufflesSink());
  fillFromCollectionFieldsSet();
  DataStream<Tuple1<Integer>> dataStream3=env.fromCollection(fromCollectionFields).partitionBy(0).map(new MyFieldsMap(),3).addSink(new MyFieldsSink());
  fillFromCollectionDiffFieldsSet();
  DataStream<Tuple1<Integer>> dataStream4=env.fromCollection(fromCollectionDiffFieldsSet).partitionBy(0).map(new MyDiffFieldsMap(),3).addSink(new MyDiffFieldsSink());
  DataStream<Tuple1<Integer>> source1=env.addSource(new MySource1(),1);
  DataStream<Tuple1<Integer>> source2=env.addSource(new MySource2(),1).connectWith(source1).partitionBy(0).map(new MySingleJoinMap(),1).addSink(new JoinSink());
  fillSingleJoinSet();
  DataStream<Tuple1<Integer>> source3=env.addSource(new MySource1(),1);
  DataStream<Tuple1<Integer>> source4=env.addSource(new MySource2(),1);
  DataStream<Tuple1<Integer>> source5=env.addSource(new MySource3(),1).connectWith(source3,source4).partitionBy(0).map(new MyMultipleJoinMap(),1).addSink(new JoinSink());
  env.setDegreeOfParallelism(3);
  env.executeTest(MEMORYSIZE);
  fillMultipleJoinSet();
  assertTrue(expected.equals(result));
  assertEquals(30,broadcastResult);
  assertEquals(10,shuffleResult);
  assertTrue(allInOne);
  assertTrue(threeInAll);
  assertEquals(9,diffFieldsResult);
  assertEquals(singleJoinSetExpected,singleJoinSetResult);
  assertEquals(multipleJoinSetExpected,multipleJoinSetResult);
}
