{
  ObjectMapper objectMapper=new ObjectMapper();
  objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
  PlanTree tree=objectMapper.readValue(t,PlanTree.class);
  LinkedHashMap<String,Integer> map=new LinkedHashMap<>();
  StringWriter sw=new StringWriter();
  PrintWriter pw=new PrintWriter(sw);
  int tabCount=0;
  for (int index=0; index < tree.getNodes().size(); index++) {
    Node tempNode=tree.getNodes().get(index);
    if ((tempNode.getPact().equals("Data Source")) && (map.containsKey(tempNode.getPact()))) {
      tabCount=map.get(tempNode.getPact());
    }
 else {
      map.put(tempNode.getPact(),tabCount);
    }
    printTab(tabCount,pw);
    pw.print("Stage " + tempNode.getId() + " : "+ tempNode.getPact()+ "\n");
    printTab(tabCount + 1,pw);
    String content=tempNode.getContents();
    int dele=tempNode.getContents().indexOf("@");
    if (dele > -1) {
      content=tempNode.getContents().substring(0,dele);
    }
    if (tempNode.getPact().equals("Data Source")) {
      content="collect elements with CollectionInputFormat";
    }
    pw.print("content : " + content + "\n");
    List<Predecessors> predecessors=tempNode.getPredecessors();
    if (predecessors != null) {
      printTab(tabCount + 1,pw);
      pw.print("ship_strategy : " + predecessors.get(0).getShip_strategy() + "\n");
      printTab(tabCount + 1,pw);
      pw.print("exchange_mode : " + predecessors.get(0).getExchange_mode() + "\n");
    }
    if (tempNode.getDriver_strategy() != null) {
      printTab(tabCount + 1,pw);
      pw.print("driver_strategy : " + tempNode.getDriver_strategy() + "\n");
    }
    printTab(tabCount + 1,pw);
    pw.print(tempNode.getGlobal_properties().get(0).getName() + " : " + tempNode.getGlobal_properties().get(0).getValue()+ "\n");
    if (extended) {
      List<Global_properties> globalProperties=tempNode.getGlobal_properties();
      for (int i=1; i < globalProperties.size(); i++) {
        printTab(tabCount + 1,pw);
        pw.print(globalProperties.get(i).getName() + " : " + globalProperties.get(i).getValue()+ "\n");
      }
      List<LocalProperty> localProperties=tempNode.getLocal_properties();
      for (int i=0; i < localProperties.size(); i++) {
        printTab(tabCount + 1,pw);
        pw.print(localProperties.get(i).getName() + " : " + localProperties.get(i).getValue()+ "\n");
      }
      List<Estimates> estimates=tempNode.getEstimates();
      for (int i=0; i < estimates.size(); i++) {
        printTab(tabCount + 1,pw);
        pw.print(estimates.get(i).getName() + " : " + estimates.get(i).getValue()+ "\n");
      }
      List<Costs> costs=tempNode.getCosts();
      for (int i=0; i < costs.size(); i++) {
        printTab(tabCount + 1,pw);
        pw.print(costs.get(i).getName() + " : " + costs.get(i).getValue()+ "\n");
      }
      List<Compiler_hints> compilerHintses=tempNode.getCompiler_hints();
      for (int i=0; i < compilerHintses.size(); i++) {
        printTab(tabCount + 1,pw);
        pw.print(compilerHintses.get(i).getName() + " : " + compilerHintses.get(i).getValue()+ "\n");
      }
    }
    tabCount++;
    pw.print("\n");
  }
  pw.close();
  return sw.toString();
}
