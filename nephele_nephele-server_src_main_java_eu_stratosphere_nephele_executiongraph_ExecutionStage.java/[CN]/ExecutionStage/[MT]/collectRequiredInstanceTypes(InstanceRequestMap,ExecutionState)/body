{
  final Set<AbstractInstance> collectedInstances=new HashSet<AbstractInstance>();
  final ExecutionGroupVertexIterator groupIt=new ExecutionGroupVertexIterator(this.getExecutionGraph(),true,this.stageNum);
  while (groupIt.hasNext()) {
    final ExecutionGroupVertex groupVertex=groupIt.next();
    System.out.println("Looking at group vertex " + groupVertex.getName());
    final Iterator<ExecutionVertex> vertexIt=groupVertex.iterator();
    while (vertexIt.hasNext()) {
      final ExecutionVertex vertex=vertexIt.next();
      if (vertex.getExecutionState() == executionState) {
        final AbstractInstance instance=vertex.getAllocatedResource().getInstance();
        if (collectedInstances.contains(instance)) {
          continue;
        }
 else {
          collectedInstances.add(instance);
        }
        if (instance instanceof DummyInstance) {
          final InstanceType instanceType=instance.getType();
          int num=instanceRequestMap.getMaximumNumberOfInstances(instanceType);
          ++num;
          instanceRequestMap.setMaximumNumberOfInstances(instanceType,num);
          if (groupVertex.isInputVertex()) {
            num=instanceRequestMap.getMinimumNumberOfInstances(instanceType);
            ++num;
            instanceRequestMap.setMinimumNumberOfInstances(instanceType,num);
          }
        }
 else {
          LOG.debug("Execution Vertex " + vertex.getName() + " ("+ vertex.getID()+ ") is already assigned to non-dummy instance, skipping...");
        }
      }
    }
  }
  final Iterator<Map.Entry<InstanceType,Integer>> it=instanceRequestMap.getMaximumIterator();
  while (it.hasNext()) {
    final Map.Entry<InstanceType,Integer> entry=it.next();
    if (instanceRequestMap.getMinimumNumberOfInstances(entry.getKey()) == 0) {
      instanceRequestMap.setMinimumNumberOfInstances(entry.getKey(),entry.getValue());
    }
  }
}
