{
  GroupReduceFunction<IN,OUT> function=this.userFunction.getUserCodeObject();
  UnaryOperatorInformation<IN,OUT> operatorInfo=getOperatorInfo();
  TypeInformation<IN> inputType=operatorInfo.getInputType();
  if (!(inputType instanceof CompositeType)) {
    throw new InvalidProgramException("Input type of groupReduce operation must be" + " composite type.");
  }
  int[] inputColumns=getKeyColumns(0);
  boolean[] inputOrderings=new boolean[inputColumns.length];
  final TypeComparator<IN> inputComparator=((CompositeType<IN>)inputType).createComparator(inputColumns,inputOrderings);
  FunctionUtils.setFunctionRuntimeContext(function,ctx);
  FunctionUtils.openFunction(function,this.parameters);
  ArrayList<OUT> result=new ArrayList<OUT>(inputData.size());
  ListCollector<OUT> collector=new ListCollector<OUT>(result);
  inputData.sort(new Comparator<IN>(){
    @Override public int compare(    IN o1,    IN o2){
      return -inputComparator.compare(o1,o2);
    }
  }
);
  ListKeyGroupedIterator<IN> keyedIterator=new ListKeyGroupedIterator<IN>(inputData,inputComparator);
  while (keyedIterator.nextKey()) {
    function.reduce(keyedIterator.getValues(),collector);
  }
  FunctionUtils.closeFunction(function);
  return result;
}
