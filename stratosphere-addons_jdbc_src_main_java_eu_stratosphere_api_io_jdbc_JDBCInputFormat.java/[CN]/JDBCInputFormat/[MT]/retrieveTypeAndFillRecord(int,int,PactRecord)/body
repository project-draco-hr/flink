{
switch (type) {
case java.sql.Types.NULL:
    record.setField(pos,PactNull.getInstance());
  break;
case java.sql.Types.BOOLEAN:
record.setField(pos,new PactBoolean(resultSet.getBoolean(pos + 1)));
break;
case java.sql.Types.BIT:
record.setField(pos,new PactBoolean(resultSet.getBoolean(pos + 1)));
break;
case java.sql.Types.CHAR:
record.setField(pos,new PactString(resultSet.getString(pos + 1)));
break;
case java.sql.Types.NCHAR:
record.setField(pos,new PactString(resultSet.getString(pos + 1)));
break;
case java.sql.Types.VARCHAR:
record.setField(pos,new PactString(resultSet.getString(pos + 1)));
break;
case java.sql.Types.LONGVARCHAR:
record.setField(pos,new PactString(resultSet.getString(pos + 1)));
break;
case java.sql.Types.LONGNVARCHAR:
record.setField(pos,new PactString(resultSet.getString(pos + 1)));
break;
case java.sql.Types.TINYINT:
record.setField(pos,new PactShort(resultSet.getShort(pos + 1)));
break;
case java.sql.Types.SMALLINT:
record.setField(pos,new PactShort(resultSet.getShort(pos + 1)));
break;
case java.sql.Types.BIGINT:
record.setField(pos,new PactLong(resultSet.getLong(pos + 1)));
break;
case java.sql.Types.INTEGER:
record.setField(pos,new PactInteger(resultSet.getInt(pos + 1)));
break;
case java.sql.Types.FLOAT:
record.setField(pos,new PactDouble(resultSet.getDouble(pos + 1)));
break;
case java.sql.Types.REAL:
record.setField(pos,new PactFloat(resultSet.getFloat(pos + 1)));
break;
case java.sql.Types.DOUBLE:
record.setField(pos,new PactDouble(resultSet.getDouble(pos + 1)));
break;
case java.sql.Types.DECIMAL:
record.setField(pos,new PactDouble(resultSet.getBigDecimal(pos + 1).doubleValue()));
break;
case java.sql.Types.NUMERIC:
record.setField(pos,new PactDouble(resultSet.getBigDecimal(pos + 1).doubleValue()));
break;
case java.sql.Types.DATE:
record.setField(pos,new PactString(resultSet.getDate(pos + 1).toString()));
break;
case java.sql.Types.TIME:
record.setField(pos,new PactLong(resultSet.getTime(pos + 1).getTime()));
break;
case java.sql.Types.TIMESTAMP:
record.setField(pos,new PactString(resultSet.getTimestamp(pos + 1).toString()));
break;
case java.sql.Types.SQLXML:
record.setField(pos,new PactString(resultSet.getSQLXML(pos + 1).toString()));
break;
default :
throw new NotTransformableSQLFieldException("Unknown sql-type [" + type + "]on column ["+ pos+ "]");
}
}
