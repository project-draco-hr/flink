{
  final List<FileIOChannel> channelAccesses=new ArrayList<FileIOChannel>(channelIDs.size());
  final MergeIterator<E> mergeIterator=getMergingIterator(channelIDs,readBuffers,channelAccesses);
  final ReusingKeyGroupedIterator<E> groupedIter=new ReusingKeyGroupedIterator<E>(mergeIterator,this.serializer,this.comparator2);
  final FileIOChannel.ID mergedChannelID=this.ioManager.createChannel();
  registerChannelToBeRemovedAtShudown(mergedChannelID);
  final BlockChannelWriter writer=this.ioManager.createBlockChannelWriter(mergedChannelID);
  registerOpenChannelToBeRemovedAtShudown(writer);
  final ChannelWriterOutputView output=new ChannelWriterOutputView(writer,writeBuffers,this.memManager.getPageSize());
  final WriterCollector<E> collector=new WriterCollector<E>(output,this.serializer);
  final FlatCombineFunction<E> combineStub=CombiningUnilateralSortMerger.this.combineStub;
  try {
    while (groupedIter.nextKey()) {
      combineStub.combine(groupedIter.getValues(),collector);
    }
  }
 catch (  Exception e) {
    throw new IOException("An error occurred in the combiner user code.");
  }
  output.close();
  final int numBlocksWritten=output.getBlockCount();
  unregisterOpenChannelToBeRemovedAtShudown(writer);
  for (int i=0; i < channelAccesses.size(); i++) {
    FileIOChannel access=channelAccesses.get(i);
    access.closeAndDelete();
    unregisterOpenChannelToBeRemovedAtShudown(access);
  }
  return new ChannelWithBlockCount(mergedChannelID,numBlocksWritten);
}
