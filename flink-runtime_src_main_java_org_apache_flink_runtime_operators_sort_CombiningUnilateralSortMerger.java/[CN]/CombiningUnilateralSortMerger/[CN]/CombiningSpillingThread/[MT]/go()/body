{
  final Queue<CircularElement<E>> cache=new ArrayDeque<CircularElement<E>>();
  CircularElement<E> element=null;
  boolean cacheOnly=false;
  while (isRunning()) {
    try {
      element=this.queues.spill.take();
    }
 catch (    InterruptedException iex) {
      if (isRunning()) {
        LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " + "Retrying to grab buffer...");
        continue;
      }
 else {
        return;
      }
    }
    if (element == spillingMarker()) {
      break;
    }
 else     if (element == endMarker()) {
      cacheOnly=true;
      break;
    }
    cache.add(element);
  }
  if (!isRunning()) {
    return;
  }
  if (cacheOnly) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Initiating in memory merge.");
    }
    List<MutableObjectIterator<E>> iterators=new ArrayList<MutableObjectIterator<E>>(cache.size());
    for (    CircularElement<E> cached : cache) {
      iterators.add(cached.buffer.getIterator());
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Releasing unused sort-buffer memory.");
    }
    disposeSortBuffers(true);
    MutableObjectIterator<E> resIter=iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() : iterators.size() == 1 ? iterators.get(0) : new MergeIterator<E>(iterators,this.serializer,this.comparator);
    setResultIterator(resIter);
    return;
  }
  final FlatCombineFunction<E> combineStub=CombiningUnilateralSortMerger.this.combineStub;
  try {
    Configuration conf=CombiningUnilateralSortMerger.this.udfConfig;
    FunctionUtils.openFunction(combineStub,(conf == null ? new Configuration() : conf));
  }
 catch (  Throwable t) {
    throw new IOException("The user-defined combiner failed in its 'open()' method.",t);
  }
  final Channel.Enumerator enumerator=this.ioManager.createChannelEnumerator();
  List<ChannelWithBlockCount> channelIDs=new ArrayList<ChannelWithBlockCount>();
  while (isRunning()) {
    try {
      element=takeNext(this.queues.spill,cache);
    }
 catch (    InterruptedException iex) {
      if (isRunning()) {
        LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " + "Retrying to grab buffer...");
        continue;
      }
 else {
        return;
      }
    }
    if (!isRunning()) {
      return;
    }
    if (element == endMarker()) {
      break;
    }
    Channel.ID channel=enumerator.next();
    registerChannelToBeRemovedAtShudown(channel);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Creating temp file " + channel.toString() + '.');
    }
    final BlockChannelWriter writer=this.ioManager.createBlockChannelWriter(channel,this.numWriteBuffersToCluster);
    registerOpenChannelToBeRemovedAtShudown(writer);
    final ChannelWriterOutputView output=new ChannelWriterOutputView(writer,this.writeMemory,this.memManager.getPageSize());
    if (LOG.isDebugEnabled()) {
      LOG.debug("Combining buffer " + element.id + '.');
    }
    final InMemorySorter<E> buffer=element.buffer;
    final CombineValueIterator<E> iter=new CombineValueIterator<E>(buffer,this.serializer.createInstance());
    final WriterCollector<E> collector=new WriterCollector<E>(output,this.serializer);
    int i=0;
    int stop=buffer.size() - 1;
    try {
      while (i < stop) {
        int seqStart=i;
        while (i < stop && 0 == buffer.compare(i,i + 1)) {
          i++;
        }
        if (i == seqStart) {
          buffer.writeToOutput(output,seqStart,1);
        }
 else {
          iter.set(seqStart,i);
          combineStub.combine(iter,collector);
        }
        i++;
      }
    }
 catch (    Exception ex) {
      throw new IOException("An error occurred in the combiner user code.",ex);
    }
    if (i == stop) {
      buffer.writeToOutput(output,stop,1);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Combined and spilled buffer " + element.id + ".");
    }
    output.close();
    unregisterOpenChannelToBeRemovedAtShudown(writer);
    channelIDs.add(new ChannelWithBlockCount(channel,output.getBlockCount()));
    element.buffer.reset();
    this.queues.empty.add(element);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Spilling done.");
    LOG.debug("Releasing sort-buffer memory.");
  }
  disposeSortBuffers(false);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Closing combiner user code.");
  }
  try {
    FunctionUtils.closeFunction(combineStub);
  }
 catch (  Throwable t) {
    throw new IOException("The user-defined combiner failed in its 'close()' method.",t);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("User code closed.");
  }
  while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {
    channelIDs=mergeChannelList(channelIDs,this.sortReadMemory,this.writeMemory);
  }
  this.memManager.release(this.writeMemory);
  this.writeMemory.clear();
  if (channelIDs.isEmpty()) {
    setResultIterator(EmptyMutableObjectIterator.<E>get());
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Beginning final merge.");
    }
    List<List<MemorySegment>> readBuffers=new ArrayList<List<MemorySegment>>(channelIDs.size());
    getSegmentsForReaders(readBuffers,this.sortReadMemory,channelIDs.size());
    final MergeIterator<E> mergeIterator=getMergingIterator(channelIDs,readBuffers,new ArrayList<BlockChannelAccess<?,?>>(channelIDs.size()));
    setResultIterator(mergeIterator);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Spilling and merging thread done.");
  }
}
