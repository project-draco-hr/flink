{
  try {
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    @SuppressWarnings("unchecked") DataSet<Tuple1<Long>> pagesInput=env.fromElements(new Tuple1<Long>(1l));
    @SuppressWarnings("unchecked") DataSet<Tuple2<Long,Long>> linksInput=env.fromElements(new Tuple2<Long,Long>(1l,2l));
    DataSet<Tuple2<Long,Double>> pagesWithRanks=pagesInput.map(new RankAssigner((1.0d / 10)));
    DataSet<Tuple2<Long,Long[]>> adjacencyListInput=linksInput.groupBy(0).reduceGroup(new BuildOutgoingEdgeList());
    IterativeDataSet<Tuple2<Long,Double>> iteration=pagesWithRanks.iterate(10);
    Configuration cfg=new Configuration();
    cfg.setString(PactCompiler.HINT_LOCAL_STRATEGY,PactCompiler.HINT_LOCAL_STRATEGY_HASH_BUILD_SECOND);
    DataSet<Tuple2<Long,Double>> newRanks=iteration.join(adjacencyListInput).where(0).equalTo(0).withParameters(cfg).flatMap(new JoinVertexWithEdgesMatch()).groupBy(0).aggregate(SUM,1).map(new Dampener(0.85,10));
    DataSet<Tuple2<Long,Double>> finalPageRanks=iteration.closeWith(newRanks,newRanks.join(iteration).where(0).equalTo(0).filter(new EpsilonFilter()));
    finalPageRanks.print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sinkPlanNode=(SinkPlanNode)op.getDataSinks().iterator().next();
    BulkIterationPlanNode iterPlanNode=(BulkIterationPlanNode)sinkPlanNode.getInput().getSource();
    Assert.assertEquals(ShipStrategyType.PARTITION_HASH,iterPlanNode.getInput().getShipStrategy());
    Assert.assertEquals(LocalStrategy.NONE,iterPlanNode.getInput().getLocalStrategy());
    BulkPartialSolutionPlanNode partSolPlanNode=iterPlanNode.getPartialSolutionPlanNode();
    Assert.assertEquals(ShipStrategyType.FORWARD,partSolPlanNode.getOutgoingChannels().get(0).getShipStrategy());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
