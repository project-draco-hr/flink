{
  StringBuilder sb=new StringBuilder();
  for (int numFields=FIRST; numFields <= LAST; numFields++) {
    sb.append("\n");
    sb.append("\tpublic <");
    appendTupleTypeGenerics(sb,numFields);
    sb.append("> DataSource<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">> types(");
    for (int i=0; i < numFields; i++) {
      if (i > 0) {
        sb.append(", ");
      }
      sb.append("Class<");
      sb.append(GEN_TYPE_PREFIX + i);
      sb.append("> type" + i);
    }
    sb.append(") {\n");
    sb.append("\t\tTupleTypeInfo<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">> types = TupleTypeInfo.getBasicTupleTypeInfo(");
    for (int i=0; i < numFields; i++) {
      if (i > 0) {
        sb.append(", ");
      }
      sb.append("type" + i);
    }
    sb.append(");\n");
    sb.append("\t\tCsvInputFormat<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">> inputFormat = new CsvInputFormat<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">>(path);\n");
    sb.append("\t\tconfigureInputFormat(inputFormat, ");
    for (int i=0; i < numFields; i++) {
      if (i > 0) {
        sb.append(", ");
      }
      sb.append("type" + i);
    }
    sb.append(");\n");
    sb.append("\t\treturn new DataSource<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">>(executionContext, inputFormat, types);\n");
    sb.append("\t}\n");
  }
  File dir=getPackage(root,CSV_READER_PACKAGE);
  File csvReaderClass=new File(dir,CSV_READER_CLASSNAME + ".java");
  insertCodeIntoFile(sb.toString(),csvReaderClass);
}
