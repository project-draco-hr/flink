{
  StringBuilder sb=new StringBuilder();
  for (int numFields=FIRST; numFields <= LAST; numFields++) {
    sb.append("\n");
    sb.append("\t\t/**\n");
    sb.append("\t\t * Projects a tuple data set to the previously selected fields. \n");
    sb.append("\t\t * Requires the classes of the fields of the resulting tuples. \n");
    sb.append("\t\t * \n");
    for (int i=0; i < numFields; i++) {
      sb.append("\t\t * @param type" + i + " The class of field '"+ i+ "' of the result tuples.\n");
    }
    sb.append("\t\t * @return The projected data set.\n");
    sb.append("\t\t */\n");
    sb.append("\t\tpublic <");
    appendTupleTypeGenerics(sb,numFields);
    sb.append("> ProjectOperator<T, Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">> types(");
    for (int i=0; i < numFields; i++) {
      if (i > 0) {
        sb.append(", ");
      }
      sb.append("Class<");
      sb.append(GEN_TYPE_PREFIX + i);
      sb.append("> type" + i);
    }
    sb.append(") {\n");
    sb.append("\t\t\tClass<?>[] types = {");
    for (int i=0; i < numFields; i++) {
      if (i > 0) {
        sb.append(", ");
      }
      sb.append("type" + i);
    }
    sb.append("};\n");
    sb.append("\t\t\tif(types.length != this.fields.length) {\n");
    sb.append("\t\t\t\tthrow new IllegalArgumentException(\"Numbers of projected fields and types do not match.\");\n");
    sb.append("\t\t\t}\n");
    sb.append("\t\t\t\n");
    sb.append("\t\t\tTypeInformation<?>[] fTypes = extractFieldTypes(fields, types, ds.getType());\n");
    sb.append("\t\t\tTupleTypeInfo<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">> tType = new TupleTypeInfo<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">>(fTypes);\n\n");
    sb.append("\t\t\treturn new ProjectOperator<T, Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">>(this.ds, this.fields, tType);\n");
    sb.append("\t\t}\n");
  }
  File dir=getPackage(root,PROJECT_OPERATOR_PACKAGE);
  File projectOperatorClass=new File(dir,PROJECT_OPERATOR_CLASSNAME + ".java");
  insertCodeIntoFile(sb.toString(),projectOperatorClass);
}
