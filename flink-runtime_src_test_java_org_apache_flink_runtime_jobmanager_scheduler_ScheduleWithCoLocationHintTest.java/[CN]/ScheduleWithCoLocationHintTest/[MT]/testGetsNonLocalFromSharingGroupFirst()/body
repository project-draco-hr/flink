{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jid3=new JobVertexID();
    Scheduler scheduler=new Scheduler();
    Instance i1=getRandomInstance(1);
    Instance i2=getRandomInstance(1);
    scheduler.newInstanceAvailable(i2);
    scheduler.newInstanceAvailable(i1);
    assertEquals(2,scheduler.getNumberOfAvailableSlots());
    SlotSharingGroup sharingGroup=new SlotSharingGroup();
    CoLocationGroup ccg=new CoLocationGroup();
    CoLocationConstraint cc1=new CoLocationConstraint(ccg);
    CoLocationConstraint cc2=new CoLocationConstraint(ccg);
    SimpleSlot s1=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid1,0,2,i1),sharingGroup));
    SimpleSlot s2=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid1,1,2,i2),sharingGroup));
    SimpleSlot s3=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid2,0,2,i1),sharingGroup,cc1));
    SimpleSlot s4=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid2,1,2,i1),sharingGroup,cc2));
    SimpleSlot s5=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid3,0,2,i2),sharingGroup,cc1));
    SimpleSlot s6=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertexWithLocation(jid3,1,2,i1),sharingGroup,cc2));
    assertEquals(3,s1.getRoot().getNumberLeaves());
    assertEquals(3,s2.getRoot().getNumberLeaves());
    assertEquals(s1.getInstance(),s3.getInstance());
    assertEquals(s2.getInstance(),s4.getInstance());
    assertEquals(s1.getInstance(),s5.getInstance());
    assertEquals(s2.getInstance(),s6.getInstance());
    assertEquals(0,scheduler.getNumberOfAvailableSlots());
    assertEquals(5,scheduler.getNumberOfLocalizedAssignments());
    assertEquals(1,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfUnconstrainedAssignments());
    s1.releaseSlot();
    s2.releaseSlot();
    s3.releaseSlot();
    s4.releaseSlot();
    s5.releaseSlot();
    s6.releaseSlot();
    assertEquals(2,scheduler.getNumberOfAvailableSlots());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
