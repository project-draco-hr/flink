{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jid3=new JobVertexID();
    JobVertexID jid4=new JobVertexID();
    Scheduler scheduler=new Scheduler();
    scheduler.newInstanceAvailable(getRandomInstance(1));
    scheduler.newInstanceAvailable(getRandomInstance(1));
    scheduler.newInstanceAvailable(getRandomInstance(1));
    scheduler.newInstanceAvailable(getRandomInstance(1));
    assertEquals(4,scheduler.getNumberOfAvailableSlots());
    CoLocationConstraint clc1=new CoLocationConstraint();
    CoLocationConstraint clc2=new CoLocationConstraint();
    CoLocationConstraint clc3=new CoLocationConstraint();
    CoLocationConstraint clc4=new CoLocationConstraint();
    SlotSharingGroup shareGroup=new SlotSharingGroup();
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,0,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,2,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,1,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,3,4),shareGroup));
    AllocatedSlot s21=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,0,4),shareGroup,clc1));
    AllocatedSlot s22=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,2,4),shareGroup,clc2));
    AllocatedSlot s23=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,1,4),shareGroup,clc3));
    AllocatedSlot s24=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,3,4),shareGroup,clc4));
    AllocatedSlot s31=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,1,4),shareGroup,clc2));
    AllocatedSlot s32=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,2,4),shareGroup,clc3));
    AllocatedSlot s33=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,3,4),shareGroup,clc4));
    AllocatedSlot s34=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,0,4),shareGroup,clc1));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,0,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,1,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,2,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,3,4),shareGroup));
    assertEquals(s21.getInstance(),s34.getInstance());
    assertEquals(s22.getInstance(),s31.getInstance());
    assertEquals(s23.getInstance(),s32.getInstance());
    assertEquals(s24.getInstance(),s33.getInstance());
    assertEquals(4,scheduler.getNumberOfLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(12,scheduler.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
