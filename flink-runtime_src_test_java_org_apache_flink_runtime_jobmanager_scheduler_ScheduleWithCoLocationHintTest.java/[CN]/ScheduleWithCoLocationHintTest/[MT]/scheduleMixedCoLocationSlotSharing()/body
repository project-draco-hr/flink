{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jid3=new JobVertexID();
    JobVertexID jid4=new JobVertexID();
    Scheduler scheduler=new Scheduler(TestingUtils.directExecutionContext());
    scheduler.newInstanceAvailable(getRandomInstance(1));
    scheduler.newInstanceAvailable(getRandomInstance(1));
    scheduler.newInstanceAvailable(getRandomInstance(1));
    scheduler.newInstanceAvailable(getRandomInstance(1));
    assertEquals(4,scheduler.getNumberOfAvailableSlots());
    CoLocationGroup grp=new CoLocationGroup();
    CoLocationConstraint clc1=new CoLocationConstraint(grp);
    CoLocationConstraint clc2=new CoLocationConstraint(grp);
    CoLocationConstraint clc3=new CoLocationConstraint(grp);
    CoLocationConstraint clc4=new CoLocationConstraint(grp);
    SlotSharingGroup shareGroup=new SlotSharingGroup();
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,0,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,2,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,1,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid1,3,4),shareGroup));
    SimpleSlot s21=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,0,4),shareGroup,clc1));
    SimpleSlot s22=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,2,4),shareGroup,clc2));
    SimpleSlot s23=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,1,4),shareGroup,clc3));
    SimpleSlot s24=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid2,3,4),shareGroup,clc4));
    SimpleSlot s31=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,1,4),shareGroup,clc2));
    SimpleSlot s32=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,2,4),shareGroup,clc3));
    SimpleSlot s33=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,3,4),shareGroup,clc4));
    SimpleSlot s34=scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid3,0,4),shareGroup,clc1));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,0,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,1,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,2,4),shareGroup));
    scheduler.scheduleImmediately(new ScheduledUnit(getTestVertex(jid4,3,4),shareGroup));
    assertEquals(s21.getTaskManagerID(),s34.getTaskManagerID());
    assertEquals(s22.getTaskManagerID(),s31.getTaskManagerID());
    assertEquals(s23.getTaskManagerID(),s32.getTaskManagerID());
    assertEquals(s24.getTaskManagerID(),s33.getTaskManagerID());
    assertEquals(4,scheduler.getNumberOfLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(12,scheduler.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
