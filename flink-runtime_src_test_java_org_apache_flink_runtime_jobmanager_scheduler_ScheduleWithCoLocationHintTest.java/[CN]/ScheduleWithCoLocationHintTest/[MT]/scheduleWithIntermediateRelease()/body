{
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jid3=new JobVertexID();
    JobVertexID jid4=new JobVertexID();
    Scheduler scheduler=new Scheduler(TestingUtils.directExecutionContext());
    Instance i1=getRandomInstance(1);
    Instance i2=getRandomInstance(1);
    scheduler.newInstanceAvailable(i1);
    scheduler.newInstanceAvailable(i2);
    assertEquals(2,scheduler.getNumberOfAvailableSlots());
    SlotSharingGroup sharingGroup=new SlotSharingGroup();
    CoLocationConstraint c1=new CoLocationConstraint(new CoLocationGroup());
    SimpleSlot s1=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,1),sharingGroup,c1),false).get();
    SimpleSlot s2=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,1),sharingGroup,c1),false).get();
    SimpleSlot sSolo=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid4,0,1)),false).get();
    ResourceID taskManager=s1.getTaskManagerID();
    s1.releaseSlot();
    s2.releaseSlot();
    sSolo.releaseSlot();
    SimpleSlot sNew=scheduler.allocateSlot(new ScheduledUnit(getTestVertex(jid3,0,1),sharingGroup,c1),false).get();
    assertEquals(taskManager,sNew.getTaskManagerID());
    assertEquals(2,scheduler.getNumberOfLocalizedAssignments());
    assertEquals(0,scheduler.getNumberOfNonLocalizedAssignments());
    assertEquals(2,scheduler.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
