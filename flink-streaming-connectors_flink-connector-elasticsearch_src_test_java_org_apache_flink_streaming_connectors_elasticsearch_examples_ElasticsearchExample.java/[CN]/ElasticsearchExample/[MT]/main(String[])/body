{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStreamSource<String> source=env.addSource(new SourceFunction<String>(){
    private static final long serialVersionUID=1L;
    private volatile boolean running=true;
    @Override public void run(    SourceContext<String> ctx) throws Exception {
      for (int i=0; i < 20 && running; i++) {
        ctx.collect("message #" + i);
      }
    }
    @Override public void cancel(){
      running=false;
    }
  }
);
  Map<String,String> config=new HashMap<>();
  config.put(ElasticsearchSink.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS,"1");
  source.addSink(new ElasticsearchSink<>(config,new IndexRequestBuilder<String>(){
    @Override public IndexRequest createIndexRequest(    String element,    RuntimeContext ctx){
      Map<String,Object> json=new HashMap<>();
      json.put("data",element);
      return Requests.indexRequest().index("my-index").type("my-type").source(json);
    }
  }
));
  env.execute("Elasticsearch Example");
}
