{
  final FiniteDuration timeout=AkkaUtils.getTimeout(configuration);
  ActorSystem actorSystem;
  try {
    actorSystem=JobClient.startJobClientActorSystem(configuration);
  }
 catch (  Exception e) {
    throw new Exception("Could start client actor system.",e);
  }
  ActorRef jobManager;
  try {
    jobManager=JobManager.getJobManagerRemoteReference(jobManagerAddress,actorSystem,timeout);
  }
 catch (  Exception e) {
    throw new Exception("Error getting the remote actor reference for the job manager.",e);
  }
  Future<Object> response;
  try {
    ActorGateway jobManagerGateway=JobManager.getJobManagerGateway(jobManager,timeout);
    response=jobManagerGateway.ask(new RequestAccumulatorResults(jobID),timeout);
  }
 catch (  Exception e) {
    throw new Exception("Failed to query the job manager gateway for accumulators.",e);
  }
  try {
    Object result=Await.result(response,timeout);
    if (result instanceof AccumulatorResultsFound) {
      Map<String,SerializedValue<Object>> serializedAccumulators=((AccumulatorResultsFound)result).result();
      return AccumulatorHelper.deserializeAccumulators(serializedAccumulators,loader);
    }
 else     if (result instanceof AccumulatorResultsErroneous) {
      throw ((AccumulatorResultsErroneous)result).cause();
    }
 else {
      LOG.warn("Failed to fetch accumulators for job {}.",jobID);
    }
  }
 catch (  Exception e) {
    LOG.error("Error occurred while fetching accumulators for {}",jobID,e);
  }
  return Collections.emptyMap();
}
