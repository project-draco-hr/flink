{
  this.lastJobId=jobGraph.getJobID();
  LOG.info("JobManager actor system address is " + jobManagerAddress);
  LOG.info("Starting client actor system");
  final ActorSystem actorSystem;
  try {
    actorSystem=JobClient.startJobClientActorSystem(configuration);
  }
 catch (  Exception e) {
    throw new ProgramInvocationException("Could start client actor system.",e);
  }
  LOG.info("Looking up JobManager");
  ActorRef jobManager;
  try {
    jobManager=JobManager.getJobManagerRemoteReference(jobManagerAddress,actorSystem,configuration);
  }
 catch (  IOException e) {
    throw new ProgramInvocationException("Failed to resolve JobManager",e);
  }
  LOG.info("JobManager runs at " + jobManager.path());
  FiniteDuration timeout=AkkaUtils.getTimeout(configuration);
  LOG.info("Communication between client and JobManager will have a timeout of " + timeout);
  LOG.info("Checking and uploading JAR files");
  try {
    JobClient.uploadJarFiles(jobGraph,jobManager,timeout);
  }
 catch (  IOException e) {
    throw new ProgramInvocationException("Could not upload the program's JAR files to the JobManager.",e);
  }
  try {
    if (wait) {
      SerializedJobExecutionResult result=JobClient.submitJobAndWait(actorSystem,jobManager,jobGraph,timeout,printStatusDuringExecution);
      try {
        return result.toJobExecutionResult(this.userCodeClassLoader);
      }
 catch (      Exception e) {
        throw new ProgramInvocationException("Failed to deserialize the accumulator result after the job execution",e);
      }
    }
 else {
      JobClient.submitJobDetached(jobManager,jobGraph,timeout);
      return new JobSubmissionResult(jobGraph.getJobID());
    }
  }
 catch (  JobExecutionException e) {
    throw new ProgramInvocationException("The program execution failed: " + e.getMessage(),e);
  }
catch (  Exception e) {
    throw new ProgramInvocationException("Exception during program execution.",e);
  }
 finally {
    actorSystem.shutdown();
    actorSystem.awaitTermination();
  }
}
