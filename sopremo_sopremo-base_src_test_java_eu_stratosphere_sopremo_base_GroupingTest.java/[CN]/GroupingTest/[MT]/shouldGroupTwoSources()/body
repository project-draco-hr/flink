{
  final SopremoTestPlan sopremoPlan=new SopremoTestPlan(2,1);
  sopremoPlan.getEvaluationContext().getFunctionRegistry().put(CoreFunctions.class);
  final BatchAggregationExpression batch=new BatchAggregationExpression();
  final ObjectCreation transformation=new ObjectCreation();
  transformation.addMapping("dept",new PathExpression(new InputSelection(0),batch.add(CoreFunctions.FIRST),new ObjectAccess("dept")));
  transformation.addMapping("deptName",new PathExpression(new InputSelection(1),new AggregationExpression(CoreFunctions.FIRST,new ObjectAccess("name"))));
  transformation.addMapping("emps",new PathExpression(new InputSelection(0),batch.add(CoreFunctions.SORT,JsonUtil.createPath("id"))));
  transformation.addMapping("numEmps",new PathExpression(new InputSelection(0),batch.add(CoreFunctions.COUNT)));
  final Grouping aggregation=new Grouping().withResultProjection(transformation);
  aggregation.setInputs(sopremoPlan.getInputOperators(0,2));
  aggregation.setGroupingKey(0,createPath("dept"));
  aggregation.setGroupingKey(1,createPath("did"));
  sopremoPlan.getOutputOperator(0).setInputs(aggregation);
  sopremoPlan.getInput(0).addObject("id",1,"dept",1,"income",12000).addObject("id",2,"dept",1,"income",13000).addObject("id",3,"dept",2,"income",15000).addObject("id",4,"dept",1,"income",10000).addObject("id",5,"dept",3,"income",8000).addObject("id",6,"dept",2,"income",5000).addObject("id",7,"dept",1,"income",24000);
  sopremoPlan.getInput(1).addObject("did",1,"name","development").addObject("did",2,"name","marketing").addObject("did",3,"name","sales");
  sopremoPlan.getExpectedOutput(0).addObject("dept",1,"deptName","development","emps",new int[]{1,2,4,7},"numEmps",4).addObject("dept",2,"deptName","marketing","emps",new int[]{3,6},"numEmps",2).addObject("dept",3,"deptName","sales","emps",new int[]{5},"numEmps",1);
  sopremoPlan.run();
}
