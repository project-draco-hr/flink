{
  final SopremoTestPlan sopremoPlan=new SopremoTestPlan(2,1);
  sopremoPlan.getEvaluationContext().getFunctionRegistry().register(BuiltinFunctions.class);
  final BatchAggregationExpression batch=new BatchAggregationExpression();
  final ObjectCreation transformation=new ObjectCreation();
  transformation.addMapping("dept",new PathExpression(new InputSelection(0),batch.add(BuiltinFunctions.FIRST),new ObjectAccess("dept")));
  transformation.addMapping("deptName",createPath("1","[0]","name"));
  transformation.addMapping("emps",new PathExpression(new InputSelection(0),new AggregationExpression(BuiltinFunctions.SORT,new ObjectAccess("id"))));
  transformation.addMapping("numEmps",new PathExpression(new InputSelection(0),batch.add(BuiltinFunctions.COUNT)));
  final Grouping aggregation=new Grouping(transformation,sopremoPlan.getInputOperators(0,2));
  aggregation.setKeyProjection(0,createPath("dept"));
  aggregation.setKeyProjection(1,createPath("did"));
  sopremoPlan.getOutputOperator(0).setInputs(aggregation);
  sopremoPlan.getInput(0).add(createPactJsonObject("id",1,"dept",1,"income",12000)).add(createPactJsonObject("id",2,"dept",1,"income",13000)).add(createPactJsonObject("id",3,"dept",2,"income",15000)).add(createPactJsonObject("id",4,"dept",1,"income",10000)).add(createPactJsonObject("id",5,"dept",3,"income",8000)).add(createPactJsonObject("id",6,"dept",2,"income",5000)).add(createPactJsonObject("id",7,"dept",1,"income",24000));
  sopremoPlan.getInput(1).add(createPactJsonObject("did",1,"name","development")).add(createPactJsonObject("did",2,"name","marketing")).add(createPactJsonObject("did",3,"name","sales"));
  sopremoPlan.getExpectedOutput(0).add(createPactJsonObject("dept",1,"deptName","development","emps",new int[]{1,2,4,7},"numEmps",4)).add(createPactJsonObject("dept",2,"deptName","marketing","emps",new int[]{3,6},"numEmps",2)).add(createPactJsonObject("dept",3,"deptName","sales","emps",new int[]{5},"numEmps",1));
  sopremoPlan.run();
}
