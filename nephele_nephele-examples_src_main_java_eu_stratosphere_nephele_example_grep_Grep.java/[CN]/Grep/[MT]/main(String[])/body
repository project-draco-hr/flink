{
  JobGraph jobGraph=new JobGraph("Grep Example Job");
  JobFileInputVertex input=new JobFileInputVertex("Input 1",jobGraph);
  input.setFileInputClass(FileLineReader.class);
  input.setFilePath(new Path("file:///home/ec2-user/test.txt"));
  input.setInstanceType("t1.micro");
  JobTaskVertex task1=new JobTaskVertex("Task 1",jobGraph);
  task1.setTaskClass(GrepTask.class);
  task1.setInstanceType("t1.micro");
  JobFileOutputVertex output=new JobFileOutputVertex("Output 1",jobGraph);
  output.setFileOutputClass(FileLineWriter.class);
  output.setFilePath(new Path("file:///tmp/"));
  output.setInstanceType("t1.micro");
  try {
    input.connectTo(task1,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
    task1.connectTo(output,ChannelType.NETWORK,CompressionLevel.NO_COMPRESSION);
  }
 catch (  JobGraphDefinitionException e) {
    e.printStackTrace();
  }
  final File jarFile=new File("/tmp/broadcastJob.jar");
  final JarFileCreator jarFileCreator=new JarFileCreator(jarFile);
  jarFileCreator.addClass(GrepTask.class);
  try {
    jarFileCreator.createJarFile();
    System.out.println("done creating!!");
  }
 catch (  IOException ioe) {
    if (jarFile.exists()) {
      jarFile.delete();
    }
    System.out.println("ERROR creating jar");
    return;
  }
  jobGraph.addJar(new Path("file://" + jarFile.getAbsolutePath()));
  Configuration conf=new Configuration();
  conf.setString("ec2.image.id","ami-ea5b6b9e");
  conf.setString("job.cloud.username","noname");
  conf.setString("job.cloud.awsaccessid","AKIAJYQJNI7QH227NDQA");
  conf.setString("job.cloud.awssecretkey","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");
  conf.setString("job.cloud.sshkeypair","caspeu");
  InetSocketAddress jobmanager=new InetSocketAddress("127.0.0.1",6123);
  try {
    final JobClient jobClient=new JobClient(jobGraph,conf,jobmanager);
    System.out.println("submitting");
    jobClient.submitJobAndWait();
    System.out.println("done.");
  }
 catch (  Exception e) {
    System.out.println(e);
  }
  if (jarFile.exists()) {
    jarFile.delete();
  }
}
