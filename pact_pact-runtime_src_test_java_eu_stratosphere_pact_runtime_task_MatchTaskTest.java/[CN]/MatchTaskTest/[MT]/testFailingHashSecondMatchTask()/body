{
  int keyCnt1=20;
  int valCnt1=20;
  int keyCnt2=20;
  int valCnt2=20;
  super.addInput(new UniformPactRecordGenerator(keyCnt1,valCnt1,false));
  super.addInput(new UniformPactRecordGenerator(keyCnt2,valCnt2,false));
  super.addOutput(this.outList);
  MatchDriver<PactRecord,PactRecord,PactRecord> testTask=new MatchDriver<PactRecord,PactRecord,PactRecord>();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.HYBRIDHASH_SECOND);
  super.getTaskConfig().setMemorySize(6 * 1024 * 1024);
  super.getTaskConfig().setNumFilehandles(4);
  final int[] keyPos1=new int[]{0};
  final int[] keyPos2=new int[]{0};
  @SuppressWarnings("unchecked") final Class<? extends Key>[] keyClasses=(Class<? extends Key>[])new Class[]{PactInteger.class};
  addInputComparator(new PactRecordComparator(keyPos1,keyClasses));
  addInputComparator(new PactRecordComparator(keyPos2,keyClasses));
  boolean stubFailed=false;
  try {
    testDriver(testTask,MockFailingMatchStub.class);
  }
 catch (  Exception e) {
    stubFailed=true;
  }
  Assert.assertTrue("Stub exception was not forwarded.",stubFailed);
  this.outList.clear();
}
