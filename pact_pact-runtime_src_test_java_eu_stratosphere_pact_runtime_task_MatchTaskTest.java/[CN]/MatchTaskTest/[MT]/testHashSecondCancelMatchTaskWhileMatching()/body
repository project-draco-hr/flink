{
  int keyCnt=20;
  int valCnt=20;
  super.initEnvironment(6 * 1024 * 1024);
  super.addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false),1);
  super.addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false),2);
  super.addOutput(new NirvanaOutputList());
  final MatchTask testTask=new MatchTask();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.HYBRIDHASH_SECOND);
  super.getTaskConfig().setMemorySize(6 * 1024 * 1024);
  super.getTaskConfig().setNumFilehandles(4);
  super.getTaskConfig().setLocalStrategyKeyTypes(0,new int[]{0});
  super.getTaskConfig().setLocalStrategyKeyTypes(1,new int[]{0});
  super.getTaskConfig().setLocalStrategyKeyTypes(new Class[]{PactInteger.class});
  super.registerTask(testTask,MockDelayingMatchStub.class);
  Thread taskRunner=new Thread(){
    @Override public void run(){
      try {
        testTask.invoke();
      }
 catch (      Exception ie) {
        ie.printStackTrace();
        Assert.fail("Task threw exception although it was properly canceled");
      }
    }
  }
;
  taskRunner.start();
  TaskCancelThread tct=new TaskCancelThread(1,taskRunner,testTask);
  tct.start();
  try {
    tct.join();
    taskRunner.join();
  }
 catch (  InterruptedException ie) {
    Assert.fail("Joining threads failed");
  }
}
