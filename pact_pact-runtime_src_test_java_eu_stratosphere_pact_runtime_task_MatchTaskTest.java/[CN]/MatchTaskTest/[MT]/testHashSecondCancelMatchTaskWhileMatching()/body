{
  int keyCnt=20;
  int valCnt=20;
  super.addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false));
  super.addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false));
  super.addOutput(new NirvanaOutputList());
  final MatchDriver<PactRecord,PactRecord,PactRecord> testTask=new MatchDriver<PactRecord,PactRecord,PactRecord>();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.HYBRIDHASH_SECOND);
  super.getTaskConfig().setMemorySize(6 * 1024 * 1024);
  super.getTaskConfig().setNumFilehandles(4);
  final int[] keyPos1=new int[]{0};
  final int[] keyPos2=new int[]{0};
  @SuppressWarnings("unchecked") final Class<? extends Key>[] keyClasses=(Class<? extends Key>[])new Class[]{PactInteger.class};
  addInputComparator(new PactRecordComparator(keyPos1,keyClasses));
  addInputComparator(new PactRecordComparator(keyPos2,keyClasses));
  Thread taskRunner=new Thread(){
    @Override public void run(){
      try {
        testDriver(testTask,MockDelayingMatchStub.class);
      }
 catch (      Exception ie) {
        ie.printStackTrace();
        Assert.fail("Task threw exception although it was properly canceled");
      }
    }
  }
;
  taskRunner.start();
  TaskCancelThread tct=new TaskCancelThread(1,taskRunner,this);
  tct.start();
  try {
    tct.join();
    taskRunner.join();
  }
 catch (  InterruptedException ie) {
    Assert.fail("Joining threads failed");
  }
}
