{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getTupleDataSet(env);
      DataSet<Tuple3<Integer,Long,String>> filterDs=ds.filter(new FilterFunction<Tuple3<Integer,Long,String>>(){
        private static final long serialVersionUID=1L;
        @Override public boolean filter(        Tuple3<Integer,Long,String> value) throws Exception {
          return false;
        }
      }
);
      filterDs.writeAsCsv(resultPath);
      env.execute();
      return "\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getTupleDataSet(env);
    DataSet<Tuple3<Integer,Long,String>> filterDs=ds.filter(new FilterFunction<Tuple3<Integer,Long,String>>(){
      private static final long serialVersionUID=1L;
      @Override public boolean filter(      Tuple3<Integer,Long,String> value) throws Exception {
        return true;
      }
    }
);
    filterDs.writeAsCsv(resultPath);
    env.execute();
    return "1,10,Hi\n" + "-1,11,Hello\n" + "10,12,Hello world\n"+ "-10,13,Hello world, how are you?\n"+ "100,14,I am fine.\n"+ "1000,15,Luke Skywalker\n"+ "-1000,16,Random comment\n"+ "-100,17,LOL\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getTupleDataSet(env);
  DataSet<Tuple3<Integer,Long,String>> filterDs=ds.filter(new FilterFunction<Tuple3<Integer,Long,String>>(){
    private static final long serialVersionUID=1L;
    @Override public boolean filter(    Tuple3<Integer,Long,String> value) throws Exception {
      return value.f2.contains("world");
    }
  }
);
  filterDs.writeAsCsv(resultPath);
  env.execute();
  return "10,12,Hello world\n" + "-10,13,Hello world, how are you?\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getTupleDataSet(env);
DataSet<Tuple3<Integer,Long,String>> filterDs=ds.filter(new FilterFunction<Tuple3<Integer,Long,String>>(){
  private static final long serialVersionUID=1L;
  @Override public boolean filter(  Tuple3<Integer,Long,String> value) throws Exception {
    return value.f0 < -1;
  }
}
);
filterDs.writeAsCsv(resultPath);
env.execute();
return "-10,13,Hello world, how are you?\n" + "-1000,16,Random comment\n" + "-100,17,LOL\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<String> ds=CollectionDataSets.getStringDataSet(env);
DataSet<String> filterDs=ds.filter(new FilterFunction<String>(){
private static final long serialVersionUID=1L;
@Override public boolean filter(String value) throws Exception {
  return value.startsWith("H");
}
}
);
filterDs.writeAsText(resultPath);
env.execute();
return "Hi\n" + "Hello\n" + "Hello world\n"+ "Hello world, how are you?\n";
}
case 6:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
DataSet<CustomType> ds=CollectionDataSets.getCustomTypeDataSet(env);
DataSet<CustomType> filterDs=ds.filter(new FilterFunction<CustomType>(){
private static final long serialVersionUID=1L;
@Override public boolean filter(CustomType value) throws Exception {
return value.myString.contains("a");
}
}
);
filterDs.writeAsText(resultPath);
env.execute();
return "-10,13,Hello world, how are you?\n" + "100,14,I am fine.\n" + "1000,15,Luke Skywalker\n"+ "-1000,16,Random comment\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
