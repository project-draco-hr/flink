{
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String dataPointInput=(args.length > 1 ? args[1] : "");
  String clusterInput=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  FileDataSourceContract<PactInteger,CoordVector> dataPoints=new FileDataSourceContract<PactInteger,CoordVector>(PointInFormat.class,dataPointInput,"Data Points");
  dataPoints.setParameter(PointInFormat.RECORD_DELIMITER,"\n");
  dataPoints.setDegreeOfParallelism(noSubTasks);
  dataPoints.setOutputContract(UniqueKey.class);
  FileDataSourceContract<PactInteger,CoordVector> clusterPoints=new FileDataSourceContract<PactInteger,CoordVector>(PointInFormat.class,clusterInput,"Centers");
  clusterPoints.setParameter(PointInFormat.RECORD_DELIMITER,"\n");
  clusterPoints.setDegreeOfParallelism(1);
  clusterPoints.setOutputContract(UniqueKey.class);
  CrossContract<PactInteger,CoordVector,PactInteger,CoordVector,PactInteger,Distance> computeDistance=new CrossContract<PactInteger,CoordVector,PactInteger,CoordVector,PactInteger,Distance>(ComputeDistance.class,"Compute Distances");
  computeDistance.setDegreeOfParallelism(noSubTasks);
  computeDistance.getCompilerHints().setAvgBytesPerRecord(48);
  ReduceContract<PactInteger,Distance,PactInteger,CoordVectorCountSum> findNearestClusterCenters=new ReduceContract<PactInteger,Distance,PactInteger,CoordVectorCountSum>(FindNearestCenter.class,"Find Nearest Centers");
  findNearestClusterCenters.setDegreeOfParallelism(noSubTasks);
  findNearestClusterCenters.getCompilerHints().setAvgBytesPerRecord(48);
  ReduceContract<PactInteger,CoordVectorCountSum,PactInteger,CoordVector> recomputeClusterCenter=new ReduceContract<PactInteger,CoordVectorCountSum,PactInteger,CoordVector>(RecomputeClusterCenter.class,"Recompute Center Positions");
  recomputeClusterCenter.setDegreeOfParallelism(noSubTasks);
  recomputeClusterCenter.getCompilerHints().setAvgBytesPerRecord(36);
  FileDataSinkContract<PactInteger,CoordVector> newClusterPoints=new FileDataSinkContract<PactInteger,CoordVector>(PointOutFormat.class,output,"New Centers");
  newClusterPoints.setDegreeOfParallelism(noSubTasks);
  newClusterPoints.setInput(recomputeClusterCenter);
  recomputeClusterCenter.setInput(findNearestClusterCenters);
  findNearestClusterCenters.setInput(computeDistance);
  computeDistance.setFirstInput(dataPoints);
  computeDistance.setSecondInput(clusterPoints);
  return new Plan(newClusterPoints,"KMeans Iteration");
}
