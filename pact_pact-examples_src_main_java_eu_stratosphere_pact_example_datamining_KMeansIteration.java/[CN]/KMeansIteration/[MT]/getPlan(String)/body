{
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String dataPointInput=(args.length > 1 ? args[1] : "");
  String clusterInput=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  FileDataSource dataPoints=new FileDataSource(PointInFormat.class,dataPointInput,"Data Points");
  dataPoints.setParameter(DelimitedInputFormat.RECORD_DELIMITER,"\n");
  dataPoints.getCompilerHints().setUniqueField(new FieldSet(0));
  FileDataSource clusterPoints=new FileDataSource(PointInFormat.class,clusterInput,"Centers");
  clusterPoints.setParameter(DelimitedInputFormat.RECORD_DELIMITER,"\n");
  clusterPoints.setDegreeOfParallelism(1);
  clusterPoints.getCompilerHints().setUniqueField(new FieldSet(0));
  CrossContract computeDistance=CrossContract.builder(ComputeDistance.class).input1(dataPoints).input2(clusterPoints).name("Compute Distances").build();
  computeDistance.getCompilerHints().setAvgBytesPerRecord(48);
  ReduceContract findNearestClusterCenters=new ReduceContract.Builder(FindNearestCenter.class,PactInteger.class,0).input(computeDistance).name("Find Nearest Centers").build();
  findNearestClusterCenters.getCompilerHints().setAvgBytesPerRecord(48);
  ReduceContract recomputeClusterCenter=new ReduceContract.Builder(RecomputeClusterCenter.class,PactInteger.class,0).input(findNearestClusterCenters).name("Recompute Center Positions").build();
  recomputeClusterCenter.getCompilerHints().setAvgBytesPerRecord(36);
  FileDataSink newClusterPoints=new FileDataSink(PointOutFormat.class,output,recomputeClusterCenter,"New Center Positions");
  Plan plan=new Plan(newClusterPoints,"KMeans Iteration");
  plan.setDefaultParallelism(noSubTasks);
  return plan;
}
