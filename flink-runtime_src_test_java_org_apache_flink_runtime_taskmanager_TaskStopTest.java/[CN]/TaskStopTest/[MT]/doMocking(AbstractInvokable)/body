{
  TaskInfo taskInfoMock=mock(TaskInfo.class);
  when(taskInfoMock.getTaskNameWithSubtasks()).thenReturn("dummyName");
  TaskDeploymentDescriptor tddMock=mock(TaskDeploymentDescriptor.class);
  when(tddMock.getTaskInfo()).thenReturn(taskInfoMock);
  when(tddMock.getJobID()).thenReturn(mock(JobID.class));
  when(tddMock.getVertexID()).thenReturn(mock(JobVertexID.class));
  when(tddMock.getExecutionId()).thenReturn(mock(ExecutionAttemptID.class));
  when(tddMock.getJobConfiguration()).thenReturn(mock(Configuration.class));
  when(tddMock.getTaskConfiguration()).thenReturn(mock(Configuration.class));
  when(tddMock.getSerializedExecutionConfig()).thenReturn(mock(SerializedValue.class));
  when(tddMock.getInvokableClassName()).thenReturn("className");
  task=new Task(tddMock,mock(MemoryManager.class),mock(IOManager.class),mock(NetworkEnvironment.class),mock(BroadcastVariableManager.class),mock(ActorGateway.class),mock(ActorGateway.class),mock(FiniteDuration.class),mock(LibraryCacheManager.class),mock(FileCache.class),mock(TaskManagerRuntimeInfo.class),mock(TaskMetricGroup.class));
  Field f=task.getClass().getDeclaredField("invokable");
  f.setAccessible(true);
  f.set(task,taskMock);
  Field f2=task.getClass().getDeclaredField("executionState");
  f2.setAccessible(true);
  f2.set(task,ExecutionState.RUNNING);
}
