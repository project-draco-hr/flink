{
  final JobVertex sender=new JobVertex("Sender");
  sender.setInvokableClass(SlowBufferSender.class);
  sender.setParallelism(PARALLELISM);
  final JobVertex receiver=new JobVertex("Receiver");
  receiver.setInvokableClass(SingleBufferReceiver.class);
  receiver.setParallelism(PARALLELISM);
  receiver.connectNewDataSetAsInput(sender,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);
  final JobGraph jobGraph=new JobGraph("Partial Consume of Pipelined Result",sender,receiver);
  final SlotSharingGroup slotSharingGroup=new SlotSharingGroup(sender.getID(),receiver.getID());
  sender.setSlotSharingGroup(slotSharingGroup);
  receiver.setSlotSharingGroup(slotSharingGroup);
  JobClient.submitJobAndWait(jobClient,flink.getLeaderGateway(TestingUtils.TESTING_DURATION()),jobGraph,TestingUtils.TESTING_DURATION(),false,this.getClass().getClassLoader());
}
