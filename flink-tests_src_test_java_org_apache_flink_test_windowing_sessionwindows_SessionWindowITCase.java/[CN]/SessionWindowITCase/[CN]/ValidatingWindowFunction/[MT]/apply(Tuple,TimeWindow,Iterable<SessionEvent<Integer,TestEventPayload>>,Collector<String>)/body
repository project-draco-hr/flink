{
  if (OUTPUT_RESULTS_AS_STRING) {
    output.collect("--- window triggered ---");
  }
  List<SessionEvent<Integer,TestEventPayload>> sessionEvents=new ArrayList<>();
  for (  SessionEvent<Integer,TestEventPayload> evt : input) {
    if (OUTPUT_RESULTS_AS_STRING) {
      output.collect(evt.toString());
    }
    sessionEvents.add(evt);
  }
  BitSet onTimeBits=new BitSet(EVENTS_PER_SESSION);
  BitSet lateWithingBits=new BitSet(LATE_EVENTS_PER_SESSION);
  int onTimeCount=0;
  int lateCount=0;
  for (  SessionEvent<Integer,TestEventPayload> evt : sessionEvents) {
    if (SessionEventGeneratorImpl.Timing.TIMELY.equals(evt.getEventValue().getTiming())) {
      ++onTimeCount;
      onTimeBits.set(evt.getEventValue().getEventId());
    }
 else     if (SessionEventGeneratorImpl.Timing.IN_LATENESS.equals(evt.getEventValue().getTiming())) {
      ++lateCount;
      lateWithingBits.set(evt.getEventValue().getEventId() - EVENTS_PER_SESSION);
    }
 else {
      Assert.fail("Illegal event type in window " + timeWindow + ": "+ evt);
    }
  }
  getRuntimeContext().getIntCounter(SESSION_COUNTER_ON_TIME_KEY).add(onTimeCount);
  getRuntimeContext().getIntCounter(SESSION_COUNTER_LATE_KEY).add(lateCount);
  if (sessionEvents.size() >= EVENTS_PER_SESSION) {
    Assert.assertEquals(onTimeCount,EVENTS_PER_SESSION);
    Assert.assertEquals(onTimeBits.cardinality(),onTimeCount);
    Assert.assertEquals(lateWithingBits.cardinality(),lateCount);
  }
 else {
    Assert.fail("Event count for session window " + timeWindow + " is too low: "+ sessionEvents);
  }
}
