{
  LongRandomGenerator randomGenerator=new LongRandomGenerator(RANDOM_SEED);
  Set<Integer> keys=new HashSet<>();
  for (int i=0; i < NUMBER_OF_DIFFERENT_KEYS; ++i) {
    keys.add(i);
  }
  GeneratorConfiguration generatorConfiguration=GeneratorConfiguration.of(ALLOWED_LATENESS_MS,LATE_EVENTS_PER_SESSION,MAX_DROPPED_EVENTS_PER_SESSION,MAX_ADDITIONAL_SESSION_GAP_MS);
  GeneratorEventFactory<Integer,SessionEvent<Integer,TestEventPayload>> generatorEventFactory=new GeneratorEventFactory<Integer,SessionEvent<Integer,TestEventPayload>>(){
    @Override public SessionEvent<Integer,TestEventPayload> createEvent(    Integer key,    int sessionId,    int eventId,    long eventTimestamp,    long globalWatermark,    SessionEventGeneratorImpl.Timing timing){
      return SessionEvent.of(key,TestEventPayload.of(globalWatermark,sessionId,eventId,timing),eventTimestamp);
    }
  }
;
  EventGeneratorFactory<Integer,SessionEvent<Integer,TestEventPayload>> eventGeneratorFactory=new EventGeneratorFactory<>(generatorConfiguration,generatorEventFactory,MAX_SESSION_EVENT_GAP_MS,EVENTS_PER_SESSION,randomGenerator);
  return new ParallelSessionsEventGenerator<>(keys,eventGeneratorFactory,PARALLEL_SESSIONS,NUMBER_OF_SESSIONS,randomGenerator);
}
