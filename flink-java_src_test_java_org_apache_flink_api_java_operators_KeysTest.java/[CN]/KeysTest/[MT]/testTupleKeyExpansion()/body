{
  TupleTypeInfo<Tuple3<String,Tuple3<String,String,String>,String>> typeInfo=new TupleTypeInfo<Tuple3<String,Tuple3<String,String,String>,String>>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);
  ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>> fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new int[]{0},typeInfo);
  Assert.assertArrayEquals(new int[]{0},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new int[]{1},typeInfo);
  Assert.assertArrayEquals(new int[]{1,2,3},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new int[]{2},typeInfo);
  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new int[]{0,1,2},typeInfo);
  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(null,typeInfo,true);
  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new int[]{0,1,1,1,2},typeInfo);
  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new String[]{"*"},typeInfo);
  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new String[]{"f2"},typeInfo);
  Assert.assertArrayEquals(new int[]{4},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new String[]{"f0","f1.f0","f1.f1","f1.f2","f2"},typeInfo);
  Assert.assertArrayEquals(new int[]{0,1,2,3,4},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new String[]{"f0","f1.f0","f1.f1","f2"},typeInfo);
  Assert.assertArrayEquals(new int[]{0,1,2,4},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new String[]{"f2","f0"},typeInfo);
  Assert.assertArrayEquals(new int[]{4,0},fpk.computeLogicalKeyPositions());
  fpk=new ExpressionKeys<Tuple3<String,Tuple3<String,String,String>,String>>(new String[]{"f2","f2","f2","f0"},typeInfo);
  Assert.assertArrayEquals(new int[]{4,0},fpk.computeLogicalKeyPositions());
  TupleTypeInfo<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexTypeInfo=new TupleTypeInfo<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>>(BasicTypeInfo.STRING_TYPE_INFO,new TupleTypeInfo<Tuple3<Tuple3<String,String,String>,String,String>>(new TupleTypeInfo<Tuple3<String,String,String>>(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO),BasicTypeInfo.STRING_TYPE_INFO);
  ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>> complexFpk=new ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>>(new int[]{0},complexTypeInfo);
  Assert.assertArrayEquals(new int[]{0},complexFpk.computeLogicalKeyPositions());
  complexFpk=new ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>>(new int[]{0,1,2},complexTypeInfo);
  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());
  complexFpk=new ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>>(new String[]{"*"},complexTypeInfo);
  Assert.assertArrayEquals(new int[]{0,1,2,3,4,5,6},complexFpk.computeLogicalKeyPositions());
  complexFpk=new ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>>(new String[]{"f1.f0.*"},complexTypeInfo);
  Assert.assertArrayEquals(new int[]{1,2,3},complexFpk.computeLogicalKeyPositions());
  complexFpk=new ExpressionKeys<Tuple3<String,Tuple3<Tuple3<String,String,String>,String,String>,String>>(new String[]{"f2"},complexTypeInfo);
  Assert.assertArrayEquals(new int[]{6},complexFpk.computeLogicalKeyPositions());
}
