{
  TypeInformation<PojoWithMultiplePojos> ti=TypeExtractor.getForClass(PojoWithMultiplePojos.class);
  ExpressionKeys<PojoWithMultiplePojos> ek;
  ek=new ExpressionKeys<PojoWithMultiplePojos>(new String[]{"*"},ti);
  Assert.assertArrayEquals(new int[]{0,1,2,3,4},ek.computeLogicalKeyPositions());
  ek=new ExpressionKeys<PojoWithMultiplePojos>(new String[]{"p1.*"},ti);
  Assert.assertArrayEquals(new int[]{1,2},ek.computeLogicalKeyPositions());
  ek=new ExpressionKeys<PojoWithMultiplePojos>(new String[]{"p2.*"},ti);
  Assert.assertArrayEquals(new int[]{3,4},ek.computeLogicalKeyPositions());
  ek=new ExpressionKeys<PojoWithMultiplePojos>(new String[]{"p1"},ti);
  Assert.assertArrayEquals(new int[]{1,2},ek.computeLogicalKeyPositions());
  ek=new ExpressionKeys<PojoWithMultiplePojos>(new String[]{"p2"},ti);
  Assert.assertArrayEquals(new int[]{3,4},ek.computeLogicalKeyPositions());
  ek=new ExpressionKeys<PojoWithMultiplePojos>(new String[]{"i0"},ti);
  Assert.assertArrayEquals(new int[]{0},ek.computeLogicalKeyPositions());
}
