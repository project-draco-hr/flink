{
  try {
    final FieldList keysLeft=new FieldList(1);
    final FieldList keysRight=new FieldList(3);
    final Partitioner<Object> part=new Partitioner<Object>(){
      @Override public int partition(      Object key,      int numPartitions){
        return 0;
      }
    }
;
    final Partitioner<Object> part2=new Partitioner<Object>(){
      @Override public int partition(      Object key,      int numPartitions){
        return 0;
      }
    }
;
    SortMergeInnerJoinDescriptor descr=new SortMergeInnerJoinDescriptor(keysLeft,keysRight);
{
      RequestedGlobalProperties reqLeft=new RequestedGlobalProperties();
      reqLeft.setAnyPartitioning(keysLeft);
      RequestedGlobalProperties reqRight=new RequestedGlobalProperties();
      reqRight.setAnyPartitioning(keysRight);
      GlobalProperties propsLeft=new GlobalProperties();
      propsLeft.setHashPartitioned(keysLeft);
      GlobalProperties propsRight=new GlobalProperties();
      propsRight.setCustomPartitioned(keysRight,part);
      assertFalse(descr.areCompatible(reqLeft,reqRight,propsLeft,propsRight));
    }
{
      RequestedGlobalProperties reqLeft=new RequestedGlobalProperties();
      reqLeft.setAnyPartitioning(keysLeft);
      RequestedGlobalProperties reqRight=new RequestedGlobalProperties();
      reqRight.setAnyPartitioning(keysRight);
      GlobalProperties propsLeft=new GlobalProperties();
      propsLeft.setCustomPartitioned(keysLeft,part);
      GlobalProperties propsRight=new GlobalProperties();
      propsRight.setCustomPartitioned(keysRight,part2);
      assertFalse(descr.areCompatible(reqLeft,reqRight,propsLeft,propsRight));
    }
    TestDistribution dist1=new TestDistribution(1);
    TestDistribution dist2=new TestDistribution(1);
{
      Ordering ordering1=new Ordering();
      for (      int field : keysLeft) {
        ordering1.appendOrdering(field,null,Order.ASCENDING);
      }
      Ordering ordering2=new Ordering();
      for (      int field : keysRight) {
        ordering1.appendOrdering(field,null,Order.ASCENDING);
        ordering2.appendOrdering(field,null,Order.ASCENDING);
      }
      RequestedGlobalProperties reqLeft=new RequestedGlobalProperties();
      reqLeft.setRangePartitioned(ordering1,dist1);
      RequestedGlobalProperties reqRight=new RequestedGlobalProperties();
      reqRight.setRangePartitioned(ordering2,dist2);
      GlobalProperties propsLeft=new GlobalProperties();
      propsLeft.setRangePartitioned(ordering1,dist1);
      GlobalProperties propsRight=new GlobalProperties();
      propsRight.setRangePartitioned(ordering2,dist2);
      assertFalse(descr.areCompatible(reqLeft,reqRight,propsLeft,propsRight));
    }
{
      Ordering ordering1=new Ordering();
      for (      int field : keysLeft) {
        ordering1.appendOrdering(field,null,Order.ASCENDING);
      }
      Ordering ordering2=new Ordering();
      for (      int field : keysRight) {
        ordering2.appendOrdering(field,null,Order.DESCENDING);
      }
      RequestedGlobalProperties reqLeft=new RequestedGlobalProperties();
      reqLeft.setRangePartitioned(ordering1,dist1);
      RequestedGlobalProperties reqRight=new RequestedGlobalProperties();
      reqRight.setRangePartitioned(ordering2,dist2);
      GlobalProperties propsLeft=new GlobalProperties();
      propsLeft.setRangePartitioned(ordering1,dist1);
      GlobalProperties propsRight=new GlobalProperties();
      propsRight.setRangePartitioned(ordering2,dist2);
      assertFalse(descr.areCompatible(reqLeft,reqRight,propsLeft,propsRight));
    }
    TestDistribution dist3=new TestDistribution(1);
    TestDistribution dist4=new TestDistribution(2);
{
      Ordering ordering1=new Ordering();
      for (      int field : keysLeft) {
        ordering1.appendOrdering(field,null,Order.ASCENDING);
      }
      Ordering ordering2=new Ordering();
      for (      int field : keysRight) {
        ordering2.appendOrdering(field,null,Order.ASCENDING);
      }
      RequestedGlobalProperties reqLeft=new RequestedGlobalProperties();
      reqLeft.setRangePartitioned(ordering1,dist3);
      RequestedGlobalProperties reqRight=new RequestedGlobalProperties();
      reqRight.setRangePartitioned(ordering2,dist4);
      GlobalProperties propsLeft=new GlobalProperties();
      propsLeft.setRangePartitioned(ordering1,dist3);
      GlobalProperties propsRight=new GlobalProperties();
      propsRight.setRangePartitioned(ordering2,dist4);
      assertFalse(descr.areCompatible(reqLeft,reqRight,propsLeft,propsRight));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
