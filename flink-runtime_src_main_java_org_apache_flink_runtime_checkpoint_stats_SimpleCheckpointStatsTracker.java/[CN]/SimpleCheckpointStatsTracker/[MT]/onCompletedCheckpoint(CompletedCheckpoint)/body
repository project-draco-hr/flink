{
  if (taskParallelism.isEmpty()) {
    return;
  }
synchronized (statsLock) {
    long overallStateSize=checkpoint.getStateSize();
    Map<JobVertexID,long[][]> statsForSubTasks=new HashMap<>();
    for (    Map.Entry<JobVertexID,TaskState> taskStateEntry : checkpoint.getTaskStates().entrySet()) {
      JobVertexID jobVertexID=taskStateEntry.getKey();
      TaskState taskState=taskStateEntry.getValue();
      int parallelism=taskParallelism.get(jobVertexID);
      long[][] statsPerSubtask=new long[parallelism][2];
      statsForSubTasks.put(jobVertexID,statsPerSubtask);
      for (int i=0; i < Math.min(taskState.getParallelism(),parallelism); i++) {
        SubtaskState subtaskState=taskState.getState(i);
        if (subtaskState != null) {
          statsPerSubtask[i][0]=subtaskState.getDuration();
          statsPerSubtask[i][1]=subtaskState.getStateSize();
        }
      }
    }
    boolean isInOrder=latestCompletedCheckpoint != null && checkpoint.getCheckpointID() > latestCompletedCheckpoint.getCheckpointID();
    lastJobStats=null;
    if (overallCount == 0 || isInOrder) {
      latestCompletedCheckpoint=checkpoint;
      operatorStatsCache.clear();
      subTaskStats=statsForSubTasks;
    }
    long checkpointId=checkpoint.getCheckpointID();
    long checkpointTriggerTimestamp=checkpoint.getTimestamp();
    long checkpointDuration=checkpoint.getDuration();
    overallCount++;
    if (checkpointDuration > overallMaxDuration) {
      overallMaxDuration=checkpointDuration;
    }
    if (checkpointDuration < overallMinDuration) {
      overallMinDuration=checkpointDuration;
    }
    overallTotalDuration+=checkpointDuration;
    if (overallStateSize < overallMinStateSize) {
      overallMinStateSize=overallStateSize;
    }
    if (overallStateSize > overallMaxStateSize) {
      overallMaxStateSize=overallStateSize;
    }
    this.overallTotalStateSize+=overallStateSize;
    if (historySize > 0) {
      CheckpointStats stats=new CheckpointStats(checkpointId,checkpointTriggerTimestamp,checkpointDuration,overallStateSize);
      if (isInOrder) {
        if (history.size() == historySize) {
          history.remove(0);
        }
        history.add(stats);
      }
 else {
        final int size=history.size();
        if (size == historySize) {
          if (checkpointId > history.get(0).getCheckpointId()) {
            history.remove(0);
          }
        }
        int pos=0;
        for (int i=0; i < size; i++) {
          pos=i;
          if (checkpointId < history.get(i).getCheckpointId()) {
            break;
          }
        }
        history.add(pos,stats);
      }
    }
  }
}
