{
  final FlatJoinFunction<String,String,Integer> joiner=new FlatJoinFunction<String,String,Integer>(){
    @Override public void join(    String first,    String second,    Collector<Integer> out) throws Exception {
      out.collect(first.length());
      out.collect(second.length());
    }
  }
;
  @SuppressWarnings({"rawtypes","unchecked"}) JoinOperatorBase<String,String,Integer,FlatJoinFunction<String,String,Integer>> base=new JoinOperatorBase(joiner,new BinaryOperatorInformation(BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO),new int[0],new int[0],"TestJoiner");
  List<String> inputData1=new ArrayList<String>(Arrays.asList("foo","bar","foobar"));
  List<String> inputData2=new ArrayList<String>(Arrays.asList("foobar","foo"));
  List<Integer> expected=new ArrayList<Integer>(Arrays.asList(3,3,6,6));
  try {
    List<Integer> resultSafe=base.executeOnCollections(inputData1,inputData2,null,true);
    List<Integer> resultRegular=base.executeOnCollections(inputData1,inputData2,null,false);
    assertEquals(expected,resultSafe);
    assertEquals(expected,resultRegular);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
