{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(Integer.parseInt(args[0]));
  DataSet<Tuple1<Long>> initialVertices=env.readCsvFile(args[1]).types(Long.class).name(VERTEX_SOURCE);
  DataSet<Tuple2<Long,Long>> edges=env.readCsvFile(args[2]).types(Long.class,Long.class).name(EDGES_SOURCE);
  DataSet<Tuple2<Long,Long>> verticesWithId=initialVertices.flatMap(new DummyMapFunction());
  DeltaIteration<Tuple2<Long,Long>,Tuple2<Long,Long>> iteration=verticesWithId.iterateDelta(verticesWithId,Integer.parseInt(args[4]),0).name(ITERATION_NAME);
  DataSet<Tuple2<Long,Long>> joinWithNeighbors=iteration.getWorkset().join(edges).where(0).equalTo(0).with(new DummyJoinFunction()).name(JOIN_NEIGHBORS_MATCH);
  DataSet<Tuple2<Long,Long>> minAndUpdate=joinWithNeighbors.coGroup(iteration.getSolutionSet()).where(0).equalTo(0).with(new DummyCoGroupFunction()).name(MIN_ID_AND_UPDATE);
  iteration.closeWith(minAndUpdate,minAndUpdate).writeAsCsv(args[3]).name(SINK);
  env.execute();
}
