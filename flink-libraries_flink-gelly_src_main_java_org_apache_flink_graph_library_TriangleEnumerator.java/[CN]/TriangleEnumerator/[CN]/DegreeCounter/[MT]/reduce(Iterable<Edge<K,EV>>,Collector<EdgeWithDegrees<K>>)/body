{
  Iterator<Edge<K,EV>> edges=edgesIter.iterator();
  otherVertices.clear();
  Edge<K,EV> edge=edges.next();
  K groupVertex=edge.getSource();
  this.otherVertices.add(edge.getTarget());
  while (edges.hasNext()) {
    edge=edges.next();
    K otherVertex=edge.getTarget();
    if (!otherVertices.contains(otherVertex) && otherVertex != groupVertex) {
      this.otherVertices.add(otherVertex);
    }
  }
  int degree=this.otherVertices.size();
  for (  K otherVertex : this.otherVertices) {
    if (groupVertex.compareTo(otherVertex) < 0) {
      outputEdge.setFirstVertex(groupVertex);
      outputEdge.setFirstDegree(degree);
      outputEdge.setSecondVertex(otherVertex);
      outputEdge.setSecondDegree(0);
    }
 else {
      outputEdge.setFirstVertex(otherVertex);
      outputEdge.setFirstDegree(0);
      outputEdge.setSecondVertex(groupVertex);
      outputEdge.setSecondDegree(degree);
    }
    out.collect(outputEdge);
  }
}
