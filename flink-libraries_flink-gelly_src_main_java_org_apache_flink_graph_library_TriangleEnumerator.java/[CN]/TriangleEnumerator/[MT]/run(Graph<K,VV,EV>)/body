{
  DataSet<Edge<K,EV>> edges=input.getEdges();
  DataSet<EdgeWithDegrees<K>> edgesWithDegrees=edges.flatMap(new EdgeDuplicator<K,EV>()).groupBy(0).sortGroup(1,Order.ASCENDING).reduceGroup(new DegreeCounter<K,EV>()).groupBy(EdgeWithDegrees.V1,EdgeWithDegrees.V2).reduce(new DegreeJoiner<K>());
  DataSet<Edge<K,NullValue>> edgesByDegree=edgesWithDegrees.map(new EdgeByDegreeProjector<K>());
  DataSet<Edge<K,NullValue>> edgesById=edgesByDegree.map(new EdgeByIdProjector<K>());
  DataSet<Tuple3<K,K,K>> triangles=edgesByDegree.groupBy(EdgeWithDegrees.V1).sortGroup(EdgeWithDegrees.V2,Order.ASCENDING).reduceGroup(new TriadBuilder()).join(edgesById).where(Triad.V2,Triad.V3).equalTo(0,1).with(new TriadFilter<K>());
  return triangles;
}
