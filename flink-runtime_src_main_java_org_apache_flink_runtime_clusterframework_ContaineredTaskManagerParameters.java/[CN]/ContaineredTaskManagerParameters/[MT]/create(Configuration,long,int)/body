{
  final float memoryCutoffRatio=config.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO);
  final int minCutoff=config.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF);
  if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {
    throw new IllegalArgumentException("The configuration value '" + ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given="+ memoryCutoffRatio);
  }
  if (minCutoff >= containerMemoryMB) {
    throw new IllegalArgumentException("The configuration value '" + ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN + "'='"+ minCutoff+ "' is larger than the total container memory "+ containerMemoryMB);
  }
  long cutoff=(long)(containerMemoryMB * memoryCutoffRatio);
  if (cutoff < minCutoff) {
    cutoff=minCutoff;
  }
  final long javaMemorySizeMB=containerMemoryMB - cutoff;
  final boolean useOffHeap=config.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY,false);
  final long heapSizeMB;
  if (useOffHeap) {
    long offHeapSize=config.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,-1L);
    if (offHeapSize <= 0) {
      double fraction=config.getFloat(ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION);
      offHeapSize=(long)(fraction * javaMemorySizeMB);
    }
    heapSizeMB=javaMemorySizeMB - offHeapSize;
  }
 else {
    heapSizeMB=javaMemorySizeMB;
  }
  final HashMap<String,String> envVars=new HashMap<>();
  final String prefix=ConfigConstants.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX;
  for (  String key : config.keySet()) {
    if (key.startsWith(prefix) && key.length() > prefix.length()) {
      String envVarKey=key.substring(prefix.length());
      envVars.put(envVarKey,config.getString(key,null));
    }
  }
  return new ContaineredTaskManagerParameters(containerMemoryMB,heapSizeMB,javaMemorySizeMB,numSlots,envVars);
}
