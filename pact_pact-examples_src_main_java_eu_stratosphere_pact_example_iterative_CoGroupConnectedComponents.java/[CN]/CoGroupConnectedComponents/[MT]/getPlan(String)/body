{
  final int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String verticesInput=(args.length > 1 ? args[1] : "");
  final String edgeInput=(args.length > 2 ? args[2] : "");
  final String output=(args.length > 3 ? args[3] : "");
  final int maxIterations=(args.length > 4 ? Integer.parseInt(args[4]) : 1);
  FileDataSource initialVertices=new FileDataSource(DuplicateLongInputFormat.class,verticesInput,"Vertices");
  WorksetIteration iteration=new WorksetIteration(0,"Connected Components Iteration");
  iteration.setInitialSolutionSet(initialVertices);
  iteration.setInitialWorkset(initialVertices);
  iteration.setMaximumNumberOfIterations(maxIterations);
  FileDataSource edges=new FileDataSource(LongLongInputFormat.class,edgeInput,"Edges");
  MatchContract joinWithNeighbors=MatchContract.builder(NeighborWithComponentIDJoin.class,PactLong.class,0,0).input1(iteration.getWorkset()).input2(edges).name("Join Candidate Id With Neighbor").build();
  CoGroupContract minAndUpdate=CoGroupContract.builder(MinIdAndUpdate.class,PactLong.class,0,0).input1(joinWithNeighbors).input2(iteration.getSolutionSet()).name("Min Id and Update").build();
  iteration.setNextWorkset(minAndUpdate);
  iteration.setSolutionSetDelta(minAndUpdate);
  FileDataSink result=new FileDataSink(RecordOutputFormat.class,output,iteration,"Result");
  RecordOutputFormat.configureRecordFormat(result).recordDelimiter('\n').fieldDelimiter(' ').field(PactLong.class,0).field(PactLong.class,1);
  Plan plan=new Plan(result,"Workset Connected Components");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
