{
  List<Integer> inputs=new ArrayList<Integer>();
  inputs.add(1);
  inputs.add(2);
  inputs.add(2);
  inputs.add(3);
  inputs.add(4);
  inputs.add(5);
  inputs.add(10);
  inputs.add(11);
  inputs.add(11);
  List<StreamWindow<Integer>> expected=new ArrayList<StreamWindow<Integer>>();
  expected.add(StreamWindow.fromElements(1,2,2,3,4));
  expected.add(StreamWindow.fromElements(3,4,5));
  expected.add(StreamWindow.fromElements(5));
  expected.add(StreamWindow.fromElements(10));
  expected.add(StreamWindow.fromElements(10,11,11));
  Timestamp<Integer> myTimeStamp=new Timestamp<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Integer value){
      return value;
    }
  }
;
  TriggerPolicy<Integer> trigger=new TimeTriggerPolicy<Integer>(2L,new TimestampWrapper<Integer>(myTimeStamp,1),2L);
  EvictionPolicy<Integer> eviction=new TimeEvictionPolicy<Integer>(4L,new TimestampWrapper<Integer>(myTimeStamp,1));
  StreamDiscretizer<Integer> discretizer=new StreamDiscretizer<Integer>(trigger,eviction);
  WindowBufferInvokable<Integer> buffer=new WindowBufferInvokable<Integer>(new BasicWindowBuffer<Integer>());
  List<WindowEvent<Integer>> bufferEvents=MockContext.createAndExecute(discretizer,inputs);
  List<StreamWindow<Integer>> result=MockContext.createAndExecute(buffer,bufferEvents);
  assertEquals(expected,result);
}
