{
  final IOManager ioMan=new IOManagerAsync();
  final int PAGE_SIZE=4 * 1024;
  final int NUM_PAGES=4;
  final int NUM_RECORDS=10;
  FileIOChannel.ID channel=null;
  try {
    final DefaultMemoryManager memMan=new DefaultMemoryManager(NUM_PAGES * PAGE_SIZE,1,PAGE_SIZE);
    final AbstractInvokable owner=new DummyInvokable();
    final List<MemorySegment> memory=memMan.allocatePages(owner,NUM_PAGES);
    final TypeInformation<?>[] types=new TypeInformation<?>[]{BasicTypeInfo.LONG_TYPE_INFO,new ValueTypeInfo<SomeVeryLongValue>(SomeVeryLongValue.class),BasicTypeInfo.BYTE_TYPE_INFO};
    final TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>> typeInfo=new TupleTypeInfo<Tuple3<Long,SomeVeryLongValue,Byte>>(types);
    final TypeSerializer<Tuple3<Long,SomeVeryLongValue,Byte>> serializer=typeInfo.createSerializer(new ExecutionConfig());
    channel=ioMan.createChannel();
    FileChannelOutputView out=new FileChannelOutputView(ioMan.createBlockChannelWriter(channel),memMan,memory,PAGE_SIZE);
    Random rnd=new Random();
    List<Long> offsets=new ArrayList<Long>();
    for (int i=0; i < NUM_RECORDS; i++) {
      offsets.add(out.getWriteOffset());
      long val=rnd.nextLong();
      Tuple3<Long,SomeVeryLongValue,Byte> next=new Tuple3<Long,SomeVeryLongValue,Byte>(val,new SomeVeryLongValue((int)val),(byte)val);
      serializer.serialize(next,out);
    }
    out.close();
    for (int i=1; i < offsets.size(); i++) {
      assertTrue(offsets.get(i) > offsets.get(i - 1));
    }
    memMan.allocatePages(owner,memory,NUM_PAGES);
    SeekableFileChannelInputView in=new SeekableFileChannelInputView(ioMan,channel,memMan,memory,out.getBytesInLatestSegment());
    for (int i=0; i < NUM_RECORDS; i++) {
      System.out.println(i);
      in.seek(offsets.get(i));
      Tuple3<Long,SomeVeryLongValue,Byte> next=serializer.deserialize(in);
      assertTrue(next.f0.intValue() == next.f1.val());
      assertTrue(next.f0.byteValue() == next.f2);
    }
    in.closeAndDelete();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    if (channel != null) {
      try {
        ioMan.deleteChannel(channel);
      }
 catch (      IOException e) {
      }
    }
    if (ioMan != null) {
      ioMan.shutdown();
    }
  }
}
