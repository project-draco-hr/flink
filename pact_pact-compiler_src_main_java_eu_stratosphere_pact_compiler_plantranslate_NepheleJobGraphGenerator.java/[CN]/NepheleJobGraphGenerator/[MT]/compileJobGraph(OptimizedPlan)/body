{
  this.jobGraph=new JobGraph(pactPlan.getJobName());
  this.vertices=new HashMap<PlanNode,AbstractJobVertex>();
  this.chainedTasks=new HashMap<PlanNode,TaskInChain>();
  this.chainedTasksInSequence=new ArrayList<TaskInChain>();
  this.auxVertices=new ArrayList<AbstractJobVertex>();
  this.iterations=new HashMap<PlanNode,IterationDescriptor>();
  this.maxDegreeVertex=null;
  pactPlan.accept(this);
  for (int i=0; i < this.chainedTasksInSequence.size(); i++) {
    TaskInChain tic=this.chainedTasksInSequence.get(i);
    TaskConfig t=new TaskConfig(tic.getContainingVertex().getConfiguration());
    t.addChainedTask(tic.getChainedTask(),tic.getTaskConfig(),tic.getTaskName());
  }
  for (  IterationDescriptor iteration : this.iterations.values()) {
    if (iteration.getIterationNode() instanceof BulkIterationPlanNode) {
      finalizeBulkIteration(iteration);
    }
 else {
      throw new CompilerException();
    }
  }
  if (pactPlan.getInstanceTypeName() != null) {
    this.maxDegreeVertex.setInstanceType(pactPlan.getInstanceTypeName());
  }
 else {
    LOG.warn("No instance type assigned to Nephele JobVertex.");
  }
  for (  AbstractJobVertex vertex : this.vertices.values()) {
    if (vertex != this.maxDegreeVertex) {
      vertex.setVertexToShareInstancesWith(this.maxDegreeVertex);
    }
  }
  for (  AbstractJobVertex vertex : this.auxVertices) {
    if (vertex != this.maxDegreeVertex) {
      vertex.setVertexToShareInstancesWith(this.maxDegreeVertex);
    }
  }
  JobGraph graph=this.jobGraph;
  this.maxDegreeVertex=null;
  this.vertices=null;
  this.chainedTasks=null;
  this.chainedTasksInSequence=null;
  this.auxVertices=null;
  this.iterations=null;
  this.jobGraph=null;
  return graph;
}
