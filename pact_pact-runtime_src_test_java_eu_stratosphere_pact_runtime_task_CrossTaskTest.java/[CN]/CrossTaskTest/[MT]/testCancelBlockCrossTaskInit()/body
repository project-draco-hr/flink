{
  int keyCnt=10;
  int valCnt=1;
  super.initEnvironment(1 * 1024 * 1024);
  super.addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false),1);
  super.addInput(new DelayingInfinitiveInputIterator(100),2);
  super.addOutput(this.outList);
  final CrossTask<PactRecord,PactRecord,PactRecord> testTask=new CrossTask<PactRecord,PactRecord,PactRecord>();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.NESTEDLOOP_BLOCKED_OUTER_FIRST);
  super.getTaskConfig().setMemorySize(1 * 1024 * 1024);
  super.registerTask(testTask,MockCrossStub.class);
  Thread taskRunner=new Thread(){
    @Override public void run(){
      try {
        testTask.invoke();
      }
 catch (      Exception ie) {
        ie.printStackTrace();
        Assert.fail("Task threw exception although it was properly canceled");
      }
    }
  }
;
  taskRunner.start();
  TaskCancelThread tct=new TaskCancelThread(1,taskRunner,testTask);
  tct.start();
  try {
    tct.join();
    taskRunner.join();
  }
 catch (  InterruptedException ie) {
    Assert.fail("Joining threads failed");
  }
}
