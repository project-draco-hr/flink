{
  FileDataSource source=new FileDataSource(DummyInputFormat.class,IN_FILE_1,"Source");
  MapContract map=MapContract.builder(IdentityMap.class).name("Map1").input(source).build();
  ReduceContract reduce1=ReduceContract.builder(IdentityReduce.class,PactInteger.class,0).name("Reduce1").input(map).build();
  CrossContract cross1=CrossContract.builder(DummyCrossStub.class).name("Cross1").input1(reduce1).input2(source).build();
  ReduceContract reduce2=ReduceContract.builder(IdentityReduce.class,PactInteger.class,0).name("Reduce2").input(cross1).build();
  CrossContract cross2=CrossContract.builder(DummyCrossStub.class).name("Cross2").input1(reduce2).input2(source).build();
  ReduceContract reduce3=ReduceContract.builder(IdentityReduce.class,PactInteger.class,0).name("Reduce3").input(cross2).build();
  FileDataSink sink=new FileDataSink(DummyOutputFormat.class,OUT_FILE_1,"Sink");
  sink.setInput(reduce3);
  Plan plan=new Plan(sink,"Test Temp Task");
  plan.setDefaultParallelism(defaultParallelism);
  OptimizedPlan oPlan=compile(plan);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
}
