{
  if (slot == null) {
    throw new NullPointerException();
  }
  if (!slot.isAlive()) {
    throw new JobException("Target slot for deployment is not alive.");
  }
  ExecutionState previous=this.state;
  if (previous == SCHEDULED || previous == CREATED) {
    if (!transitionState(previous,DEPLOYING)) {
      throw new IllegalStateException("Cannot deploy task: Concurrent deployment call race.");
    }
  }
 else {
    throw new IllegalStateException("The vertex must be in CREATED or SCHEDULED state to be deployed. Found state " + previous);
  }
  try {
    if (!slot.setExecutedVertex(this)) {
      throw new JobException("Could not assign the ExecutionVertex to the slot " + slot);
    }
    this.assignedResource=slot;
    this.assignedResourceLocation=slot.getInstance().getInstanceConnectionInfo();
    if (this.state != DEPLOYING) {
      slot.releaseSlot();
      return;
    }
    if (LOG.isInfoEnabled()) {
      LOG.info(String.format("Deploying %s (attempt #%d) to %s",vertex.getSimpleName(),attemptNumber,slot.getInstance().getInstanceConnectionInfo().getHostname()));
    }
    final TaskDeploymentDescriptor deployment=vertex.createDeploymentDescriptor(attemptId,slot,operatorState,recoveryTimestamp);
    vertex.getExecutionGraph().registerExecution(this);
    final Instance instance=slot.getInstance();
    final ActorGateway gateway=instance.getActorGateway();
    final Future<Object> deployAction=gateway.ask(new SubmitTask(deployment),timeout);
    deployAction.onComplete(new OnComplete<Object>(){
      @Override public void onComplete(      Throwable failure,      Object success) throws Throwable {
        if (failure != null) {
          if (failure instanceof TimeoutException) {
            String taskname=Task.getTaskNameWithSubtaskAndID(deployment.getTaskName(),deployment.getIndexInSubtaskGroup(),deployment.getNumberOfSubtasks(),attemptId);
            markFailed(new Exception("Cannot deploy task " + taskname + " - TaskManager ("+ instance+ ") not responding after a timeout of "+ timeout,failure));
          }
 else {
            markFailed(failure);
          }
        }
 else {
          if (!(success.equals(Messages.getAcknowledge()))) {
            markFailed(new Exception("Failed to deploy the task to slot " + slot + ": Response was not of type Acknowledge"));
          }
        }
      }
    }
,executionContext);
  }
 catch (  Throwable t) {
    markFailed(t);
    ExceptionUtils.rethrow(t);
  }
}
