{
  if (allConsumers.size() != 1) {
    fail(new IllegalStateException("Currently, only a single consumer group per partition is supported."));
  }
  for (  ExecutionEdge edge : allConsumers.get(0)) {
    final ExecutionVertex consumerVertex=edge.getTarget();
    final Execution consumer=consumerVertex.getCurrentExecutionAttempt();
    final ExecutionState consumerState=consumer.getState();
    final IntermediateResultPartition partition=edge.getSource();
    if (consumerState == CREATED) {
      final Execution partitionExecution=partition.getProducer().getCurrentExecutionAttempt();
      consumerVertex.cachePartitionInfo(PartialInputChannelDeploymentDescriptor.fromEdge(partition,partitionExecution));
      future(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          try {
            consumerVertex.scheduleForExecution(consumerVertex.getExecutionGraph().getScheduler(),false);
          }
 catch (          Throwable t) {
            fail(new IllegalStateException("Could not schedule consumer " + "vertex " + consumerVertex,t));
          }
          return true;
        }
      }
,AkkaUtils.globalExecutionContext());
      if (consumerVertex.getExecutionState() == RUNNING) {
        consumerVertex.sendPartitionInfos();
      }
    }
 else {
      if (consumerState == RUNNING) {
        final SimpleSlot consumerSlot=consumer.getAssignedResource();
        if (consumerSlot == null) {
          continue;
        }
        final Instance consumerInstance=consumerSlot.getInstance();
        final ResultPartitionID partitionId=new ResultPartitionID(partition.getPartitionId(),attemptId);
        final Instance partitionInstance=partition.getProducer().getCurrentAssignedResource().getInstance();
        final ResultPartitionLocation partitionLocation;
        if (consumerInstance.equals(partitionInstance)) {
          partitionLocation=ResultPartitionLocation.createLocal();
        }
 else {
          final ConnectionID connectionId=new ConnectionID(partitionInstance.getInstanceConnectionInfo(),partition.getIntermediateResult().getConnectionIndex());
          partitionLocation=ResultPartitionLocation.createRemote(connectionId);
        }
        final InputChannelDeploymentDescriptor descriptor=new InputChannelDeploymentDescriptor(partitionId,partitionLocation);
        final UpdateTask updateTaskMessage=new UpdateTaskSinglePartitionInfo(consumer.getAttemptId(),partition.getIntermediateResult().getId(),descriptor);
        sendUpdateTaskRpcCall(consumerSlot,updateTaskMessage);
      }
 else       if (consumerState == SCHEDULED || consumerState == DEPLOYING) {
        final Execution partitionExecution=partition.getProducer().getCurrentExecutionAttempt();
        consumerVertex.cachePartitionInfo(PartialInputChannelDeploymentDescriptor.fromEdge(partition,partitionExecution));
        if (consumerVertex.getExecutionState() == RUNNING) {
          consumerVertex.sendPartitionInfos();
        }
      }
    }
  }
}
