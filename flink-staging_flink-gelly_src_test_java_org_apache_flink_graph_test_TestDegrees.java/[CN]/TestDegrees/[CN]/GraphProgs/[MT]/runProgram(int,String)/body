{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
      graph.outDegrees().writeAsCsv(resultPath);
      env.execute();
      return "1,2\n" + "2,1\n" + "3,2\n"+ "4,1\n"+ "5,1\n";
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeDataWithZeroDegree(env),env);
    graph.outDegrees().writeAsCsv(resultPath);
    env.execute();
    return "1,3\n" + "2,1\n" + "3,1\n"+ "4,1\n"+ "5,0\n";
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
  graph.inDegrees().writeAsCsv(resultPath);
  env.execute();
  return "1,1\n" + "2,1\n" + "3,2\n"+ "4,1\n"+ "5,2\n";
}
case 4:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeDataWithZeroDegree(env),env);
graph.inDegrees().writeAsCsv(resultPath);
env.execute();
return "1,0\n" + "2,1\n" + "3,1\n"+ "4,1\n"+ "5,3\n";
}
case 5:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,Long,Long> graph=Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env),TestGraphUtils.getLongLongEdgeData(env),env);
graph.getDegrees().writeAsCsv(resultPath);
env.execute();
return "1,3\n" + "2,2\n" + "3,4\n"+ "4,2\n"+ "5,3\n";
}
case 6:
{
final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
Graph<Long,NullValue,Long> graph=Graph.fromDataSet(TestGraphUtils.getDisconnectedLongLongEdgeData(env),env);
graph.outDegrees().writeAsCsv(resultPath);
env.execute();
return "1,2\n" + "2,1\n" + "3,0\n"+ "4,1\n"+ "5,0\n";
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
