{
  ExecutionJobVertex jobVertex=mock(ExecutionJobVertex.class);
  BackPressureStatsTracker statsTracker=mock(BackPressureStatsTracker.class);
  OperatorBackPressureStats stats=new OperatorBackPressureStats(0,System.currentTimeMillis(),new double[]{0.31,0.48,1.0,0.0});
  when(statsTracker.getOperatorBackPressureStats(any(ExecutionJobVertex.class))).thenReturn(Option.apply(stats));
  JobVertexBackPressureHandler handler=new JobVertexBackPressureHandler(mock(ExecutionGraphHolder.class),statsTracker,0);
  String response=handler.handleRequest(jobVertex,Collections.<String,String>emptyMap());
  ObjectMapper mapper=new ObjectMapper();
  JsonNode rootNode=mapper.readTree(response);
  assertEquals(4,rootNode.size());
  JsonNode status=rootNode.get("status");
  assertNotNull(status);
  assertEquals("deprecated",status.textValue());
  JsonNode backPressureLevel=rootNode.get("backpressure-level");
  assertNotNull(backPressureLevel);
  assertEquals("high",backPressureLevel.textValue());
  JsonNode endTimeStamp=rootNode.get("end-timestamp");
  assertNotNull(endTimeStamp);
  assertEquals(stats.getEndTimestamp(),endTimeStamp.longValue());
  JsonNode subTasks=rootNode.get("subtasks");
  assertEquals(stats.getNumberOfSubTasks(),subTasks.size());
  for (int i=0; i < subTasks.size(); i++) {
    JsonNode subTask=subTasks.get(i);
    JsonNode index=subTask.get("subtask");
    assertEquals(i,index.intValue());
    JsonNode level=subTask.get("backpressure-level");
    assertEquals(JobVertexBackPressureHandler.getBackPressureLevel(stats.getBackPressureRatio(i)),level.textValue());
    JsonNode ratio=subTask.get("ratio");
    assertEquals(stats.getBackPressureRatio(i),ratio.doubleValue(),0.0);
  }
  verify(statsTracker).triggerStackTraceSample(any(ExecutionJobVertex.class));
}
