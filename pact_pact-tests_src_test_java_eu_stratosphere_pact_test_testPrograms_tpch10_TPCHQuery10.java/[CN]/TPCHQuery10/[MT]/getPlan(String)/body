{
  final String ordersPath;
  final String lineitemsPath;
  final String customersPath;
  final String nationsPath;
  final String resultPath;
  final int degreeOfParallelism;
  if (args.length < 6) {
    throw new IllegalArgumentException("Invalid number of parameters");
  }
 else {
    degreeOfParallelism=Integer.parseInt(args[0]);
    ordersPath=args[1];
    lineitemsPath=args[2];
    customersPath=args[3];
    nationsPath=args[4];
    resultPath=args[5];
  }
  FileDataSource orders=new FileDataSource(IntTupleDataInFormat.class,ordersPath,"Orders");
  orders.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  orders.setDegreeOfParallelism(degreeOfParallelism);
  FileDataSource lineitems=new FileDataSource(IntTupleDataInFormat.class,lineitemsPath,"LineItems");
  lineitems.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  lineitems.setDegreeOfParallelism(degreeOfParallelism);
  FileDataSource customers=new FileDataSource(IntTupleDataInFormat.class,customersPath,"Customers");
  customers.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  customers.setDegreeOfParallelism(degreeOfParallelism);
  FileDataSource nations=new FileDataSource(IntTupleDataInFormat.class,nationsPath,"Nations");
  nations.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  nations.setDegreeOfParallelism(degreeOfParallelism);
  MapContract mapO=new MapContract.Builder(FilterO.class).name("FilterO").build();
  mapO.setDegreeOfParallelism(degreeOfParallelism);
  MapContract mapLi=new MapContract.Builder(FilterLI.class).name("FilterLi").build();
  mapLi.setDegreeOfParallelism(degreeOfParallelism);
  MapContract projectC=new MapContract.Builder(ProjectC.class).name("ProjectC").build();
  projectC.setDegreeOfParallelism(degreeOfParallelism);
  MapContract projectN=new MapContract.Builder(ProjectN.class).name("ProjectN").build();
  projectN.setDegreeOfParallelism(degreeOfParallelism);
  MatchContract joinOL=new MatchContract.Builder(JoinOL.class,PactInteger.class,0,0).name("JoinOL").build();
  joinOL.setDegreeOfParallelism(degreeOfParallelism);
  MatchContract joinCOL=new MatchContract.Builder(JoinCOL.class,PactInteger.class,0,0).name("JoinCOL").build();
  joinCOL.setDegreeOfParallelism(degreeOfParallelism);
  MatchContract joinNCOL=new MatchContract.Builder(JoinNCOL.class,PactInteger.class,4,0).name("JoinNCOL").build();
  joinNCOL.setDegreeOfParallelism(degreeOfParallelism);
  ReduceContract reduce=new ReduceContract.Builder(Sum.class).keyField(PactInteger.class,0).keyField(PactString.class,1).keyField(PactString.class,3).keyField(PactString.class,4).keyField(PactString.class,5).keyField(PactString.class,6).keyField(PactString.class,7).name("Reduce").build();
  reduce.setDegreeOfParallelism(degreeOfParallelism);
  FileDataSink result=new FileDataSink(TupleOutputFormat.class,resultPath,"Output");
  result.setDegreeOfParallelism(degreeOfParallelism);
  result.setInput(reduce);
  reduce.setInput(joinNCOL);
  joinNCOL.setFirstInput(joinCOL);
  joinNCOL.setSecondInput(projectN);
  joinCOL.setFirstInput(projectC);
  joinCOL.setSecondInput(joinOL);
  joinOL.setFirstInput(mapO);
  joinOL.setSecondInput(mapLi);
  projectC.setInput(customers);
  projectN.setInput(nations);
  mapLi.setInput(lineitems);
  mapO.setInput(orders);
  return new Plan(result,"TPCH Q10");
}
