{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Vertex<Long,Double>> vertices=IncrementalSSSPData.getDefaultVertexDataSet(env);
  DataSet<Edge<Long,Double>> edges=IncrementalSSSPData.getDefaultEdgeDataSet(env);
  DataSet<Edge<Long,Double>> edgesInSSSP=IncrementalSSSPData.getDefaultEdgesInSSSP(env);
  Edge<Long,Double> edgeToBeRemoved=new Edge<>(3L,5L,5.0);
  Graph<Long,Double,Double> graph=Graph.fromDataSet(vertices,edges,env);
  Graph<Long,Double,Double> ssspGraph=Graph.fromDataSet(vertices,edgesInSSSP,env);
  graph.removeEdge(edgeToBeRemoved);
  ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
  if (IncrementalSSSP.isInSSSP(edgeToBeRemoved,edgesInSSSP)) {
    parameters.setDirection(EdgeDirection.IN);
    parameters.setOptDegrees(true);
    Graph<Long,Double,Double> result=ssspGraph.runScatterGatherIteration(new IncrementalSSSP.VertexDistanceUpdater(),new IncrementalSSSP.InvalidateMessenger(edgeToBeRemoved),IncrementalSSSPData.NUM_VERTICES,parameters);
    DataSet<Vertex<Long,Double>> resultedVertices=result.getVertices();
    resultedVertices.writeAsCsv(resultPath,"\n",",");
    env.execute();
  }
 else {
    vertices.writeAsCsv(resultPath,"\n",",");
    env.execute();
  }
  expected=IncrementalSSSPData.VERTICES;
}
