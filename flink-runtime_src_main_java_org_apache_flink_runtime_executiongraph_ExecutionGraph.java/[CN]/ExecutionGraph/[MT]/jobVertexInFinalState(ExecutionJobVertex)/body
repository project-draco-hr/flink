{
synchronized (progressLock) {
    if (numFinishedJobVertices >= verticesInCreationOrder.size()) {
      throw new IllegalStateException("All vertices are already finished, cannot transition vertex to finished.");
    }
    numFinishedJobVertices++;
    if (numFinishedJobVertices == verticesInCreationOrder.size()) {
      JobStatus current;
      while (true) {
        current=this.state;
        if (current == JobStatus.RUNNING) {
          if (transitionState(current,JobStatus.FINISHED)) {
            postRunCleanup();
            break;
          }
        }
 else         if (current == JobStatus.CANCELLING) {
          if (transitionState(current,JobStatus.CANCELED)) {
            postRunCleanup();
            break;
          }
        }
 else         if (current == JobStatus.FAILING) {
          if (numberOfRetriesLeft > 0 && transitionState(current,JobStatus.RESTARTING)) {
            numberOfRetriesLeft--;
            if (delayBeforeRetrying > 0) {
              future(new Callable<Object>(){
                @Override public Object call() throws Exception {
                  try {
                    LOG.info("Delaying retry of job execution for {} ms ...",delayBeforeRetrying);
                    Thread.sleep(delayBeforeRetrying);
                  }
 catch (                  InterruptedException e) {
                  }
                  restart();
                  return null;
                }
              }
,executionContext);
            }
 else {
              restart();
            }
            break;
          }
 else           if (numberOfRetriesLeft <= 0 && transitionState(current,JobStatus.FAILED,failureCause)) {
            postRunCleanup();
            break;
          }
        }
 else {
          fail(new Exception("ExecutionGraph went into final state from state " + current));
        }
      }
      progressLock.notifyAll();
    }
  }
}
