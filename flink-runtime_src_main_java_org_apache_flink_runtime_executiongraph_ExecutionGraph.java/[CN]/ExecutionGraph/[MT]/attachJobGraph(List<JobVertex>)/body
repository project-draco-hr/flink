{
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format("Attaching %d topologically sorted vertices to existing job graph with %d " + "vertices and %d intermediate results.",topologiallySorted.size(),tasks.size(),intermediateResults.size()));
  }
  final long createTimestamp=System.currentTimeMillis();
  for (  JobVertex jobVertex : topologiallySorted) {
    ExecutionJobVertex ejv=new ExecutionJobVertex(this,jobVertex,1,timeout,createTimestamp);
    ejv.connectToPredecessors(this.intermediateResults);
    ExecutionJobVertex previousTask=this.tasks.putIfAbsent(jobVertex.getID(),ejv);
    if (previousTask != null) {
      throw new JobException(String.format("Encountered two job vertices with ID %s : previous=[%s] / new=[%s]",jobVertex.getID(),ejv,previousTask));
    }
    for (    IntermediateResult res : ejv.getProducedDataSets()) {
      IntermediateResult previousDataSet=this.intermediateResults.putIfAbsent(res.getId(),res);
      if (previousDataSet != null) {
        throw new JobException(String.format("Encountered two intermediate data set with ID %s : previous=[%s] / new=[%s]",res.getId(),res,previousDataSet));
      }
    }
    this.verticesInCreationOrder.add(ejv);
  }
}
