{
  if (slotProvider == null) {
    throw new IllegalArgumentException("Scheduler must not be null.");
  }
  if (this.slotProvider != null && this.slotProvider != slotProvider) {
    throw new IllegalArgumentException("Cannot use different slot providers for the same job");
  }
  if (transitionState(JobStatus.CREATED,JobStatus.RUNNING)) {
    this.slotProvider=slotProvider;
switch (scheduleMode) {
case LAZY_FROM_SOURCES:
      for (      ExecutionJobVertex ejv : this.tasks.values()) {
        if (ejv.getJobVertex().isInputVertex()) {
          ejv.scheduleAll(slotProvider,allowQueuedScheduling);
        }
      }
    break;
case EAGER:
  for (  ExecutionJobVertex ejv : getVerticesTopologically()) {
    ejv.scheduleAll(slotProvider,allowQueuedScheduling);
  }
break;
default :
throw new JobException("Schedule mode is invalid.");
}
}
 else {
throw new IllegalStateException("Job may only be scheduled from state " + JobStatus.CREATED);
}
}
