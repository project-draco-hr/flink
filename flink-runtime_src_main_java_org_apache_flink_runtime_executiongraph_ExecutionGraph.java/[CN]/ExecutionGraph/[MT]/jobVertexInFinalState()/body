{
synchronized (progressLock) {
    if (numFinishedJobVertices >= verticesInCreationOrder.size()) {
      throw new IllegalStateException("All vertices are already finished, cannot transition vertex to finished.");
    }
    numFinishedJobVertices++;
    if (numFinishedJobVertices == verticesInCreationOrder.size()) {
      JobStatus current;
      while (true) {
        current=this.state;
        if (current == JobStatus.RUNNING) {
          if (transitionState(current,JobStatus.FINISHED)) {
            postRunCleanup();
            break;
          }
        }
 else         if (current == JobStatus.CANCELLING) {
          if (transitionState(current,JobStatus.CANCELED)) {
            postRunCleanup();
            break;
          }
        }
 else         if (current == JobStatus.FAILING) {
          boolean allowRestart=!(failureCause instanceof SuppressRestartsException);
          if (allowRestart && restartStrategy.canRestart() && transitionState(current,JobStatus.RESTARTING)) {
            restartStrategy.restart(this);
            break;
          }
 else           if ((!allowRestart || !restartStrategy.canRestart()) && transitionState(current,JobStatus.FAILED,failureCause)) {
            postRunCleanup();
            break;
          }
        }
 else {
          fail(new Exception("ExecutionGraph went into final state from state " + current));
        }
      }
      progressLock.notifyAll();
    }
  }
}
