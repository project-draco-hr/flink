{
  try {
    DefaultScheduler scheduler=new DefaultScheduler();
    Instance i1=getRandomInstance(2);
    Instance i2=getRandomInstance(2);
    Instance i3=getRandomInstance(2);
    assertEquals(0,scheduler.getNumberOfAvailableInstances());
    scheduler.newInstanceAvailable(i1);
    assertEquals(1,scheduler.getNumberOfAvailableInstances());
    scheduler.newInstanceAvailable(i2);
    assertEquals(2,scheduler.getNumberOfAvailableInstances());
    scheduler.newInstanceAvailable(i3);
    assertEquals(3,scheduler.getNumberOfAvailableInstances());
    try {
      scheduler.newInstanceAvailable(i2);
      fail("Scheduler accepted instance twice");
    }
 catch (    IllegalArgumentException e) {
    }
    assertEquals(3,scheduler.getNumberOfAvailableInstances());
    scheduler.instanceDied(i2);
    assertEquals(2,scheduler.getNumberOfAvailableInstances());
    try {
      scheduler.newInstanceAvailable(i2);
      fail("Scheduler accepted dead instance");
    }
 catch (    IllegalArgumentException e) {
    }
    scheduler.instanceDied(i1);
    assertEquals(1,scheduler.getNumberOfAvailableInstances());
    scheduler.instanceDied(i3);
    assertEquals(0,scheduler.getNumberOfAvailableInstances());
    assertFalse(i1.isAlive());
    assertFalse(i2.isAlive());
    assertFalse(i3.isAlive());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
