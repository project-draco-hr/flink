{
  try {
    final JobID jobId=new JobID();
    DefaultScheduler scheduler=new DefaultScheduler();
    scheduler.newInstanceAvailable(getRandomInstance(2));
    scheduler.newInstanceAvailable(getRandomInstance(2));
    scheduler.newInstanceAvailable(getRandomInstance(2));
    ResourceId id1=new ResourceId();
    ResourceId id2=new ResourceId();
    ResourceId id3=new ResourceId();
    ResourceId id4=new ResourceId();
    ResourceId id5=new ResourceId();
    ResourceId id6=new ResourceId();
    AllocatedSlot s1=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id1),true);
    AllocatedSlot s2=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id2),true);
    AllocatedSlot s3=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id3),true);
    AllocatedSlot s4=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id4),true);
    AllocatedSlot s5=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id5),true);
    AllocatedSlot s6=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id6),true);
    try {
      scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),new ResourceId()),true);
      fail("Scheduler accepted scheduling request without available resource.");
    }
 catch (    NoResourceAvailableException e) {
    }
    AllocatedSlot s1s=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id1),true);
    AllocatedSlot s2s=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id2),true);
    AllocatedSlot s3s=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id3),true);
    AllocatedSlot s4s=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id4),true);
    AllocatedSlot s5s=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id5),true);
    AllocatedSlot s6s=scheduler.getResourceToScheduleUnit(new ScheduledUnit(jobId,getDummyVertex(),id6),true);
    assertEquals(s1,s1s);
    assertEquals(s2,s2s);
    assertEquals(s3,s3s);
    assertEquals(s4,s4s);
    assertEquals(s5,s5s);
    assertEquals(s6,s6s);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
