{
  Option configDirOpt=OptionBuilder.withArgName("config directory").hasArg().withDescription("Specify configuration directory.").create("configDir");
  Option trainingDirOpt=OptionBuilder.withArgName("training-file directory").hasArg().withDescription("Specify Training-File directory.").create("trainingFileDir");
  Option blockSizeOpt=OptionBuilder.withArgName("data-block size").hasArg().withDescription("Specify the Block Size to be used in KB.").create("blockSize");
  Option roundsOpt=OptionBuilder.withArgName("compression rounds").hasArg().withDescription("Specify the number of training-rounds.").create("rounds");
  Option outputOpt=OptionBuilder.withArgName("output file").hasArg().withDescription("Specify the output file where the results will be saved.").create("outputFile");
  Options options=new Options();
  options.addOption(configDirOpt);
  options.addOption(trainingDirOpt);
  options.addOption(blockSizeOpt);
  options.addOption(roundsOpt);
  options.addOption(outputOpt);
  HelpFormatter help=new HelpFormatter();
  CommandLineParser parser=new GnuParser();
  CommandLine line=null;
  try {
    line=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println("CLI Parsing failed. Reason: " + e.getMessage());
    help.printHelp("Trainer.java [OPTION]","",options,"");
    System.exit(-1);
  }
  String configDir=line.getOptionValue(configDirOpt.getOpt(),null);
  String trainingDir=line.getOptionValue(trainingDirOpt.getOpt(),null);
  String blockSize=line.getOptionValue(blockSizeOpt.getOpt(),"128");
  String rounds=line.getOptionValue(roundsOpt.getOpt(),"10");
  String outputFile=line.getOptionValue(outputOpt.getOpt(),null);
  if (configDir == null || trainingDir == null) {
    help.printHelp("Trainer.java [OPTION]","Missing Option - configDir and trainingFileDir must be set!",options,"");
    System.exit(-1);
  }
  int blockS=128;
  int round=0;
  try {
    blockS=Integer.parseInt(blockSize);
    round=Integer.parseInt(rounds);
    if (round <= 0 || blockS <= 0) {
      help.printHelp("Trainer.java [OPTION]","Blocksize and Rounds parameter need to be a positive integer.",options,"");
      System.exit(-1);
    }
  }
 catch (  NumberFormatException e) {
    help.printHelp("Trainer.java [OPTION]","Blocksize and Rounds parameter need to be a positive integer.",options,"");
    System.exit(-1);
  }
  GlobalConfiguration.loadConfiguration(configDir);
  Trainer tr=new Trainer(blockS * 1024,round,"file://" + trainingDir);
  if (outputFile != null)   tr.setResultFile(outputFile);
  tr.startTraining();
}
