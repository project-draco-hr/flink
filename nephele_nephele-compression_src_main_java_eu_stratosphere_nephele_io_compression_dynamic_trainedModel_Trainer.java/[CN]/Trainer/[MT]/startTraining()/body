{
  print("Starting Training with " + this.numberOfRounds + " rounds and "+ this.dataBlockSize+ " KB BlockSize  ....",true);
  print("Init Compression Libraries ... ",false);
  if (!initCompression()) {
    return;
  }
  print("Done!",true);
  print("Init Training-Files ... ",false);
  if (!initTrainingFiles()) {
    return;
  }
  print("Done!",true);
  print("Start computing training data ... ",true);
  for (Iterator<CompressionLevel> i=compressors.keySet().iterator(); i.hasNext(); ) {
    CompressionLevel tmp=i.next();
    print("     Computing training data for Compression-Library " + getAlgorithmNameByCompressionLevel(tmp) + " (Level: "+ tmp+ ") ... ",false);
    if (computeTrainingData(tmp,this.compressors.get(tmp),this.decompressors.get(tmp)))     print("Done!",true);
 else     print("An error occured during computation for Compression-Library " + getAlgorithmNameByCompressionLevel(tmp) + " (Level: "+ tmp+ ")",true);
  }
  print("Computing training data done!",true);
  print("Start computing linear regression ... ",true);
  for (  CompressionLevel cl : CompressionLevel.values()) {
    if (compressors.containsKey(cl)) {
      AlgorithmResults ar1=this.results.getAlgorithmResultsByCompressionLevel(cl);
      if (ar1 != null) {
        computeLinearRegressionForTime(ar1);
        for (Iterator<CompressionLevel> j=compressors.keySet().iterator(); j.hasNext(); ) {
          CompressionLevel cl2=j.next();
          if (cl != cl2) {
            AlgorithmResults ar2=this.results.getAlgorithmResultsByCompressionLevel(cl2);
            if (ar2 != null)             computeLinearRegressionForRatio(ar1,ar2);
          }
        }
      }
    }
  }
  print("Done!",true);
  this.isTrainingDone=true;
  if (output == null)   System.out.println(this.results.toString());
  if (saveResultsToFile) {
    FileOutputStream fos;
    ObjectOutputStream oos;
    try {
      fos=new FileOutputStream(resultFile);
      oos=new ObjectOutputStream(fos);
      oos.writeObject(results);
      oos.close();
      print("Results save to: " + resultFile.getAbsolutePath(),true);
    }
 catch (    FileNotFoundException e1) {
      print("ERROR: Could not save results.",true);
      e1.printStackTrace();
    }
catch (    IOException e2) {
      print("ERROR: Could not save results.",true);
      e2.printStackTrace();
    }
  }
}
