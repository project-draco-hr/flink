{
  if (recoveryTimestamp <= checkpointTimestamp) {
    throw new RuntimeException("Recovery timestamp is smaller or equal to checkpoint timestamp. " + "This might happen if the job was started with a new JobManager " + "and the clocks got really out of sync.");
  }
  retry(new Callable<Void>(){
    public Void call() throws Exception {
      for (      Connection c : stateBackend.getConnections().connections()) {
        stateBackend.getConfiguration().getDbAdapter().cleanupFailedCheckpoints(kvStateId,c,checkpointTimestamp,recoveryTimestamp);
      }
      return null;
    }
  }
,stateBackend.getConfiguration().getMaxNumberOfSqlRetries(),stateBackend.getConfiguration().getSleepBetweenSqlRetries());
  boolean cleanup=stateBackend.getEnvironment().getIndexInSubtaskGroup() == 0;
  LazyDbKvState<K,V> restored=new LazyDbKvState<K,V>(kvStateId,cleanup,stateBackend.getConnections(),stateBackend.getConfiguration(),keySerializer,valueSerializer,defaultValue,recoveryTimestamp);
  if (LOG.isDebugEnabled()) {
    LOG.debug("KV state({},{}) restored.",kvStateId,recoveryTimestamp);
  }
  return restored;
}
