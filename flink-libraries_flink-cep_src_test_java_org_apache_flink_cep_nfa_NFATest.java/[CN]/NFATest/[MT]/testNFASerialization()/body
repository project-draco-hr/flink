{
  NFA<Event> nfa=new NFA<>(Event.createTypeSerializer(),0,false);
  State<Event> startingState=new State<>("",State.StateType.Start);
  State<Event> startState=new State<>("start",State.StateType.Normal);
  State<Event> endState=new State<>("end",State.StateType.Final);
  StateTransition<Event> starting2Start=new StateTransition<>(StateTransitionAction.TAKE,startState,new NameFilter("start"));
  StateTransition<Event> start2End=new StateTransition<>(StateTransitionAction.TAKE,endState,new NameFilter("end"));
  StateTransition<Event> start2Start=new StateTransition<>(StateTransitionAction.IGNORE,startState,null);
  startingState.addStateTransition(starting2Start);
  startState.addStateTransition(start2End);
  startState.addStateTransition(start2Start);
  nfa.addState(startingState);
  nfa.addState(startState);
  nfa.addState(endState);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ObjectOutputStream(baos);
  oos.writeObject(nfa);
  ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
  ObjectInputStream ois=new ObjectInputStream(bais);
  @SuppressWarnings("unchecked") NFA<Event> copy=(NFA<Event>)ois.readObject();
  assertEquals(nfa,copy);
}
