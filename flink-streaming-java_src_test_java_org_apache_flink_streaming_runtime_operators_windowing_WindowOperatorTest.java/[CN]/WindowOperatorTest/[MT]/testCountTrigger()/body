{
  closeCalled.set(0);
  final int WINDOW_SIZE=4;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer(),inputType.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator=new WindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>()),PurgingTrigger.of(CountTrigger.of(WINDOW_SIZE)));
  operator.setInputType(TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, Integer>"),new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",4),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 10999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",4),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",4),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.close();
}
