{
  final int WINDOW_SIZE=2;
  final long LATENESS=1;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  FoldingStateDescriptor<Tuple2<String,Integer>,Tuple2<String,Integer>> windowStateDesc=new FoldingStateDescriptor<>("window-contents",new Tuple2<>((String)null,0),new FoldFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>(){
    @Override public Tuple2<String,Integer> fold(    Tuple2<String,Integer> accumulator,    Tuple2<String,Integer> value) throws Exception {
      return new Tuple2<>(value.f0,accumulator.f1 + value.f1);
    }
  }
,inputType);
  windowStateDesc.initializeSerializerUnlessSet(new ExecutionConfig());
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),windowStateDesc,new InternalSingleValueWindowFunction<>(new PassThroughFunction()),EventTimeTrigger.create(),LATENESS);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  ;
  operator.setInputType(inputType,new ExecutionConfig());
  testHarness.open();
  ConcurrentLinkedQueue<Object> expected=new ConcurrentLinkedQueue<>();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1000));
  testHarness.processWatermark(new Watermark(1599));
  testHarness.processWatermark(new Watermark(1999));
  testHarness.processWatermark(new Watermark(2000));
  testHarness.processWatermark(new Watermark(5000));
  expected.add(new Watermark(1599));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",1),1999));
  expected.add(new Watermark(1999));
  expected.add(new Watermark(2000));
  expected.add(new Watermark(5000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expected,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.close();
}
