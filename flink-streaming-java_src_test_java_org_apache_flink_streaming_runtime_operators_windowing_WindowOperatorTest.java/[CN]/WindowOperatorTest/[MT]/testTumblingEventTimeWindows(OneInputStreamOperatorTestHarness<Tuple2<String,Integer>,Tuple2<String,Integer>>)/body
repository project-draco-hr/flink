{
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processWatermark(new Watermark(initialTime + 999));
  expectedOutput.add(new Watermark(999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 1999));
  expectedOutput.add(new Watermark(1999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  StreamTaskState snapshot=testHarness.snapshot(0L,0L);
  testHarness.close();
  testHarness.setup();
  testHarness.restore(snapshot,10L);
  testHarness.open();
  testHarness.processWatermark(new Watermark(initialTime + 2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",3),initialTime + 2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",3),initialTime + 2999));
  expectedOutput.add(new Watermark(2999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 3999));
  expectedOutput.add(new Watermark(3999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 4999));
  expectedOutput.add(new Watermark(4999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 5999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",2),initialTime + 5999));
  expectedOutput.add(new Watermark(5999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 6999));
  testHarness.processWatermark(new Watermark(initialTime + 7999));
  expectedOutput.add(new Watermark(6999));
  expectedOutput.add(new Watermark(7999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
}
