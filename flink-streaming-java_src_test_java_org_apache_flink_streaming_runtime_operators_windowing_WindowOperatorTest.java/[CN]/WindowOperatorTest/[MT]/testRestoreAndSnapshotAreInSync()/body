{
  final int WINDOW_SIZE=3;
  final int WINDOW_SLIDE=1;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  TestTimeServiceProvider timer=new TestTimeServiceProvider();
  TestTimeServiceProvider timer=new TestTimeServiceProvider();
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer(),inputType.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(SlidingEventTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS),Time.of(WINDOW_SLIDE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new ExecutionConfig(),timer,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.open();
  WindowOperator.Timer<String,TimeWindow> timer1=new WindowOperator.Timer<>(1L,"key1",new TimeWindow(1L,2L));
  WindowOperator.Timer<String,TimeWindow> timer2=new WindowOperator.Timer<>(3L,"key1",new TimeWindow(1L,2L));
  WindowOperator.Timer<String,TimeWindow> timer3=new WindowOperator.Timer<>(2L,"key1",new TimeWindow(1L,2L));
  operator.processingTimeTimers.add(timer1);
  operator.processingTimeTimers.add(timer2);
  operator.processingTimeTimers.add(timer3);
  operator.processingTimeTimersQueue.add(timer1);
  operator.processingTimeTimersQueue.add(timer2);
  operator.processingTimeTimersQueue.add(timer3);
  StreamStateHandle snapshot=testHarness.snapshot(0,0);
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> otherOperator=new WindowOperator<>(SlidingEventTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS),Time.of(WINDOW_SLIDE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> otherTestHarness=new KeyedOneInputStreamOperatorTestHarness<>(otherOperator,new ExecutionConfig(),timer,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  otherTestHarness.setup();
  otherTestHarness.restore(snapshot);
  otherTestHarness.open();
  Assert.assertEquals(operator.processingTimeTimers,otherOperator.processingTimeTimers);
  Assert.assertArrayEquals(operator.processingTimeTimersQueue.toArray(),otherOperator.processingTimeTimersQueue.toArray());
}
