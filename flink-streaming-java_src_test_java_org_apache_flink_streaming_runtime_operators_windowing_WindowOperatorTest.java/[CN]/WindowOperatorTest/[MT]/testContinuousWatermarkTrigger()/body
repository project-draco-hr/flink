{
  closeCalled.set(0);
  final int WINDOW_SIZE=3;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer(),inputType.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator=new WindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>()),ContinuousEventTimeTrigger.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)),0);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  ;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),0));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1000));
  testHarness.processWatermark(new Watermark(1000));
  expectedOutput.add(new Watermark(1000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(2000));
  expectedOutput.add(new Watermark(2000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(3000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",3),Long.MAX_VALUE));
  expectedOutput.add(new Watermark(3000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(4000));
  expectedOutput.add(new Watermark(4000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(5000));
  expectedOutput.add(new Watermark(5000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(6000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",3),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",5),Long.MAX_VALUE));
  expectedOutput.add(new Watermark(6000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.processWatermark(new Watermark(7000));
  testHarness.processWatermark(new Watermark(8000));
  expectedOutput.add(new Watermark(7000));
  expectedOutput.add(new Watermark(8000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.close();
}
