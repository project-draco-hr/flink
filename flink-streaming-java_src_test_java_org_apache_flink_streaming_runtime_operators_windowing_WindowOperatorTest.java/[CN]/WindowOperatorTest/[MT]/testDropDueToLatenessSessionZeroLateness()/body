{
  final int GAP_SIZE=3;
  final long LATENESS=0;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer(),inputType.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),EventTimeTrigger.create(),LATENESS);
  operator.setInputType(TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, Integer>"),new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.open();
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expected=new ConcurrentLinkedQueue<>();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processWatermark(new Watermark(initialTime + 1999));
  expected.add(new Watermark(1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 2000));
  testHarness.processWatermark(new Watermark(initialTime + 4998));
  expected.add(new Watermark(4998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 4500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 8500));
  testHarness.processWatermark(new Watermark(initialTime + 7400));
  expected.add(new Watermark(7400));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 7000));
  testHarness.processWatermark(new Watermark(initialTime + 11501));
  expected.add(new StreamRecord<>(new Tuple3<>("key2-5",1000L,11500L),11499));
  expected.add(new Watermark(11501));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 11600));
  testHarness.processWatermark(new Watermark(initialTime + 14600));
  expected.add(new StreamRecord<>(new Tuple3<>("key2-1",11600L,14600L),14599));
  expected.add(new Watermark(14600));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 10000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 14500));
  testHarness.processWatermark(new Watermark(initialTime + 20000));
  expected.add(new StreamRecord<>(new Tuple3<>("key2-1",14500l,17500l),17499));
  expected.add(new Watermark(20000));
  testHarness.processWatermark(new Watermark(initialTime + 100000));
  expected.add(new Watermark(100000));
  ConcurrentLinkedQueue<Object> actual=testHarness.getOutput();
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expected,actual,new Tuple2ResultSortComparator());
  testHarness.close();
}
