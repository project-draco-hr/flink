{
  final int WINDOW_SIZE=3;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer(),inputType.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingProcessingTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),ProcessingTimeTrigger.create(),0);
  TestTimeServiceProvider testTimeProvider=new TestTimeServiceProvider();
  operator.setInputType(TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, Integer>"),new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new OneInputStreamOperatorTestHarness<>(operator,new ExecutionConfig(),testTimeProvider);
  testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  long initialTime=0L;
  testHarness.open();
  testTimeProvider.setCurrentTime(3);
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),Long.MAX_VALUE));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 7000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 7000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 7000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 7000));
  testTimeProvider.setCurrentTime(5000);
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 7000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 7000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 7000));
  testTimeProvider.setCurrentTime(7000);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",3),2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",2),2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",3),5999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.close();
}
