{
  final int WINDOW_SIZE=3;
  final int WINDOW_SLIDE=1;
  final long LATENESS=0;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer(),inputType.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(SlidingEventTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS),Time.of(WINDOW_SLIDE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),LATENESS);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  operator.setInputType(inputType,new ExecutionConfig());
  testHarness.open();
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expected=new ConcurrentLinkedQueue<>();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processWatermark(new Watermark(initialTime + 1999));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1999));
  expected.add(new Watermark(initialTime + 1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 2000));
  testHarness.processWatermark(new Watermark(initialTime + 3000));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",2),initialTime + 2999));
  expected.add(new Watermark(initialTime + 3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 3001));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 2400));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 2400));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 3001));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3900));
  testHarness.processWatermark(new Watermark(initialTime + 6000));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",5),initialTime + 3999));
  expected.add(new StreamRecord<>(new Tuple2<>("key1",2),initialTime + 3999));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",4),initialTime + 4999));
  expected.add(new StreamRecord<>(new Tuple2<>("key1",2),initialTime + 4999));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 5999));
  expected.add(new StreamRecord<>(new Tuple2<>("key1",2),initialTime + 5999));
  expected.add(new Watermark(initialTime + 6000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 3001));
  testHarness.processWatermark(new Watermark(initialTime + 25000));
  expected.add(new Watermark(initialTime + 25000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expected,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.close();
}
