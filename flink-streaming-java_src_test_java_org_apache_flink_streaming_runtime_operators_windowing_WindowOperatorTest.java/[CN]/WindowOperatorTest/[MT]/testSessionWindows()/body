{
  closeCalled.set(0);
  final int SESSION_SIZE=3;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  ListStateDescriptor<Tuple2<String,Integer>> stateDesc=new ListStateDescriptor<>("window-contents",inputType.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new SessionWindowFunction()),EventTimeTrigger.create());
  operator.setInputType(TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, Integer>"),new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 0));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",2),initialTime + 1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",3),initialTime + 2500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 10));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",2),initialTime + 1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",3),initialTime + 2500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",4),initialTime + 5501));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",5),initialTime + 6000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",5),initialTime + 6000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",6),initialTime + 6050));
  testHarness.processWatermark(new Watermark(initialTime + 12000));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-6",10L,5500L),initialTime + 5499));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6",0L,5500L),initialTime + 5499));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-20",5501L,9050L),initialTime + 9049));
  expectedOutput.add(new Watermark(initialTime + 12000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",10),initialTime + 15000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",20),initialTime + 15000));
  testHarness.processWatermark(new Watermark(initialTime + 17999));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-30",15000L,18000L),initialTime + 17999));
  expectedOutput.add(new Watermark(initialTime + 17999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple3ResultSortComparator());
  testHarness.close();
}
