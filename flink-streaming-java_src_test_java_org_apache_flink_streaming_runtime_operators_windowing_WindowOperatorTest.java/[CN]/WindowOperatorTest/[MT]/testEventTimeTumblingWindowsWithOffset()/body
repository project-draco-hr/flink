{
  final int WINDOW_SIZE=2000;
  final int OFFSET=100;
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  TumblingEventTimeWindows windowAssigner=TumblingEventTimeWindows.of(Time.milliseconds(WINDOW_SIZE),Time.milliseconds(OFFSET));
  WindowingTestHarness<String,Tuple2<String,Integer>,TimeWindow> testHarness=new WindowingTestHarness<>(new ExecutionConfig(),windowAssigner,BasicTypeInfo.STRING_TYPE_INFO,inputType,new TupleKeySelector(),EventTimeTrigger.create(),0);
  testHarness.processElement(new Tuple2<>("key2",1),1000);
  testHarness.processWatermark(1985);
  testHarness.addExpectedWatermark(1985);
  testHarness.processElement(new Tuple2<>("key2",2),1980);
  testHarness.processElement(new Tuple2<>("key2",3),1998);
  testHarness.processElement(new Tuple2<>("key2",4),2001);
  testHarness.processWatermark(2010);
  testHarness.addExpectedWatermark(2010);
  testHarness.processWatermark(2999);
  testHarness.addExpectedElement(new Tuple2<>("key2",1),1999 + OFFSET);
  testHarness.addExpectedElement(new Tuple2<>("key2",2),1999 + OFFSET);
  testHarness.addExpectedElement(new Tuple2<>("key2",3),1999 + OFFSET);
  testHarness.addExpectedElement(new Tuple2<>("key2",4),1999 + OFFSET);
  testHarness.addExpectedWatermark(2999);
  testHarness.processWatermark(3999);
  testHarness.addExpectedWatermark(3999);
  testHarness.compareActualToExpectedOutput("Output is not correct");
  testHarness.close();
}
