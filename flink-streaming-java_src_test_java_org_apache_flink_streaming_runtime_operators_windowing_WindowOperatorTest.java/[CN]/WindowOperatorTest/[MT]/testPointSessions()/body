{
  closeCalled.set(0);
  TypeInformation<Tuple2<String,Integer>> inputType=TypeInfoParser.parse("Tuple2<String, Integer>");
  ListStateDescriptor<Tuple2<String,Integer>> stateDesc=new ListStateDescriptor<>("window-contents",inputType.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(new PointSessionWindows(3000),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new SessionWindowFunction()),EventTimeTrigger.create(),0);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),0));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",33),1000));
  StreamStateHandle snapshot=testHarness.snapshot(0L,0L);
  testHarness.close();
  testHarness.setup();
  testHarness.restore(snapshot);
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",33),2500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),10));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",2),1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",33),2500));
  testHarness.processWatermark(new Watermark(12000));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-36",10L,4000L),3999));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-67",0L,3000L),2999));
  expectedOutput.add(new Watermark(12000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple3ResultSortComparator());
  testHarness.close();
}
