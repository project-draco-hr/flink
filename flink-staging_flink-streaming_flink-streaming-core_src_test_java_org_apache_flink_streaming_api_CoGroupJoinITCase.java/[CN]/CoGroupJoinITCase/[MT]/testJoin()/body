{
  testResults=Lists.newArrayList();
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.setParallelism(1);
  DataStream<Tuple3<String,String,Integer>> source1=env.addSource(new SourceFunction<Tuple3<String,String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public void run(    SourceContext<Tuple3<String,String,Integer>> ctx) throws Exception {
      ctx.collect(Tuple3.of("a","x",0));
      ctx.collect(Tuple3.of("a","y",1));
      ctx.collect(Tuple3.of("a","z",2));
      ctx.collect(Tuple3.of("b","u",3));
      ctx.collect(Tuple3.of("b","w",5));
      ctx.collect(Tuple3.of("a","i",6));
      ctx.collect(Tuple3.of("a","j",7));
      ctx.collect(Tuple3.of("a","k",8));
    }
    @Override public void cancel(){
    }
  }
).extractTimestamp(new Tuple3TimestampExtractor());
  DataStream<Tuple3<String,String,Integer>> source2=env.addSource(new SourceFunction<Tuple3<String,String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public void run(    SourceContext<Tuple3<String,String,Integer>> ctx) throws Exception {
      ctx.collect(Tuple3.of("a","u",0));
      ctx.collect(Tuple3.of("a","w",1));
      ctx.collect(Tuple3.of("b","i",3));
      ctx.collect(Tuple3.of("b","k",5));
      ctx.collect(Tuple3.of("a","x",6));
      ctx.collect(Tuple3.of("a","z",8));
    }
    @Override public void cancel(){
    }
  }
).extractTimestamp(new Tuple3TimestampExtractor());
  source1.join(source2).where(new Tuple3KeyExtractor()).equalTo(new Tuple3KeyExtractor()).window(TumblingTimeWindows.of(Time.of(3,TimeUnit.MILLISECONDS))).apply(new JoinFunction<Tuple3<String,String,Integer>,Tuple3<String,String,Integer>,String>(){
    @Override public String join(    Tuple3<String,String,Integer> first,    Tuple3<String,String,Integer> second) throws Exception {
      return first + ":" + second;
    }
  }
).addSink(new SinkFunction<String>(){
    @Override public void invoke(    String value) throws Exception {
      testResults.add(value);
    }
  }
);
  env.execute("Join Test");
  List<String> expectedResult=Lists.newArrayList("(a,x,0):(a,u,0)","(a,x,0):(a,w,1)","(a,y,1):(a,u,0)","(a,y,1):(a,w,1)","(a,z,2):(a,u,0)","(a,z,2):(a,w,1)","(b,u,3):(b,i,3)","(b,u,3):(b,k,5)","(b,w,5):(b,i,3)","(b,w,5):(b,k,5)","(a,i,6):(a,x,6)","(a,i,6):(a,z,8)","(a,j,7):(a,x,6)","(a,j,7):(a,z,8)","(a,k,8):(a,x,6)","(a,k,8):(a,z,8)");
  Collections.sort(expectedResult);
  Collections.sort(testResults);
  Assert.assertEquals(expectedResult,testResults);
}
