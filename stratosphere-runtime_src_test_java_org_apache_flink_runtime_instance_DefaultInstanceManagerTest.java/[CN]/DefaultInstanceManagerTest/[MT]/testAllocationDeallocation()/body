{
  try {
    DefaultInstanceManager cm=new DefaultInstanceManager();
    TestInstanceListener testInstanceListener=new TestInstanceListener();
    cm.setInstanceListener(testInstanceListener);
    int ipcPort=ConfigConstants.DEFAULT_TASK_MANAGER_IPC_PORT;
    int dataPort=ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT;
    HardwareDescription hardwareDescription=HardwareDescriptionFactory.construct(2,2L * 1024L * 1024L* 1024L,2L * 1024L * 1024L* 1024L);
    String hostname="192.168.198.1";
    InetAddress address=InetAddress.getByName("192.168.198.1");
    InstanceConnectionInfo ici1=new InstanceConnectionInfo(address,hostname,null,ipcPort + 0,dataPort + 0);
    InstanceConnectionInfo ici2=new InstanceConnectionInfo(address,hostname,null,ipcPort + 15,dataPort + 15);
    cm.registerTaskManager(ici1,hardwareDescription,1);
    cm.registerTaskManager(ici2,hardwareDescription,1);
    assertEquals(2,cm.getNumberOfSlots());
    JobID jobID=new JobID();
    Configuration conf=new Configuration();
    cm.requestInstance(jobID,conf,2);
    DefaultInstanceManagerTestUtils.waitForInstances(jobID,testInstanceListener,3,1000);
    List<AllocatedResource> allocatedResources=testInstanceListener.getAllocatedResourcesForJob(jobID);
    assertEquals(2,allocatedResources.size());
    Iterator<AllocatedResource> it=allocatedResources.iterator();
    Set<AllocationID> allocationIDs=new HashSet<AllocationID>();
    while (it.hasNext()) {
      AllocatedResource allocatedResource=it.next();
      if (allocationIDs.contains(allocatedResource.getAllocationID())) {
        fail("Discovered allocation ID " + allocatedResource.getAllocationID() + " at least twice");
      }
 else {
        allocationIDs.add(allocatedResource.getAllocationID());
      }
    }
    try {
      cm.requestInstance(jobID,conf,3);
      fail("ClusterManager allowed to request more instances than actually available");
    }
 catch (    InstanceException ie) {
    }
    it=allocatedResources.iterator();
    while (it.hasNext()) {
      final AllocatedResource allocatedResource=it.next();
      cm.releaseAllocatedResource(allocatedResource);
    }
    cm.requestInstance(jobID,conf,1);
    cm.shutdown();
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    Assert.fail("Test erroneous: " + e.getMessage());
  }
}
