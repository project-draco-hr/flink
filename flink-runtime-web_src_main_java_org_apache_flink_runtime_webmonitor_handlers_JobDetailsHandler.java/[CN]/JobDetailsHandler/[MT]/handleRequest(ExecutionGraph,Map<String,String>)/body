{
  final StringWriter writer=new StringWriter();
  final JsonGenerator gen=JsonFactory.jacksonFactory.createGenerator(writer);
  final long now=System.currentTimeMillis();
  gen.writeStartObject();
  gen.writeStringField("jid",graph.getJobID().toString());
  gen.writeStringField("name",graph.getJobName());
  gen.writeBooleanField("isStoppable",graph.isStoppable());
  gen.writeStringField("state",graph.getState().name());
  final long jobStartTime=graph.getStatusTimestamp(JobStatus.CREATED);
  final long jobEndTime=graph.getState().isTerminalState() ? graph.getStatusTimestamp(graph.getState()) : -1L;
  gen.writeNumberField("start-time",jobStartTime);
  gen.writeNumberField("end-time",jobEndTime);
  gen.writeNumberField("duration",(jobEndTime > 0 ? jobEndTime : now) - jobStartTime);
  gen.writeNumberField("now",now);
  gen.writeObjectFieldStart("timestamps");
  for (  JobStatus status : JobStatus.values()) {
    gen.writeNumberField(status.name(),graph.getStatusTimestamp(status));
  }
  gen.writeEndObject();
  int[] jobVerticesPerState=new int[ExecutionState.values().length];
  gen.writeArrayFieldStart("vertices");
  for (  ExecutionJobVertex ejv : graph.getVerticesTopologically()) {
    int[] tasksPerState=new int[ExecutionState.values().length];
    long startTime=Long.MAX_VALUE;
    long endTime=0;
    boolean allFinished=true;
    for (    ExecutionVertex vertex : ejv.getTaskVertices()) {
      final ExecutionState state=vertex.getExecutionState();
      tasksPerState[state.ordinal()]++;
      long started=vertex.getStateTimestamp(ExecutionState.DEPLOYING);
      if (started > 0) {
        startTime=Math.min(startTime,started);
      }
      allFinished&=state.isTerminal();
      endTime=Math.max(endTime,vertex.getStateTimestamp(state));
    }
    long duration;
    if (startTime < Long.MAX_VALUE) {
      if (allFinished) {
        duration=endTime - startTime;
      }
 else {
        endTime=-1L;
        duration=now - startTime;
      }
    }
 else {
      startTime=-1L;
      endTime=-1L;
      duration=-1L;
    }
    ExecutionState jobVertexState=ExecutionJobVertex.getAggregateJobVertexState(tasksPerState,ejv.getParallelism());
    jobVerticesPerState[jobVertexState.ordinal()]++;
    Map<AccumulatorRegistry.Metric,Accumulator<?,?>> metrics=ejv.getAggregatedMetricAccumulators();
    LongCounter readBytes=(LongCounter)metrics.get(AccumulatorRegistry.Metric.NUM_BYTES_IN);
    LongCounter writeBytes=(LongCounter)metrics.get(AccumulatorRegistry.Metric.NUM_BYTES_OUT);
    LongCounter readRecords=(LongCounter)metrics.get(AccumulatorRegistry.Metric.NUM_RECORDS_IN);
    LongCounter writeRecords=(LongCounter)metrics.get(AccumulatorRegistry.Metric.NUM_RECORDS_OUT);
    gen.writeStartObject();
    gen.writeStringField("id",ejv.getJobVertexId().toString());
    gen.writeStringField("name",ejv.getJobVertex().getName());
    gen.writeNumberField("parallelism",ejv.getParallelism());
    gen.writeStringField("status",jobVertexState.name());
    gen.writeNumberField("start-time",startTime);
    gen.writeNumberField("end-time",endTime);
    gen.writeNumberField("duration",duration);
    gen.writeObjectFieldStart("tasks");
    for (    ExecutionState state : ExecutionState.values()) {
      gen.writeNumberField(state.name(),tasksPerState[state.ordinal()]);
    }
    gen.writeEndObject();
    gen.writeObjectFieldStart("metrics");
    gen.writeNumberField("read-bytes",readBytes != null ? readBytes.getLocalValuePrimitive() : -1L);
    gen.writeNumberField("write-bytes",writeBytes != null ? writeBytes.getLocalValuePrimitive() : -1L);
    gen.writeNumberField("read-records",readRecords != null ? readRecords.getLocalValuePrimitive() : -1L);
    gen.writeNumberField("write-records",writeRecords != null ? writeRecords.getLocalValuePrimitive() : -1L);
    gen.writeEndObject();
    gen.writeEndObject();
  }
  gen.writeEndArray();
  gen.writeObjectFieldStart("status-counts");
  for (  ExecutionState state : ExecutionState.values()) {
    gen.writeNumberField(state.name(),jobVerticesPerState[state.ordinal()]);
  }
  gen.writeEndObject();
  gen.writeFieldName("plan");
  gen.writeRawValue(graph.getJsonPlan());
  gen.writeEndObject();
  gen.close();
  return writer.toString();
}
