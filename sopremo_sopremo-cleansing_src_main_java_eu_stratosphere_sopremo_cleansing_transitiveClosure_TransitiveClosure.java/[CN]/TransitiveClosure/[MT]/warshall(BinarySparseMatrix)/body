{
  final Deque<JsonNode> rowsToExplore=new LinkedList<JsonNode>(matrix.getRows());
  while (!rowsToExplore.isEmpty()) {
    final JsonNode row=rowsToExplore.pop();
    final Deque<JsonNode> columnsToExplore=new LinkedList<JsonNode>(matrix.get(row));
    while (!columnsToExplore.isEmpty()) {
      final JsonNode column=columnsToExplore.pop();
      Set<JsonNode> transitiveColumn=matrix.get(column);
      if (transitiveColumn.isEmpty()) {
        for (        final JsonNode transitiveNode : columnsToExplore) {
          matrix.set(transitiveNode,column);
          if (!rowsToExplore.contains(column))           rowsToExplore.add(column);
        }
      }
 else {
        for (        final JsonNode transitiveNode : transitiveColumn)         if (!row.equals(transitiveNode) && !matrix.isSet(row,transitiveNode)) {
          matrix.set(row,transitiveNode);
          columnsToExplore.push(transitiveNode);
        }
      }
    }
  }
}
