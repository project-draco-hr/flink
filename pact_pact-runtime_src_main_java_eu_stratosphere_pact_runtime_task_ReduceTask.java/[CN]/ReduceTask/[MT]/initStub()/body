{
  this.config=new TaskConfig(getRuntimeConfiguration());
  this.availableMemory=this.config.getMemorySize();
  this.maxFileHandles=this.config.getNumFilehandles();
  this.spillThreshold=this.config.getSortSpillingTreshold();
  long strategyMinMem=0;
switch (this.config.getLocalStrategy()) {
case SORT:
    strategyMinMem=MIN_REQUIRED_MEMORY;
  break;
case COMBININGSORT:
strategyMinMem=MIN_REQUIRED_MEMORY;
break;
case NONE:
strategyMinMem=0;
break;
}
if (this.availableMemory < strategyMinMem) {
throw new RuntimeException("The Reduce task was initialized with too little memory for local strategy " + this.config.getLocalStrategy() + " : "+ this.availableMemory+ " bytes."+ "Required is at least "+ strategyMinMem+ " bytes.");
}
try {
ClassLoader cl=LibraryCacheManager.getClassLoader(getEnvironment().getJobID());
Class<? extends ReduceStub> stubClass=this.config.getStubClass(ReduceStub.class,cl);
this.stub=stubClass.newInstance();
this.stub.configure(this.config.getStubParameters());
}
 catch (IOException ioe) {
throw new RuntimeException("Library cache manager could not be instantiated.",ioe);
}
catch (ClassNotFoundException cnfe) {
throw new RuntimeException("Stub implementation class was not found.",cnfe);
}
catch (InstantiationException ie) {
throw new RuntimeException("Stub implementation could not be instanciated.",ie);
}
catch (IllegalAccessException iae) {
throw new RuntimeException("Stub implementations nullary constructor is not accessible.",iae);
}
}
