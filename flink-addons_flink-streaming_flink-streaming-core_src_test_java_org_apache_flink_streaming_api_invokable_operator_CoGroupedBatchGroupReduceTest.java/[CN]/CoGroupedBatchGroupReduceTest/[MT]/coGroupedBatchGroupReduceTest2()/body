{
  List<Tuple2<Integer,Integer>> inputs1=new ArrayList<Tuple2<Integer,Integer>>();
  for (Integer i=1; i <= 10; i++) {
    inputs1.add(new Tuple2<Integer,Integer>(i % 3,i));
  }
  List<Tuple2<Integer,String>> inputs2=new ArrayList<Tuple2<Integer,String>>();
  for (char ch='a'; ch <= 'h'; ch++) {
    inputs2.add(new Tuple2<Integer,String>(((int)ch) % 3,ch + ""));
  }
  CoGroupedBatchGroupReduceInvokable<Tuple2<Integer,Integer>,Tuple2<Integer,String>,String> invokable=new CoGroupedBatchGroupReduceInvokable<Tuple2<Integer,Integer>,Tuple2<Integer,String>,String>(new MyCoGroupReduceFunction(),6L,6L,3L,2L,KEY_POSITION1,KEY_POSITION2);
  List<String> expected=Arrays.asList("14","25","36","47","58","69","ad","be","cf","cf","dg","eh");
  List<String> actualList=MockCoInvokable.createAndExecute(invokable,inputs1,inputs2);
  Collections.sort(expected);
  Collections.sort(actualList);
  assertEquals(expected,actualList);
}
