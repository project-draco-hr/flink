{
  FiniteDuration timeout=new FiniteDuration(30,TimeUnit.SECONDS);
  FiniteDuration jobRecoveryTimeout=new FiniteDuration(3,TimeUnit.SECONDS);
  Deadline deadline=new FiniteDuration(2,TimeUnit.MINUTES).fromNow();
  Configuration flinkConfiguration=new Configuration();
  UUID leaderSessionID=UUID.randomUUID();
  UUID newLeaderSessionID=UUID.randomUUID();
  int slots=2;
  ActorRef archive=null;
  ActorRef jobManager=null;
  ActorRef taskManager=null;
  flinkConfiguration.setString(ConfigConstants.RECOVERY_MODE,"zookeeper");
  flinkConfiguration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH,temporaryFolder.newFolder().toString());
  flinkConfiguration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,slots);
  try {
    Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
    MySubmittedJobGraphStore mySubmittedJobGraphStore=new MySubmittedJobGraphStore();
    TestingLeaderElectionService myLeaderElectionService=new TestingLeaderElectionService();
    TestingLeaderRetrievalService myLeaderRetrievalService=new TestingLeaderRetrievalService();
    InstanceManager instanceManager=new InstanceManager();
    instanceManager.addInstanceListener(scheduler);
    archive=system.actorOf(Props.create(MemoryArchivist.class,10),"archive");
    Props jobManagerProps=Props.create(TestingJobManager.class,flinkConfiguration,new ForkJoinPool(),instanceManager,scheduler,new BlobLibraryCacheManager(new BlobServer(flinkConfiguration),3600000),archive,new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(Int.MaxValue(),100),timeout,myLeaderElectionService,mySubmittedJobGraphStore,new StandaloneCheckpointRecoveryFactory(),new SavepointStore(new HeapStateStore()),jobRecoveryTimeout,Option.apply(null));
    jobManager=system.actorOf(jobManagerProps,"jobmanager");
    ActorGateway gateway=new AkkaActorGateway(jobManager,leaderSessionID);
    taskManager=TaskManager.startTaskManagerComponentsAndActor(flinkConfiguration,ResourceID.generate(),system,"localhost",Option.apply("taskmanager"),Option.apply((LeaderRetrievalService)myLeaderRetrievalService),true,TestingTaskManager.class);
    ActorGateway tmGateway=new AkkaActorGateway(taskManager,leaderSessionID);
    Future<Object> tmAlive=tmGateway.ask(TestingMessages.getAlive(),deadline.timeLeft());
    Await.ready(tmAlive,deadline.timeLeft());
    JobVertex sourceJobVertex=new JobVertex("Source");
    sourceJobVertex.setInvokableClass(BlockingInvokable.class);
    sourceJobVertex.setParallelism(slots);
    JobGraph jobGraph=new JobGraph("TestingJob",sourceJobVertex);
    Future<Object> isLeader=gateway.ask(TestingJobManagerMessages.getNotifyWhenLeader(),deadline.timeLeft());
    Future<Object> isConnectedToJobManager=tmGateway.ask(new TestingTaskManagerMessages.NotifyWhenRegisteredAtJobManager(jobManager),deadline.timeLeft());
    myLeaderElectionService.isLeader(leaderSessionID);
    myLeaderRetrievalService.notifyListener(gateway.path(),leaderSessionID);
    Await.ready(isLeader,deadline.timeLeft());
    Await.ready(isConnectedToJobManager,deadline.timeLeft());
    Future<Object> jobSubmitted=gateway.ask(new JobManagerMessages.SubmitJob(jobGraph,ListeningBehaviour.DETACHED),deadline.timeLeft());
    Await.ready(jobSubmitted,deadline.timeLeft());
    Future<Object> jobRemoved=gateway.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()),deadline.timeLeft());
    myLeaderElectionService.notLeader();
    Await.ready(jobRemoved,deadline.timeLeft());
    assertTrue(mySubmittedJobGraphStore.contains(jobGraph.getJobID()));
    Future<Object> jobRunning=gateway.ask(new TestingJobManagerMessages.NotifyWhenJobStatus(jobGraph.getJobID(),JobStatus.RUNNING),deadline.timeLeft());
    myLeaderElectionService.isLeader(newLeaderSessionID);
    myLeaderRetrievalService.notifyListener(gateway.path(),newLeaderSessionID);
    Await.ready(jobRunning,deadline.timeLeft());
    Future<Object> jobFinished=gateway.ask(new TestingJobManagerMessages.NotifyWhenJobRemoved(jobGraph.getJobID()),deadline.timeLeft());
    BlockingInvokable.unblock();
    Await.ready(jobFinished,deadline.timeLeft());
    assertFalse(mySubmittedJobGraphStore.contains(jobGraph.getJobID()));
  }
  finally {
    if (archive != null) {
      archive.tell(PoisonPill.getInstance(),ActorRef.noSender());
    }
    if (jobManager != null) {
      jobManager.tell(PoisonPill.getInstance(),ActorRef.noSender());
    }
    if (taskManager != null) {
      taskManager.tell(PoisonPill.getInstance(),ActorRef.noSender());
    }
  }
}
