{
  final ServerSocket server=new ServerSocket(0);
  final int port=server.getLocalPort();
  try {
    final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
    Thread serverRunner=new Thread("Test server runner"){
      @Override public void run(){
        try {
          Socket sk=server.accept();
          sk.close();
        }
 catch (        Throwable t) {
          error.set(t);
        }
      }
    }
;
    serverRunner.start();
    SocketClientSink<String> simpleSink=new SocketClientSink<>(host,port,simpleSchema,0,true);
    simpleSink.open(new Configuration());
    serverRunner.join();
    if (error.get() != null) {
      Throwable t=error.get();
      t.printStackTrace();
      fail("Error in server thread: " + t.getMessage());
    }
    try {
      simpleSink.invoke(TEST_MESSAGE + '\n');
      simpleSink.invoke(TEST_MESSAGE + '\n');
      fail("This should have failed with an exception");
    }
 catch (    IOException e) {
      assertTrue("Wrong exception",e.getMessage().contains(EXCEPTION_MESSGAE));
    }
catch (    Exception e) {
      fail("wrong exception: " + e.getClass().getName() + " - "+ e.getMessage());
    }
    assertEquals(0,simpleSink.getCurrentNumberOfRetries());
  }
  finally {
    IOUtils.closeQuietly(server);
  }
}
