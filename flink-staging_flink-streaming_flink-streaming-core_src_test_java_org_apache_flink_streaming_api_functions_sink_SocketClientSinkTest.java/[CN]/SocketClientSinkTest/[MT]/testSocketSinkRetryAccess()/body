{
  final ServerSocket server1=new ServerSocket(0);
  final int port=server1.getLocalPort();
  final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  Thread serverRunner=new Thread("Test server runner"){
    @Override public void run(){
      try {
        Socket sk=server1.accept();
        sk.close();
      }
 catch (      Throwable t) {
        error.set(t);
      }
 finally {
        IOUtils.closeQuietly(server1);
      }
    }
  }
;
  serverRunner.start();
  final SocketClientSink<String> simpleSink=new SocketClientSink<>(host,port,simpleSchema,-1,true);
  simpleSink.open(new Configuration());
  serverRunner.join();
  if (error.get() != null) {
    Throwable t=error.get();
    t.printStackTrace();
    fail("Error in server thread: " + t.getMessage());
  }
  Thread sinkRunner=new Thread("Test sink runner"){
    @Override public void run(){
      try {
        simpleSink.invoke(TEST_MESSAGE + '\n');
        simpleSink.invoke(TEST_MESSAGE + '\n');
      }
 catch (      Throwable t) {
        error.set(t);
      }
    }
  }
;
  sinkRunner.start();
  ServerSocket server2=new ServerSocket(port);
  Socket sk=server2.accept();
  BufferedReader rdr=new BufferedReader(new InputStreamReader(sk.getInputStream()));
  String value=rdr.readLine();
  int retry=simpleSink.getCurrentNumberOfRetries();
  sinkRunner.join();
  if (error.get() != null) {
    Throwable t=error.get();
    t.printStackTrace();
    fail("Error in spawned thread: " + t.getMessage());
  }
  assertEquals(TEST_MESSAGE,value);
  assertTrue(retry > 0);
}
