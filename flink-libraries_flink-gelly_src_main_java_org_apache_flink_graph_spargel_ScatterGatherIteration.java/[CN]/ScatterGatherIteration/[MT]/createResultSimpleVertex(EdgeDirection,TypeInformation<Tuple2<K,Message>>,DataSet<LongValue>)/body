{
  DataSet<Tuple2<K,Message>> messages;
  TypeInformation<Vertex<K,VV>> vertexTypes=initialVertices.getType();
  final DeltaIteration<Vertex<K,VV>,Vertex<K,VV>> iteration=initialVertices.iterateDelta(initialVertices,this.maximumNumberOfIterations,0);
  setUpIteration(iteration);
switch (messagingDirection) {
case IN:
    messages=buildMessagingFunction(iteration,messageTypeInfo,1,0,numberOfVertices);
  break;
case OUT:
messages=buildMessagingFunction(iteration,messageTypeInfo,0,0,numberOfVertices);
break;
case ALL:
messages=buildMessagingFunction(iteration,messageTypeInfo,1,0,numberOfVertices).union(buildMessagingFunction(iteration,messageTypeInfo,0,0,numberOfVertices));
break;
default :
throw new IllegalArgumentException("Illegal edge direction");
}
VertexUpdateUdf<K,VV,Message> updateUdf=new VertexUpdateUdfSimpleVV<K,VV,Message>(updateFunction,vertexTypes);
CoGroupOperator<?,?,Vertex<K,VV>> updates=messages.coGroup(iteration.getSolutionSet()).where(0).equalTo(0).with(updateUdf);
if (this.configuration != null && this.configuration.isOptNumVertices()) {
updates=updates.withBroadcastSet(numberOfVertices,"number of vertices");
}
configureUpdateFunction(updates);
return iteration.closeWith(updates,updates);
}
