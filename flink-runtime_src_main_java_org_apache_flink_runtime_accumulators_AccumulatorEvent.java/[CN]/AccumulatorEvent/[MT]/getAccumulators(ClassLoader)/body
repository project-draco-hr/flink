{
  if (loader == null) {
    throw new NullPointerException();
  }
  if (this.accumulators == null) {
    ByteArrayInputStream bais=new ByteArrayInputStream(serializedData);
    ObjectInputStream ios=null;
    try {
      ios=new ObjectInputStream(bais);
    }
 catch (    IOException e) {
      throw new RuntimeException("Error while creating the object input stream.");
    }
    int numAccumulators=0;
    try {
      numAccumulators=ios.readInt();
    }
 catch (    IOException e) {
      throw new RuntimeException("Error while reading the number of serialized " + "accumulators.");
    }
    this.accumulators=new HashMap<String,Accumulator<?,?>>(numAccumulators);
    for (int i=0; i < numAccumulators; i++) {
      String accumulatorName;
      try {
        accumulatorName=ios.readUTF();
      }
 catch (      IOException e) {
        throw new RuntimeException("Error while reading the " + i + "th accumulator "+ "name.");
      }
      String className;
      try {
        className=ios.readUTF();
      }
 catch (      IOException e) {
        throw new RuntimeException("Error while reading the " + i + "th accumulator "+ "class name.");
      }
      Accumulator<?,?> accumulator;
      try {
        @SuppressWarnings("unchecked") Class<? extends Accumulator<?,?>> valClass=(Class<? extends Accumulator<?,?>>)Class.forName(className,true,loader);
        accumulator=InstantiationUtil.instantiate(valClass,Accumulator.class);
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException("Could not load user-defined class '" + className + "'.",e);
      }
catch (      ClassCastException e) {
        throw new RuntimeException("User-defined accumulator class is not an Accumulator sublass.");
      }
      try {
        accumulator.read(ios);
      }
 catch (      IOException e) {
        throw new RuntimeException("Error while deserializing the user-defined aggregate class.",e);
      }
      accumulators.put(accumulatorName,accumulator);
    }
    try {
      ios.close();
    }
 catch (    IOException e) {
      throw new RuntimeException("Error while closing the InputObjectStream.");
    }
    try {
      bais.close();
    }
 catch (    IOException e) {
      throw new RuntimeException("Error while closing the ByteArrayInputStream.");
    }
  }
  return accumulators;
}
