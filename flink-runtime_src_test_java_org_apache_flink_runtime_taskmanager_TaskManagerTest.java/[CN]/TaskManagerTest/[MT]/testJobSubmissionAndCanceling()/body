{
  new JavaTestKit(system){
{
      try {
        ActorRef jobManager=system.actorOf(Props.create(SimpleJobManager.class));
        final ActorRef tm=createTaskManager(jobManager);
        final JobID jid1=new JobID();
        final JobID jid2=new JobID();
        JobVertexID vid1=new JobVertexID();
        JobVertexID vid2=new JobVertexID();
        final ExecutionAttemptID eid1=new ExecutionAttemptID();
        final ExecutionAttemptID eid2=new ExecutionAttemptID();
        final TaskDeploymentDescriptor tdd1=new TaskDeploymentDescriptor(jid1,vid1,eid1,"TestTask1",1,5,new Configuration(),new Configuration(),TestInvokableBlockingCancelable.class.getName(),Collections.<GateDeploymentDescriptor>emptyList(),Collections.<GateDeploymentDescriptor>emptyList(),new ArrayList<BlobKey>(),0);
        final TaskDeploymentDescriptor tdd2=new TaskDeploymentDescriptor(jid2,vid2,eid2,"TestTask2",2,7,new Configuration(),new Configuration(),TestInvokableBlockingCancelable.class.getName(),Collections.<GateDeploymentDescriptor>emptyList(),Collections.<GateDeploymentDescriptor>emptyList(),new ArrayList<BlobKey>(),0);
        final FiniteDuration d=duration("1 second");
        new Within(d){
          @Override protected void run(){
            try {
              tm.tell(new SubmitTask(tdd1),getRef());
              tm.tell(new SubmitTask(tdd2),getRef());
              expectMsgEquals(new TaskOperationResult(eid1,true));
              expectMsgEquals(new TaskOperationResult(eid2,true));
              tm.tell(TestingTaskManagerMessages.getRequestRunningTasksMessage(),getRef());
              Map<ExecutionAttemptID,Task> runningTasks=expectMsgClass(TestingTaskManagerMessages.ResponseRunningTasks.class).asJava();
              assertEquals(2,runningTasks.size());
              Task t1=runningTasks.get(eid1);
              Task t2=runningTasks.get(eid2);
              assertNotNull(t1);
              assertNotNull(t2);
              assertEquals(ExecutionState.RUNNING,t1.getExecutionState());
              assertEquals(ExecutionState.RUNNING,t2.getExecutionState());
              tm.tell(new CancelTask(eid1),getRef());
              expectMsgEquals(new TaskOperationResult(eid1,true));
              Future<Object> response=Patterns.ask(tm,new TestingTaskManagerMessages.NotifyWhenTaskRemoved(eid1),timeout);
              Await.ready(response,d);
              assertEquals(ExecutionState.CANCELED,t1.getExecutionState());
              tm.tell(TestingTaskManagerMessages.getRequestRunningTasksMessage(),getRef());
              runningTasks=expectMsgClass(TestingTaskManagerMessages.ResponseRunningTasks.class).asJava();
              assertEquals(1,runningTasks.size());
              tm.tell(new CancelTask(eid1),getRef());
              expectMsgEquals(new TaskOperationResult(eid1,false,"No task with that execution ID was " + "found."));
              tm.tell(new CancelTask(eid2),getRef());
              expectMsgEquals(new TaskOperationResult(eid2,true));
              response=Patterns.ask(tm,new TestingTaskManagerMessages.NotifyWhenTaskRemoved(eid2),timeout);
              Await.ready(response,d);
              assertEquals(ExecutionState.CANCELED,t2.getExecutionState());
              tm.tell(TestingTaskManagerMessages.getRequestRunningTasksMessage(),getRef());
              runningTasks=expectMsgClass(TestingTaskManagerMessages.ResponseRunningTasks.class).asJava();
              assertEquals(0,runningTasks.size());
            }
 catch (            Exception e) {
              e.printStackTrace();
              fail(e.getMessage());
            }
          }
        }
;
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
    }
  }
;
}
