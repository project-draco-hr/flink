{
  new JavaTestKit(system){
{
      ActorGateway jobManager=null;
      ActorGateway taskManager=null;
      final ActorGateway testActorGateway=new AkkaActorGateway(getTestActor(),leaderSessionID);
      try {
        final JobID jid=new JobID();
        JobVertexID vid1=new JobVertexID();
        JobVertexID vid2=new JobVertexID();
        final ExecutionAttemptID eid1=new ExecutionAttemptID();
        final ExecutionAttemptID eid2=new ExecutionAttemptID();
        ActorRef jm=system.actorOf(Props.create(new SimpleLookupFailingUpdateJobManagerCreator(leaderSessionID,eid2)));
        jobManager=new AkkaActorGateway(jm,leaderSessionID);
        taskManager=TestingUtils.createTaskManager(system,jobManager,new Configuration(),true,true);
        final ActorGateway tm=taskManager;
        IntermediateResultPartitionID partitionId=new IntermediateResultPartitionID();
        List<ResultPartitionDeploymentDescriptor> irpdd=new ArrayList<ResultPartitionDeploymentDescriptor>();
        irpdd.add(new ResultPartitionDeploymentDescriptor(new IntermediateDataSetID(),partitionId,ResultPartitionType.PIPELINED,1,false));
        InputGateDeploymentDescriptor ircdd=new InputGateDeploymentDescriptor(new IntermediateDataSetID(),0,new InputChannelDeploymentDescriptor[]{new InputChannelDeploymentDescriptor(new ResultPartitionID(partitionId,eid1),ResultPartitionLocation.createLocal())});
        final TaskDeploymentDescriptor tdd1=new TaskDeploymentDescriptor(jid,vid1,eid1,"Sender",0,1,0,new Configuration(),new Configuration(),Tasks.Sender.class.getName(),irpdd,Collections.<InputGateDeploymentDescriptor>emptyList(),new ArrayList<BlobKey>(),Collections.<URL>emptyList(),0);
        final TaskDeploymentDescriptor tdd2=new TaskDeploymentDescriptor(jid,vid2,eid2,"Receiver",2,7,0,new Configuration(),new Configuration(),Tasks.BlockingReceiver.class.getName(),Collections.<ResultPartitionDeploymentDescriptor>emptyList(),Collections.singletonList(ircdd),new ArrayList<BlobKey>(),Collections.<URL>emptyList(),0);
        new Within(d){
          @Override protected void run(){
            try {
              Future<Object> t1Running=tm.ask(new TestingTaskManagerMessages.NotifyWhenTaskIsRunning(eid1),timeout);
              Future<Object> t2Running=tm.ask(new TestingTaskManagerMessages.NotifyWhenTaskIsRunning(eid2),timeout);
              tm.tell(new SubmitTask(tdd2),testActorGateway);
              tm.tell(new SubmitTask(tdd1),testActorGateway);
              expectMsgEquals(Messages.getAcknowledge());
              expectMsgEquals(Messages.getAcknowledge());
              Await.ready(t1Running,d);
              Await.ready(t2Running,d);
              tm.tell(TestingTaskManagerMessages.getRequestRunningTasksMessage(),testActorGateway);
              Map<ExecutionAttemptID,Task> tasks=expectMsgClass(TestingTaskManagerMessages.ResponseRunningTasks.class).asJava();
              Task t1=tasks.get(eid1);
              Task t2=tasks.get(eid2);
              tm.tell(new CancelTask(eid2),testActorGateway);
              expectMsgEquals(new TaskOperationResult(eid2,true));
              if (t2 != null) {
                Future<Object> response=tm.ask(new TestingTaskManagerMessages.NotifyWhenTaskRemoved(eid2),timeout);
                Await.ready(response,d);
              }
              if (t1 != null) {
                if (t1.getExecutionState() == ExecutionState.RUNNING) {
                  tm.tell(new CancelTask(eid1),testActorGateway);
                  expectMsgEquals(new TaskOperationResult(eid1,true));
                }
                Future<Object> response=tm.ask(new TestingTaskManagerMessages.NotifyWhenTaskRemoved(eid1),timeout);
                Await.ready(response,d);
              }
              tm.tell(TestingTaskManagerMessages.getRequestRunningTasksMessage(),testActorGateway);
              tasks=expectMsgClass(TestingTaskManagerMessages.ResponseRunningTasks.class).asJava();
              assertEquals(0,tasks.size());
            }
 catch (            Exception e) {
              e.printStackTrace();
              fail(e.getMessage());
            }
          }
        }
;
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
 finally {
        TestingUtils.stopActor(taskManager);
        TestingUtils.stopActor(jobManager);
      }
    }
  }
;
}
