{
  new JavaTestKit(system){
{
      final JobID jid=new JobID();
      JobVertexID vid1=new JobVertexID();
      JobVertexID vid2=new JobVertexID();
      final ExecutionAttemptID eid1=new ExecutionAttemptID();
      final ExecutionAttemptID eid2=new ExecutionAttemptID();
      final ChannelID senderId=new ChannelID();
      final ChannelID receiverId=new ChannelID();
      ActorRef jm=system.actorOf(Props.create(new SimpleLookupFailingUpdateJobManagerCreator(receiverId)));
      final ActorRef tm=createTaskManager(jm);
      ChannelDeploymentDescriptor cdd=new ChannelDeploymentDescriptor(senderId,receiverId);
      final TaskDeploymentDescriptor tdd1=new TaskDeploymentDescriptor(jid,vid1,eid1,"Sender",0,1,new Configuration(),new Configuration(),Sender.class.getName(),Collections.singletonList(new GateDeploymentDescriptor(Collections.singletonList(cdd))),Collections.<GateDeploymentDescriptor>emptyList(),new ArrayList<BlobKey>(),0);
      final TaskDeploymentDescriptor tdd2=new TaskDeploymentDescriptor(jid,vid2,eid2,"Receiver",2,7,new Configuration(),new Configuration(),ReceiverBlocking.class.getName(),Collections.<GateDeploymentDescriptor>emptyList(),Collections.singletonList(new GateDeploymentDescriptor(Collections.singletonList(cdd))),new ArrayList<BlobKey>(),0);
      final FiniteDuration d=duration("1 second");
      new Within(d){
        @Override protected void run(){
          try {
            tm.tell(new SubmitTask(tdd2),getRef());
            tm.tell(new SubmitTask(tdd1),getRef());
            expectMsgEquals(new TaskOperationResult(eid2,true));
            expectMsgEquals(new TaskOperationResult(eid1,true));
            tm.tell(TestingTaskManagerMessages.getRequestRunningTasksMessage(),getRef());
            Map<ExecutionAttemptID,Task> tasks=expectMsgClass(TestingTaskManagerMessages.ResponseRunningTasks.class).asJava();
            Task t1=tasks.get(eid1);
            Task t2=tasks.get(eid2);
            tm.tell(new CancelTask(eid2),getRef());
            expectMsgEquals(new TaskOperationResult(eid2,true));
            if (t2 != null) {
              Future<Object> response=Patterns.ask(tm,new TestingTaskManagerMessages.NotifyWhenTaskRemoved(eid2),timeout);
              Await.ready(response,d);
            }
            if (t1 != null) {
              if (t1.getExecutionState() == ExecutionState.RUNNING) {
                tm.tell(new CancelTask(eid1),getRef());
                expectMsgEquals(new TaskOperationResult(eid1,true));
              }
              Future<Object> response=Patterns.ask(tm,new TestingTaskManagerMessages.NotifyWhenTaskRemoved(eid1),timeout);
              Await.ready(response,d);
            }
            tm.tell(TestingTaskManagerMessages.getRequestRunningTasksMessage(),getRef());
            tasks=expectMsgClass(TestingTaskManagerMessages.ResponseRunningTasks.class).asJava();
            assertEquals(0,tasks.size());
          }
 catch (          Exception e) {
            e.printStackTrace();
            fail(e.getMessage());
          }
        }
      }
;
    }
  }
;
}
