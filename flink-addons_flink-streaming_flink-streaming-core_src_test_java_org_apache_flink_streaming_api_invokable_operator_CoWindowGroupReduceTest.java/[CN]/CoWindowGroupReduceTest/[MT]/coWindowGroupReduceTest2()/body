{
  List<Tuple2<String,Integer>> inputs1=new ArrayList<Tuple2<String,Integer>>();
  inputs1.add(new Tuple2<String,Integer>("I",1));
  inputs1.add(new Tuple2<String,Integer>("t",2));
  inputs1.add(new Tuple2<String,Integer>("i",4));
  inputs1.add(new Tuple2<String,Integer>("s",5));
  inputs1.add(new Tuple2<String,Integer>("a",7));
  inputs1.add(new Tuple2<String,Integer>("l",7));
  inputs1.add(new Tuple2<String,Integer>("l",8));
  inputs1.add(new Tuple2<String,Integer>("o",10));
  inputs1.add(new Tuple2<String,Integer>("k",11));
  inputs1.add(new Tuple2<String,Integer>("a",11));
  inputs1.add(new Tuple2<String,Integer>("y",11));
  inputs1.add(new Tuple2<String,Integer>("!",11));
  inputs1.add(new Tuple2<String,Integer>(" ",12));
  List<Tuple2<Integer,Integer>> inputs2=new ArrayList<Tuple2<Integer,Integer>>();
  inputs2.add(new Tuple2<Integer,Integer>(10,1));
  inputs2.add(new Tuple2<Integer,Integer>(10,2));
  inputs2.add(new Tuple2<Integer,Integer>(20,2));
  inputs2.add(new Tuple2<Integer,Integer>(30,2));
  inputs2.add(new Tuple2<Integer,Integer>(10,3));
  inputs2.add(new Tuple2<Integer,Integer>(30,4));
  inputs2.add(new Tuple2<Integer,Integer>(40,5));
  inputs2.add(new Tuple2<Integer,Integer>(30,6));
  inputs2.add(new Tuple2<Integer,Integer>(20,7));
  inputs2.add(new Tuple2<Integer,Integer>(20,7));
  inputs2.add(new Tuple2<Integer,Integer>(10,7));
  inputs2.add(new Tuple2<Integer,Integer>(10,8));
  inputs2.add(new Tuple2<Integer,Integer>(30,9));
  inputs2.add(new Tuple2<Integer,Integer>(30,10));
  CoWindowGroupReduceInvokable<Tuple2<String,Integer>,Tuple2<Integer,Integer>,String> invokable=new CoWindowGroupReduceInvokable<Tuple2<String,Integer>,Tuple2<Integer,Integer>,String>(new MyCoGroupReduceFunction2(),3L,3L,3L,2L,new MyTimeStamp3(),new MyTimeStamp4());
  List<String> expected=new ArrayList<String>();
  expected.add("It");
  expected.add("is");
  expected.add("all");
  expected.add("okay!");
  expected.add("70");
  expected.add("100");
  expected.add("100");
  expected.add("90");
  List<String> actualList=MockCoInvokable.createAndExecute(invokable,inputs1,inputs2);
  Collections.sort(expected);
  Collections.sort(actualList);
  assertEquals(expected,actualList);
}
