{
  List<Long> inputs1=new ArrayList<Long>();
  inputs1.add(0L);
  inputs1.add(2L);
  inputs1.add(2L);
  inputs1.add(3L);
  inputs1.add(4L);
  inputs1.add(5L);
  inputs1.add(6L);
  inputs1.add(6L);
  inputs1.add(6L);
  inputs1.add(8L);
  inputs1.add(14L);
  inputs1.add(15L);
  inputs1.add(15L);
  List<Integer> inputs2=new ArrayList<Integer>();
  inputs2.add(0);
  inputs2.add(0);
  inputs2.add(5);
  inputs2.add(7);
  inputs2.add(7);
  inputs2.add(7);
  inputs2.add(8);
  inputs2.add(8);
  inputs2.add(8);
  inputs2.add(14);
  inputs2.add(14);
  inputs2.add(15);
  inputs2.add(16);
  CoWindowGroupReduceInvokable<Long,Integer,String> invokable=new CoWindowGroupReduceInvokable<Long,Integer,String>(new MyCoGroupReduceFunction1(),3L,4L,2L,2L,new MyTimeStamp1(),new MyTimeStamp2());
  List<String> expected=new ArrayList<String>();
  expected.add("4");
  expected.add("11");
  expected.add("27");
  expected.add("26");
  expected.add("8");
  expected.add("0");
  expected.add("14");
  expected.add("2");
  expected.add("1");
  expected.add("4");
  expected.add("6");
  expected.add("3");
  expected.add("0");
  expected.add("3");
  List<String> actualList=MockCoInvokable.createAndExecute(invokable,inputs1,inputs2);
  Collections.sort(expected);
  Collections.sort(actualList);
  assertEquals(expected,actualList);
}
