{
  final ParameterTool params=ParameterTool.fromArgs(args);
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  System.out.println("Usage: SessionWindowing --output <path>");
  env.getConfig().setGlobalJobParameters(params);
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.setParallelism(1);
  final boolean fileOutput=params.has("output");
  final List<Tuple3<String,Long,Integer>> input=new ArrayList<>();
  input.add(new Tuple3<>("a",1L,1));
  input.add(new Tuple3<>("b",1L,1));
  input.add(new Tuple3<>("b",3L,1));
  input.add(new Tuple3<>("b",5L,1));
  input.add(new Tuple3<>("c",6L,1));
  input.add(new Tuple3<>("a",10L,1));
  input.add(new Tuple3<>("c",11L,1));
  DataStream<Tuple3<String,Long,Integer>> source=env.addSource(new SourceFunction<Tuple3<String,Long,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public void run(    SourceContext<Tuple3<String,Long,Integer>> ctx) throws Exception {
      for (      Tuple3<String,Long,Integer> value : input) {
        ctx.collectWithTimestamp(value,value.f1);
        ctx.emitWatermark(new Watermark(value.f1 - 1));
        if (!fileOutput) {
          System.out.println("Collected: " + value);
        }
      }
      ctx.emitWatermark(new Watermark(Long.MAX_VALUE));
    }
    @Override public void cancel(){
    }
  }
);
  DataStream<Tuple3<String,Long,Integer>> aggregated=source.keyBy(0).window(GlobalWindows.create()).trigger(new SessionTrigger(3L)).sum(2);
  if (fileOutput) {
    aggregated.writeAsText(params.get("output"));
  }
 else {
    System.out.println("Printing result to stdout. Use --output to specify output path.");
    aggregated.print();
  }
  env.execute();
}
