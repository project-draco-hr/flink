{
  final S3BucketObjectPair bop=this.directoryStructure.toBucketObjectPair(f);
  try {
    if (!bop.hasBucket()) {
      final List<Bucket> list=this.s3Client.listBuckets();
      final S3FileStatus[] array=new S3FileStatus[list.size()];
      final Iterator<Bucket> it=list.iterator();
      int i=0;
      while (it.hasNext()) {
        final Bucket bucket=it.next();
        final long creationDate=dateToLong(bucket.getCreationDate());
        final S3FileStatus status=new S3FileStatus(extendPath(f,bucket.getName() + S3_DIRECTORY_SEPARATOR),0,true,creationDate,0L);
        array[i++]=status;
      }
      return array;
    }
    if (bop.hasBucket() && !bop.hasObject()) {
      if (!this.s3Client.doesBucketExist(bop.getBucket())) {
        throw new FileNotFoundException("Cannot find " + f.toUri());
      }
      return listBucketContent(f,bop);
    }
 else {
      final ObjectMetadata omd=this.s3Client.getObjectMetadata(bop.getBucket(),bop.getObject());
      if (objectRepresentsDirectory(bop.getObject(),omd.getContentLength())) {
        return listBucketContent(f,bop);
      }
 else {
        final S3FileStatus fileStatus=new S3FileStatus(f,omd.getContentLength(),false,dateToLong(omd.getLastModified()),0L);
        return new FileStatus[]{fileStatus};
      }
    }
  }
 catch (  AmazonClientException e) {
    throw new IOException(StringUtils.stringifyException(e));
  }
}
