{
  final String checkpointDir=GlobalConfiguration.getString(CheckpointUtils.CHECKPOINT_DIRECTORY_KEY,CheckpointUtils.DEFAULT_CHECKPOINT_DIRECTORY);
  final Buffer buffer=transferEnvelope.getBuffer();
  if (buffer != null) {
    if (buffer.isBackedByMemory()) {
      final Buffer fileBuffer=BufferFactory.createFromFile(buffer.size(),transferEnvelope.getSource(),this.fileBufferManager);
      buffer.copyToBuffer(fileBuffer);
      transferEnvelope.setBuffer(fileBuffer);
      buffer.recycleBuffer();
    }
  }
  if (this.numberOfSerializedTransferEnvelopes % ENVELOPES_PER_META_DATA_FILE == 0) {
    if (this.metaDataFileChannel != null) {
      this.metaDataFileChannel.close();
      this.metaDataFileChannel=null;
      renameCheckpointPart(checkpointDir);
      ++this.metaDataSuffix;
    }
  }
  if (this.metaDataFileChannel == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Writing checkpointing meta data to directory " + checkpointDir);
    }
    final FileOutputStream fos=new FileOutputStream(checkpointDir + File.separator + CheckpointUtils.METADATA_PREFIX+ "_"+ this.task.getVertexID()+ "_part");
    this.metaDataFileChannel=fos.getChannel();
  }
  this.transferEnvelopeSerializer.setTransferEnvelope(transferEnvelope);
  while (this.transferEnvelopeSerializer.write(this.metaDataFileChannel)) {
  }
  final EventList eventList=transferEnvelope.getEventList();
  if (eventList != null) {
    final Iterator<AbstractEvent> it=eventList.iterator();
    while (it.hasNext()) {
      if (it.next() instanceof ByteBufferedChannelCloseEvent) {
        ++this.numberOfClosedChannels;
      }
    }
  }
  ++this.numberOfSerializedTransferEnvelopes;
  if (this.numberOfClosedChannels == this.numberOfConnectedChannels) {
    if (this.metaDataFileChannel != null) {
      this.metaDataFileChannel.close();
      renameCheckpointPart(checkpointDir);
    }
    new FileOutputStream(checkpointDir + File.separator + CheckpointUtils.METADATA_PREFIX+ "_"+ this.task.getVertexID()+ "_final").close();
    this.fileBufferManager.forceCloseOfWritableSpillingFile(this.task.getVertexID());
    LOG.info("Finished persistent checkpoint for vertex " + this.task.getVertexID());
    this.task.checkpointStateChanged(CheckpointState.COMPLETE);
  }
}
