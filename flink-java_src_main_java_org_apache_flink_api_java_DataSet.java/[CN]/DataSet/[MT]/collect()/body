{
  final String id=new AbstractID().toString();
  final TypeSerializer<T> serializer=getType().createSerializer(getExecutionEnvironment().getConfig());
  this.flatMap(new Utils.CollectHelper<T>(id,serializer)).name("collect()").output(new DiscardingOutputFormat<T>()).name("collect() sink");
  JobExecutionResult res=getExecutionEnvironment().execute();
  ArrayList<byte[]> accResult=res.getAccumulatorResult(id);
  try {
    return SerializedListAccumulator.deserializeList(accResult,serializer);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Cannot find type class of collected data type.",e);
  }
catch (  IOException e) {
    throw new RuntimeException("Serialization error while deserializing collected data",e);
  }
}
