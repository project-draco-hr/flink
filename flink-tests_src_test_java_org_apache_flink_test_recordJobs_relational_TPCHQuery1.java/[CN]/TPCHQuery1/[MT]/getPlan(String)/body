{
  if (args.length != 3) {
    this.parallelism=1;
    this.lineItemInputPath="";
    this.outputPath="";
  }
 else {
    this.parallelism=Integer.parseInt(args[0]);
    this.lineItemInputPath=args[1];
    this.outputPath=args[2];
  }
  FileDataSource lineItems=new FileDataSource(new IntTupleDataInFormat(),this.lineItemInputPath,"LineItems");
  lineItems.setParallelism(this.parallelism);
  FileDataSink result=new FileDataSink(new StringTupleDataOutFormat(),this.outputPath,"Output");
  result.setParallelism(this.parallelism);
  MapOperator lineItemFilter=MapOperator.builder(new LineItemFilter()).name("LineItem Filter").build();
  lineItemFilter.setParallelism(this.parallelism);
  ReduceOperator groupByReturnFlag=ReduceOperator.builder(new GroupByReturnFlag(),StringValue.class,0).name("groupyBy").build();
  lineItemFilter.setInput(lineItems);
  groupByReturnFlag.setInput(lineItemFilter);
  result.setInput(groupByReturnFlag);
  return new Plan(result,"TPC-H 1");
}
