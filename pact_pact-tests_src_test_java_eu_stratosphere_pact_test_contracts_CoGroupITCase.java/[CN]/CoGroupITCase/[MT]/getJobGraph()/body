{
  String pathPrefix=getFilesystemProvider().getURIPrefix() + getFilesystemProvider().getTempDirPath();
  FileDataSourceContract<PactString,PactString> input_left=new FileDataSourceContract<PactString,PactString>(CoGroupTestInFormat.class,pathPrefix + "/cogroup_left");
  input_left.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  input_left.setDegreeOfParallelism(config.getInteger("CoGroupTest#NoSubtasks",1));
  FileDataSourceContract<PactString,PactString> input_right=new FileDataSourceContract<PactString,PactString>(CoGroupTestInFormat.class,pathPrefix + "/cogroup_right");
  input_right.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  input_right.setDegreeOfParallelism(config.getInteger("CoGroupTest#NoSubtasks",1));
  CoGroupContract<PactString,PactString,PactString,PactString,PactInteger> testCoGrouper=new CoGroupContract<PactString,PactString,PactString,PactString,PactInteger>(TestCoGrouper.class);
  testCoGrouper.setDegreeOfParallelism(config.getInteger("CoGroupTest#NoSubtasks",1));
  testCoGrouper.getParameters().setString(PactCompiler.HINT_LOCAL_STRATEGY,config.getString("CoGroupTest#LocalStrategy",""));
  testCoGrouper.getParameters().setString(PactCompiler.HINT_SHIP_STRATEGY,config.getString("CoGroupTest#ShipStrategy",""));
  FileDataSinkContract<PactString,PactInteger> output=new FileDataSinkContract<PactString,PactInteger>(CoGroupOutFormat.class,pathPrefix + "/result.txt");
  output.setDegreeOfParallelism(1);
  output.addInput(testCoGrouper);
  testCoGrouper.addFirstInput(input_left);
  testCoGrouper.addSecondInput(input_right);
  Plan plan=new Plan(output);
  PactCompiler pc=new PactCompiler();
  OptimizedPlan op=pc.compile(plan);
  JobGraphGenerator jgg=new JobGraphGenerator();
  return jgg.compileJobGraph(op);
}
