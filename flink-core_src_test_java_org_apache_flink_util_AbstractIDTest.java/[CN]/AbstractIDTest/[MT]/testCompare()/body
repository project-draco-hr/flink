{
  try {
    AbstractID id1=new AbstractID(0,0);
    AbstractID id2=new AbstractID(1,0);
    AbstractID id3=new AbstractID(0,1);
    AbstractID id4=new AbstractID(-1,0);
    AbstractID id5=new AbstractID(0,-1);
    AbstractID id6=new AbstractID(-1,-1);
    AbstractID id7=new AbstractID(Long.MAX_VALUE,Long.MAX_VALUE);
    AbstractID id8=new AbstractID(Long.MIN_VALUE,Long.MIN_VALUE);
    AbstractID id9=new AbstractID(Long.MAX_VALUE,Long.MIN_VALUE);
    AbstractID id10=new AbstractID(Long.MIN_VALUE,Long.MAX_VALUE);
    assertEquals(0,id1.compareTo(CommonTestUtils.createCopyWritable(id1)));
    assertEquals(0,id2.compareTo(CommonTestUtils.createCopyWritable(id2)));
    assertEquals(0,id3.compareTo(CommonTestUtils.createCopyWritable(id3)));
    assertEquals(0,id4.compareTo(CommonTestUtils.createCopyWritable(id4)));
    assertEquals(0,id5.compareTo(CommonTestUtils.createCopyWritable(id5)));
    assertEquals(0,id6.compareTo(CommonTestUtils.createCopyWritable(id6)));
    assertEquals(0,id7.compareTo(CommonTestUtils.createCopyWritable(id7)));
    assertEquals(0,id8.compareTo(CommonTestUtils.createCopyWritable(id8)));
    assertEquals(0,id9.compareTo(CommonTestUtils.createCopyWritable(id9)));
    assertEquals(0,id10.compareTo(CommonTestUtils.createCopyWritable(id10)));
    assertCompare(id1,id2,-1);
    assertCompare(id1,id3,-1);
    assertCompare(id1,id4,1);
    assertCompare(id1,id5,1);
    assertCompare(id1,id6,1);
    assertCompare(id2,id5,1);
    assertCompare(id3,id5,1);
    assertCompare(id2,id6,1);
    assertCompare(id3,id6,1);
    assertCompare(id1,id7,-1);
    assertCompare(id1,id8,1);
    assertCompare(id7,id8,1);
    assertCompare(id9,id10,-1);
    assertCompare(id7,id9,1);
    assertCompare(id7,id10,1);
    assertCompare(id8,id9,-1);
    assertCompare(id8,id10,-1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
