{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(4);
  DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.get3TupleDataSet(env);
  List<Tuple1<Boolean>> result=ds.map(new IdMapper<Tuple3<Integer,Long,String>>()).setParallelism(4).sortPartition(new KeySelector<Tuple3<Integer,Long,String>,Tuple2<Integer,Long>>(){
    @Override public Tuple2<Integer,Long> getKey(    Tuple3<Integer,Long,String> value) throws Exception {
      return new Tuple2<>(value.f0,value.f1);
    }
  }
,Order.DESCENDING).mapPartition(new OrderCheckMapper<>(new Tuple3Checker())).distinct().collect();
  String expected="(true)\n";
  compareResultAsText(result,expected);
}
