{
  int visitedCount=0;
  for (  Tuple4<IntValue,T,T,IntValue> edge : values) {
    for (int i=0; i < visitedCount; i++) {
      Tuple3<T,T,IntValue> prior=visited.get(i);
      prior.f1=edge.f2;
      int oldValue=prior.f2.getValue();
      long degreeSum=oldValue + edge.f3.getValue();
      if (degreeSum > Integer.MAX_VALUE) {
        throw new RuntimeException("Degree sum overflows IntValue");
      }
      prior.f2.setValue((int)degreeSum);
      out.collect(prior);
      prior.f2.setValue(oldValue);
    }
    if (visitedCount < groupSize) {
      if (!initialized) {
        initialized=true;
        for (int i=0; i < groupSize; i++) {
          Tuple3<T,T,IntValue> tuple=new Tuple3<>();
          tuple.f0=edge.f2.copy();
          tuple.f2=edge.f3.copy();
          visited.add(tuple);
        }
      }
 else {
        Tuple3<T,T,IntValue> copy=visited.get(visitedCount);
        edge.f2.copyTo(copy.f0);
        edge.f3.copyTo(copy.f2);
      }
      visitedCount+=1;
    }
  }
}
