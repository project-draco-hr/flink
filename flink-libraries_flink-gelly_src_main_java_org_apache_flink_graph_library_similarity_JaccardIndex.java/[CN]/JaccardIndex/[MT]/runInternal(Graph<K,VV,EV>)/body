{
  DataSet<Edge<K,Tuple2<EV,LongValue>>> neighborDegree=input.run(new EdgeTargetDegree<K,VV,EV>().setParallelism(littleParallelism));
  DataSet<Tuple4<IntValue,K,K,IntValue>> groupSpans=neighborDegree.groupBy(0).sortGroup(1,Order.ASCENDING).reduceGroup(new GenerateGroupSpans<K,EV>(groupSize)).setParallelism(littleParallelism).name("Generate group spans");
  DataSet<Tuple4<IntValue,K,K,IntValue>> groups=groupSpans.rebalance().setParallelism(littleParallelism).name("Rebalance").flatMap(new GenerateGroups<K>()).setParallelism(littleParallelism).name("Generate groups");
  DataSet<Tuple3<K,K,IntValue>> twoPaths=groups.groupBy(0,1).sortGroup(2,Order.ASCENDING).reduceGroup(new GenerateGroupPairs<K>(groupSize)).name("Generate group pairs");
  return twoPaths.groupBy(0,1).reduceGroup(new ComputeScores<K>(unboundedScores,minimumScoreNumerator,minimumScoreDenominator,maximumScoreNumerator,maximumScoreDenominator)).name("Compute scores");
}
