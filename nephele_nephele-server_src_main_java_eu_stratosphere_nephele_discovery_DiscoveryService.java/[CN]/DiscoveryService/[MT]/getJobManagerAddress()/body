{
  InetSocketAddress jobManagerAddress=null;
  DatagramSocket socket=null;
  try {
    final Set<InetAddress> targetAddresses=getBroadcastAddresses();
    if (targetAddresses.isEmpty()) {
      throw new DiscoveryException("Could not find any broadcast addresses available to this host");
    }
    socket=new DatagramSocket();
    LOG.debug("Setting socket timeout to " + CLIENTSOCKETTIMEOUT);
    socket.setSoTimeout(CLIENTSOCKETTIMEOUT);
    final DatagramPacket pongBuffer=new DatagramPacket(new byte[100],100);
    for (int retries=0; retries < DISCOVERFAILURERETRIES; retries++) {
      for (      InetAddress broadcast : targetAddresses) {
        final DatagramPacket ping=createPingPacket();
        ping.setAddress(broadcast);
        ping.setPort(DISCOVERYPORT);
        LOG.debug("Sending discovery request to " + ping.getSocketAddress());
        socket.send(ping);
      }
      try {
        socket.receive(pongBuffer);
      }
 catch (      SocketTimeoutException ste) {
        LOG.debug("Timeout wainting for discovery reply. Retrying...");
        continue;
      }
      final int ipcPort=extractIpcPort(pongBuffer);
      if (ipcPort < 0) {
        continue;
      }
      if (USEIPV6) {
        if (pongBuffer.getAddress() instanceof Inet6Address) {
          try {
            jobManagerAddress=new InetSocketAddress(InetAddress.getByAddress(pongBuffer.getAddress().getAddress()),ipcPort);
          }
 catch (          UnknownHostException e) {
            throw new DiscoveryException(StringUtils.stringifyException(e));
          }
        }
 else {
          throw new DiscoveryException(pongBuffer.getAddress() + " is not a valid IPv6 address");
        }
      }
 else {
        jobManagerAddress=new InetSocketAddress(pongBuffer.getAddress(),ipcPort);
      }
      LOG.debug("Discovered job manager at " + jobManagerAddress);
      break;
    }
  }
 catch (  IOException ioe) {
    throw new DiscoveryException(ioe.toString());
  }
 finally {
    if (socket != null) {
      socket.close();
    }
  }
  if (jobManagerAddress == null) {
    LOG.debug("Unable to discover Jobmanager via IP broadcast");
    throw new DiscoveryException("Unable to discover JobManager via IP broadcast!");
  }
  return jobManagerAddress;
}
