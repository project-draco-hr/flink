{
  int fisSize=-1;
  final Object2IntOpenHashMap<FrequentItemset> counts=new Object2IntOpenHashMap<FrequentItemset>();
  for (int i=0; i < fis.size() - 1; i++) {
    final FrequentItemset firstFi=fis.get(i);
    if (fisSize < 0)     fisSize=firstFi.items.length;
    for (int j=i + 1; j < fis.size(); j++) {
      final FrequentItemset secondFi=fis.get(j);
      if (secondFi.items.length != fisSize)       throw new IllegalArgumentException("Given frequent itemsets differ in length.");
      final FrequentItemset candidate=firstFi.union(secondFi);
      if (candidate != null) {
        final int count=counts.getInt(candidate);
        counts.put(candidate,count + 1);
      }
    }
  }
  final int neededOccurrences=(fisSize + 1) * fisSize / 2;
  final List<FrequentItemset> result=new ArrayList<FrequentItemset>();
  for (  final Entry<FrequentItemset> entry : counts.object2IntEntrySet())   if (entry.getIntValue() >= neededOccurrences)   result.add(entry.getKey());
  return result;
}
