{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple2<Long,Long>> input1=env.fromElements(new Tuple2<Long,Long>(0L,0L));
    DataSet<Tuple3<Long,Long,Long>> input2=env.fromElements(new Tuple3<Long,Long,Long>(0L,0L,0L));
    input1.coGroup(input2).where(1).equalTo(2).sortFirstGroup(0,Order.DESCENDING).sortSecondGroup(1,Order.ASCENDING).sortSecondGroup(0,Order.DESCENDING).with(new CoGroupFunction<Tuple2<Long,Long>,Tuple3<Long,Long,Long>,Long>(){
      @Override public void coGroup(      Iterable<Tuple2<Long,Long>> first,      Iterable<Tuple3<Long,Long,Long>> second,      Collector<Long> out){
      }
    }
).output(new DiscardingOutputFormat<Long>());
    Plan p=env.createProgramPlan();
    GenericDataSinkBase<?> sink=p.getDataSinks().iterator().next();
    CoGroupOperatorBase<?,?,?,?> coGroup=(CoGroupOperatorBase<?,?,?,?>)sink.getInput();
    assertNotNull(coGroup.getGroupOrderForInputOne());
    assertNotNull(coGroup.getGroupOrderForInputTwo());
    assertEquals(1,coGroup.getGroupOrderForInputOne().getNumberOfFields());
    assertEquals(0,coGroup.getGroupOrderForInputOne().getFieldNumber(0).intValue());
    assertEquals(Order.DESCENDING,coGroup.getGroupOrderForInputOne().getOrder(0));
    assertEquals(2,coGroup.getGroupOrderForInputTwo().getNumberOfFields());
    assertEquals(1,coGroup.getGroupOrderForInputTwo().getFieldNumber(0).intValue());
    assertEquals(0,coGroup.getGroupOrderForInputTwo().getFieldNumber(1).intValue());
    assertEquals(Order.ASCENDING,coGroup.getGroupOrderForInputTwo().getOrder(0));
    assertEquals(Order.DESCENDING,coGroup.getGroupOrderForInputTwo().getOrder(1));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
