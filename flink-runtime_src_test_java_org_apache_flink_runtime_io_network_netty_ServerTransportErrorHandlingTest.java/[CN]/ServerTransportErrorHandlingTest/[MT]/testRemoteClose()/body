{
  final TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);
  final CountDownLatch sync=new CountDownLatch(1);
  final ResultPartitionManager partitionManager=mock(ResultPartitionManager.class);
  when(partitionManager.createSubpartitionView(any(ResultPartitionID.class),anyInt(),any(BufferProvider.class))).thenReturn(new InfiniteSubpartitionView(outboundBuffers,sync));
  NettyProtocol protocol=new NettyProtocol(){
    @Override public ChannelHandler[] getServerChannelHandlers(){
      return new PartitionRequestProtocol(partitionManager,mock(TaskEventDispatcher.class),mock(NetworkBufferPool.class)).getServerChannelHandlers();
    }
    @Override public ChannelHandler[] getClientChannelHandlers(){
      return new ChannelHandler[]{new NettyMessageEncoder(),new ChannelInboundHandlerAdapter(){
        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg) throws Exception {
          ctx.channel().close();
        }
      }
};
    }
  }
;
  NettyServerAndClient serverAndClient=null;
  try {
    serverAndClient=initServerAndClient(protocol,createConfig());
    Channel ch=connect(serverAndClient);
    ch.writeAndFlush(new PartitionRequest(new ResultPartitionID(),0,new InputChannelID()));
    if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(),TimeUnit.MILLISECONDS)) {
      fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() + " ms to be notified about released partition.");
    }
  }
  finally {
    shutdown(serverAndClient);
  }
}
