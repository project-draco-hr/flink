{
  new JavaTestKit(system){
{
      final Deadline deadline=new FiniteDuration(3,TimeUnit.MINUTES).fromNow();
      Configuration flinkConfig=new Configuration();
      YarnConfiguration yarnConfig=new YarnConfiguration();
      TestingLeaderRetrievalService leaderRetrievalService=new TestingLeaderRetrievalService();
      String applicationMasterHostName="localhost";
      String webInterfaceURL="foobar";
      ContaineredTaskManagerParameters taskManagerParameters=new ContaineredTaskManagerParameters(1l,1l,1l,1,new HashMap<String,String>());
      ContainerLaunchContext taskManagerLaunchContext=mock(ContainerLaunchContext.class);
      int yarnHeartbeatIntervalMillis=1000;
      int maxFailedContainers=10;
      int numInitialTaskManagers=5;
      final YarnResourceManagerCallbackHandler callbackHandler=new YarnResourceManagerCallbackHandler();
      AMRMClientAsync<AMRMClient.ContainerRequest> resourceManagerClient=mock(AMRMClientAsync.class);
      NMClient nodeManagerClient=mock(NMClient.class);
      UUID leaderSessionID=UUID.randomUUID();
      final List<Container> containerList=new ArrayList<>();
      for (int i=0; i < numInitialTaskManagers; i++) {
        containerList.add(new TestingContainer("container_" + i,"localhost"));
      }
      doAnswer(new Answer(){
        int counter=0;
        @Override public Object answer(        InvocationOnMock invocation) throws Throwable {
          if (counter < containerList.size()) {
            callbackHandler.onContainersAllocated(Collections.singletonList(containerList.get(counter++)));
          }
          return null;
        }
      }
).when(resourceManagerClient).addContainerRequest(Matchers.any(AMRMClient.ContainerRequest.class));
      ActorRef resourceManager=null;
      ActorRef leader1;
      try {
        leader1=system.actorOf(Props.create(TestingUtils.ForwardingActor.class,getRef(),Option.apply(leaderSessionID)));
        resourceManager=system.actorOf(Props.create(TestingYarnFlinkResourceManager.class,flinkConfig,yarnConfig,leaderRetrievalService,applicationMasterHostName,webInterfaceURL,taskManagerParameters,taskManagerLaunchContext,yarnHeartbeatIntervalMillis,maxFailedContainers,numInitialTaskManagers,callbackHandler,resourceManagerClient,nodeManagerClient));
        leaderRetrievalService.notifyListener(leader1.path().toString(),leaderSessionID);
        final AkkaActorGateway leader1Gateway=new AkkaActorGateway(leader1,leaderSessionID);
        final AkkaActorGateway resourceManagerGateway=new AkkaActorGateway(resourceManager,leaderSessionID);
        doAnswer(new Answer(){
          @Override public Object answer(          InvocationOnMock invocation) throws Throwable {
            Container container=(Container)invocation.getArguments()[0];
            resourceManagerGateway.tell(new NotifyResourceStarted(YarnFlinkResourceManager.extractResourceID(container)),leader1Gateway);
            return null;
          }
        }
).when(nodeManagerClient).startContainer(Matchers.any(Container.class),Matchers.any(ContainerLaunchContext.class));
        expectMsgClass(deadline.timeLeft(),RegisterResourceManager.class);
        resourceManagerGateway.tell(new RegisterResourceManagerSuccessful(leader1,Collections.EMPTY_LIST));
        for (int i=0; i < containerList.size(); i++) {
          expectMsgClass(deadline.timeLeft(),Acknowledge.class);
        }
        Future<Object> taskManagerRegisteredFuture=resourceManagerGateway.ask(new NotifyWhenResourcesRegistered(numInitialTaskManagers),deadline.timeLeft());
        Await.ready(taskManagerRegisteredFuture,deadline.timeLeft());
        leaderRetrievalService.notifyListener(null,null);
        leaderRetrievalService.notifyListener(leader1.path().toString(),leaderSessionID);
        expectMsgClass(deadline.timeLeft(),RegisterResourceManager.class);
        resourceManagerGateway.tell(new RegisterResourceManagerSuccessful(leader1,Collections.EMPTY_LIST));
        for (        Container container : containerList) {
          resourceManagerGateway.tell(new NotifyResourceStarted(YarnFlinkResourceManager.extractResourceID(container)),leader1Gateway);
        }
        for (int i=0; i < containerList.size(); i++) {
          expectMsgClass(deadline.timeLeft(),Acknowledge.class);
        }
        Future<Object> numberOfRegisteredResourcesFuture=resourceManagerGateway.ask(RequestNumberOfRegisteredResources.Instance,deadline.timeLeft());
        int numberOfRegisteredResources=(Integer)Await.result(numberOfRegisteredResourcesFuture,deadline.timeLeft());
        assertEquals(numInitialTaskManagers,numberOfRegisteredResources);
      }
  finally {
        if (resourceManager != null) {
          resourceManager.tell(PoisonPill.getInstance(),ActorRef.noSender());
        }
      }
    }
  }
;
}
