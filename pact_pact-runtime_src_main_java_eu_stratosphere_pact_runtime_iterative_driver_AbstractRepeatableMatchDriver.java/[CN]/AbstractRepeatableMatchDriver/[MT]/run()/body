{
  final GenericMatcher<IT1,IT2,OT> matchStub=taskContext.getStub();
  final Collector<OT> collector=taskContext.getOutputCollector();
  final MutableObjectIterator<IT1> probeSide=taskContext.getInput(PROBESIDE_INDEX);
  final MutableObjectIterator<IT2> buildSide=taskContext.getInput(BUILDSIDE_INDEX);
  final MutableHashTable<IT2,IT1> hashJoin=Preconditions.checkNotNull(this.hashJoin);
  beforeIteration(probeSide,buildSide);
  final IT1 probeSideRecord=taskContext.<IT1>getInputSerializer(PROBESIDE_INDEX).createInstance();
  final IT2 buildSideRecord=taskContext.<IT2>getInputSerializer(BUILDSIDE_INDEX).createInstance();
  final MutableObjectIterator<IT1> probeSideForMatch=getProbeSideForMatch();
  while (running && probeSideForMatch.next(probeSideRecord)) {
    MutableHashTable.HashBucketIterator<IT2,IT1> bucket=hashJoin.getMatchesFor(probeSideRecord);
    while (bucket.next(buildSideRecord)) {
      matchStub.match(probeSideRecord,buildSideRecord,collector);
    }
  }
}
