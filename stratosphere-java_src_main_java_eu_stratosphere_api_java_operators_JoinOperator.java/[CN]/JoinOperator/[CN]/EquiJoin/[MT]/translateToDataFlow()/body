{
  String name=getName() != null ? getName() : function.getClass().getName();
  if (super.keys1 instanceof Keys.SelectorFunctionKeys && super.keys2 instanceof Keys.SelectorFunctionKeys && super.keys1.areCompatibale(super.keys2)) {
    @SuppressWarnings("unchecked") Keys.SelectorFunctionKeys<I1,?> selectorKeys1=(Keys.SelectorFunctionKeys<I1,?>)super.keys1;
    @SuppressWarnings("unchecked") Keys.SelectorFunctionKeys<I2,?> selectorKeys2=(Keys.SelectorFunctionKeys<I2,?>)super.keys2;
    return translateSelectorFunctionJoin(selectorKeys1,selectorKeys2,function,getInput1Type(),getInput2Type(),getResultType(),name);
  }
 else   if (super.keys1 instanceof Keys.FieldPositionKeys && super.keys2 instanceof Keys.FieldPositionKeys && super.keys1.areCompatibale(super.keys2)) {
    int[] logicalKeyPositions1=super.keys1.computeLogicalKeyPositions();
    int[] logicalKeyPositions2=super.keys2.computeLogicalKeyPositions();
    return new BinaryNodeTranslation(new PlanJoinOperator<I1,I2,OUT>(function,logicalKeyPositions1,logicalKeyPositions2,name,getInput1Type(),getInput2Type(),getResultType()));
  }
 else {
    throw new UnsupportedOperationException("Unrecognized or incompatible key types.");
  }
}
