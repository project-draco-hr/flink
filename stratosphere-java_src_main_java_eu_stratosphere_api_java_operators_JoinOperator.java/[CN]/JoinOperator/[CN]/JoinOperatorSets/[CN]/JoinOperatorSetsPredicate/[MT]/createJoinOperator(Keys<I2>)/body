{
  if (keys2 == null) {
    throw new NullPointerException("The join keys may not be null.");
  }
  if (keys2.isEmpty()) {
    throw new InvalidProgramException("The join keys may not be empty.");
  }
  if (!keys1.areCompatibale(keys2)) {
    throw new InvalidProgramException("The pair of join keys are not compatible with each other.");
  }
  if (input1 instanceof SolutionSetPlaceHolder) {
    if (keys1 instanceof FieldPositionKeys) {
      int[] positions=((FieldPositionKeys<?>)keys1).computeLogicalKeyPositions();
      ((SolutionSetPlaceHolder<?>)input1).checkJoinKeyFields(positions);
    }
 else {
      throw new InvalidProgramException("Currently, the solution set may only be joined with using tuple field positions.");
    }
  }
  if (input2 instanceof SolutionSetPlaceHolder) {
    if (keys2 instanceof FieldPositionKeys) {
      int[] positions=((FieldPositionKeys<?>)keys2).computeLogicalKeyPositions();
      ((SolutionSetPlaceHolder<?>)input2).checkJoinKeyFields(positions);
    }
 else {
      throw new InvalidProgramException("Currently, the solution set may only be joined with using tuple field positions.");
    }
  }
  return new DefaultJoin<I1,I2>(input1,input2,keys1,keys2,joinHint);
}
