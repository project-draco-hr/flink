{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple5<Integer,Long,Integer,String,Long>> ds1=CollectionDataSets.get5TupleDataSet(env);
  DataSet<Tuple3<Integer,Long,String>> ds2=CollectionDataSets.get3TupleDataSet(env);
  DataSet<Tuple3<Integer,Long,String>> coGrouped=ds1.coGroup(ds2).where(new KeySelector<Tuple5<Integer,Long,Integer,String,Long>,Tuple2<Integer,Long>>(){
    @Override public Tuple2<Integer,Long> getKey(    Tuple5<Integer,Long,Integer,String,Long> t) throws Exception {
      return new Tuple2<Integer,Long>(t.f0,t.f4);
    }
  }
).equalTo(new KeySelector<Tuple3<Integer,Long,String>,Tuple2<Integer,Long>>(){
    @Override public Tuple2<Integer,Long> getKey(    Tuple3<Integer,Long,String> t){
      return new Tuple2<Integer,Long>(t.f0,t.f1);
    }
  }
).with(new CoGroupFunction<Tuple5<Integer,Long,Integer,String,Long>,Tuple3<Integer,Long,String>,Tuple3<Integer,Long,String>>(){
    @Override public void coGroup(    Iterable<Tuple5<Integer,Long,Integer,String,Long>> first,    Iterable<Tuple3<Integer,Long,String>> second,    Collector<Tuple3<Integer,Long,String>> out){
      List<String> strs=new ArrayList<String>();
      for (      Tuple5<Integer,Long,Integer,String,Long> t : first) {
        strs.add(t.f3);
      }
      for (      Tuple3<Integer,Long,String> t : second) {
        for (        String s : strs) {
          out.collect(new Tuple3<Integer,Long,String>(t.f0,t.f1,s));
        }
      }
    }
  }
);
  List<Tuple3<Integer,Long,String>> result=coGrouped.collect();
  String expected="1,1,Hallo\n" + "2,2,Hallo Welt\n" + "3,2,Hallo Welt wie gehts?\n"+ "3,2,ABC\n"+ "5,3,HIJ\n"+ "5,3,IJK\n";
  compareResultAsTuples(result,expected);
}
