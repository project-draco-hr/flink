{
  final StringWriter processOutput1=new StringWriter();
  final StringWriter processOutput2=new StringWriter();
  final StringWriter processOutput3=new StringWriter();
  ActorSystem jmActorSystem=null;
  Process taskManagerProcess1=null;
  Process taskManagerProcess2=null;
  Process taskManagerProcess3=null;
  File coordinateTempDir=null;
  try {
    String javaCommand=getJavaCommandPath();
    if (javaCommand == null) {
      System.out.println("---- Skipping Process Failure test : Could not find java executable ----");
      return;
    }
    File tempLogFile=File.createTempFile(getClass().getSimpleName() + "-","-log4j.properties");
    tempLogFile.deleteOnExit();
    CommonTestUtils.printLog4jDebugConfig(tempLogFile);
    coordinateTempDir=CommonTestUtils.createTempDirectory();
    final int jobManagerPort=NetUtils.getAvailablePort();
    Tuple2<String,Object> localAddress=new Tuple2<String,Object>("localhost",jobManagerPort);
    Configuration jmConfig=new Configuration();
    jmConfig.setString(ConfigConstants.AKKA_WATCH_HEARTBEAT_INTERVAL,"1000 ms");
    jmConfig.setString(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE,"6 s");
    jmConfig.setInteger(ConfigConstants.AKKA_WATCH_THRESHOLD,9);
    jmConfig.setString(ConfigConstants.DEFAULT_EXECUTION_RETRY_DELAY_KEY,"10 s");
    jmActorSystem=AkkaUtils.createActorSystem(jmConfig,new Some<Tuple2<String,Object>>(localAddress));
    ActorRef jmActor=JobManager.startJobManagerActors(jmConfig,jmActorSystem,StreamingMode.STREAMING,JobManager.class,MemoryArchivist.class)._1();
    String[] command=new String[]{javaCommand,"-Dlog.level=DEBUG","-Dlog4j.configuration=file:" + tempLogFile.getAbsolutePath(),"-Xms80m","-Xmx80m","-classpath",getCurrentClasspath(),TaskManagerProcessEntryPoint.class.getName(),String.valueOf(jobManagerPort)};
    taskManagerProcess1=new ProcessBuilder(command).start();
    new CommonTestUtils.PipeForwarder(taskManagerProcess1.getErrorStream(),processOutput1);
    taskManagerProcess2=new ProcessBuilder(command).start();
    new CommonTestUtils.PipeForwarder(taskManagerProcess2.getErrorStream(),processOutput2);
    waitUntilNumTaskManagersAreRegistered(jmActor,2,120000);
    final File coordinateDirClosure=coordinateTempDir;
    final AtomicReference<Throwable> errorRef=new AtomicReference<>();
    Thread programTrigger=new Thread("Program Trigger"){
      @Override public void run(){
        try {
          testTaskManagerFailure(jobManagerPort,coordinateDirClosure);
        }
 catch (        Throwable t) {
          t.printStackTrace();
          errorRef.set(t);
        }
      }
    }
;
    programTrigger.start();
    if (!waitForMarkerFiles(coordinateTempDir,READY_MARKER_FILE_PREFIX,PARALLELISM,120000)) {
      if (errorRef.get() != null) {
        Throwable error=errorRef.get();
        error.printStackTrace();
        fail("The program encountered a " + error.getClass().getSimpleName() + " : "+ error.getMessage());
      }
 else {
        fail("The tasks were not started within time (" + 120000 + "msecs)");
      }
    }
    taskManagerProcess3=new ProcessBuilder(command).start();
    new CommonTestUtils.PipeForwarder(taskManagerProcess3.getErrorStream(),processOutput3);
    waitUntilNumTaskManagersAreRegistered(jmActor,3,120000);
    taskManagerProcess1.destroy();
    taskManagerProcess1=null;
    touchFile(new File(coordinateTempDir,PROCEED_MARKER_FILE));
    programTrigger.join(300000);
    assertFalse("The program did not finish in time",programTrigger.isAlive());
    if (errorRef.get() != null) {
      Throwable error=errorRef.get();
      error.printStackTrace();
      fail("The program encountered a " + error.getClass().getSimpleName() + " : "+ error.getMessage());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    printProcessLog("TaskManager 1",processOutput1.toString());
    printProcessLog("TaskManager 2",processOutput2.toString());
    printProcessLog("TaskManager 3",processOutput3.toString());
    fail(e.getMessage());
  }
catch (  Error e) {
    e.printStackTrace();
    printProcessLog("TaskManager 1",processOutput1.toString());
    printProcessLog("TaskManager 2",processOutput2.toString());
    printProcessLog("TaskManager 3",processOutput3.toString());
    throw e;
  }
 finally {
    if (taskManagerProcess1 != null) {
      taskManagerProcess1.destroy();
    }
    if (taskManagerProcess2 != null) {
      taskManagerProcess2.destroy();
    }
    if (taskManagerProcess3 != null) {
      taskManagerProcess3.destroy();
    }
    if (jmActorSystem != null) {
      jmActorSystem.shutdown();
    }
    if (coordinateTempDir != null) {
      try {
        FileUtils.deleteDirectory(coordinateTempDir);
      }
 catch (      Throwable t) {
      }
    }
  }
}
