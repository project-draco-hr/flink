{
  if (this.failedVertices.isEmpty()) {
    LOG.error("No failed vertices to recover");
  }
  List<CheckpointReplayResult> replayCheckpoints=new ArrayList();
  Iterator<ExecutionVertex> vertexIter=this.failedVertices.iterator();
  while (vertexIter.hasNext()) {
    ExecutionVertex failed=vertexIter.next();
    LOG.info("Staring Recovery for " + failed);
    findRestarts(failed);
    Iterator<ExecutionVertexID> checkpointIterator=this.globalConsistentCheckpoint.iterator();
    while (checkpointIterator.hasNext()) {
      ExecutionVertexID checkpoint=checkpointIterator.next();
      AbstractInstance instance=job.getVertexByID(checkpoint).getAllocatedResource().getInstance();
      try {
        replayCheckpoints.addAll(instance.replayCheckpoints(this.globalConsistentCheckpoint));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  for (  CheckpointReplayResult replayResult : replayCheckpoints) {
    if (replayResult.getReturnCode() == ReturnCode.ERROR) {
      LOG.info("Replay of Checkpoints return Error " + replayResult.getDescription());
      return;
    }
  }
  this.job.executionStateChanged(this.job.getJobID(),null,ExecutionState.RERUNNING,null);
  LOG.info("Recovery Finsihed");
}
