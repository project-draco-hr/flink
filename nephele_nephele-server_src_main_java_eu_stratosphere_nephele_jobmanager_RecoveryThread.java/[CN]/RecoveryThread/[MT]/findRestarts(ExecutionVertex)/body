{
  ArrayList<ExecutionVertex> restart=new ArrayList<ExecutionVertex>();
  Queue<ExecutionVertex> totest=new ArrayDeque<ExecutionVertex>();
  ArrayList<ExecutionVertex> visited=new ArrayList<ExecutionVertex>();
  totest.add(failed);
  ExecutionVertex vertex=failed;
  while (!totest.isEmpty()) {
    vertex=totest.peek();
    totest.remove(vertex);
    if (!restart.contains(vertex)) {
      restart.add(vertex);
    }
    for (int j=0; j < vertex.getNumberOfPredecessors(); j++) {
      ExecutionVertex predecessor=vertex.getPredecessor(j);
      if (predecessor.getCheckpointState() != CheckpointState.PARTIAL) {
        restart.add(predecessor);
        if (!visited.contains(predecessor)) {
          totest.add(predecessor);
        }
      }
 else {
        if (!this.globalConsistentCheckpoint.contains(predecessor.getID())) {
          this.globalConsistentCheckpoint.add(predecessor.getID());
        }
      }
    }
    visited.add(vertex);
  }
  return restart;
}
