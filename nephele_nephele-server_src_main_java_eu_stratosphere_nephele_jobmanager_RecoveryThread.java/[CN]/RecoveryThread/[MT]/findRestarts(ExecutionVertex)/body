{
  ArrayList<ExecutionVertex> restart=new ArrayList<ExecutionVertex>();
  Queue<ExecutionVertex> totest=new PriorityQueue<ExecutionVertex>();
  ArrayList<ExecutionVertex> visited=new ArrayList<ExecutionVertex>();
  totest.add(failed);
  while (!totest.isEmpty()) {
    ExecutionVertex vertex=totest.poll();
    System.out.println("Testing " + vertex.getName());
    if (!restart.contains(vertex)) {
      restart.add(vertex);
    }
    for (int i=0; i < vertex.getNumberOfSuccessors(); i++) {
      ExecutionVertex successor=vertex.getSuccessor(i);
      if (successor.isCheckpoint()) {
        this.checkpoints.remove(successor);
      }
      restart.add(successor);
      LOG.info("add " + successor.getName() + " torestart");
      List<ExecutionVertex> follower=findFollowers(successor,restart);
      restart.addAll(follower);
      Iterator<ExecutionVertex> iter=follower.iterator();
      while (iter.hasNext()) {
        ExecutionVertex follow=iter.next();
        if (!visited.contains(follow)) {
          totest.add(follow);
        }
      }
    }
    for (int j=0; j < vertex.getNumberOfPredecessors(); j++) {
      ExecutionVertex predecessor=vertex.getPredecessor(j);
      if (!predecessor.isCheckpoint()) {
        LOG.info("add " + predecessor.getName() + " torestart");
        restart.add(predecessor);
        if (!visited.contains(predecessor)) {
          totest.add(predecessor);
        }
      }
 else {
        if (!this.globalConsistentCheckpoint.contains(predecessor)) {
          this.globalConsistentCheckpoint.add(predecessor);
        }
        List<ExecutionVertex> follower=findFollowers(predecessor,restart);
        for (int i=0; i < follower.size(); i++) {
          LOG.info("add " + follower.get(i) + " torestart");
        }
        restart.addAll(follower);
        Iterator<ExecutionVertex> iter=follower.iterator();
        while (iter.hasNext()) {
          ExecutionVertex follow=iter.next();
          if (!visited.contains(follow)) {
            totest.add(follow);
          }
        }
      }
    }
    visited.add(vertex);
  }
  return restart;
}
