{
  try {
    final BufferedReader in=new BufferedReader(new FileReader("/proc/stat"));
    final String output=in.readLine();
    if (output == null) {
      throw new IOException("Cannot read CPU utilization, return value is null");
    }
    in.close();
    final Matcher cpuMatcher=CPU_PATTERN.matcher(output);
    if (!cpuMatcher.matches()) {
      throw new IOException("Cannot extract CPU utilization from output \"" + output + "\"");
    }
    final long cpuUser=Long.parseLong(cpuMatcher.group(1));
    final long cpuNice=Long.parseLong(cpuMatcher.group(2));
    final long cpuSys=Long.parseLong(cpuMatcher.group(3));
    final long cpuIdle=Long.parseLong(cpuMatcher.group(4));
    final long cpuIOWait=Long.parseLong(cpuMatcher.group(5));
    final long cpuIrq=Long.parseLong(cpuMatcher.group(6));
    final long cpuSoftirq=Long.parseLong(cpuMatcher.group(7));
    final long deltaCpuUser=cpuUser - this.lastCpuUser;
    final long deltaCpuNice=cpuNice - this.lastCpuNice;
    final long deltaCpuSys=cpuSys - this.lastCpuSys;
    final long deltaCpuIdle=cpuIdle - this.lastCpuIdle;
    final long deltaCpuIOWait=cpuIOWait - this.lastCpuIOWait;
    final long deltaCpuIrq=cpuIrq - this.lastCpuIrq;
    final long deltaCpuSoftirq=cpuSoftirq - this.lastCpuSoftirq;
    final long deltaSum=deltaCpuUser + deltaCpuNice + deltaCpuSys+ deltaCpuIdle+ deltaCpuIOWait+ deltaCpuIrq+ deltaCpuSoftirq;
    if (writer != null) {
      writer.write((deltaCpuUser * PERCENT / deltaSum) + "\t");
      writer.write((deltaCpuNice * PERCENT / deltaSum) + "\t");
      writer.write((deltaCpuSys * PERCENT / deltaSum) + "\t");
      writer.write((deltaCpuIOWait * PERCENT / deltaSum) + "\t");
      writer.write((deltaCpuIrq * PERCENT / deltaSum) + "\t");
      writer.write((deltaCpuSoftirq * PERCENT / deltaSum) + "\t");
    }
    this.lastCpuUser=cpuUser;
    this.lastCpuNice=cpuNice;
    this.lastCpuSys=cpuSys;
    this.lastCpuIdle=cpuIdle;
    this.lastCpuIOWait=cpuIOWait;
    this.lastCpuIrq=cpuIrq;
    this.lastCpuSoftirq=cpuSoftirq;
  }
 catch (  NumberFormatException nfe) {
    throw new IOException("Error while reading CPU utilization: " + StringUtils.stringifyException(nfe));
  }
}
