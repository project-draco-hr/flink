{
  if (buildSideInput == null || probeSideInput == null || memorySegments == null) {
    throw new NullPointerException();
  }
  if (memorySegments.size() < MIN_NUM_MEMORY_SEGMENTS) {
    throw new IllegalArgumentException("Too few memory segments provided. Hash Join needs at leas " + MIN_NUM_MEMORY_SEGMENTS + " memory segments.");
  }
  this.buildSideInput=buildSideInput;
  this.probeSideInput=probeSideInput;
  this.availableMemory=memorySegments;
  this.ioManager=ioManager;
  this.avgRecordLen=avgRecordLen < 1 ? DEFAULT_RECORD_LEN : avgRecordLen;
  this.segmentSize=memorySegments.get(0).size();
  if ((this.segmentSize & this.segmentSize - 1) != 0) {
    throw new IllegalArgumentException("Hash Table requires buffers whose size is a power of 2.");
  }
  int bucketsPerSegment=this.segmentSize >> NUM_INTRA_BUCKET_BITS;
  if (bucketsPerSegment == 0) {
    throw new IllegalArgumentException("Hash Table requires buffers of at least " + HASH_BUCKET_SIZE + " bytes.");
  }
  this.bucketsPerSegmentMask=bucketsPerSegment - 1;
  this.bucketsPerSegmentBits=log2floor(bucketsPerSegment);
  this.writeBehindBuffers=new LinkedBlockingQueue<Buffer.Output>();
  this.numWriteBehindBuffers=getNumWriteBehindBuffers(memorySegments.size());
  for (int i=this.numWriteBehindBuffers; i > 0; --i) {
    this.writeBehindBuffers.add(new Buffer.Output(memorySegments.remove(memorySegments.size() - 1)));
  }
  this.partitionsBeingBuilt=new ArrayList<HashJoin.Partition>();
}
