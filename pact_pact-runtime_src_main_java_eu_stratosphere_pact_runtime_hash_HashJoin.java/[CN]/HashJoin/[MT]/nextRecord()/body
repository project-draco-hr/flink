{
  final ProbeIterator probeIter=this.probeIterator;
  final Key[] keyHolders=this.keyHolders;
  PactRecord next;
  while ((next=probeIter.next()) != null) {
    if (!next.getFields(this.keyFields,keyHolders)) {
      throw new NullKeyFieldException();
    }
    final int hash=hash(keyHolders,this.currentRecursionDepth);
    final int posHashCode=hash % this.numBuckets;
    final int bucketArrayPos=posHashCode >> this.bucketsPerSegmentBits;
    final int bucketInSegmentOffset=(posHashCode & this.bucketsPerSegmentMask) << NUM_INTRA_BUCKET_BITS;
    final MemorySegment bucket=this.buckets[bucketArrayPos];
    final int partitionNumber=bucket.get(bucketInSegmentOffset + HEADER_PARTITION_OFFSET);
    final Partition p=this.partitionsBeingBuilt.get(partitionNumber);
    if (p.isInMemory()) {
      this.bucketIterator.set(bucket,p.overflowSegments,p.inMemoryBuffers,keyHolders,hash,bucketInSegmentOffset);
      return true;
    }
 else {
      p.insertIntoProbeBuffer(next);
    }
  }
  int buffersAvailable=0;
  for (int i=0; i < this.partitionsBeingBuilt.size(); i++) {
    Partition p=this.partitionsBeingBuilt.get(i);
    buffersAvailable+=p.finalizeProbePhase(this.availableMemory,this.partitionsPending);
  }
  this.partitionsBeingBuilt.clear();
  this.writeBehindBuffersAvailable+=buffersAvailable;
  releaseTable();
  if (!this.partitionsPending.isEmpty()) {
    final Partition p=this.partitionsPending.get(0);
    buildTableFromSpilledPartition(p);
    LinkedBlockingQueue<MemorySegment> returnQueue=new LinkedBlockingQueue<MemorySegment>();
    this.currentSpilledProbeSide=this.ioManager.createBlockChannelReader(p.probeSideChannel.getChannelID(),returnQueue);
    List<MemorySegment> memory=new ArrayList<MemorySegment>();
    memory.add(getNextBuffer());
    memory.add(getNextBuffer());
    BlockReaderIterator probeReader=new BlockReaderIterator(this.currentSpilledProbeSide,returnQueue,memory,this.availableMemory,p.probeBlockCounter);
    this.probeIterator.set(probeReader);
    this.partitionsPending.remove(0);
    this.currentRecursionDepth=p.recursionLevel + 1;
    return nextRecord();
  }
 else {
    return false;
  }
}
