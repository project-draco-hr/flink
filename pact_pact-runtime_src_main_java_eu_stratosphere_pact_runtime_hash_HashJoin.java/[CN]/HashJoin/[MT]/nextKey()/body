{
  final ProbeSideIterator<K,V> probeIter=this.probeIterator;
  while (probeIter.nextKey()) {
    final K currKey=probeIter.getCurrentKey();
    final int hash=hash(currKey.hashCode(),this.currentRecursionDepth);
    final int posHashCode=hash % this.numBuckets;
    final int bucketArrayPos=posHashCode >> this.bucketsPerSegmentBits;
    final int bucketInSegmentOffset=(posHashCode & this.bucketsPerSegmentMask) << NUM_INTRA_BUCKET_BITS;
    final MemorySegment bucket=this.buckets[bucketArrayPos];
    final int partitionNumber=bucket.get(bucketInSegmentOffset + HEADER_PARTITION_OFFSET);
    final Partition p=this.partitionsBeingBuilt.get(partitionNumber);
    if (p.isInMemory()) {
      this.bucketIterator.set(bucket,p.overflowSegments,p.inMemoryBuffers,currKey,hash,bucketInSegmentOffset);
      return true;
    }
 else {
      while (probeIter.hasNext()) {
        final KeyValuePair<K,V> nextPair=probeIter.nextPair();
        p.insertIntoProbeBuffer(nextPair);
      }
    }
  }
  int buffersAvailable=0;
  for (int i=0; i < this.partitionsBeingBuilt.size(); i++) {
    Partition p=this.partitionsBeingBuilt.get(i);
    buffersAvailable+=p.finalizeProbePhase(this.availableMemory,this.partitionsPending);
  }
  this.partitionsBeingBuilt.clear();
  this.writeBehindBuffersAvailable+=buffersAvailable;
  releaseTable();
  if (!this.partitionsPending.isEmpty()) {
  }
  return false;
}
