{
  final int partitionFanOut=getPartitioningFanOutNoEstimates(this.availableMemory.size());
  if (partitionFanOut > MAX_NUM_PARTITIONS) {
    throw new RuntimeException("Hash join created ");
  }
  createPartitions(partitionFanOut,0);
  final int numBuckets=getInitialTableSize(this.availableMemory.size(),this.segmentSize,partitionFanOut,this.avgRecordLen);
  initTable(numBuckets,(byte)partitionFanOut);
  final int[] positions=this.keyFields;
  final Key[] keys=this.keyHolders;
  while (input.hasNext()) {
    final PactRecord record=input.next();
    int hashCode=0;
    for (int i=0; i < positions.length; i++) {
      final Key k=keys[i];
      if (record.getField(positions[i],k)) {
        hashCode^=hash(k.hashCode(),0);
      }
 else {
        throw new NullKeyFieldException();
      }
    }
    insertIntoTable(record,hashCode);
  }
  for (int i=0; i < this.partitionsBeingBuilt.size(); i++) {
    Partition p=this.partitionsBeingBuilt.get(i);
    p.finalizeBuildPhase(this.ioManager,this.currentEnumerator);
  }
}
