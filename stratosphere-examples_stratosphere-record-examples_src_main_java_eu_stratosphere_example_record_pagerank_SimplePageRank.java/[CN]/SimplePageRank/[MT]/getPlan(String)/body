{
  int dop=1;
  String pageWithRankInputPath="";
  String adjacencyListInputPath="";
  String outputPath="";
  int numIterations=25;
  long numVertices=5;
  if (args.length >= 6) {
    dop=Integer.parseInt(args[0]);
    pageWithRankInputPath=args[1];
    adjacencyListInputPath=args[2];
    outputPath=args[3];
    numIterations=Integer.parseInt(args[4]);
    numVertices=Long.parseLong(args[5]);
  }
  FileDataSource pageWithRankInput=new FileDataSource(new DanglingPageRankInputFormat(),pageWithRankInputPath,"PageWithRank Input");
  pageWithRankInput.getParameters().setLong(NUM_VERTICES_CONFIG_PARAM,numVertices);
  BulkIteration iteration=new BulkIteration("Page Rank Loop");
  iteration.setInput(pageWithRankInput);
  FileDataSource adjacencyListInput=new FileDataSource(new ImprovedAdjacencyListInputFormat(),adjacencyListInputPath,"AdjancencyListInput");
  JoinOperator join=JoinOperator.builder(new JoinVerexWithEdgesMatch(),PactLong.class,0,0).input1(iteration.getPartialSolution()).input2(adjacencyListInput).name("Join with Edges").build();
  ReduceOperator rankAggregation=ReduceOperator.builder(new AggregatingReduce(),PactLong.class,0).input(join).name("Rank Aggregation").build();
  iteration.setNextPartialSolution(rankAggregation);
  iteration.setMaximumNumberOfIterations(numIterations);
  FileDataSink out=new FileDataSink(new PageWithRankOutFormat(),outputPath,iteration,"Final Ranks");
  Plan p=new Plan(out,"Simple PageRank");
  p.setDefaultParallelism(dop);
  return p;
}
