{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(DEFAULT_PARALLELISM);
  DataSet<Long> sourceA=env.generateSequence(0,1);
  DataSet<Long> sourceB=env.generateSequence(0,1);
  DataSet<Long> redA=sourceA.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>());
  DataSet<Long> redB=sourceB.groupBy("*").reduceGroup(new IdentityGroupReducer<Long>());
  redA.union(redB).groupBy("*").reduceGroup(new IdentityGroupReducer<Long>()).output(new DiscardingOutputFormat<Long>());
  JavaPlan plan=env.createProgramPlan();
  OptimizedPlan oPlan=compileNoStats(plan);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
  oPlan.accept(new Visitor<PlanNode>(){
    @Override public boolean preVisit(    PlanNode visitable){
      if (visitable instanceof SingleInputPlanNode && visitable.getProgramOperator() instanceof GroupReduceOperatorBase) {
        for (        Channel inConn : visitable.getInputs()) {
          Assert.assertTrue("Reduce should just forward the input if it is already partitioned",inConn.getShipStrategy() == ShipStrategyType.FORWARD);
        }
        return false;
      }
      return true;
    }
    @Override public void postVisit(    PlanNode visitable){
    }
  }
);
}
