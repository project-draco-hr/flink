{
  final Collection<FileDataSinkContract<?,?>> existingSinks=this.getDataSinks();
  final Collection<FileDataSinkContract<?,?>> wrappedSinks=new ArrayList<FileDataSinkContract<?,?>>();
  for (  final FileDataSinkContract<?,?> dataSinkContract : existingSinks)   if (!dataSinkContract.getFormatClass().equals(SequentialOutputFormat.class)) {
    final FileDataSinkContract<Key,Value> safeSink=createDefaultSink(dataSinkContract.getName());
    safeSink.setInput(dataSinkContract.getInput());
    wrappedSinks.add(dataSinkContract);
    wrappedSinks.add(safeSink);
    this.expectedOutputs.put(safeSink,this.getExpectedOutput(dataSinkContract));
    this.actualOutputs.put(safeSink,this.getActualOutput(dataSinkContract));
    this.getActualOutput(dataSinkContract).fromFile(SequentialInputFormat.class,safeSink.getFilePath());
  }
 else {
    wrappedSinks.add(dataSinkContract);
    this.getActualOutput(dataSinkContract).fromFile(SequentialInputFormat.class,dataSinkContract.getFilePath());
  }
  return new Plan(wrappedSinks);
}
