{
  for (  JoinHint joinHint : JoinHint.values()) {
    if (joinHint == JoinHint.OPTIMIZER_CHOOSES) {
      continue;
    }
    ChecksumHashCode enabledChecksum;
    ChecksumHashCode disabledChecksum;
    LOG.info("Testing inner join with JoinHint = {}",joinHint);
    env.getConfig().enableObjectReuse();
    enabledChecksum=DataSetUtils.checksumHashCode(getDataSet(env).join(getDataSet(env),joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()));
    env.getConfig().disableObjectReuse();
    disabledChecksum=DataSetUtils.checksumHashCode(getDataSet(env).join(getDataSet(env),joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()));
    Assert.assertEquals("JoinHint=" + joinHint,disabledChecksum,enabledChecksum);
    if (joinHint != JoinHint.BROADCAST_HASH_FIRST) {
      LOG.info("Testing left outer join with JoinHint = {}",joinHint);
      env.getConfig().enableObjectReuse();
      enabledChecksum=DataSetUtils.checksumHashCode(getDataSet(env).leftOuterJoin(getFilteredDataSet(env),joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()));
      env.getConfig().disableObjectReuse();
      disabledChecksum=DataSetUtils.checksumHashCode(getDataSet(env).leftOuterJoin(getFilteredDataSet(env),joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()));
      Assert.assertEquals("JoinHint=" + joinHint,disabledChecksum,enabledChecksum);
    }
    if (joinHint != JoinHint.BROADCAST_HASH_SECOND) {
      LOG.info("Testing right outer join with JoinHint = {}",joinHint);
      env.getConfig().enableObjectReuse();
      enabledChecksum=DataSetUtils.checksumHashCode(getDataSet(env).rightOuterJoin(getFilteredDataSet(env),joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()));
      env.getConfig().disableObjectReuse();
      disabledChecksum=DataSetUtils.checksumHashCode(getDataSet(env).rightOuterJoin(getFilteredDataSet(env),joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()));
      Assert.assertEquals("JoinHint=" + joinHint,disabledChecksum,enabledChecksum);
    }
    if (joinHint != JoinHint.BROADCAST_HASH_FIRST && joinHint != JoinHint.BROADCAST_HASH_SECOND) {
      LOG.info("Testing full outer join with JoinHint = {}",joinHint);
      env.getConfig().enableObjectReuse();
      enabledChecksum=DataSetUtils.checksumHashCode(getDataSet(env).fullOuterJoin(getFilteredDataSet(env),joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()));
      env.getConfig().disableObjectReuse();
      disabledChecksum=DataSetUtils.checksumHashCode(getDataSet(env).fullOuterJoin(getFilteredDataSet(env),joinHint).where(0).equalTo(0).with(new OverwriteObjectsJoin()));
      Assert.assertEquals("JoinHint=" + joinHint,disabledChecksum,enabledChecksum);
    }
  }
}
