{
  ZooKeeperSubmittedJobGraphStore jobGraphs=null;
  ZooKeeperSubmittedJobGraphStore otherJobGraphs=null;
  try {
    jobGraphs=new ZooKeeperSubmittedJobGraphStore(ZooKeeper.createClient(),"/testConcurrentAddJobGraph",StateHandleProvider);
    otherJobGraphs=new ZooKeeperSubmittedJobGraphStore(ZooKeeper.createClient(),"/testConcurrentAddJobGraph",StateHandleProvider);
    SubmittedJobGraph jobGraph=createSubmittedJobGraph(new JobID(),0);
    SubmittedJobGraph otherJobGraph=createSubmittedJobGraph(new JobID(),0);
    SubmittedJobGraphListener listener=mock(SubmittedJobGraphListener.class);
    final JobID[] actualOtherJobId=new JobID[1];
    final CountDownLatch sync=new CountDownLatch(1);
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        actualOtherJobId[0]=(JobID)invocation.getArguments()[0];
        sync.countDown();
        return null;
      }
    }
).when(listener).onAddedJobGraph(any(JobID.class));
    jobGraphs.start(listener);
    otherJobGraphs.start(null);
    jobGraphs.putJobGraph(jobGraph);
    verify(listener,never()).onAddedJobGraph(any(JobID.class));
    verify(listener,never()).onRemovedJobGraph(any(JobID.class));
    otherJobGraphs.putJobGraph(otherJobGraph);
    sync.await();
    verify(listener,times(1)).onAddedJobGraph(any(JobID.class));
    verify(listener,never()).onRemovedJobGraph(any(JobID.class));
    assertEquals(otherJobGraph.getJobId(),actualOtherJobId[0]);
  }
  finally {
    if (jobGraphs != null) {
      jobGraphs.stop();
    }
    if (otherJobGraphs != null) {
      otherJobGraphs.stop();
    }
  }
}
