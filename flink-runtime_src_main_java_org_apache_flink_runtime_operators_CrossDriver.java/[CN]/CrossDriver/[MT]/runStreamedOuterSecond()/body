{
  if (LOG.isDebugEnabled()) {
    LOG.debug(this.taskContext.formatLogString("Running Cross with Nested-Loops: " + "First input is inner (spilling) side, second input is outer side."));
  }
  final Counter numRecordsIn=taskContext.getMetricGroup().counter("numRecordsIn");
  final Counter numRecordsOut=taskContext.getMetricGroup().counter("numRecordsOut");
  final MutableObjectIterator<T1> in1=new CountingMutableObjectIterator<>(this.taskContext.<T1>getInput(0),numRecordsIn);
  final MutableObjectIterator<T2> in2=new CountingMutableObjectIterator<>(this.taskContext.<T2>getInput(1),numRecordsIn);
  final TypeSerializer<T1> serializer1=this.taskContext.<T1>getInputSerializer(0).getSerializer();
  final TypeSerializer<T2> serializer2=this.taskContext.<T2>getInputSerializer(1).getSerializer();
  final SpillingResettableMutableObjectIterator<T1> spillVals=new SpillingResettableMutableObjectIterator<T1>(in1,serializer1,this.memManager,this.taskContext.getIOManager(),this.memPagesForSpillingSide,this.taskContext.getOwningNepheleTask());
  this.spillIter=spillVals;
  final CrossFunction<T1,T2,OT> crosser=this.taskContext.getStub();
  final Collector<OT> collector=new CountingCollector<>(this.taskContext.getOutputCollector(),numRecordsOut);
  if (objectReuseEnabled) {
    final T1 val1Reuse=serializer1.createInstance();
    final T2 val2Reuse=serializer2.createInstance();
    T1 val1;
    T2 val2;
    while (this.running && (val2=in2.next(val2Reuse)) != null) {
      while (this.running && (val1=spillVals.next(val1Reuse)) != null) {
        collector.collect(crosser.cross(val1,val2));
      }
      spillVals.reset();
    }
  }
 else {
    T1 val1;
    T2 val2;
    while (this.running && (val2=in2.next()) != null) {
      while (this.running && (val1=spillVals.next()) != null) {
        collector.collect(crosser.cross(val1,serializer2.copy(val2)));
      }
      spillVals.reset();
    }
  }
}
