{
  if (LOG.isDebugEnabled()) {
    LOG.debug(this.taskContext.formatLogString("Running Cross with Block-Nested-Loops: " + "First input is outer (blocking) side, second input is inner (spilling) side."));
  }
  final MutableObjectIterator<T1> in1=this.taskContext.getInput(0);
  final MutableObjectIterator<T2> in2=this.taskContext.getInput(1);
  final TypeSerializer<T1> serializer1=this.taskContext.<T1>getInputSerializer(0).getSerializer();
  final TypeSerializer<T2> serializer2=this.taskContext.<T2>getInputSerializer(1).getSerializer();
  final BlockResettableMutableObjectIterator<T1> blockVals=new BlockResettableMutableObjectIterator<T1>(this.memManager,in1,serializer1,this.memPagesForBlockSide,this.taskContext.getOwningNepheleTask());
  this.blockIter=blockVals;
  final SpillingResettableMutableObjectIterator<T2> spillVals=new SpillingResettableMutableObjectIterator<T2>(in2,serializer2,this.memManager,this.taskContext.getIOManager(),this.memPagesForSpillingSide,this.taskContext.getOwningNepheleTask());
  this.spillIter=spillVals;
  final CrossFunction<T1,T2,OT> crosser=this.taskContext.getStub();
  final Collector<OT> collector=this.taskContext.getOutputCollector();
  if (objectReuseEnabled) {
    final T1 val1Reuse=serializer1.createInstance();
    final T2 val2Reuse=serializer2.createInstance();
    T1 val1;
    T2 val2;
    do {
      while (this.running && ((val2=spillVals.next(val2Reuse)) != null)) {
        while ((val1=blockVals.next(val1Reuse)) != null) {
          collector.collect(crosser.cross(val1,val2));
        }
        blockVals.reset();
      }
      spillVals.reset();
    }
 while (this.running && blockVals.nextBlock());
  }
 else {
    T1 val1;
    T2 val2;
    do {
      while (this.running && ((val2=spillVals.next()) != null)) {
        while ((val1=blockVals.next()) != null) {
          collector.collect(crosser.cross(val1,serializer2.copy(val2)));
        }
        blockVals.reset();
      }
      spillVals.reset();
    }
 while (this.running && blockVals.nextBlock());
  }
}
