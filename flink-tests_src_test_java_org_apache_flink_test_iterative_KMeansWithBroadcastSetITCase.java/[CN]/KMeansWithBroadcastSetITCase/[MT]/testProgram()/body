{
  String[] points=KMeansData.DATAPOINTS_2D.split("\n");
  String[] centers=KMeansData.INITIAL_CENTERS_2D.split("\n");
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Point> pointsSet=env.fromElements(points).map(new MapFunction<String,Point>(){
    public Point map(    String p){
      String[] fields=p.split("\\|");
      return new Point(Double.parseDouble(fields[1]),Double.parseDouble(fields[2]));
    }
  }
);
  DataSet<Centroid> centroidsSet=env.fromElements(centers).map(new MapFunction<String,Centroid>(){
    public Centroid map(    String c){
      String[] fields=c.split("\\|");
      return new Centroid(Integer.parseInt(fields[0]),Double.parseDouble(fields[1]),Double.parseDouble(fields[2]));
    }
  }
);
  IterativeDataSet<Centroid> loop=centroidsSet.iterate(20);
  DataSet<Centroid> newCentroids=pointsSet.map(new KMeans.SelectNearestCenter()).withBroadcastSet(loop,"centroids").map(new KMeans.CountAppender()).groupBy(0).reduce(new KMeans.CentroidAccumulator()).map(new KMeans.CentroidAverager());
  DataSet<Centroid> finalCentroids=loop.closeWith(newCentroids);
  DataSet<String> stringCentroids=finalCentroids.map(new MapFunction<Centroid,String>(){
    @Override public String map(    Centroid c) throws Exception {
      return String.format("%d|%.2f|%.2f|",c.id,c.x,c.y);
    }
  }
);
  List<String> result=stringCentroids.collect();
  KMeansData.checkResultsWithDelta(KMeansData.CENTERS_2D_AFTER_20_ITERATIONS_DOUBLE_DIGIT,result,0.01);
}
