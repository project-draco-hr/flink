{
  if (numRuns < 3) {
    throw new IllegalArgumentException("must do at least three runs");
  }
  long[][] measures=new long[runners.length][];
  for (int i=0; i < measures.length; i++) {
    measures[i]=new long[numRuns];
  }
  for (int test=0; test < numRuns; test++) {
    System.out.println("Round " + (test + 1) + '/'+ numRuns);
    int[] order=new int[runners.length];
    for (int i=0; i < order.length; i++) {
      order[i]=i;
    }
    for (int i=order.length; i > 1; i--) {
      int pos1=i - 1;
      int pos2=rnd.nextInt(i);
      int tmp=order[pos1];
      order[pos1]=order[pos2];
      order[pos2]=tmp;
    }
    for (    int pos : order) {
      TestRunner next=runners[pos];
      measures[pos][test]=next != null ? next.runTest() : 0L;
    }
  }
  if (printMeasures) {
    for (    long[] series : measures) {
      StringBuilder bld=new StringBuilder();
      for (      long measure : series) {
        bld.append(String.format("%,d",(measure / 1000000))).append(" | ");
      }
      System.out.println(bld.toString());
    }
  }
  long[] results=new long[runners.length];
  for (int i=0; i < runners.length; i++) {
    long max=Long.MIN_VALUE;
    long min=Long.MAX_VALUE;
    for (    long val : measures[i]) {
      max=Math.max(max,val);
      min=Math.min(min,val);
    }
    long total=0L;
    for (    long val : measures[i]) {
      if (val != max && val != min) {
        total+=val;
      }
    }
    results[i]=total / (numRuns - 2);
  }
  return results;
}
