{
  LOG.info("Starting processing...");
  this.openHandleEdges();
  this.openHandleTriangs();
  edgeCount-=nodeCount - 1;
  int numberOfGraphs=(int)Math.ceil(nodeCount / MAX_NODES_PER_GRAPH);
  if (numberOfGraphs < 1)   numberOfGraphs=1;
  int numberOfEdgesPerMaxGraph=(int)Math.floor((((numberOfGraphs - 1) * MAX_NODES_PER_GRAPH) / nodeCount) * edgeCount);
  long remainingEdges=edgeCount - (numberOfEdgesPerMaxGraph * (numberOfGraphs - 1));
  String lastNodeName=null;
  long curNodeCount=nodeCount;
  while (curNodeCount > MAX_NODES_PER_GRAPH) {
    curNodeCount-=MAX_NODES_PER_GRAPH;
    TriangGraph graph=this.generateGraph(MAX_NODES_PER_GRAPH,numberOfEdgesPerMaxGraph);
    String currentNodeName=graph.getNode(graph.getNodeCount() - 1).getName();
    if (lastNodeName != null)     this.writeEdge(TriangNode.getEdgeString(currentNodeName,lastNodeName));
    lastNodeName=currentNodeName;
  }
  TriangGraph graph=this.generateGraph((int)curNodeCount,(int)remainingEdges);
  if (lastNodeName != null)   this.writeEdge(TriangNode.getEdgeString(graph.getNode(graph.getNodeCount() - 1).getName(),lastNodeName));
  this.closeHandleEdges();
  this.closeHandleTriangs();
}
