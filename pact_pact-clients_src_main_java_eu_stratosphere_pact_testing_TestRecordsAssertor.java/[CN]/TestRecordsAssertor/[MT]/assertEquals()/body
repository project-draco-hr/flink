{
  try {
    List<Key> currentKeys=new ArrayList<Key>(Arrays.asList(new Key[this.sortInfo.sortKeys.size()])), nextKeys=new ArrayList<Key>(currentKeys);
    int itemIndex=0;
    List<PactRecord> expectedValuesWithCurrentKey=new ArrayList<PactRecord>();
    List<PactRecord> actualValuesWithCurrentKey=new ArrayList<PactRecord>();
    if (this.expectedIterator.hasNext()) {
      PactRecord expected=this.expectedIterator.next();
      this.setKeys(currentKeys,expected);
      expectedValuesWithCurrentKey.add(expected);
      while (this.actualIterator.hasNext() && this.expectedIterator.hasNext()) {
        expected=this.expectedIterator.next().createCopy();
        this.setKeys(nextKeys,expected);
        if (!currentKeys.equals(nextKeys)) {
          this.matchValues(currentKeys,itemIndex,expectedValuesWithCurrentKey,actualValuesWithCurrentKey);
          this.setKeys(currentKeys,expected);
        }
        expectedValuesWithCurrentKey.add(expected);
        itemIndex++;
      }
      if (!expectedValuesWithCurrentKey.isEmpty())       this.matchValues(currentKeys,itemIndex,expectedValuesWithCurrentKey,actualValuesWithCurrentKey);
    }
    if (!expectedValuesWithCurrentKey.isEmpty() || this.expectedIterator.hasNext())     Assert.fail("More elements expected: " + expectedValuesWithCurrentKey + stringify(this.expectedIterator,this.schema));
    if (!actualValuesWithCurrentKey.isEmpty() || this.actualIterator.hasNext())     Assert.fail("Less elements expected: " + actualValuesWithCurrentKey + stringify(this.actualIterator,this.schema));
  }
  finally {
    this.actualRecords.close();
    this.expectedValues.close();
  }
}
