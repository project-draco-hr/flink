{
  final int NUM_MEM_PAGES=SIZE * NUM_LISTS / PAGE_SIZE;
  AbstractMutableHashTable<IntList> table=getHashTable(serializerV,comparatorV,getMemory(NUM_MEM_PAGES));
  final Random rnd=new Random(RANDOM_SEED);
  final IntList[] lists=getRandomizedIntLists(NUM_LISTS,rnd);
  table.open();
  for (int i=0; i < NUM_LISTS; i++) {
    try {
      table.insert(lists[i]);
    }
 catch (    Exception e) {
      throw e;
    }
  }
  AbstractHashTableProber<IntList,IntList> prober=table.getProber(comparatorV,pairComparatorV);
  IntList target=new IntList();
  for (int i=0; i < NUM_LISTS; i++) {
    assertNotNull(prober.getMatchFor(lists[i],target));
    assertArrayEquals(lists[i].getValue(),target.getValue());
  }
  final IntList[] overwriteLists=getRandomizedIntLists(NUM_LISTS,rnd);
  for (int i=0; i < NUM_LISTS; i++) {
    table.insertOrReplaceRecord(overwriteLists[i]);
  }
  for (int i=0; i < NUM_LISTS; i++) {
    assertNotNull("" + i,prober.getMatchFor(overwriteLists[i],target));
    assertArrayEquals(overwriteLists[i].getValue(),target.getValue());
  }
  table.close();
  assertEquals("Memory lost",NUM_MEM_PAGES,table.getFreeMemory().size());
}
