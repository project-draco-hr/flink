{
  Configuration config=new Configuration();
  config.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER,2);
  config.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,2);
  LocalFlinkMiniCluster cluster=new LocalFlinkMiniCluster(config,false);
  cluster.start();
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getLeaderRPCPort());
  env.getConfig().disableSysoutLogging();
  env.setParallelism(4);
  env.enableCheckpointing(1000);
  env.getConfig().setRestartStrategy(RestartStrategies.fixedDelayRestart(200,0));
  DataStream<Tuple2<Integer,Integer>> input=env.addSource(new RichSourceFunction<Tuple2<Integer,Integer>>(){
    @Override public void open(    Configuration parameters){
      if (FAILURES_SO_FAR.incrementAndGet() <= NUM_FAILURES) {
        throw new RuntimeException("fail");
      }
    }
    @Override public void run(    SourceContext<Tuple2<Integer,Integer>> ctx){
    }
    @Override public void cancel(){
    }
  }
);
  input.keyBy(0).map(new MapFunction<Tuple2<Integer,Integer>,Integer>(){
    @Override public Integer map(    Tuple2<Integer,Integer> value){
      return value.f0;
    }
  }
).addSink(new SinkFunction<Integer>(){
    @Override public void invoke(    Integer value){
    }
  }
);
  try {
    env.execute();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
