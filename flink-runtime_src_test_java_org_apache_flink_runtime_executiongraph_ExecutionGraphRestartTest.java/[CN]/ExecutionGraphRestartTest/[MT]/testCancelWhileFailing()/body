{
  FixedDelayRestartStrategy restartStrategy=new FixedDelayRestartStrategy(Integer.MAX_VALUE,Long.MAX_VALUE);
  Tuple2<ExecutionGraph,Instance> executionGraphInstanceTuple=createSpyExecutionGraph(restartStrategy);
  ExecutionGraph executionGraph=executionGraphInstanceTuple.f0;
  Instance instance=executionGraphInstanceTuple.f1;
  doNothing().when(executionGraph).jobVertexInFinalState();
  instance.markDead();
  Deadline deadline=TestingUtils.TESTING_DURATION().fromNow();
  boolean success=false;
  while (deadline.hasTimeLeft() && !success) {
    success=true;
    for (    ExecutionVertex vertex : executionGraph.getAllExecutionVertices()) {
      ExecutionState state=vertex.getExecutionState();
      if (state != ExecutionState.FAILED && state != ExecutionState.CANCELED) {
        success=false;
        Thread.sleep(100);
        break;
      }
    }
  }
  assertEquals(JobStatus.FAILING,executionGraph.getState());
  executionGraph.cancel();
  assertEquals(JobStatus.CANCELLING,executionGraph.getState());
  doCallRealMethod().when(executionGraph).jobVertexInFinalState();
  executionGraph.jobVertexInFinalState();
  assertEquals(JobStatus.CANCELED,executionGraph.getState());
}
