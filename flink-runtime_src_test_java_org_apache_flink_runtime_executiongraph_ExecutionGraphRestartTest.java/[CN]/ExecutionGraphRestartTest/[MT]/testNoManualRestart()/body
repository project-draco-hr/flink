{
  Instance instance=ExecutionGraphTestUtils.getInstance(new SimpleActorGateway(TestingUtils.directExecutionContext()),NUM_TASKS);
  Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
  scheduler.newInstanceAvailable(instance);
  JobVertex sender=new JobVertex("Task");
  sender.setInvokableClass(Tasks.NoOpInvokable.class);
  sender.setParallelism(NUM_TASKS);
  JobGraph jobGraph=new JobGraph("Pointwise job",sender);
  ExecutionGraph eg=new ExecutionGraph(TestingUtils.defaultExecutionContext(),new JobID(),"test job",new Configuration(),ExecutionConfigTest.getSerializedConfig(),AkkaUtils.getDefaultTimeout(),new NoRestartStrategy());
  eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources());
  assertEquals(JobStatus.CREATED,eg.getState());
  eg.scheduleForExecution(scheduler);
  assertEquals(JobStatus.RUNNING,eg.getState());
  eg.getAllExecutionVertices().iterator().next().fail(new Exception("Test Exception"));
  for (  ExecutionVertex vertex : eg.getAllExecutionVertices()) {
    vertex.getCurrentExecutionAttempt().cancelingComplete();
  }
  assertEquals(JobStatus.FAILED,eg.getState());
  eg.restart();
  assertEquals(JobStatus.FAILED,eg.getState());
}
