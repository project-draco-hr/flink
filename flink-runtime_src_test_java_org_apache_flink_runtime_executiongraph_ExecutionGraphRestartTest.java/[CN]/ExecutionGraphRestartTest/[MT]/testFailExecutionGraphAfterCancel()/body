{
  Instance instance=ExecutionGraphTestUtils.getInstance(new SimpleActorGateway(TestingUtils.directExecutionContext()),2);
  Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
  scheduler.newInstanceAvailable(instance);
  JobVertex vertex=new JobVertex("Test Vertex");
  vertex.setInvokableClass(Tasks.NoOpInvokable.class);
  vertex.setParallelism(1);
  ExecutionConfig executionConfig=new ExecutionConfig();
  executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE,Integer.MAX_VALUE));
  JobGraph jobGraph=new JobGraph("Test Job",vertex);
  jobGraph.setExecutionConfig(executionConfig);
  ExecutionGraph eg=new ExecutionGraph(TestingUtils.defaultExecutionContext(),new JobID(),"test job",new Configuration(),new SerializedValue<>(new ExecutionConfig()),AkkaUtils.getDefaultTimeout(),new FixedDelayRestartStrategy(1,1000000));
  eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources());
  assertEquals(JobStatus.CREATED,eg.getState());
  eg.scheduleForExecution(scheduler);
  assertEquals(JobStatus.RUNNING,eg.getState());
  eg.cancel();
  assertEquals(JobStatus.CANCELLING,eg.getState());
  eg.fail(new Exception("Test Exception"));
  assertEquals(JobStatus.FAILING,eg.getState());
  Execution execution=eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt();
  execution.cancelingComplete();
  assertEquals(JobStatus.RESTARTING,eg.getState());
}
