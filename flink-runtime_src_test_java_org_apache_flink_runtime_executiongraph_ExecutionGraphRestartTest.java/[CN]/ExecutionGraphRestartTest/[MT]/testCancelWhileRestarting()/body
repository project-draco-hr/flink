{
  Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
  Instance instance=ExecutionGraphTestUtils.getInstance(new SimpleActorGateway(TestingUtils.directExecutionContext()),NUM_TASKS);
  scheduler.newInstanceAvailable(instance);
  ExecutionGraph executionGraph=new ExecutionGraph(TestingUtils.defaultExecutionContext(),new JobID(),"TestJob",new Configuration(),AkkaUtils.getDefaultTimeout(),new FixedDelayRestartStrategy(Integer.MAX_VALUE,Long.MAX_VALUE));
  JobVertex jobVertex=new JobVertex("NoOpInvokable");
  jobVertex.setInvokableClass(Tasks.NoOpInvokable.class);
  jobVertex.setParallelism(NUM_TASKS);
  JobGraph jobGraph=new JobGraph("TestJob",jobVertex);
  executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources());
  assertEquals(JobStatus.CREATED,executionGraph.getState());
  executionGraph.scheduleForExecution(scheduler);
  assertEquals(JobStatus.RUNNING,executionGraph.getState());
  instance.markDead();
  Deadline deadline=TestingUtils.TESTING_DURATION().fromNow();
  while (deadline.hasTimeLeft() && executionGraph.getState() != JobStatus.RESTARTING) {
    Thread.sleep(100);
  }
  assertEquals(JobStatus.RESTARTING,executionGraph.getState());
  executionGraph.cancel();
  assertEquals(JobStatus.CANCELED,executionGraph.getState());
  executionGraph.restart();
  assertEquals(JobStatus.CANCELED,executionGraph.getState());
}
