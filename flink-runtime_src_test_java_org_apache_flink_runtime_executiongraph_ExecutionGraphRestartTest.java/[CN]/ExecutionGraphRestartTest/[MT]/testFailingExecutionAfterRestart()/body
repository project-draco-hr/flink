{
  Instance instance=ExecutionGraphTestUtils.getInstance(new SimpleActorGateway(TestingUtils.directExecutionContext()),2);
  Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
  scheduler.newInstanceAvailable(instance);
  JobVertex sender=newJobVertex("Task1",1,Tasks.NoOpInvokable.class);
  JobVertex receiver=newJobVertex("Task2",1,Tasks.NoOpInvokable.class);
  JobGraph jobGraph=new JobGraph("Pointwise job",sender,receiver);
  ExecutionGraph eg=newExecutionGraph(new FixedDelayRestartStrategy(1,1000));
  eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources());
  assertEquals(JobStatus.CREATED,eg.getState());
  eg.scheduleForExecution(scheduler);
  assertEquals(JobStatus.RUNNING,eg.getState());
  Iterator<ExecutionVertex> executionVertices=eg.getAllExecutionVertices().iterator();
  Execution finishedExecution=executionVertices.next().getCurrentExecutionAttempt();
  Execution failedExecution=executionVertices.next().getCurrentExecutionAttempt();
  finishedExecution.markFinished();
  failedExecution.fail(new Exception("Test Exception"));
  failedExecution.cancelingComplete();
  FiniteDuration timeout=new FiniteDuration(2,TimeUnit.MINUTES);
  waitForAsyncRestart(eg,timeout);
  assertEquals(JobStatus.RUNNING,eg.getState());
  waitForAllResourcesToBeAssignedAfterAsyncRestart(eg,timeout.fromNow());
  for (  ExecutionVertex vertex : eg.getAllExecutionVertices()) {
    assertNotNull("No assigned resource (test instability).",vertex.getCurrentAssignedResource());
    vertex.getCurrentExecutionAttempt().switchToRunning();
  }
  finishedExecution.fail(new Exception("This should have no effect"));
  for (  ExecutionVertex vertex : eg.getAllExecutionVertices()) {
    vertex.getCurrentExecutionAttempt().markFinished();
  }
  assertEquals(ExecutionState.FINISHED,finishedExecution.getState());
  assertEquals(JobStatus.FINISHED,eg.getState());
}
