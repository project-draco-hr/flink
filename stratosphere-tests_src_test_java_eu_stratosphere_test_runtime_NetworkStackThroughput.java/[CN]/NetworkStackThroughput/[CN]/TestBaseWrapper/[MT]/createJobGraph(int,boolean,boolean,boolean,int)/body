{
  JobGraph jobGraph=new JobGraph("Speed Test");
  JobInputVertex producer=new JobInputVertex("Speed Test Producer",jobGraph);
  producer.setInvokableClass(SpeedTestProducer.class);
  producer.setNumberOfSubtasks(numSubtasks);
  producer.getConfiguration().setInteger(DATA_VOLUME_GB_CONFIG_KEY,dataVolumeGb);
  producer.getConfiguration().setBoolean(IS_SLOW_SENDER_CONFIG_KEY,isSlowSender);
  TaskConfig inputConfig=new TaskConfig(producer.getConfiguration());
  inputConfig.setStubWrapper(new UserCodeObjectWrapper<Object>(new DummyInputFormat()));
  JobTaskVertex forwarder=null;
  if (useForwarder) {
    forwarder=new JobTaskVertex("Speed Test Forwarder",jobGraph);
    forwarder.setInvokableClass(SpeedTestForwarder.class);
    forwarder.setNumberOfSubtasks(numSubtasks);
  }
  JobOutputVertex consumer=new JobOutputVertex("Speed Test Consumer",jobGraph);
  consumer.setInvokableClass(SpeedTestConsumer.class);
  consumer.setNumberOfSubtasks(numSubtasks);
  consumer.getConfiguration().setBoolean(IS_SLOW_RECEIVER_CONFIG_KEY,isSlowReceiver);
  TaskConfig outputConfig=new TaskConfig(consumer.getConfiguration());
  outputConfig.setStubWrapper(new UserCodeObjectWrapper<Object>(new DummyOutputFormat()));
  if (useForwarder) {
    producer.connectTo(forwarder,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
    forwarder.connectTo(consumer,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
    forwarder.setVertexToShareInstancesWith(producer);
    consumer.setVertexToShareInstancesWith(producer);
  }
 else {
    producer.connectTo(consumer,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
    producer.setVertexToShareInstancesWith(consumer);
  }
  return jobGraph;
}
