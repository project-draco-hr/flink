{
  int keyCnt=8192;
  int valCnt=8;
  super.addInput(new UniformPactRecordGenerator(keyCnt,valCnt,false));
  super.addOutput(this.outList);
  ReduceDriver<PactRecord,PactRecord> testTask=new ReduceDriver<PactRecord,PactRecord>();
  super.getTaskConfig().setLocalStrategy(LocalStrategy.COMBININGSORT);
  super.getTaskConfig().setMemorySize(3 * 1024 * 1024);
  super.getTaskConfig().setNumFilehandles(2);
  final int[] keyPos=new int[]{0};
  @SuppressWarnings("unchecked") final Class<? extends Key>[] keyClasses=(Class<? extends Key>[])new Class[]{PactInteger.class};
  addInputComparator(new PactRecordComparator(keyPos,keyClasses));
  try {
    testDriver(testTask,MockCombiningReduceStub.class);
  }
 catch (  Exception e) {
    LOG.debug(e);
    Assert.fail("Invoke method caused exception.");
  }
  int expSum=0;
  for (int i=1; i < valCnt; i++) {
    expSum+=i;
  }
  Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was "+ keyCnt,this.outList.size() == keyCnt);
  for (  PactRecord record : this.outList) {
    Assert.assertTrue("Incorrect result",record.getField(1,PactInteger.class).getValue() == expSum - record.getField(0,PactInteger.class).getValue());
  }
  this.outList.clear();
}
