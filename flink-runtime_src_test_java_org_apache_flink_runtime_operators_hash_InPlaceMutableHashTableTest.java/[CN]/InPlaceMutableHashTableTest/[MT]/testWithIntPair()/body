{
  Random rnd=new Random(RANDOM_SEED);
  final int keyRange=1000000;
  final int valueRange=10;
  final int numRecords=1000000;
  final IntPairSerializer serializer=new IntPairSerializer();
  final TypeComparator<IntPair> comparator=new IntPairComparator();
  final ReduceFunction<IntPair> reducer=new SumReducer();
  List<IntPair> expectedOutput=new ArrayList<>();
  InPlaceMutableHashTableWithJavaHashMap<IntPair,Integer> reference=new InPlaceMutableHashTableWithJavaHashMap<>(serializer,comparator,reducer,new CopyingListCollector<>(expectedOutput,serializer));
  final int numMemPages=keyRange * 32 / PAGE_SIZE;
  List<IntPair> actualOutput=new ArrayList<>();
  InPlaceMutableHashTable<IntPair> table=new InPlaceMutableHashTable<>(serializer,comparator,getMemory(numMemPages,PAGE_SIZE));
  InPlaceMutableHashTable<IntPair>.ReduceFacade reduceFacade=table.new ReduceFacade(reducer,new CopyingListCollector<>(actualOutput,serializer),true);
  table.open();
  final List<IntPair> input=new ArrayList<>();
  for (int i=0; i < numRecords; i++) {
    input.add(new IntPair(rnd.nextInt(keyRange),rnd.nextInt(valueRange)));
  }
  final int numIntermingledEmits=5;
  for (  IntPair record : input) {
    reduceFacade.updateTableEntryWithReduce(serializer.copy(record));
    reference.updateTableEntryWithReduce(serializer.copy(record),record.getKey());
    if (rnd.nextDouble() < 1.0 / ((double)numRecords / numIntermingledEmits)) {
      reference.emitAndReset();
      reduceFacade.emitAndReset();
    }
  }
  reference.emitAndReset();
  reduceFacade.emit();
  table.close();
  assertEquals(expectedOutput.size(),actualOutput.size());
  Integer[] expectedValues=new Integer[expectedOutput.size()];
  for (int i=0; i < expectedOutput.size(); i++) {
    expectedValues[i]=expectedOutput.get(i).getValue();
  }
  Integer[] actualValues=new Integer[actualOutput.size()];
  for (int i=0; i < actualOutput.size(); i++) {
    actualValues[i]=actualOutput.get(i).getValue();
  }
  Arrays.sort(expectedValues,Ordering.<Integer>natural());
  Arrays.sort(actualValues,Ordering.<Integer>natural());
  assertArrayEquals(expectedValues,actualValues);
}
