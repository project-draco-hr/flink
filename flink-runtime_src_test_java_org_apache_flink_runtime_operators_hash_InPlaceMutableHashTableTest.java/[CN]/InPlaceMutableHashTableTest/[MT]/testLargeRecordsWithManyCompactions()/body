{
  try {
    final int numElements=1000;
    final String longString1=getLongString(100000), longString2=getLongString(110000);
    List<MemorySegment> memory=getMemory(3800,32 * 1024);
    InPlaceMutableHashTable<Tuple2<Long,String>> table=new InPlaceMutableHashTable<>(serializer,comparator,memory);
    table.open();
    for (long i=0; i < numElements; i++) {
      table.insertOrReplaceRecord(Tuple2.of(i,longString1));
    }
    for (long i=0; i < numElements; i++) {
      table.insertOrReplaceRecord(Tuple2.of(i,longString2));
    }
    InPlaceMutableHashTable<Tuple2<Long,String>>.HashTableProber<Tuple2<Long,String>> prober=table.getProber(comparator,new SameTypePairComparator<>(comparator));
    Tuple2<Long,String> reuse=new Tuple2<>();
    for (long i=0; i < numElements; i++) {
      assertNotNull(prober.getMatchFor(Tuple2.of(i,longString2),reuse));
    }
    table.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
