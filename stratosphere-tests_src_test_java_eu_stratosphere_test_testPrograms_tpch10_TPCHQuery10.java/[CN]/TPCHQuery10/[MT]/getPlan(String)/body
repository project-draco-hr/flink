{
  final String ordersPath;
  final String lineitemsPath;
  final String customersPath;
  final String nationsPath;
  final String resultPath;
  final int degreeOfParallelism;
  if (args.length < 6) {
    throw new IllegalArgumentException("Invalid number of parameters");
  }
 else {
    degreeOfParallelism=Integer.parseInt(args[0]);
    ordersPath=args[1];
    lineitemsPath=args[2];
    customersPath=args[3];
    nationsPath=args[4];
    resultPath=args[5];
  }
  FileDataSource orders=new FileDataSource(new IntTupleDataInFormat(),ordersPath,"Orders");
  FileDataSource lineitems=new FileDataSource(new IntTupleDataInFormat(),lineitemsPath,"LineItems");
  FileDataSource customers=new FileDataSource(new IntTupleDataInFormat(),customersPath,"Customers");
  FileDataSource nations=new FileDataSource(new IntTupleDataInFormat(),nationsPath,"Nations");
  MapOperator mapO=MapOperator.builder(FilterO.class).name("FilterO").build();
  MapOperator mapLi=MapOperator.builder(FilterLI.class).name("FilterLi").build();
  MapOperator projectC=MapOperator.builder(ProjectC.class).name("ProjectC").build();
  MapOperator projectN=MapOperator.builder(ProjectN.class).name("ProjectN").build();
  JoinOperator joinOL=JoinOperator.builder(JoinOL.class,IntValue.class,0,0).name("JoinOL").build();
  JoinOperator joinCOL=JoinOperator.builder(JoinCOL.class,IntValue.class,0,0).name("JoinCOL").build();
  JoinOperator joinNCOL=JoinOperator.builder(JoinNCOL.class,IntValue.class,4,0).name("JoinNCOL").build();
  ReduceOperator reduce=ReduceOperator.builder(Sum.class).keyField(IntValue.class,0).keyField(StringValue.class,1).keyField(StringValue.class,3).keyField(StringValue.class,4).keyField(StringValue.class,5).keyField(StringValue.class,6).keyField(StringValue.class,7).name("Reduce").build();
  FileDataSink result=new FileDataSink(new TupleOutputFormat(),resultPath,"Output");
  result.setInput(reduce);
  reduce.setInput(joinNCOL);
  joinNCOL.setFirstInput(joinCOL);
  joinNCOL.setSecondInput(projectN);
  joinCOL.setFirstInput(projectC);
  joinCOL.setSecondInput(joinOL);
  joinOL.setFirstInput(mapO);
  joinOL.setSecondInput(mapLi);
  projectC.setInput(customers);
  projectN.setInput(nations);
  mapLi.setInput(lineitems);
  mapO.setInput(orders);
  Plan p=new Plan(result,"TPCH Q10");
  p.setDefaultParallelism(degreeOfParallelism);
  return p;
}
