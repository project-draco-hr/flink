{
  assert((0 <= numberOfAttributes) && (numberOfAttributes <= 25));
  final Collector flinkCollector=mock(Collector.class);
  Tuple flinkTuple=null;
  final Values tuple=new Values();
  StormCollector<?> collector;
  if (numberOfAttributes == 0) {
    collector=new StormCollector(numberOfAttributes,flinkCollector);
    tuple.add(this.r.nextInt());
  }
 else {
    collector=new StormCollector(numberOfAttributes,flinkCollector);
    flinkTuple=Tuple.getTupleClass(numberOfAttributes).newInstance();
    for (int i=0; i < numberOfAttributes; ++i) {
      tuple.add(this.r.nextInt());
      flinkTuple.setField(tuple.get(i),i);
    }
  }
  final String streamId="streamId";
  final Collection anchors=mock(Collection.class);
  final List<Integer> taskIds;
  final Object messageId=this.r.nextInt();
  if (spoutTest) {
    taskIds=collector.emit(streamId,tuple,messageId);
  }
 else {
    taskIds=collector.emit(streamId,anchors,tuple);
  }
  Assert.assertNull(taskIds);
  if (numberOfAttributes == 0) {
    verify(flinkCollector).collect(tuple.get(0));
  }
 else {
    verify(flinkCollector).collect(flinkTuple);
  }
}
