{
  Configuration parameters=new Configuration();
  format.setFilePath(testFile.toURI().toString());
  format.configure(parameters);
  FileInputSplit[] splits=format.createInputSplits(1);
  Assert.assertEquals(splits.length,1);
  format.open(splits[0]);
  Record record=new Record();
  Assert.assertTrue(format.nextRecord(record));
  StringValue name=record.getField(0,StringValue.class);
  Assert.assertNotNull("empty record",name);
  Assert.assertEquals("name not equal",name.getValue(),TEST_NAME);
  StringListValue sl=record.getField(7,AvroRecordInputFormat.StringListValue.class);
  Assert.assertEquals("element 0 not equal",sl.get(0).getValue(),TEST_ARRAY_STRING_1);
  Assert.assertEquals("element 1 not equal",sl.get(1).getValue(),TEST_ARRAY_STRING_2);
  BooleanListValue bl=record.getField(8,AvroRecordInputFormat.BooleanListValue.class);
  Assert.assertEquals("element 0 not equal",bl.get(0).getValue(),TEST_ARRAY_BOOLEAN_1);
  Assert.assertEquals("element 1 not equal",bl.get(1).getValue(),TEST_ARRAY_BOOLEAN_2);
  StringValue enumValue=record.getField(10,StringValue.class);
  Assert.assertEquals("string representation of enum not equal",enumValue.getValue(),TEST_ENUM_COLOR.toString());
  LongMapValue lm=record.getField(11,AvroRecordInputFormat.LongMapValue.class);
  Assert.assertEquals("map value of key 1 not equal",lm.get(new StringValue(TEST_MAP_KEY1)).getValue(),TEST_MAP_VALUE1);
  Assert.assertEquals("map value of key 2 not equal",lm.get(new StringValue(TEST_MAP_KEY2)).getValue(),TEST_MAP_VALUE2);
  Assert.assertFalse("expecting second element",format.reachedEnd());
  Assert.assertTrue("expecting second element",format.nextRecord(record));
  Assert.assertFalse(format.nextRecord(record));
  Assert.assertTrue(format.reachedEnd());
  format.close();
}
