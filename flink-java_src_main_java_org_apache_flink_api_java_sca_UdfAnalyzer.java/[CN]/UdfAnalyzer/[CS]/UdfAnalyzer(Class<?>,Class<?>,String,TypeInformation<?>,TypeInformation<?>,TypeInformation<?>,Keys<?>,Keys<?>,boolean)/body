{
  baseClassMethod=baseClass.getDeclaredMethods()[0];
  this.udfClass=udfClass;
  this.externalUdfName=externalUdfName;
  this.internalUdfClassName=Type.getInternalName(udfClass);
  this.in1Type=in1Type;
  this.in2Type=in2Type;
  this.outType=outType;
  this.keys1=keys1;
  this.keys2=keys2;
  this.throwErrorExceptions=throwErrorExceptions;
  if (baseClass == CoGroupFunction.class) {
    hasCollector=true;
    isBinary=true;
    isIterableInput=true;
    isReduceFunction=false;
    isFilterFunction=false;
    iteratorTrueAssumptionApplied=true;
  }
 else   if (baseClass == CrossFunction.class) {
    hasCollector=false;
    isBinary=true;
    isIterableInput=false;
    isReduceFunction=false;
    isFilterFunction=false;
    iteratorTrueAssumptionApplied=true;
  }
 else   if (baseClass == FlatJoinFunction.class) {
    hasCollector=true;
    isBinary=true;
    isIterableInput=false;
    isReduceFunction=false;
    isFilterFunction=false;
    iteratorTrueAssumptionApplied=true;
  }
 else   if (baseClass == FlatMapFunction.class) {
    hasCollector=true;
    isBinary=false;
    isIterableInput=false;
    isReduceFunction=false;
    isFilterFunction=false;
    iteratorTrueAssumptionApplied=true;
  }
 else   if (baseClass == GroupReduceFunction.class) {
    hasCollector=true;
    isBinary=false;
    isIterableInput=true;
    isReduceFunction=false;
    isFilterFunction=false;
    iteratorTrueAssumptionApplied=false;
  }
 else   if (baseClass == JoinFunction.class) {
    hasCollector=false;
    isBinary=true;
    isIterableInput=false;
    isReduceFunction=false;
    isFilterFunction=false;
    iteratorTrueAssumptionApplied=true;
  }
 else   if (baseClass == MapFunction.class) {
    hasCollector=false;
    isBinary=false;
    isIterableInput=false;
    isReduceFunction=false;
    isFilterFunction=false;
    iteratorTrueAssumptionApplied=true;
  }
 else   if (baseClass == ReduceFunction.class) {
    hasCollector=false;
    isBinary=false;
    isIterableInput=false;
    isReduceFunction=true;
    isFilterFunction=false;
    iteratorTrueAssumptionApplied=true;
  }
 else   if (baseClass == FilterFunction.class) {
    hasCollector=false;
    isBinary=false;
    isIterableInput=false;
    isReduceFunction=false;
    isFilterFunction=true;
    iteratorTrueAssumptionApplied=true;
  }
 else {
    throw new UnsupportedOperationException("Unsupported operator.");
  }
  if (hasCollector) {
    collectorValues=new ArrayList<TaggedValue>();
  }
 else {
    collectorValues=null;
  }
  hints=new ArrayList<String>();
}
