{
  final SemanticProperties sp;
  if (isBinary) {
    sp=new DualInputSemanticProperties();
    if (returnValue != null) {
      String[] ff1Array=null;
      final String ff1=returnValue.toForwardedFieldsExpression(Input.INPUT_1);
      if (ff1 != null && ff1.length() > 0) {
        ff1Array=new String[]{ff1};
      }
      String[] ff2Array=null;
      final String ff2=returnValue.toForwardedFieldsExpression(Input.INPUT_2);
      if (ff2 != null && ff2.length() > 0) {
        ff2Array=new String[]{ff2};
      }
      SemanticPropUtil.getSemanticPropsDualFromString((DualInputSemanticProperties)sp,ff1Array,ff2Array,null,null,null,null,in1Type,in2Type,outType,true);
    }
  }
 else {
    sp=new SingleInputSemanticProperties();
    if (returnValue != null) {
      String[] ffArray=null;
      final String ff=returnValue.toForwardedFieldsExpression(Input.INPUT_1);
      if (ff != null && ff.length() > 0) {
        ffArray=new String[]{ff};
      }
      SemanticPropUtil.getSemanticPropsSingleFromString((SingleInputSemanticProperties)sp,ffArray,null,null,in1Type,outType,true);
    }
  }
  return sp;
}
