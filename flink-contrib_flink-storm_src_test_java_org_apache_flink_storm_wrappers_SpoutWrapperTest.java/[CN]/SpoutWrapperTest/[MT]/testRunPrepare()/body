{
  final StormConfig stormConfig=new StormConfig();
  stormConfig.put(this.r.nextInt(),this.r.nextInt());
  final Configuration flinkConfig=new Configuration();
  flinkConfig.setInteger("testKey",this.r.nextInt());
  final ExecutionConfig taskConfig=mock(ExecutionConfig.class);
  when(taskConfig.getGlobalJobParameters()).thenReturn(null).thenReturn(stormConfig).thenReturn(flinkConfig);
  final StreamingRuntimeContext taskContext=mock(StreamingRuntimeContext.class);
  when(taskContext.getExecutionConfig()).thenReturn(taskConfig);
  when(taskContext.getTaskName()).thenReturn("name");
  final IRichSpout spout=mock(IRichSpout.class);
  SpoutWrapper spoutWrapper=new SpoutWrapper(spout);
  spoutWrapper.setRuntimeContext(taskContext);
  spoutWrapper.cancel();
  spoutWrapper.run(mock(SourceContext.class));
  verify(spout).open(any(Map.class),any(TopologyContext.class),any(SpoutOutputCollector.class));
  spoutWrapper.run(mock(SourceContext.class));
  verify(spout).open(eq(stormConfig),any(TopologyContext.class),any(SpoutOutputCollector.class));
  final TestDummySpout testSpout=new TestDummySpout();
  spoutWrapper=new SpoutWrapper(testSpout);
  spoutWrapper.setRuntimeContext(taskContext);
  spoutWrapper.cancel();
  spoutWrapper.run(mock(SourceContext.class));
  for (  Entry<String,String> entry : flinkConfig.toMap().entrySet()) {
    Assert.assertEquals(entry.getValue(),testSpout.config.get(entry.getKey()));
  }
}
