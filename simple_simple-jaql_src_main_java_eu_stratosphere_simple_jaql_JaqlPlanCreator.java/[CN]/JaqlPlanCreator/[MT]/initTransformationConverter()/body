{
  this.transformationConverter.register(RecordExpr.class,new TransformationConverter<RecordExpr>(){
    @Override public Transformation convert(    RecordExpr expr,    List<Mapping> childTransformations){
      Transformation transformation=new Transformation();
      for (      Mapping mapping : childTransformations)       transformation.addMapping(mapping);
      return transformation;
    }
  }
);
  this.transformationConverter.register(NameValueBinding.class,new TransformationConverter<NameValueBinding>(){
    @Override public ValueTransformation convert(    NameValueBinding expr,    List<Mapping> childTransformations){
      return new ValueTransformation(((ConstExpr)expr.nameExpr()).value.toString(),JaqlPlanCreator.this.parsePath(expr.valueExpr()));
    }
  }
);
  this.transformationConverter.register(CopyField.class,new TransformationConverter<CopyField>(){
    @Override public ValueTransformation convert(    CopyField expr,    List<Mapping> childTransformations){
      String fieldName=((ConstExpr)expr.nameExpr()).value.toString();
      JsonPath path=JaqlPlanCreator.this.parsePath(expr.recExpr());
      path.setSelector(new JsonPath.FieldAccess(fieldName));
      return new ValueTransformation(fieldName,path);
    }
  }
);
  this.transformationConverter.register(ArrayExpr.class,new TransformationConverter<ArrayExpr>(){
    @Override public Transformation convert(    ArrayExpr expr,    List<Mapping> childTransformations){
      Transformation transformation=new Transformation();
      for (int index=0; index < childTransformations.size(); index++) {
        transformation.addMapping(childTransformations.get(index));
      }
      return transformation;
    }
  }
);
  this.transformationConverter.register(CopyRecord.class,new TransformationConverter<CopyRecord>(){
    @Override public ValueTransformation convert(    CopyRecord expr,    List<Mapping> childTransformations){
      JsonPath path=JaqlPlanCreator.this.parsePath(expr.recExpr());
      return new ValueTransformation("",path);
    }
  }
);
}
