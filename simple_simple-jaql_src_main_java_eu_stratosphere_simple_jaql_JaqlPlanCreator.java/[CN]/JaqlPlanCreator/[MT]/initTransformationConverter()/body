{
  this.transformationConverter.register(new TransformationConverter<RecordExpr>(){
    @Override public Transformation convert(    RecordExpr expr,    List<Mapping> childTransformations){
      Transformation transformation=new Transformation();
      for (      Mapping mapping : childTransformations)       transformation.addMapping(mapping);
      return transformation;
    }
  }
).register(new TransformationConverter<NameValueBinding>(){
    @Override public Mapping convert(    NameValueBinding expr,    List<Mapping> childTransformations){
      if (!childTransformations.isEmpty()) {
        Mapping transformation=childTransformations.get(0);
        transformation.setTarget(((ConstExpr)expr.nameExpr()).value.toString());
        return transformation;
      }
      return new ValueAssignment(((ConstExpr)expr.nameExpr()).value.toString(),JaqlPlanCreator.this.parsePath(expr.valueExpr()));
    }
  }
).register(new TransformationConverter<CopyField>(){
    @Override public ValueAssignment convert(    CopyField expr,    List<Mapping> childTransformations){
      String fieldName=((ConstExpr)expr.nameExpr()).value.toString();
      JsonPath path=JaqlPlanCreator.this.parsePath(expr.recExpr());
      path.getSelector(-1).setSelector(new JsonPath.FieldAccess(fieldName));
      return new ValueAssignment(fieldName,path);
    }
  }
).register(new TransformationConverter<CopyRecord>(){
    @Override public ValueAssignment convert(    CopyRecord expr,    List<Mapping> childTransformations){
      JsonPath path=JaqlPlanCreator.this.parsePath(expr.recExpr());
      return new ValueAssignment(ValueAssignment.COPY_ALL_FIELDS,path);
    }
  }
).register(new TransformationConverter<TransformExpr>(){
    @Override public Transformation convert(    TransformExpr expr,    List<Mapping> childOperators){
      return (Transformation)childOperators.get(childOperators.size() - 1);
    }
  }
);
}
