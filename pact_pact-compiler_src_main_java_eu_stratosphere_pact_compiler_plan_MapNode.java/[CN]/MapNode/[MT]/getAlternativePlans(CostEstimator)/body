{
  if (this.cachedPlans != null) {
    return this.cachedPlans;
  }
  List<MapNode> outputPlans=new ArrayList<MapNode>();
  final int inputSize=this.input.size();
  @SuppressWarnings("unchecked") List<? extends OptimizerNode>[] inPlans=new List[inputSize];
  for (int i=0; i < inputSize; ++i) {
    inPlans[i]=this.input.get(i).getSourcePact().getAlternativePlans(estimator);
  }
  getAlternativePlansRecursively(inPlans,new ArrayList<OptimizerNode>(0),estimator,outputPlans);
  prunePlanAlternatives(outputPlans);
  if (this.getOutgoingConnections() != null && this.getOutgoingConnections().size() > 1) {
    this.cachedPlans=outputPlans;
  }
  return outputPlans;
}
