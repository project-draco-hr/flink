{
  if (cachedPlans != null) {
    return cachedPlans;
  }
  List<? extends OptimizerNode> inPlans=input.getSourcePact().getAlternativePlans(estimator);
  List<MapNode> outputPlans=new ArrayList<MapNode>();
  for (  OptimizerNode pred : inPlans) {
    ShipStrategy ss=input.getShipStrategy() == ShipStrategy.NONE ? ShipStrategy.FORWARD : input.getShipStrategy();
    GlobalProperties gp=PactConnection.getGlobalPropertiesAfterConnection(pred,this,ss);
    LocalProperties lp=PactConnection.getLocalPropertiesAfterConnection(pred,this,ss);
    MapNode nMap=new MapNode(this,pred,input,gp,lp);
    nMap.input.setShipStrategy(ss);
    nMap.getGlobalProperties().filterByKeepSet(getKeepSet(0));
    nMap.getLocalProperties().filterByKeepSet(getKeepSet(0));
    estimator.costOperator(nMap);
    outputPlans.add(nMap);
  }
  prunePlanAlternatives(outputPlans);
  if (this.getOutgoingConnections() != null && this.getOutgoingConnections().size() > 1) {
    this.cachedPlans=outputPlans;
  }
  return outputPlans;
}
