{
  List<FileStatus> eligibleFiles=listEligibleFiles(fileSystem);
  if (eligibleFiles.isEmpty()) {
    return new ArrayList<>();
  }
  Map<Long,List<FileInputSplit>> splitsToForward=getInputSplits(eligibleFiles);
  List<Tuple2<Long,List<FileInputSplit>>> sortedSplitsToForward=new ArrayList<>();
  for (  Map.Entry<Long,List<FileInputSplit>> entry : splitsToForward.entrySet()) {
    sortedSplitsToForward.add(new Tuple2<>(entry.getKey(),entry.getValue()));
  }
  Collections.sort(sortedSplitsToForward,new Comparator<Tuple2<Long,List<FileInputSplit>>>(){
    @Override public int compare(    Tuple2<Long,List<FileInputSplit>> o1,    Tuple2<Long,List<FileInputSplit>> o2){
      return (int)(o1.f0 - o2.f0);
    }
  }
);
  return sortedSplitsToForward;
}
