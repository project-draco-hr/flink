{
  if (this.next == null) {
    if (this.bufferCurrentlyRead != null) {
      if (this.bufferCurrentlyRead.read(target)) {
        return true;
      }
 else {
        this.consumedBuffers.add(this.bufferCurrentlyRead);
        if (this.fullBuffers.isEmpty()) {
          this.bufferCurrentlyRead=null;
          return false;
        }
 else {
          this.bufferCurrentlyRead=this.fullBuffers.remove(0);
          if (this.bufferCurrentlyRead.read(target)) {
            return true;
          }
 else {
            throw new IOException("BlockResettableIterator: " + "BUG - Could not de-serialize element newly obtaint input block buffer.");
          }
        }
      }
    }
 else     if (this.bufferCurrentlyFilled != null) {
      if (this.input.next(target)) {
        if (this.bufferCurrentlyFilled.write(target)) {
          return true;
        }
 else {
          final int fillPosition=this.bufferCurrentlyFilled.getPosition();
          final MemorySegment seg=this.bufferCurrentlyFilled.dispose();
          this.bufferCurrentlyFilled=null;
          final Buffer.Input in=new Buffer.Input(seg);
          in.reset(fillPosition);
          this.consumedBuffers.add(in);
          if (this.emptySegments.isEmpty()) {
            target.copyTo(this.leftOverRecord);
            this.leftOver=true;
            return false;
          }
 else {
            this.bufferCurrentlyFilled=new Buffer.Output(this.emptySegments.remove(this.emptySegments.size() - 1));
            if (this.bufferCurrentlyFilled.write(target)) {
              return true;
            }
 else {
              throw new IOException("BlockResettableIterator: " + "Could not serialize element into fresh block buffer - element is too large.");
            }
          }
        }
      }
 else {
        this.noMoreBlocks=true;
        return false;
      }
    }
 else {
      if (this.closed) {
        throw new IllegalStateException("Iterator was closed.");
      }
      return false;
    }
  }
 else {
    this.next.copyTo(target);
    this.next=null;
    return true;
  }
}
