{
  parseParameters(args);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<String> text=getTextDataSet(env);
  DataSet<WC> tokenized=text.flatMap(new FlatMapFunction<String,WC>(){
    @Override public void flatMap(    String value,    Collector<WC> out){
      String[] tokens=value.toLowerCase().split("\\W+");
      for (      String token : tokens) {
        if (token.length() > 0) {
          out.collect(new WC(token,1));
        }
      }
    }
  }
);
  DataSet<WC> counts=tokenized.groupBy("word").reduce(new ReduceFunction<WC>(){
    public WC reduce(    WC value1,    WC value2){
      return new WC(value1.word,value1.count + value2.count);
    }
  }
);
  if (fileOutput) {
    counts.writeAsText(outputPath);
  }
 else {
    counts.print();
  }
  env.execute("WordCount with custom data types Example");
}
