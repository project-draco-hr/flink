{
  DataSet<Tuple2<Integer,Integer>> doubled=graph.mapVertices(new MapFunction<Integer,Integer>(){
    @Override public Integer map(    Integer value) throws Exception {
      return value * 2;
    }
  }
);
  List<Tuple2<Integer,Integer>> doubledData=new ArrayList<>();
  doubled.output(new LocalCollectionOutputFormat<>(doubledData));
  DataSet<Tuple2<Integer,Integer>> doubledDataset=graph.getVertices().map(new MapFunction<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>>(){
    @Override public Tuple2<Integer,Integer> map(    Tuple2<Integer,Integer> v) throws Exception {
      return new Tuple2<Integer,Integer>(v.f0,v.f1 * 2);
    }
  }
);
  List<Tuple2<Integer,Integer>> originalDataDoubled=new ArrayList<>();
  doubledDataset.output(new LocalCollectionOutputFormat<>(originalDataDoubled));
  assertEquals(doubledData,originalDataDoubled);
  doubled.print();
  graph.getVertices().print();
  env.execute();
}
