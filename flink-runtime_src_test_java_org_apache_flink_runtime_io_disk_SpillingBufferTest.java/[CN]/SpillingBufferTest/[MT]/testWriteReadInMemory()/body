{
  final TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
  final TypeSerializer<Tuple2<Integer,String>> serializer=TestData.getIntStringTupleSerializer();
  final ArrayList<MemorySegment> memory=new ArrayList<MemorySegment>(NUM_MEMORY_SEGMENTS);
  this.memoryManager.allocatePages(this.parentTask,memory,NUM_MEMORY_SEGMENTS);
  final SpillingBuffer outView=new SpillingBuffer(this.ioManager,new ListMemorySegmentSource(memory),this.memoryManager.getPageSize());
  final Tuple2<Integer,String> rec=new Tuple2<>();
  for (int i=0; i < NUM_PAIRS_INMEM; i++) {
    generator.next(rec);
    serializer.serialize(rec,outView);
  }
  DataInputView inView=outView.flip();
  generator.reset();
  final Tuple2<Integer,String> readRec=new Tuple2<>();
  for (int i=0; i < NUM_PAIRS_INMEM; i++) {
    generator.next(rec);
    serializer.deserialize(readRec,inView);
    int k1=rec.f0;
    String v1=rec.f1;
    int k2=readRec.f0;
    String v2=readRec.f1;
    Assert.assertTrue("The re-generated and the read record do not match.",k1 == k2 && v1.equals(v2));
  }
  inView=outView.flip();
  generator.reset();
  for (int i=0; i < NUM_PAIRS_INMEM; i++) {
    generator.next(rec);
    serializer.deserialize(readRec,inView);
    int k1=rec.f0;
    String v1=rec.f1;
    int k2=readRec.f0;
    String v2=readRec.f1;
    Assert.assertTrue("The re-generated and the read record do not match.",k1 == k2 && v1.equals(v2));
  }
  this.memoryManager.release(outView.close());
  this.memoryManager.release(memory);
}
