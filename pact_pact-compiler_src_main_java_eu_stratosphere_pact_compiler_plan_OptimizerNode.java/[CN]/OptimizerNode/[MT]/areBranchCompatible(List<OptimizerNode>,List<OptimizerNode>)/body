{
  if (this.lastJoinedBranchNode == null) {
    return true;
  }
  List<OptimizerNode> joinedLists;
  final int size1=child1Candidate.size();
  int size=size1;
  if (child2Candidate != null) {
    final int size2=child2Candidate.size();
    size+=size2;
    joinedLists=new ArrayList<OptimizerNode>(size);
    for (int i=0; i < size2; ++i) {
      joinedLists.add(child2Candidate.get(i));
    }
  }
 else {
    joinedLists=new ArrayList<OptimizerNode>(size);
  }
  for (int i=0; i < size1; ++i) {
    joinedLists.add(child1Candidate.get(i));
  }
  for (int i=0; i < size; ++i) {
    final OptimizerNode nodeToCompare=joinedLists.get(i).branchPlan.get(this.lastJoinedBranchNode);
    for (int j=i + 1; j < size; ++j) {
      if (!(nodeToCompare == joinedLists.get(j).branchPlan.get(this.lastJoinedBranchNode))) {
        return false;
      }
    }
  }
  return true;
}
