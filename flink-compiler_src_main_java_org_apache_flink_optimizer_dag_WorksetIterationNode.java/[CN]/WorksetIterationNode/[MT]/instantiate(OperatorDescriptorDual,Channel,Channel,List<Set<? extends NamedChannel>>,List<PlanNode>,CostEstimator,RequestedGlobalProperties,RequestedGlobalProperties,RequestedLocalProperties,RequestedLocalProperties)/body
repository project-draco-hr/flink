{
  placePipelineBreakersIfNecessary(DriverStrategy.HYBRIDHASH_BUILD_FIRST,solutionSetIn,worksetIn);
  this.nextWorkset.accept(PlanCacheCleaner.INSTANCE);
  this.solutionSetDelta.accept(PlanCacheCleaner.INSTANCE);
  this.worksetNode.setCandidateProperties(worksetIn.getGlobalProperties(),worksetIn.getLocalProperties(),worksetIn);
  this.solutionSetNode.setCandidateProperties(this.partitionedProperties,new LocalProperties(),solutionSetIn);
  final SolutionSetPlanNode sspn=this.solutionSetNode.getCurrentSolutionSetPlanNode();
  final WorksetPlanNode wspn=this.worksetNode.getCurrentWorksetPlanNode();
  List<PlanNode> solutionSetDeltaCandidates=this.solutionSetDelta.getAlternativePlans(estimator);
  List<PlanNode> worksetCandidates=this.nextWorkset.getAlternativePlans(estimator);
{
    List<PlanNode> newCandidates=new ArrayList<PlanNode>();
    for (Iterator<PlanNode> planDeleter=worksetCandidates.iterator(); planDeleter.hasNext(); ) {
      PlanNode candidate=planDeleter.next();
      GlobalProperties atEndGlobal=candidate.getGlobalProperties();
      LocalProperties atEndLocal=candidate.getLocalProperties();
      FeedbackPropertiesMeetRequirementsReport report=candidate.checkPartialSolutionPropertiesMet(wspn,atEndGlobal,atEndLocal);
      if (report == FeedbackPropertiesMeetRequirementsReport.NO_PARTIAL_SOLUTION) {
        ;
      }
 else       if (report == FeedbackPropertiesMeetRequirementsReport.NOT_MET) {
        Channel toNoOp=new Channel(candidate);
        globPropsReqWorkset.parameterizeChannel(toNoOp,false,nextWorksetRootConnection.getDataExchangeMode(),false);
        locPropsReqWorkset.parameterizeChannel(toNoOp);
        UnaryOperatorNode rebuildWorksetPropertiesNode=new UnaryOperatorNode("Rebuild Workset Properties",FieldList.EMPTY_LIST);
        rebuildWorksetPropertiesNode.setDegreeOfParallelism(candidate.getParallelism());
        SingleInputPlanNode rebuildWorksetPropertiesPlanNode=new SingleInputPlanNode(rebuildWorksetPropertiesNode,"Rebuild Workset Properties",toNoOp,DriverStrategy.UNARY_NO_OP);
        rebuildWorksetPropertiesPlanNode.initProperties(toNoOp.getGlobalProperties(),toNoOp.getLocalProperties());
        estimator.costOperator(rebuildWorksetPropertiesPlanNode);
        GlobalProperties atEndGlobalModified=rebuildWorksetPropertiesPlanNode.getGlobalProperties();
        LocalProperties atEndLocalModified=rebuildWorksetPropertiesPlanNode.getLocalProperties();
        if (!(atEndGlobalModified.equals(atEndGlobal) && atEndLocalModified.equals(atEndLocal))) {
          FeedbackPropertiesMeetRequirementsReport report2=candidate.checkPartialSolutionPropertiesMet(wspn,atEndGlobalModified,atEndLocalModified);
          if (report2 != FeedbackPropertiesMeetRequirementsReport.NOT_MET) {
            newCandidates.add(rebuildWorksetPropertiesPlanNode);
          }
        }
        planDeleter.remove();
      }
    }
    worksetCandidates.addAll(newCandidates);
  }
  if (worksetCandidates.isEmpty()) {
    return;
  }
  for (  PlanNode solutionSetDeltaCandidate : solutionSetDeltaCandidates) {
    SingleInputPlanNode candidate=(SingleInputPlanNode)solutionSetDeltaCandidate;
    GlobalProperties gp=candidate.getGlobalProperties();
    if (gp.getPartitioning() != PartitioningProperty.HASH_PARTITIONED || gp.getPartitioningFields() == null || !gp.getPartitioningFields().equals(this.solutionSetKeyFields)) {
      throw new CompilerException("Bug: The solution set delta is not partitioned.");
    }
  }
  final GlobalProperties gp=new GlobalProperties();
  gp.setHashPartitioned(this.solutionSetKeyFields);
  gp.addUniqueFieldCombination(this.solutionSetKeyFields);
  LocalProperties lp=LocalProperties.EMPTY.addUniqueFields(this.solutionSetKeyFields);
  for (  PlanNode solutionSetCandidate : solutionSetDeltaCandidates) {
    for (    PlanNode worksetCandidate : worksetCandidates) {
      if (this.singleRoot.areBranchCompatible(solutionSetCandidate,worksetCandidate)) {
        SingleInputPlanNode siSolutionDeltaCandidate=(SingleInputPlanNode)solutionSetCandidate;
        boolean immediateDeltaUpdate;
        if (siSolutionDeltaCandidate.getInput().getShipStrategy() == ShipStrategyType.FORWARD && this.solutionDeltaImmediatelyAfterSolutionJoin) {
          if (siSolutionDeltaCandidate.getDriverStrategy() != DriverStrategy.UNARY_NO_OP || siSolutionDeltaCandidate.getInput().getLocalStrategy() != LocalStrategy.NONE) {
            throw new CompilerException("Invalid Solution set delta node.");
          }
          solutionSetCandidate=siSolutionDeltaCandidate.getInput().getSource();
          immediateDeltaUpdate=true;
        }
 else {
          siSolutionDeltaCandidate.getInput().setTempMode(TempMode.PIPELINE_BREAKER);
          immediateDeltaUpdate=false;
        }
        WorksetIterationPlanNode wsNode=new WorksetIterationPlanNode(this,"WorksetIteration (" + this.getOperator().getName() + ")",solutionSetIn,worksetIn,sspn,wspn,worksetCandidate,solutionSetCandidate);
        wsNode.setImmediateSolutionSetUpdate(immediateDeltaUpdate);
        wsNode.initProperties(gp,lp);
        target.add(wsNode);
      }
    }
  }
}
