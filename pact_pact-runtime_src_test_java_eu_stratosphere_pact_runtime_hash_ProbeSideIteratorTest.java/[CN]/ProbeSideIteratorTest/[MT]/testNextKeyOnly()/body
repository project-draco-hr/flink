{
  Assert.assertTrue("ProbeSideIterator must have another key.",this.psi.nextKey());
  Assert.assertEquals("ProbeSideIterator returned a wrong key.",1,this.psi.getCurrentKey().getValue());
  Assert.assertTrue("ProbeSideIterator must have another key.",this.psi.nextKey());
  Assert.assertEquals("ProbeSideIterator returned a wrong key.",2,this.psi.getCurrentKey().getValue());
  Assert.assertTrue("ProbeSideIterator must have another key.",this.psi.nextKey());
  Assert.assertEquals("ProbeSideIterator returned a wrong key.",3,this.psi.getCurrentKey().getValue());
  Assert.assertTrue("ProbeSideIterator must have another key.",this.psi.nextKey());
  Assert.assertEquals("ProbeSideIterator returned a wrong key.",4,this.psi.getCurrentKey().getValue());
  Assert.assertTrue("ProbeSideIterator must have another key.",this.psi.nextKey());
  Assert.assertEquals("ProbeSideIterator returned a wrong key.",5,this.psi.getCurrentKey().getValue());
  Assert.assertFalse("ProbeSideIterator must not have another key.",this.psi.nextKey());
  Assert.assertFalse("ProbeSideIterator must not have another value.",this.psi.hasNext());
  try {
    this.psi.next();
    Assert.fail("A new ProbeSideIterator must not have any value available and hence throw an exception on next().");
  }
 catch (  NoSuchElementException nseex) {
  }
  Assert.assertFalse("ProbeSideIterator must not have another key.",this.psi.nextKey());
  Assert.assertFalse("ProbeSideIterator must not have another key.",this.psi.nextKey());
}
