def dump_source(object, **kwds):
    'write object source to a NamedTemporaryFile (instead of dill.dump)\nLoads with "import" or "dill.temp.load_source".  Returns the filehandle.\n\n    >>> f = lambda x: x**2\n    >>> pyfile = dill.temp.dump_source(f, alias=\'_f\')\n    >>> _f = dill.temp.load_source(pyfile)\n    >>> _f(4)\n    16\n\n    >>> f = lambda x: x**2\n    >>> pyfile = dill.temp.dump_source(f, dir=\'.\')\n    >>> modulename = os.path.basename(pyfile.name).split(\'.py\')[0]\n    >>> exec(\'from %s import f as _f\' % modulename)\n    >>> _f(4)\n    16\n\nOptional kwds:\n    If \'alias\' is specified, the object will be renamed to the given string.\n\n    If \'prefix\' is specified, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n    \n    If \'dir\' is specified, the file will be created in that directory,\n    otherwise a default directory is used.\n    \n    If \'text\' is specified and true, the file is opened in text\n    mode.  Else (the default) the file is opened in binary mode.  On\n    some operating systems, this makes no difference.\n\nNOTE: Keep the return value for as long as you want your file to exist !\n    '
    from .source import importable, getname
    import tempfile
    kwds.pop('suffix', '')
    alias = kwds.pop('alias', '')
    name = (str(alias) or getname(object))
    name = ('\n#NAME: %s\n' % name)
    file = tempfile.NamedTemporaryFile(suffix='.py', **kwds)
    file.write(b(''.join([importable(object, alias=alias), name])))
    file.flush()
    return file
