{
  ConstantFieldsFirst constantSet1=udf.getUserCodeAnnotation(ConstantFieldsFirst.class);
  ConstantFieldsSecond constantSet2=udf.getUserCodeAnnotation(ConstantFieldsSecond.class);
  ConstantFieldsFirstExcept notConstantSet1=udf.getUserCodeAnnotation(ConstantFieldsFirstExcept.class);
  ConstantFieldsSecondExcept notConstantSet2=udf.getUserCodeAnnotation(ConstantFieldsSecondExcept.class);
  ReadFieldsFirst readfieldSet1=udf.getUserCodeAnnotation(ReadFieldsFirst.class);
  ReadFieldsSecond readfieldSet2=udf.getUserCodeAnnotation(ReadFieldsSecond.class);
  if (notConstantSet1 != null && constantSet1 != null) {
    throw new RuntimeException("Either ConstantFieldsFirst or ConstantFieldsFirstExcept can be specified, not both.");
  }
  if (constantSet2 != null && notConstantSet2 != null) {
    throw new RuntimeException("Either ConstantFieldsSecond or ConstantFieldsSecondExcept can be specified, not both.");
  }
  Set<Annotation> result=null;
  if (notConstantSet2 != null) {
    result=new HashSet<Annotation>();
    result.add(notConstantSet2);
  }
  if (constantSet2 != null) {
    result=new HashSet<Annotation>();
    result.add(constantSet2);
  }
  if (readfieldSet2 != null) {
    if (result == null) {
      result=new HashSet<Annotation>();
    }
    result.add(readfieldSet2);
  }
  if (notConstantSet1 != null) {
    if (result == null) {
      result=new HashSet<Annotation>();
    }
    result.add(notConstantSet1);
  }
  if (constantSet1 != null) {
    if (result == null) {
      result=new HashSet<Annotation>();
    }
    result.add(constantSet1);
  }
  if (readfieldSet1 != null) {
    if (result == null) {
      result=new HashSet<Annotation>();
    }
    result.add(readfieldSet1);
  }
  return result;
}
