{
  if (!input1.isTupleType() || !input2.isTupleType() || !output.isTupleType()) {
    return null;
  }
  int input1Arity=input1.getArity();
  int input2Arity=input2.getArity();
  int outputArity=output.getArity();
  ConstantFieldsFirst constantSet1=udf.getUserCodeAnnotation(ConstantFieldsFirst.class);
  ConstantFieldsSecond constantSet2=udf.getUserCodeAnnotation(ConstantFieldsSecond.class);
  ConstantFieldsFirstExcept notConstantSet1=udf.getUserCodeAnnotation(ConstantFieldsFirstExcept.class);
  ConstantFieldsSecondExcept notConstantSet2=udf.getUserCodeAnnotation(ConstantFieldsSecondExcept.class);
  ReadFieldsFirst readfieldSet1=udf.getUserCodeAnnotation(ReadFieldsFirst.class);
  ReadFieldsSecond readfieldSet2=udf.getUserCodeAnnotation(ReadFieldsSecond.class);
  if (notConstantSet1 != null && constantSet1 != null) {
    throw new RuntimeException("Either ConstantFieldsFirst or ConstantFieldsFirstExcept can be specified, not both.");
  }
  if (constantSet2 != null && notConstantSet2 != null) {
    throw new RuntimeException("Either ConstantFieldsSecond or ConstantFieldsSecondExcept can be specified, not both.");
  }
  if (constantSet1 != null && constantSet2 != null && (!checkValidity(constantSet1) || !checkValidity(constantSet2))) {
    throw new RuntimeException("Only two parameters of the annotation should be used at once.");
  }
  DualInputSemanticProperties semanticProperties=new DualInputSemanticProperties();
  if (readfieldSet1 != null && readfieldSet2.value().length > 0) {
    semanticProperties.setReadFields1(new FieldSet(readfieldSet1.value()));
  }
  if (readfieldSet2 != null && readfieldSet2.value().length > 0) {
    semanticProperties.setReadFields2(new FieldSet(readfieldSet2.value()));
  }
  if (notConstantSet1 != null && notConstantSet1.value().length > 0) {
    for (int i=0; i < input1Arity && i < outputArity; i++) {
      if (!Ints.contains(notConstantSet1.value(),i)) {
        semanticProperties.addForwardedField1(i,i);
        ;
      }
      ;
    }
  }
  if (notConstantSet2 != null && notConstantSet2.value().length > 0) {
    for (int i=0; i < input2Arity && i < outputArity; i++) {
      if (!Ints.contains(notConstantSet2.value(),i)) {
        semanticProperties.addForwardedField2(i,i);
        ;
      }
      ;
    }
  }
  if (constantSet1 != null) {
    if (constantSet1.outTuplePos().length == 0 && constantSet1.value().length > 0) {
      for (      int value : constantSet1.value()) {
        semanticProperties.addForwardedField1(value,value);
      }
    }
 else     if (constantSet1.value().length == constantSet1.outTuplePos().length && constantSet1.value().length > 0) {
      for (int i=0; i < constantSet1.value().length; i++) {
        semanticProperties.addForwardedField1(constantSet1.value()[i],constantSet1.outTuplePos()[i]);
      }
    }
 else {
      throw new RuntimeException("Field 'from' and 'to' of the annotation should have the same length.");
    }
  }
  if (constantSet2 != null) {
    if (constantSet2.outTuplePos().length == 0 && constantSet1.value().length > 0) {
      for (      int value : constantSet2.value()) {
        semanticProperties.addForwardedField1(value,value);
      }
    }
 else     if (constantSet2.value().length == constantSet2.outTuplePos().length && constantSet2.value().length > 0) {
      for (int i=0; i < constantSet2.value().length; i++) {
        semanticProperties.addForwardedField2(constantSet2.value()[i],constantSet2.outTuplePos()[i]);
      }
    }
 else {
      throw new RuntimeException("Field 'from' and 'to' of the ConstantFields annotation should have the same length.");
    }
  }
  return semanticProperties;
}
