{
  SequentialStatistics stats=null;
  if (cachedStatistics != null && cachedStatistics instanceof SequentialStatistics)   stats=(SequentialStatistics)cachedStatistics;
 else   stats=new SequentialStatistics(-1,BaseStatistics.UNKNOWN,BaseStatistics.UNKNOWN);
  try {
    boolean modified=false;
    List<FileStatus> files=this.getFiles();
    for (    FileStatus fileStatus : files)     if (fileStatus.getModificationTime() > stats.getLastModificationTime()) {
      stats.setLastModificationTime(fileStatus.getModificationTime());
      modified=true;
    }
    if (!modified)     return stats;
    int totalLength=0;
    for (    FileStatus fileStatus : files)     totalLength+=fileStatus.getLen();
    stats.setTotalInputSize(totalLength);
    stats.setAverageRecordWidth(BaseStatistics.UNKNOWN);
    this.fillStatistics(files,stats);
  }
 catch (  IOException ioex) {
    if (LOG.isWarnEnabled())     LOG.warn(String.format("Could not determine complete statistics for file '%s' due to an I/O error: %s",this.filePath,StringUtils.stringifyException(ioex)));
  }
catch (  Throwable t) {
    if (LOG.isErrorEnabled())     LOG.error(String.format("Unexpected problem while getting the file statistics for file '%s' due to %s",this.filePath,StringUtils.stringifyException(t)));
  }
  if (stats.getTotalInputSize() <= 0)   stats.setLastModificationTime(BaseStatistics.UNKNOWN);
  return stats;
}
