{
  final FileBaseStatistics cachedFileStats=(cachedStats != null && cachedStats instanceof FileBaseStatistics) ? (FileBaseStatistics)cachedStats : null;
  try {
    final Path filePath=this.filePath;
    final FileSystem fs=FileSystem.get(filePath.toUri());
    final ArrayList<FileStatus> allFiles=new ArrayList<FileStatus>(1);
    final FileBaseStatistics stats=getFileStats(cachedFileStats,filePath,fs,allFiles);
    if (stats == null) {
      return null;
    }
    if (stats instanceof SequentialStatistics) {
      return (SequentialStatistics)stats;
    }
 else {
      return createStatistics(allFiles,stats);
    }
  }
 catch (  IOException ioex) {
    if (LOG.isWarnEnabled())     LOG.warn(String.format("Could not determine complete statistics for file '%s' due to an I/O error: %s",this.filePath,StringUtils.stringifyException(ioex)));
  }
catch (  Throwable t) {
    if (LOG.isErrorEnabled())     LOG.error(String.format("Unexpected problem while getting the file statistics for file '%s' due to %s",this.filePath,StringUtils.stringifyException(t)));
  }
  return null;
}
