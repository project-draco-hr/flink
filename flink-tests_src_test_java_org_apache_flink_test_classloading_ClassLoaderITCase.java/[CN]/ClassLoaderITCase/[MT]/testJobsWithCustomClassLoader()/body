{
  try {
    int port=testCluster.getLeaderRPCPort();
    PackagedProgram inputSplitTestProg=new PackagedProgram(new File(INPUT_SPLITS_PROG_JAR_FILE),new String[]{INPUT_SPLITS_PROG_JAR_FILE,"","localhost",String.valueOf(port),"4"});
    inputSplitTestProg.invokeInteractiveModeForExecution();
    PackagedProgram streamingInputSplitTestProg=new PackagedProgram(new File(STREAMING_INPUT_SPLITS_PROG_JAR_FILE),new String[]{STREAMING_INPUT_SPLITS_PROG_JAR_FILE,"localhost",String.valueOf(port),"4"});
    streamingInputSplitTestProg.invokeInteractiveModeForExecution();
    String classpath=new File(INPUT_SPLITS_PROG_JAR_FILE).toURI().toURL().toString();
    PackagedProgram inputSplitTestProg2=new PackagedProgram(new File(INPUT_SPLITS_PROG_JAR_FILE),new String[]{"",classpath,"localhost",String.valueOf(port),"4"});
    inputSplitTestProg2.invokeInteractiveModeForExecution();
    PackagedProgram streamingProg=new PackagedProgram(new File(STREAMING_PROG_JAR_FILE),new String[]{STREAMING_PROG_JAR_FILE,"localhost",String.valueOf(port)});
    streamingProg.invokeInteractiveModeForExecution();
    try {
      PackagedProgram streamingCheckpointedProg=new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE),new String[]{STREAMING_CHECKPOINTED_PROG_JAR_FILE,"localhost",String.valueOf(port)});
      streamingCheckpointedProg.invokeInteractiveModeForExecution();
    }
 catch (    Exception e) {
      assertEquals("Program should terminate with a 'SuccessException'","org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException",e.getCause().getCause().getClass().getCanonicalName());
    }
    PackagedProgram kMeansProg=new PackagedProgram(new File(KMEANS_JAR_PATH),new String[]{KMEANS_JAR_PATH,"localhost",String.valueOf(port),"4",KMeansData.DATAPOINTS,KMeansData.INITIAL_CENTERS,"25"});
    kMeansProg.invokeInteractiveModeForExecution();
    final PackagedProgram userCodeTypeProg=new PackagedProgram(new File(USERCODETYPE_JAR_PATH),new String[]{USERCODETYPE_JAR_PATH,"localhost",String.valueOf(port)});
    userCodeTypeProg.invokeInteractiveModeForExecution();
    File checkpointDir=FOLDER.newFolder();
    File outputDir=FOLDER.newFolder();
    final PackagedProgram program=new PackagedProgram(new File(CHECKPOINTING_CUSTOM_KV_STATE_JAR_PATH),new String[]{CHECKPOINTING_CUSTOM_KV_STATE_JAR_PATH,"localhost",String.valueOf(port),checkpointDir.toURI().toString(),outputDir.toURI().toString()});
    program.invokeInteractiveModeForExecution();
  }
 catch (  Exception e) {
    if (!(e.getCause().getCause() instanceof SuccessException)) {
      fail(e.getMessage());
    }
  }
}
