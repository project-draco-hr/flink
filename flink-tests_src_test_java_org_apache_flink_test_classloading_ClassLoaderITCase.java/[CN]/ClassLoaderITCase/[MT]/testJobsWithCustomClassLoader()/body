{
  try {
    Configuration config=new Configuration();
    config.setInteger(ConfigConstants.LOCAL_INSTANCE_MANAGER_NUMBER_TASK_MANAGER,2);
    config.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,2);
    config.setString(ConfigConstants.DEFAULT_EXECUTION_RETRY_DELAY_KEY,"0 s");
    config.setString(ConfigConstants.STATE_BACKEND,"filesystem");
    config.setString(ConfigConstants.STATE_BACKEND_FS_DIR,"file://" + folder.newFolder().getAbsolutePath());
    ForkableFlinkMiniCluster testCluster=new ForkableFlinkMiniCluster(config,false);
    try {
      int port=testCluster.getJobManagerRPCPort();
      PackagedProgram inputSplitTestProg=new PackagedProgram(new File(INPUT_SPLITS_PROG_JAR_FILE),new String[]{INPUT_SPLITS_PROG_JAR_FILE,"localhost",String.valueOf(port),"4"});
      inputSplitTestProg.invokeInteractiveModeForExecution();
      PackagedProgram streamingProg=new PackagedProgram(new File(STREAMING_PROG_JAR_FILE),new String[]{STREAMING_PROG_JAR_FILE,"localhost",String.valueOf(port)});
      streamingProg.invokeInteractiveModeForExecution();
      try {
        PackagedProgram streamingCheckpointedProg=new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE),new String[]{STREAMING_CHECKPOINTED_PROG_JAR_FILE,"localhost",String.valueOf(port)});
        streamingCheckpointedProg.invokeInteractiveModeForExecution();
      }
 catch (      Exception e) {
        assertEquals("Program should terminate with a 'SuccessException'","org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException",e.getCause().getCause().getClass().getCanonicalName());
      }
      PackagedProgram kMeansProg=new PackagedProgram(new File(KMEANS_JAR_PATH),new String[]{KMEANS_JAR_PATH,"localhost",String.valueOf(port),"4",KMeansData.DATAPOINTS,KMeansData.INITIAL_CENTERS,"25"});
      kMeansProg.invokeInteractiveModeForExecution();
    }
  finally {
      testCluster.shutdown();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
