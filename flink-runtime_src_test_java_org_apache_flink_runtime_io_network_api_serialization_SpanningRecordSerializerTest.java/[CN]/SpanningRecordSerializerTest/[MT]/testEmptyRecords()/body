{
  final int SEGMENT_SIZE=11;
  final SpanningRecordSerializer<SerializationTestType> serializer=new SpanningRecordSerializer<SerializationTestType>();
  final Buffer buffer=new Buffer(new MemorySegment(new byte[SEGMENT_SIZE]),Mockito.mock(BufferRecycler.class));
  try {
    Assert.assertEquals(SerializationResult.FULL_RECORD,serializer.setNextBuffer(buffer));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  try {
    SerializationTestType emptyRecord=new SerializationTestType(){
      @Override public SerializationTestType getRandom(      Random rnd){
        throw new UnsupportedOperationException();
      }
      @Override public int length(){
        throw new UnsupportedOperationException();
      }
      @Override public void write(      DataOutputView out) throws IOException {
      }
      @Override public void read(      DataInputView in) throws IOException {
      }
      @Override public int hashCode(){
        throw new UnsupportedOperationException();
      }
      @Override public boolean equals(      Object obj){
        throw new UnsupportedOperationException();
      }
    }
;
    SerializationResult result=serializer.addRecord(emptyRecord);
    Assert.assertEquals(SerializationResult.FULL_RECORD,result);
    result=serializer.addRecord(emptyRecord);
    Assert.assertEquals(SerializationResult.FULL_RECORD,result);
    result=serializer.addRecord(emptyRecord);
    Assert.assertEquals(SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL,result);
    result=serializer.setNextBuffer(buffer);
    Assert.assertEquals(SerializationResult.FULL_RECORD,result);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
