{
  if (isEmpty())   return (Iterator)EMPTY_ITERATOR;
  if (!this.isAdhoc() && this.inputFormatClass != null) {
    final SplitInputIterator<K,V> inputFileIterator;
    try {
      inputFileIterator=new SplitInputIterator<K,V>(FormatUtil.createInputFormats(this.inputFormatClass,this.path,this.configuration));
    }
 catch (    final IOException e) {
      Assert.fail("reading expected values: " + StringUtils.stringifyException(e));
      return null;
    }
catch (    final Exception e) {
      Assert.fail("creating input format " + StringUtils.stringifyException(e));
      return null;
    }
    if (!inputFileIterator.hasNext() || !this.needsSorting())     return inputFileIterator;
    return this.createSortedIterator(inputFileIterator);
  }
  Collections.sort(this.pairs,new Comparator<KeyValuePair<K,V>>(){
    @Override public int compare(    KeyValuePair<K,V> o1,    KeyValuePair<K,V> o2){
      return o1.getKey().compareTo(o2.getKey());
    }
  }
);
  return this.pairs.iterator();
}
