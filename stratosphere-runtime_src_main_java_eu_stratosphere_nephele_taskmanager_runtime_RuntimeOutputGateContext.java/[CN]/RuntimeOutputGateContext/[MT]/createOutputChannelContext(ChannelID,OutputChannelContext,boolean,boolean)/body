{
  if (previousContext != null) {
    throw new IllegalStateException("Found previous output context for channel " + channelID);
  }
  AbstractOutputChannel<? extends IOReadableWritable> channel=null;
  for (int i=0; i < this.outputGate.getNumberOfOutputChannels(); ++i) {
    AbstractOutputChannel<? extends IOReadableWritable> candidateChannel=this.outputGate.getOutputChannel(i);
    if (candidateChannel.getID().equals(channelID)) {
      channel=candidateChannel;
      break;
    }
  }
  if (channel == null) {
    throw new IllegalArgumentException("Cannot find output channel with ID " + channelID);
  }
  if (!(channel instanceof AbstractByteBufferedOutputChannel)) {
    throw new IllegalStateException("Channel with ID" + channelID + " is not of type AbstractByteBufferedOutputChannel");
  }
  final AbstractByteBufferedOutputChannel<? extends IOReadableWritable> outputChannel=(AbstractByteBufferedOutputChannel<? extends IOReadableWritable>)channel;
  RuntimeOutputChannelBroker outputChannelBroker;
  AbstractOutputChannelForwarder last;
  final RuntimeDispatcher runtimeDispatcher=new RuntimeDispatcher(this.taskContext.getTransferEnvelopeDispatcher());
  final ForwardingBarrier forwardingBarrier=new ForwardingBarrier(channelID,runtimeDispatcher);
  outputChannelBroker=new RuntimeOutputChannelBroker(this,outputChannel,forwardingBarrier);
  last=runtimeDispatcher;
  final OutputChannelForwardingChain forwardingChain=new OutputChannelForwardingChain(outputChannelBroker,last);
  outputChannelBroker.setForwardingChain(forwardingChain);
  return new RuntimeOutputChannelContext(outputChannel,forwardingChain);
}
