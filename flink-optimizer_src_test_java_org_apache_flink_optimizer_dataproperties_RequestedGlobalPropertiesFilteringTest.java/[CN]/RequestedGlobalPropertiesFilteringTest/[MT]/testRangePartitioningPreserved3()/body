{
  SingleInputSemanticProperties sProp=new SingleInputSemanticProperties();
  SemanticPropUtil.getSemanticPropsSingleFromString(sProp,new String[]{"7->3;1->1;2->6"},null,null,tupleInfo,tupleInfo);
  DataDistribution dd=new MockDistribution();
  Ordering o=new Ordering();
  o.appendOrdering(3,LongValue.class,Order.DESCENDING);
  o.appendOrdering(1,IntValue.class,Order.ASCENDING);
  o.appendOrdering(6,ByteValue.class,Order.DESCENDING);
  RequestedGlobalProperties rgProps=new RequestedGlobalProperties();
  rgProps.setRangePartitioned(o,dd);
  RequestedGlobalProperties filtered=rgProps.filterBySemanticProperties(sProp,0);
  assertNotNull(filtered);
  assertEquals(PartitioningProperty.RANGE_PARTITIONED,filtered.getPartitioning());
  assertNotNull(filtered.getOrdering());
  assertEquals(3,filtered.getOrdering().getNumberOfFields());
  assertEquals(7,filtered.getOrdering().getFieldNumber(0).intValue());
  assertEquals(1,filtered.getOrdering().getFieldNumber(1).intValue());
  assertEquals(2,filtered.getOrdering().getFieldNumber(2).intValue());
  assertEquals(LongValue.class,filtered.getOrdering().getType(0));
  assertEquals(IntValue.class,filtered.getOrdering().getType(1));
  assertEquals(ByteValue.class,filtered.getOrdering().getType(2));
  assertEquals(Order.DESCENDING,filtered.getOrdering().getOrder(0));
  assertEquals(Order.ASCENDING,filtered.getOrdering().getOrder(1));
  assertEquals(Order.DESCENDING,filtered.getOrdering().getOrder(2));
  assertNotNull(filtered.getDataDistribution());
  assertEquals(dd,filtered.getDataDistribution());
  assertNull(filtered.getPartitionedFields());
  assertNull(filtered.getCustomPartitioner());
}
