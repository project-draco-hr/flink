{
  try {
    doAnswer(new Answer<KeyedStateBackend>(){
      @Override public KeyedStateBackend answer(      InvocationOnMock invocationOnMock) throws Throwable {
        final TypeSerializer keySerializer=(TypeSerializer)invocationOnMock.getArguments()[0];
        final int numberOfKeyGroups=(Integer)invocationOnMock.getArguments()[1];
        final KeyGroupRange keyGroupRange=(KeyGroupRange)invocationOnMock.getArguments()[2];
        if (keyedStateBackend != null) {
          keyedStateBackend.close();
        }
        if (restoredKeyedState == null) {
          keyedStateBackend=stateBackend.createKeyedStateBackend(mockTask.getEnvironment(),new JobID(),"test_op",keySerializer,numberOfKeyGroups,keyGroupRange,mockTask.getEnvironment().getTaskKvStateRegistry());
          return keyedStateBackend;
        }
 else {
          keyedStateBackend=stateBackend.restoreKeyedStateBackend(mockTask.getEnvironment(),new JobID(),"test_op",keySerializer,numberOfKeyGroups,keyGroupRange,Collections.singletonList(restoredKeyedState),mockTask.getEnvironment().getTaskKvStateRegistry());
          restoredKeyedState=null;
          return keyedStateBackend;
        }
      }
    }
).when(mockTask).createKeyedStateBackend(any(TypeSerializer.class),anyInt(),any(KeyGroupRange.class));
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}
