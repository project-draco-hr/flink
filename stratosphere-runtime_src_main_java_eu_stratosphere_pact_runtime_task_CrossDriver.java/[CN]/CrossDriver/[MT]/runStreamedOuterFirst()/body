{
  if (LOG.isDebugEnabled()) {
    LOG.debug(this.taskContext.formatLogString("Running Cross with Nested-Loops: " + "First input is outer side, second input is inner (spilling) side."));
  }
  final MutableObjectIterator<T1> in1=this.taskContext.getInput(0);
  final MutableObjectIterator<T2> in2=this.taskContext.getInput(1);
  final TypeSerializer<T1> serializer1=this.taskContext.<T1>getInputSerializer(0).getSerializer();
  final TypeSerializer<T2> serializer2=this.taskContext.<T2>getInputSerializer(1).getSerializer();
  final SpillingResettableMutableObjectIterator<T2> spillVals=new SpillingResettableMutableObjectIterator<T2>(in2,serializer2,this.memManager,this.taskContext.getIOManager(),this.memPagesForSpillingSide,this.taskContext.getOwningNepheleTask());
  this.spillIter=spillVals;
  T1 val1;
  final T1 val1Reuse=serializer1.createInstance();
  T1 val1Copy=serializer1.createInstance();
  T2 val2;
  final T2 val2Reuse=serializer2.createInstance();
  final GenericCrosser<T1,T2,OT> crosser=this.taskContext.getStub();
  final Collector<OT> collector=this.taskContext.getOutputCollector();
  while (this.running && ((val1=in1.next(val1Reuse)) != null)) {
    while (this.running && ((val2=spillVals.next(val2Reuse)) != null)) {
      val1Copy=serializer1.copy(val1,val1Copy);
      crosser.cross(val1Copy,val2,collector);
    }
    spillVals.reset();
  }
}
