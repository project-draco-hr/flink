{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(8);
    DataSet<Long> data=env.generateSequence(1,8000000).name("source");
    GroupReduceOperator<Long,Long> reduced=data.reduceGroup(new RichGroupReduceFunction<Long,Long>(){
      public void reduce(      Iterable<Long> values,      Collector<Long> out){
      }
    }
).name("reducer");
    reduced.setCombinable(true);
    reduced.print().name("sink");
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(op);
    SourcePlanNode sourceNode=resolver.getNode("source");
    SingleInputPlanNode reduceNode=resolver.getNode("reducer");
    SinkPlanNode sinkNode=resolver.getNode("sink");
    SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getInput().getSource();
    assertEquals(sourceNode,combineNode.getInput().getSource());
    assertEquals(reduceNode,sinkNode.getInput().getSource());
    assertEquals(DriverStrategy.ALL_GROUP_REDUCE,reduceNode.getDriverStrategy());
    assertEquals(DriverStrategy.ALL_GROUP_REDUCE_COMBINE,combineNode.getDriverStrategy());
    assertEquals(8,sourceNode.getParallelism());
    assertEquals(8,combineNode.getParallelism());
    assertEquals(1,reduceNode.getParallelism());
    assertEquals(1,sinkNode.getParallelism());
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail(e.getClass().getSimpleName() + " in test: " + e.getMessage());
  }
}
