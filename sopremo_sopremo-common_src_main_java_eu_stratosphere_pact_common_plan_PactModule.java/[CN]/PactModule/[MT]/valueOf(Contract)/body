{
  final List<Contract> inputs=new ArrayList<Contract>();
  DependencyAwareDAGTraverser.INSTANCE.traverse(outputs,ContractNavigator.INSTANCE,new DAGTraverseListener<Contract>(){
    @Override public void nodeTraversed(    Contract node){
      if (node instanceof DataSourceContract<?,?>)       inputs.add(node);
 else       if (node instanceof DataSinkContract<?,?> && ((DataSinkContract<?,?>)node).getInput() == null)       inputs.add(node);
 else       if (node instanceof SingleInputContract<?,?,?,?> && ((SingleInputContract<?,?,?,?>)node).getInput() == null)       inputs.add(node);
 else       if (node instanceof DualInputContract<?,?,?,?,?,?>) {
        if (((DualInputContract<?,?,?,?,?,?>)node).getFirstInput() == null)         inputs.add(node);
        if (((DualInputContract<?,?,?,?,?,?>)node).getSecondInput() == null)         inputs.add(node);
      }
    }
  }
);
  PactModule module=new PactModule(inputs.size(),outputs.length);
  for (int index=0; index < outputs.length; index++)   if (outputs[index] instanceof DataSinkContract<?,?>)   module.setOutput(index,(DataSinkContract<?,?>)outputs[index]);
 else   module.getOutput(index).setInput(outputs[index]);
  for (int index=0; index < inputs.size(); index++) {
    Contract node=inputs.get(index);
    if (node instanceof DataSourceContract<?,?>)     module.setInput(index,(DataSourceContract<?,?>)node);
 else     if (node instanceof DataSinkContract<?,?>)     ((DataSinkContract<?,?>)node).setInput(module.getInput(index));
 else     if (node instanceof SingleInputContract<?,?,?,?>)     ((SingleInputContract<?,?,?,?>)node).setInput(module.getInput(index));
 else     if (node instanceof DualInputContract<?,?,?,?,?,?>) {
      if (((DualInputContract<?,?,?,?,?,?>)node).getFirstInput() != null)       ((DualInputContract<?,?,?,?,?,?>)node).setFirstInput(module.getInput(index));
      if (((DualInputContract<?,?,?,?,?,?>)node).getSecondInput() != null)       ((DualInputContract<?,?,?,?,?,?>)node).setSecondInput(module.getInput(index));
    }
  }
  return module;
}
