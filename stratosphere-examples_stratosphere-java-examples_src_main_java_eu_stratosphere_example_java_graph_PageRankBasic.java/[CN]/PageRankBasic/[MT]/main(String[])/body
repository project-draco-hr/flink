{
  parseParameters(args);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple2<Long,Double>> pageWithRankInput=getPageWithRankDataSet(env);
  DataSet<Tuple2<Long,Long>> edgeInput=getEdgeDataSet(env);
  DataSet<Tuple2<Long,Long[]>> adjacencyListInput=edgeInput.groupBy(0).reduceGroup(new BuildOutgoingEdgeList());
  IterativeDataSet<Tuple2<Long,Double>> iteration=pageWithRankInput.iterate(maxIterations);
  DataSet<Tuple2<Long,Double>> newRanks=iteration.join(adjacencyListInput).where(0).equalTo(0).flatMap(new JoinVertexWithEdgesMatch()).groupBy(0).aggregate(SUM,1).map(new Dampener(numVertices));
  DataSet<Tuple2<Long,Double>> finalPageRanks=iteration.closeWith(newRanks,newRanks.join(iteration).where(0).equalTo(0).filter(new EpsilonFilter()));
  if (fileOutput) {
    finalPageRanks.writeAsCsv(outputPath,"\n"," ");
  }
 else {
    finalPageRanks.print();
  }
  env.execute("Basic Page Rank Example");
}
