{
  final int REPEATED_VALUE_1=40559;
  final int REPEATED_VALUE_2=92882;
  final int REPEATED_VALUE_COUNT=3000000;
  final int NUM_KEYS=1000000;
  final int BUILD_VALS_PER_KEY=3;
  final int PROBE_VALS_PER_KEY=10;
  MutableObjectIterator<Record> build1=new UniformRecordGenerator(NUM_KEYS,BUILD_VALS_PER_KEY,false);
  MutableObjectIterator<Record> build2=new ConstantsKeyValuePairsIterator(REPEATED_VALUE_1,17,REPEATED_VALUE_COUNT);
  MutableObjectIterator<Record> build3=new ConstantsKeyValuePairsIterator(REPEATED_VALUE_2,23,REPEATED_VALUE_COUNT);
  List<MutableObjectIterator<Record>> builds=new ArrayList<MutableObjectIterator<Record>>();
  builds.add(build1);
  builds.add(build2);
  builds.add(build3);
  MutableObjectIterator<Record> buildInput=new UnionIterator<Record>(builds);
  MutableObjectIterator<Record> probe1=new UniformRecordGenerator(NUM_KEYS,PROBE_VALS_PER_KEY,true);
  MutableObjectIterator<Record> probe2=new ConstantsKeyValuePairsIterator(REPEATED_VALUE_1,17,REPEATED_VALUE_COUNT);
  MutableObjectIterator<Record> probe3=new ConstantsKeyValuePairsIterator(REPEATED_VALUE_2,23,REPEATED_VALUE_COUNT);
  List<MutableObjectIterator<Record>> probes=new ArrayList<MutableObjectIterator<Record>>();
  probes.add(probe1);
  probes.add(probe2);
  probes.add(probe3);
  MutableObjectIterator<Record> probeInput=new UnionIterator<Record>(probes);
  List<MemorySegment> memSegments;
  try {
    memSegments=this.memManager.allocatePages(MEM_OWNER,896);
  }
 catch (  MemoryAllocationException maex) {
    fail("Memory for the Join could not be provided.");
    return;
  }
  final MutableHashTable<Record,Record> join=new MutableHashTable<Record,Record>(this.recordBuildSideAccesssor,this.recordProbeSideAccesssor,this.recordBuildSideComparator,this.recordProbeSideComparator,this.pactRecordComparator,memSegments,ioManager);
  join.open(buildInput,probeInput);
  final Record recordReuse=new Record();
  try {
    while (join.nextRecord()) {
      HashBucketIterator<Record,Record> buildSide=join.getBuildSideIterator();
      if (buildSide.next(recordReuse) == null) {
        fail("No build side values found for a probe key.");
      }
      while (buildSide.next(recordReuse) != null) {
        ;
      }
    }
    fail("Hash Join must have failed due to too many recursions.");
  }
 catch (  Exception ex) {
  }
  join.close();
  this.memManager.release(join.getFreedMemory());
}
