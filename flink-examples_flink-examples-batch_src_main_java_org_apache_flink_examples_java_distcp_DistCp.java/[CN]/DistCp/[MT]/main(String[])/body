{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  ParameterTool params=ParameterTool.fromArgs(args);
  if (!params.has("input") || !params.has("output")) {
    System.err.println("Usage: --input <path> --output <path> [--parallelism <n>]");
    return;
  }
  final Path sourcePath=new Path(params.get("input"));
  final Path targetPath=new Path(params.get("output"));
  if (!isLocal(env) && !(isOnDistributedFS(sourcePath) && isOnDistributedFS(targetPath))) {
    System.out.println("In a distributed mode only HDFS input/output paths are supported");
    return;
  }
  final int parallelism=params.getInt("parallelism",10);
  if (parallelism <= 0) {
    System.err.println("Parallelism should be greater than 0");
    return;
  }
  env.getConfig().setGlobalJobParameters(params);
  env.setParallelism(parallelism);
  long startTime=System.currentTimeMillis();
  LOGGER.info("Initializing copy tasks");
  List<FileCopyTask> tasks=getCopyTasks(sourcePath);
  LOGGER.info("Copy task initialization took " + (System.currentTimeMillis() - startTime) + "ms");
  DataSet<FileCopyTask> inputTasks=new DataSource<>(env,new FileCopyTaskInputFormat(tasks),new GenericTypeInfo<>(FileCopyTask.class),"fileCopyTasks");
  FlatMapOperator<FileCopyTask,Object> res=inputTasks.flatMap(new RichFlatMapFunction<FileCopyTask,Object>(){
    private LongCounter fileCounter;
    private LongCounter bytesCounter;
    @Override public void open(    Configuration parameters) throws Exception {
      bytesCounter=getRuntimeContext().getLongCounter(BYTES_COPIED_CNT_NAME);
      fileCounter=getRuntimeContext().getLongCounter(FILES_COPIED_CNT_NAME);
    }
    @Override public void flatMap(    FileCopyTask task,    Collector<Object> out) throws Exception {
      LOGGER.info("Processing task: " + task);
      Path outPath=new Path(targetPath,task.getRelativePath());
      FileSystem targetFs=targetPath.getFileSystem();
      if (!targetFs.isDistributedFS()) {
        File outFile=outPath.toUri().isAbsolute() ? new File(outPath.toUri()) : new File(outPath.toString());
        File parentFile=outFile.getParentFile();
        if (!parentFile.mkdirs() && !parentFile.exists()) {
          throw new RuntimeException("Cannot create local file system directories: " + parentFile);
        }
      }
      FSDataOutputStream outputStream=null;
      FSDataInputStream inputStream=null;
      try {
        outputStream=targetFs.create(outPath,true);
        inputStream=task.getPath().getFileSystem().open(task.getPath());
        int bytes=IOUtils.copy(inputStream,outputStream);
        bytesCounter.add(bytes);
      }
  finally {
        IOUtils.closeQuietly(inputStream);
        IOUtils.closeQuietly(outputStream);
      }
      fileCounter.add(1l);
    }
  }
);
  res.print();
  Map<String,Object> accumulators=env.getLastJobExecutionResult().getAllAccumulatorResults();
  LOGGER.info("== COUNTERS ==");
  for (  Map.Entry<String,Object> e : accumulators.entrySet()) {
    LOGGER.info(e.getKey() + ": " + e.getValue());
  }
}
