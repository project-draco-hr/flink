{
  LOG.info("Checking " + ZooKeeper.getClient().getNamespace() + ConfigConstants.DEFAULT_ZOOKEEPER_JOBGRAPHS_PATH);
  List<String> jobGraphs=ZooKeeper.getClient().getChildren().forPath(ConfigConstants.DEFAULT_ZOOKEEPER_JOBGRAPHS_PATH);
  assertEquals("Unclean job graphs: " + jobGraphs,0,jobGraphs.size());
  LOG.info("Checking " + ZooKeeper.getClient().getNamespace() + ConfigConstants.DEFAULT_ZOOKEEPER_CHECKPOINTS_PATH);
  List<String> checkpoints=ZooKeeper.getClient().getChildren().forPath(ConfigConstants.DEFAULT_ZOOKEEPER_CHECKPOINTS_PATH);
  assertEquals("Unclean checkpoints: " + checkpoints,0,checkpoints.size());
  LOG.info("Checking " + ZooKeeper.getClient().getNamespace() + ConfigConstants.DEFAULT_ZOOKEEPER_CHECKPOINT_COUNTER_PATH);
  List<String> checkpointCounter=ZooKeeper.getClient().getChildren().forPath(ConfigConstants.DEFAULT_ZOOKEEPER_CHECKPOINT_COUNTER_PATH);
  assertEquals("Unclean checkpoint counter: " + checkpointCounter,0,checkpointCounter.size());
  LOG.info("ZooKeeper state is clean");
  LOG.info("Checking file system backend state...");
  File fsCheckpoints=new File(config.getString(ConfigConstants.STATE_BACKEND_FS_DIR,""));
  LOG.info("Checking " + fsCheckpoints);
  File[] files=fsCheckpoints.listFiles();
  if (files == null) {
    fail(fsCheckpoints + " does not exist: " + Arrays.toString(FileStateBackendBasePath.listFiles()));
  }
 else {
    assertEquals("Unclean file system checkpoints: " + Arrays.toString(fsCheckpoints.listFiles()),0,files.length);
  }
  File fsRecovery=new File(config.getString(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH,""));
  LOG.info("Checking " + fsRecovery);
  files=fsRecovery.listFiles();
  if (files == null) {
    fail(fsRecovery + " does not exist: " + Arrays.toString(FileStateBackendBasePath.listFiles()));
  }
 else {
    assertEquals("Unclean file system checkpoints: " + Arrays.toString(fsRecovery.listFiles()),0,files.length);
  }
}
