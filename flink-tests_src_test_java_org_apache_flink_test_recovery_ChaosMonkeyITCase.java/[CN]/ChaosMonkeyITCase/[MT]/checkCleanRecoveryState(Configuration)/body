{
  LOG.info("Checking " + ZooKeeper.getClientNamespace() + ConfigConstants.DEFAULT_ZOOKEEPER_JOBGRAPHS_PATH);
  List<String> jobGraphs=ZooKeeper.getChildren(ConfigConstants.DEFAULT_ZOOKEEPER_JOBGRAPHS_PATH);
  assertEquals("Unclean job graphs: " + jobGraphs,0,jobGraphs.size());
  LOG.info("Checking " + ZooKeeper.getClientNamespace() + ConfigConstants.DEFAULT_ZOOKEEPER_CHECKPOINTS_PATH);
  for (int i=0; i < 10; i++) {
    List<String> checkpoints=ZooKeeper.getChildren(ConfigConstants.DEFAULT_ZOOKEEPER_CHECKPOINTS_PATH);
    assertEquals("Unclean checkpoints: " + checkpoints,0,checkpoints.size());
    LOG.info("Unclean... retrying in 2s.");
    Thread.sleep(2000);
  }
  LOG.info("Checking " + ZooKeeper.getClientNamespace() + ConfigConstants.DEFAULT_ZOOKEEPER_CHECKPOINT_COUNTER_PATH);
  List<String> checkpointCounter=ZooKeeper.getChildren(ConfigConstants.DEFAULT_ZOOKEEPER_CHECKPOINT_COUNTER_PATH);
  assertEquals("Unclean checkpoint counter: " + checkpointCounter,0,checkpointCounter.size());
  LOG.info("ZooKeeper state is clean");
  LOG.info("Checking file system backend state...");
  File fsCheckpoints=new File(new URI(config.getString(FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY,"")).getPath());
  LOG.info("Checking " + fsCheckpoints);
  File[] files=fsCheckpoints.listFiles();
  if (files == null) {
    fail(fsCheckpoints + " does not exist: " + Arrays.toString(FileStateBackendBasePath.listFiles()));
  }
  File fsRecovery=new File(new URI(config.getString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH,"")).getPath());
  LOG.info("Checking " + fsRecovery);
  files=fsRecovery.listFiles();
  if (files == null) {
    fail(fsRecovery + " does not exist: " + Arrays.toString(FileStateBackendBasePath.listFiles()));
  }
}
