{
  final SopremoPlan actualPlan=this.parseScript("using cleansing;\n" + "$scrubbedEarmarks = read 'scrubbedEarmarks.json';\n" + "extract from $scrubbedEarmarks into {\n"+ "	$funds = group $ by $.earmarkId into {\n"+ "		id: generateId('earmark'),\n"+ "		amount: sum($[*].amount),\n"+ "		currency: 'USD',\n"+ "		date: {\n"+ "			year: $[0].enactedYear\n"+ "		},\n"+ "		subject: $[0].shortDescription\n"+ "	},\n"+ "};\n"+ "write $funds to hdfs('Earmark_Funds.json');\n");
  final SopremoPlan expectedPlan=new SopremoPlan();
  final Source scrubbedEarmarks=new Source("scrubbedEarmarks.json");
  final EntityExtraction extraction=new EntityExtraction().withInputs(scrubbedEarmarks);
  Grouping grouping=new Grouping().withInputs(extraction.getInputs().get(0)).withGroupingKey(JsonUtil.createPath("0","earmarkId")).withResultProjection(new ObjectCreation(new ObjectCreation.FieldAssignment("id",new MethodCall("generateId",new ConstantExpression("earmark"))),new ObjectCreation.FieldAssignment("amount",new MethodCall("sum",new PathExpression(new InputSelection(0),new ArrayProjection(new ObjectAccess("amount"))))),new ObjectCreation.FieldAssignment("currency",new ConstantExpression("USD")),new ObjectCreation.FieldAssignment("date",new ObjectCreation(new ObjectCreation.FieldAssignment("year",JsonUtil.createPath("0","[0]","enactedYear")))),new ObjectCreation.FieldAssignment("subject",JsonUtil.createPath("0","[0]","shortDescription"))));
  extraction.addExtraction(grouping);
  final Sink funds=new Sink("Earmark_Funds.json").withInputs(extraction);
  expectedPlan.setSinks(funds);
  assertEquals(expectedPlan,actualPlan);
}
