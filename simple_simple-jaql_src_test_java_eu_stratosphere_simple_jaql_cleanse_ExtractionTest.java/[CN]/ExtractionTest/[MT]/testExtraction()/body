{
  SopremoPlan actualPlan=parseScript("using cleansing;" + "$scrubbed_earmarks = read 'scrubbedEarmarks.json';" + "extract from $scrubbed_earmarks into {"+ "	$funds = group $ by $.earmarkId into {"+ "		id: generateId('earmark'),"+ "		amount: sum($[*].amount),"+ "		currency: 'USD',"+ "		date: {"+ "			year: $[0].enactedYear"+ "		},"+ "		subject: $[0].shortDescription"+ "	},"+ "	$recipients = group $ by $.recipient into {"+ "		/*id: generateId('earmark_person'),"+ "		names: [$.recipient],*/"+ "		receivedFunds: project $ into {"+ "			id: $funds[$.earmarkId].id,"+ "			amount: $.amount"+ "		},"+ "		category: $[0].recipientType"+ "	}"+ "};"+ "write $funds to hdfs('Earmark_Funds.json');");
  SopremoPlan expectedPlan=new SopremoPlan();
  Source input=new Source("input.json");
  Selection selection=new Selection().withCondition(new OrExpression(new UnaryExpression(JsonUtil.createPath("$","mgr")),new ComparativeExpression(JsonUtil.createPath("$","income"),BinaryOperator.GREATER,new ConstantExpression(30000)))).withInputs(input);
  Sink output=new Sink("output.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
