{
  SopremoPlan actualPlan=parseScript("using cleansing;\n" + "$scrubbed_earmarks = read 'scrubbedEarmarks.json';\n" + "extract from $scrubbed_earmarks into {\n"+ "	$funds = group $ by $.earmarkId into {\n"+ "		id: generateId('earmark'),\n"+ "		amount: sum($[*].amount),\n"+ "		currency: 'USD',\n"+ "		date: {\n"+ "			year: $[0].enactedYear\n"+ "		},\n"+ "		subject: $[0].shortDescription\n"+ "	},\n"+ "	$recipients = group $ by $.recipient into {\n"+ "		/*id: generateId('earmark_person'),\n"+ "		names: [$.recipient],*/\n"+ "		receivedFunds: project $ into {\n"+ "			id: $funds[$.earmarkId].id,\n"+ "			amount: $.amount\n"+ "		},\n"+ "		category: $[0].recipientType\n"+ "	}\n"+ "};\n"+ "write $funds to hdfs('Earmark_Funds.json');");
  SopremoPlan expectedPlan=new SopremoPlan();
  Source input=new Source("input.json");
  Selection selection=new Selection().withCondition(new OrExpression(new UnaryExpression(JsonUtil.createPath("$","mgr")),new ComparativeExpression(JsonUtil.createPath("$","income"),BinaryOperator.GREATER,new ConstantExpression(30000)))).withInputs(input);
  Sink output=new Sink("output.json").withInputs(selection);
  expectedPlan.setSinks(output);
  assertEquals(expectedPlan,actualPlan);
}
