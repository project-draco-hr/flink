{
  Integer i=5;
  Tuple2<Integer,String> t=new Tuple2<Integer,String>(-1,"a");
  double[] a=new double[]{0.0,1.2};
  KeySelector<Integer,?> ks1=new FieldsKeySelector<Integer>(TypeExtractor.getForObject(i),0);
  try {
    KeySelector<Integer,?> ks2=new FieldsKeySelector<Integer>(TypeExtractor.getForObject(i),2,1);
    fail();
  }
 catch (  RuntimeException e) {
  }
  try {
    KeySelector<Integer,?> ks2=new FieldsKeySelector<Integer>(TypeExtractor.getForObject(i),-1);
    fail();
  }
 catch (  RuntimeException e) {
  }
  assertEquals(ks1.getKey(i),5);
  KeySelector<Tuple2<Integer,String>,?> ks3=new FieldsKeySelector<Tuple2<Integer,String>>(TypeExtractor.getForObject(t),1);
  assertEquals(ks3.getKey(t),"a");
  try {
    KeySelector<Tuple2<Integer,String>,?> ks2=new FieldsKeySelector<Tuple2<Integer,String>>(TypeExtractor.getForObject(t),1,-1);
    fail();
  }
 catch (  RuntimeException e) {
  }
  KeySelector<Tuple2<Integer,String>,?> ks4=new FieldsKeySelector<Tuple2<Integer,String>>(TypeExtractor.getForObject(t),1,1);
  assertEquals(ks4.getKey(t),new Tuple2<String,String>("a","a"));
  KeySelector<double[],?> ks5=new FieldsKeySelector<double[]>(TypeExtractor.getForObject(a),0);
  assertEquals(ks5.getKey(a),0.0);
  KeySelector<double[],?> ks6=new FieldsKeySelector<double[]>(TypeExtractor.getForObject(a),1,0);
  assertEquals(ks6.getKey(a),new Tuple2<Double,Double>(1.2,0.0));
}
