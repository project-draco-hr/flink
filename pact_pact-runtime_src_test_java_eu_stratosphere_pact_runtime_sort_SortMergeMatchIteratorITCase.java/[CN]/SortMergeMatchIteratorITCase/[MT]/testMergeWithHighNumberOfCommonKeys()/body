{
  final int INPUT_1_SIZE=200;
  final int INPUT_2_SIZE=100;
  final int INPUT_1_DUPLICATES=10;
  final int INPUT_2_DUPLICATES=2000;
  final int DUPLICATE_KEY=13;
  try {
    generator1=new Generator(SEED1,500,4096,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    generator2=new Generator(SEED2,500,2048,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    final TestData.GeneratorIterator gen1Iter=new TestData.GeneratorIterator(generator1,INPUT_1_SIZE);
    final TestData.GeneratorIterator gen2Iter=new TestData.GeneratorIterator(generator2,INPUT_2_SIZE);
    final TestData.ConstantValueIterator const1Iter=new TestData.ConstantValueIterator(DUPLICATE_KEY,"LEFT String for Duplicate Keys",INPUT_1_DUPLICATES);
    final TestData.ConstantValueIterator const2Iter=new TestData.ConstantValueIterator(DUPLICATE_KEY,"RIGHT String for Duplicate Keys",INPUT_2_DUPLICATES);
    final List<Iterator<KeyValuePair<TestData.Key,TestData.Value>>> inList1=new ArrayList<Iterator<KeyValuePair<TestData.Key,TestData.Value>>>();
    inList1.add(gen1Iter);
    inList1.add(const1Iter);
    final List<Iterator<KeyValuePair<TestData.Key,TestData.Value>>> inList2=new ArrayList<Iterator<KeyValuePair<TestData.Key,TestData.Value>>>();
    inList2.add(gen2Iter);
    inList2.add(const2Iter);
    Iterator<KeyValuePair<TestData.Key,TestData.Value>> input1=new UnionIterator<KeyValuePair<TestData.Key,TestData.Value>>(inList1);
    Iterator<KeyValuePair<TestData.Key,TestData.Value>> input2=new UnionIterator<KeyValuePair<TestData.Key,TestData.Value>>(inList2);
    final Map<Key,Collection<Match>> expectedMatchesMap=matchValues(collectData(input1),collectData(input2));
    generator1.reset();
    generator2.reset();
    const1Iter.reset();
    const2Iter.reset();
    gen1Iter.reset();
    gen2Iter.reset();
    inList1.clear();
    inList1.add(gen1Iter);
    inList1.add(const1Iter);
    inList2.clear();
    inList2.add(gen2Iter);
    inList2.add(const2Iter);
    input1=new UnionIterator<KeyValuePair<TestData.Key,TestData.Value>>(inList1);
    input2=new UnionIterator<KeyValuePair<TestData.Key,TestData.Value>>(inList2);
    reader1=new TestData.RecordReaderIterMock(input1);
    reader2=new TestData.RecordReaderIterMock(input2);
    final MatchStub<TestData.Key,TestData.Value,TestData.Value,TestData.Key,TestData.Value> matcher=new MatchRemovingMatcher(expectedMatchesMap);
    final Collector<TestData.Key,TestData.Value> collector=new DiscardingOutputCollector<TestData.Key,TestData.Value>();
    SortMergeMatchIterator<TestData.Key,TestData.Value,TestData.Value> iterator=new SortMergeMatchIterator<TestData.Key,TestData.Value,TestData.Value>(memoryManager,ioManager,reader1,reader2,TestData.Key.class,TestData.Value.class,TestData.Value.class,MEMORY_SIZE,64,0.7f,0.00016f,LocalStrategy.SORT_BOTH_MERGE,parentTask);
    iterator.open();
    while (iterator.callWithNextKey(matcher,collector))     ;
    iterator.close();
    for (    Entry<Key,Collection<Match>> entry : expectedMatchesMap.entrySet()) {
      if (!entry.getValue().isEmpty()) {
        Assert.fail("Collection for key " + entry.getKey() + " is not empty");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
