{
  try {
    generator1=new Generator(SEED1,500,4096,KeyMode.SORTED,ValueMode.RANDOM_LENGTH);
    generator2=new Generator(SEED2,500,2048,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
    reader1=new RecordReaderMock(generator1,INPUT_1_SIZE);
    reader2=new RecordReaderMock(generator2,INPUT_2_SIZE);
    Map<Key,Collection<Value>> expectedValuesMap1=collectData(generator1,INPUT_1_SIZE);
    Map<Key,Collection<Value>> expectedValuesMap2=collectData(generator2,INPUT_2_SIZE);
    Map<Key,Collection<Match>> expectedMatchesMap=matchValues(expectedValuesMap1,expectedValuesMap2);
    generator1.reset();
    generator2.reset();
    SortMergeMatchIterator<TestData.Key,TestData.Value,TestData.Value> iterator=new SortMergeMatchIterator<TestData.Key,TestData.Value,TestData.Value>(memoryManager,ioManager,reader1,reader2,TestData.Key.class,TestData.Value.class,TestData.Value.class,MEMORY_SIZE,64,LocalStrategy.SORT_SECOND_MERGE,parentTask);
    iterator.open();
    while (iterator.next()) {
      TestData.Key key=new TestData.Key(iterator.getKey().getKey());
      Assert.assertTrue("No matches for key " + key + " are expected",expectedMatchesMap.containsKey(key));
      Iterator<TestData.Value> iter1=iterator.getValues1();
      Iterator<TestData.Value> iter2=iterator.getValues2();
      List<TestData.Value> values1=new ArrayList<TestData.Value>();
      while (iter1.hasNext()) {
        values1.add(new TestData.Value(iter1.next().getValue()));
      }
      List<TestData.Value> values2=new ArrayList<TestData.Value>();
      while (iter2.hasNext()) {
        values2.add(new TestData.Value(iter2.next().getValue()));
      }
      for (      Value value1 : values1) {
        for (        Value value2 : values2) {
          Collection<Match> expectedValues=expectedMatchesMap.get(key);
          Match match=new Match(value1,value2);
          Assert.assertTrue("Unexpected match " + match + " for key "+ key,expectedValues.contains(match));
          expectedValues.remove(match);
        }
      }
    }
    iterator.close();
    for (    Entry<Key,Collection<Match>> entry : expectedMatchesMap.entrySet()) {
      Assert.assertTrue("Collection for key " + entry.getKey() + " is not empty",entry.getValue().isEmpty());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("An exception occurred during the test: " + e.getMessage());
  }
}
