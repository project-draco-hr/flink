{
  List<ResultPartitionDeploymentDescriptor> producedPartitions=new ArrayList<ResultPartitionDeploymentDescriptor>(resultPartitions.size());
  for (  IntermediateResultPartition partition : resultPartitions.values()) {
    producedPartitions.add(ResultPartitionDeploymentDescriptor.from(partition));
  }
  List<InputGateDeploymentDescriptor> consumedPartitions=new ArrayList<InputGateDeploymentDescriptor>();
  for (  ExecutionEdge[] edges : inputEdges) {
    InputChannelDeploymentDescriptor[] partitions=InputChannelDeploymentDescriptor.fromEdges(edges,targetSlot);
    int numConsumerEdges=edges[0].getSource().getConsumers().get(0).size();
    int queueToRequest=subTaskIndex % numConsumerEdges;
    IntermediateDataSetID resultId=edges[0].getSource().getIntermediateResult().getId();
    consumedPartitions.add(new InputGateDeploymentDescriptor(resultId,queueToRequest,partitions));
  }
  List<BlobKey> jarFiles=getExecutionGraph().getRequiredJarFiles();
  List<URL> classpaths=getExecutionGraph().getRequiredClasspaths();
  return new TaskDeploymentDescriptor(getJobId(),getJobvertexId(),executionId,getTaskName(),subTaskIndex,getTotalNumberOfParallelSubtasks(),getExecutionGraph().getJobConfiguration(),jobVertex.getJobVertex().getConfiguration(),jobVertex.getJobVertex().getInvokableClassName(),producedPartitions,consumedPartitions,jarFiles,classpaths,targetSlot.getRoot().getSlotNumber(),operatorState);
}
