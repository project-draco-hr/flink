{
  List<PartitionDeploymentDescriptor> producedPartitions=new ArrayList<PartitionDeploymentDescriptor>(resultPartitions.length);
  for (  IntermediateResultPartition partition : resultPartitions) {
    producedPartitions.add(PartitionDeploymentDescriptor.fromIntermediateResultPartition(partition));
  }
  List<PartitionConsumerDeploymentDescriptor> consumedPartitions=new ArrayList<PartitionConsumerDeploymentDescriptor>();
  for (  ExecutionEdge[] edges : inputEdges) {
    PartitionInfo[] partitions=PartitionInfo.fromEdges(edges,slot);
    int numConsumerEdges=edges[0].getSource().getConsumers().get(0).size();
    int queueToRequest=subTaskIndex % numConsumerEdges;
    IntermediateDataSetID resultId=edges[0].getSource().getIntermediateResult().getId();
    consumedPartitions.add(new PartitionConsumerDeploymentDescriptor(resultId,partitions,queueToRequest));
  }
  List<BlobKey> jarFiles=getExecutionGraph().getRequiredJarFiles();
  return new TaskDeploymentDescriptor(getJobId(),getJobvertexId(),executionId,getTaskName(),subTaskIndex,getTotalNumberOfParallelSubtasks(),getExecutionGraph().getJobConfiguration(),jobVertex.getJobVertex().getConfiguration(),jobVertex.getJobVertex().getInvokableClassName(),producedPartitions,consumedPartitions,jarFiles,slot.getSlotNumber());
}
