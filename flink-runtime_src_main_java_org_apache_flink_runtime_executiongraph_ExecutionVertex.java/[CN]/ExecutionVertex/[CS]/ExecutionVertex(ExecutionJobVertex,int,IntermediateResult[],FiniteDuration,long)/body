{
  this.jobVertex=jobVertex;
  this.subTaskIndex=subTaskIndex;
  this.resultPartitions=new LinkedHashMap<IntermediateResultPartitionID,IntermediateResultPartition>(producedDataSets.length,1);
  for (  IntermediateResult result : producedDataSets) {
    IntermediateResultPartition irp=new IntermediateResultPartition(result,this,subTaskIndex);
    result.setPartition(subTaskIndex,irp);
    resultPartitions.put(irp.getPartitionId(),irp);
  }
  this.inputEdges=new ExecutionEdge[jobVertex.getJobVertex().getInputs().size()][];
  this.priorExecutions=new CopyOnWriteArrayList<Execution>();
  this.currentExecution=new Execution(getExecutionGraph().getExecutionContext(),this,0,createTimestamp,timeout);
  CoLocationGroup clg=jobVertex.getCoLocationGroup();
  if (clg != null) {
    this.locationConstraint=clg.getLocationConstraint(subTaskIndex);
  }
 else {
    this.locationConstraint=null;
  }
  this.timeout=timeout;
}
