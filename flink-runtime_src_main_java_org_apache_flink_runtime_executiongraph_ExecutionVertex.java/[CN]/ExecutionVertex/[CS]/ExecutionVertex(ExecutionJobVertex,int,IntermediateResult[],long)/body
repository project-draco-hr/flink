{
  this.jobVertex=jobVertex;
  this.subTaskIndex=subTaskIndex;
  this.resultPartitions=new IntermediateResultPartition[producedDataSets.length];
  for (int i=0; i < producedDataSets.length; i++) {
    IntermediateResultPartition irp=new IntermediateResultPartition(producedDataSets[i],this,subTaskIndex);
    this.resultPartitions[i]=irp;
    producedDataSets[i].setPartition(subTaskIndex,irp);
  }
  this.inputEdges=new ExecutionEdge[jobVertex.getJobVertex().getInputs().size()][];
  this.priorExecutions=new CopyOnWriteArrayList<Execution>();
  this.currentExecution=new Execution(this,0,createTimestamp);
  CoLocationGroup clg=jobVertex.getCoLocationGroup();
  if (clg != null) {
    this.locationConstraint=clg.getLocationConstraint(subTaskIndex);
  }
 else {
    this.locationConstraint=null;
  }
}
