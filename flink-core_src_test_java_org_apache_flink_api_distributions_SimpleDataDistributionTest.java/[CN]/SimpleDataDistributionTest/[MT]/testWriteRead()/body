{
  SimpleDistribution ddWrite=new SimpleDistribution(new Key[][]{{new IntValue(1),new StringValue("A"),new IntValue(1)},{new IntValue(2),new StringValue("A"),new IntValue(1)},{new IntValue(2),new StringValue("B"),new IntValue(4)},{new IntValue(2),new StringValue("B"),new IntValue(3)},{new IntValue(2),new StringValue("B"),new IntValue(2)}});
  Assert.assertEquals(3,ddWrite.getNumberOfFields());
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  final DataOutputStream dos=new DataOutputStream(baos);
  try {
    ddWrite.write(new OutputViewDataOutputStreamWrapper(dos));
  }
 catch (  IOException e) {
    Assert.fail("Error serializing the DataDistribution: " + e.getMessage());
  }
  byte[] seralizedDD=baos.toByteArray();
  final ByteArrayInputStream bais=new ByteArrayInputStream(seralizedDD);
  final DataInputStream in=new DataInputStream(bais);
  SimpleDistribution ddRead=new SimpleDistribution();
  try {
    ddRead.read(new InputViewDataInputStreamWrapper(in));
  }
 catch (  Exception ex) {
    Assert.fail("The deserialization of the encoded data distribution caused an error");
  }
  Assert.assertEquals(3,ddRead.getNumberOfFields());
  for (int i=0; i < 6; i++) {
    Key<?>[] recW=ddWrite.getBucketBoundary(0,6);
    Key<?>[] recR=ddWrite.getBucketBoundary(0,6);
    Assert.assertEquals(recW[0],recR[0]);
    Assert.assertEquals(recW[1],recR[1]);
    Assert.assertEquals(recW[2],recR[2]);
  }
}
