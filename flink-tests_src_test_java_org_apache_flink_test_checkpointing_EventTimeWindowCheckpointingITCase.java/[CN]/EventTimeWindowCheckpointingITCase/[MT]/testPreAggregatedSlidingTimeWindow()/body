{
  final int NUM_ELEMENTS_PER_KEY=3000;
  final int WINDOW_SIZE=1000;
  final int WINDOW_SLIDE=100;
  final int NUM_KEYS=100;
  FailingSource.reset();
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getLeaderRPCPort());
    env.setParallelism(PARALLELISM);
    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
    env.enableCheckpointing(100);
    env.setNumberOfExecutionRetries(3);
    env.getConfig().disableSysoutLogging();
    env.setStateBackend(this.stateBackend);
    env.addSource(new FailingSource(NUM_KEYS,NUM_ELEMENTS_PER_KEY,NUM_ELEMENTS_PER_KEY / 3)).rebalance().keyBy(0).timeWindow(Time.of(WINDOW_SIZE,MILLISECONDS),Time.of(WINDOW_SLIDE,MILLISECONDS)).apply(new ReduceFunction<Tuple2<Long,IntType>>(){
      @Override public Tuple2<Long,IntType> reduce(      Tuple2<Long,IntType> a,      Tuple2<Long,IntType> b){
        return new Tuple2<>(a.f0,new IntType(a.f1.value + b.f1.value));
      }
    }
,new RichWindowFunction<Tuple2<Long,IntType>,Tuple4<Long,Long,Long,IntType>,Tuple,TimeWindow>(){
      private boolean open=false;
      @Override public void open(      Configuration parameters){
        assertEquals(PARALLELISM,getRuntimeContext().getNumberOfParallelSubtasks());
        open=true;
      }
      @Override public void apply(      Tuple tuple,      TimeWindow window,      Tuple2<Long,IntType> input,      Collector<Tuple4<Long,Long,Long,IntType>> out){
        assertTrue(open);
        out.collect(new Tuple4<>(input.f0,window.getStart(),window.getEnd(),input.f1));
      }
    }
).addSink(new ValidatingSink(NUM_KEYS,NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);
    tryExecute(env,"Tumbling Window Test");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
