{
  final int NUM_ELEMENTS_PER_KEY=3000;
  final int WINDOW_SIZE=100;
  final int NUM_KEYS=100;
  FailingSource.reset();
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",cluster.getLeaderRPCPort());
    env.setParallelism(PARALLELISM);
    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
    env.enableCheckpointing(100);
    env.setNumberOfExecutionRetries(3);
    env.getConfig().disableSysoutLogging();
    env.setStateBackend(this.stateBackend);
    env.addSource(new FailingSource(NUM_KEYS,NUM_ELEMENTS_PER_KEY,NUM_ELEMENTS_PER_KEY / 3)).rebalance().keyBy(0).timeWindow(Time.of(WINDOW_SIZE,MILLISECONDS)).apply(new RichWindowFunction<Iterable<Tuple2<Long,IntType>>,Tuple4<Long,Long,Long,IntType>,Tuple,TimeWindow>(){
      private boolean open=false;
      private ValueState<Integer> count;
      @Override public void open(      Configuration parameters){
        assertEquals(PARALLELISM,getRuntimeContext().getNumberOfParallelSubtasks());
        open=true;
        count=getRuntimeContext().getPartitionedState(new ValueStateDescriptor<>("count",0,IntSerializer.INSTANCE));
      }
      @Override public void apply(      Tuple tuple,      TimeWindow window,      Iterable<Tuple2<Long,IntType>> values,      Collector<Tuple4<Long,Long,Long,IntType>> out) throws Exception {
        if (count.value() == 0) {
          count.update(tuple.<Long>getField(0).intValue());
        }
        assertTrue(open);
        count.update(count.value() + 1);
        out.collect(new Tuple4<>(tuple.<Long>getField(0),window.getStart(),window.getEnd(),new IntType(count.value())));
      }
    }
).addSink(new CountValidatingSink(NUM_KEYS,NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);
    tryExecute(env,"Tumbling Window Test");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
