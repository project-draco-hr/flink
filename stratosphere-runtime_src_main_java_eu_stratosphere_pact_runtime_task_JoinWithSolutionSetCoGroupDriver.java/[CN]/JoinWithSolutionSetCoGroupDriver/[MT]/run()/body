{
  final GenericCoGrouper<IT1,IT2,OT> coGroupStub=taskContext.getStub();
  final Collector<OT> collector=taskContext.getOutputCollector();
  if (getSolutionSetInputIndex() == 0) {
    IT1 buildSideRecord=rec1;
    @SuppressWarnings("unchecked") final CompactingHashTable<IT1,IT2> join=(CompactingHashTable<IT1,IT2>)hashTable;
    final KeyGroupedIterator<IT2> probeSideInput=new KeyGroupedIterator<IT2>(taskContext.<IT2>getInput(0),serializer2,comparator2);
    final SingleRecordIterator<IT1> siIter=new SingleRecordIterator<IT1>();
    final CompactingHashTable<IT1,IT2>.HashTableProber prober=join.getProber();
    while (this.running && probeSideInput.nextKey()) {
      IT2 current=probeSideInput.getCurrent();
      if (prober.getMatchFor(current,buildSideRecord)) {
        siIter.set(buildSideRecord);
        coGroupStub.coGroup(siIter,probeSideInput.getValues(),collector);
      }
 else {
        throw new RuntimeException("No Match found in solution set.");
      }
    }
  }
 else   if (getSolutionSetInputIndex() == 1) {
    IT2 buildSideRecord=rec2;
    @SuppressWarnings("unchecked") final CompactingHashTable<IT2,IT1> join=(CompactingHashTable<IT2,IT1>)hashTable;
    final KeyGroupedIterator<IT1> probeSideInput=new KeyGroupedIterator<IT1>(taskContext.<IT1>getInput(0),serializer1,comparator1);
    final SingleRecordIterator<IT2> siIter=new SingleRecordIterator<IT2>();
    final CompactingHashTable<IT2,IT1>.HashTableProber prober=join.getProber();
    while (this.running && probeSideInput.nextKey()) {
      IT1 current=probeSideInput.getCurrent();
      if (prober.getMatchFor(current,buildSideRecord)) {
        siIter.set(buildSideRecord);
        coGroupStub.coGroup(probeSideInput.getValues(),siIter,collector);
      }
 else {
        throw new RuntimeException("No Match found in solution set.");
      }
    }
  }
 else {
    throw new Exception();
  }
}
