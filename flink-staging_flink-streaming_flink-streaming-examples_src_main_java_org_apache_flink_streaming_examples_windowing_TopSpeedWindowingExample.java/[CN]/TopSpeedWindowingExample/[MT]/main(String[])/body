{
  if (!parseParameters(args)) {
    return;
  }
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  @SuppressWarnings({"rawtypes","serial"}) DataStream<Tuple4<Integer,Integer,Double,Long>> carData;
  if (fileInput) {
    carData=env.readTextFile(inputPath).map(new ParseCarData());
  }
 else {
    carData=env.addSource(CarSource.create(numOfCars));
  }
  DataStream<Tuple4<Integer,Integer,Double,Long>> topSpeeds=carData.groupBy(0).window(Time.of(evictionSec,new CarTimestamp())).every(Delta.of(triggerMeters,new DeltaFunction<Tuple4<Integer,Integer,Double,Long>>(){
    @Override public double getDelta(    Tuple4<Integer,Integer,Double,Long> oldDataPoint,    Tuple4<Integer,Integer,Double,Long> newDataPoint){
      return newDataPoint.f2 - oldDataPoint.f2;
    }
  }
,new Tuple4<Integer,Integer,Double,Long>(0,0,0d,0l))).local().maxBy(1).flatten();
  if (fileOutput) {
    topSpeeds.writeAsText(outputPath);
  }
 else {
    topSpeeds.print();
  }
  env.execute("CarTopSpeedWindowingExample");
}
