{
  final FlatJoinFunction<Tuple3<String,Double,Integer>,Tuple2<Integer,String>,Tuple2<Double,String>> joiner=new FlatJoinFunction(){
    @Override public void join(    Object first,    Object second,    Collector out) throws Exception {
      Tuple3<String,Double,Integer> fst=(Tuple3<String,Double,Integer>)first;
      Tuple2<Integer,String> snd=(Tuple2<Integer,String>)second;
      assertEquals(fst.f0,snd.f1);
      assertEquals(fst.f2,snd.f0);
      out.collect(new Tuple2<Double,String>(fst.f1,snd.f0.toString()));
    }
  }
;
  final TupleTypeInfo<Tuple3<String,Double,Integer>> leftTypeInfo=TupleTypeInfo.getBasicTupleTypeInfo(String.class,Double.class,Integer.class);
  final TupleTypeInfo<Tuple2<Integer,String>> rightTypeInfo=TupleTypeInfo.getBasicTupleTypeInfo(Integer.class,String.class);
  final TupleTypeInfo<Tuple2<Double,String>> outTypeInfo=TupleTypeInfo.getBasicTupleTypeInfo(Double.class,String.class);
  final int[] leftKeys=new int[]{0,2};
  final int[] rightKeys=new int[]{1,0};
  final String taskName="Collection based tuple joiner";
  final BinaryOperatorInformation<Tuple3<String,Double,Integer>,Tuple2<Integer,String>,Tuple2<Double,String>> binaryOpInfo=new BinaryOperatorInformation<Tuple3<String,Double,Integer>,Tuple2<Integer,String>,Tuple2<Double,String>>(leftTypeInfo,rightTypeInfo,outTypeInfo);
  final JoinOperatorBase<Tuple3<String,Double,Integer>,Tuple2<Integer,String>,Tuple2<Double,String>,FlatJoinFunction<Tuple3<String,Double,Integer>,Tuple2<Integer,String>,Tuple2<Double,String>>> base=new JoinOperatorBase<Tuple3<String,Double,Integer>,Tuple2<Integer,String>,Tuple2<Double,String>,FlatJoinFunction<Tuple3<String,Double,Integer>,Tuple2<Integer,String>,Tuple2<Double,String>>>(joiner,binaryOpInfo,leftKeys,rightKeys,taskName);
  final List<Tuple3<String,Double,Integer>> inputData1=new ArrayList<Tuple3<String,Double,Integer>>(Arrays.asList(new Tuple3<String,Double,Integer>("foo",42.0,1),new Tuple3<String,Double,Integer>("bar",1.0,2),new Tuple3<String,Double,Integer>("bar",2.0,3),new Tuple3<String,Double,Integer>("foobar",3.0,4),new Tuple3<String,Double,Integer>("bar",3.0,3)));
  final List<Tuple2<Integer,String>> inputData2=new ArrayList<Tuple2<Integer,String>>(Arrays.asList(new Tuple2<Integer,String>(3,"bar"),new Tuple2<Integer,String>(4,"foobar"),new Tuple2<Integer,String>(2,"foo")));
  final Set<Tuple2<Double,String>> expected=new HashSet<Tuple2<Double,String>>(Arrays.asList(new Tuple2<Double,String>(2.0,"3"),new Tuple2<Double,String>(3.0,"3"),new Tuple2<Double,String>(3.0,"4")));
  try {
    Method executeOnCollections=base.getClass().getDeclaredMethod("executeOnCollections",List.class,List.class,RuntimeContext.class);
    executeOnCollections.setAccessible(true);
    Object result=executeOnCollections.invoke(base,inputData1,inputData2,null);
    assertEquals(expected,new HashSet<Tuple2<Double,String>>((List<Tuple2<Double,String>>)result));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
