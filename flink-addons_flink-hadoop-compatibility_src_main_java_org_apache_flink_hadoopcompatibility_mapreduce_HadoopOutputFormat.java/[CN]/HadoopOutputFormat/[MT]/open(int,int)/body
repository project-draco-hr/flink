{
  if (Integer.toString(taskNumber + 1).length() > 6) {
    throw new IOException("Task id too large.");
  }
  this.taskNumber=taskNumber + 1;
  this.configuration.set("mapreduce.output.basename","tmp");
  TaskAttemptID taskAttemptID=TaskAttemptID.forName("attempt__0000_r_" + String.format("%" + (6 - Integer.toString(taskNumber + 1).length()) + "s"," ").replace(" ","0") + Integer.toString(taskNumber + 1)+ "_0");
  this.configuration.set("mapred.task.id",taskAttemptID.toString());
  this.configuration.setInt("mapred.task.partition",taskNumber + 1);
  this.configuration.set("mapreduce.task.attempt.id",taskAttemptID.toString());
  this.configuration.setInt("mapreduce.task.partition",taskNumber + 1);
  try {
    this.context=HadoopUtils.instantiateTaskAttemptContext(this.configuration,taskAttemptID);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  System.out.println("HadoopOutputFormat: Write to " + this.configuration.get("mapred" + ".output.dir"));
  this.fileOutputCommitter=new FileOutputCommitter(new Path(this.configuration.get("mapred.output.dir")),context);
  try {
    this.fileOutputCommitter.setupJob(HadoopUtils.instantiateJobContext(this.configuration,new JobID()));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  this.configuration.set("mapreduce.task.output.dir",this.fileOutputCommitter.getWorkPath().toString());
  try {
    this.recordWriter=this.mapreduceOutputFormat.getRecordWriter(this.context);
  }
 catch (  InterruptedException e) {
    throw new IOException("Could not create RecordWriter.",e);
  }
  File dir=new File(this.configuration.get("mapred.output.dir"));
  if (dir.exists()) {
    if (dir.isDirectory()) {
      File[] files=dir.listFiles();
      System.out.println(configuration.get("mapred.output.dir") + " contains the " + "following files.");
      for (      File file : files) {
        System.out.println(file.toPath());
      }
    }
 else {
      System.out.println(configuration.get("mapred.output.dir") + " is not a directory.");
    }
  }
 else {
    System.out.println(configuration.get("mapred.output.dir") + " does not exist yet.");
  }
}
