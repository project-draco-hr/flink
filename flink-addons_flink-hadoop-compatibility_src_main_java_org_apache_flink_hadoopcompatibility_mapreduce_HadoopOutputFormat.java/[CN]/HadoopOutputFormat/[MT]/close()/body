{
  System.out.println("HadoopOutputFormat: Close");
  try {
    this.recordWriter.close(this.context);
  }
 catch (  InterruptedException e) {
    throw new IOException("Could not close RecordReader.",e);
  }
  if (this.fileOutputCommitter.needsTaskCommit(this.context)) {
    this.fileOutputCommitter.commitTask(this.context);
  }
  Path outputPath=new Path(this.configuration.get("mapred.output.dir"));
  File dir=new File(this.configuration.get("mapred.output.dir"));
  if (dir.exists()) {
    if (dir.isDirectory()) {
      File[] files=dir.listFiles();
      System.out.println("Close: " + configuration.get("mapred.output.dir") + " contains"+ " the "+ "following files.");
      for (      File file : files) {
        System.out.println(file.toPath());
      }
    }
 else {
      System.out.println("Close: " + configuration.get("mapred.output.dir") + " is not a"+ " directory.");
    }
  }
 else {
    System.out.println("Close: " + configuration.get("mapred.output.dir") + " does not "+ "exist yet)).");
  }
  FileSystem fs=FileSystem.get(outputPath.toUri(),this.configuration);
  String taskNumberStr=Integer.toString(this.taskNumber);
  String tmpFileTemplate="tmp-r-00000";
  String tmpFile=tmpFileTemplate.substring(0,11 - taskNumberStr.length()) + taskNumberStr;
  if (fs.exists(new Path(outputPath.toString() + "/" + tmpFile))) {
    System.out.println("Rename file " + new Path(outputPath.toString() + "/" + tmpFile) + " "+ "to "+ new Path(outputPath.toString() + "/" + taskNumberStr));
    fs.rename(new Path(outputPath.toString() + "/" + tmpFile),new Path(outputPath.toString() + "/" + taskNumberStr));
  }
 else {
    System.out.println("File does not exist?");
  }
}
