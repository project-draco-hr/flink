{
  final GenericMatcher<IT1,IT2,OT> matchStub=taskContext.getStub();
  final Collector<OT> collector=taskContext.getOutputCollector();
  final MutableObjectIterator<IT2> buildSide=taskContext.getInput(1);
  final MutableHashTable<IT2,IT1> hashJoin=Preconditions.checkNotNull(this.hashJoin);
  hashJoin.open(buildSide,EmptyMutableObjectIterator.<IT1>get());
  if (firstIteration) {
    TaskConfig config=taskContext.getTaskConfig();
    TypeSerializer<IT1> probeSideSerializer=taskContext.getInputSerializer(0);
    MemoryManager memoryManager=taskContext.getMemoryManager();
    IOManager ioManager=taskContext.getIOManager();
    AbstractInvokable owningNepheleTask=taskContext.getOwningNepheleTask();
    ClassLoader userCodeClassLoader=taskContext.getUserCodeClassLoader();
    long completeMemorySize=config.getMemorySize();
    long sorterMemorySize=(long)(completeMemorySize * 0.25);
    config.setMemorySize(completeMemorySize - sorterMemorySize);
    TypeComparator<IT1> probesideComparator=instantiateTypeComparator(config.getCachedHashJoinProbeSideComparatorFactoryClass(userCodeClassLoader),config.getCachedHashjoinProbesideComparatorPrefix(),taskContext.getTaskConfig().getConfiguration(),userCodeClassLoader);
    System.out.println(">>>>>>>>>>>>>>>>>> Starting to sort in " + owningNepheleTask.getIndexInSubtaskGroup());
    Sorter<IT1> sorter=new UnilateralSortMerger(memoryManager,ioManager,taskContext.getInput(0),owningNepheleTask,probeSideSerializer,probesideComparator,sorterMemorySize,config.getNumFilehandles(),config.getSortSpillingTreshold());
    cachedProbeSide=new SpillingResettableMutableObjectIterator<IT1>(sorter.getIterator(),probeSideSerializer,memoryManager,ioManager,config.getMemorySize(),owningNepheleTask);
  }
 else {
    cachedProbeSide.reset();
  }
  final IT1 probeSideRecord=taskContext.<IT1>getInputSerializer(0).createInstance();
  final IT2 buildSideRecord=taskContext.<IT2>getInputSerializer(1).createInstance();
  while (running && cachedProbeSide.next(probeSideRecord)) {
    MutableHashTable.HashBucketIterator<IT2,IT1> bucket=hashJoin.getMatchesFor(probeSideRecord);
    while (bucket.next(buildSideRecord)) {
      matchStub.match(probeSideRecord,buildSideRecord,collector);
    }
  }
}
