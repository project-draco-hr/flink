{
  if (!parseParameters(args)) {
    return;
  }
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Vertex<Long,Point>> vertices=getVerticesDataSet(env);
  DataSet<Edge<Long,Double>> edges=getEdgesDataSet(env);
  Graph<Long,Point,Double> graph=Graph.fromDataSet(vertices,edges,env);
  DataSet<Tuple3<Long,Long,Double>> edgesWithEuclideanWeight=graph.getTriplets().map(new MapFunction<Triplet<Long,Point,Double>,Tuple3<Long,Long,Double>>(){
    @Override public Tuple3<Long,Long,Double> map(    Triplet<Long,Point,Double> triplet) throws Exception {
      Vertex<Long,Point> srcVertex=triplet.getSrcVertex();
      Vertex<Long,Point> trgVertex=triplet.getTrgVertex();
      return new Tuple3<Long,Long,Double>(srcVertex.getId(),trgVertex.getId(),srcVertex.getValue().euclideanDistance(trgVertex.getValue()));
    }
  }
);
  Graph<Long,Point,Double> resultedGraph=graph.joinWithEdges(edgesWithEuclideanWeight,new MapFunction<Tuple2<Double,Double>,Double>(){
    @Override public Double map(    Tuple2<Double,Double> distance) throws Exception {
      return distance.f1;
    }
  }
);
  DataSet<Edge<Long,Double>> result=resultedGraph.getEdges();
  if (fileOutput) {
    result.writeAsCsv(outputPath,"\n",",");
    env.execute("Euclidean Graph Weighing Example");
  }
 else {
    result.print();
  }
}
