{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createLocalEnvironment();
  fillFromCollectionSet();
  DataStream<Tuple1<Integer>> dataStream=env.fromCollection(fromCollectionSet).flatMap(new MyFlatMap(),PARALELISM).addSink(new MySink());
  fillExpectedList();
  fillFromCollectionSet();
  DataStream<Tuple1<Integer>> source=env.fromCollection(fromCollectionSet);
  DataStream<Tuple1<Integer>> map=source.flatMap(new ParallelFlatMap(),1).addSink(new MySink());
  DataStream<Tuple1<Integer>> map2=source.flatMap(new ParallelFlatMap(),1).addSink(new MySink());
  DataStream<Tuple1<Integer>> fromElementsMap=env.fromElements(2,5,9).flatMap(new MyFlatMap(),1);
  DataStream<Tuple1<Integer>> sink=fromElementsMap.addSink(new FromElementsSink());
  fillFromElementsExpected();
  fillFromCollectionSet();
  DataStream<Tuple1<Integer>> fromCollectionMap=env.fromCollection(fromCollectionSet).flatMap(new MyFlatMap(),1);
  DataStream<Tuple1<Integer>> fromCollectionSink=fromCollectionMap.addSink(new FromCollectionSink());
  fillSequenceSet();
  DataStream<Tuple1<Long>> generateSequenceMap=env.generateSequence(0,9).flatMap(new GenerateSequenceFlatMap(),1);
  DataStream<Tuple1<Long>> generateSequenceSink=generateSequenceMap.addSink(new GenerateSequenceSink());
  fillLongSequenceSet();
  env.execute();
  assertTrue(expected.equals(result));
  assertEquals(20,numberOfElements);
  assertEquals(fromElementsExpected,fromElementsResult);
  assertEquals(sequenceExpected,fromCollectionResult);
  assertEquals(sequenceLongExpected,generateSequenceResult);
}
