{
  final ActorSystem system=ActorSystem.create("Testkit",AkkaUtils.getDefaultAkkaConfig());
  LocalFlinkMiniCluster miniCluster=null;
  final int numTMs=3;
  final int numSlots=14;
  final Set<Thread> threadsBefore=new HashSet<>();
{
    final Thread[] allThreads=new Thread[Thread.activeCount()];
    Thread.enumerate(allThreads);
    threadsBefore.addAll(Arrays.asList(allThreads));
  }
  try {
    Configuration config=new Configuration();
    config.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER,numTMs);
    config.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,numSlots);
    miniCluster=new LocalFlinkMiniCluster(config,true);
    miniCluster.start();
    final ActorGateway jmGateway=miniCluster.getLeaderGateway(TestingUtils.TESTING_DURATION());
    new JavaTestKit(system){
{
        final ActorGateway selfGateway=new AkkaActorGateway(getRef(),null);
        new Within(TestingUtils.TESTING_DURATION()){
          @Override protected void run(){
            jmGateway.tell(JobManagerMessages.getRequestNumberRegisteredTaskManager(),selfGateway);
            expectMsgEquals(TestingUtils.TESTING_DURATION(),numTMs);
            jmGateway.tell(JobManagerMessages.getRequestTotalNumberOfSlots(),selfGateway);
            expectMsgEquals(TestingUtils.TESTING_DURATION(),numTMs * numSlots);
          }
        }
;
      }
    }
;
  }
  finally {
    if (miniCluster != null) {
      miniCluster.stop();
      miniCluster.awaitTermination();
    }
    JavaTestKit.shutdownActorSystem(system);
    system.awaitTermination();
  }
  try {
    Field f=ExecutionContextImpl.class.getDeclaredField("executor");
    f.setAccessible(true);
    Object exec=ExecutionContext$.MODULE$.global();
    ForkJoinPool executor=(ForkJoinPool)f.get(exec);
    executor.shutdownNow();
  }
 catch (  Exception e) {
    System.err.println("Cannot test proper thread shutdown for local execution.");
    return;
  }
  long deadline=System.currentTimeMillis() + 30000;
  boolean foundThreads=true;
  String threadName="";
  while (System.currentTimeMillis() < deadline) {
    final Thread[] threadsAfter=new Thread[Thread.activeCount()];
    Thread.enumerate(threadsAfter);
    foundThreads=false;
    for (    Thread t : threadsAfter) {
      if (t.isAlive() && !threadsBefore.contains(t)) {
        boolean allowed=false;
        for (        String prefix : ALLOWED_THREAD_PREFIXES) {
          if (t.getName().startsWith(prefix)) {
            allowed=true;
            break;
          }
        }
        if (!allowed) {
          foundThreads=true;
          threadName=t.toString();
          break;
        }
      }
    }
    if (foundThreads) {
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ignored) {
      }
    }
 else {
      break;
    }
  }
  if (foundThreads) {
    fail("Thread " + threadName + " was started by the mini cluster, but not shut down");
  }
}
