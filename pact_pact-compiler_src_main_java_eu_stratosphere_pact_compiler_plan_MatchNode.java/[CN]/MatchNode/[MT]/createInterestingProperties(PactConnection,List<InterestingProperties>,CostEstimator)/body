{
  InterestingProperties p=new InterestingProperties();
  p.getGlobalProperties().setPartitioning(PartitionProperty.ANY);
  p.getLocalProperties().setKeyOrder(Order.ANY);
  estimator.getHashPartitioningCost(input,p.getMaximalCosts());
  Costs c=new Costs();
  estimator.getLocalSortCost(this,input,c);
  p.getMaximalCosts().addCosts(c);
  InterestingProperties.mergeUnionOfInterestingProperties(target,p);
  p=new InterestingProperties();
  p.getGlobalProperties().setPartitioning(PartitionProperty.ANY);
  estimator.getHashPartitioningCost(input,p.getMaximalCosts());
  InterestingProperties.mergeUnionOfInterestingProperties(target,p);
}
