{
  InterestingProperties p=new InterestingProperties();
  p.getGlobalProperties().setAnyPartitioning(keys);
  p.getLocalProperties().setOrdering(order);
  estimator.addHashPartitioningCost(input,p.getMaximalCosts());
  estimator.addLocalSortCost(input,getTotalMemoryAcrossAllSubTasks(),p.getMaximalCosts());
  target.add(p);
  p=new InterestingProperties();
  p.getGlobalProperties().setAnyPartitioning(keys);
  estimator.addHashPartitioningCost(input,p.getMaximalCosts());
  target.add(p);
  p=new InterestingProperties();
  p.getGlobalProperties().setFullyReplicated();
  p.getLocalProperties().setOrdering(order);
  estimator.addBroadcastCost(input,getDegreeOfParallelism(),p.getMaximalCosts());
  estimator.addLocalSortCost(input,getTotalMemoryAcrossAllSubTasks(),p.getMaximalCosts());
  target.add(p);
  p=new InterestingProperties();
  p.getGlobalProperties().setFullyReplicated();
  estimator.addBroadcastCost(input,getDegreeOfParallelism(),p.getMaximalCosts());
  target.add(p);
}
