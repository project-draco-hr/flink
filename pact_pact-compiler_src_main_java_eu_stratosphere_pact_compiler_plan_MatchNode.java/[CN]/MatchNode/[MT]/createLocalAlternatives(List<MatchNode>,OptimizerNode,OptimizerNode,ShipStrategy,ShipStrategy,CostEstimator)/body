{
  LocalProperties lp1=PactConnection.getLocalPropertiesAfterConnection(pred1,this,ss1);
  LocalProperties lp2=PactConnection.getLocalPropertiesAfterConnection(pred2,this,ss2);
  LocalStrategy ls=getLocalStrategy();
  if (ls != LocalStrategy.NONE) {
    if (ls == LocalStrategy.SORT_BOTH_MERGE || ls == LocalStrategy.SORT_FIRST_MERGE || ls == LocalStrategy.SORT_SECOND_MERGE || ls == LocalStrategy.MERGE) {
      createMatchAlternative(target,pred1,pred2,ss1,ss2,ls,Order.ASCENDING,true,null,estimator);
    }
 else     if (ls == LocalStrategy.HYBRIDHASH_FIRST || ls == LocalStrategy.HYBRIDHASH_SECOND || ls == LocalStrategy.MMHASH_FIRST || ls == LocalStrategy.MMHASH_SECOND) {
      createMatchAlternative(target,pred1,pred2,ss1,ss2,ls,Order.NONE,false,null,estimator);
    }
 else     if (ls == LocalStrategy.SORT_SELF_NESTEDLOOP) {
      createMatchAlternative(target,pred1,null,ss1,null,ls,Order.ASCENDING,true,null,estimator);
    }
 else     if (ls == LocalStrategy.SELF_NESTEDLOOP) {
      LocalProperties outLp=new LocalProperties();
      outLp.setOrdering(lp1.getOrdering());
      outLp.setGrouped(true,lp1.getGroupedFields());
      createMatchAlternative(target,pred1,null,ss1,null,ls,Order.ANY,true,outLp,estimator);
    }
  }
 else {
    if (!pred1.equals(pred2)) {
      if (pred1.estimatedOutputSize > 0 && pred2.estimatedOutputSize > 0) {
        createMatchAlternative(target,pred1,pred2,ss1,ss2,LocalStrategy.HYBRIDHASH_FIRST,Order.NONE,false,null,estimator);
        createMatchAlternative(target,pred1,pred2,ss1,ss2,LocalStrategy.HYBRIDHASH_SECOND,Order.NONE,false,null,estimator);
      }
      int[] keyColumns=getPactContract().getKeyColumnNumbers(0);
      Ordering ordering1=new Ordering();
      for (      int keyColumn : keyColumns) {
        ordering1.appendOrdering(keyColumn,Order.ASCENDING);
      }
      keyColumns=getPactContract().getKeyColumnNumbers(1);
      Ordering ordering2=new Ordering();
      for (      int keyColumn : keyColumns) {
        ordering2.appendOrdering(keyColumn,Order.ASCENDING);
      }
      if (ordering1.isMetBy(lp1.getOrdering()) && ordering2.isMetBy(lp2.getOrdering())) {
        createMatchAlternative(target,pred1,pred2,ss1,ss2,LocalStrategy.MERGE,Order.ASCENDING,true,null,estimator);
      }
 else       if (!ordering1.isMetBy(lp1.getOrdering()) && ordering2.isMetBy(lp2.getOrdering())) {
        createMatchAlternative(target,pred1,pred2,ss1,ss2,LocalStrategy.SORT_FIRST_MERGE,Order.ASCENDING,true,null,estimator);
      }
 else       if (ordering1.isMetBy(lp1.getOrdering()) && !ordering2.isMetBy(lp2.getOrdering())) {
        createMatchAlternative(target,pred1,pred2,ss1,ss2,LocalStrategy.SORT_SECOND_MERGE,Order.ASCENDING,true,null,estimator);
      }
 else {
        createMatchAlternative(target,pred1,pred2,ss1,ss2,LocalStrategy.SORT_BOTH_MERGE,Order.ASCENDING,true,null,estimator);
      }
    }
 else {
      if (lp1.isGrouped()) {
        LocalProperties outLp=new LocalProperties();
        outLp.setOrdering(lp1.getOrdering());
        outLp.setGrouped(true,lp1.getGroupedFields());
        createMatchAlternative(target,pred1,null,ss1,null,LocalStrategy.SELF_NESTEDLOOP,Order.ANY,true,outLp,estimator);
      }
 else {
        createMatchAlternative(target,pred1,null,ss1,null,LocalStrategy.SORT_SELF_NESTEDLOOP,Order.ASCENDING,true,null,estimator);
      }
    }
  }
}
