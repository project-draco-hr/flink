{
  org.junit.Assume.assumeTrue(mode != TestExecutionMode.COLLECTION);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.get3TupleDataSet(env);
  UnsortedGrouping<Tuple3<Integer,Long,String>> partitionedDS=ds.partitionByHash(0).groupBy(1);
  List<Tuple2<Long,Integer>> result=partitionedDS.combineGroup(new GroupCombineFunction<Tuple3<Integer,Long,String>,Tuple2<Long,Integer>>(){
    @Override public void combine(    Iterable<Tuple3<Integer,Long,String>> values,    Collector<Tuple2<Long,Integer>> out) throws Exception {
      int count=0;
      long key=0;
      for (      Tuple3<Integer,Long,String> value : values) {
        key=value.f1;
        count++;
      }
      out.collect(new Tuple2(key,count));
    }
  }
).collect();
  String[] localExpected=new String[]{"(6,6)","(5,5)" + "(4,4)","(3,3)","(2,2)","(1,1)"};
  String[] resultAsStringArray=new String[result.size()];
  for (int i=0; i < resultAsStringArray.length; ++i) {
    resultAsStringArray[i]=result.get(i).toString();
  }
  Arrays.sort(resultAsStringArray);
  Assert.assertEquals("The two arrays were identical.",false,Arrays.equals(localExpected,resultAsStringArray));
}
