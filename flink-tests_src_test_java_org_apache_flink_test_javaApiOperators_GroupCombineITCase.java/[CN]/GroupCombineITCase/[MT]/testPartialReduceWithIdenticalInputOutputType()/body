{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.get3TupleDataSet(env);
  DataSet<Tuple2<Long,Tuple3<Integer,Long,String>>> dsWrapped=ds.map(new Tuple3KvWrapper());
  List<Tuple3<Integer,Long,String>> result=dsWrapped.groupBy(0).combineGroup(new Tuple3toTuple3GroupReduce()).groupBy(0).reduceGroup(new Tuple3toTuple3GroupReduce()).map(new MapFunction<Tuple2<Long,Tuple3<Integer,Long,String>>,Tuple3<Integer,Long,String>>(){
    @Override public Tuple3<Integer,Long,String> map(    Tuple2<Long,Tuple3<Integer,Long,String>> value) throws Exception {
      return value.f1;
    }
  }
).collect();
  String expected="1,1,combined\n" + "5,4,combined\n" + "15,9,combined\n"+ "34,16,combined\n"+ "65,25,combined\n"+ "111,36,combined\n";
  compareResultAsTuples(result,expected);
}
