{
  if (set == null) {
    return new SingleInputSemanticProperties();
  }
  Iterator<Annotation> it=set.iterator();
  String[] forwarded=null;
  String[] nonForwarded=null;
  String[] read=null;
  while (it.hasNext()) {
    Annotation ann=it.next();
    if (ann instanceof ForwardedFields) {
      forwarded=((ForwardedFields)ann).value();
    }
 else     if (ann instanceof NonForwardedFields) {
      nonForwarded=((NonForwardedFields)ann).value();
    }
 else     if (ann instanceof ReadFields) {
      read=((ReadFields)ann).value();
    }
 else     if (ann instanceof ForwardedFieldsFirst || ann instanceof ForwardedFieldsSecond || ann instanceof NonForwardedFieldsFirst|| ann instanceof NonForwardedFieldsSecond|| ann instanceof ReadFieldsFirst|| ann instanceof ReadFieldsSecond) {
      throw new InvalidSemanticAnnotationException("Annotation " + ann.getClass() + " invalid for single input function.");
    }
  }
  if (forwarded != null || nonForwarded != null || read != null) {
    SingleInputSemanticProperties result=new SingleInputSemanticProperties();
    getSemanticPropsSingleFromString(result,forwarded,nonForwarded,read,inType,outType);
    return result;
  }
 else {
    return new SingleInputSemanticProperties();
  }
}
