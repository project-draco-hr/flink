{
  if (forwardedStr == null) {
    return;
  }
  for (  String s : forwardedStr) {
    if (s == null) {
      continue;
    }
    s=s.replaceAll("\\s","");
    Matcher wcMatcher=PATTERN_WILDCARD.matcher(s);
    if (wcMatcher.matches()) {
      if (!inType.equals(outType)) {
        throw new InvalidSemanticAnnotationException("Forwarded field annotation \"" + s + "\" with wildcard only allowed for identical input and output types.");
      }
      for (int i=0; i < inType.getTotalFields(); i++) {
        if (sp instanceof SingleInputSemanticProperties) {
          ((SingleInputSemanticProperties)sp).addForwardedField(i,i);
        }
 else         if (sp instanceof DualInputSemanticProperties) {
          ((DualInputSemanticProperties)sp).addForwardedField(input,i,i);
        }
      }
      return;
    }
    Matcher matcher=PATTERN_ANNOTATION.matcher(s);
    if (!matcher.matches()) {
      throw new InvalidSemanticAnnotationException("Invalid format of forwarded field annotation \"" + s + "\".");
    }
    Matcher forwardMatcher=PATTERN_FORWARD.matcher(s);
    while (forwardMatcher.find()) {
      String sourceStr=forwardMatcher.group(2);
      String targetStr=forwardMatcher.group(6);
      try {
        if (!areFieldsCompatible(sourceStr,inType,targetStr,outType)) {
          throw new InvalidSemanticAnnotationException("Referenced fields of forwarded field annotation \"" + s + "\" do not match.");
        }
        List<FlatFieldDescriptor> inFFDs=getFlatFields(sourceStr,inType);
        List<FlatFieldDescriptor> outFFDs=getFlatFields(targetStr,outType);
        if (sp instanceof SingleInputSemanticProperties) {
          for (int i=0; i < inFFDs.size(); i++) {
            int sourceField=inFFDs.get(i).getPosition();
            int targetField=outFFDs.get(i).getPosition();
            ((SingleInputSemanticProperties)sp).addForwardedField(sourceField,targetField);
          }
        }
 else         if (sp instanceof DualInputSemanticProperties) {
          for (int i=0; i < inFFDs.size(); i++) {
            int sourceField=inFFDs.get(i).getPosition();
            int targetField=outFFDs.get(i).getPosition();
            ((DualInputSemanticProperties)sp).addForwardedField(input,sourceField,targetField);
          }
        }
      }
 catch (      InvalidFieldReferenceException ifre) {
        throw new InvalidSemanticAnnotationException("Invalid field reference in forwarded field annotation \"" + sourceStr + "->"+ targetStr+ "\".",ifre);
      }
catch (      InvalidSemanticAnnotationException isae) {
        throw new InvalidSemanticAnnotationException("Forwarded field annotation \"" + sourceStr + "->"+ targetStr+ "\" could not be added.",isae);
      }
    }
    s=forwardMatcher.replaceAll("");
    Matcher listMatcher=PATTERN_LIST.matcher(s);
    while (listMatcher.find()) {
      String list=listMatcher.group();
      Matcher fieldMatcher=PATTERN_FIELD.matcher(list);
      while (fieldMatcher.find()) {
        String fieldStr=fieldMatcher.group();
        try {
          if (!areFieldsCompatible(fieldStr,inType,fieldStr,outType)) {
            throw new InvalidSemanticAnnotationException("Referenced fields of forwarded field annotation \"" + s + "\" do not match.");
          }
          List<FlatFieldDescriptor> inFFDs=getFlatFields(fieldStr,inType);
          List<FlatFieldDescriptor> outFFDs=getFlatFields(fieldStr,outType);
          for (int i=0; i < inFFDs.size(); i++) {
            int sourcePos=inFFDs.get(i).getPosition();
            int targetPos=outFFDs.get(i).getPosition();
            if (sp instanceof SingleInputSemanticProperties) {
              ((SingleInputSemanticProperties)sp).addForwardedField(sourcePos,targetPos);
            }
 else             if (sp instanceof DualInputSemanticProperties) {
              ((DualInputSemanticProperties)sp).addForwardedField(input,sourcePos,targetPos);
            }
          }
        }
 catch (        InvalidFieldReferenceException ifre) {
          throw new InvalidSemanticAnnotationException("Invalid field reference in forwarded field annotation \"" + fieldStr + "\".",ifre);
        }
catch (        InvalidSemanticAnnotationException isae) {
          throw new InvalidSemanticAnnotationException("Forwarded field annotation \"" + fieldStr + "\" could not be added.",isae);
        }
      }
    }
  }
}
