{
  if (set == null) {
    return new DualInputSemanticProperties();
  }
  Iterator<Annotation> it=set.iterator();
  String[] forwardedFirst=null;
  String[] forwardedSecond=null;
  String[] nonForwardedFirst=null;
  String[] nonForwardedSecond=null;
  String[] readFirst=null;
  String[] readSecond=null;
  while (it.hasNext()) {
    Annotation ann=it.next();
    if (ann instanceof ForwardedFieldsFirst) {
      forwardedFirst=((ForwardedFieldsFirst)ann).value();
    }
 else     if (ann instanceof ForwardedFieldsSecond) {
      forwardedSecond=((ForwardedFieldsSecond)ann).value();
    }
 else     if (ann instanceof NonForwardedFieldsFirst) {
      nonForwardedFirst=((NonForwardedFieldsFirst)ann).value();
    }
 else     if (ann instanceof NonForwardedFieldsSecond) {
      nonForwardedSecond=((NonForwardedFieldsSecond)ann).value();
    }
 else     if (ann instanceof ReadFieldsFirst) {
      readFirst=((ReadFieldsFirst)ann).value();
    }
 else     if (ann instanceof ReadFieldsSecond) {
      readSecond=((ReadFieldsSecond)ann).value();
    }
 else     if (ann instanceof ForwardedFields || ann instanceof NonForwardedFields || ann instanceof ReadFields) {
      throw new InvalidSemanticAnnotationException("Annotation " + ann.getClass() + " invalid for dual input function.");
    }
  }
  if (forwardedFirst != null || nonForwardedFirst != null || readFirst != null || forwardedSecond != null || nonForwardedSecond != null || readSecond != null) {
    DualInputSemanticProperties result=new DualInputSemanticProperties();
    getSemanticPropsDualFromString(result,forwardedFirst,forwardedSecond,nonForwardedFirst,nonForwardedSecond,readFirst,readSecond,inType1,inType2,outType);
    return result;
  }
 else {
    return new DualInputSemanticProperties();
  }
}
