{
  final ExecutionGraph eg=this.executionVertex.getExecutionGraph();
  if (newExecutionState == ExecutionState.FINISHED) {
    final ExecutionGroupVertex groupVertex=this.executionVertex.getGroupVertex();
    for (int i=0; i < groupVertex.getCurrentNumberOfGroupMembers(); ++i) {
      final ExecutionVertex groupMember=groupVertex.getGroupMember(i);
      if (groupMember.getExecutionState() == ExecutionState.SCHEDULED) {
        groupMember.setAllocatedResource(this.executionVertex.getAllocatedResource());
        groupMember.setExecutionState(ExecutionState.READY);
        this.scheduler.deployAssignedVertices(eg);
        return;
      }
    }
    final Iterator<ExecutionVertex> it=new ExecutionGraphIterator(eg,eg.getIndexOfCurrentExecutionStage(),true,true);
    while (it.hasNext()) {
      final ExecutionVertex nextVertex=it.next();
      if (nextVertex.getExecutionState() == ExecutionState.SCHEDULED) {
        nextVertex.setAllocatedResource(this.executionVertex.getAllocatedResource());
        nextVertex.setExecutionState(ExecutionState.READY);
        this.scheduler.deployAssignedVertices(eg);
        return;
      }
    }
  }
  if (newExecutionState == ExecutionState.FINISHED || newExecutionState == ExecutionState.CANCELED || newExecutionState == ExecutionState.FAILED) {
    this.scheduler.checkAndReleaseAllocatedResource(eg,this.executionVertex.getAllocatedResource());
  }
  if (newExecutionState == ExecutionState.FAILED) {
    if (this.executionVertex.hasRetriesLeft()) {
      this.executionVertex.setExecutionState(ExecutionState.SCHEDULED);
    }
  }
}
