{
  final JobGraph myJG=new JobGraph("MyStream");
  final JobInputVertex infoSource=new JobInputVertex("MyInfoSource",myJG);
  infoSource.setInputClass(InfoSource.class);
  final JobInputVertex querySource=new JobInputVertex("MyQuerySource",myJG);
  querySource.setInputClass(QuerySource.class);
  final JobTaskVertex task1=new JobTaskVertex("MyTask1",myJG);
  task1.setTaskClass(MyStreamMap.class);
  task1.setNumberOfSubtasks(2);
  final JobOutputVertex sink=new JobOutputVertex("MySink",myJG);
  sink.setOutputClass(MySink.class);
  try {
    infoSource.connectTo(task1,ChannelType.INMEMORY);
    querySource.connectTo(task1,ChannelType.INMEMORY);
    task1.connectTo(sink,ChannelType.INMEMORY);
  }
 catch (  JobGraphDefinitionException e) {
    e.printStackTrace();
  }
  JobGraphBuilder graphBuilder=new JobGraphBuilder("testGraph");
  graphBuilder.setSource("infoSource",InfoSource.class);
  graphBuilder.setSource("querySource",QuerySource.class);
  graphBuilder.setTask("cellTask",MyStreamMap.class,2);
  graphBuilder.setSink("sink",MySink.class);
  graphBuilder.connect("infoSource","cellTask",ChannelType.INMEMORY);
  graphBuilder.connect("querySource","cellTask",ChannelType.INMEMORY);
  graphBuilder.connect("cellTask","sink",ChannelType.INMEMORY);
  return graphBuilder.getJobGraph();
}
