{
  Collection<LinkedHashMultimap<State<T>,T>> paths=sharedBuffer.extractPatterns(computationState.getState(),computationState.getEvent(),computationState.getTimestamp(),computationState.getVersion());
  ArrayList<Map<String,T>> result=new ArrayList<>();
  TypeSerializer<T> serializer=nonDuplicatingTypeSerializer.getTypeSerializer();
  for (  LinkedHashMultimap<State<T>,T> path : paths) {
    Map<String,T> resultPath=new HashMap<>();
    for (    State<T> key : path.keySet()) {
      int counter=0;
      Set<T> events=path.get(key);
      for (      T event : events) {
        resultPath.put(events.size() > 1 ? generateStateName(key.getName(),counter) : key.getName(),serializer.isImmutableType() ? event : serializer.copy(event));
      }
    }
    result.add(resultPath);
  }
  return result;
}
