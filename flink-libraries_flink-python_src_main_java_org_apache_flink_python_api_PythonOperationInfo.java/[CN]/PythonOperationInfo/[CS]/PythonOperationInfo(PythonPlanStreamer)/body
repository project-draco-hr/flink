{
  identifier=(String)streamer.getRecord();
  parentID=(Integer)streamer.getRecord(true);
  otherID=(Integer)streamer.getRecord(true);
  field="f0.f" + (Integer)streamer.getRecord(true);
  int encodedOrder=(Integer)streamer.getRecord(true);
switch (encodedOrder) {
case 0:
    order=Order.NONE;
  break;
case 1:
order=Order.ASCENDING;
break;
case 2:
order=Order.DESCENDING;
break;
case 3:
order=Order.ANY;
break;
default :
order=Order.NONE;
break;
}
keys=normalizeKeys(streamer.getRecord(true));
keys1=normalizeKeys(streamer.getRecord(true));
keys2=normalizeKeys(streamer.getRecord(true));
Object tmpType=streamer.getRecord();
types=tmpType == null ? null : getForObject(tmpType);
usesUDF=(Boolean)streamer.getRecord();
name=(String)streamer.getRecord();
lineDelimiter=(String)streamer.getRecord();
fieldDelimiter=(String)streamer.getRecord();
writeMode=((Integer)streamer.getRecord(true)) == 1 ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE;
path=(String)streamer.getRecord();
setID=(Integer)streamer.getRecord(true);
toError=(Boolean)streamer.getRecord();
count=(Integer)streamer.getRecord(true);
int valueCount=(Integer)streamer.getRecord(true);
values=new Object[valueCount];
for (int x=0; x < valueCount; x++) {
values[x]=streamer.getRecord();
}
parallelism=(Integer)streamer.getRecord(true);
}
