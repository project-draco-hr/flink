{
  TestListResultSink<Integer> splitterResultSink1=new TestListResultSink<Integer>();
  TestListResultSink<Integer> splitterResultSink2=new TestListResultSink<Integer>();
  StreamExecutionEnvironment env=new TestStreamEnvironment(1,MEMORYSIZE);
  env.setBufferTimeout(1);
  DataStream<Integer> d1=env.fromElements(0,2,4,6,8);
  DataStream<Integer> d2=env.fromElements(1,3,5,7,9);
  d1=d1.merge(d2);
  d1.split(new OutputSelector<Integer>(){
    private static final long serialVersionUID=8354166915727490130L;
    @Override public Iterable<String> select(    Integer value){
      List<String> s=new ArrayList<String>();
      if (value > 4) {
        s.add(">");
      }
 else {
        s.add("<");
      }
      return s;
    }
  }
).select(">").addSink(splitterResultSink1);
  d1.split(new OutputSelector<Integer>(){
    private static final long serialVersionUID=-6822487543355994807L;
    @Override public Iterable<String> select(    Integer value){
      List<String> s=new ArrayList<String>();
      if (value % 3 == 0) {
        s.add("yes");
      }
 else {
        s.add("no");
      }
      return s;
    }
  }
).select("yes").addSink(splitterResultSink2);
  env.execute();
  expectedSplitterResult.clear();
  expectedSplitterResult.addAll(Arrays.asList(5,6,7,8,9));
  assertEquals(expectedSplitterResult,splitterResultSink1.getSortedResult());
  expectedSplitterResult.clear();
  expectedSplitterResult.addAll(Arrays.asList(0,3,6,9));
  assertEquals(expectedSplitterResult,splitterResultSink2.getSortedResult());
}
