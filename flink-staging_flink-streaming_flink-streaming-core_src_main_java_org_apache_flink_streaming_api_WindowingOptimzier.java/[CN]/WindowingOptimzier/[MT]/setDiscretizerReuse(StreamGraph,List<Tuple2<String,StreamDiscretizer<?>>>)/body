{
  List<Tuple2<StreamDiscretizer<?>,List<String>>> matchingDiscretizers=new ArrayList<Tuple2<StreamDiscretizer<?>,List<String>>>();
  for (  Tuple2<String,StreamDiscretizer<?>> discretizer : discretizers) {
    boolean inMatching=false;
    for (    Tuple2<StreamDiscretizer<?>,List<String>> matching : matchingDiscretizers) {
      Set<String> discretizerInEdges=new HashSet<String>(streamGraph.getInEdges(discretizer.f0));
      Set<String> matchingInEdges=new HashSet<String>(streamGraph.getInEdges(matching.f1.get(0)));
      if (discretizer.f1.equals(matching.f0) && discretizerInEdges.equals(matchingInEdges)) {
        matching.f1.add(discretizer.f0);
        inMatching=true;
        break;
      }
    }
    if (!inMatching) {
      List<String> matchingNames=new ArrayList<String>();
      matchingNames.add(discretizer.f0);
      matchingDiscretizers.add(new Tuple2<StreamDiscretizer<?>,List<String>>(discretizer.f1,matchingNames));
    }
  }
  for (  Tuple2<StreamDiscretizer<?>,List<String>> matching : matchingDiscretizers) {
    List<String> matchList=matching.f1;
    if (matchList.size() > 1) {
      String first=matchList.get(0);
      for (int i=1; i < matchList.size(); i++) {
        replaceDiscretizer(streamGraph,matchList.get(i),first);
      }
    }
  }
}
