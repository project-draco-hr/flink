{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<String> dataSet=env.readTextFile("/never/accessed");
    dataSet.map(new MapFunction<String,Integer>(){
      @Override public Integer map(      String value){
        return 0;
      }
    }
).filter(new FilterFunction<Integer>(){
      @Override public boolean filter(      Integer value){
        return false;
      }
    }
).groupBy(new IdentityKeyExtractor<Integer>()).reduceGroup(new Top1GroupReducer<Integer>()).output(new DiscardingOutputFormat<Integer>());
    DataSinkNode sinkNode=convertPlan(env.createProgramPlan()).get(0);
    SingleInputNode reduceNode=(SingleInputNode)sinkNode.getPredecessorNode();
    SingleInputNode keyExtractorNode=(SingleInputNode)reduceNode.getPredecessorNode();
    SingleInputNode filterNode=(SingleInputNode)keyExtractorNode.getPredecessorNode();
    SingleInputNode mapNode=(SingleInputNode)filterNode.getPredecessorNode();
    assertFalse(sinkNode.getInputConnection().isBreakingPipeline());
    assertFalse(reduceNode.getIncomingConnection().isBreakingPipeline());
    assertFalse(keyExtractorNode.getIncomingConnection().isBreakingPipeline());
    assertFalse(filterNode.getIncomingConnection().isBreakingPipeline());
    assertFalse(mapNode.getIncomingConnection().isBreakingPipeline());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
