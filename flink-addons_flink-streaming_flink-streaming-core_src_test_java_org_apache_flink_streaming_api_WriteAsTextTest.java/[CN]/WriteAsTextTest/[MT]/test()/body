{
  LocalStreamEnvironment env=StreamExecutionEnvironment.createLocalEnvironment(1);
  @SuppressWarnings("unused") DataStream<Tuple1<Integer>> dataStream1=env.addSource(new MySource1(),1).writeAsText(PREFIX + "test1.txt");
  fillExpected1();
  @SuppressWarnings("unused") DataStream<Tuple1<Integer>> dataStream2=env.addSource(new MySource1(),1).writeAsText(PREFIX + "test2.txt",5);
  fillExpected2();
  @SuppressWarnings("unused") DataStream<Tuple1<Integer>> dataStream3=env.addSource(new MySource1(),1).writeAsText(PREFIX + "test3.txt",10);
  fillExpected3();
  @SuppressWarnings("unused") DataStream<Tuple1<Integer>> dataStream4=env.addSource(new MySource1(),1).writeAsText(PREFIX + "test4.txt",10,new Tuple1<Integer>(26));
  fillExpected4();
  @SuppressWarnings("unused") DataStream<Tuple1<Integer>> dataStream5=env.addSource(new MySource1(),1).writeAsText(PREFIX + "test5.txt",10,new Tuple1<Integer>(14));
  fillExpected5();
  env.executeTest(MEMORYSIZE);
  readFile(PREFIX + "test1.txt",result1);
  readFile(PREFIX + "test2.txt",result2);
  readFile(PREFIX + "test3.txt",result3);
  readFile(PREFIX + "test4.txt",result4);
  readFile(PREFIX + "test5.txt",result5);
  assertEquals(expected1,result1);
  assertEquals(expected2,result2);
  assertEquals(expected3,result3);
  assertEquals(expected4,result4);
  assertEquals(expected5,result5);
}
