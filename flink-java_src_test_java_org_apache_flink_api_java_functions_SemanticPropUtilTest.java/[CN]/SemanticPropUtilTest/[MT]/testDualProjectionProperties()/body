{
  int[] pMap=new int[]{4,2,0,1,3,4};
  boolean[] iMap=new boolean[]{true,true,false,true,false,false};
  DualInputSemanticProperties sp=SemanticPropUtil.createProjectionPropertiesDual(pMap,iMap,fiveIntTupleType,fiveIntTupleType);
  assertTrue(sp.getForwardingTargetFields(0,4).contains(0));
  assertTrue(sp.getForwardingTargetFields(0,2).contains(1));
  assertTrue(sp.getForwardingTargetFields(1,0).contains(2));
  assertTrue(sp.getForwardingTargetFields(0,1).contains(3));
  assertTrue(sp.getForwardingTargetFields(1,3).contains(4));
  assertTrue(sp.getForwardingTargetFields(1,4).contains(5));
  pMap=new int[]{4,2,0,4,0,1};
  iMap=new boolean[]{true,true,false,true,false,false};
  sp=SemanticPropUtil.createProjectionPropertiesDual(pMap,iMap,fiveIntTupleType,fiveIntTupleType);
  assertTrue(sp.getForwardingTargetFields(0,4).size() == 2);
  assertTrue(sp.getForwardingTargetFields(1,0).size() == 2);
  assertTrue(sp.getForwardingTargetFields(0,4).contains(0));
  assertTrue(sp.getForwardingTargetFields(0,2).contains(1));
  assertTrue(sp.getForwardingTargetFields(1,0).contains(2));
  assertTrue(sp.getForwardingTargetFields(0,4).contains(3));
  assertTrue(sp.getForwardingTargetFields(1,0).contains(4));
  assertTrue(sp.getForwardingTargetFields(1,1).contains(5));
  pMap=new int[]{2,1,0,1};
  iMap=new boolean[]{false,false,true,true};
  sp=SemanticPropUtil.createProjectionPropertiesDual(pMap,iMap,nestedTupleType,threeIntTupleType);
  assertTrue(sp.getForwardingTargetFields(1,2).contains(0));
  assertTrue(sp.getForwardingTargetFields(1,1).contains(1));
  assertTrue(sp.getForwardingTargetFields(0,0).contains(2));
  assertTrue(sp.getForwardingTargetFields(0,1).contains(3));
  assertTrue(sp.getForwardingTargetFields(0,2).contains(4));
  assertTrue(sp.getForwardingTargetFields(0,3).contains(5));
  pMap=new int[]{1,0,0};
  iMap=new boolean[]{false,false,true};
  sp=SemanticPropUtil.createProjectionPropertiesDual(pMap,iMap,nestedTupleType,deepNestedTupleType);
  assertTrue(sp.getForwardingTargetFields(1,1).contains(0));
  assertTrue(sp.getForwardingTargetFields(1,2).contains(1));
  assertTrue(sp.getForwardingTargetFields(1,3).contains(2));
  assertTrue(sp.getForwardingTargetFields(1,4).contains(3));
  assertTrue(sp.getForwardingTargetFields(1,5).contains(4));
  assertTrue(sp.getForwardingTargetFields(1,0).contains(5));
  assertTrue(sp.getForwardingTargetFields(0,0).contains(6));
  assertTrue(sp.getForwardingTargetFields(0,1).contains(7));
  assertTrue(sp.getForwardingTargetFields(0,2).contains(8));
  pMap=new int[]{4,2,1,0};
  iMap=new boolean[]{true,false,true,false};
  sp=SemanticPropUtil.createProjectionPropertiesDual(pMap,iMap,fiveIntTupleType,pojoInTupleType);
  assertTrue(sp.getForwardingTargetFields(0,4).contains(0));
  assertTrue(sp.getForwardingTargetFields(1,2).contains(1));
  assertTrue(sp.getForwardingTargetFields(1,3).contains(2));
  assertTrue(sp.getForwardingTargetFields(1,4).contains(3));
  assertTrue(sp.getForwardingTargetFields(1,5).contains(4));
  assertTrue(sp.getForwardingTargetFields(0,1).contains(5));
  assertTrue(sp.getForwardingTargetFields(1,0).contains(6));
  pMap=new int[]{2,3,-1,0};
  iMap=new boolean[]{true,true,false,true};
  sp=SemanticPropUtil.createProjectionPropertiesDual(pMap,iMap,fiveIntTupleType,intType);
  assertTrue(sp.getForwardingTargetFields(0,2).contains(0));
  assertTrue(sp.getForwardingTargetFields(0,3).contains(1));
  assertTrue(sp.getForwardingTargetFields(1,0).contains(2));
  assertTrue(sp.getForwardingTargetFields(0,0).contains(3));
  pMap=new int[]{-1,-1};
  iMap=new boolean[]{false,true};
  sp=SemanticPropUtil.createProjectionPropertiesDual(pMap,iMap,intType,nestedPojoType);
  assertTrue(sp.getForwardingTargetFields(1,0).contains(0));
  assertTrue(sp.getForwardingTargetFields(1,1).contains(1));
  assertTrue(sp.getForwardingTargetFields(1,2).contains(2));
  assertTrue(sp.getForwardingTargetFields(1,3).contains(3));
  assertTrue(sp.getForwardingTargetFields(1,4).contains(4));
  assertTrue(sp.getForwardingTargetFields(1,5).contains(5));
  assertTrue(sp.getForwardingTargetFields(0,0).contains(6));
  pMap=new int[]{-1,-1};
  iMap=new boolean[]{true,false};
  sp=SemanticPropUtil.createProjectionPropertiesDual(pMap,iMap,intType,nestedPojoType);
  assertTrue(sp.getForwardingTargetFields(0,0).contains(0));
  assertTrue(sp.getForwardingTargetFields(1,0).contains(1));
  assertTrue(sp.getForwardingTargetFields(1,1).contains(2));
  assertTrue(sp.getForwardingTargetFields(1,2).contains(3));
  assertTrue(sp.getForwardingTargetFields(1,3).contains(4));
  assertTrue(sp.getForwardingTargetFields(1,4).contains(5));
  assertTrue(sp.getForwardingTargetFields(1,5).contains(6));
}
