{
  try {
    final Partitioner<Integer> partitioner=new TestPartitionerInt();
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Pojo2> input1=env.fromElements(new Pojo2());
    DataSet<Pojo3> input2=env.fromElements(new Pojo3());
    input1.join(input2,JoinHint.REPARTITION_HASH_FIRST).where("b").equalTo("a").withPartitioner(partitioner).output(new DiscardingOutputFormat<Tuple2<Pojo2,Pojo3>>());
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    DualInputPlanNode join=(DualInputPlanNode)sink.getInput().getSource();
    assertEquals(ShipStrategyType.PARTITION_CUSTOM,join.getInput1().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_CUSTOM,join.getInput2().getShipStrategy());
    assertEquals(partitioner,join.getInput1().getPartitioner());
    assertEquals(partitioner,join.getInput2().getPartitioner());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
