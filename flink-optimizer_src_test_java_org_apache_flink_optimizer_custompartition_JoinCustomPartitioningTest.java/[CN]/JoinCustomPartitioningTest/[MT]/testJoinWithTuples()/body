{
  try {
    final Partitioner<Long> partitioner=new TestPartitionerLong();
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple2<Long,Long>> input1=env.fromElements(new Tuple2<Long,Long>(0L,0L));
    DataSet<Tuple3<Long,Long,Long>> input2=env.fromElements(new Tuple3<Long,Long,Long>(0L,0L,0L));
    input1.join(input2,JoinHint.REPARTITION_HASH_FIRST).where(1).equalTo(0).withPartitioner(partitioner).output(new DiscardingOutputFormat<Tuple2<Tuple2<Long,Long>,Tuple3<Long,Long,Long>>>());
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    SinkPlanNode sink=op.getDataSinks().iterator().next();
    DualInputPlanNode join=(DualInputPlanNode)sink.getInput().getSource();
    assertEquals(ShipStrategyType.PARTITION_CUSTOM,join.getInput1().getShipStrategy());
    assertEquals(ShipStrategyType.PARTITION_CUSTOM,join.getInput2().getShipStrategy());
    assertEquals(partitioner,join.getInput1().getPartitioner());
    assertEquals(partitioner,join.getInput2().getPartitioner());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
