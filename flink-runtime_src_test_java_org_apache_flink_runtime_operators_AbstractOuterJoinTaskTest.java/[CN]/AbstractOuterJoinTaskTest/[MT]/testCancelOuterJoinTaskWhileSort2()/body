{
  setOutput(new DiscardingOutputCollector<Tuple2<Integer,Integer>>());
  addDriverComparator(this.comparator1);
  addDriverComparator(this.comparator2);
  getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory());
  getTaskConfig().setDriverStrategy(this.getSortDriverStrategy());
  getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac);
  setNumFileHandlesForSort(4);
  final AbstractOuterJoinDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> testTask=getOuterJoinDriver();
  addInput(new DelayingIterator<>(new InfiniteIntTupleIterator(),1),this.serializer);
  addInputSorted(new DelayingIterator<>(new InfiniteIntTupleIterator(),1),this.serializer,this.comparator2.duplicate());
  final AtomicReference<Throwable> error=new AtomicReference<>();
  final Thread taskRunner=new Thread("Task runner for testCancelOuterJoinTaskWhileSort2()"){
    @Override public void run(){
      try {
        testDriver(testTask,MockJoinStub.class);
      }
 catch (      Throwable t) {
        error.set(t);
      }
    }
  }
;
  taskRunner.start();
  Thread.sleep(1000);
  cancel();
  taskRunner.interrupt();
  taskRunner.join(60000);
  assertFalse("Task thread did not finish within 60 seconds",taskRunner.isAlive());
  final Throwable taskError=error.get();
  if (taskError != null) {
    fail("Error in task while canceling:\n" + Throwables.getStackTraceAsString(taskError));
  }
}
