{
  int keyCnt1=20;
  int valCnt1=20;
  int keyCnt2=20;
  int valCnt2=20;
  setOutput(this.outList,this.serializer);
  addDriverComparator(this.comparator1);
  addDriverComparator(this.comparator2);
  getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory());
  getTaskConfig().setDriverStrategy(this.getSortDriverStrategy());
  getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac);
  setNumFileHandlesForSort(4);
  final AbstractOuterJoinDriver<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>,Tuple2<Integer,Integer>> testTask=getOuterJoinDriver();
  addInputSorted(new UniformIntTupleGenerator(keyCnt1,valCnt1,false),this.serializer,this.comparator1.duplicate());
  addInput(new UniformIntTupleGenerator(keyCnt2,valCnt2,true),this.serializer);
  testDriver(testTask,MockJoinStub.class);
  final int expCnt=calculateExpectedCount(keyCnt1,valCnt1,keyCnt2,valCnt2);
  Assert.assertTrue("Result set size was " + this.outList.size() + ". Expected was "+ expCnt,this.outList.size() == expCnt);
  this.outList.clear();
}
