{
  super(InputGateUtil.createInputGate(inputGates));
  barrierBuffer=new BarrierBuffer(inputGate,this);
  StreamRecordSerializer<IN> inputRecordSerializer;
  if (enableWatermarkMultiplexing) {
    inputRecordSerializer=new MultiplexingStreamRecordSerializer<IN>(inputSerializer);
  }
 else {
    inputRecordSerializer=new StreamRecordSerializer<IN>(inputSerializer);
  }
  this.deserializationDelegate=new NonReusingDeserializationDelegate(inputRecordSerializer);
  this.recordDeserializers=new SpillingAdaptiveSpanningRecordDeserializer[inputGate.getNumberOfInputChannels()];
  for (int i=0; i < recordDeserializers.length; i++) {
    recordDeserializers[i]=new SpillingAdaptiveSpanningRecordDeserializer<DeserializationDelegate>();
  }
  watermarks=new long[inputGate.getNumberOfInputChannels()];
  for (int i=0; i < inputGate.getNumberOfInputChannels(); i++) {
    watermarks[i]=Long.MIN_VALUE;
  }
  lastEmittedWatermark=Long.MIN_VALUE;
}
