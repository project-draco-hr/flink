{
  super(InputGateUtil.createInputGate(inputGates));
  this.barrierHandler=new BarrierBuffer(inputGate,ioManager);
  if (checkpointListener != null) {
    this.barrierHandler.registerCheckpointEventHandler(checkpointListener);
  }
  if (enableWatermarkMultiplexing) {
    MultiplexingStreamRecordSerializer<IN> ser=new MultiplexingStreamRecordSerializer<IN>(inputSerializer);
    this.deserializationDelegate=new NonReusingDeserializationDelegate<Object>(ser);
  }
 else {
    StreamRecordSerializer<IN> ser=new StreamRecordSerializer<IN>(inputSerializer);
    this.deserializationDelegate=(NonReusingDeserializationDelegate<Object>)(NonReusingDeserializationDelegate<?>)new NonReusingDeserializationDelegate<StreamRecord<IN>>(ser);
  }
  this.recordDeserializers=new SpillingAdaptiveSpanningRecordDeserializer[inputGate.getNumberOfInputChannels()];
  for (int i=0; i < recordDeserializers.length; i++) {
    recordDeserializers[i]=new SpillingAdaptiveSpanningRecordDeserializer<DeserializationDelegate<Object>>();
  }
  watermarks=new long[inputGate.getNumberOfInputChannels()];
  for (int i=0; i < inputGate.getNumberOfInputChannels(); i++) {
    watermarks[i]=Long.MIN_VALUE;
  }
  lastEmittedWatermark=Long.MIN_VALUE;
}
