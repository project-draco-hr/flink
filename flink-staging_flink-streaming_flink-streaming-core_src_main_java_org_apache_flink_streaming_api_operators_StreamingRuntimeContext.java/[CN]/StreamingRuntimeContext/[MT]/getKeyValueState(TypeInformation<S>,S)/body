{
  requireNonNull(stateType,"The state type information must not be null");
  if (this.stateTypeInfo != null && this.keyValueState != null) {
    if (this.stateTypeInfo.equals(stateType)) {
      @SuppressWarnings("unchecked") OperatorState<S> previous=(OperatorState<S>)this.keyValueState;
      return previous;
    }
 else {
      throw new IllegalStateException("Cannot initialize key/value state for type " + stateType + " ; The key/value state has already been created and initialized for a different type: "+ this.stateTypeInfo);
    }
  }
 else {
    try {
      OperatorState<S> state=operator.createKeyValueState(stateType,defaultState);
      this.keyValueState=state;
      this.stateTypeInfo=stateType;
      return state;
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException("Cannot initialize the key/value state",e);
    }
  }
}
