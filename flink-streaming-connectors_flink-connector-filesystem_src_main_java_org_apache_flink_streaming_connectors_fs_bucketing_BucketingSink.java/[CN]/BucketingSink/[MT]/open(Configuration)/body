{
  super.open(parameters);
  subtaskIndex=getRuntimeContext().getIndexOfThisSubtask();
  state=new State<T>();
  Path baseDirectory=new Path(basePath);
  hadoopConf=HadoopFileSystem.getHadoopConfiguration();
  FileSystem fs=baseDirectory.getFileSystem(hadoopConf);
  refTruncate=reflectTruncate(fs);
  long currentProcessingTime=((StreamingRuntimeContext)getRuntimeContext()).getCurrentProcessingTime();
  checkForInactiveBuckets(currentProcessingTime);
  ((StreamingRuntimeContext)getRuntimeContext()).registerTimer(currentProcessingTime + inactiveBucketCheckInterval,this);
  this.clock=new Clock(){
    @Override public long currentTimeMillis(){
      return ((StreamingRuntimeContext)getRuntimeContext()).getCurrentProcessingTime();
    }
  }
;
  try {
    if (fs.exists(baseDirectory) && cleanupOnOpen) {
      RemoteIterator<LocatedFileStatus> bucketFiles=fs.listFiles(baseDirectory,true);
      while (bucketFiles.hasNext()) {
        LocatedFileStatus file=bucketFiles.next();
        if (file.getPath().toString().endsWith(pendingSuffix)) {
          if (file.getPath().toString().contains(partPrefix + "-" + subtaskIndex+ "-")) {
            LOG.debug("(OPEN) Deleting leftover pending file {}",file.getPath().toString());
            fs.delete(file.getPath(),true);
          }
        }
        if (file.getPath().toString().endsWith(inProgressSuffix)) {
          if (file.getPath().toString().contains(partPrefix + "-" + subtaskIndex+ "-")) {
            LOG.debug("(OPEN) Deleting leftover in-progress file {}",file.getPath().toString());
            fs.delete(file.getPath(),true);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    LOG.error("Error while deleting leftover pending/in-progress files: {}",e);
    throw new RuntimeException("Error while deleting leftover pending/in-progress files.",e);
  }
}
