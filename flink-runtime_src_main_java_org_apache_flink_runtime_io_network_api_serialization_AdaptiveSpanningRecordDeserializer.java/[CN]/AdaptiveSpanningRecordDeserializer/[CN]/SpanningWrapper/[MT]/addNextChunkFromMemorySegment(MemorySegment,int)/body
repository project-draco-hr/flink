{
  int segmentPosition=0;
  if (this.lengthBuffer.position() > 0) {
    int toPut=Math.min(this.lengthBuffer.remaining(),numBytesInSegment);
    segment.get(0,this.lengthBuffer,toPut);
    if (this.lengthBuffer.hasRemaining()) {
      return;
    }
 else {
      this.recordLength=this.lengthBuffer.getInt(0);
      if (reporter != null) {
        reporter.reportNumBytesIn(this.recordLength);
      }
      this.lengthBuffer.clear();
      segmentPosition=toPut;
    }
  }
  int needed=this.recordLength - this.recordLimit;
  int available=numBytesInSegment - segmentPosition;
  int toCopy=Math.min(needed,available);
  segment.get(this.serializationBuffer,segmentPosition,toCopy);
  this.recordLimit+=toCopy;
  if (toCopy < available) {
    this.leftOverData=segment;
    this.leftOverStart=segmentPosition + toCopy;
    this.leftOverLimit=numBytesInSegment;
  }
  this.serializationReadBuffer.setBuffer(this.serializationBuffer.wrapAsByteBuffer());
}
