{
  Matcher matcher=PATTERN_NESTED_FIELDS_WILDCARD.matcher(fieldExpression);
  if (!matcher.matches()) {
    throw new InvalidFieldReferenceException("Invalid tuple field reference \"" + fieldExpression + "\".");
  }
  String field=matcher.group(0);
  if (field.equals(ExpressionKeys.SELECT_ALL_CHAR) || field.equals(ExpressionKeys.SELECT_ALL_CHAR_SCALA)) {
    int keyPosition=0;
    for (    TypeInformation<?> type : types) {
      if (type instanceof CompositeType) {
        CompositeType<?> cType=(CompositeType<?>)type;
        cType.getFlatFields(String.valueOf(ExpressionKeys.SELECT_ALL_CHAR),offset + keyPosition,result);
        keyPosition+=cType.getTotalFields() - 1;
      }
 else {
        result.add(new FlatFieldDescriptor(offset + keyPosition,type));
      }
      keyPosition++;
    }
  }
 else {
    String fieldStr=matcher.group(1);
    Matcher fieldMatcher=PATTERN_FIELD.matcher(fieldStr);
    if (!fieldMatcher.matches()) {
      throw new RuntimeException("Invalid matcher pattern");
    }
    field=fieldMatcher.group(2);
    int fieldPos=Integer.valueOf(field);
    if (fieldPos >= this.getArity()) {
      throw new InvalidFieldReferenceException("Tuple field expression \"" + fieldStr + "\" out of bounds of "+ this.toString()+ ".");
    }
    TypeInformation<?> fieldType=this.getTypeAt(fieldPos);
    String tail=matcher.group(5);
    if (tail == null) {
      if (fieldType instanceof CompositeType) {
        for (int i=0; i < fieldPos; i++) {
          offset+=this.getTypeAt(i).getTotalFields();
        }
        ((CompositeType<?>)fieldType).getFlatFields("*",offset,result);
      }
 else {
        int flatFieldPos=offset;
        for (int i=0; i < fieldPos; i++) {
          flatFieldPos+=this.getTypeAt(i).getTotalFields();
        }
        result.add(new FlatFieldDescriptor(flatFieldPos,fieldType));
      }
    }
 else {
      if (fieldType instanceof CompositeType<?>) {
        for (int i=0; i < fieldPos; i++) {
          offset+=this.getTypeAt(i).getTotalFields();
        }
        ((CompositeType<?>)fieldType).getFlatFields(tail,offset,result);
      }
 else {
        throw new InvalidFieldReferenceException("Nested field expression \"" + tail + "\" not possible on atomic type "+ fieldType+ ".");
      }
    }
  }
}
