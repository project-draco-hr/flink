{
  final int REPEATED_VALUE_1=40559;
  final int REPEATED_VALUE_2=92882;
  final int REPEATED_VALUE_COUNT_BUILD=200000;
  final int REPEATED_VALUE_COUNT_PROBE=5;
  final int NUM_KEYS=1000000;
  final int BUILD_VALS_PER_KEY=3;
  final int PROBE_VALS_PER_KEY=10;
  MutableObjectIterator<IntPair> build1=new UniformIntPairGenerator(NUM_KEYS,BUILD_VALS_PER_KEY,false);
  MutableObjectIterator<IntPair> build2=new ConstantsIntPairsIterator(REPEATED_VALUE_1,17,REPEATED_VALUE_COUNT_BUILD);
  MutableObjectIterator<IntPair> build3=new ConstantsIntPairsIterator(REPEATED_VALUE_2,23,REPEATED_VALUE_COUNT_BUILD);
  List<MutableObjectIterator<IntPair>> builds=new ArrayList<MutableObjectIterator<IntPair>>();
  builds.add(build1);
  builds.add(build2);
  builds.add(build3);
  MutableObjectIterator<IntPair> buildInput=new UnionIterator<IntPair>(builds);
  MutableObjectIterator<IntPair> probe1=new UniformIntPairGenerator(NUM_KEYS,PROBE_VALS_PER_KEY,true);
  MutableObjectIterator<IntPair> probe2=new ConstantsIntPairsIterator(REPEATED_VALUE_1,17,5);
  MutableObjectIterator<IntPair> probe3=new ConstantsIntPairsIterator(REPEATED_VALUE_2,23,5);
  List<MutableObjectIterator<IntPair>> probes=new ArrayList<MutableObjectIterator<IntPair>>();
  probes.add(probe1);
  probes.add(probe2);
  probes.add(probe3);
  MutableObjectIterator<IntPair> probeInput=new UnionIterator<IntPair>(probes);
  List<MemorySegment> memSegments;
  try {
    memSegments=this.memManager.allocatePages(MEM_OWNER,896);
  }
 catch (  MemoryAllocationException maex) {
    fail("Memory for the Join could not be provided.");
    return;
  }
  HashMap<Integer,Long> map=new HashMap<Integer,Long>(NUM_KEYS);
  final MutableHashTable<IntPair,IntPair> join=new MutableHashTable<IntPair,IntPair>(this.pairBuildSideAccesssor,this.pairProbeSideAccesssor,this.pairBuildSideComparator,this.pairProbeSideComparator,this.pairComparator,memSegments,ioManager);
  join.open(buildInput,probeInput);
  IntPair record;
  final IntPair recordReuse=new IntPair();
  while (join.nextRecord()) {
    int numBuildValues=0;
    final IntPair probeRec=join.getCurrentProbeRecord();
    int key=probeRec.getKey();
    HashBucketIterator<IntPair,IntPair> buildSide=join.getBuildSideIterator();
    if ((record=buildSide.next(recordReuse)) != null) {
      numBuildValues=1;
      Assert.assertEquals("Probe-side key was different than build-side key.",key,record.getKey());
    }
 else {
      fail("No build side values found for a probe key.");
    }
    while ((record=buildSide.next(recordReuse)) != null) {
      numBuildValues++;
      Assert.assertEquals("Probe-side key was different than build-side key.",key,record.getKey());
    }
    Long contained=map.get(key);
    if (contained == null) {
      contained=Long.valueOf(numBuildValues);
    }
 else {
      contained=Long.valueOf(contained.longValue() + numBuildValues);
    }
    map.put(key,contained);
  }
  join.close();
  Assert.assertEquals("Wrong number of keys",NUM_KEYS,map.size());
  for (  Map.Entry<Integer,Long> entry : map.entrySet()) {
    long val=entry.getValue();
    int key=entry.getKey();
    Assert.assertEquals("Wrong number of values in per-key cross product for key " + key,(key == REPEATED_VALUE_1 || key == REPEATED_VALUE_2) ? (PROBE_VALS_PER_KEY + REPEATED_VALUE_COUNT_PROBE) * (BUILD_VALS_PER_KEY + REPEATED_VALUE_COUNT_BUILD) : PROBE_VALS_PER_KEY * BUILD_VALS_PER_KEY,val);
  }
  this.memManager.release(join.getFreedMemory());
}
