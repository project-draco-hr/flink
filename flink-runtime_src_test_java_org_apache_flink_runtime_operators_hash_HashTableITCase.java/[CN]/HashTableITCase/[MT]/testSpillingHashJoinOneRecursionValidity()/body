{
  final int NUM_KEYS=1000000;
  final int BUILD_VALS_PER_KEY=3;
  final int PROBE_VALS_PER_KEY=10;
  MutableObjectIterator<Record> buildInput=new UniformRecordGenerator(NUM_KEYS,BUILD_VALS_PER_KEY,false);
  MutableObjectIterator<Record> probeInput=new UniformRecordGenerator(NUM_KEYS,PROBE_VALS_PER_KEY,true);
  List<MemorySegment> memSegments;
  try {
    memSegments=this.memManager.allocatePages(MEM_OWNER,896);
  }
 catch (  MemoryAllocationException maex) {
    fail("Memory for the Join could not be provided.");
    return;
  }
  HashMap<Integer,Long> map=new HashMap<Integer,Long>(NUM_KEYS);
  final MutableHashTable<Record,Record> join=new MutableHashTable<Record,Record>(this.recordBuildSideAccesssor,this.recordProbeSideAccesssor,this.recordBuildSideComparator,this.recordProbeSideComparator,this.pactRecordComparator,memSegments,ioManager);
  join.open(buildInput,probeInput);
  Record record;
  final Record recordReuse=new Record();
  while (join.nextRecord()) {
    int numBuildValues=0;
    int key=0;
    MutableObjectIterator<Record> buildSide=join.getBuildSideIterator();
    if ((record=buildSide.next(recordReuse)) != null) {
      numBuildValues=1;
      key=record.getField(0,IntValue.class).getValue();
    }
 else {
      fail("No build side values found for a probe key.");
    }
    while ((record=buildSide.next(recordReuse)) != null) {
      numBuildValues++;
    }
    if (numBuildValues != 3) {
      fail("Other than 3 build values!!!");
    }
    Record pr=join.getCurrentProbeRecord();
    Assert.assertEquals("Probe-side key was different than build-side key.",key,pr.getField(0,IntValue.class).getValue());
    Long contained=map.get(key);
    if (contained == null) {
      contained=Long.valueOf(numBuildValues);
    }
 else {
      contained=Long.valueOf(contained.longValue() + (numBuildValues));
    }
    map.put(key,contained);
  }
  join.close();
  Assert.assertEquals("Wrong number of keys",NUM_KEYS,map.size());
  for (  Map.Entry<Integer,Long> entry : map.entrySet()) {
    long val=entry.getValue();
    int key=entry.getKey();
    Assert.assertEquals("Wrong number of values in per-key cross product for key " + key,PROBE_VALS_PER_KEY * BUILD_VALS_PER_KEY,val);
  }
  this.memManager.release(join.getFreedMemory());
}
