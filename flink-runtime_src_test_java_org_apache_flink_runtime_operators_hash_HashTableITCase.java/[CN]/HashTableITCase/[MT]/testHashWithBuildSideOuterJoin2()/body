{
  final int NUM_KEYS=40000;
  final int BUILD_VALS_PER_KEY=2;
  final int PROBE_VALS_PER_KEY=1;
  MutableObjectIterator<IntPair> buildInput=new UniformIntPairGenerator(NUM_KEYS,BUILD_VALS_PER_KEY,false);
  MutableObjectIterator<IntPair> probeInput=new UniformIntPairGenerator(NUM_KEYS,PROBE_VALS_PER_KEY,true);
  List<MemorySegment> memSegments;
  try {
    memSegments=this.memManager.allocatePages(MEM_OWNER,33);
  }
 catch (  MemoryAllocationException maex) {
    fail("Memory for the Join could not be provided.");
    return;
  }
  final MutableHashTable<IntPair,IntPair> join=new MutableHashTable<IntPair,IntPair>(this.pairBuildSideAccesssor,this.pairProbeSideAccesssor,this.pairBuildSideComparator,this.pairProbeSideComparator,this.pairComparator,memSegments,ioManager);
  join.open(buildInput,probeInput,true);
  final IntPair recordReuse=new IntPair();
  int numRecordsInJoinResult=0;
  while (join.nextRecord()) {
    MutableObjectIterator<IntPair> buildSide=join.getBuildSideIterator();
    IntPair next=buildSide.next(recordReuse);
    if (next == null && join.getCurrentProbeRecord() == null) {
      fail("Should not return join result that both probe and build element are null.");
    }
    while (next != null) {
      numRecordsInJoinResult++;
      next=buildSide.next(recordReuse);
    }
  }
  Assert.assertEquals("Wrong number of records in join result.",NUM_KEYS * BUILD_VALS_PER_KEY * PROBE_VALS_PER_KEY,numRecordsInJoinResult);
  join.close();
  this.memManager.release(join.getFreedMemory());
}
