{
  final int NUM_KEYS=10000;
  final int BUILD_VALS_PER_KEY=3;
  final int PROBE_VALS_PER_KEY=10;
  MutableObjectIterator<IntPair> buildInput=new UniformIntPairGenerator(NUM_KEYS,BUILD_VALS_PER_KEY,false);
  MutableObjectIterator<IntPair> probeInput=new UniformIntPairGenerator(NUM_KEYS,PROBE_VALS_PER_KEY,true);
  List<MemorySegment> memSegments;
  try {
    memSegments=this.memManager.allocatePages(MEM_OWNER,33);
  }
 catch (  MemoryAllocationException maex) {
    fail("Memory for the Join could not be provided.");
    return;
  }
  for (  MemorySegment segment : memSegments) {
    int newBucketOffset=segment.size() - 128;
    segment.put(newBucketOffset + 0,(byte)0);
    segment.put(newBucketOffset + 1,(byte)0);
    segment.putShort(newBucketOffset + 2,(short)-1);
    segment.putLong(newBucketOffset + 4,~0x0L);
  }
  final MutableHashTable<IntPair,IntPair> join=new MutableHashTable<IntPair,IntPair>(this.pairBuildSideAccesssor,this.pairProbeSideAccesssor,this.pairBuildSideComparator,this.pairProbeSideComparator,this.pairComparator,memSegments,ioManager);
  join.open(buildInput,probeInput);
  final IntPair recordReuse=new IntPair();
  int numRecordsInJoinResult=0;
  while (join.nextRecord()) {
    MutableObjectIterator<IntPair> buildSide=join.getBuildSideIterator();
    while (buildSide.next(recordReuse) != null) {
      numRecordsInJoinResult++;
    }
  }
  Assert.assertEquals("Wrong number of records in join result.",NUM_KEYS * BUILD_VALS_PER_KEY * PROBE_VALS_PER_KEY,numRecordsInJoinResult);
  join.close();
  this.memManager.release(join.getFreedMemory());
}
