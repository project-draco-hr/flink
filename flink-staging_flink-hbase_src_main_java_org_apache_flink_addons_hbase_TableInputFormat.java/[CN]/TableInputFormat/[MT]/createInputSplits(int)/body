{
  final Pair<byte[][],byte[][]> keys=table.getStartEndKeys();
  if (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {
    throw new IOException("Expecting at least one region.");
  }
  final byte[] startRow=scan.getStartRow();
  final byte[] stopRow=scan.getStopRow();
  final boolean scanWithNoLowerBound=startRow.length == 0;
  final boolean scanWithNoUpperBound=stopRow.length == 0;
  final List<TableInputSplit> splits=new ArrayList<TableInputSplit>(minNumSplits);
  for (int i=0; i < keys.getFirst().length; i++) {
    final byte[] startKey=keys.getFirst()[i];
    final byte[] endKey=keys.getSecond()[i];
    final String regionLocation=table.getRegionLocation(startKey,false).getHostnamePort();
    if (!includeRegionInSplit(startKey,endKey)) {
      continue;
    }
    final String[] hosts=new String[]{regionLocation};
    boolean isLastRegion=endKey.length == 0;
    if ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow,endKey) < 0) && (scanWithNoUpperBound || Bytes.compareTo(stopRow,startKey) > 0)) {
      final byte[] splitStart=scanWithNoLowerBound || Bytes.compareTo(startKey,startRow) >= 0 ? startKey : startRow;
      final byte[] splitStop=(scanWithNoUpperBound || Bytes.compareTo(endKey,stopRow) <= 0) && !isLastRegion ? endKey : stopRow;
      int id=splits.size();
      final TableInputSplit split=new TableInputSplit(id,hosts,table.getTableName(),splitStart,splitStop);
      splits.add(split);
    }
  }
  LOG.info("Created " + splits.size() + " splits");
  for (  TableInputSplit split : splits) {
    logSplitInfo("created",split);
  }
  return splits.toArray(new TableInputSplit[0]);
}
