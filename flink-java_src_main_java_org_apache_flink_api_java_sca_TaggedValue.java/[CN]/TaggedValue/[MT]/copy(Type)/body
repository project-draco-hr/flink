{
  final TaggedValue newValue=new TaggedValue(type);
  newValue.tag=this.tag;
  if (isInput()) {
    newValue.input=this.input;
    newValue.flatFieldExpr=this.flatFieldExpr;
    newValue.grouped=this.grouped;
    newValue.callByValue=this.callByValue;
  }
 else   if (canContainFields()) {
    final HashMap<String,TaggedValue> containerMapping=new HashMap<String,TaggedValue>(this.containerMapping.size());
    final HashMap<String,ModifiedASMFrame> containerFrameMapping;
    if (this.containerFrameMapping != null) {
      containerFrameMapping=new HashMap<String,ModifiedASMFrame>(this.containerFrameMapping.size());
    }
 else {
      containerFrameMapping=null;
    }
    for (    Entry<String,TaggedValue> entry : this.containerMapping.entrySet()) {
      if (entry.getValue() != null) {
        containerMapping.put(entry.getKey(),entry.getValue().copy());
        if (containerFrameMapping != null) {
          containerFrameMapping.put(entry.getKey(),this.containerFrameMapping.get(entry.getKey()));
        }
      }
 else {
        containerMapping.put(entry.getKey(),null);
      }
    }
    newValue.containerMapping=containerMapping;
    newValue.containerFrameMapping=containerFrameMapping;
  }
 else   if (isIntConstant()) {
    newValue.intConstant=this.intConstant;
  }
  return newValue;
}
