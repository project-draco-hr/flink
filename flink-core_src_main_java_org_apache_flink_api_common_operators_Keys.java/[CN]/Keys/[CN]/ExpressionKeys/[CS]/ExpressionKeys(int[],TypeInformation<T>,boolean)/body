{
  if (!type.isTupleType() || !(type instanceof CompositeType)) {
    throw new InvalidProgramException("Specifying keys via field positions is only valid " + "for tuple data types. Type: " + type);
  }
  if (type.getArity() == 0) {
    throw new InvalidProgramException("Tuple size must be greater than 0. Size: " + type.getArity());
  }
  if (!allowEmpty && (keyPositions == null || keyPositions.length == 0)) {
    throw new IllegalArgumentException("The grouping fields must not be empty.");
  }
  this.keyFields=new ArrayList<>();
  if (keyPositions == null || keyPositions.length == 0) {
    keyPositions=createIncrIntArray(type.getArity());
  }
 else {
    rangeCheckFields(keyPositions,type.getArity() - 1);
  }
  checkArgument(keyPositions.length > 0,"Grouping fields can not be empty at this point");
  CompositeType<T> cType=(CompositeType<T>)type;
  this.keyFields=new ArrayList<>(type.getTotalFields());
  String[] fieldNames=cType.getFieldNames();
  this.originalKeyTypes=new TypeInformation<?>[keyPositions.length];
  ArrayList<FlatFieldDescriptor> tmpList=new ArrayList<>();
  for (int i=0; i < keyPositions.length; i++) {
    int keyPos=keyPositions[i];
    tmpList.clear();
    this.originalKeyTypes[i]=cType.getTypeAt(keyPos);
    cType.getFlatFields(fieldNames[keyPos],0,tmpList);
    for (    FlatFieldDescriptor ffd : tmpList) {
      if (!ffd.getType().isKeyType()) {
        throw new InvalidProgramException("This type (" + ffd.getType() + ") cannot be used as key.");
      }
    }
    this.keyFields.addAll(tmpList);
  }
}
