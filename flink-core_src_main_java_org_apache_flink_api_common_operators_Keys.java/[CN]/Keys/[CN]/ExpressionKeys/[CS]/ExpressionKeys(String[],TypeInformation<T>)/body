{
  checkNotNull(keyExpressions,"Field expression cannot be null.");
  this.keyFields=new ArrayList<>(keyExpressions.length);
  if (type instanceof CompositeType) {
    CompositeType<T> cType=(CompositeType<T>)type;
    this.originalKeyTypes=new TypeInformation<?>[keyExpressions.length];
    for (int i=0; i < keyExpressions.length; i++) {
      String keyExpr=keyExpressions[i];
      if (keyExpr == null) {
        throw new InvalidProgramException("Expression key may not be null.");
      }
      keyExpr=keyExpr.trim();
      List<FlatFieldDescriptor> flatFields=cType.getFlatFields(keyExpr);
      if (flatFields.size() == 0) {
        throw new InvalidProgramException("Unable to extract key from expression '" + keyExpr + "' on key "+ cType);
      }
      for (      FlatFieldDescriptor field : flatFields) {
        if (!field.getType().isKeyType()) {
          throw new InvalidProgramException("This type (" + field.getType() + ") cannot be used as key.");
        }
      }
      keyFields.addAll(flatFields);
      String strippedKeyExpr=WILD_CARD_REGEX.matcher(keyExpr).replaceAll("");
      if (strippedKeyExpr.isEmpty()) {
        this.originalKeyTypes[i]=type;
      }
 else {
        this.originalKeyTypes[i]=cType.getTypeAt(strippedKeyExpr);
      }
    }
  }
 else {
    if (!type.isKeyType()) {
      throw new InvalidProgramException("This type (" + type + ") cannot be used as key.");
    }
    for (    String keyExpr : keyExpressions) {
      if (keyExpr == null) {
        throw new InvalidProgramException("Expression key may not be null.");
      }
      keyExpr=keyExpr.trim();
      if (!(SELECT_ALL_CHAR.equals(keyExpr) || SELECT_ALL_CHAR_SCALA.equals(keyExpr))) {
        throw new InvalidProgramException("Field expression must be equal to '" + SELECT_ALL_CHAR + "' or '"+ SELECT_ALL_CHAR_SCALA+ "' for non-composite types.");
      }
      keyFields.add(new FlatFieldDescriptor(0,type));
    }
    this.originalKeyTypes=new TypeInformation[]{type};
  }
}
