{
  final String brokerKey=brokerKey();
  final int workerIndex=getEnvironment().getIndexInSubtaskGroup();
  final boolean objectSolutionSet=config.isSolutionSetUnmanaged();
  CompactingHashTable<X> solutionSet=null;
  JoinHashMap<X> solutionSetObjectMap=null;
  boolean waitForSolutionSetUpdate=config.getWaitForSolutionSetUpdate();
  boolean isWorksetIteration=config.getIsWorksetIteration();
  try {
    SuperstepKickoffLatch nextStepKickoff=new SuperstepKickoffLatch();
    SuperstepKickoffLatchBroker.instance().handIn(brokerKey,nextStepKickoff);
    BlockingBackChannel backChannel=initBackChannel();
    SuperstepBarrier barrier=initSuperstepBarrier();
    SolutionSetUpdateBarrier solutionSetUpdateBarrier=null;
    feedbackDataInput=config.getIterationHeadPartialSolutionOrWorksetInputIndex();
    feedbackTypeSerializer=this.<Y>getInputSerializer(feedbackDataInput);
    excludeFromReset(feedbackDataInput);
    if (isWorksetIteration) {
      initialSolutionSetInput=config.getIterationHeadSolutionSetInputIndex();
      TypeSerializerFactory<X> solutionTypeSerializerFactory=config.getSolutionSetSerializer(getUserCodeClassLoader());
      solutionTypeSerializer=solutionTypeSerializerFactory;
      @SuppressWarnings("unchecked") MutableObjectIterator<X> solutionSetInput=(MutableObjectIterator<X>)createInputIterator(inputReaders[initialSolutionSetInput],solutionTypeSerializer);
      if (objectSolutionSet) {
        solutionSetObjectMap=initJoinHashMap();
        readInitialSolutionSet(solutionSetObjectMap,solutionSetInput);
        SolutionSetBroker.instance().handIn(brokerKey,solutionSetObjectMap);
      }
 else {
        solutionSet=initCompactingHashTable();
        readInitialSolutionSet(solutionSet,solutionSetInput);
        SolutionSetBroker.instance().handIn(brokerKey,solutionSet);
      }
      if (waitForSolutionSetUpdate) {
        solutionSetUpdateBarrier=new SolutionSetUpdateBarrier();
        SolutionSetUpdateBarrierBroker.instance().handIn(brokerKey,solutionSetUpdateBarrier);
      }
    }
 else {
      initialSolutionSetInput=-1;
      @SuppressWarnings("unchecked") TypeSerializerFactory<X> solSer=(TypeSerializerFactory<X>)feedbackTypeSerializer;
      solutionTypeSerializer=solSer;
      if (waitForSolutionSetUpdate) {
        solutionSetUpdateBarrier=new SolutionSetUpdateBarrier();
        SolutionSetUpdateBarrierBroker.instance().handIn(brokerKey,solutionSetUpdateBarrier);
      }
    }
    aggregatorRegistry=new RuntimeAggregatorRegistry(config.getIterationAggregators(getUserCodeClassLoader()));
    IterationAggregatorBroker.instance().handIn(brokerKey,aggregatorRegistry);
    DataInputView superstepResult=null;
    while (this.running && !terminationRequested()) {
      if (log.isInfoEnabled()) {
        log.info(formatLogString("starting iteration [" + currentIteration() + "]"));
      }
      barrier.setup();
      if (waitForSolutionSetUpdate) {
        solutionSetUpdateBarrier.setup();
      }
      if (!inFirstIteration()) {
        feedBackSuperstepResult(superstepResult);
      }
      super.run();
      sendEndOfSuperstepToAllIterationOutputs();
      if (waitForSolutionSetUpdate) {
        solutionSetUpdateBarrier.waitForSolutionSetUpdate();
      }
      superstepResult=backChannel.getReadEndAfterSuperstepEnded();
      if (log.isInfoEnabled()) {
        log.info(formatLogString("finishing iteration [" + currentIteration() + "]"));
      }
      sendEventToSync(new WorkerDoneEvent(workerIndex,aggregatorRegistry.getAllAggregators()));
      if (log.isInfoEnabled()) {
        log.info(formatLogString("waiting for other workers in iteration [" + currentIteration() + "]"));
      }
      barrier.waitForOtherWorkers();
      if (barrier.terminationSignaled()) {
        if (log.isInfoEnabled()) {
          log.info(formatLogString("head received termination request in iteration [" + currentIteration() + "]"));
        }
        requestTermination();
        nextStepKickoff.signalTermination();
      }
 else {
        incrementIterationCounter();
        String[] globalAggregateNames=barrier.getAggregatorNames();
        Value[] globalAggregates=barrier.getAggregates();
        aggregatorRegistry.updateGlobalAggregatesAndReset(globalAggregateNames,globalAggregates);
        nextStepKickoff.triggerNextSuperstep();
      }
    }
    if (log.isInfoEnabled()) {
      log.info(formatLogString("streaming out final result after [" + currentIteration() + "] iterations"));
    }
    if (isWorksetIteration) {
      if (objectSolutionSet) {
        streamSolutionSetToFinalOutput(solutionSetObjectMap);
      }
 else {
        streamSolutionSetToFinalOutput(solutionSet);
      }
    }
 else {
      streamOutFinalOutputBulk(new InputViewIterator<X>(superstepResult,this.solutionTypeSerializer.getSerializer()));
    }
    this.finalOutputCollector.close();
  }
  finally {
    IterationAggregatorBroker.instance().remove(brokerKey);
    BlockingBackChannelBroker.instance().remove(brokerKey);
    SuperstepKickoffLatchBroker.instance().remove(brokerKey);
    SolutionSetBroker.instance().remove(brokerKey);
    SolutionSetUpdateBarrierBroker.instance().remove(brokerKey);
    if (solutionSet != null) {
      solutionSet.close();
      solutionSet=null;
    }
  }
}
