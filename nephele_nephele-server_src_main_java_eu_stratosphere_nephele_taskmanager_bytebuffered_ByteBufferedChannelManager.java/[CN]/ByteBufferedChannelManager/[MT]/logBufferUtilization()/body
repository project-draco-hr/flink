{
  System.out.println("Buffer utilization for at " + System.currentTimeMillis());
synchronized (this.emptyWriteBuffers) {
    System.out.println("\tEmpty write buffers: " + this.emptyWriteBuffers.size());
  }
synchronized (this.emptyReadBuffers) {
    System.out.println("\tEmpty read buffers: " + this.emptyReadBuffers.size());
  }
synchronized (this.outgoingConnections) {
    System.out.println("\tOutgoing connections:");
    final Iterator<Map.Entry<InetSocketAddress,OutgoingConnection>> it=this.outgoingConnections.entrySet().iterator();
    while (it.hasNext()) {
      final Map.Entry<InetSocketAddress,OutgoingConnection> entry=it.next();
      System.out.println("\t\tOC " + entry.getKey() + ": "+ entry.getValue().getNumberOfQueuedWriteBuffers());
    }
  }
synchronized (this.registeredChannels) {
    System.out.println("\tIncoming connections:");
    final Iterator<Map.Entry<ChannelID,ByteBufferedChannelWrapper>> it=this.registeredChannels.entrySet().iterator();
    while (it.hasNext()) {
      final Map.Entry<ChannelID,ByteBufferedChannelWrapper> entry=it.next();
      final ByteBufferedChannelWrapper wrapper=entry.getValue();
      if (wrapper.isInputChannel()) {
        final ByteBufferedInputChannelWrapper inputChannelWrapper=(ByteBufferedInputChannelWrapper)wrapper;
        final int numberOfQueuedEnvelopes=inputChannelWrapper.getNumberOfQueuedEnvelopes();
        final int numberOfQueuedMemoryBuffers=inputChannelWrapper.getNumberOfQueuedMemoryBuffers();
        System.out.println("\t\t" + entry.getKey() + ": "+ numberOfQueuedMemoryBuffers+ " ("+ numberOfQueuedEnvelopes+ ")");
      }
    }
  }
}
