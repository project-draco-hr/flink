{
  final Configuration configuration=GlobalConfiguration.getConfiguration();
  this.numberOfReadBuffers=configuration.getInteger("channel.network.numberOfReadBuffers",DEFAULT_NUMBER_OF_READ_BUFFERS);
  this.numberOfWriteBuffers=configuration.getInteger("channel.network.numberOfWriteBuffers",DEFAULT_NUMBER_OF_WRITE_BUFFERS);
  this.bufferSizeInBytes=configuration.getInteger("channel.network.bufferSizeInBytes",DEFAULT_BUFFER_SIZE_IN_BYTES);
  this.channelLookupService=channelLookupService;
  this.fileBufferManager=FileBufferManager.getInstance();
  this.outgoingConnectionThread=new OutgoingConnectionThread();
  this.outgoingConnectionThread.start();
  this.incomingConnectionThread=new IncomingConnectionThread(this,true,new InetSocketAddress(incomingDataAddress,incomingDataPort));
  this.incomingConnectionThread.start();
  this.numberOfConnectionRetries=configuration.getInteger("channel.network.numberOfConnectionRetries",DEFAULT_NUMBER_OF_CONNECTION_RETRIES);
  this.isSpillingAllowed=configuration.getBoolean("channel.network.allowSpilling",DEFAULT_ALLOW_SPILLING);
  LOG.info("Starting NetworkChannelManager with Spilling " + (this.isSpillingAllowed ? "activated" : "deactivated"));
  for (int i=0; i < numberOfReadBuffers; i++) {
    final ByteBuffer readBuffer=ByteBuffer.allocateDirect(bufferSizeInBytes);
    this.emptyReadBuffers.add(readBuffer);
  }
  for (int i=0; i < numberOfWriteBuffers; i++) {
    final ByteBuffer writeBuffer=ByteBuffer.allocateDirect(bufferSizeInBytes);
    this.emptyWriteBuffers.add(writeBuffer);
  }
}
