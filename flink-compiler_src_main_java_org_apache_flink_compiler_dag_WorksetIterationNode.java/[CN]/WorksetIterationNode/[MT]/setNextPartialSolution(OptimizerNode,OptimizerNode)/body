{
  if (solutionSetDelta instanceof TwoInputNode) {
    TwoInputNode solutionDeltaTwoInput=(TwoInputNode)solutionSetDelta;
    if (solutionDeltaTwoInput.getFirstPredecessorNode() == this.solutionSetNode || solutionDeltaTwoInput.getSecondPredecessorNode() == this.solutionSetNode) {
      this.solutionDeltaImmediatelyAfterSolutionJoin=true;
    }
  }
  if (nextWorkset == worksetNode || nextWorkset instanceof BinaryUnionNode) {
    NoOpNode noop=new NoOpNode();
    noop.setDegreeOfParallelism(getDegreeOfParallelism());
    PactConnection noOpConn=new PactConnection(nextWorkset,noop);
    noop.setIncomingConnection(noOpConn);
    nextWorkset.addOutgoingConnection(noOpConn);
    nextWorkset=noop;
  }
  UnaryOperatorNode solutionSetDeltaUpdateAux=new UnaryOperatorNode("Solution-Set Delta",getSolutionSetKeyFields(),new SolutionSetDeltaOperator(getSolutionSetKeyFields()));
  solutionSetDeltaUpdateAux.setDegreeOfParallelism(getDegreeOfParallelism());
  PactConnection conn=new PactConnection(solutionSetDelta,solutionSetDeltaUpdateAux);
  solutionSetDeltaUpdateAux.setIncomingConnection(conn);
  solutionSetDelta.addOutgoingConnection(conn);
  this.solutionSetDelta=solutionSetDeltaUpdateAux;
  this.nextWorkset=nextWorkset;
  this.singleRoot=new SingleRootJoiner();
  this.solutionSetDeltaRootConnection=new PactConnection(solutionSetDeltaUpdateAux,this.singleRoot);
  this.nextWorksetRootConnection=new PactConnection(nextWorkset,this.singleRoot);
  this.singleRoot.setInputs(this.solutionSetDeltaRootConnection,this.nextWorksetRootConnection);
  solutionSetDeltaUpdateAux.addOutgoingConnection(this.solutionSetDeltaRootConnection);
  nextWorkset.addOutgoingConnection(this.nextWorksetRootConnection);
}
