{
  try {
    format.configure(parameters);
    FileInputSplit[] splits=format.createInputSplits(1);
    assertEquals(splits.length,1);
    format.open(splits[0]);
    GenericRecord u=format.nextRecord(null);
    assertNotNull(u);
    assertEquals("The schemas should be equal",userSchema,u.getSchema());
    String name=u.get("name").toString();
    assertNotNull("empty record",name);
    assertEquals("name not equal",TEST_NAME,name);
    List<CharSequence> sl=(List<CharSequence>)u.get("type_array_string");
    assertEquals("element 0 not equal",TEST_ARRAY_STRING_1,sl.get(0).toString());
    assertEquals("element 1 not equal",TEST_ARRAY_STRING_2,sl.get(1).toString());
    List<Boolean> bl=(List<Boolean>)u.get("type_array_boolean");
    assertEquals("element 0 not equal",TEST_ARRAY_BOOLEAN_1,bl.get(0));
    assertEquals("element 1 not equal",TEST_ARRAY_BOOLEAN_2,bl.get(1));
    GenericData.EnumSymbol enumValue=(GenericData.EnumSymbol)u.get("type_enum");
    assertEquals("enum not equal",TEST_ENUM_COLOR.toString(),enumValue.toString());
    Map<CharSequence,Long> lm=(Map<CharSequence,Long>)u.get("type_map");
    assertEquals("map value of key 1 not equal",TEST_MAP_VALUE1,lm.get(new Utf8(TEST_MAP_KEY1)).longValue());
    assertEquals("map value of key 2 not equal",TEST_MAP_VALUE2,lm.get(new Utf8(TEST_MAP_KEY2)).longValue());
    assertFalse("expecting second element",format.reachedEnd());
    assertNotNull("expecting second element",format.nextRecord(u));
    assertNull(format.nextRecord(u));
    assertTrue(format.reachedEnd());
  }
  finally {
    format.close();
  }
}
