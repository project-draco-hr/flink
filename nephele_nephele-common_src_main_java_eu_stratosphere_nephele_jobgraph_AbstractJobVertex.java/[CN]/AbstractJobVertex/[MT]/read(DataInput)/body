{
  if (jobGraph == null) {
    throw new IOException("jobGraph is null, cannot deserialize");
  }
  this.instanceType=StringRecord.readString(in);
  this.numberOfSubtasks=in.readInt();
  this.numberOfSubtasksPerInstance=in.readInt();
  if (in.readBoolean()) {
    final JobVertexID id=new JobVertexID();
    id.read(in);
    final AbstractJobVertex vertexToShareInstancesWith=this.jobGraph.findVertexByID(id);
    if (vertexToShareInstancesWith == null) {
      throw new IOException("Cannot find vertex with id " + id + " share instances with");
    }
    this.vertexToShareInstancesWith=vertexToShareInstancesWith;
  }
  this.configuration.read(in);
  final int numForwardEdges=in.readInt();
  final JobVertexID tmpID=new JobVertexID();
  for (int i=0; i < numForwardEdges; i++) {
    if (in.readBoolean()) {
      tmpID.read(in);
      final AbstractJobVertex jv=jobGraph.findVertexByID(tmpID);
      if (jv == null) {
        throw new IOException("Cannot find vertex with id " + tmpID);
      }
      final ChannelType channelType=EnumUtils.readEnum(in,ChannelType.class);
      final CompressionLevel compressionLevel=EnumUtils.readEnum(in,CompressionLevel.class);
      final int indexOfInputGate=in.readInt();
      try {
        this.connectTo(jv,channelType,compressionLevel,i,indexOfInputGate);
      }
 catch (      JobGraphDefinitionException e) {
        throw new IOException(StringUtils.stringifyException(e));
      }
    }
 else {
      this.forwardEdges.add(null);
    }
  }
  final boolean isNotNull=in.readBoolean();
  if (!isNotNull) {
    return;
  }
  final ClassLoader cl=LibraryCacheManager.getClassLoader(this.getJobGraph().getJobID());
  if (cl == null) {
    throw new IOException("Cannot find class loader for vertex " + getID());
  }
  final String className=StringRecord.readString(in);
  try {
    this.invokableClass=(Class<? extends AbstractInvokable>)Class.forName(className,true,cl);
  }
 catch (  ClassNotFoundException cnfe) {
    throw new IOException("Class " + className + " not found in one of the supplied jar files: "+ StringUtils.stringifyException(cnfe));
  }
}
