{
  if (vertex == null) {
    throw new JobGraphDefinitionException("Target vertex is null!");
  }
  if (indexOfOutputGate == -1) {
    indexOfOutputGate=getFirstFreeOutputGateIndex();
  }
  for (int i=this.forwardEdges.size(); i <= indexOfOutputGate; i++) {
    this.forwardEdges.add(null);
  }
  if (this.forwardEdges.get(indexOfOutputGate) != null) {
    throw new JobGraphDefinitionException("Source vertex " + this.name + " already has an edge at index "+ indexOfOutputGate);
  }
  if (indexOfInputGate == -1) {
    indexOfInputGate=vertex.getFirstFreeInputGateIndex();
  }
 else {
    if (vertex.getBackwardConnection(indexOfInputGate) != null) {
      throw new JobGraphDefinitionException("Target vertex " + vertex.getName() + " already has an edge at index "+ indexOfInputGate);
    }
  }
  this.forwardEdges.set(indexOfOutputGate,new JobEdge(vertex,channelType,compressionLevel,indexOfInputGate,distributionPattern,allowSpanningRecords));
  vertex.connectBacklink(this,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,allowSpanningRecords);
}
