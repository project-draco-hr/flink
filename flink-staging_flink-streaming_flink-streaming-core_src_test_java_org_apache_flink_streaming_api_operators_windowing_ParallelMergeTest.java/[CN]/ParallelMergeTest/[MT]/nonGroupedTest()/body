{
  ReduceFunction<Integer> reducer=new ReduceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer reduce(    Integer a,    Integer b) throws Exception {
      return a + b;
    }
  }
;
  TestOutput<StreamWindow<Integer>> output=new TestOutput<StreamWindow<Integer>>();
  TimestampedCollector<StreamWindow<Integer>> collector=new TimestampedCollector<StreamWindow<Integer>>(output);
  List<StreamWindow<Integer>> result=output.getCollected();
  ParallelMerge<Integer> merger=new ParallelMerge<Integer>(reducer);
  merger.numberOfDiscretizers=2;
  merger.flatMap1(createTestWindow(1),collector);
  merger.flatMap1(createTestWindow(1),collector);
  merger.flatMap2(new Tuple2<Integer,Integer>(1,1),collector);
  assertTrue(result.isEmpty());
  merger.flatMap2(new Tuple2<Integer,Integer>(1,1),collector);
  assertEquals(StreamWindow.fromElements(2),result.get(0));
  merger.flatMap2(new Tuple2<Integer,Integer>(2,2),collector);
  merger.flatMap1(createTestWindow(2),collector);
  merger.flatMap1(createTestWindow(2),collector);
  merger.flatMap2(new Tuple2<Integer,Integer>(2,1),collector);
  assertEquals(1,result.size());
  merger.flatMap1(createTestWindow(2),collector);
  assertEquals(StreamWindow.fromElements(3),result.get(1));
  merger.flatMap1(createTestWindow(3),collector);
  merger.flatMap2(new Tuple2<Integer,Integer>(3,1),collector);
  merger.flatMap2(new Tuple2<Integer,Integer>(3,1),collector);
  merger.flatMap2(new Tuple2<Integer,Integer>(4,1),collector);
  merger.flatMap2(new Tuple2<Integer,Integer>(4,1),collector);
  merger.flatMap1(createTestWindow(4),collector);
  try {
    merger.flatMap1(createTestWindow(4),collector);
    fail();
  }
 catch (  RuntimeException e) {
  }
  ParallelMerge<Integer> merger2=new ParallelMerge<Integer>(reducer);
  merger2.numberOfDiscretizers=2;
  merger2.flatMap1(createTestWindow(0),collector);
  merger2.flatMap1(createTestWindow(1),collector);
  merger2.flatMap1(createTestWindow(1),collector);
  merger2.flatMap2(new Tuple2<Integer,Integer>(1,1),collector);
  try {
    merger2.flatMap2(new Tuple2<Integer,Integer>(1,1),collector);
    fail();
  }
 catch (  RuntimeException e) {
  }
}
