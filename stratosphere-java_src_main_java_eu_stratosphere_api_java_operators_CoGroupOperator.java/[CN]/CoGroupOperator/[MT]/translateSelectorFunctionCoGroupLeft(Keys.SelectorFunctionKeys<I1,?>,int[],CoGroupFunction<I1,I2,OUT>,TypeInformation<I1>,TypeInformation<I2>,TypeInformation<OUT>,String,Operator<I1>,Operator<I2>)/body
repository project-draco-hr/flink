{
  if (!inputType2.isTupleType()) {
    throw new InvalidParameterException("Should not happen.");
  }
  @SuppressWarnings("unchecked") final Keys.SelectorFunctionKeys<I1,K> keys1=(Keys.SelectorFunctionKeys<I1,K>)rawKeys1;
  final TypeInformation<Tuple2<K,I1>> typeInfoWithKey1=new TupleTypeInfo<Tuple2<K,I1>>(keys1.getKeyType(),inputType1);
  final TypeInformation<Tuple2<K,I2>> typeInfoWithKey2=new TupleTypeInfo<Tuple2<K,I2>>(keys1.getKeyType(),inputType2);
  final KeyExtractingMapper<I1,K> extractor1=new KeyExtractingMapper<I1,K>(keys1.getKeyExtractor());
  final TupleKeyExtractingMapper<I2,K> extractor2=new TupleKeyExtractingMapper<I2,K>(logicalKeyPositions2[0]);
  final MapOperatorBase<I1,Tuple2<K,I1>,GenericMap<I1,Tuple2<K,I1>>> keyMapper1=new MapOperatorBase<I1,Tuple2<K,I1>,GenericMap<I1,Tuple2<K,I1>>>(extractor1,new UnaryOperatorInformation<I1,Tuple2<K,I1>>(inputType1,typeInfoWithKey1),"Key Extractor 1");
  final MapOperatorBase<I2,Tuple2<K,I2>,GenericMap<I2,Tuple2<K,I2>>> keyMapper2=new MapOperatorBase<I2,Tuple2<K,I2>,GenericMap<I2,Tuple2<K,I2>>>(extractor2,new UnaryOperatorInformation<I2,Tuple2<K,I2>>(inputType2,typeInfoWithKey2),"Key Extractor 2");
  final PlanUnwrappingCoGroupOperator<I1,I2,OUT,K> cogroup=new PlanUnwrappingCoGroupOperator<I1,I2,OUT,K>(function,keys1,logicalKeyPositions2,name,outputType,typeInfoWithKey1,typeInfoWithKey2);
  cogroup.setFirstInput(keyMapper1);
  cogroup.setSecondInput(keyMapper2);
  keyMapper1.setInput(input1);
  keyMapper2.setInput(input2);
  keyMapper1.setDegreeOfParallelism(input1.getDegreeOfParallelism());
  keyMapper2.setDegreeOfParallelism(input2.getDegreeOfParallelism());
  return cogroup;
}
