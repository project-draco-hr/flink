{
  @SuppressWarnings("unchecked") final Keys.SelectorFunctionKeys<I1,K> keys1=(Keys.SelectorFunctionKeys<I1,K>)rawKeys1;
  @SuppressWarnings("unchecked") final Keys.SelectorFunctionKeys<I2,K> keys2=(Keys.SelectorFunctionKeys<I2,K>)rawKeys2;
  final TypeInformation<Tuple2<K,I1>> typeInfoWithKey1=new TupleTypeInfo<Tuple2<K,I1>>(keys1.getKeyType(),inputType1);
  final TypeInformation<Tuple2<K,I2>> typeInfoWithKey2=new TupleTypeInfo<Tuple2<K,I2>>(keys2.getKeyType(),inputType2);
  final KeyExtractingMapper<I1,K> extractor1=new KeyExtractingMapper<I1,K>(keys1.getKeyExtractor());
  final KeyExtractingMapper<I2,K> extractor2=new KeyExtractingMapper<I2,K>(keys2.getKeyExtractor());
  final PlanMapOperator<I1,Tuple2<K,I1>> keyMapper1=new PlanMapOperator<I1,Tuple2<K,I1>>(extractor1,"Key Extractor 1",inputType1,typeInfoWithKey1);
  final PlanMapOperator<I2,Tuple2<K,I2>> keyMapper2=new PlanMapOperator<I2,Tuple2<K,I2>>(extractor2,"Key Extractor 2",inputType2,typeInfoWithKey2);
  final PlanUnwrappingCoGroupOperator<I1,I2,OUT,K> cogroup=new PlanUnwrappingCoGroupOperator<I1,I2,OUT,K>(function,keys1,keys2,name,outputType,typeInfoWithKey1,typeInfoWithKey2);
  cogroup.addFirstInput(keyMapper1);
  cogroup.addSecondInput(keyMapper2);
  keyMapper1.setInput(input1);
  keyMapper2.setInput(input2);
  keyMapper1.setDegreeOfParallelism(input1.getDegreeOfParallelism());
  keyMapper2.setDegreeOfParallelism(input2.getDegreeOfParallelism());
  return cogroup;
}
