{
  if (!parseParameters(args)) {
    return;
  }
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Edge<Long,Double> edgeToBeRemoved=getEdgeToBeRemoved();
  Graph<Long,Double,Double> graph=IncrementalSSSP.getGraph(env);
  Graph<Long,Double,Double> ssspGraph=IncrementalSSSP.getSSSPGraph(env);
  graph.removeEdge(edgeToBeRemoved);
  ScatterGatherConfiguration parameters=new ScatterGatherConfiguration();
  if (isInSSSP(edgeToBeRemoved,ssspGraph.getEdges())) {
    parameters.setDirection(EdgeDirection.IN);
    parameters.setOptDegrees(true);
    Graph<Long,Double,Double> result=ssspGraph.runScatterGatherIteration(new VertexDistanceUpdater(),new InvalidateMessenger(edgeToBeRemoved),maxIterations,parameters);
    DataSet<Vertex<Long,Double>> resultedVertices=result.getVertices();
    if (fileOutput) {
      resultedVertices.writeAsCsv(outputPath,"\n",",");
      env.execute("Incremental SSSP Example");
    }
 else {
      resultedVertices.print();
    }
  }
 else {
    if (fileOutput) {
      graph.getVertices().writeAsCsv(outputPath,"\n",",");
      env.execute("Incremental SSSP Example");
    }
 else {
      graph.getVertices().print();
    }
  }
}
