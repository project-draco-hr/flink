{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple1<Integer>> raw=env.readCsvFile(IN_FILE).types(Integer.class);
  DeltaIteration<Tuple1<Integer>,Tuple1<Integer>> iteration=raw.iterateDelta(raw,1000,0);
  DataSet<Tuple1<Integer>> test=iteration.getWorkset().map(new SimpleMap());
  DataSet<Tuple1<Integer>> delta=iteration.getSolutionSet().coGroup(test).where(0).equalTo(0).with(new SimpleCGroup());
  DataSet<Tuple1<Integer>> feedback=iteration.getWorkset().map(new SimpleMap());
  DataSet<Tuple1<Integer>> result=iteration.closeWith(delta,feedback);
  result.print();
  Plan plan=env.createProgramPlan();
  OptimizedPlan oPlan=null;
  try {
    oPlan=compileNoStats(plan);
  }
 catch (  CompilerException e) {
    Assert.fail(e.getMessage());
  }
  oPlan.accept(new Visitor<PlanNode>(){
    @Override public boolean preVisit(    PlanNode visitable){
      if (visitable instanceof WorksetIterationPlanNode) {
        PlanNode deltaNode=((WorksetIterationPlanNode)visitable).getSolutionSetDeltaPlanNode();
        DualInputPlanNode dpn=(DualInputPlanNode)deltaNode.getInputs().iterator().next().getSource();
        Channel in1=dpn.getInput1();
        Channel in2=dpn.getInput2();
        Assert.assertTrue(in1.getLocalProperties().getOrdering() == null);
        Assert.assertTrue(in2.getLocalProperties().getOrdering() != null);
        Assert.assertTrue(in2.getLocalProperties().getOrdering().getInvolvedIndexes().contains(0));
        Assert.assertTrue(in1.getShipStrategy() == ShipStrategyType.FORWARD);
        Assert.assertTrue(in2.getShipStrategy() == ShipStrategyType.PARTITION_HASH);
        return false;
      }
      return true;
    }
    @Override public void postVisit(    PlanNode visitable){
    }
  }
);
}
