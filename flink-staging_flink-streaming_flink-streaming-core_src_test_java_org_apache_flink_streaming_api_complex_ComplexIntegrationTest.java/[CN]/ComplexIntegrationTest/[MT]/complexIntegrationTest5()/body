{
  expected1="1\n" + "2\n" + "2\n"+ "3\n"+ "3\n"+ "3\n"+ "4\n"+ "4\n"+ "4\n"+ "4\n"+ "5\n"+ "5\n"+ "5\n"+ "5\n"+ "5\n"+ "1\n"+ "3\n"+ "5\n"+ "8\n"+ "11\n"+ "14\n"+ "18\n"+ "22\n"+ "26\n"+ "30\n"+ "35\n"+ "40\n"+ "45\n"+ "50\n"+ "55\n";
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  env.setBufferTimeout(0);
  DataStream<Long> dataStream51=env.generateSequence(1,5).map(new MapFunction<Long,Long>(){
    @Override public Long map(    Long value) throws Exception {
      return value;
    }
  }
).startNewChain().filter(new FilterFunction<Long>(){
    @Override public boolean filter(    Long value) throws Exception {
      return true;
    }
  }
).disableChaining().flatMap(new SquareFlatMapFunction());
  DataStream<Long> dataStream52=dataStream51.fold(0L,new FoldFunction<Long,Long>(){
    @Override public Long fold(    Long accumulator,    Long value) throws Exception {
      return accumulator + value;
    }
  }
).map(new MapFunction<Long,Long>(){
    @Override public Long map(    Long value) throws Exception {
      return value;
    }
  }
).disableChaining();
  DataStream<Long> dataStream53=dataStream51.map(new MapFunction<Long,Long>(){
    @Override public Long map(    Long value) throws Exception {
      return value;
    }
  }
);
  dataStream53.union(dataStream52).print();
  dataStream53.union(dataStream52).writeAsText(resultPath1,FileSystem.WriteMode.OVERWRITE);
  env.execute();
}
