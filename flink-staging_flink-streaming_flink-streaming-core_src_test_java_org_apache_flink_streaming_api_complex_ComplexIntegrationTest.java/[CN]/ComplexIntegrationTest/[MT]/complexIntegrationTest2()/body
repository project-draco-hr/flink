{
  expected1="water_melon-b\n" + "water_melon-b\n" + "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-c\n"+ "orange-c\n"+ "orange-c\n"+ "orange-c\n"+ "orange-d\n"+ "orange-d\n"+ "peach-d\n"+ "peach-d\n";
  List<Tuple5<Integer,String,Character,Double,Boolean>> input=Arrays.asList(new Tuple5<Integer,String,Character,Double,Boolean>(1,"apple",'j',0.1,false),new Tuple5<Integer,String,Character,Double,Boolean>(1,"peach",'b',0.8,false),new Tuple5<Integer,String,Character,Double,Boolean>(1,"orange",'c',0.7,true),new Tuple5<Integer,String,Character,Double,Boolean>(2,"apple",'d',0.5,false),new Tuple5<Integer,String,Character,Double,Boolean>(2,"peach",'j',0.6,false),new Tuple5<Integer,String,Character,Double,Boolean>(3,"orange",'b',0.2,true),new Tuple5<Integer,String,Character,Double,Boolean>(6,"apple",'c',0.1,false),new Tuple5<Integer,String,Character,Double,Boolean>(7,"peach",'d',0.4,false),new Tuple5<Integer,String,Character,Double,Boolean>(8,"orange",'j',0.2,true),new Tuple5<Integer,String,Character,Double,Boolean>(10,"apple",'b',0.1,false),new Tuple5<Integer,String,Character,Double,Boolean>(10,"peach",'c',0.5,false),new Tuple5<Integer,String,Character,Double,Boolean>(11,"orange",'d',0.3,true),new Tuple5<Integer,String,Character,Double,Boolean>(11,"apple",'j',0.3,false),new Tuple5<Integer,String,Character,Double,Boolean>(12,"peach",'b',0.9,false),new Tuple5<Integer,String,Character,Double,Boolean>(13,"orange",'c',0.7,true),new Tuple5<Integer,String,Character,Double,Boolean>(15,"apple",'d',0.2,false),new Tuple5<Integer,String,Character,Double,Boolean>(16,"peach",'j',0.8,false),new Tuple5<Integer,String,Character,Double,Boolean>(16,"orange",'b',0.8,true),new Tuple5<Integer,String,Character,Double,Boolean>(16,"apple",'c',0.1,false),new Tuple5<Integer,String,Character,Double,Boolean>(17,"peach",'d',1.0,true));
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  SingleOutputStreamOperator<Tuple5<Integer,String,Character,Double,Boolean>,DataStreamSource<Tuple5<Integer,String,Character,Double,Boolean>>> sourceStream21=env.fromCollection(input);
  DataStream<OuterPojo> sourceStream22=env.addSource(new PojoSource());
  sourceStream21.sum(3).groupBy(2,2).window(Time.of(10,new MyTimestamp(),0)).every(Time.of(4,new MyTimestamp(),0)).maxBy(3).flatten().map(new MyMapFunction2()).flatMap(new MyFlatMapFunction()).connect(sourceStream22).map(new MyCoMapFunction()).writeAsText(resultPath1,FileSystem.WriteMode.OVERWRITE);
  env.execute();
}
