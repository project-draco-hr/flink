{
  expected1="water_melon-b\n" + "water_melon-b\n" + "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "water_melon-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-b\n"+ "orange-c\n"+ "orange-c\n"+ "orange-c\n"+ "orange-c\n"+ "orange-d\n"+ "orange-d\n"+ "peach-d\n"+ "peach-d\n";
  List<Tuple5<Integer,String,Character,Double,Boolean>> input=Arrays.asList(new Tuple5<>(1,"apple",'j',0.1,false),new Tuple5<>(1,"peach",'b',0.8,false),new Tuple5<>(1,"orange",'c',0.7,true),new Tuple5<>(2,"apple",'d',0.5,false),new Tuple5<>(2,"peach",'j',0.6,false),new Tuple5<>(3,"orange",'b',0.2,true),new Tuple5<>(6,"apple",'c',0.1,false),new Tuple5<>(7,"peach",'d',0.4,false),new Tuple5<>(8,"orange",'j',0.2,true),new Tuple5<>(10,"apple",'b',0.1,false),new Tuple5<>(10,"peach",'c',0.5,false),new Tuple5<>(11,"orange",'d',0.3,true),new Tuple5<>(11,"apple",'j',0.3,false),new Tuple5<>(12,"peach",'b',0.9,false),new Tuple5<>(13,"orange",'c',0.7,true),new Tuple5<>(15,"apple",'d',0.2,false),new Tuple5<>(16,"peach",'j',0.8,false),new Tuple5<>(16,"orange",'b',0.8,true),new Tuple5<>(16,"apple",'c',0.1,false),new Tuple5<>(17,"peach",'d',1.0,true));
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().enableTimestamps();
  SingleOutputStreamOperator<Tuple5<Integer,String,Character,Double,Boolean>,DataStreamSource<Tuple5<Integer,String,Character,Double,Boolean>>> sourceStream21=env.fromCollection(input);
  DataStream<OuterPojo> sourceStream22=env.addSource(new PojoSource());
  sourceStream21.extractTimestamp(new MyTimestampExtractor()).keyBy(2,2).timeWindow(Time.of(10,TimeUnit.MILLISECONDS),Time.of(4,TimeUnit.MILLISECONDS)).maxBy(3).map(new MyMapFunction2()).flatMap(new MyFlatMapFunction()).connect(sourceStream22).map(new MyCoMapFunction()).writeAsText(resultPath1,FileSystem.WriteMode.OVERWRITE);
  env.execute();
}
