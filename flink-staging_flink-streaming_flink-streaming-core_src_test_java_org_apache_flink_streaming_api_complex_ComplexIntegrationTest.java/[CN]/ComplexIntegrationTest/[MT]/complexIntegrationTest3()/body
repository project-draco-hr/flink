{
  expected1="541\n" + "1223\n" + "3319\n"+ "5851\n"+ "1987\n"+ "8387\n"+ "15907\n"+ "10939\n"+ "4127\n"+ "2477\n"+ "6737\n"+ "13421\n"+ "4987\n"+ "4999\n"+ "18451\n"+ "9283\n"+ "7499\n"+ "16937\n"+ "11927\n"+ "9973\n"+ "14431\n"+ "19507\n"+ "12497\n"+ "17497\n"+ "14983\n"+ "19997\n";
  expected1="541\n" + "1223\n" + "1987\n"+ "2741\n"+ "3571\n"+ "10939\n"+ "4409\n"+ "5279\n"+ "11927\n"+ "6133\n"+ "6997\n"+ "12823\n"+ "7919\n"+ "8831\n"+ "13763\n"+ "9733\n"+ "9973\n"+ "14759\n"+ "15671\n"+ "16673\n"+ "17659\n"+ "18617\n"+ "19697\n"+ "19997\n";
  for (int i=2; i < 100; i++) {
    expected2+="(" + i + ","+ 20000 / i + ")\n";
  }
  for (int i=19901; i < 20000; i++) {
    expected2+="(" + i + ","+ 20000 / i + ")\n";
  }
  expected2+="(" + 20000 + ","+ 1+ ")";
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  env.setBufferTimeout(0);
  DataStream<Long> sourceStream31=env.generateSequence(1,10000);
  DataStream<Long> sourceStream32=env.generateSequence(10001,20000);
  sourceStream31.filter(new PrimeFilterFunction()).window(Count.of(100)).max(0).flatten().union(sourceStream32.filter(new PrimeFilterFunction()).window(Count.of(100)).max(0).flatten()).writeAsText(resultPath1,FileSystem.WriteMode.OVERWRITE);
  sourceStream31.flatMap(new DivisorsFlatMapFunction()).union(sourceStream32.flatMap(new DivisorsFlatMapFunction())).map(new MapFunction<Long,Tuple2<Long,Integer>>(){
    @Override public Tuple2<Long,Integer> map(    Long value) throws Exception {
      return new Tuple2<Long,Integer>(value,1);
    }
  }
).keyBy(0).window(Count.of(10000)).sum(1).flatten().filter(new FilterFunction<Tuple2<Long,Integer>>(){
    @Override public boolean filter(    Tuple2<Long,Integer> value) throws Exception {
      return value.f0 < 100 || value.f0 > 19900;
    }
  }
).writeAsText(resultPath2,FileSystem.WriteMode.OVERWRITE);
  env.execute();
}
