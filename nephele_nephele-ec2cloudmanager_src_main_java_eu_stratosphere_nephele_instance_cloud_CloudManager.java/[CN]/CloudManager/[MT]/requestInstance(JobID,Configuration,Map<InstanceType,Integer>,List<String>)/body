{
  if (conf == null) {
    throw new InstanceException("No job configuration provided, unable to acquire credentials");
  }
  final String owner=conf.getString("job.cloud.username",null);
  if (owner == null) {
    throw new InstanceException("Unable to allocate cloud instance: Cannot find username");
  }
  final String awsAccessId=conf.getString("job.cloud.awsaccessid",null);
  if (awsAccessId == null) {
    throw new InstanceException("Unable to allocate cloud instance: Cannot find AWS access ID");
  }
  final String awsSecretKey=conf.getString("job.cloud.awssecretkey",null);
  if (awsSecretKey == null) {
    throw new InstanceException("Unable to allocate cloud instance: Cannot find AWS secret key");
  }
  final String sshKeyPair=conf.getString("job.cloud.sshkeypair",null);
  JobToInstancesMapping jobToInstanceMapping=null;
synchronized (this.jobToInstancesMap) {
    jobToInstanceMapping=this.jobToInstancesMap.get(jobID);
    if (jobToInstanceMapping == null) {
      LOG.debug("Creating new mapping for job " + jobID);
      jobToInstanceMapping=new JobToInstancesMapping(owner,awsAccessId,awsSecretKey);
      this.jobToInstancesMap.put(jobID,jobToInstanceMapping);
    }
  }
  Map<InstanceType,Integer> instancesToBeRequested=new HashMap<InstanceType,Integer>();
  final Iterator<Map.Entry<InstanceType,Integer>> it=instanceMap.entrySet().iterator();
  while (it.hasNext()) {
    final Map.Entry<InstanceType,Integer> entry=it.next();
    final InstanceType actualInstanceType=entry.getKey();
    final int neededinstancecount=entry.getValue();
    final LinkedList<CloudInstance> floatinginstances=anyFloatingInstanceAvailable(owner,awsAccessId,awsSecretKey,actualInstanceType,neededinstancecount);
    if (floatinginstances.size() >= neededinstancecount) {
      for (      CloudInstance ci : floatinginstances) {
        jobToInstanceMapping.assignInstanceToJob(ci);
        this.instanceListener.resourceAllocated(jobID,ci.asAllocatedResource());
      }
    }
 else {
      for (      CloudInstance ci : floatinginstances) {
        jobToInstanceMapping.assignInstanceToJob(ci);
        this.instanceListener.resourceAllocated(jobID,ci.asAllocatedResource());
      }
      final int instancerequestcount=neededinstancecount - floatinginstances.size();
      instancesToBeRequested.put(actualInstanceType,instancerequestcount);
    }
  }
  LinkedList<String> instanceIDs=allocateCloudInstance(awsAccessId,awsSecretKey,instancesToBeRequested,sshKeyPair);
  for (  String i : instanceIDs) {
    this.reservedInstances.put(i,jobID);
  }
}
