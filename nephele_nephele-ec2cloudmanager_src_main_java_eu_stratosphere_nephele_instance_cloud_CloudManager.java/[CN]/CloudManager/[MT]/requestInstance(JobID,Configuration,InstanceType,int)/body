{
  if (conf == null) {
    throw new InstanceException("No job configuration provided, unable to acquire credentials");
  }
  final String owner=conf.getString("job.cloud.username",null);
  if (owner == null) {
    throw new InstanceException("Unable to allocate cloud instance: Cannot find username");
  }
  final String awsAccessId=conf.getString("job.cloud.awsaccessid",null);
  if (awsAccessId == null) {
    throw new InstanceException("Unable to allocate cloud instance: Cannot find AWS access ID");
  }
  final String awsSecretKey=conf.getString("job.cloud.awssecretkey",null);
  if (awsSecretKey == null) {
    throw new InstanceException("Unable to allocate cloud instance: Cannot find AWS secret key");
  }
  JobToInstancesMapping jobToInstanceMapping=null;
synchronized (this.jobToInstancesMap) {
    jobToInstanceMapping=this.jobToInstancesMap.get(jobID);
    if (jobToInstanceMapping == null) {
      LOG.debug("Creating new mapping for job " + jobID);
      jobToInstanceMapping=new JobToInstancesMapping(owner,awsAccessId,awsSecretKey);
      this.jobToInstancesMap.put(jobID,jobToInstanceMapping);
    }
  }
  final LinkedList<CloudInstance> floatinginstances=anyFloatingInstanceAvailable(owner,awsAccessId,awsSecretKey,instanceType,count);
  if (floatinginstances.size() >= count) {
    for (    CloudInstance ci : floatinginstances) {
      jobToInstanceMapping.assignInstanceToJob(ci);
      this.instanceListener.resourceAllocated(jobID,ci.asAllocatedResource());
    }
  }
 else {
    for (    CloudInstance ci : floatinginstances) {
      jobToInstanceMapping.assignInstanceToJob(ci);
      this.instanceListener.resourceAllocated(jobID,ci.asAllocatedResource());
    }
    int neededInstances=count - floatinginstances.size();
    LinkedList<String> instanceIDs=allocateCloudInstance(awsAccessId,awsSecretKey,instanceType,neededInstances);
    for (    String i : instanceIDs) {
      this.reservedInstances.put(i,jobID);
    }
  }
}
