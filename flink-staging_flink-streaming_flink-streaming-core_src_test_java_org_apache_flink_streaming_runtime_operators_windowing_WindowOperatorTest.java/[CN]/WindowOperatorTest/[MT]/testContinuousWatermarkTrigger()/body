{
  closeCalled.set(0);
  final int WINDOW_SIZE=3;
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator=new WindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),windowBufferFactory,new ReduceWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>(new SumReducer()),ContinuousEventTimeTrigger.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)));
  operator.setInputType(TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, Integer>"),new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processWatermark(new Watermark(initialTime + 1000));
  expectedOutput.add(new Watermark(1000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 2000));
  expectedOutput.add(new Watermark(2000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 3000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",3),Long.MAX_VALUE));
  expectedOutput.add(new Watermark(3000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 4000));
  expectedOutput.add(new Watermark(4000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 5000));
  expectedOutput.add(new Watermark(5000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 6000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",3),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",5),Long.MAX_VALUE));
  expectedOutput.add(new Watermark(6000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 7000));
  testHarness.processWatermark(new Watermark(initialTime + 8000));
  expectedOutput.add(new Watermark(7000));
  expectedOutput.add(new Watermark(8000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.close();
  if (windowBufferFactory instanceof PreAggregatingHeapWindowBuffer.Factory) {
    Assert.assertEquals("Close was not called.",2,closeCalled.get());
  }
 else {
    Assert.assertEquals("Close was not called.",1,closeCalled.get());
  }
}
