{
  closeCalled.set(0);
  final int WINDOW_SIZE=3;
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),windowBufferFactory,new ReduceWindowFunction<String,TimeWindow,Tuple2<String,Integer>>(new SumReducer()),WatermarkTrigger.create());
  operator.setInputType(TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, Integer>"),new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processWatermark(new Watermark(initialTime + 999));
  expectedOutput.add(new Watermark(999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 1999));
  expectedOutput.add(new Watermark(1999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",3),initialTime + 2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",3),initialTime + 2999));
  expectedOutput.add(new Watermark(2999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 3999));
  expectedOutput.add(new Watermark(3999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 4999));
  expectedOutput.add(new Watermark(4999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 5999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",2),initialTime + 5999));
  expectedOutput.add(new Watermark(5999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processWatermark(new Watermark(initialTime + 6999));
  testHarness.processWatermark(new Watermark(initialTime + 7999));
  expectedOutput.add(new Watermark(6999));
  expectedOutput.add(new Watermark(7999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.close();
  if (windowBufferFactory instanceof PreAggregatingHeapWindowBuffer.Factory) {
    Assert.assertEquals("Close was not called.",2,closeCalled.get());
  }
 else {
    Assert.assertEquals("Close was not called.",1,closeCalled.get());
  }
}
