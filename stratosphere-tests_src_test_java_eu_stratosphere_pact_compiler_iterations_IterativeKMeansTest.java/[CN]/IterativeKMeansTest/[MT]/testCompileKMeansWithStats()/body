{
  KMeansIterative kmi=new KMeansIterative();
  Job p=kmi.createJob(String.valueOf(DEFAULT_PARALLELISM),IN_FILE,IN_FILE,OUT_FILE,String.valueOf(20));
  ContractResolver cr=getContractResolver(p);
  FileDataSource pointsSource=cr.getNode(DATAPOINTS);
  FileDataSource centersSource=cr.getNode(CENTERS);
  setSourceStatistics(pointsSource,100l * 1024 * 1024* 1024,32f);
  setSourceStatistics(centersSource,1024 * 1024,32f);
  OptimizedPlan plan=compileWithStats(p);
  OptimizerPlanNodeResolver or=getOptimizerPlanNodeResolver(plan);
  final SinkPlanNode sink=or.getNode(SINK);
  final BulkIterationPlanNode iter=or.getNode(ITERATION_NAME);
  final SingleInputPlanNode newCenterReducer=or.getNode(RECOMPUTE_CENTERS_REDUCER);
  final SingleInputPlanNode newCenterCombiner=(SingleInputPlanNode)newCenterReducer.getPredecessor();
  final SingleInputPlanNode nearestCenterReducer=or.getNode(NEAREST_CENTER_REDUCER);
  final SingleInputPlanNode nearestCenterCombiner=nearestCenterReducer.getPredecessor() instanceof SingleInputPlanNode ? (SingleInputPlanNode)nearestCenterReducer.getPredecessor() : null;
  final DualInputPlanNode cross=or.getNode(CROSS_NAME);
  checkIterNodeAndSink(iter,sink);
  checkStandardStrategies(nearestCenterReducer,nearestCenterCombiner,newCenterReducer,newCenterCombiner);
  Assert.assertEquals(ShipStrategyType.PARTITION_HASH,cross.getInput1().getShipStrategy());
  Assert.assertEquals(ShipStrategyType.BROADCAST,cross.getInput2().getShipStrategy());
  Assert.assertTrue(cross.getInput1().getTempMode().isCached());
  NepheleJobGraphGenerator jobGen=new NepheleJobGraphGenerator();
  jobGen.compileJobGraph(plan);
}
