{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA7_1=input.LA(1);
  int index7_1=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_1);
if (s >= 0) return s;
break;
case 1:
int LA7_2=input.LA(1);
int index7_2=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_2);
if (s >= 0) return s;
break;
case 2:
int LA7_3=input.LA(1);
int index7_3=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_3);
if (s >= 0) return s;
break;
case 3:
int LA7_4=input.LA(1);
int index7_4=input.index();
input.rewind();
s=-1;
if ((((synpred7_SJaql() && (((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null)) || synpred7_SJaql()))) {
s=17;
}
 else if (((synpred8_SJaql() || (synpred8_SJaql() && (((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null))))) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_4);
if (s >= 0) return s;
break;
case 4:
int LA7_5=input.LA(1);
int index7_5=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_5);
if (s >= 0) return s;
break;
case 5:
int LA7_6=input.LA(1);
int index7_6=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_6);
if (s >= 0) return s;
break;
case 6:
int LA7_7=input.LA(1);
int index7_7=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_7);
if (s >= 0) return s;
break;
case 7:
int LA7_8=input.LA(1);
int index7_8=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_8);
if (s >= 0) return s;
break;
case 8:
int LA7_9=input.LA(1);
int index7_9=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_9);
if (s >= 0) return s;
break;
case 9:
int LA7_10=input.LA(1);
int index7_10=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_10);
if (s >= 0) return s;
break;
case 10:
int LA7_11=input.LA(1);
int index7_11=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_11);
if (s >= 0) return s;
break;
case 11:
int LA7_12=input.LA(1);
int index7_12=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_12);
if (s >= 0) return s;
break;
case 12:
int LA7_13=input.LA(1);
int index7_13=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_13);
if (s >= 0) return s;
break;
case 13:
int LA7_14=input.LA(1);
int index7_14=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_14);
if (s >= 0) return s;
break;
case 14:
int LA7_15=input.LA(1);
int index7_15=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_15);
if (s >= 0) return s;
break;
case 15:
int LA7_16=input.LA(1);
int index7_16=input.index();
input.rewind();
s=-1;
if ((synpred7_SJaql())) {
s=17;
}
 else if ((synpred8_SJaql())) {
s=18;
}
 else if ((true)) {
s=19;
}
input.seek(index7_16);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),7,_s,input);
error(nvae);
throw nvae;
}
