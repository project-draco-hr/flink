{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA21_1=input.LA(1);
  int index21_1=input.index();
input.rewind();
s=-1;
if ((synpred31_SJaql())) {
s=15;
}
 else if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_1);
if (s >= 0) return s;
break;
case 1:
int LA21_2=input.LA(1);
int index21_2=input.index();
input.rewind();
s=-1;
if ((((synpred32_SJaql() && (((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null)) || synpred32_SJaql()))) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_2);
if (s >= 0) return s;
break;
case 2:
int LA21_3=input.LA(1);
int index21_3=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_3);
if (s >= 0) return s;
break;
case 3:
int LA21_4=input.LA(1);
int index21_4=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_4);
if (s >= 0) return s;
break;
case 4:
int LA21_5=input.LA(1);
int index21_5=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_5);
if (s >= 0) return s;
break;
case 5:
int LA21_6=input.LA(1);
int index21_6=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_6);
if (s >= 0) return s;
break;
case 6:
int LA21_7=input.LA(1);
int index21_7=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_7);
if (s >= 0) return s;
break;
case 7:
int LA21_8=input.LA(1);
int index21_8=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_8);
if (s >= 0) return s;
break;
case 8:
int LA21_9=input.LA(1);
int index21_9=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_9);
if (s >= 0) return s;
break;
case 9:
int LA21_10=input.LA(1);
int index21_10=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_10);
if (s >= 0) return s;
break;
case 10:
int LA21_11=input.LA(1);
int index21_11=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_11);
if (s >= 0) return s;
break;
case 11:
int LA21_12=input.LA(1);
int index21_12=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_12);
if (s >= 0) return s;
break;
case 12:
int LA21_13=input.LA(1);
int index21_13=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_13);
if (s >= 0) return s;
break;
case 13:
int LA21_14=input.LA(1);
int index21_14=input.index();
input.rewind();
s=-1;
if ((synpred32_SJaql())) {
s=16;
}
 else if ((true)) {
s=17;
}
input.seek(index21_14);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),21,_s,input);
error(nvae);
throw nvae;
}
