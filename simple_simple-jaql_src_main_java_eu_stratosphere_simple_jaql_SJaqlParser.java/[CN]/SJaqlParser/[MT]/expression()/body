{
  SJaqlParser.expression_return retval=new SJaqlParser.expression_return();
  retval.start=input.LT(1);
  int expression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  SJaqlParser.ternaryExpression_return ternaryExpression22=null;
  SJaqlParser.operatorExpression_return operatorExpression23=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,8)) {
      return retval;
    }
    int alt5=2;
    alt5=dfa5.predict(input);
switch (alt5) {
case 1:
{
        root_0=(EvaluationExpression)adaptor.nil();
        pushFollow(FOLLOW_ternaryExpression_in_expression340);
        ternaryExpression22=ternaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,ternaryExpression22.getTree());
      }
    break;
case 2:
{
    root_0=(EvaluationExpression)adaptor.nil();
    pushFollow(FOLLOW_operatorExpression_in_expression346);
    operatorExpression23=operatorExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,operatorExpression23.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,8,expression_StartIndex);
}
}
return retval;
}
