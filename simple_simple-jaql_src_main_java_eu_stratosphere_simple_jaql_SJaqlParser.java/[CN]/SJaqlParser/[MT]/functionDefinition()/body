{
  SJaqlParser.functionDefinition_return retval=new SJaqlParser.functionDefinition_return();
  retval.start=input.LT(1);
  int functionDefinition_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token param=null;
  Token char_literal12=null;
  Token string_literal13=null;
  Token char_literal14=null;
  Token char_literal15=null;
  Token char_literal16=null;
  SJaqlParser.contextAwareExpression_return def=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression param_tree=null;
  EvaluationExpression char_literal12_tree=null;
  EvaluationExpression string_literal13_tree=null;
  EvaluationExpression char_literal14_tree=null;
  EvaluationExpression char_literal15_tree=null;
  EvaluationExpression char_literal16_tree=null;
  RewriteRuleTokenStream stream_30=new RewriteRuleTokenStream(adaptor,"token 30");
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
  RewriteRuleTokenStream stream_29=new RewriteRuleTokenStream(adaptor,"token 29");
  RewriteRuleSubtreeStream stream_contextAwareExpression=new RewriteRuleSubtreeStream(adaptor,"rule contextAwareExpression");
  List<Token> params=new ArrayList();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,5)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_functionDefinition223);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      char_literal12=(Token)match(input,28,FOLLOW_28_in_functionDefinition225);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_28.add(char_literal12);
      string_literal13=(Token)match(input,29,FOLLOW_29_in_functionDefinition227);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_29.add(string_literal13);
      char_literal14=(Token)match(input,30,FOLLOW_30_in_functionDefinition229);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_30.add(char_literal14);
      int alt4=2;
      int LA4_0=input.LA(1);
      if ((LA4_0 == ID)) {
        alt4=1;
      }
switch (alt4) {
case 1:
{
          param=(Token)match(input,ID,FOLLOW_ID_in_functionDefinition238);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(param);
          if (state.backtracking == 0) {
            params.add(param);
          }
          loop3:           do {
            int alt3=2;
            int LA3_0=input.LA(1);
            if ((LA3_0 == 31)) {
              alt3=1;
            }
switch (alt3) {
case 1:
{
                char_literal15=(Token)match(input,31,FOLLOW_31_in_functionDefinition245);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_31.add(char_literal15);
                param=(Token)match(input,ID,FOLLOW_ID_in_functionDefinition249);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_ID.add(param);
                if (state.backtracking == 0) {
                  params.add(param);
                }
              }
            break;
default :
          break loop3;
      }
    }
 while (true);
  }
break;
}
char_literal16=(Token)match(input,32,FOLLOW_32_in_functionDefinition260);
if (state.failed) return retval;
if (state.backtracking == 0) stream_32.add(char_literal16);
if (state.backtracking == 0) {
for (int index=0; index < params.size(); index++) setBinding(params.get(index),new InputSelection(0));
}
pushFollow(FOLLOW_contextAwareExpression_in_functionDefinition272);
def=contextAwareExpression(null);
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_contextAwareExpression.add(def.getTree());
if (state.backtracking == 0) {
addFunction(new SopremoFunction(name.getText(),def.tree));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,5,functionDefinition_StartIndex);
}
}
return retval;
}
