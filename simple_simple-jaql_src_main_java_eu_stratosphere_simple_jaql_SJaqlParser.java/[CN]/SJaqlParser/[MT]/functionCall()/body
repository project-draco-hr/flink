{
  SJaqlParser.functionCall_return retval=new SJaqlParser.functionCall_return();
  retval.start=input.LT(1);
  int functionCall_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token char_literal54=null;
  Token char_literal55=null;
  Token char_literal56=null;
  SJaqlParser.expression_return param=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal54_tree=null;
  EvaluationExpression char_literal55_tree=null;
  EvaluationExpression char_literal56_tree=null;
  RewriteRuleTokenStream stream_30=new RewriteRuleTokenStream(adaptor,"token 30");
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  List<EvaluationExpression> params=new ArrayList();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,22)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_functionCall1064);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      char_literal54=(Token)match(input,30,FOLLOW_30_in_functionCall1066);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_30.add(char_literal54);
      int alt25=2;
      int LA25_0=input.LA(1);
      if (((LA25_0 >= ID && LA25_0 <= STRING) || (LA25_0 >= DECIMAL && LA25_0 <= UINT) || LA25_0 == 30 || (LA25_0 >= 49 && LA25_0 <= 52) || LA25_0 == 55 || (LA25_0 >= 57 && LA25_0 <= 59) || (LA25_0 >= 61 && LA25_0 <= 62))) {
        alt25=1;
      }
switch (alt25) {
case 1:
{
          pushFollow(FOLLOW_expression_in_functionCall1073);
          param=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_expression.add(param.getTree());
          if (state.backtracking == 0) {
            params.add((param != null ? ((EvaluationExpression)param.tree) : null));
          }
          loop24:           do {
            int alt24=2;
            int LA24_0=input.LA(1);
            if ((LA24_0 == 31)) {
              alt24=1;
            }
switch (alt24) {
case 1:
{
                char_literal55=(Token)match(input,31,FOLLOW_31_in_functionCall1079);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_31.add(char_literal55);
                pushFollow(FOLLOW_expression_in_functionCall1083);
                param=expression();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_expression.add(param.getTree());
                if (state.backtracking == 0) {
                  params.add((param != null ? ((EvaluationExpression)param.tree) : null));
                }
              }
            break;
default :
          break loop24;
      }
    }
 while (true);
  }
break;
}
char_literal56=(Token)match(input,32,FOLLOW_32_in_functionCall1093);
if (state.failed) return retval;
if (state.backtracking == 0) stream_32.add(char_literal56);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"FunctionCall"),root_1);
  adaptor.addChild(root_1,(name != null ? name.getText() : null));
  adaptor.addChild(root_1,params.toArray(new EvaluationExpression[params.size()]));
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,22,functionCall_StartIndex);
}
}
return retval;
}
