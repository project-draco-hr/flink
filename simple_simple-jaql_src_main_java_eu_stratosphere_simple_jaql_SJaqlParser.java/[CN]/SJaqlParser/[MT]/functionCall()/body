{
  SJaqlParser.functionCall_return retval=new SJaqlParser.functionCall_return();
  retval.start=input.LT(1);
  int functionCall_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token char_literal39=null;
  Token char_literal40=null;
  Token char_literal41=null;
  SJaqlParser.expression_return param=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal39_tree=null;
  EvaluationExpression char_literal40_tree=null;
  EvaluationExpression char_literal41_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  List<EvaluationExpression> params=new ArrayList();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,17)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_functionCall819);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      char_literal39=(Token)match(input,47,FOLLOW_47_in_functionCall821);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_47.add(char_literal39);
{
        pushFollow(FOLLOW_expression_in_functionCall828);
        param=expression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_expression.add(param.getTree());
        if (state.backtracking == 0) {
          params.add((param != null ? ((EvaluationExpression)param.tree) : null));
        }
        loop19:         do {
          int alt19=2;
          int LA19_0=input.LA(1);
          if ((LA19_0 == 49)) {
            alt19=1;
          }
switch (alt19) {
case 1:
{
              char_literal40=(Token)match(input,49,FOLLOW_49_in_functionCall834);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_49.add(char_literal40);
              pushFollow(FOLLOW_expression_in_functionCall838);
              param=expression();
              state._fsp--;
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_expression.add(param.getTree());
              if (state.backtracking == 0) {
                params.add((param != null ? ((EvaluationExpression)param.tree) : null));
              }
            }
          break;
default :
        break loop19;
    }
  }
 while (true);
}
char_literal41=(Token)match(input,48,FOLLOW_48_in_functionCall847);
if (state.failed) return retval;
if (state.backtracking == 0) stream_48.add(char_literal41);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(EvaluationExpression)adaptor.nil();
{
{
      EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
      root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"FunctionCall"),root_1);
      adaptor.addChild(root_1,(name != null ? name.getText() : null));
      adaptor.addChild(root_1,params.toArray(new EvaluationExpression[params.size()]));
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,17,functionCall_StartIndex);
}
}
return retval;
}
