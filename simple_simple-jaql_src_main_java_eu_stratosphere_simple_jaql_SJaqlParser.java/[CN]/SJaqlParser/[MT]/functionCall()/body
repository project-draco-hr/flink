{
  SJaqlParser.functionCall_return retval=new SJaqlParser.functionCall_return();
  retval.start=input.LT(1);
  int functionCall_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token char_literal42=null;
  Token char_literal43=null;
  Token char_literal44=null;
  SJaqlParser.expression_return param=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal42_tree=null;
  EvaluationExpression char_literal43_tree=null;
  EvaluationExpression char_literal44_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  List<EvaluationExpression> params=new ArrayList();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,19)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_functionCall935);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      char_literal42=(Token)match(input,47,FOLLOW_47_in_functionCall937);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_47.add(char_literal42);
      int alt22=2;
      int LA22_0=input.LA(1);
      if (((LA22_0 >= VAR && LA22_0 <= ID) || (LA22_0 >= DECIMAL && LA22_0 <= UINT) || (LA22_0 >= 42 && LA22_0 <= 45)|| LA22_0 == 47 || LA22_0 == 51 || (LA22_0 >= 53 && LA22_0 <= 55) || (LA22_0 >= 57 && LA22_0 <= 58))) {
        alt22=1;
      }
switch (alt22) {
case 1:
{
          pushFollow(FOLLOW_expression_in_functionCall944);
          param=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_expression.add(param.getTree());
          if (state.backtracking == 0) {
            params.add((param != null ? ((EvaluationExpression)param.tree) : null));
          }
          loop21:           do {
            int alt21=2;
            int LA21_0=input.LA(1);
            if ((LA21_0 == 49)) {
              alt21=1;
            }
switch (alt21) {
case 1:
{
                char_literal43=(Token)match(input,49,FOLLOW_49_in_functionCall950);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_49.add(char_literal43);
                pushFollow(FOLLOW_expression_in_functionCall954);
                param=expression();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_expression.add(param.getTree());
                if (state.backtracking == 0) {
                  params.add((param != null ? ((EvaluationExpression)param.tree) : null));
                }
              }
            break;
default :
          break loop21;
      }
    }
 while (true);
  }
break;
}
char_literal44=(Token)match(input,48,FOLLOW_48_in_functionCall964);
if (state.failed) return retval;
if (state.backtracking == 0) stream_48.add(char_literal44);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"FunctionCall"),root_1);
  adaptor.addChild(root_1,(name != null ? name.getText() : null));
  adaptor.addChild(root_1,params.toArray(new EvaluationExpression[params.size()]));
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,19,functionCall_StartIndex);
}
}
return retval;
}
