{
  operator_stack.push(new operator_scope());
  SJaqlParser.operator_return retval=new SJaqlParser.operator_return();
  retval.start=input.LT(1);
  int operator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token opRule=null;
  SJaqlParser.readOperator_return readOperator94=null;
  SJaqlParser.writeOperator_return writeOperator95=null;
  SJaqlParser.genericOperator_return genericOperator96=null;
  EvaluationExpression opRule_tree=null;
  ((operator_scope)operator_stack.peek()).inputNames=new ArrayList<String>();
  ((operator_scope)operator_stack.peek()).inputTags=new ArrayList<List<ExpressionTag>>();
  ((operator_scope)operator_stack.peek()).hasExplicitName=new java.util.BitSet();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,31)) {
      return retval;
    }
{
      root_0=(EvaluationExpression)adaptor.nil();
      int alt40=3;
switch (input.LA(1)) {
case 65:
{
          alt40=1;
        }
      break;
case 66:
{
      alt40=2;
    }
  break;
case ID:
{
  alt40=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",40,0,input);
throw nvae;
}
switch (alt40) {
case 1:
{
pushFollow(FOLLOW_readOperator_in_operator1619);
readOperator94=readOperator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,readOperator94.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_writeOperator_in_operator1623);
writeOperator95=writeOperator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,writeOperator95.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_genericOperator_in_operator1627);
genericOperator96=genericOperator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,genericOperator96.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.op=((operator_scope)operator_stack.peek()).result;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,31,operator_StartIndex);
}
operator_stack.pop();
}
return retval;
}
