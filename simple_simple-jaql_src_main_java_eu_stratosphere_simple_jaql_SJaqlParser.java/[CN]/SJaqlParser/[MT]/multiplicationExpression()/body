{
  SJaqlParser.multiplicationExpression_return retval=new SJaqlParser.multiplicationExpression_return();
  retval.start=input.LT(1);
  int multiplicationExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token s=null;
  SJaqlParser.preincrementExpression_return e1=null;
  SJaqlParser.preincrementExpression_return e2=null;
  EvaluationExpression s_tree=null;
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleSubtreeStream stream_preincrementExpression=new RewriteRuleSubtreeStream(adaptor,"rule preincrementExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,12)) {
      return retval;
    }
{
      pushFollow(FOLLOW_preincrementExpression_in_multiplicationExpression578);
      e1=preincrementExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_preincrementExpression.add(e1.getTree());
      int alt14=2;
      int LA14_0=input.LA(1);
      if ((LA14_0 == STAR)) {
        int LA14_1=input.LA(2);
        if ((synpred19_SJaql())) {
          alt14=1;
        }
      }
 else       if ((LA14_0 == 42)) {
        int LA14_2=input.LA(2);
        if ((synpred19_SJaql())) {
          alt14=1;
        }
      }
switch (alt14) {
case 1:
{
          int alt13=2;
          int LA13_0=input.LA(1);
          if ((LA13_0 == STAR)) {
            alt13=1;
          }
 else           if ((LA13_0 == 42)) {
            alt13=2;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",13,0,input);
            throw nvae;
          }
switch (alt13) {
case 1:
{
              s=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicationExpression584);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_STAR.add(s);
            }
          break;
case 2:
{
          s=(Token)match(input,42,FOLLOW_42_in_multiplicationExpression590);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_42.add(s);
        }
      break;
  }
  pushFollow(FOLLOW_preincrementExpression_in_multiplicationExpression595);
  e2=preincrementExpression();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_preincrementExpression.add(e2.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1 != null ? e1.tree : null);
RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2 != null ? e2.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (s != null) {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArithmeticExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,s.getText().equals("*") ? ArithmeticExpression.ArithmeticOperator.MULTIPLICATION : ArithmeticExpression.ArithmeticOperator.DIVISION);
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
 else {
adaptor.addChild(root_0,stream_e1.nextTree());
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,12,multiplicationExpression_StartIndex);
}
}
return retval;
}
