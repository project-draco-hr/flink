{
  SJaqlParser.comparisonExpression_return retval=new SJaqlParser.comparisonExpression_return();
  retval.start=input.LT(1);
  int comparisonExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token s=null;
  SJaqlParser.arithmeticExpression_return e1=null;
  SJaqlParser.arithmeticExpression_return e2=null;
  EvaluationExpression s_tree=null;
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
  RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
  RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
  RewriteRuleSubtreeStream stream_arithmeticExpression=new RewriteRuleSubtreeStream(adaptor,"rule arithmeticExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,13)) {
      return retval;
    }
{
      pushFollow(FOLLOW_arithmeticExpression_in_comparisonExpression574);
      e1=arithmeticExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_arithmeticExpression.add(e1.getTree());
      int alt14=2;
switch (input.LA(1)) {
case 43:
{
          int LA14_1=input.LA(2);
          if ((synpred22_SJaql())) {
            alt14=1;
          }
        }
      break;
case 44:
{
      int LA14_2=input.LA(2);
      if ((synpred22_SJaql())) {
        alt14=1;
      }
    }
  break;
case 45:
{
  int LA14_3=input.LA(2);
  if ((synpred22_SJaql())) {
    alt14=1;
  }
}
break;
case 46:
{
int LA14_4=input.LA(2);
if ((synpred22_SJaql())) {
alt14=1;
}
}
break;
case 47:
{
int LA14_5=input.LA(2);
if ((synpred22_SJaql())) {
alt14=1;
}
}
break;
case 48:
{
int LA14_6=input.LA(2);
if ((synpred22_SJaql())) {
alt14=1;
}
}
break;
}
switch (alt14) {
case 1:
{
int alt13=6;
switch (input.LA(1)) {
case 43:
{
alt13=1;
}
break;
case 44:
{
alt13=2;
}
break;
case 45:
{
alt13=3;
}
break;
case 46:
{
alt13=4;
}
break;
case 47:
{
alt13=5;
}
break;
case 48:
{
alt13=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",13,0,input);
throw nvae;
}
switch (alt13) {
case 1:
{
s=(Token)match(input,43,FOLLOW_43_in_comparisonExpression580);
if (state.failed) return retval;
if (state.backtracking == 0) stream_43.add(s);
}
break;
case 2:
{
s=(Token)match(input,44,FOLLOW_44_in_comparisonExpression586);
if (state.failed) return retval;
if (state.backtracking == 0) stream_44.add(s);
}
break;
case 3:
{
s=(Token)match(input,45,FOLLOW_45_in_comparisonExpression592);
if (state.failed) return retval;
if (state.backtracking == 0) stream_45.add(s);
}
break;
case 4:
{
s=(Token)match(input,46,FOLLOW_46_in_comparisonExpression598);
if (state.failed) return retval;
if (state.backtracking == 0) stream_46.add(s);
}
break;
case 5:
{
s=(Token)match(input,47,FOLLOW_47_in_comparisonExpression604);
if (state.failed) return retval;
if (state.backtracking == 0) stream_47.add(s);
}
break;
case 6:
{
s=(Token)match(input,48,FOLLOW_48_in_comparisonExpression610);
if (state.failed) return retval;
if (state.backtracking == 0) stream_48.add(s);
}
break;
}
pushFollow(FOLLOW_arithmeticExpression_in_comparisonExpression615);
e2=arithmeticExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_arithmeticExpression.add(e2.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1 != null ? e1.tree : null);
RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2 != null ? e2.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (s == null) {
adaptor.addChild(root_0,stream_e1.nextTree());
}
 else if (s.getText().equals("!=")) {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.NOT_EQUAL);
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
 else if (s.getText().equals("==")) {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.EQUAL);
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
 else {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.valueOfSymbol((s != null ? s.getText() : null)));
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,13,comparisonExpression_StartIndex);
}
}
return retval;
}
