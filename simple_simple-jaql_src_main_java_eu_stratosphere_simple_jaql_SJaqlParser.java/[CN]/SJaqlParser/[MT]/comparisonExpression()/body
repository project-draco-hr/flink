{
  SJaqlParser.comparisonExpression_return retval=new SJaqlParser.comparisonExpression_return();
  retval.start=input.LT(1);
  int comparisonExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token s=null;
  SJaqlParser.arithmeticExpression_return e1=null;
  SJaqlParser.arithmeticExpression_return e2=null;
  EvaluationExpression s_tree=null;
  RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
  RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
  RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");
  RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
  RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  RewriteRuleSubtreeStream stream_arithmeticExpression=new RewriteRuleSubtreeStream(adaptor,"rule arithmeticExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,8)) {
      return retval;
    }
{
      pushFollow(FOLLOW_arithmeticExpression_in_comparisonExpression367);
      e1=arithmeticExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_arithmeticExpression.add(e1.getTree());
      int alt9=2;
switch (input.LA(1)) {
case 33:
{
          int LA9_1=input.LA(2);
          if ((synpred14_SJaql())) {
            alt9=1;
          }
        }
      break;
case 34:
{
      int LA9_2=input.LA(2);
      if ((synpred14_SJaql())) {
        alt9=1;
      }
    }
  break;
case 35:
{
  int LA9_3=input.LA(2);
  if ((synpred14_SJaql())) {
    alt9=1;
  }
}
break;
case 36:
{
int LA9_4=input.LA(2);
if ((synpred14_SJaql())) {
alt9=1;
}
}
break;
case 37:
{
int LA9_5=input.LA(2);
if ((synpred14_SJaql())) {
alt9=1;
}
}
break;
case 38:
{
int LA9_6=input.LA(2);
if ((synpred14_SJaql())) {
alt9=1;
}
}
break;
}
switch (alt9) {
case 1:
{
int alt8=6;
switch (input.LA(1)) {
case 33:
{
alt8=1;
}
break;
case 34:
{
alt8=2;
}
break;
case 35:
{
alt8=3;
}
break;
case 36:
{
alt8=4;
}
break;
case 37:
{
alt8=5;
}
break;
case 38:
{
alt8=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",8,0,input);
throw nvae;
}
switch (alt8) {
case 1:
{
s=(Token)match(input,33,FOLLOW_33_in_comparisonExpression373);
if (state.failed) return retval;
if (state.backtracking == 0) stream_33.add(s);
}
break;
case 2:
{
s=(Token)match(input,34,FOLLOW_34_in_comparisonExpression379);
if (state.failed) return retval;
if (state.backtracking == 0) stream_34.add(s);
}
break;
case 3:
{
s=(Token)match(input,35,FOLLOW_35_in_comparisonExpression385);
if (state.failed) return retval;
if (state.backtracking == 0) stream_35.add(s);
}
break;
case 4:
{
s=(Token)match(input,36,FOLLOW_36_in_comparisonExpression391);
if (state.failed) return retval;
if (state.backtracking == 0) stream_36.add(s);
}
break;
case 5:
{
s=(Token)match(input,37,FOLLOW_37_in_comparisonExpression397);
if (state.failed) return retval;
if (state.backtracking == 0) stream_37.add(s);
}
break;
case 6:
{
s=(Token)match(input,38,FOLLOW_38_in_comparisonExpression403);
if (state.failed) return retval;
if (state.backtracking == 0) stream_38.add(s);
}
break;
}
pushFollow(FOLLOW_arithmeticExpression_in_comparisonExpression408);
e2=arithmeticExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_arithmeticExpression.add(e2.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1 != null ? e1.tree : null);
RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2 != null ? e2.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (s == null) {
adaptor.addChild(root_0,stream_e1.nextTree());
}
 else if (s.getText().equals("!=")) {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.NOT_EQUAL);
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
 else if (s.getText().equals("==")) {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.EQUAL);
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
 else {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ComparativeExpression"),root_1);
adaptor.addChild(root_1,stream_e1.nextTree());
adaptor.addChild(root_1,ComparativeExpression.BinaryOperator.valueOfSymbol((s != null ? s.getText() : null)));
adaptor.addChild(root_1,stream_e2.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,8,comparisonExpression_StartIndex);
}
}
return retval;
}
