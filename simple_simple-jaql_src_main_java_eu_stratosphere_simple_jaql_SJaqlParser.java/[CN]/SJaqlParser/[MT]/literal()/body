{
  SJaqlParser.literal_return retval=new SJaqlParser.literal_return();
  retval.start=input.LT(1);
  int literal_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token val=null;
  EvaluationExpression val_tree=null;
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
  RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,23)) {
      return retval;
    }
    int alt28=6;
switch (input.LA(1)) {
case 54:
{
        alt28=1;
      }
    break;
case 55:
{
    alt28=2;
  }
break;
case DECIMAL:
{
alt28=3;
}
break;
case STRING:
{
alt28=4;
}
break;
case INTEGER:
{
alt28=5;
}
break;
case UINT:
{
alt28=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",28,0,input);
throw nvae;
}
switch (alt28) {
case 1:
{
val=(Token)match(input,54,FOLLOW_54_in_literal1090);
if (state.failed) return retval;
if (state.backtracking == 0) stream_54.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,Boolean.TRUE);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
val=(Token)match(input,55,FOLLOW_55_in_literal1106);
if (state.failed) return retval;
if (state.backtracking == 0) stream_55.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,Boolean.FALSE);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
val=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal1122);
if (state.failed) return retval;
if (state.backtracking == 0) stream_DECIMAL.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,new BigDecimal((val != null ? val.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 4:
{
val=(Token)match(input,STRING,FOLLOW_STRING_in_literal1138);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STRING.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,(val != null ? val.getText() : null));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 5:
{
val=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_literal1155);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,parseInt((val != null ? val.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 6:
{
val=(Token)match(input,UINT,FOLLOW_UINT_in_literal1172);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,parseInt((val != null ? val.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,23,literal_StartIndex);
}
}
return retval;
}
