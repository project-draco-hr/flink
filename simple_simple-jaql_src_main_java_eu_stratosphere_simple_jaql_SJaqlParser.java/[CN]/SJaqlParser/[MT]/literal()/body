{
  SJaqlParser.literal_return retval=new SJaqlParser.literal_return();
  retval.start=input.LT(1);
  int literal_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token val=null;
  Token string_literal78=null;
  EvaluationExpression val_tree=null;
  EvaluationExpression string_literal78_tree=null;
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
  RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
  RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,28)) {
      return retval;
    }
    int alt35=7;
switch (input.LA(1)) {
case 60:
{
        alt35=1;
      }
    break;
case 61:
{
    alt35=2;
  }
break;
case DECIMAL:
{
alt35=3;
}
break;
case STRING:
{
alt35=4;
}
break;
case INTEGER:
{
alt35=5;
}
break;
case UINT:
{
alt35=6;
}
break;
case 62:
{
alt35=7;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",35,0,input);
throw nvae;
}
switch (alt35) {
case 1:
{
val=(Token)match(input,60,FOLLOW_60_in_literal1453);
if (state.failed) return retval;
if (state.backtracking == 0) stream_60.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,Boolean.TRUE);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
val=(Token)match(input,61,FOLLOW_61_in_literal1469);
if (state.failed) return retval;
if (state.backtracking == 0) stream_61.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,Boolean.FALSE);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
val=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal1485);
if (state.failed) return retval;
if (state.backtracking == 0) stream_DECIMAL.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,new BigDecimal((val != null ? val.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 4:
{
val=(Token)match(input,STRING,FOLLOW_STRING_in_literal1501);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STRING.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,val.getText());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 5:
{
val=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_literal1518);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,parseInt((val != null ? val.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 6:
{
val=(Token)match(input,UINT,FOLLOW_UINT_in_literal1535);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(val);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ConstantExpression"),root_1);
adaptor.addChild(root_1,parseInt((val != null ? val.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 7:
{
string_literal78=(Token)match(input,62,FOLLOW_62_in_literal1550);
if (state.failed) return retval;
if (state.backtracking == 0) stream_62.add(string_literal78);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,EvaluationExpression.NULL);
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,28,literal_StartIndex);
}
}
return retval;
}
