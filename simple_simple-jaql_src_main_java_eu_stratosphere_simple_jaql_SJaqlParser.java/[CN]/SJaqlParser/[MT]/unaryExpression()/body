{
  SJaqlParser.unaryExpression_return retval=new SJaqlParser.unaryExpression_return();
  retval.start=input.LT(1);
  int unaryExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token set36=null;
  SJaqlParser.castExpression_return castExpression37=null;
  EvaluationExpression set36_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,17)) {
      return retval;
    }
{
      root_0=(EvaluationExpression)adaptor.nil();
      int alt21=2;
      int LA21_0=input.LA(1);
      if (((LA21_0 >= 54 && LA21_0 <= 55))) {
        alt21=1;
      }
switch (alt21) {
case 1:
{
          set36=(Token)input.LT(1);
          if ((input.LA(1) >= 54 && input.LA(1) <= 55)) {
            input.consume();
            if (state.backtracking == 0)             adaptor.addChild(root_0,(EvaluationExpression)adaptor.create(set36));
            state.errorRecovery=false;
            state.failed=false;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            MismatchedSetException mse=new MismatchedSetException(null,input);
            throw mse;
          }
        }
      break;
  }
  pushFollow(FOLLOW_castExpression_in_unaryExpression850);
  castExpression37=castExpression();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,castExpression37.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
  memoize(input,17,unaryExpression_StartIndex);
}
}
return retval;
}
