{
  SJaqlParser.unaryExpression_return retval=new SJaqlParser.unaryExpression_return();
  retval.start=input.LT(1);
  int unaryExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token set21=null;
  SJaqlParser.pathExpression_return pathExpression22=null;
  EvaluationExpression set21_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,12)) {
      return retval;
    }
{
      root_0=(EvaluationExpression)adaptor.nil();
      int alt15=2;
      int LA15_0=input.LA(1);
      if (((LA15_0 >= 44 && LA15_0 <= 45))) {
        alt15=1;
      }
switch (alt15) {
case 1:
{
          set21=(Token)input.LT(1);
          if ((input.LA(1) >= 44 && input.LA(1) <= 45)) {
            input.consume();
            if (state.backtracking == 0)             adaptor.addChild(root_0,(EvaluationExpression)adaptor.create(set21));
            state.errorRecovery=false;
            state.failed=false;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            MismatchedSetException mse=new MismatchedSetException(null,input);
            throw mse;
          }
        }
      break;
  }
  pushFollow(FOLLOW_pathExpression_in_unaryExpression639);
  pathExpression22=pathExpression();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,pathExpression22.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
  memoize(input,12,unaryExpression_StartIndex);
}
}
return retval;
}
