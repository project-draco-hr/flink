{
  SJaqlParser.unaryExpression_return retval=new SJaqlParser.unaryExpression_return();
  retval.start=input.LT(1);
  int unaryExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token set33=null;
  SJaqlParser.contextAwarePathExpression_return contextAwarePathExpression34=null;
  SJaqlParser.pathExpression_return pathExpression35=null;
  EvaluationExpression set33_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,16)) {
      return retval;
    }
{
      root_0=(EvaluationExpression)adaptor.nil();
      int alt18=2;
      int LA18_0=input.LA(1);
      if (((LA18_0 >= 51 && LA18_0 <= 52))) {
        alt18=1;
      }
switch (alt18) {
case 1:
{
          set33=(Token)input.LT(1);
          if ((input.LA(1) >= 51 && input.LA(1) <= 52)) {
            input.consume();
            if (state.backtracking == 0)             adaptor.addChild(root_0,(EvaluationExpression)adaptor.create(set33));
            state.errorRecovery=false;
            state.failed=false;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            MismatchedSetException mse=new MismatchedSetException(null,input);
            throw mse;
          }
        }
      break;
  }
  int alt19=2;
  int LA19_0=input.LA(1);
  if ((LA19_0 == ID)) {
    int LA19_1=input.LA(2);
    if (((synpred28_SJaql() && (((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null)))) {
      alt19=1;
    }
 else     if ((true)) {
      alt19=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",19,1,input);
      throw nvae;
    }
  }
 else   if (((LA19_0 >= VAR && LA19_0 <= STRING) || (LA19_0 >= DECIMAL && LA19_0 <= UINT) || LA19_0 == 30 || LA19_0 == 55 || (LA19_0 >= 57 && LA19_0 <= 59) || (LA19_0 >= 61 && LA19_0 <= 62))) {
    alt19=2;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",19,0,input);
    throw nvae;
  }
switch (alt19) {
case 1:
{
{
        if (!((((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null))) {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          throw new FailedPredicateException(input,"unaryExpression","$contextAwareExpression::context != null");
        }
        pushFollow(FOLLOW_contextAwarePathExpression_in_unaryExpression788);
        contextAwarePathExpression34=contextAwarePathExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,contextAwarePathExpression34.getTree());
      }
    }
  break;
case 2:
{
  pushFollow(FOLLOW_pathExpression_in_unaryExpression793);
  pathExpression35=pathExpression();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,pathExpression35.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,16,unaryExpression_StartIndex);
}
}
return retval;
}
