{
  SJaqlParser.unaryExpression_return retval=new SJaqlParser.unaryExpression_return();
  retval.start=input.LT(1);
  int unaryExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token set22=null;
  SJaqlParser.contextAwarePathExpression_return contextAwarePathExpression23=null;
  SJaqlParser.pathExpression_return pathExpression24=null;
  EvaluationExpression set22_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,14)) {
      return retval;
    }
{
      root_0=(EvaluationExpression)adaptor.nil();
      int alt16=2;
      int LA16_0=input.LA(1);
      if (((LA16_0 >= 45 && LA16_0 <= 46))) {
        alt16=1;
      }
switch (alt16) {
case 1:
{
          set22=(Token)input.LT(1);
          if ((input.LA(1) >= 45 && input.LA(1) <= 46)) {
            input.consume();
            if (state.backtracking == 0)             adaptor.addChild(root_0,(EvaluationExpression)adaptor.create(set22));
            state.errorRecovery=false;
            state.failed=false;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            MismatchedSetException mse=new MismatchedSetException(null,input);
            throw mse;
          }
        }
      break;
  }
  int alt17=2;
  int LA17_0=input.LA(1);
  if ((LA17_0 == ID)) {
switch (input.LA(2)) {
case VAR:
case 48:
case 61:
{
        alt17=2;
      }
    break;
case EOF:
case STAR:
case 25:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 47:
case 49:
case 50:
case 53:
case 56:
case 57:
{
    alt17=1;
  }
break;
case ID:
{
switch (input.LA(3)) {
case ID:
{
    int LA17_5=input.LA(4);
    if (((synpred24_SJaql() && (((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null)))) {
      alt17=1;
    }
 else     if ((true)) {
      alt17=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",17,5,input);
      throw nvae;
    }
  }
break;
case DECIMAL:
case STRING:
case INTEGER:
case UINT:
case 43:
case 44:
case 45:
case 46:
case 48:
case 52:
case 54:
case 55:
case 56:
case 58:
case 59:
{
alt17=1;
}
break;
case VAR:
{
int LA17_6=input.LA(4);
if (((synpred24_SJaql() && (((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null)))) {
alt17=1;
}
 else if ((true)) {
alt17=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",17,6,input);
throw nvae;
}
}
break;
case 61:
{
alt17=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",17,4,input);
throw nvae;
}
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",17,1,input);
throw nvae;
}
}
 else if ((LA17_0 == VAR || (LA17_0 >= DECIMAL && LA17_0 <= UINT) || LA17_0 == 48 || LA17_0 == 52 || (LA17_0 >= 54 && LA17_0 <= 56) || (LA17_0 >= 58 && LA17_0 <= 59))) {
alt17=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",17,0,input);
throw nvae;
}
switch (alt17) {
case 1:
{
{
if (!((((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null))) {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
throw new FailedPredicateException(input,"unaryExpression","$contextAwareExpression::context != null");
}
pushFollow(FOLLOW_contextAwarePathExpression_in_unaryExpression677);
contextAwarePathExpression23=contextAwarePathExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,contextAwarePathExpression23.getTree());
}
}
break;
case 2:
{
pushFollow(FOLLOW_pathExpression_in_unaryExpression682);
pathExpression24=pathExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,pathExpression24.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,14,unaryExpression_StartIndex);
}
}
return retval;
}
