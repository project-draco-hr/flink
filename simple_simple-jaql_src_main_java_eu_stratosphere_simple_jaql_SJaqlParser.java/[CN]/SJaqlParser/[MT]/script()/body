{
  SJaqlParser.script_return retval=new SJaqlParser.script_return();
  retval.start=input.LT(1);
  int script_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal2=null;
  Token char_literal4=null;
  SJaqlParser.statement_return statement1=null;
  SJaqlParser.statement_return statement3=null;
  EvaluationExpression char_literal2_tree=null;
  EvaluationExpression char_literal4_tree=null;
  RewriteRuleTokenStream stream_26=new RewriteRuleTokenStream(adaptor,"token 26");
  RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,1)) {
      return retval;
    }
{
      pushFollow(FOLLOW_statement_in_script133);
      statement1=statement();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_statement.add(statement1.getTree());
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == 26)) {
          int LA1_1=input.LA(2);
          if (((LA1_1 >= ID && LA1_1 <= VAR) || LA1_1 == 27 || (LA1_1 >= 61 && LA1_1 <= 62))) {
            alt1=1;
          }
        }
switch (alt1) {
case 1:
{
            char_literal2=(Token)match(input,26,FOLLOW_26_in_script136);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_26.add(char_literal2);
            pushFollow(FOLLOW_statement_in_script138);
            statement3=statement();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_statement.add(statement3.getTree());
          }
        break;
default :
      break loop1;
  }
}
 while (true);
char_literal4=(Token)match(input,26,FOLLOW_26_in_script142);
if (state.failed) return retval;
if (state.backtracking == 0) stream_26.add(char_literal4);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(EvaluationExpression)adaptor.nil();
{
    root_0=null;
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,1,script_StartIndex);
}
}
return retval;
}
