{
  SJaqlParser.input_return retval=new SJaqlParser.input_return();
  retval.start=input.LT(1);
  int input_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token from=null;
  Token string_literal90=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression string_literal90_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,28)) {
      return retval;
    }
{
      int alt39=2;
      int LA39_0=input.LA(1);
      if ((LA39_0 == VAR)) {
        int LA39_1=input.LA(2);
        if ((LA39_1 == 31)) {
          int LA39_2=input.LA(3);
          if ((LA39_2 == VAR)) {
            int LA39_4=input.LA(4);
            if ((synpred59_SJaql())) {
              alt39=1;
            }
          }
        }
      }
switch (alt39) {
case 1:
{
          name=(Token)match(input,VAR,FOLLOW_VAR_in_input1327);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_VAR.add(name);
          string_literal90=(Token)match(input,31,FOLLOW_31_in_input1329);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_31.add(string_literal90);
        }
      break;
  }
  from=(Token)match(input,VAR,FOLLOW_VAR_in_input1335);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_VAR.add(from);
  if (state.backtracking == 0) {
    ((operator_scope)operator_stack.peek()).inputOperators.add(getVariable(from));
    ((operator_scope)operator_stack.peek()).inputNames.add(from.getText());
    ((operator_scope)operator_stack.peek()).aliasNames.add(name == null ? String.format("$%d",((operator_scope)operator_stack.peek()).aliasNames.size()) : name.getText());
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(EvaluationExpression)adaptor.nil();
{
      root_0=null;
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
  memoize(input,28,input_StartIndex);
}
}
return retval;
}
