{
  SJaqlParser.input_return retval=new SJaqlParser.input_return();
  retval.start=input.LT(1);
  int input_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token preserveFlag=null;
  Token name=null;
  Token from=null;
  Token inputOption=null;
  Token string_literal99=null;
  SJaqlParser.contextAwareExpression_return expr=null;
  EvaluationExpression preserveFlag_tree=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression inputOption_tree=null;
  EvaluationExpression string_literal99_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
  RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
  RewriteRuleSubtreeStream stream_contextAwareExpression=new RewriteRuleSubtreeStream(adaptor,"rule contextAwareExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,34)) {
      return retval;
    }
{
      int alt47=2;
      int LA47_0=input.LA(1);
      if ((LA47_0 == 64)) {
        alt47=1;
      }
switch (alt47) {
case 1:
{
          preserveFlag=(Token)match(input,64,FOLLOW_64_in_input1693);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_64.add(preserveFlag);
        }
      break;
  }
  if (state.backtracking == 0) {
  }
  int alt48=2;
  int LA48_0=input.LA(1);
  if ((LA48_0 == VAR)) {
    int LA48_1=input.LA(2);
    if ((LA48_1 == 39)) {
      int LA48_2=input.LA(3);
      if ((LA48_2 == VAR)) {
        int LA48_4=input.LA(4);
        if ((synpred72_SJaql())) {
          alt48=1;
        }
      }
    }
  }
switch (alt48) {
case 1:
{
      name=(Token)match(input,VAR,FOLLOW_VAR_in_input1701);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(name);
      string_literal99=(Token)match(input,39,FOLLOW_39_in_input1703);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_39.add(string_literal99);
    }
  break;
}
from=(Token)match(input,VAR,FOLLOW_VAR_in_input1709);
if (state.failed) return retval;
if (state.backtracking == 0) stream_VAR.add(from);
if (state.backtracking == 0) {
int inputIndex=((operator_scope)operator_stack.peek()).inputNames.size();
((operator_scope)operator_stack.peek()).result.setInput(inputIndex,getVariable(from,Operator.class));
((operator_scope)operator_stack.peek()).inputNames.add(name != null ? name.getText() : from.getText());
((operator_scope)operator_stack.peek()).hasExplicitName.set(inputIndex,name != null);
((operator_scope)operator_stack.peek()).inputTags.add(preserveFlag == null ? new ArrayList<ExpressionTag>() : Arrays.asList(ExpressionTag.RETAIN));
}
int alt49=2;
alt49=dfa49.predict(input);
switch (alt49) {
case 1:
{
  inputOption=(Token)match(input,ID,FOLLOW_ID_in_input1717);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(inputOption);
  if (!((((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.hasInputProperty((inputOption != null ? inputOption.getText() : null))))) {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    throw new FailedPredicateException(input,"input","$genericOperator::operatorInfo.hasInputProperty($inputOption.text)");
  }
  pushFollow(FOLLOW_contextAwareExpression_in_input1726);
  expr=contextAwareExpression(new InputSelection(((operator_scope)operator_stack.peek()).inputNames.size() - 1));
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_contextAwareExpression.add(expr.getTree());
  if (state.backtracking == 0) {
    ((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.setInputProperty((inputOption != null ? inputOption.getText() : null),((operator_scope)operator_stack.peek()).result,((operator_scope)operator_stack.peek()).inputNames.size() - 1,(expr != null ? ((EvaluationExpression)expr.tree) : null));
  }
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,34,input_StartIndex);
}
}
return retval;
}
