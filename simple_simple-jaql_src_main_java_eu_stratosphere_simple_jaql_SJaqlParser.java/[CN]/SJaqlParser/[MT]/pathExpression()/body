{
  pathExpression_stack.push(new pathExpression_scope());
  SJaqlParser.pathExpression_return retval=new SJaqlParser.pathExpression_return();
  retval.start=input.LT(1);
  int pathExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token field=null;
  Token char_literal39=null;
  SJaqlParser.valueExpression_return valueExpression38=null;
  SJaqlParser.arrayAccess_return arrayAccess40=null;
  SJaqlParser.valueExpression_return valueExpression41=null;
  EvaluationExpression field_tree=null;
  EvaluationExpression char_literal39_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
  RewriteRuleSubtreeStream stream_arrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule arrayAccess");
  RewriteRuleSubtreeStream stream_valueExpression=new RewriteRuleSubtreeStream(adaptor,"rule valueExpression");
  ((pathExpression_scope)pathExpression_stack.peek()).fragments=new ArrayList<EvaluationExpression>();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,18)) {
      return retval;
    }
    int alt22=2;
    alt22=dfa22.predict(input);
switch (alt22) {
case 1:
{
        pushFollow(FOLLOW_valueExpression_in_pathExpression896);
        valueExpression38=valueExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_valueExpression.add(valueExpression38.getTree());
        int cnt21=0;
        loop21:         do {
          int alt21=3;
          int LA21_0=input.LA(1);
          if ((LA21_0 == 53)) {
            int LA21_2=input.LA(2);
            if ((synpred31_SJaql())) {
              alt21=1;
            }
          }
 else           if ((LA21_0 == 59)) {
            int LA21_3=input.LA(2);
            if ((synpred32_SJaql())) {
              alt21=2;
            }
          }
switch (alt21) {
case 1:
{
{
                char_literal39=(Token)match(input,53,FOLLOW_53_in_pathExpression910);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_53.add(char_literal39);
{
                  field=(Token)match(input,ID,FOLLOW_ID_in_pathExpression915);
                  if (state.failed)                   return retval;
                  if (state.backtracking == 0)                   stream_ID.add(field);
                  if (state.backtracking == 0) {
                    ((pathExpression_scope)pathExpression_stack.peek()).fragments.add(new ObjectAccess((field != null ? field.getText() : null)));
                  }
                }
              }
            }
          break;
case 2:
{
          pushFollow(FOLLOW_arrayAccess_in_pathExpression933);
          arrayAccess40=arrayAccess();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_arrayAccess.add(arrayAccess40.getTree());
          if (state.backtracking == 0) {
            ((pathExpression_scope)pathExpression_stack.peek()).fragments.add((arrayAccess40 != null ? ((EvaluationExpression)arrayAccess40.tree) : null));
          }
        }
      break;
default :
    if (cnt21 >= 1)     break loop21;
  if (state.backtracking > 0) {
    state.failed=true;
    return retval;
  }
EarlyExitException eee=new EarlyExitException(21,input);
throw eee;
}
cnt21++;
}
 while (true);
if (state.backtracking == 0) {
((pathExpression_scope)pathExpression_stack.peek()).fragments.add(0,(valueExpression38 != null ? ((EvaluationExpression)valueExpression38.tree) : null));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"PathExpression"),root_1);
adaptor.addChild(root_1,((pathExpression_scope)pathExpression_stack.peek()).fragments);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_valueExpression_in_pathExpression960);
valueExpression41=valueExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,valueExpression41.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,18,pathExpression_StartIndex);
}
pathExpression_stack.pop();
}
return retval;
}
