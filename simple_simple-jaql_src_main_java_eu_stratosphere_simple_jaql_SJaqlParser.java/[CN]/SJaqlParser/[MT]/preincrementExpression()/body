{
  SJaqlParser.preincrementExpression_return retval=new SJaqlParser.preincrementExpression_return();
  retval.start=input.LT(1);
  int preincrementExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token string_literal17=null;
  Token string_literal19=null;
  SJaqlParser.preincrementExpression_return preincrementExpression18=null;
  SJaqlParser.preincrementExpression_return preincrementExpression20=null;
  SJaqlParser.unaryExpression_return unaryExpression21=null;
  EvaluationExpression string_literal17_tree=null;
  EvaluationExpression string_literal19_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,12)) {
      return retval;
    }
    int alt14=3;
switch (input.LA(1)) {
case 42:
{
        alt14=1;
      }
    break;
case 43:
{
    alt14=2;
  }
break;
case VAR:
case ID:
case DECIMAL:
case STRING:
case INTEGER:
case UINT:
case 44:
case 45:
case 47:
case 51:
case 53:
case 54:
case 55:
case 57:
case 58:
{
alt14=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",14,0,input);
throw nvae;
}
switch (alt14) {
case 1:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal17=(Token)match(input,42,FOLLOW_42_in_preincrementExpression628);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal17_tree=(EvaluationExpression)adaptor.create(string_literal17);
adaptor.addChild(root_0,string_literal17_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression630);
preincrementExpression18=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression18.getTree());
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal19=(Token)match(input,43,FOLLOW_43_in_preincrementExpression635);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal19_tree=(EvaluationExpression)adaptor.create(string_literal19);
adaptor.addChild(root_0,string_literal19_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression637);
preincrementExpression20=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression20.getTree());
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_unaryExpression_in_preincrementExpression642);
unaryExpression21=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression21.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,12,preincrementExpression_StartIndex);
}
}
return retval;
}
