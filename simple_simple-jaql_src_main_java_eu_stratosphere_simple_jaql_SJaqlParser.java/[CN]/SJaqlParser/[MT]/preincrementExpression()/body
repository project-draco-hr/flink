{
  SJaqlParser.preincrementExpression_return retval=new SJaqlParser.preincrementExpression_return();
  retval.start=input.LT(1);
  int preincrementExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token string_literal17=null;
  Token string_literal19=null;
  SJaqlParser.preincrementExpression_return preincrementExpression18=null;
  SJaqlParser.preincrementExpression_return preincrementExpression20=null;
  SJaqlParser.unaryExpression_return unaryExpression21=null;
  EvaluationExpression string_literal17_tree=null;
  EvaluationExpression string_literal19_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,13)) {
      return retval;
    }
    int alt15=3;
switch (input.LA(1)) {
case 43:
{
        alt15=1;
      }
    break;
case 44:
{
    alt15=2;
  }
break;
case ID:
case VAR:
case DECIMAL:
case STRING:
case INTEGER:
case UINT:
case 45:
case 46:
case 48:
case 52:
case 54:
case 55:
case 56:
case 58:
case 59:
{
alt15=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",15,0,input);
throw nvae;
}
switch (alt15) {
case 1:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal17=(Token)match(input,43,FOLLOW_43_in_preincrementExpression636);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal17_tree=(EvaluationExpression)adaptor.create(string_literal17);
adaptor.addChild(root_0,string_literal17_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression638);
preincrementExpression18=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression18.getTree());
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal19=(Token)match(input,44,FOLLOW_44_in_preincrementExpression643);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal19_tree=(EvaluationExpression)adaptor.create(string_literal19);
adaptor.addChild(root_0,string_literal19_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression645);
preincrementExpression20=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression20.getTree());
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_unaryExpression_in_preincrementExpression650);
unaryExpression21=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression21.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,13,preincrementExpression_StartIndex);
}
}
return retval;
}
