{
  SJaqlParser.preincrementExpression_return retval=new SJaqlParser.preincrementExpression_return();
  retval.start=input.LT(1);
  int preincrementExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token string_literal33=null;
  Token string_literal35=null;
  SJaqlParser.preincrementExpression_return preincrementExpression34=null;
  SJaqlParser.preincrementExpression_return preincrementExpression36=null;
  SJaqlParser.unaryExpression_return unaryExpression37=null;
  EvaluationExpression string_literal33_tree=null;
  EvaluationExpression string_literal35_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,16)) {
      return retval;
    }
    int alt20=3;
switch (input.LA(1)) {
case 52:
{
        alt20=1;
      }
    break;
case 53:
{
    alt20=2;
  }
break;
case ID:
case VAR:
case STRING:
case DECIMAL:
case INTEGER:
case UINT:
case 30:
case 54:
case 55:
case 58:
case 60:
case 61:
case 62:
case 63:
{
alt20=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",20,0,input);
throw nvae;
}
switch (alt20) {
case 1:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal33=(Token)match(input,52,FOLLOW_52_in_preincrementExpression819);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal33_tree=(EvaluationExpression)adaptor.create(string_literal33);
adaptor.addChild(root_0,string_literal33_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression821);
preincrementExpression34=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression34.getTree());
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal35=(Token)match(input,53,FOLLOW_53_in_preincrementExpression826);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal35_tree=(EvaluationExpression)adaptor.create(string_literal35);
adaptor.addChild(root_0,string_literal35_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression828);
preincrementExpression36=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression36.getTree());
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_unaryExpression_in_preincrementExpression833);
unaryExpression37=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression37.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,16,preincrementExpression_StartIndex);
}
}
return retval;
}
