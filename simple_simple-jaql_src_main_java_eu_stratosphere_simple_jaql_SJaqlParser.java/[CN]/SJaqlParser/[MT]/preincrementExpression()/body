{
  SJaqlParser.preincrementExpression_return retval=new SJaqlParser.preincrementExpression_return();
  retval.start=input.LT(1);
  int preincrementExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token string_literal28=null;
  Token string_literal30=null;
  SJaqlParser.preincrementExpression_return preincrementExpression29=null;
  SJaqlParser.preincrementExpression_return preincrementExpression31=null;
  SJaqlParser.unaryExpression_return unaryExpression32=null;
  EvaluationExpression string_literal28_tree=null;
  EvaluationExpression string_literal30_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,15)) {
      return retval;
    }
    int alt17=3;
switch (input.LA(1)) {
case 49:
{
        alt17=1;
      }
    break;
case 50:
{
    alt17=2;
  }
break;
case ID:
case VAR:
case STRING:
case DECIMAL:
case INTEGER:
case UINT:
case 30:
case 51:
case 52:
case 55:
case 57:
case 58:
case 59:
case 61:
case 62:
{
alt17=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",17,0,input);
throw nvae;
}
switch (alt17) {
case 1:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal28=(Token)match(input,49,FOLLOW_49_in_preincrementExpression748);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal28_tree=(EvaluationExpression)adaptor.create(string_literal28);
adaptor.addChild(root_0,string_literal28_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression750);
preincrementExpression29=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression29.getTree());
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal30=(Token)match(input,50,FOLLOW_50_in_preincrementExpression755);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal30_tree=(EvaluationExpression)adaptor.create(string_literal30);
adaptor.addChild(root_0,string_literal30_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression757);
preincrementExpression31=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression31.getTree());
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_unaryExpression_in_preincrementExpression762);
unaryExpression32=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression32.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,15,preincrementExpression_StartIndex);
}
}
return retval;
}
