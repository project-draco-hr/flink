{
  SJaqlParser.preincrementExpression_return retval=new SJaqlParser.preincrementExpression_return();
  retval.start=input.LT(1);
  int preincrementExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token string_literal16=null;
  Token string_literal18=null;
  SJaqlParser.preincrementExpression_return preincrementExpression17=null;
  SJaqlParser.preincrementExpression_return preincrementExpression19=null;
  SJaqlParser.unaryExpression_return unaryExpression20=null;
  EvaluationExpression string_literal16_tree=null;
  EvaluationExpression string_literal18_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,11)) {
      return retval;
    }
    int alt14=3;
switch (input.LA(1)) {
case 42:
{
        alt14=1;
      }
    break;
case 43:
{
    alt14=2;
  }
break;
case VAR:
case ID:
case DECIMAL:
case STRING:
case INTEGER:
case UINT:
case 44:
case 45:
case 47:
case 51:
case 53:
case 54:
case 55:
case 57:
case 58:
{
alt14=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",14,0,input);
throw nvae;
}
switch (alt14) {
case 1:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal16=(Token)match(input,42,FOLLOW_42_in_preincrementExpression606);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal16_tree=(EvaluationExpression)adaptor.create(string_literal16);
adaptor.addChild(root_0,string_literal16_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression608);
preincrementExpression17=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression17.getTree());
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
string_literal18=(Token)match(input,43,FOLLOW_43_in_preincrementExpression613);
if (state.failed) return retval;
if (state.backtracking == 0) {
string_literal18_tree=(EvaluationExpression)adaptor.create(string_literal18);
adaptor.addChild(root_0,string_literal18_tree);
}
pushFollow(FOLLOW_preincrementExpression_in_preincrementExpression615);
preincrementExpression19=preincrementExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,preincrementExpression19.getTree());
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_unaryExpression_in_preincrementExpression620);
unaryExpression20=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression20.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,11,preincrementExpression_StartIndex);
}
}
return retval;
}
