{
  SJaqlParser.orExpression_return retval=new SJaqlParser.orExpression_return();
  retval.start=input.LT(1);
  int orExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token string_literal23=null;
  Token string_literal24=null;
  List list_exprs=null;
  RuleReturnScope exprs=null;
  EvaluationExpression string_literal23_tree=null;
  EvaluationExpression string_literal24_tree=null;
  RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
  RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
  RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,9)) {
      return retval;
    }
{
      pushFollow(FOLLOW_andExpression_in_orExpression361);
      exprs=andExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_andExpression.add(exprs.getTree());
      if (list_exprs == null)       list_exprs=new ArrayList();
      list_exprs.add(exprs.getTree());
      loop6:       do {
        int alt6=2;
        int LA6_0=input.LA(1);
        if ((LA6_0 == 34)) {
          int LA6_2=input.LA(2);
          if ((synpred9_SJaql())) {
            alt6=1;
          }
        }
 else         if ((LA6_0 == 35)) {
          int LA6_3=input.LA(2);
          if ((synpred9_SJaql())) {
            alt6=1;
          }
        }
switch (alt6) {
case 1:
{
            int alt5=2;
            int LA5_0=input.LA(1);
            if ((LA5_0 == 34)) {
              alt5=1;
            }
 else             if ((LA5_0 == 35)) {
              alt5=2;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("",5,0,input);
              throw nvae;
            }
switch (alt5) {
case 1:
{
                string_literal23=(Token)match(input,34,FOLLOW_34_in_orExpression365);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_34.add(string_literal23);
              }
            break;
case 2:
{
            string_literal24=(Token)match(input,35,FOLLOW_35_in_orExpression369);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_35.add(string_literal24);
          }
        break;
    }
    pushFollow(FOLLOW_andExpression_in_orExpression374);
    exprs=andExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_andExpression.add(exprs.getTree());
    if (list_exprs == null)     list_exprs=new ArrayList();
    list_exprs.add(exprs.getTree());
  }
break;
default :
break loop6;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (list_exprs.size() == 1) {
adaptor.addChild(root_0,list_exprs.get(0));
}
 else {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"OrExpression"),root_1);
adaptor.addChild(root_1,list_exprs.toArray(new EvaluationExpression[list_exprs.size()]));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,9,orExpression_StartIndex);
}
}
return retval;
}
