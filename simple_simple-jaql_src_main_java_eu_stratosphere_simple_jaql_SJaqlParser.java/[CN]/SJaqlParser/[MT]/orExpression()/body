{
  SJaqlParser.orExpression_return retval=new SJaqlParser.orExpression_return();
  retval.start=input.LT(1);
  int orExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token string_literal10=null;
  Token string_literal11=null;
  List list_exprs=null;
  RuleReturnScope exprs=null;
  EvaluationExpression string_literal10_tree=null;
  EvaluationExpression string_literal11_tree=null;
  RewriteRuleTokenStream stream_27=new RewriteRuleTokenStream(adaptor,"token 27");
  RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
  RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,6)) {
      return retval;
    }
{
      pushFollow(FOLLOW_andExpression_in_orExpression229);
      exprs=andExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_andExpression.add(exprs.getTree());
      if (list_exprs == null)       list_exprs=new ArrayList();
      list_exprs.add(exprs.getTree());
      loop4:       do {
        int alt4=2;
        int LA4_0=input.LA(1);
        if ((LA4_0 == 27)) {
          int LA4_2=input.LA(2);
          if ((synpred4_SJaql())) {
            alt4=1;
          }
        }
 else         if ((LA4_0 == 28)) {
          int LA4_3=input.LA(2);
          if ((synpred4_SJaql())) {
            alt4=1;
          }
        }
switch (alt4) {
case 1:
{
            int alt3=2;
            int LA3_0=input.LA(1);
            if ((LA3_0 == 27)) {
              alt3=1;
            }
 else             if ((LA3_0 == 28)) {
              alt3=2;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("",3,0,input);
              throw nvae;
            }
switch (alt3) {
case 1:
{
                string_literal10=(Token)match(input,27,FOLLOW_27_in_orExpression233);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_27.add(string_literal10);
              }
            break;
case 2:
{
            string_literal11=(Token)match(input,28,FOLLOW_28_in_orExpression237);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_28.add(string_literal11);
          }
        break;
    }
    pushFollow(FOLLOW_andExpression_in_orExpression242);
    exprs=andExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_andExpression.add(exprs.getTree());
    if (list_exprs == null)     list_exprs=new ArrayList();
    list_exprs.add(exprs.getTree());
  }
break;
default :
break loop4;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (list_exprs.size() == 1) {
adaptor.addChild(root_0,list_exprs.get(0));
}
 else {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"OrExpression"),root_1);
adaptor.addChild(root_1,list_exprs.toArray(new EvaluationExpression[list_exprs.size()]));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,6,orExpression_StartIndex);
}
}
return retval;
}
