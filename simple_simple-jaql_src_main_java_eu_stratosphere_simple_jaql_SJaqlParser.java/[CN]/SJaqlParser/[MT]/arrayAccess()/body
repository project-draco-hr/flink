{
  SJaqlParser.arrayAccess_return retval=new SJaqlParser.arrayAccess_return();
  retval.start=input.LT(1);
  int arrayAccess_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token pos=null;
  Token start=null;
  Token end=null;
  Token char_literal60=null;
  Token STAR61=null;
  Token char_literal62=null;
  Token char_literal63=null;
  Token char_literal64=null;
  Token char_literal65=null;
  Token char_literal66=null;
  Token char_literal67=null;
  EvaluationExpression pos_tree=null;
  EvaluationExpression start_tree=null;
  EvaluationExpression end_tree=null;
  EvaluationExpression char_literal60_tree=null;
  EvaluationExpression STAR61_tree=null;
  EvaluationExpression char_literal62_tree=null;
  EvaluationExpression char_literal63_tree=null;
  EvaluationExpression char_literal64_tree=null;
  EvaluationExpression char_literal65_tree=null;
  EvaluationExpression char_literal66_tree=null;
  EvaluationExpression char_literal67_tree=null;
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
  RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,23)) {
      return retval;
    }
    int alt31=3;
    int LA31_0=input.LA(1);
    if ((LA31_0 == 55)) {
switch (input.LA(2)) {
case STAR:
{
          alt31=1;
        }
      break;
case INTEGER:
{
      int LA31_3=input.LA(3);
      if ((LA31_3 == 56)) {
        alt31=2;
      }
 else       if ((LA31_3 == 50)) {
        alt31=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",31,3,input);
        throw nvae;
      }
    }
  break;
case UINT:
{
  int LA31_4=input.LA(3);
  if ((LA31_4 == 56)) {
    alt31=2;
  }
 else   if ((LA31_4 == 50)) {
    alt31=3;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",31,4,input);
    throw nvae;
  }
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",31,1,input);
throw nvae;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",31,0,input);
throw nvae;
}
switch (alt31) {
case 1:
{
char_literal60=(Token)match(input,55,FOLLOW_55_in_arrayAccess1183);
if (state.failed) return retval;
if (state.backtracking == 0) stream_55.add(char_literal60);
STAR61=(Token)match(input,STAR,FOLLOW_STAR_in_arrayAccess1185);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STAR.add(STAR61);
char_literal62=(Token)match(input,56,FOLLOW_56_in_arrayAccess1187);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal62);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
char_literal63=(Token)match(input,55,FOLLOW_55_in_arrayAccess1205);
if (state.failed) return retval;
if (state.backtracking == 0) stream_55.add(char_literal63);
int alt28=2;
int LA28_0=input.LA(1);
if ((LA28_0 == INTEGER)) {
alt28=1;
}
 else if ((LA28_0 == UINT)) {
alt28=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",28,0,input);
throw nvae;
}
switch (alt28) {
case 1:
{
pos=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1210);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(pos);
}
break;
case 2:
{
pos=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1216);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(pos);
}
break;
}
char_literal64=(Token)match(input,56,FOLLOW_56_in_arrayAccess1219);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal64);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((pos != null ? pos.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
char_literal65=(Token)match(input,55,FOLLOW_55_in_arrayAccess1237);
if (state.failed) return retval;
if (state.backtracking == 0) stream_55.add(char_literal65);
int alt29=2;
int LA29_0=input.LA(1);
if ((LA29_0 == INTEGER)) {
alt29=1;
}
 else if ((LA29_0 == UINT)) {
alt29=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",29,0,input);
throw nvae;
}
switch (alt29) {
case 1:
{
start=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1242);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(start);
}
break;
case 2:
{
start=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1248);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(start);
}
break;
}
char_literal66=(Token)match(input,50,FOLLOW_50_in_arrayAccess1251);
if (state.failed) return retval;
if (state.backtracking == 0) stream_50.add(char_literal66);
int alt30=2;
int LA30_0=input.LA(1);
if ((LA30_0 == INTEGER)) {
alt30=1;
}
 else if ((LA30_0 == UINT)) {
alt30=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",30,0,input);
throw nvae;
}
switch (alt30) {
case 1:
{
end=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1256);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(end);
}
break;
case 2:
{
end=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1262);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(end);
}
break;
}
char_literal67=(Token)match(input,56,FOLLOW_56_in_arrayAccess1265);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal67);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((start != null ? start.getText() : null)));
adaptor.addChild(root_1,Integer.valueOf((end != null ? end.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,23,arrayAccess_StartIndex);
}
}
return retval;
}
