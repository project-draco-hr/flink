{
  SJaqlParser.arrayAccess_return retval=new SJaqlParser.arrayAccess_return();
  retval.start=input.LT(1);
  int arrayAccess_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token pos=null;
  Token start=null;
  Token end=null;
  Token char_literal58=null;
  Token INTEGER59=null;
  Token UINT60=null;
  Token char_literal61=null;
  Token char_literal62=null;
  Token INTEGER63=null;
  Token UINT64=null;
  Token char_literal65=null;
  Token INTEGER66=null;
  Token UINT67=null;
  Token char_literal68=null;
  Token char_literal69=null;
  Token STAR70=null;
  Token char_literal71=null;
  EvaluationExpression pos_tree=null;
  EvaluationExpression start_tree=null;
  EvaluationExpression end_tree=null;
  EvaluationExpression char_literal58_tree=null;
  EvaluationExpression INTEGER59_tree=null;
  EvaluationExpression UINT60_tree=null;
  EvaluationExpression char_literal61_tree=null;
  EvaluationExpression char_literal62_tree=null;
  EvaluationExpression INTEGER63_tree=null;
  EvaluationExpression UINT64_tree=null;
  EvaluationExpression char_literal65_tree=null;
  EvaluationExpression INTEGER66_tree=null;
  EvaluationExpression UINT67_tree=null;
  EvaluationExpression char_literal68_tree=null;
  EvaluationExpression char_literal69_tree=null;
  EvaluationExpression STAR70_tree=null;
  EvaluationExpression char_literal71_tree=null;
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
  RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,21)) {
      return retval;
    }
    int alt28=3;
    int LA28_0=input.LA(1);
    if ((LA28_0 == 55)) {
switch (input.LA(2)) {
case STAR:
{
          alt28=3;
        }
      break;
case INTEGER:
{
      int LA28_3=input.LA(3);
      if ((LA28_3 == 56)) {
        alt28=1;
      }
 else       if ((LA28_3 == 50)) {
        alt28=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",28,3,input);
        throw nvae;
      }
    }
  break;
case UINT:
{
  int LA28_4=input.LA(3);
  if ((LA28_4 == 56)) {
    alt28=1;
  }
 else   if ((LA28_4 == 50)) {
    alt28=2;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",28,4,input);
    throw nvae;
  }
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",28,1,input);
throw nvae;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",28,0,input);
throw nvae;
}
switch (alt28) {
case 1:
{
char_literal58=(Token)match(input,55,FOLLOW_55_in_arrayAccess1019);
if (state.failed) return retval;
if (state.backtracking == 0) stream_55.add(char_literal58);
int alt25=2;
int LA25_0=input.LA(1);
if ((LA25_0 == INTEGER)) {
alt25=1;
}
 else if ((LA25_0 == UINT)) {
alt25=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",25,0,input);
throw nvae;
}
switch (alt25) {
case 1:
{
INTEGER59=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1024);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(INTEGER59);
}
break;
case 2:
{
UINT60=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1028);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(UINT60);
}
break;
}
char_literal61=(Token)match(input,56,FOLLOW_56_in_arrayAccess1031);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal61);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((pos != null ? pos.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
char_literal62=(Token)match(input,55,FOLLOW_55_in_arrayAccess1047);
if (state.failed) return retval;
if (state.backtracking == 0) stream_55.add(char_literal62);
int alt26=2;
int LA26_0=input.LA(1);
if ((LA26_0 == INTEGER)) {
alt26=1;
}
 else if ((LA26_0 == UINT)) {
alt26=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",26,0,input);
throw nvae;
}
switch (alt26) {
case 1:
{
INTEGER63=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1052);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(INTEGER63);
}
break;
case 2:
{
UINT64=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1056);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(UINT64);
}
break;
}
char_literal65=(Token)match(input,50,FOLLOW_50_in_arrayAccess1059);
if (state.failed) return retval;
if (state.backtracking == 0) stream_50.add(char_literal65);
int alt27=2;
int LA27_0=input.LA(1);
if ((LA27_0 == INTEGER)) {
alt27=1;
}
 else if ((LA27_0 == UINT)) {
alt27=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",27,0,input);
throw nvae;
}
switch (alt27) {
case 1:
{
INTEGER66=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1064);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(INTEGER66);
}
break;
case 2:
{
UINT67=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1068);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(UINT67);
}
break;
}
char_literal68=(Token)match(input,56,FOLLOW_56_in_arrayAccess1071);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal68);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((start != null ? start.getText() : null)));
adaptor.addChild(root_1,Integer.valueOf((end != null ? end.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
char_literal69=(Token)match(input,55,FOLLOW_55_in_arrayAccess1089);
if (state.failed) return retval;
if (state.backtracking == 0) stream_55.add(char_literal69);
STAR70=(Token)match(input,STAR,FOLLOW_STAR_in_arrayAccess1091);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STAR.add(STAR70);
char_literal71=(Token)match(input,56,FOLLOW_56_in_arrayAccess1093);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal71);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,21,arrayAccess_StartIndex);
}
}
return retval;
}
