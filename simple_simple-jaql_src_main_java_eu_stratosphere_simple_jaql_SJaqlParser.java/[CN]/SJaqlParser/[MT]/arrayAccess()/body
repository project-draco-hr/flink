{
  SJaqlParser.arrayAccess_return retval=new SJaqlParser.arrayAccess_return();
  retval.start=input.LT(1);
  int arrayAccess_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token pos=null;
  Token start=null;
  Token end=null;
  Token char_literal72=null;
  Token STAR73=null;
  Token char_literal74=null;
  Token char_literal75=null;
  Token char_literal76=null;
  Token char_literal77=null;
  Token char_literal78=null;
  Token char_literal79=null;
  EvaluationExpression pos_tree=null;
  EvaluationExpression start_tree=null;
  EvaluationExpression end_tree=null;
  EvaluationExpression char_literal72_tree=null;
  EvaluationExpression STAR73_tree=null;
  EvaluationExpression char_literal74_tree=null;
  EvaluationExpression char_literal75_tree=null;
  EvaluationExpression char_literal76_tree=null;
  EvaluationExpression char_literal77_tree=null;
  EvaluationExpression char_literal78_tree=null;
  EvaluationExpression char_literal79_tree=null;
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,26)) {
      return retval;
    }
    int alt34=3;
    int LA34_0=input.LA(1);
    if ((LA34_0 == 59)) {
switch (input.LA(2)) {
case STAR:
{
          alt34=1;
        }
      break;
case INTEGER:
{
      int LA34_3=input.LA(3);
      if ((LA34_3 == 60)) {
        alt34=2;
      }
 else       if ((LA34_3 == 54)) {
        alt34=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",34,3,input);
        throw nvae;
      }
    }
  break;
case UINT:
{
  int LA34_4=input.LA(3);
  if ((LA34_4 == 60)) {
    alt34=2;
  }
 else   if ((LA34_4 == 54)) {
    alt34=3;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",34,4,input);
    throw nvae;
  }
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",34,1,input);
throw nvae;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",34,0,input);
throw nvae;
}
switch (alt34) {
case 1:
{
char_literal72=(Token)match(input,59,FOLLOW_59_in_arrayAccess1311);
if (state.failed) return retval;
if (state.backtracking == 0) stream_59.add(char_literal72);
STAR73=(Token)match(input,STAR,FOLLOW_STAR_in_arrayAccess1313);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STAR.add(STAR73);
char_literal74=(Token)match(input,60,FOLLOW_60_in_arrayAccess1315);
if (state.failed) return retval;
if (state.backtracking == 0) stream_60.add(char_literal74);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
char_literal75=(Token)match(input,59,FOLLOW_59_in_arrayAccess1333);
if (state.failed) return retval;
if (state.backtracking == 0) stream_59.add(char_literal75);
int alt31=2;
int LA31_0=input.LA(1);
if ((LA31_0 == INTEGER)) {
alt31=1;
}
 else if ((LA31_0 == UINT)) {
alt31=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",31,0,input);
throw nvae;
}
switch (alt31) {
case 1:
{
pos=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1338);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(pos);
}
break;
case 2:
{
pos=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1344);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(pos);
}
break;
}
char_literal76=(Token)match(input,60,FOLLOW_60_in_arrayAccess1347);
if (state.failed) return retval;
if (state.backtracking == 0) stream_60.add(char_literal76);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((pos != null ? pos.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 3:
{
char_literal77=(Token)match(input,59,FOLLOW_59_in_arrayAccess1365);
if (state.failed) return retval;
if (state.backtracking == 0) stream_59.add(char_literal77);
int alt32=2;
int LA32_0=input.LA(1);
if ((LA32_0 == INTEGER)) {
alt32=1;
}
 else if ((LA32_0 == UINT)) {
alt32=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",32,0,input);
throw nvae;
}
switch (alt32) {
case 1:
{
start=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1370);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(start);
}
break;
case 2:
{
start=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1376);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(start);
}
break;
}
char_literal78=(Token)match(input,54,FOLLOW_54_in_arrayAccess1379);
if (state.failed) return retval;
if (state.backtracking == 0) stream_54.add(char_literal78);
int alt33=2;
int LA33_0=input.LA(1);
if ((LA33_0 == INTEGER)) {
alt33=1;
}
 else if ((LA33_0 == UINT)) {
alt33=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",33,0,input);
throw nvae;
}
switch (alt33) {
case 1:
{
end=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess1384);
if (state.failed) return retval;
if (state.backtracking == 0) stream_INTEGER.add(end);
}
break;
case 2:
{
end=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess1390);
if (state.failed) return retval;
if (state.backtracking == 0) stream_UINT.add(end);
}
break;
}
char_literal79=(Token)match(input,60,FOLLOW_60_in_arrayAccess1393);
if (state.failed) return retval;
if (state.backtracking == 0) stream_60.add(char_literal79);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayAccess"),root_1);
adaptor.addChild(root_1,Integer.valueOf((start != null ? start.getText() : null)));
adaptor.addChild(root_1,Integer.valueOf((end != null ? end.getText() : null)));
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,26,arrayAccess_StartIndex);
}
}
return retval;
}
