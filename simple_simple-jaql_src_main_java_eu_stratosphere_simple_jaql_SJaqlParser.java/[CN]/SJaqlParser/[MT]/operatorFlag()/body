{
  operatorFlag_stack.push(new operatorFlag_scope());
  SJaqlParser.operatorFlag_return retval=new SJaqlParser.operatorFlag_return();
  retval.start=input.LT(1);
  int operatorFlag_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token moreName=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression moreName_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,36)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_operatorFlag1810);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      if (state.backtracking == 0) {
        ((operatorFlag_scope)operatorFlag_stack.peek()).flagName=(name != null ? name.getText() : null);
      }
      int alt49=2;
      int LA49_0=input.LA(1);
      if ((LA49_0 == ID)) {
        int LA49_1=input.LA(2);
        if (((synpred77_SJaql() && (!((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.hasFlag(((operatorFlag_scope)operatorFlag_stack.peek()).flagName))))) {
          alt49=1;
        }
      }
switch (alt49) {
case 1:
{
          if (!((!((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.hasFlag(((operatorFlag_scope)operatorFlag_stack.peek()).flagName)))) {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            throw new FailedPredicateException(input,"operatorFlag","!$genericOperator::operatorInfo.hasFlag($operatorFlag::flagName)");
          }
          moreName=(Token)match(input,ID,FOLLOW_ID_in_operatorFlag1820);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(moreName);
          if (state.backtracking == 0) {
            ((operatorFlag_scope)operatorFlag_stack.peek()).flagName=(name != null ? name.getText() : null) + " " + (moreName != null ? moreName.getText() : null);
          }
        }
      break;
  }
  if (state.backtracking == 0) {
    setPropertySafely(((genericOperator_scope)genericOperator_stack.peek()).operatorInfo,((operator_scope)operator_stack.peek()).result,((operatorFlag_scope)operatorFlag_stack.peek()).flagName,true,name);
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(EvaluationExpression)adaptor.nil();
{
      root_0=null;
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
  memoize(input,36,operatorFlag_StartIndex);
}
operatorFlag_stack.pop();
}
return retval;
}
