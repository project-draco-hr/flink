{
  SJaqlParser.parenthesesExpression_return retval=new SJaqlParser.parenthesesExpression_return();
  retval.start=input.LT(1);
  int parenthesesExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal36=null;
  Token char_literal38=null;
  SJaqlParser.expression_return expression37=null;
  EvaluationExpression char_literal36_tree=null;
  EvaluationExpression char_literal38_tree=null;
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,16)) {
      return retval;
    }
{
{
        char_literal36=(Token)match(input,47,FOLLOW_47_in_parenthesesExpression763);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_47.add(char_literal36);
        pushFollow(FOLLOW_expression_in_parenthesesExpression765);
        expression37=expression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_expression.add(expression37.getTree());
        char_literal38=(Token)match(input,48,FOLLOW_48_in_parenthesesExpression767);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_48.add(char_literal38);
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          adaptor.addChild(root_0,stream_expression.nextTree());
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,16,parenthesesExpression_StartIndex);
    }
  }
  return retval;
}
