{
  SJaqlParser.assignment_return retval=new SJaqlParser.assignment_return();
  retval.start=input.LT(1);
  int assignment_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token target=null;
  Token char_literal7=null;
  SJaqlParser.operator_return source=null;
  EvaluationExpression target_tree=null;
  EvaluationExpression char_literal7_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_26=new RewriteRuleTokenStream(adaptor,"token 26");
  RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,3)) {
      return retval;
    }
{
      target=(Token)match(input,VAR,FOLLOW_VAR_in_assignment166);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(target);
      char_literal7=(Token)match(input,26,FOLLOW_26_in_assignment168);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_26.add(char_literal7);
      pushFollow(FOLLOW_operator_in_assignment172);
      source=operator();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_operator.add(source.getTree());
      if (state.backtracking == 0) {
        variables.put((target != null ? target.getText() : null),(source != null ? source.op : null));
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          root_0=null;
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,3,assignment_StartIndex);
    }
  }
  return retval;
}
