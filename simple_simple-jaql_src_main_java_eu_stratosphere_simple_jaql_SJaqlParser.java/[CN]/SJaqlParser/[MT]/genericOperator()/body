{
  genericOperator_stack.push(new genericOperator_scope());
  SJaqlParser.genericOperator_return retval=new SJaqlParser.genericOperator_return();
  retval.start=input.LT(1);
  int genericOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token char_literal96=null;
  SJaqlParser.operatorFlag_return operatorFlag94=null;
  SJaqlParser.input_return input95=null;
  SJaqlParser.input_return input97=null;
  SJaqlParser.operatorOption_return operatorOption98=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal96_tree=null;
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_operatorOption=new RewriteRuleSubtreeStream(adaptor,"rule operatorOption");
  RewriteRuleSubtreeStream stream_input=new RewriteRuleSubtreeStream(adaptor,"rule input");
  RewriteRuleSubtreeStream stream_operatorFlag=new RewriteRuleSubtreeStream(adaptor,"rule operatorFlag");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,31)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1582);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      if (state.backtracking == 0) {
        ((genericOperator_scope)genericOperator_stack.peek()).operatorInfo=findOperatorGreedily(name);
      }
      if (state.backtracking == 0) {
        if (((genericOperator_scope)genericOperator_stack.peek()).operatorInfo == null)         throw new IllegalArgumentException("Unknown operator: " + (name != null ? name.getText() : null),new RecognitionException(name.getInputStream()));
        ((operator_scope)operator_stack.peek()).result=((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.newInstance();
      }
      loop42:       do {
        int alt42=2;
        int LA42_0=input.LA(1);
        if ((LA42_0 == ID)) {
          alt42=1;
        }
switch (alt42) {
case 1:
{
            pushFollow(FOLLOW_operatorFlag_in_genericOperator1589);
            operatorFlag94=operatorFlag();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_operatorFlag.add(operatorFlag94.getTree());
          }
        break;
default :
      break loop42;
  }
}
 while (true);
pushFollow(FOLLOW_input_in_genericOperator1592);
input95=input();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_input.add(input95.getTree());
loop43: do {
  int alt43=2;
  int LA43_0=input.LA(1);
  if ((LA43_0 == 31)) {
    int LA43_2=input.LA(2);
    if ((synpred67_SJaql())) {
      alt43=1;
    }
  }
switch (alt43) {
case 1:
{
      char_literal96=(Token)match(input,31,FOLLOW_31_in_genericOperator1595);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_31.add(char_literal96);
      pushFollow(FOLLOW_input_in_genericOperator1597);
      input97=input();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_input.add(input97.getTree());
    }
  break;
default :
break loop43;
}
}
 while (true);
loop44: do {
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == ID)) {
int LA44_2=input.LA(2);
if ((synpred68_SJaql())) {
alt44=1;
}
}
switch (alt44) {
case 1:
{
pushFollow(FOLLOW_operatorOption_in_genericOperator1602);
operatorOption98=operatorOption();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_operatorOption.add(operatorOption98.getTree());
}
break;
default :
break loop44;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,31,genericOperator_StartIndex);
}
genericOperator_stack.pop();
}
return retval;
}
