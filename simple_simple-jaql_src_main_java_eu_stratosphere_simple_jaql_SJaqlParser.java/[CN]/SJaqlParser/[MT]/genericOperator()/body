{
  genericOperator_stack.push(new genericOperator_scope());
  SJaqlParser.genericOperator_return retval=new SJaqlParser.genericOperator_return();
  retval.start=input.LT(1);
  int genericOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token moreName=null;
  Token char_literal84=null;
  SJaqlParser.operatorFlag_return operatorFlag82=null;
  SJaqlParser.input_return input83=null;
  SJaqlParser.input_return input85=null;
  SJaqlParser.operatorOption_return operatorOption86=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression moreName_tree=null;
  EvaluationExpression char_literal84_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_operatorOption=new RewriteRuleSubtreeStream(adaptor,"rule operatorOption");
  RewriteRuleSubtreeStream stream_input=new RewriteRuleSubtreeStream(adaptor,"rule input");
  RewriteRuleSubtreeStream stream_operatorFlag=new RewriteRuleSubtreeStream(adaptor,"rule operatorFlag");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,28)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1454);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      if (state.backtracking == 0) {
        ((genericOperator_scope)genericOperator_stack.peek()).operatorInfo=operatorFactory.getOperatorInfo((name != null ? name.getText() : null));
      }
      int alt39=2;
      int LA39_0=input.LA(1);
      if ((LA39_0 == ID)) {
        int LA39_1=input.LA(2);
        if (((synpred60_SJaql() && (((genericOperator_scope)genericOperator_stack.peek()).operatorInfo == null)))) {
          alt39=1;
        }
      }
switch (alt39) {
case 1:
{
          if (!((((genericOperator_scope)genericOperator_stack.peek()).operatorInfo == null))) {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            throw new FailedPredicateException(input,"genericOperator","$genericOperator::operatorInfo == null");
          }
          moreName=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1463);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(moreName);
          if (state.backtracking == 0) {
            ((genericOperator_scope)genericOperator_stack.peek()).operatorInfo=operatorFactory.getOperatorInfo((name != null ? name.getText() : null) + " " + (moreName != null ? moreName.getText() : null));
          }
        }
      break;
  }
  if (state.backtracking == 0) {
    if (((genericOperator_scope)genericOperator_stack.peek()).operatorInfo == null)     throw new IllegalArgumentException("Unknown operator:",new RecognitionException(name.getInputStream()));
    ((operator_scope)operator_stack.peek()).result=((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.newInstance();
  }
  loop40:   do {
    int alt40=2;
    int LA40_0=input.LA(1);
    if ((LA40_0 == ID)) {
      alt40=1;
    }
switch (alt40) {
case 1:
{
        pushFollow(FOLLOW_operatorFlag_in_genericOperator1474);
        operatorFlag82=operatorFlag();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_operatorFlag.add(operatorFlag82.getTree());
      }
    break;
default :
  break loop40;
}
}
 while (true);
pushFollow(FOLLOW_input_in_genericOperator1477);
input83=input();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_input.add(input83.getTree());
loop41: do {
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == 49)) {
int LA41_2=input.LA(2);
if ((synpred62_SJaql())) {
  alt41=1;
}
}
switch (alt41) {
case 1:
{
  char_literal84=(Token)match(input,49,FOLLOW_49_in_genericOperator1480);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_49.add(char_literal84);
  pushFollow(FOLLOW_input_in_genericOperator1482);
  input85=input();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_input.add(input85.getTree());
}
break;
default :
break loop41;
}
}
 while (true);
loop42: do {
int alt42=2;
int LA42_0=input.LA(1);
if ((LA42_0 == ID)) {
int LA42_2=input.LA(2);
if ((synpred63_SJaql())) {
alt42=1;
}
}
switch (alt42) {
case 1:
{
pushFollow(FOLLOW_operatorOption_in_genericOperator1487);
operatorOption86=operatorOption();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_operatorOption.add(operatorOption86.getTree());
}
break;
default :
break loop42;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,28,genericOperator_StartIndex);
}
genericOperator_stack.pop();
}
return retval;
}
