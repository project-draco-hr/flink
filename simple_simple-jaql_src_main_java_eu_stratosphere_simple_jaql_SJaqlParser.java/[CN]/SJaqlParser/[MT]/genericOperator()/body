{
  genericOperator_stack.push(new genericOperator_scope());
  SJaqlParser.genericOperator_return retval=new SJaqlParser.genericOperator_return();
  retval.start=input.LT(1);
  int genericOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token moreName=null;
  Token char_literal80=null;
  SJaqlParser.input_return input79=null;
  SJaqlParser.input_return input81=null;
  SJaqlParser.operatorOption_return operatorOption82=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression moreName_tree=null;
  EvaluationExpression char_literal80_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_operatorOption=new RewriteRuleSubtreeStream(adaptor,"rule operatorOption");
  RewriteRuleSubtreeStream stream_input=new RewriteRuleSubtreeStream(adaptor,"rule input");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,26)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1337);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      if (state.backtracking == 0) {
        ((genericOperator_scope)genericOperator_stack.peek()).operatorInfo=operatorFactory.getOperatorInfo((name != null ? name.getText() : null));
      }
      int alt36=2;
      int LA36_0=input.LA(1);
      if ((LA36_0 == ID)) {
        alt36=1;
      }
switch (alt36) {
case 1:
{
          if (!((((genericOperator_scope)genericOperator_stack.peek()).operatorInfo == null))) {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            throw new FailedPredicateException(input,"genericOperator","$genericOperator::operatorInfo == null");
          }
          moreName=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1348);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(moreName);
          if (state.backtracking == 0) {
            ((genericOperator_scope)genericOperator_stack.peek()).operatorInfo=operatorFactory.getOperatorInfo((name != null ? name.getText() : null) + " " + (moreName != null ? moreName.getText() : null));
          }
        }
      break;
  }
  if (state.backtracking == 0) {
    if (((genericOperator_scope)genericOperator_stack.peek()).operatorInfo == null)     throw new IllegalArgumentException("Unknown operator:",new RecognitionException(name.getInputStream()));
    ((operator_scope)operator_stack.peek()).result=((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.newInstance();
  }
  pushFollow(FOLLOW_input_in_genericOperator1360);
  input79=input();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_input.add(input79.getTree());
  loop37:   do {
    int alt37=2;
    int LA37_0=input.LA(1);
    if ((LA37_0 == 49)) {
      int LA37_2=input.LA(2);
      if ((synpred57_SJaql())) {
        alt37=1;
      }
    }
switch (alt37) {
case 1:
{
        char_literal80=(Token)match(input,49,FOLLOW_49_in_genericOperator1363);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_49.add(char_literal80);
        pushFollow(FOLLOW_input_in_genericOperator1365);
        input81=input();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_input.add(input81.getTree());
      }
    break;
default :
  break loop37;
}
}
 while (true);
loop38: do {
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == ID)) {
int LA38_2=input.LA(2);
if ((synpred58_SJaql())) {
  alt38=1;
}
}
switch (alt38) {
case 1:
{
  pushFollow(FOLLOW_operatorOption_in_genericOperator1370);
  operatorOption82=operatorOption();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_operatorOption.add(operatorOption82.getTree());
}
break;
default :
break loop38;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,26,genericOperator_StartIndex);
}
genericOperator_stack.pop();
}
return retval;
}
