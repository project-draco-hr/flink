{
  genericOperator_stack.push(new genericOperator_scope());
  SJaqlParser.genericOperator_return retval=new SJaqlParser.genericOperator_return();
  retval.start=input.LT(1);
  int genericOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token char_literal87=null;
  SJaqlParser.input_return input86=null;
  SJaqlParser.input_return input88=null;
  SJaqlParser.operatorOption_return operatorOption89=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal87_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_operatorOption=new RewriteRuleSubtreeStream(adaptor,"rule operatorOption");
  RewriteRuleSubtreeStream stream_input=new RewriteRuleSubtreeStream(adaptor,"rule input");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,26)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_genericOperator1275);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      pushFollow(FOLLOW_input_in_genericOperator1277);
      input86=input();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_input.add(input86.getTree());
      loop36:       do {
        int alt36=2;
        int LA36_0=input.LA(1);
        if ((LA36_0 == 49)) {
          int LA36_2=input.LA(2);
          if ((LA36_2 == VAR)) {
            int LA36_3=input.LA(3);
            if ((synpred56_SJaql())) {
              alt36=1;
            }
          }
        }
switch (alt36) {
case 1:
{
            char_literal87=(Token)match(input,49,FOLLOW_49_in_genericOperator1280);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_49.add(char_literal87);
            pushFollow(FOLLOW_input_in_genericOperator1282);
            input88=input();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_input.add(input88.getTree());
          }
        break;
default :
      break loop36;
  }
}
 while (true);
if (state.backtracking == 0) {
  OperatorFactory.OperatorInfo info=operatorFactory.getOperatorInfo((name != null ? name.getText() : null));
  if (info == null)   throw new IllegalArgumentException("Unknown operator:",new RecognitionException(name.getInputStream()));
  ((operator_scope)operator_stack.peek()).result=info.newInstance(((operator_scope)operator_stack.peek()).inputOperators);
  if (((operator_scope)operator_stack.peek()).aliasNames.size() == 1 && ((operator_scope)operator_stack.peek()).aliasNames.get(0).equals("$0"))   ((operator_scope)operator_stack.peek()).aliasNames.set(0,"$");
  ((genericOperator_scope)genericOperator_stack.peek()).operatorInfo=info;
}
loop37: do {
  int alt37=2;
  int LA37_0=input.LA(1);
  if ((LA37_0 == ID)) {
    int LA37_2=input.LA(2);
    if ((synpred57_SJaql())) {
      alt37=1;
    }
  }
switch (alt37) {
case 1:
{
      pushFollow(FOLLOW_operatorOption_in_genericOperator1289);
      operatorOption89=operatorOption();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_operatorOption.add(operatorOption89.getTree());
    }
  break;
default :
break loop37;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,26,genericOperator_StartIndex);
}
genericOperator_stack.pop();
}
return retval;
}
