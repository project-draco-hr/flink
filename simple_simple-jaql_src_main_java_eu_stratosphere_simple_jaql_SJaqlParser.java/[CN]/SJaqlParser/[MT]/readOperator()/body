{
  SJaqlParser.readOperator_return retval=new SJaqlParser.readOperator_return();
  retval.start=input.LT(1);
  int readOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token loc=null;
  Token file=null;
  Token string_literal87=null;
  Token char_literal88=null;
  Token char_literal89=null;
  EvaluationExpression loc_tree=null;
  EvaluationExpression file_tree=null;
  EvaluationExpression string_literal87_tree=null;
  EvaluationExpression char_literal88_tree=null;
  EvaluationExpression char_literal89_tree=null;
  RewriteRuleTokenStream stream_30=new RewriteRuleTokenStream(adaptor,"token 30");
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,29)) {
      return retval;
    }
{
      string_literal87=(Token)match(input,61,FOLLOW_61_in_readOperator1493);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_61.add(string_literal87);
      int alt39=2;
      int LA39_0=input.LA(1);
      if ((LA39_0 == ID)) {
        int LA39_1=input.LA(2);
        if ((LA39_1 == 30)) {
          alt39=2;
        }
 else         if ((LA39_1 == STRING)) {
          alt39=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",39,1,input);
          throw nvae;
        }
      }
 else       if ((LA39_0 == STRING)) {
        alt39=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",39,0,input);
        throw nvae;
      }
switch (alt39) {
case 1:
{
          int alt38=2;
          int LA38_0=input.LA(1);
          if ((LA38_0 == ID)) {
            alt38=1;
          }
switch (alt38) {
case 1:
{
              loc=(Token)match(input,ID,FOLLOW_ID_in_readOperator1498);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_ID.add(loc);
            }
          break;
      }
      file=(Token)match(input,STRING,FOLLOW_STRING_in_readOperator1503);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(file);
    }
  break;
case 2:
{
  loc=(Token)match(input,ID,FOLLOW_ID_in_readOperator1509);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(loc);
  char_literal88=(Token)match(input,30,FOLLOW_30_in_readOperator1511);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_30.add(char_literal88);
  file=(Token)match(input,STRING,FOLLOW_STRING_in_readOperator1515);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_STRING.add(file);
  char_literal89=(Token)match(input,32,FOLLOW_32_in_readOperator1517);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_32.add(char_literal89);
}
break;
}
if (state.backtracking == 0) {
((operator_scope)operator_stack.peek()).result=new Source(JsonInputFormat.class,(file != null ? file.getText() : null));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,29,readOperator_StartIndex);
}
}
return retval;
}
