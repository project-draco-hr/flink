{
  SJaqlParser.readOperator_return retval=new SJaqlParser.readOperator_return();
  retval.start=input.LT(1);
  int readOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token loc=null;
  Token file=null;
  Token string_literal75=null;
  Token char_literal76=null;
  Token char_literal77=null;
  EvaluationExpression loc_tree=null;
  EvaluationExpression file_tree=null;
  EvaluationExpression string_literal75_tree=null;
  EvaluationExpression char_literal76_tree=null;
  EvaluationExpression char_literal77_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,27)) {
      return retval;
    }
{
      string_literal75=(Token)match(input,58,FOLLOW_58_in_readOperator1373);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_58.add(string_literal75);
      int alt37=2;
      int LA37_0=input.LA(1);
      if ((LA37_0 == ID)) {
        int LA37_1=input.LA(2);
        if ((LA37_1 == 48)) {
          alt37=2;
        }
 else         if ((LA37_1 == STRING)) {
          alt37=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",37,1,input);
          throw nvae;
        }
      }
 else       if ((LA37_0 == STRING)) {
        alt37=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",37,0,input);
        throw nvae;
      }
switch (alt37) {
case 1:
{
          int alt36=2;
          int LA36_0=input.LA(1);
          if ((LA36_0 == ID)) {
            alt36=1;
          }
switch (alt36) {
case 1:
{
              loc=(Token)match(input,ID,FOLLOW_ID_in_readOperator1378);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_ID.add(loc);
            }
          break;
      }
      file=(Token)match(input,STRING,FOLLOW_STRING_in_readOperator1383);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(file);
    }
  break;
case 2:
{
  loc=(Token)match(input,ID,FOLLOW_ID_in_readOperator1389);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(loc);
  char_literal76=(Token)match(input,48,FOLLOW_48_in_readOperator1391);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_48.add(char_literal76);
  file=(Token)match(input,STRING,FOLLOW_STRING_in_readOperator1395);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_STRING.add(file);
  char_literal77=(Token)match(input,49,FOLLOW_49_in_readOperator1397);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_49.add(char_literal77);
}
break;
}
if (state.backtracking == 0) {
((operator_scope)operator_stack.peek()).result=new Source(JsonInputFormat.class,(file != null ? file.getText() : null));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,27,readOperator_StartIndex);
}
}
return retval;
}
