{
  SJaqlParser.readOperator_return retval=new SJaqlParser.readOperator_return();
  retval.start=input.LT(1);
  int readOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token loc=null;
  Token file=null;
  Token string_literal79=null;
  Token char_literal80=null;
  Token char_literal81=null;
  EvaluationExpression loc_tree=null;
  EvaluationExpression file_tree=null;
  EvaluationExpression string_literal79_tree=null;
  EvaluationExpression char_literal80_tree=null;
  EvaluationExpression char_literal81_tree=null;
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,24)) {
      return retval;
    }
{
      string_literal79=(Token)match(input,57,FOLLOW_57_in_readOperator1186);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_57.add(string_literal79);
      int alt33=2;
      int LA33_0=input.LA(1);
      if ((LA33_0 == ID)) {
        int LA33_1=input.LA(2);
        if ((LA33_1 == 47)) {
          alt33=2;
        }
 else         if ((LA33_1 == STRING)) {
          alt33=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",33,1,input);
          throw nvae;
        }
      }
 else       if ((LA33_0 == STRING)) {
        alt33=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",33,0,input);
        throw nvae;
      }
switch (alt33) {
case 1:
{
          int alt32=2;
          int LA32_0=input.LA(1);
          if ((LA32_0 == ID)) {
            alt32=1;
          }
switch (alt32) {
case 1:
{
              loc=(Token)match(input,ID,FOLLOW_ID_in_readOperator1191);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_ID.add(loc);
            }
          break;
      }
      file=(Token)match(input,STRING,FOLLOW_STRING_in_readOperator1196);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(file);
    }
  break;
case 2:
{
  loc=(Token)match(input,ID,FOLLOW_ID_in_readOperator1202);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(loc);
  char_literal80=(Token)match(input,47,FOLLOW_47_in_readOperator1204);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_47.add(char_literal80);
  file=(Token)match(input,STRING,FOLLOW_STRING_in_readOperator1208);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_STRING.add(file);
  char_literal81=(Token)match(input,48,FOLLOW_48_in_readOperator1210);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_48.add(char_literal81);
}
break;
}
if (state.backtracking == 0) {
((operator_scope)operator_stack.peek()).result=new Source(JsonInputFormat.class,(file != null ? file.getText() : null));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,24,readOperator_StartIndex);
}
}
return retval;
}
