{
  SJaqlParser.generalPathExpression_return retval=new SJaqlParser.generalPathExpression_return();
  retval.start=input.LT(1);
  int generalPathExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  SJaqlParser.contextAwarePathExpression_return contextAwarePathExpression42=null;
  SJaqlParser.pathExpression_return pathExpression43=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,19)) {
      return retval;
    }
{
      root_0=(EvaluationExpression)adaptor.nil();
      int alt22=2;
      int LA22_0=input.LA(1);
      if ((LA22_0 == ID)) {
        int LA22_1=input.LA(2);
        if (((synpred33_SJaql() && (((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null)))) {
          alt22=1;
        }
 else         if ((true)) {
          alt22=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",22,1,input);
          throw nvae;
        }
      }
 else       if (((LA22_0 >= VAR && LA22_0 <= STRING) || (LA22_0 >= DECIMAL && LA22_0 <= UINT) || LA22_0 == 30 || LA22_0 == 58 || (LA22_0 >= 60 && LA22_0 <= 63) || (LA22_0 >= 65 && LA22_0 <= 66))) {
        alt22=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",22,0,input);
        throw nvae;
      }
switch (alt22) {
case 1:
{
{
            if (!((((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context != null))) {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              throw new FailedPredicateException(input,"generalPathExpression","$contextAwareExpression::context != null");
            }
            pushFollow(FOLLOW_contextAwarePathExpression_in_generalPathExpression915);
            contextAwarePathExpression42=contextAwarePathExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,contextAwarePathExpression42.getTree());
          }
        }
      break;
case 2:
{
      pushFollow(FOLLOW_pathExpression_in_generalPathExpression920);
      pathExpression43=pathExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,pathExpression43.getTree());
    }
  break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,19,generalPathExpression_StartIndex);
}
}
return retval;
}
