{
  SJaqlParser.generalPathExpression_return retval=new SJaqlParser.generalPathExpression_return();
  retval.start=input.LT(1);
  int generalPathExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  SJaqlParser.valueExpression_return value=null;
  SJaqlParser.pathExpression_return path=null;
  SJaqlParser.valueExpression_return valueExpression41=null;
  RewriteRuleSubtreeStream stream_valueExpression=new RewriteRuleSubtreeStream(adaptor,"rule valueExpression");
  RewriteRuleSubtreeStream stream_pathExpression=new RewriteRuleSubtreeStream(adaptor,"rule pathExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,19)) {
      return retval;
    }
    int alt23=2;
    alt23=dfa23.predict(input);
switch (alt23) {
case 1:
{
        pushFollow(FOLLOW_valueExpression_in_generalPathExpression917);
        value=valueExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_valueExpression.add(value.getTree());
        pushFollow(FOLLOW_pathExpression_in_generalPathExpression921);
        path=pathExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_pathExpression.add(path.getTree());
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(EvaluationExpression)adaptor.nil();
{
            adaptor.addChild(root_0,PathExpression.wrapIfNecessary((value != null ? ((EvaluationExpression)value.tree) : null),(path != null ? ((EvaluationExpression)path.tree) : null)));
          }
          retval.tree=root_0;
        }
      }
    break;
case 2:
{
    root_0=(EvaluationExpression)adaptor.nil();
    pushFollow(FOLLOW_valueExpression_in_generalPathExpression931);
    valueExpression41=valueExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,valueExpression41.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,19,generalPathExpression_StartIndex);
}
}
return retval;
}
