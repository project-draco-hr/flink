{
  SJaqlParser.elementExpression_return retval=new SJaqlParser.elementExpression_return();
  retval.start=input.LT(1);
  int elementExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token not=null;
  Token string_literal27=null;
  SJaqlParser.comparisonExpression_return elem=null;
  SJaqlParser.comparisonExpression_return set=null;
  EvaluationExpression not_tree=null;
  EvaluationExpression string_literal27_tree=null;
  RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  RewriteRuleSubtreeStream stream_comparisonExpression=new RewriteRuleSubtreeStream(adaptor,"rule comparisonExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,11)) {
      return retval;
    }
{
      pushFollow(FOLLOW_comparisonExpression_in_elementExpression455);
      elem=comparisonExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_comparisonExpression.add(elem.getTree());
      int alt10=2;
      int LA10_0=input.LA(1);
      if ((LA10_0 == 38)) {
        int LA10_1=input.LA(2);
        if ((synpred13_SJaql())) {
          alt10=1;
        }
      }
 else       if ((LA10_0 == 39)) {
        int LA10_2=input.LA(2);
        if ((synpred13_SJaql())) {
          alt10=1;
        }
      }
switch (alt10) {
case 1:
{
          int alt9=2;
          int LA9_0=input.LA(1);
          if ((LA9_0 == 38)) {
            alt9=1;
          }
switch (alt9) {
case 1:
{
              not=(Token)match(input,38,FOLLOW_38_in_elementExpression460);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_38.add(not);
            }
          break;
      }
      string_literal27=(Token)match(input,39,FOLLOW_39_in_elementExpression463);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_39.add(string_literal27);
      pushFollow(FOLLOW_comparisonExpression_in_elementExpression467);
      set=comparisonExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_comparisonExpression.add(set.getTree());
    }
  break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_elem=new RewriteRuleSubtreeStream(adaptor,"rule elem",elem != null ? elem.tree : null);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_set=new RewriteRuleSubtreeStream(adaptor,"rule set",set != null ? set.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (set == null) {
  adaptor.addChild(root_0,stream_elem.nextTree());
}
 else {
{
    EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
    root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ElementInSetExpression"),root_1);
    adaptor.addChild(root_1,stream_elem.nextTree());
    adaptor.addChild(root_1,not == null ? ElementInSetExpression.Quantor.EXISTS_IN : ElementInSetExpression.Quantor.EXISTS_NOT_IN);
    adaptor.addChild(root_1,stream_set.nextTree());
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,11,elementExpression_StartIndex);
}
}
return retval;
}
