{
  SJaqlParser.elementExpression_return retval=new SJaqlParser.elementExpression_return();
  retval.start=input.LT(1);
  int elementExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token string_literal15=null;
  Token string_literal16=null;
  SJaqlParser.comparisonExpression_return elem=null;
  SJaqlParser.comparisonExpression_return set=null;
  SJaqlParser.comparisonExpression_return comparisonExpression14=null;
  EvaluationExpression string_literal15_tree=null;
  EvaluationExpression string_literal16_tree=null;
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleSubtreeStream stream_comparisonExpression=new RewriteRuleSubtreeStream(adaptor,"rule comparisonExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,8)) {
      return retval;
    }
    int alt7=3;
    alt7=dfa7.predict(input);
switch (alt7) {
case 1:
{
        root_0=(EvaluationExpression)adaptor.nil();
        pushFollow(FOLLOW_comparisonExpression_in_elementExpression321);
        comparisonExpression14=comparisonExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,comparisonExpression14.getTree());
      }
    break;
case 2:
{
    pushFollow(FOLLOW_comparisonExpression_in_elementExpression328);
    elem=comparisonExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_comparisonExpression.add(elem.getTree());
    string_literal15=(Token)match(input,31,FOLLOW_31_in_elementExpression330);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_31.add(string_literal15);
    pushFollow(FOLLOW_comparisonExpression_in_elementExpression334);
    set=comparisonExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_comparisonExpression.add(set.getTree());
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_elem=new RewriteRuleSubtreeStream(adaptor,"rule elem",elem != null ? elem.tree : null);
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      RewriteRuleSubtreeStream stream_set=new RewriteRuleSubtreeStream(adaptor,"rule set",set != null ? set.tree : null);
      root_0=(EvaluationExpression)adaptor.nil();
{
{
          EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
          root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ElementInSetExpression"),root_1);
          adaptor.addChild(root_1,stream_elem.nextTree());
          adaptor.addChild(root_1,ElementInSetExpression.Quantor.EXISTS_IN);
          adaptor.addChild(root_1,stream_set.nextTree());
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
case 3:
{
pushFollow(FOLLOW_comparisonExpression_in_elementExpression356);
elem=comparisonExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_comparisonExpression.add(elem.getTree());
string_literal16=(Token)match(input,32,FOLLOW_32_in_elementExpression358);
if (state.failed) return retval;
if (state.backtracking == 0) stream_32.add(string_literal16);
pushFollow(FOLLOW_comparisonExpression_in_elementExpression362);
set=comparisonExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_comparisonExpression.add(set.getTree());
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_elem=new RewriteRuleSubtreeStream(adaptor,"rule elem",elem != null ? elem.tree : null);
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  RewriteRuleSubtreeStream stream_set=new RewriteRuleSubtreeStream(adaptor,"rule set",set != null ? set.tree : null);
  root_0=(EvaluationExpression)adaptor.nil();
{
{
      EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
      root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ElementInSetExpression"),root_1);
      adaptor.addChild(root_1,stream_elem.nextTree());
      adaptor.addChild(root_1,ElementInSetExpression.Quantor.EXISTS_NOT_IN);
      adaptor.addChild(root_1,stream_set.nextTree());
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,8,elementExpression_StartIndex);
}
}
return retval;
}
