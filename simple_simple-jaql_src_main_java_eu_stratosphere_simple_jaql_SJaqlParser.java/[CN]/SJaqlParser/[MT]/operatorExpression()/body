{
  SJaqlParser.operatorExpression_return retval=new SJaqlParser.operatorExpression_return();
  retval.start=input.LT(1);
  int operatorExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  SJaqlParser.operator_return operator38=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,18)) {
      return retval;
    }
{
      root_0=(EvaluationExpression)adaptor.nil();
      pushFollow(FOLLOW_operator_in_operatorExpression906);
      operator38=operator();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,operator38.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,18,operatorExpression_StartIndex);
    }
  }
  return retval;
}
