{
  SJaqlParser.arrayCreation_return retval=new SJaqlParser.arrayCreation_return();
  retval.start=input.LT(1);
  int arrayCreation_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal68=null;
  Token char_literal69=null;
  Token char_literal70=null;
  Token char_literal71=null;
  List list_elems=null;
  RuleReturnScope elems=null;
  EvaluationExpression char_literal68_tree=null;
  EvaluationExpression char_literal69_tree=null;
  EvaluationExpression char_literal70_tree=null;
  EvaluationExpression char_literal71_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
  RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,24)) {
      return retval;
    }
{
      char_literal68=(Token)match(input,55,FOLLOW_55_in_arrayCreation1290);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_55.add(char_literal68);
      pushFollow(FOLLOW_expression_in_arrayCreation1294);
      elems=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(elems.getTree());
      if (list_elems == null)       list_elems=new ArrayList();
      list_elems.add(elems.getTree());
      loop32:       do {
        int alt32=2;
        int LA32_0=input.LA(1);
        if ((LA32_0 == 49)) {
          int LA32_1=input.LA(2);
          if (((LA32_1 >= VAR && LA32_1 <= ID) || (LA32_1 >= DECIMAL && LA32_1 <= UINT) || (LA32_1 >= 42 && LA32_1 <= 45)|| LA32_1 == 47 || LA32_1 == 51 || (LA32_1 >= 53 && LA32_1 <= 55) || (LA32_1 >= 57 && LA32_1 <= 58))) {
            alt32=1;
          }
        }
switch (alt32) {
case 1:
{
            char_literal69=(Token)match(input,49,FOLLOW_49_in_arrayCreation1297);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_49.add(char_literal69);
            pushFollow(FOLLOW_expression_in_arrayCreation1301);
            elems=expression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_expression.add(elems.getTree());
            if (list_elems == null)             list_elems=new ArrayList();
            list_elems.add(elems.getTree());
          }
        break;
default :
      break loop32;
  }
}
 while (true);
int alt33=2;
int LA33_0=input.LA(1);
if ((LA33_0 == 49)) {
  alt33=1;
}
switch (alt33) {
case 1:
{
    char_literal70=(Token)match(input,49,FOLLOW_49_in_arrayCreation1305);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_49.add(char_literal70);
  }
break;
}
char_literal71=(Token)match(input,56,FOLLOW_56_in_arrayCreation1308);
if (state.failed) return retval;
if (state.backtracking == 0) stream_56.add(char_literal71);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_elems=new RewriteRuleSubtreeStream(adaptor,"token elems",list_elems);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayCreation"),root_1);
  adaptor.addChild(root_1,stream_elems.nextTree());
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,24,arrayCreation_StartIndex);
}
}
return retval;
}
