{
  SJaqlParser.arrayCreation_return retval=new SJaqlParser.arrayCreation_return();
  retval.start=input.LT(1);
  int arrayCreation_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal80=null;
  Token char_literal81=null;
  Token char_literal82=null;
  Token char_literal83=null;
  List list_elems=null;
  RuleReturnScope elems=null;
  EvaluationExpression char_literal80_tree=null;
  EvaluationExpression char_literal81_tree=null;
  EvaluationExpression char_literal82_tree=null;
  EvaluationExpression char_literal83_tree=null;
  RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,27)) {
      return retval;
    }
{
      char_literal80=(Token)match(input,59,FOLLOW_59_in_arrayCreation1419);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_59.add(char_literal80);
      pushFollow(FOLLOW_expression_in_arrayCreation1423);
      elems=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(elems.getTree());
      if (list_elems == null)       list_elems=new ArrayList();
      list_elems.add(elems.getTree());
      loop35:       do {
        int alt35=2;
        int LA35_0=input.LA(1);
        if ((LA35_0 == 31)) {
          int LA35_1=input.LA(2);
          if (((LA35_1 >= ID && LA35_1 <= STRING) || (LA35_1 >= DECIMAL && LA35_1 <= UINT) || LA35_1 == 30 || (LA35_1 >= 49 && LA35_1 <= 52) || LA35_1 == 55 || (LA35_1 >= 57 && LA35_1 <= 59) || (LA35_1 >= 61 && LA35_1 <= 62))) {
            alt35=1;
          }
        }
switch (alt35) {
case 1:
{
            char_literal81=(Token)match(input,31,FOLLOW_31_in_arrayCreation1426);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_31.add(char_literal81);
            pushFollow(FOLLOW_expression_in_arrayCreation1430);
            elems=expression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_expression.add(elems.getTree());
            if (list_elems == null)             list_elems=new ArrayList();
            list_elems.add(elems.getTree());
          }
        break;
default :
      break loop35;
  }
}
 while (true);
int alt36=2;
int LA36_0=input.LA(1);
if ((LA36_0 == 31)) {
  alt36=1;
}
switch (alt36) {
case 1:
{
    char_literal82=(Token)match(input,31,FOLLOW_31_in_arrayCreation1434);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_31.add(char_literal82);
  }
break;
}
char_literal83=(Token)match(input,60,FOLLOW_60_in_arrayCreation1437);
if (state.failed) return retval;
if (state.backtracking == 0) stream_60.add(char_literal83);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_elems=new RewriteRuleSubtreeStream(adaptor,"token elems",list_elems);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayCreation"),root_1);
  adaptor.addChild(root_1,stream_elems.nextTree());
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,27,arrayCreation_StartIndex);
}
}
return retval;
}
