{
  SJaqlParser.arrayCreation_return retval=new SJaqlParser.arrayCreation_return();
  retval.start=input.LT(1);
  int arrayCreation_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal93=null;
  Token char_literal94=null;
  Token char_literal95=null;
  Token char_literal96=null;
  List list_elems=null;
  RuleReturnScope elems=null;
  EvaluationExpression char_literal93_tree=null;
  EvaluationExpression char_literal94_tree=null;
  EvaluationExpression char_literal95_tree=null;
  EvaluationExpression char_literal96_tree=null;
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
  RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,31)) {
      return retval;
    }
{
      char_literal93=(Token)match(input,63,FOLLOW_63_in_arrayCreation1708);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_63.add(char_literal93);
      pushFollow(FOLLOW_expression_in_arrayCreation1712);
      elems=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(elems.getTree());
      if (list_elems == null)       list_elems=new ArrayList();
      list_elems.add(elems.getTree());
      loop40:       do {
        int alt40=2;
        int LA40_0=input.LA(1);
        if ((LA40_0 == 31)) {
          int LA40_1=input.LA(2);
          if (((LA40_1 >= ID && LA40_1 <= STRING) || (LA40_1 >= DECIMAL && LA40_1 <= UINT) || LA40_1 == 30 || (LA40_1 >= 52 && LA40_1 <= 55) || LA40_1 == 58 || (LA40_1 >= 60 && LA40_1 <= 63) || (LA40_1 >= 65 && LA40_1 <= 66))) {
            alt40=1;
          }
        }
switch (alt40) {
case 1:
{
            char_literal94=(Token)match(input,31,FOLLOW_31_in_arrayCreation1715);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_31.add(char_literal94);
            pushFollow(FOLLOW_expression_in_arrayCreation1719);
            elems=expression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_expression.add(elems.getTree());
            if (list_elems == null)             list_elems=new ArrayList();
            list_elems.add(elems.getTree());
          }
        break;
default :
      break loop40;
  }
}
 while (true);
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == 31)) {
  alt41=1;
}
switch (alt41) {
case 1:
{
    char_literal95=(Token)match(input,31,FOLLOW_31_in_arrayCreation1723);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_31.add(char_literal95);
  }
break;
}
char_literal96=(Token)match(input,64,FOLLOW_64_in_arrayCreation1726);
if (state.failed) return retval;
if (state.backtracking == 0) stream_64.add(char_literal96);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ArrayCreation"),root_1);
  adaptor.addChild(root_1,list_elems.toArray(new EvaluationExpression[list_elems.size()]));
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,31,arrayCreation_StartIndex);
}
}
return retval;
}
