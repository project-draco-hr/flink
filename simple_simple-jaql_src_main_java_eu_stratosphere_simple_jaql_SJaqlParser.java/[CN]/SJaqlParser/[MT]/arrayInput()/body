{
  SJaqlParser.arrayInput_return retval=new SJaqlParser.arrayInput_return();
  retval.start=input.LT(1);
  int arrayInput_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token from=null;
  Token char_literal114=null;
  Token char_literal115=null;
  Token char_literal116=null;
  Token string_literal117=null;
  Token names=null;
  List list_names=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression char_literal114_tree=null;
  EvaluationExpression char_literal115_tree=null;
  EvaluationExpression char_literal116_tree=null;
  EvaluationExpression string_literal117_tree=null;
  EvaluationExpression names_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
  RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,39)) {
      return retval;
    }
{
      char_literal114=(Token)match(input,63,FOLLOW_63_in_arrayInput2045);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_63.add(char_literal114);
      names=(Token)match(input,VAR,FOLLOW_VAR_in_arrayInput2049);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(names);
      if (list_names == null)       list_names=new ArrayList();
      list_names.add(names);
      int alt56=2;
      int LA56_0=input.LA(1);
      if ((LA56_0 == 31)) {
        alt56=1;
      }
switch (alt56) {
case 1:
{
          char_literal115=(Token)match(input,31,FOLLOW_31_in_arrayInput2052);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_31.add(char_literal115);
          names=(Token)match(input,VAR,FOLLOW_VAR_in_arrayInput2056);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_VAR.add(names);
          if (list_names == null)           list_names=new ArrayList();
          list_names.add(names);
        }
      break;
  }
  char_literal116=(Token)match(input,64,FOLLOW_64_in_arrayInput2060);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_64.add(char_literal116);
  string_literal117=(Token)match(input,42,FOLLOW_42_in_arrayInput2062);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_42.add(string_literal117);
  from=(Token)match(input,VAR,FOLLOW_VAR_in_arrayInput2066);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_VAR.add(from);
  if (state.backtracking == 0) {
    ((operator_scope)operator_stack.peek()).result.setInput(0,getBinding(from,JsonStream.class));
    for (int index=0; index < list_names.size(); index++) {
      setBinding((Token)list_names.get(index),new InputSelection(index));
    }
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(EvaluationExpression)adaptor.nil();
{
      root_0=null;
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
  memoize(input,39,arrayInput_StartIndex);
}
}
return retval;
}
