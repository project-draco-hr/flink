{
  objectCreation_stack.push(new objectCreation_scope());
  SJaqlParser.objectCreation_return retval=new SJaqlParser.objectCreation_return();
  retval.start=input.LT(1);
  int objectCreation_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal54=null;
  Token char_literal56=null;
  Token char_literal58=null;
  Token char_literal59=null;
  SJaqlParser.fieldAssignment_return fieldAssignment55=null;
  SJaqlParser.fieldAssignment_return fieldAssignment57=null;
  EvaluationExpression char_literal54_tree=null;
  EvaluationExpression char_literal56_tree=null;
  EvaluationExpression char_literal58_tree=null;
  EvaluationExpression char_literal59_tree=null;
  RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
  RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
  RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
  RewriteRuleSubtreeStream stream_fieldAssignment=new RewriteRuleSubtreeStream(adaptor,"rule fieldAssignment");
  ((objectCreation_scope)objectCreation_stack.peek()).mappings=new ArrayList<ObjectCreation.Mapping>();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,22)) {
      return retval;
    }
{
      char_literal54=(Token)match(input,52,FOLLOW_52_in_objectCreation1049);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_52.add(char_literal54);
      int alt27=2;
      int LA27_0=input.LA(1);
      if (((LA27_0 >= ID && LA27_0 <= VAR))) {
        alt27=1;
      }
switch (alt27) {
case 1:
{
          pushFollow(FOLLOW_fieldAssignment_in_objectCreation1052);
          fieldAssignment55=fieldAssignment();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_fieldAssignment.add(fieldAssignment55.getTree());
          loop25:           do {
            int alt25=2;
            int LA25_0=input.LA(1);
            if ((LA25_0 == 50)) {
              int LA25_1=input.LA(2);
              if (((LA25_1 >= ID && LA25_1 <= VAR))) {
                alt25=1;
              }
            }
switch (alt25) {
case 1:
{
                char_literal56=(Token)match(input,50,FOLLOW_50_in_objectCreation1055);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_50.add(char_literal56);
                pushFollow(FOLLOW_fieldAssignment_in_objectCreation1057);
                fieldAssignment57=fieldAssignment();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_fieldAssignment.add(fieldAssignment57.getTree());
              }
            break;
default :
          break loop25;
      }
    }
 while (true);
    int alt26=2;
    int LA26_0=input.LA(1);
    if ((LA26_0 == 50)) {
      alt26=1;
    }
switch (alt26) {
case 1:
{
        char_literal58=(Token)match(input,50,FOLLOW_50_in_objectCreation1061);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_50.add(char_literal58);
      }
    break;
}
}
break;
}
char_literal59=(Token)match(input,53,FOLLOW_53_in_objectCreation1066);
if (state.failed) return retval;
if (state.backtracking == 0) stream_53.add(char_literal59);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ObjectCreation"),root_1);
adaptor.addChild(root_1,((objectCreation_scope)objectCreation_stack.peek()).mappings);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,22,objectCreation_StartIndex);
}
objectCreation_stack.pop();
}
return retval;
}
