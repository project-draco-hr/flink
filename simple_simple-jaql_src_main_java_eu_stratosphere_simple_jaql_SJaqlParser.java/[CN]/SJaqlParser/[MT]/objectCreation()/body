{
  objectCreation_stack.push(new objectCreation_scope());
  SJaqlParser.objectCreation_return retval=new SJaqlParser.objectCreation_return();
  retval.start=input.LT(1);
  int objectCreation_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal52=null;
  Token char_literal54=null;
  Token char_literal56=null;
  Token char_literal57=null;
  SJaqlParser.fieldAssignment_return fieldAssignment53=null;
  SJaqlParser.fieldAssignment_return fieldAssignment55=null;
  EvaluationExpression char_literal52_tree=null;
  EvaluationExpression char_literal54_tree=null;
  EvaluationExpression char_literal56_tree=null;
  EvaluationExpression char_literal57_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
  RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
  RewriteRuleSubtreeStream stream_fieldAssignment=new RewriteRuleSubtreeStream(adaptor,"rule fieldAssignment");
  ((objectCreation_scope)objectCreation_stack.peek()).mappings=new ArrayList<ObjectCreation.Mapping>();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,19)) {
      return retval;
    }
{
      char_literal52=(Token)match(input,51,FOLLOW_51_in_objectCreation876);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_51.add(char_literal52);
      int alt23=2;
      int LA23_0=input.LA(1);
      if (((LA23_0 >= VAR && LA23_0 <= ID))) {
        alt23=1;
      }
switch (alt23) {
case 1:
{
          pushFollow(FOLLOW_fieldAssignment_in_objectCreation879);
          fieldAssignment53=fieldAssignment();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_fieldAssignment.add(fieldAssignment53.getTree());
          loop21:           do {
            int alt21=2;
            int LA21_0=input.LA(1);
            if ((LA21_0 == 49)) {
              int LA21_1=input.LA(2);
              if (((LA21_1 >= VAR && LA21_1 <= ID))) {
                alt21=1;
              }
            }
switch (alt21) {
case 1:
{
                char_literal54=(Token)match(input,49,FOLLOW_49_in_objectCreation882);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_49.add(char_literal54);
                pushFollow(FOLLOW_fieldAssignment_in_objectCreation884);
                fieldAssignment55=fieldAssignment();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_fieldAssignment.add(fieldAssignment55.getTree());
              }
            break;
default :
          break loop21;
      }
    }
 while (true);
    int alt22=2;
    int LA22_0=input.LA(1);
    if ((LA22_0 == 49)) {
      alt22=1;
    }
switch (alt22) {
case 1:
{
        char_literal56=(Token)match(input,49,FOLLOW_49_in_objectCreation888);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_49.add(char_literal56);
      }
    break;
}
}
break;
}
char_literal57=(Token)match(input,52,FOLLOW_52_in_objectCreation893);
if (state.failed) return retval;
if (state.backtracking == 0) stream_52.add(char_literal57);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"ObjectCreation"),root_1);
adaptor.addChild(root_1,((objectCreation_scope)objectCreation_stack.peek()).mappings);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,19,objectCreation_StartIndex);
}
objectCreation_stack.pop();
}
return retval;
}
