{
  SJaqlParser.fieldAssignment_return retval=new SJaqlParser.fieldAssignment_return();
  retval.start=input.LT(1);
  int fieldAssignment_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token VAR45=null;
  Token char_literal46=null;
  Token STAR47=null;
  Token VAR48=null;
  Token char_literal49=null;
  Token ID50=null;
  Token ID51=null;
  Token char_literal52=null;
  SJaqlParser.expression_return expression53=null;
  EvaluationExpression VAR45_tree=null;
  EvaluationExpression char_literal46_tree=null;
  EvaluationExpression STAR47_tree=null;
  EvaluationExpression VAR48_tree=null;
  EvaluationExpression char_literal49_tree=null;
  EvaluationExpression ID50_tree=null;
  EvaluationExpression ID51_tree=null;
  EvaluationExpression char_literal52_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,21)) {
      return retval;
    }
    int alt24=3;
    int LA24_0=input.LA(1);
    if ((LA24_0 == VAR)) {
      int LA24_1=input.LA(2);
      if ((LA24_1 == 47)) {
        int LA24_3=input.LA(3);
        if ((LA24_3 == STAR)) {
          alt24=1;
        }
 else         if ((LA24_3 == ID)) {
          alt24=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",24,3,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",24,1,input);
        throw nvae;
      }
    }
 else     if ((LA24_0 == ID)) {
      alt24=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",24,0,input);
      throw nvae;
    }
switch (alt24) {
case 1:
{
        VAR45=(Token)match(input,VAR,FOLLOW_VAR_in_fieldAssignment997);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_VAR.add(VAR45);
        char_literal46=(Token)match(input,47,FOLLOW_47_in_fieldAssignment999);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_47.add(char_literal46);
        STAR47=(Token)match(input,STAR,FOLLOW_STAR_in_fieldAssignment1001);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_STAR.add(STAR47);
        if (state.backtracking == 0) {
          ((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.CopyFields(makePath(VAR45)));
        }
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(EvaluationExpression)adaptor.nil();
{
            root_0=null;
          }
          retval.tree=root_0;
        }
      }
    break;
case 2:
{
    VAR48=(Token)match(input,VAR,FOLLOW_VAR_in_fieldAssignment1010);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_VAR.add(VAR48);
    char_literal49=(Token)match(input,47,FOLLOW_47_in_fieldAssignment1012);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_47.add(char_literal49);
    ID50=(Token)match(input,ID,FOLLOW_ID_in_fieldAssignment1014);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_ID.add(ID50);
    if (state.backtracking == 0) {
      ((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.Mapping((ID50 != null ? ID50.getText() : null),makePath(VAR48,(ID50 != null ? ID50.getText() : null))));
    }
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(EvaluationExpression)adaptor.nil();
{
        root_0=null;
      }
      retval.tree=root_0;
    }
  }
break;
case 3:
{
ID51=(Token)match(input,ID,FOLLOW_ID_in_fieldAssignment1023);
if (state.failed) return retval;
if (state.backtracking == 0) stream_ID.add(ID51);
char_literal52=(Token)match(input,51,FOLLOW_51_in_fieldAssignment1025);
if (state.failed) return retval;
if (state.backtracking == 0) stream_51.add(char_literal52);
pushFollow(FOLLOW_expression_in_fieldAssignment1027);
expression53=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_expression.add(expression53.getTree());
if (state.backtracking == 0) {
  ((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.Mapping((ID51 != null ? ID51.getText() : null),(expression53 != null ? ((EvaluationExpression)expression53.tree) : null)));
}
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(EvaluationExpression)adaptor.nil();
{
    root_0=null;
  }
  retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,21,fieldAssignment_StartIndex);
}
}
return retval;
}
