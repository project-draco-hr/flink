{
  SJaqlParser.fieldAssignment_return retval=new SJaqlParser.fieldAssignment_return();
  retval.start=input.LT(1);
  int fieldAssignment_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token VAR65=null;
  Token char_literal66=null;
  Token STAR67=null;
  Token VAR68=null;
  Token char_literal69=null;
  Token ID70=null;
  Token VAR71=null;
  Token ID72=null;
  Token char_literal73=null;
  SJaqlParser.expression_return expression74=null;
  EvaluationExpression VAR65_tree=null;
  EvaluationExpression char_literal66_tree=null;
  EvaluationExpression STAR67_tree=null;
  EvaluationExpression VAR68_tree=null;
  EvaluationExpression char_literal69_tree=null;
  EvaluationExpression ID70_tree=null;
  EvaluationExpression VAR71_tree=null;
  EvaluationExpression ID72_tree=null;
  EvaluationExpression char_literal73_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,26)) {
      return retval;
    }
    int alt29=4;
    int LA29_0=input.LA(1);
    if ((LA29_0 == VAR)) {
      int LA29_1=input.LA(2);
      if ((LA29_1 == 57)) {
        int LA29_3=input.LA(3);
        if ((LA29_3 == STAR)) {
          alt29=1;
        }
 else         if ((LA29_3 == ID)) {
          alt29=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",29,3,input);
          throw nvae;
        }
      }
 else       if ((LA29_1 == EOF || LA29_1 == 31 || LA29_1 == 59)) {
        alt29=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",29,1,input);
        throw nvae;
      }
    }
 else     if ((LA29_0 == ID)) {
      alt29=4;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",29,0,input);
      throw nvae;
    }
switch (alt29) {
case 1:
{
        VAR65=(Token)match(input,VAR,FOLLOW_VAR_in_fieldAssignment1245);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_VAR.add(VAR65);
        char_literal66=(Token)match(input,57,FOLLOW_57_in_fieldAssignment1247);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_57.add(char_literal66);
        STAR67=(Token)match(input,STAR,FOLLOW_STAR_in_fieldAssignment1249);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_STAR.add(STAR67);
        if (state.backtracking == 0) {
          ((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.CopyFields(makePath(VAR65)));
        }
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(EvaluationExpression)adaptor.nil();
{
            root_0=null;
          }
          retval.tree=root_0;
        }
      }
    break;
case 2:
{
    VAR68=(Token)match(input,VAR,FOLLOW_VAR_in_fieldAssignment1259);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_VAR.add(VAR68);
    char_literal69=(Token)match(input,57,FOLLOW_57_in_fieldAssignment1261);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_57.add(char_literal69);
    ID70=(Token)match(input,ID,FOLLOW_ID_in_fieldAssignment1263);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_ID.add(ID70);
    if (state.backtracking == 0) {
      ((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.Mapping((ID70 != null ? ID70.getText() : null),makePath(VAR68,(ID70 != null ? ID70.getText() : null))));
    }
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(EvaluationExpression)adaptor.nil();
{
        root_0=null;
      }
      retval.tree=root_0;
    }
  }
break;
case 3:
{
VAR71=(Token)match(input,VAR,FOLLOW_VAR_in_fieldAssignment1273);
if (state.failed) return retval;
if (state.backtracking == 0) stream_VAR.add(VAR71);
if (state.backtracking == 0) {
  ((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.Mapping((VAR71 != null ? VAR71.getText() : null).substring(1),makePath(VAR71)));
}
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(EvaluationExpression)adaptor.nil();
{
    root_0=null;
  }
  retval.tree=root_0;
}
}
break;
case 4:
{
ID72=(Token)match(input,ID,FOLLOW_ID_in_fieldAssignment1282);
if (state.failed) return retval;
if (state.backtracking == 0) stream_ID.add(ID72);
char_literal73=(Token)match(input,35,FOLLOW_35_in_fieldAssignment1284);
if (state.failed) return retval;
if (state.backtracking == 0) stream_35.add(char_literal73);
pushFollow(FOLLOW_expression_in_fieldAssignment1286);
expression74=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_expression.add(expression74.getTree());
if (state.backtracking == 0) {
((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.Mapping((ID72 != null ? ID72.getText() : null),(expression74 != null ? ((EvaluationExpression)expression74.tree) : null)));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,26,fieldAssignment_StartIndex);
}
}
return retval;
}
