{
  SJaqlParser.fieldAssignment_return retval=new SJaqlParser.fieldAssignment_return();
  retval.start=input.LT(1);
  int fieldAssignment_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token ID64=null;
  Token char_literal65=null;
  Token VAR67=null;
  Token char_literal68=null;
  Token ID69=null;
  Token STAR70=null;
  Token char_literal71=null;
  Token char_literal72=null;
  Token char_literal73=null;
  SJaqlParser.contextAwarePathExpression_return p=null;
  SJaqlParser.expression_return e=null;
  SJaqlParser.expression_return e2=null;
  SJaqlParser.operator_return source=null;
  SJaqlParser.expression_return expression66=null;
  EvaluationExpression ID64_tree=null;
  EvaluationExpression char_literal65_tree=null;
  EvaluationExpression VAR67_tree=null;
  EvaluationExpression char_literal68_tree=null;
  EvaluationExpression ID69_tree=null;
  EvaluationExpression STAR70_tree=null;
  EvaluationExpression char_literal71_tree=null;
  EvaluationExpression char_literal72_tree=null;
  EvaluationExpression char_literal73_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
  RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  RewriteRuleSubtreeStream stream_contextAwarePathExpression=new RewriteRuleSubtreeStream(adaptor,"rule contextAwarePathExpression");
  RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,26)) {
      return retval;
    }
    int alt31=2;
    int LA31_0=input.LA(1);
    if ((LA31_0 == ID)) {
      alt31=1;
    }
 else     if ((LA31_0 == VAR)) {
      alt31=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",31,0,input);
      throw nvae;
    }
switch (alt31) {
case 1:
{
        ID64=(Token)match(input,ID,FOLLOW_ID_in_fieldAssignment1249);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_ID.add(ID64);
        char_literal65=(Token)match(input,35,FOLLOW_35_in_fieldAssignment1251);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_35.add(char_literal65);
        pushFollow(FOLLOW_expression_in_fieldAssignment1253);
        expression66=expression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_expression.add(expression66.getTree());
        if (state.backtracking == 0) {
          ((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.FieldAssignment((ID64 != null ? ID64.getText() : null),(expression66 != null ? ((EvaluationExpression)expression66.tree) : null)));
        }
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(EvaluationExpression)adaptor.nil();
{
            root_0=null;
          }
          retval.tree=root_0;
        }
      }
    break;
case 2:
{
    VAR67=(Token)match(input,VAR,FOLLOW_VAR_in_fieldAssignment1268);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_VAR.add(VAR67);
    int alt30=4;
switch (input.LA(1)) {
case 57:
{
        alt30=1;
      }
    break;
case 35:
{
    alt30=2;
  }
break;
case 28:
{
alt30=3;
}
break;
case EOF:
case 31:
case 59:
{
alt30=4;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",30,0,input);
throw nvae;
}
switch (alt30) {
case 1:
{
char_literal68=(Token)match(input,57,FOLLOW_57_in_fieldAssignment1284);
if (state.failed) return retval;
if (state.backtracking == 0) stream_57.add(char_literal68);
int alt29=3;
int LA29_0=input.LA(1);
if ((LA29_0 == ID)) {
int LA29_1=input.LA(2);
if ((LA29_1 == EOF || LA29_1 == 31 || LA29_1 == 59)) {
alt29=1;
}
 else if ((LA29_1 == 35 || LA29_1 == 57 || LA29_1 == 63)) {
alt29=3;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",29,1,input);
throw nvae;
}
}
 else if ((LA29_0 == STAR)) {
alt29=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",29,0,input);
throw nvae;
}
switch (alt29) {
case 1:
{
ID69=(Token)match(input,ID,FOLLOW_ID_in_fieldAssignment1287);
if (state.failed) return retval;
if (state.backtracking == 0) stream_ID.add(ID69);
if (state.backtracking == 0) {
((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.FieldAssignment((ID69 != null ? ID69.getText() : null),makePath(VAR67,(ID69 != null ? ID69.getText() : null))));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
break;
case 2:
{
STAR70=(Token)match(input,STAR,FOLLOW_STAR_in_fieldAssignment1303);
if (state.failed) return retval;
if (state.backtracking == 0) stream_STAR.add(STAR70);
if (state.backtracking == 0) {
((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.CopyFields(makePath(VAR67)));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
break;
case 3:
{
pushFollow(FOLLOW_contextAwarePathExpression_in_fieldAssignment1321);
p=contextAwarePathExpression(makePath(VAR67));
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_contextAwarePathExpression.add(p.getTree());
char_literal71=(Token)match(input,35,FOLLOW_35_in_fieldAssignment1324);
if (state.failed) return retval;
if (state.backtracking == 0) stream_35.add(char_literal71);
pushFollow(FOLLOW_expression_in_fieldAssignment1328);
e=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_expression.add(e.getTree());
if (state.backtracking == 0) {
((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.TagMapping<Object>((p != null ? ((EvaluationExpression)p.tree) : null),(e != null ? ((EvaluationExpression)e.tree) : null)));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
break;
}
}
break;
case 2:
{
char_literal72=(Token)match(input,35,FOLLOW_35_in_fieldAssignment1362);
if (state.failed) return retval;
if (state.backtracking == 0) stream_35.add(char_literal72);
pushFollow(FOLLOW_expression_in_fieldAssignment1366);
e2=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_expression.add(e2.getTree());
if (state.backtracking == 0) {
((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.TagMapping<Object>(makePath(VAR67),(e2 != null ? ((EvaluationExpression)e2.tree) : null)));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
break;
case 3:
{
char_literal73=(Token)match(input,28,FOLLOW_28_in_fieldAssignment1378);
if (state.failed) return retval;
if (state.backtracking == 0) stream_28.add(char_literal73);
pushFollow(FOLLOW_operator_in_fieldAssignment1382);
source=operator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_operator.add(source.getTree());
if (state.backtracking == 0) {
setBinding(VAR67,new JsonStreamExpression((source != null ? source.op : null)),1);
}
}
break;
case 4:
{
if (state.backtracking == 0) {
((objectCreation_scope)objectCreation_stack.peek()).mappings.add(new ObjectCreation.FieldAssignment((VAR67 != null ? VAR67.getText() : null).substring(1),makePath(VAR67)));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,26,fieldAssignment_StartIndex);
}
}
return retval;
}
