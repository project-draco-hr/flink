{
  SJaqlParser.methodCall_return retval=new SJaqlParser.methodCall_return();
  retval.start=input.LT(1);
  int methodCall_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token char_literal62=null;
  Token char_literal63=null;
  Token char_literal64=null;
  SJaqlParser.expression_return param=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression char_literal62_tree=null;
  EvaluationExpression char_literal63_tree=null;
  EvaluationExpression char_literal64_tree=null;
  RewriteRuleTokenStream stream_30=new RewriteRuleTokenStream(adaptor,"token 30");
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  List<EvaluationExpression> params=new ArrayList();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,25)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_methodCall1189);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      char_literal62=(Token)match(input,30,FOLLOW_30_in_methodCall1191);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_30.add(char_literal62);
      int alt28=2;
      int LA28_0=input.LA(1);
      if (((LA28_0 >= ID && LA28_0 <= STRING) || (LA28_0 >= DECIMAL && LA28_0 <= UINT) || LA28_0 == 30 || (LA28_0 >= 52 && LA28_0 <= 55) || LA28_0 == 58 || (LA28_0 >= 60 && LA28_0 <= 63) || (LA28_0 >= 65 && LA28_0 <= 66))) {
        alt28=1;
      }
switch (alt28) {
case 1:
{
          pushFollow(FOLLOW_expression_in_methodCall1198);
          param=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_expression.add(param.getTree());
          if (state.backtracking == 0) {
            params.add((param != null ? ((EvaluationExpression)param.tree) : null));
          }
          loop27:           do {
            int alt27=2;
            int LA27_0=input.LA(1);
            if ((LA27_0 == 31)) {
              alt27=1;
            }
switch (alt27) {
case 1:
{
                char_literal63=(Token)match(input,31,FOLLOW_31_in_methodCall1204);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_31.add(char_literal63);
                pushFollow(FOLLOW_expression_in_methodCall1208);
                param=expression();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_expression.add(param.getTree());
                if (state.backtracking == 0) {
                  params.add((param != null ? ((EvaluationExpression)param.tree) : null));
                }
              }
            break;
default :
          break loop27;
      }
    }
 while (true);
  }
break;
}
char_literal64=(Token)match(input,32,FOLLOW_32_in_methodCall1218);
if (state.failed) return retval;
if (state.backtracking == 0) stream_32.add(char_literal64);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"MethodCall"),root_1);
  adaptor.addChild(root_1,(name != null ? name.getText() : null));
  adaptor.addChild(root_1,targetExpr);
  adaptor.addChild(root_1,params.toArray(new EvaluationExpression[params.size()]));
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,25,methodCall_StartIndex);
}
}
return retval;
}
