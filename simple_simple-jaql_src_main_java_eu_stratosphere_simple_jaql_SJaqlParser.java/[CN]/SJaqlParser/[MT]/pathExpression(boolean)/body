{
  pathExpression_stack.push(new pathExpression_scope());
  SJaqlParser.pathExpression_return retval=new SJaqlParser.pathExpression_return();
  retval.start=input.LT(1);
  int pathExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token field=null;
  Token char_literal46=null;
  SJaqlParser.arrayAccess_return arrayAccess47=null;
  EvaluationExpression field_tree=null;
  EvaluationExpression char_literal46_tree=null;
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_arrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule arrayAccess");
  ((pathExpression_scope)pathExpression_stack.peek()).fragments=new ArrayList<EvaluationExpression>();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,21)) {
      return retval;
    }
{
      int cnt25=0;
      loop25:       do {
        int alt25=3;
        int LA25_0=input.LA(1);
        if ((LA25_0 == 57)) {
          int LA25_2=input.LA(2);
          if ((synpred37_SJaql())) {
            alt25=1;
          }
        }
 else         if ((LA25_0 == 63)) {
          int LA25_3=input.LA(2);
          if ((synpred38_SJaql())) {
            alt25=2;
          }
        }
switch (alt25) {
case 1:
{
{
              char_literal46=(Token)match(input,57,FOLLOW_57_in_pathExpression1039);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_57.add(char_literal46);
{
                field=(Token)match(input,ID,FOLLOW_ID_in_pathExpression1044);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_ID.add(field);
                if (state.backtracking == 0) {
                  ((pathExpression_scope)pathExpression_stack.peek()).fragments.add(new ObjectAccess((field != null ? field.getText() : null)));
                }
              }
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_arrayAccess_in_pathExpression1062);
        arrayAccess47=arrayAccess();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_arrayAccess.add(arrayAccess47.getTree());
        if (state.backtracking == 0) {
          ((pathExpression_scope)pathExpression_stack.peek()).fragments.add((arrayAccess47 != null ? ((EvaluationExpression)arrayAccess47.tree) : null));
        }
      }
    break;
default :
  if (cnt25 >= 1)   break loop25;
if (state.backtracking > 0) {
  state.failed=true;
  return retval;
}
EarlyExitException eee=new EarlyExitException(25,input);
throw eee;
}
cnt25++;
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
if (canonicalize) {
adaptor.addChild(root_0,PathExpression.valueOf(((pathExpression_scope)pathExpression_stack.peek()).fragments));
}
 else {
{
EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"PathExpression"),root_1);
adaptor.addChild(root_1,((pathExpression_scope)pathExpression_stack.peek()).fragments);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,21,pathExpression_StartIndex);
}
pathExpression_stack.pop();
}
return retval;
}
