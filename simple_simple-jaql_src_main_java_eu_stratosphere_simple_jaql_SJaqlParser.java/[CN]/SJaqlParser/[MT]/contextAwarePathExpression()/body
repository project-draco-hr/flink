{
  contextAwarePathExpression_stack.push(new contextAwarePathExpression_scope());
  SJaqlParser.contextAwarePathExpression_return retval=new SJaqlParser.contextAwarePathExpression_return();
  retval.start=input.LT(1);
  int contextAwarePathExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token start=null;
  Token field=null;
  Token char_literal25=null;
  SJaqlParser.arrayAccess_return arrayAccess26=null;
  EvaluationExpression start_tree=null;
  EvaluationExpression field_tree=null;
  EvaluationExpression char_literal25_tree=null;
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_arrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule arrayAccess");
  ((contextAwarePathExpression_scope)contextAwarePathExpression_stack.peek()).fragments=new ArrayList<EvaluationExpression>();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,15)) {
      return retval;
    }
{
      start=(Token)match(input,ID,FOLLOW_ID_in_contextAwarePathExpression708);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(start);
      if (state.backtracking == 0) {
        ((contextAwarePathExpression_scope)contextAwarePathExpression_stack.peek()).fragments.add(((contextAwareExpression_scope)contextAwareExpression_stack.peek()).context);
        ((contextAwarePathExpression_scope)contextAwarePathExpression_stack.peek()).fragments.add(new ObjectAccess((start != null ? start.getText() : null)));
      }
      loop18:       do {
        int alt18=3;
        alt18=dfa18.predict(input);
switch (alt18) {
case 1:
{
{
              char_literal25=(Token)match(input,47,FOLLOW_47_in_contextAwarePathExpression719);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_47.add(char_literal25);
{
                field=(Token)match(input,ID,FOLLOW_ID_in_contextAwarePathExpression724);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_ID.add(field);
                if (state.backtracking == 0) {
                  ((contextAwarePathExpression_scope)contextAwarePathExpression_stack.peek()).fragments.add(new ObjectAccess((field != null ? field.getText() : null)));
                }
              }
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_arrayAccess_in_contextAwarePathExpression742);
        arrayAccess26=arrayAccess();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_arrayAccess.add(arrayAccess26.getTree());
        if (state.backtracking == 0) {
          ((contextAwarePathExpression_scope)contextAwarePathExpression_stack.peek()).fragments.add((arrayAccess26 != null ? ((EvaluationExpression)arrayAccess26.tree) : null));
        }
      }
    break;
default :
  break loop18;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
{
  EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
  root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"PathExpression"),root_1);
  adaptor.addChild(root_1,((contextAwarePathExpression_scope)contextAwarePathExpression_stack.peek()).fragments);
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,15,contextAwarePathExpression_StartIndex);
}
contextAwarePathExpression_stack.pop();
}
return retval;
}
