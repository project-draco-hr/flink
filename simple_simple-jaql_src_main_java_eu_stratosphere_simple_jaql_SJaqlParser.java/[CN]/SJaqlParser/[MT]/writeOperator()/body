{
  SJaqlParser.writeOperator_return retval=new SJaqlParser.writeOperator_return();
  retval.start=input.LT(1);
  int writeOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token from=null;
  Token loc=null;
  Token file=null;
  Token string_literal78=null;
  Token string_literal79=null;
  Token char_literal80=null;
  Token char_literal81=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression loc_tree=null;
  EvaluationExpression file_tree=null;
  EvaluationExpression string_literal78_tree=null;
  EvaluationExpression string_literal79_tree=null;
  EvaluationExpression char_literal80_tree=null;
  EvaluationExpression char_literal81_tree=null;
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
  RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,27)) {
      return retval;
    }
{
      string_literal78=(Token)match(input,58,FOLLOW_58_in_writeOperator1403);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_58.add(string_literal78);
      from=(Token)match(input,VAR,FOLLOW_VAR_in_writeOperator1407);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(from);
      string_literal79=(Token)match(input,59,FOLLOW_59_in_writeOperator1409);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_59.add(string_literal79);
      int alt38=2;
      int LA38_0=input.LA(1);
      if ((LA38_0 == ID)) {
        int LA38_1=input.LA(2);
        if ((LA38_1 == 47)) {
          alt38=2;
        }
 else         if ((LA38_1 == STRING)) {
          alt38=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",38,1,input);
          throw nvae;
        }
      }
 else       if ((LA38_0 == STRING)) {
        alt38=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",38,0,input);
        throw nvae;
      }
switch (alt38) {
case 1:
{
          int alt37=2;
          int LA37_0=input.LA(1);
          if ((LA37_0 == ID)) {
            alt37=1;
          }
switch (alt37) {
case 1:
{
              loc=(Token)match(input,ID,FOLLOW_ID_in_writeOperator1414);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_ID.add(loc);
            }
          break;
      }
      file=(Token)match(input,STRING,FOLLOW_STRING_in_writeOperator1419);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(file);
    }
  break;
case 2:
{
  loc=(Token)match(input,ID,FOLLOW_ID_in_writeOperator1425);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(loc);
  char_literal80=(Token)match(input,47,FOLLOW_47_in_writeOperator1427);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_47.add(char_literal80);
  file=(Token)match(input,STRING,FOLLOW_STRING_in_writeOperator1431);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_STRING.add(file);
  char_literal81=(Token)match(input,48,FOLLOW_48_in_writeOperator1433);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_48.add(char_literal81);
}
break;
}
if (state.backtracking == 0) {
Sink sink=new Sink(JsonOutputFormat.class,(file != null ? file.getText() : null));
((operator_scope)operator_stack.peek()).result=sink;
sink.setInputs(getVariable(from));
this.sinks.add(sink);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,27,writeOperator_StartIndex);
}
}
return retval;
}
