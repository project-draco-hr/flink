{
  SJaqlParser.writeOperator_return retval=new SJaqlParser.writeOperator_return();
  retval.start=input.LT(1);
  int writeOperator_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token from=null;
  Token loc=null;
  Token file=null;
  Token string_literal75=null;
  Token string_literal76=null;
  Token char_literal77=null;
  Token char_literal78=null;
  EvaluationExpression from_tree=null;
  EvaluationExpression loc_tree=null;
  EvaluationExpression file_tree=null;
  EvaluationExpression string_literal75_tree=null;
  EvaluationExpression string_literal76_tree=null;
  EvaluationExpression char_literal77_tree=null;
  EvaluationExpression char_literal78_tree=null;
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
  RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,25)) {
      return retval;
    }
{
      string_literal75=(Token)match(input,58,FOLLOW_58_in_writeOperator1286);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_58.add(string_literal75);
      from=(Token)match(input,VAR,FOLLOW_VAR_in_writeOperator1290);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(from);
      string_literal76=(Token)match(input,59,FOLLOW_59_in_writeOperator1292);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_59.add(string_literal76);
      int alt35=2;
      int LA35_0=input.LA(1);
      if ((LA35_0 == ID)) {
        int LA35_1=input.LA(2);
        if ((LA35_1 == 47)) {
          alt35=2;
        }
 else         if ((LA35_1 == STRING)) {
          alt35=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",35,1,input);
          throw nvae;
        }
      }
 else       if ((LA35_0 == STRING)) {
        alt35=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",35,0,input);
        throw nvae;
      }
switch (alt35) {
case 1:
{
          int alt34=2;
          int LA34_0=input.LA(1);
          if ((LA34_0 == ID)) {
            alt34=1;
          }
switch (alt34) {
case 1:
{
              loc=(Token)match(input,ID,FOLLOW_ID_in_writeOperator1297);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_ID.add(loc);
            }
          break;
      }
      file=(Token)match(input,STRING,FOLLOW_STRING_in_writeOperator1302);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(file);
    }
  break;
case 2:
{
  loc=(Token)match(input,ID,FOLLOW_ID_in_writeOperator1308);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_ID.add(loc);
  char_literal77=(Token)match(input,47,FOLLOW_47_in_writeOperator1310);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_47.add(char_literal77);
  file=(Token)match(input,STRING,FOLLOW_STRING_in_writeOperator1314);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_STRING.add(file);
  char_literal78=(Token)match(input,48,FOLLOW_48_in_writeOperator1316);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_48.add(char_literal78);
}
break;
}
if (state.backtracking == 0) {
Sink sink=new Sink(JsonOutputFormat.class,(file != null ? file.getText() : null));
((operator_scope)operator_stack.peek()).result=sink;
sink.setInputs(getVariable(from));
this.sinks.add(sink);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,25,writeOperator_StartIndex);
}
}
return retval;
}
