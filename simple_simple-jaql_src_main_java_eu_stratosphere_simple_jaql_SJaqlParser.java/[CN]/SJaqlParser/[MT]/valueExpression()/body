{
  SJaqlParser.valueExpression_return retval=new SJaqlParser.valueExpression_return();
  retval.start=input.LT(1);
  int valueExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token VAR34=null;
  SJaqlParser.functionCall_return functionCall31=null;
  SJaqlParser.parenthesesExpression_return parenthesesExpression32=null;
  SJaqlParser.literal_return literal33=null;
  SJaqlParser.arrayCreation_return arrayCreation35=null;
  SJaqlParser.objectCreation_return objectCreation36=null;
  SJaqlParser.operatorExpression_return operatorExpression37=null;
  EvaluationExpression VAR34_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,17)) {
      return retval;
    }
    int alt21=7;
switch (input.LA(1)) {
case ID:
{
        int LA21_1=input.LA(2);
        if ((LA21_1 == 48)) {
          alt21=1;
        }
 else         if (((LA21_1 >= ID && LA21_1 <= VAR) || LA21_1 == 61)) {
          alt21=7;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",21,1,input);
          throw nvae;
        }
      }
    break;
case 48:
{
    alt21=2;
  }
break;
case DECIMAL:
case STRING:
case INTEGER:
case UINT:
case 54:
case 55:
{
alt21=3;
}
break;
case VAR:
{
alt21=4;
}
break;
case 56:
{
alt21=5;
}
break;
case 52:
{
alt21=6;
}
break;
case 58:
case 59:
{
alt21=7;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",21,0,input);
throw nvae;
}
switch (alt21) {
case 1:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_functionCall_in_valueExpression857);
functionCall31=functionCall();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,functionCall31.getTree());
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_parenthesesExpression_in_valueExpression863);
parenthesesExpression32=parenthesesExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,parenthesesExpression32.getTree());
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_literal_in_valueExpression869);
literal33=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal33.getTree());
}
break;
case 4:
{
VAR34=(Token)match(input,VAR,FOLLOW_VAR_in_valueExpression875);
if (state.failed) return retval;
if (state.backtracking == 0) stream_VAR.add(VAR34);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,makePath(VAR34));
}
retval.tree=root_0;
}
}
break;
case 5:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_arrayCreation_in_valueExpression884);
arrayCreation35=arrayCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arrayCreation35.getTree());
}
break;
case 6:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_objectCreation_in_valueExpression890);
objectCreation36=objectCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,objectCreation36.getTree());
}
break;
case 7:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_operatorExpression_in_valueExpression896);
operatorExpression37=operatorExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,operatorExpression37.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,17,valueExpression_StartIndex);
}
}
return retval;
}
