{
  SJaqlParser.valueExpression_return retval=new SJaqlParser.valueExpression_return();
  retval.start=input.LT(1);
  int valueExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token VAR52=null;
  Token ID53=null;
  SJaqlParser.methodCall_return methodCall48=null;
  SJaqlParser.parenthesesExpression_return parenthesesExpression49=null;
  SJaqlParser.literal_return literal50=null;
  SJaqlParser.streamIndexAccess_return streamIndexAccess51=null;
  SJaqlParser.arrayCreation_return arrayCreation54=null;
  SJaqlParser.objectCreation_return objectCreation55=null;
  EvaluationExpression VAR52_tree=null;
  EvaluationExpression ID53_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,22)) {
      return retval;
    }
    int alt26=8;
    alt26=dfa26.predict(input);
switch (alt26) {
case 1:
{
        root_0=(EvaluationExpression)adaptor.nil();
        pushFollow(FOLLOW_methodCall_in_valueExpression1097);
        methodCall48=methodCall(null);
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,methodCall48.getTree());
      }
    break;
case 2:
{
    root_0=(EvaluationExpression)adaptor.nil();
    pushFollow(FOLLOW_parenthesesExpression_in_valueExpression1103);
    parenthesesExpression49=parenthesesExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,parenthesesExpression49.getTree());
  }
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_literal_in_valueExpression1109);
literal50=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal50.getTree());
}
break;
case 4:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_streamIndexAccess_in_valueExpression1116);
streamIndexAccess51=streamIndexAccess();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,streamIndexAccess51.getTree());
}
break;
case 5:
{
VAR52=(Token)match(input,VAR,FOLLOW_VAR_in_valueExpression1121);
if (state.failed) return retval;
if (state.backtracking == 0) stream_VAR.add(VAR52);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,makePath(VAR52));
}
retval.tree=root_0;
}
}
break;
case 6:
{
ID53=(Token)match(input,ID,FOLLOW_ID_in_valueExpression1131);
if (state.failed) return retval;
if (state.backtracking == 0) stream_ID.add(ID53);
if (!((hasBinding(ID53,EvaluationExpression.class)))) {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
throw new FailedPredicateException(input,"valueExpression"," hasBinding($ID, EvaluationExpression.class) ");
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,getBinding(ID53,EvaluationExpression.class));
}
retval.tree=root_0;
}
}
break;
case 7:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_arrayCreation_in_valueExpression1143);
arrayCreation54=arrayCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arrayCreation54.getTree());
}
break;
case 8:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_objectCreation_in_valueExpression1149);
objectCreation55=objectCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,objectCreation55.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,22,valueExpression_StartIndex);
}
}
return retval;
}
