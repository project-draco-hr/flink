{
  SJaqlParser.valueExpression_return retval=new SJaqlParser.valueExpression_return();
  retval.start=input.LT(1);
  int valueExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token VAR54=null;
  Token ID55=null;
  SJaqlParser.methodCall_return methodCall50=null;
  SJaqlParser.parenthesesExpression_return parenthesesExpression51=null;
  SJaqlParser.literal_return literal52=null;
  SJaqlParser.streamIndexAccess_return streamIndexAccess53=null;
  SJaqlParser.arrayCreation_return arrayCreation56=null;
  SJaqlParser.objectCreation_return objectCreation57=null;
  EvaluationExpression VAR54_tree=null;
  EvaluationExpression ID55_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,22)) {
      return retval;
    }
    int alt26=8;
    alt26=dfa26.predict(input);
switch (alt26) {
case 1:
{
        root_0=(EvaluationExpression)adaptor.nil();
        pushFollow(FOLLOW_methodCall_in_valueExpression1089);
        methodCall50=methodCall(null);
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,methodCall50.getTree());
      }
    break;
case 2:
{
    root_0=(EvaluationExpression)adaptor.nil();
    pushFollow(FOLLOW_parenthesesExpression_in_valueExpression1095);
    parenthesesExpression51=parenthesesExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,parenthesesExpression51.getTree());
  }
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_literal_in_valueExpression1101);
literal52=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal52.getTree());
}
break;
case 4:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_streamIndexAccess_in_valueExpression1108);
streamIndexAccess53=streamIndexAccess();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,streamIndexAccess53.getTree());
}
break;
case 5:
{
VAR54=(Token)match(input,VAR,FOLLOW_VAR_in_valueExpression1113);
if (state.failed) return retval;
if (state.backtracking == 0) stream_VAR.add(VAR54);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,makePath(VAR54));
}
retval.tree=root_0;
}
}
break;
case 6:
{
ID55=(Token)match(input,ID,FOLLOW_ID_in_valueExpression1123);
if (state.failed) return retval;
if (state.backtracking == 0) stream_ID.add(ID55);
if (!((hasBinding(ID55,EvaluationExpression.class)))) {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
throw new FailedPredicateException(input,"valueExpression"," hasBinding($ID, EvaluationExpression.class) ");
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,getBinding(ID55,EvaluationExpression.class));
}
retval.tree=root_0;
}
}
break;
case 7:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_arrayCreation_in_valueExpression1135);
arrayCreation56=arrayCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arrayCreation56.getTree());
}
break;
case 8:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_objectCreation_in_valueExpression1141);
objectCreation57=objectCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,objectCreation57.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,22,valueExpression_StartIndex);
}
}
return retval;
}
