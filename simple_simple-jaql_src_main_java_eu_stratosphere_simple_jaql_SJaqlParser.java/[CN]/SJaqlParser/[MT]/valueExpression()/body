{
  SJaqlParser.valueExpression_return retval=new SJaqlParser.valueExpression_return();
  retval.start=input.LT(1);
  int valueExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token VAR45=null;
  Token ID46=null;
  SJaqlParser.functionCall_return functionCall42=null;
  SJaqlParser.parenthesesExpression_return parenthesesExpression43=null;
  SJaqlParser.literal_return literal44=null;
  SJaqlParser.arrayCreation_return arrayCreation47=null;
  SJaqlParser.objectCreation_return objectCreation48=null;
  SJaqlParser.operatorExpression_return operatorExpression49=null;
  EvaluationExpression VAR45_tree=null;
  EvaluationExpression ID46_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,19)) {
      return retval;
    }
    int alt23=8;
    alt23=dfa23.predict(input);
switch (alt23) {
case 1:
{
        root_0=(EvaluationExpression)adaptor.nil();
        pushFollow(FOLLOW_functionCall_in_valueExpression969);
        functionCall42=functionCall();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,functionCall42.getTree());
      }
    break;
case 2:
{
    root_0=(EvaluationExpression)adaptor.nil();
    pushFollow(FOLLOW_parenthesesExpression_in_valueExpression975);
    parenthesesExpression43=parenthesesExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,parenthesesExpression43.getTree());
  }
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_literal_in_valueExpression981);
literal44=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal44.getTree());
}
break;
case 4:
{
VAR45=(Token)match(input,VAR,FOLLOW_VAR_in_valueExpression987);
if (state.failed) return retval;
if (state.backtracking == 0) stream_VAR.add(VAR45);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,makePath(VAR45));
}
retval.tree=root_0;
}
}
break;
case 5:
{
ID46=(Token)match(input,ID,FOLLOW_ID_in_valueExpression996);
if (state.failed) return retval;
if (state.backtracking == 0) stream_ID.add(ID46);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,getVariable(ID46,EvaluationExpression.class));
}
retval.tree=root_0;
}
}
break;
case 6:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_arrayCreation_in_valueExpression1005);
arrayCreation47=arrayCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arrayCreation47.getTree());
}
break;
case 7:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_objectCreation_in_valueExpression1011);
objectCreation48=objectCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,objectCreation48.getTree());
}
break;
case 8:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_operatorExpression_in_valueExpression1017);
operatorExpression49=operatorExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,operatorExpression49.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,19,valueExpression_StartIndex);
}
}
return retval;
}
