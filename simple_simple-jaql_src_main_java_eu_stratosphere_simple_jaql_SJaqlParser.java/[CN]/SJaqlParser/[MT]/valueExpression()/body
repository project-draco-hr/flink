{
  SJaqlParser.valueExpression_return retval=new SJaqlParser.valueExpression_return();
  retval.start=input.LT(1);
  int valueExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token VAR31=null;
  SJaqlParser.functionCall_return functionCall28=null;
  SJaqlParser.parenthesesExpression_return parenthesesExpression29=null;
  SJaqlParser.literal_return literal30=null;
  SJaqlParser.arrayCreation_return arrayCreation32=null;
  SJaqlParser.objectCreation_return objectCreation33=null;
  SJaqlParser.operatorExpression_return operatorExpression34=null;
  EvaluationExpression VAR31_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,14)) {
      return retval;
    }
    int alt18=7;
switch (input.LA(1)) {
case ID:
{
        int LA18_1=input.LA(2);
        if ((LA18_1 == 47)) {
          alt18=1;
        }
 else         if (((LA18_1 >= VAR && LA18_1 <= ID) || LA18_1 == 60)) {
          alt18=7;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",18,1,input);
          throw nvae;
        }
      }
    break;
case 47:
{
    alt18=2;
  }
break;
case DECIMAL:
case STRING:
case INTEGER:
case UINT:
case 53:
case 54:
{
alt18=3;
}
break;
case VAR:
{
alt18=4;
}
break;
case 55:
{
alt18=5;
}
break;
case 51:
{
alt18=6;
}
break;
case 57:
case 58:
{
alt18=7;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",18,0,input);
throw nvae;
}
switch (alt18) {
case 1:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_functionCall_in_valueExpression733);
functionCall28=functionCall();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,functionCall28.getTree());
}
break;
case 2:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_parenthesesExpression_in_valueExpression739);
parenthesesExpression29=parenthesesExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,parenthesesExpression29.getTree());
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_literal_in_valueExpression745);
literal30=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal30.getTree());
}
break;
case 4:
{
VAR31=(Token)match(input,VAR,FOLLOW_VAR_in_valueExpression751);
if (state.failed) return retval;
if (state.backtracking == 0) stream_VAR.add(VAR31);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
adaptor.addChild(root_0,makePath(VAR31));
}
retval.tree=root_0;
}
}
break;
case 5:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_arrayCreation_in_valueExpression760);
arrayCreation32=arrayCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arrayCreation32.getTree());
}
break;
case 6:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_objectCreation_in_valueExpression766);
objectCreation33=objectCreation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,objectCreation33.getTree());
}
break;
case 7:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_operatorExpression_in_valueExpression772);
operatorExpression34=operatorExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,operatorExpression34.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,14,valueExpression_StartIndex);
}
}
return retval;
}
