{
  SJaqlParser.ternaryExpression_return retval=new SJaqlParser.ternaryExpression_return();
  retval.start=input.LT(1);
  int ternaryExpression_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token char_literal23=null;
  Token char_literal24=null;
  Token string_literal25=null;
  SJaqlParser.orExpression_return ifClause=null;
  SJaqlParser.expression_return ifExpr=null;
  SJaqlParser.expression_return elseExpr=null;
  SJaqlParser.orExpression_return ifExpr2=null;
  SJaqlParser.expression_return ifClause2=null;
  SJaqlParser.orExpression_return orExpression26=null;
  EvaluationExpression char_literal23_tree=null;
  EvaluationExpression char_literal24_tree=null;
  EvaluationExpression string_literal25_tree=null;
  RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
  RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
  RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,9)) {
      return retval;
    }
    int alt6=3;
    alt6=dfa6.predict(input);
switch (alt6) {
case 1:
{
        pushFollow(FOLLOW_orExpression_in_ternaryExpression351);
        ifClause=orExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_orExpression.add(ifClause.getTree());
{
          char_literal23=(Token)match(input,34,FOLLOW_34_in_ternaryExpression354);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_34.add(char_literal23);
          int alt5=2;
          int LA5_0=input.LA(1);
          if (((LA5_0 >= ID && LA5_0 <= STRING) || (LA5_0 >= DECIMAL && LA5_0 <= UINT) || LA5_0 == 30 || (LA5_0 >= 52 && LA5_0 <= 55) || LA5_0 == 58 || (LA5_0 >= 60 && LA5_0 <= 63) || (LA5_0 >= 65 && LA5_0 <= 66))) {
            alt5=1;
          }
switch (alt5) {
case 1:
{
              pushFollow(FOLLOW_expression_in_ternaryExpression358);
              ifExpr=expression();
              state._fsp--;
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_expression.add(ifExpr.getTree());
            }
          break;
      }
      char_literal24=(Token)match(input,35,FOLLOW_35_in_ternaryExpression361);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_35.add(char_literal24);
      pushFollow(FOLLOW_expression_in_ternaryExpression365);
      elseExpr=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(elseExpr.getTree());
    }
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      RewriteRuleSubtreeStream stream_ifClause=new RewriteRuleSubtreeStream(adaptor,"rule ifClause",ifClause != null ? ifClause.tree : null);
      root_0=(EvaluationExpression)adaptor.nil();
{
{
          EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
          root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"TernaryExpression"),root_1);
          adaptor.addChild(root_1,stream_ifClause.nextTree());
          adaptor.addChild(root_1,ifExpr == null ? EvaluationExpression.VALUE : (ifExpr != null ? ((EvaluationExpression)ifExpr.tree) : null));
          adaptor.addChild(root_1,(elseExpr != null ? ((EvaluationExpression)elseExpr.tree) : null));
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
case 2:
{
pushFollow(FOLLOW_orExpression_in_ternaryExpression388);
ifExpr2=orExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_orExpression.add(ifExpr2.getTree());
string_literal25=(Token)match(input,36,FOLLOW_36_in_ternaryExpression390);
if (state.failed) return retval;
if (state.backtracking == 0) stream_36.add(string_literal25);
pushFollow(FOLLOW_expression_in_ternaryExpression394);
ifClause2=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_expression.add(ifClause2.getTree());
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  RewriteRuleSubtreeStream stream_ifExpr2=new RewriteRuleSubtreeStream(adaptor,"rule ifExpr2",ifExpr2 != null ? ifExpr2.tree : null);
  RewriteRuleSubtreeStream stream_ifClause2=new RewriteRuleSubtreeStream(adaptor,"rule ifClause2",ifClause2 != null ? ifClause2.tree : null);
  root_0=(EvaluationExpression)adaptor.nil();
{
{
      EvaluationExpression root_1=(EvaluationExpression)adaptor.nil();
      root_1=(EvaluationExpression)adaptor.becomeRoot((EvaluationExpression)adaptor.create(EXPRESSION,"TernaryExpression"),root_1);
      adaptor.addChild(root_1,stream_ifClause2.nextTree());
      adaptor.addChild(root_1,stream_ifExpr2.nextTree());
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
break;
case 3:
{
root_0=(EvaluationExpression)adaptor.nil();
pushFollow(FOLLOW_orExpression_in_ternaryExpression414);
orExpression26=orExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,orExpression26.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,9,ternaryExpression_StartIndex);
}
}
return retval;
}
