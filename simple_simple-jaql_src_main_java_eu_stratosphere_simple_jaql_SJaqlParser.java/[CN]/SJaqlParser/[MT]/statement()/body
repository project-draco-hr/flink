{
  SJaqlParser.statement_return retval=new SJaqlParser.statement_return();
  retval.start=input.LT(1);
  int statement_StartIndex=input.index();
  EvaluationExpression root_0=null;
  SJaqlParser.assignment_return assignment5=null;
  SJaqlParser.operator_return operator6=null;
  SJaqlParser.packageImport_return packageImport7=null;
  RewriteRuleSubtreeStream stream_assignment=new RewriteRuleSubtreeStream(adaptor,"rule assignment");
  RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
  RewriteRuleSubtreeStream stream_packageImport=new RewriteRuleSubtreeStream(adaptor,"rule packageImport");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,2)) {
      return retval;
    }
{
      int alt2=3;
switch (input.LA(1)) {
case VAR:
{
          alt2=1;
        }
      break;
case ID:
case 58:
case 59:
{
      alt2=2;
    }
  break;
case 26:
{
  alt2=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
pushFollow(FOLLOW_assignment_in_statement155);
assignment5=assignment();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_assignment.add(assignment5.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_operator_in_statement159);
operator6=operator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_operator.add(operator6.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_packageImport_in_statement163);
packageImport7=packageImport();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_packageImport.add(packageImport7.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,2,statement_StartIndex);
}
}
return retval;
}
