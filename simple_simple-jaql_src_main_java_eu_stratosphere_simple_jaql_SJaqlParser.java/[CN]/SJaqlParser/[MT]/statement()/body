{
  SJaqlParser.statement_return retval=new SJaqlParser.statement_return();
  retval.start=input.LT(1);
  int statement_StartIndex=input.index();
  EvaluationExpression root_0=null;
  SJaqlParser.assignment_return assignment5=null;
  SJaqlParser.operator_return operator6=null;
  SJaqlParser.packageImport_return packageImport7=null;
  SJaqlParser.functionDefinition_return functionDefinition8=null;
  SJaqlParser.javaudf_return javaudf9=null;
  RewriteRuleSubtreeStream stream_assignment=new RewriteRuleSubtreeStream(adaptor,"rule assignment");
  RewriteRuleSubtreeStream stream_functionDefinition=new RewriteRuleSubtreeStream(adaptor,"rule functionDefinition");
  RewriteRuleSubtreeStream stream_javaudf=new RewriteRuleSubtreeStream(adaptor,"rule javaudf");
  RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
  RewriteRuleSubtreeStream stream_packageImport=new RewriteRuleSubtreeStream(adaptor,"rule packageImport");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,2)) {
      return retval;
    }
{
      int alt2=5;
switch (input.LA(1)) {
case VAR:
{
          alt2=1;
        }
      break;
case 61:
case 62:
{
      alt2=2;
    }
  break;
case ID:
{
  int LA2_3=input.LA(2);
  if ((LA2_3 == 28)) {
    int LA2_5=input.LA(3);
    if ((LA2_5 == 29)) {
      alt2=4;
    }
 else     if ((LA2_5 == 33)) {
      alt2=5;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",2,5,input);
      throw nvae;
    }
  }
 else   if (((LA2_3 >= ID && LA2_3 <= VAR) || LA2_3 == 64)) {
    alt2=2;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",2,3,input);
    throw nvae;
  }
}
break;
case 27:
{
alt2=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
pushFollow(FOLLOW_assignment_in_statement154);
assignment5=assignment();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_assignment.add(assignment5.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_operator_in_statement158);
operator6=operator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_operator.add(operator6.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_packageImport_in_statement162);
packageImport7=packageImport();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_packageImport.add(packageImport7.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_functionDefinition_in_statement166);
functionDefinition8=functionDefinition();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_functionDefinition.add(functionDefinition8.getTree());
}
break;
case 5:
{
pushFollow(FOLLOW_javaudf_in_statement170);
javaudf9=javaudf();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_javaudf.add(javaudf9.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,2,statement_StartIndex);
}
}
return retval;
}
