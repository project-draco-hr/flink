{
  SJaqlParser.operatorOption_return retval=new SJaqlParser.operatorOption_return();
  retval.start=input.LT(1);
  int operatorOption_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  SJaqlParser.expression_return expr=null;
  EvaluationExpression name_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,27)) {
      return retval;
    }
{
      int cnt38=0;
      loop38:       do {
        int alt38=2;
        alt38=dfa38.predict(input);
switch (alt38) {
case 1:
{
            name=(Token)match(input,ID,FOLLOW_ID_in_operatorOption1305);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_ID.add(name);
          }
        break;
default :
      if (cnt38 >= 1)       break loop38;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(38,input);
throw eee;
}
cnt38++;
}
 while (true);
pushFollow(FOLLOW_expression_in_operatorOption1310);
expr=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_expression.add(expr.getTree());
if (state.backtracking == 0) {
((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.setProperty((name != null ? name.getText() : null),(expr != null ? ((EvaluationExpression)expr.tree) : null));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(EvaluationExpression)adaptor.nil();
{
root_0=null;
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
memoize(input,27,operatorOption_StartIndex);
}
}
return retval;
}
