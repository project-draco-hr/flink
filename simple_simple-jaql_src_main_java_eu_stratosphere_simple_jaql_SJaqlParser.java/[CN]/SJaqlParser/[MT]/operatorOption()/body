{
  operatorOption_stack.push(new operatorOption_scope());
  SJaqlParser.operatorOption_return retval=new SJaqlParser.operatorOption_return();
  retval.start=input.LT(1);
  int operatorOption_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token name=null;
  Token moreName=null;
  SJaqlParser.contextAwareExpression_return expr=null;
  EvaluationExpression name_tree=null;
  EvaluationExpression moreName_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_contextAwareExpression=new RewriteRuleSubtreeStream(adaptor,"rule contextAwareExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,36)) {
      return retval;
    }
{
      name=(Token)match(input,ID,FOLLOW_ID_in_operatorOption1920);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(name);
      if (state.backtracking == 0) {
        ((operatorOption_scope)operatorOption_stack.peek()).optionName=(name != null ? name.getText() : null);
      }
      int alt51=2;
      alt51=dfa51.predict(input);
switch (alt51) {
case 1:
{
          if (!((!((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.hasProperty(((operatorOption_scope)operatorOption_stack.peek()).optionName)))) {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            throw new FailedPredicateException(input,"operatorOption","!$genericOperator::operatorInfo.hasProperty($operatorOption::optionName)");
          }
          moreName=(Token)match(input,ID,FOLLOW_ID_in_operatorOption1929);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_ID.add(moreName);
          if (state.backtracking == 0) {
            ((operatorOption_scope)operatorOption_stack.peek()).optionName=(name != null ? name.getText() : null) + " " + (moreName != null ? moreName.getText() : null);
          }
        }
      break;
  }
  pushFollow(FOLLOW_contextAwareExpression_in_operatorOption1939);
  expr=contextAwareExpression(null);
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_contextAwareExpression.add(expr.getTree());
  if (state.backtracking == 0) {
    ((genericOperator_scope)genericOperator_stack.peek()).operatorInfo.setProperty(((operatorOption_scope)operatorOption_stack.peek()).optionName,((operator_scope)operator_stack.peek()).result,(expr != null ? ((EvaluationExpression)expr.tree) : null));
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(EvaluationExpression)adaptor.nil();
{
      root_0=null;
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
  finally {
if (state.backtracking > 0) {
  memoize(input,36,operatorOption_StartIndex);
}
operatorOption_stack.pop();
}
return retval;
}
