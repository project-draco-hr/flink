{
  SJaqlParser.streamIndexAccess_return retval=new SJaqlParser.streamIndexAccess_return();
  retval.start=input.LT(1);
  int streamIndexAccess_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token VAR87=null;
  Token char_literal88=null;
  Token char_literal89=null;
  SJaqlParser.generalPathExpression_return path=null;
  EvaluationExpression VAR87_tree=null;
  EvaluationExpression char_literal88_tree=null;
  EvaluationExpression char_literal89_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
  RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
  RewriteRuleSubtreeStream stream_generalPathExpression=new RewriteRuleSubtreeStream(adaptor,"rule generalPathExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,30)) {
      return retval;
    }
{
      VAR87=(Token)match(input,VAR,FOLLOW_VAR_in_streamIndexAccess1697);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_VAR.add(VAR87);
      if (!((((operator_scope)operator_stack.peek()).result != null && !((operator_scope)operator_stack.peek()).result.getInputs().contains(getBinding(VAR87,JsonStreamExpression.class).getStream().getSource())))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"streamIndexAccess"," $operator::result != null && !$operator::result.getInputs().contains(getBinding($VAR, JsonStreamExpression.class).getStream().getSource()) ");
      }
      char_literal88=(Token)match(input,63,FOLLOW_63_in_streamIndexAccess1707);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_63.add(char_literal88);
      pushFollow(FOLLOW_generalPathExpression_in_streamIndexAccess1711);
      path=generalPathExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_generalPathExpression.add(path.getTree());
      char_literal89=(Token)match(input,64,FOLLOW_64_in_streamIndexAccess1713);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_64.add(char_literal89);
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          adaptor.addChild(root_0,new StreamIndexExpression(getBinding(VAR87,JsonStreamExpression.class).getStream(),(path != null ? ((EvaluationExpression)path.tree) : null)));
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,30,streamIndexAccess_StartIndex);
    }
  }
  return retval;
}
