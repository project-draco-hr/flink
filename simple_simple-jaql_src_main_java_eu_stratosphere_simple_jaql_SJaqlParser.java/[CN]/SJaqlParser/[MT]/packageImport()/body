{
  SJaqlParser.packageImport_return retval=new SJaqlParser.packageImport_return();
  retval.start=input.LT(1);
  int packageImport_StartIndex=input.index();
  EvaluationExpression root_0=null;
  Token packageName=null;
  Token string_literal10=null;
  EvaluationExpression packageName_tree=null;
  EvaluationExpression string_literal10_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_27=new RewriteRuleTokenStream(adaptor,"token 27");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,3)) {
      return retval;
    }
{
      string_literal10=(Token)match(input,27,FOLLOW_27_in_packageImport176);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_27.add(string_literal10);
      packageName=(Token)match(input,ID,FOLLOW_ID_in_packageImport180);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(packageName);
      if (state.backtracking == 0) {
        importPackage((packageName != null ? packageName.getText() : null));
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(EvaluationExpression)adaptor.nil();
{
          root_0=null;
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(EvaluationExpression)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
  finally {
    if (state.backtracking > 0) {
      memoize(input,3,packageImport_StartIndex);
    }
  }
  return retval;
}
