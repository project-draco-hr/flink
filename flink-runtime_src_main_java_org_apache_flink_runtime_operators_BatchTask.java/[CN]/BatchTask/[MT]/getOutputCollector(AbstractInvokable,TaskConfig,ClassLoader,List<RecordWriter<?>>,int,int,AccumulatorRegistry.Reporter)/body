{
  if (numOutputs == 0) {
    return null;
  }
  final TypeSerializerFactory<T> serializerFactory=config.getOutputSerializer(cl);
  final List<RecordWriter<SerializationDelegate<T>>> writers=new ArrayList<>(numOutputs);
  for (int i=0; i < numOutputs; i++) {
    final ShipStrategyType strategy=config.getOutputShipStrategy(i);
    final int indexInSubtaskGroup=task.getIndexInSubtaskGroup();
    final TypeComparatorFactory<T> compFactory=config.getOutputComparator(i,cl);
    final ChannelSelector<SerializationDelegate<T>> oe;
    if (compFactory == null) {
      oe=new OutputEmitter<T>(strategy,indexInSubtaskGroup);
    }
 else {
      final DataDistribution dataDist=config.getOutputDataDistribution(i,cl);
      final Partitioner<?> partitioner=config.getOutputPartitioner(i,cl);
      final TypeComparator<T> comparator=compFactory.createComparator();
      oe=new OutputEmitter<T>(strategy,indexInSubtaskGroup,comparator,partitioner,dataDist);
    }
    final RecordWriter<SerializationDelegate<T>> recordWriter=new RecordWriter<SerializationDelegate<T>>(task.getEnvironment().getWriter(outputOffset + i),oe);
    recordWriter.setReporter(reporter);
    writers.add(recordWriter);
  }
  if (eventualOutputs != null) {
    eventualOutputs.addAll(writers);
  }
  return new OutputCollector<T>(writers,serializerFactory.getSerializer());
}
