{
  super(function);
  if (windowLength < MIN_SLIDE_TIME) {
    throw new IllegalArgumentException("Window length must be at least " + MIN_SLIDE_TIME + " msecs");
  }
  if (windowSlide < MIN_SLIDE_TIME) {
    throw new IllegalArgumentException("Window slide must be at least " + MIN_SLIDE_TIME + " msecs");
  }
  if (windowLength < windowSlide) {
    throw new IllegalArgumentException("The window size must be larger than the window slide");
  }
  final long paneSlide=ArithmeticUtils.gcd(windowLength,windowSlide);
  if (paneSlide < MIN_SLIDE_TIME) {
    throw new IllegalArgumentException(String.format("Cannot compute window of size %d msecs sliding by %d msecs. " + "The unit of grouping is too small: %d msecs",windowLength,windowSlide,paneSlide));
  }
  this.function=requireNonNull(function);
  this.keySelector=requireNonNull(keySelector);
  this.keySerializer=requireNonNull(keySerializer);
  this.stateTypeSerializer=requireNonNull(stateTypeSerializer);
  this.windowSize=windowLength;
  this.windowSlide=windowSlide;
  this.paneSize=paneSlide;
  this.numPanesPerWindow=MathUtils.checkedDownCast(windowLength / paneSlide);
}
