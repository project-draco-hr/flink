{
  super.open();
  out=new TimestampedCollector<>(output);
  final long now=getTimerService().getCurrentProcessingTime();
  nextEvaluationTime=now + windowSlide - (now % windowSlide);
  nextSlideTime=now + paneSize - (now % paneSize);
  final long firstTriggerTime=Math.min(nextEvaluationTime,nextSlideTime);
  if (restoredState == null) {
    panes=createPanes(keySelector,function);
  }
 else {
    panes=restoredState.panes;
    long nextPastEvaluationTime=restoredState.nextEvaluationTime;
    long nextPastSlideTime=restoredState.nextSlideTime;
    long nextPastTriggerTime=Math.min(nextPastEvaluationTime,nextPastSlideTime);
    int numPanesRestored=panes.getNumPanes();
    while (numPanesRestored > 0 && nextPastTriggerTime < firstTriggerTime) {
      if (nextPastTriggerTime == nextPastEvaluationTime) {
        computeWindow(nextPastTriggerTime);
        nextPastEvaluationTime+=windowSlide;
      }
      if (nextPastTriggerTime == nextPastSlideTime) {
        panes.slidePanes(numPanesPerWindow);
        numPanesRestored--;
        nextPastSlideTime+=paneSize;
      }
      nextPastTriggerTime=Math.min(nextPastEvaluationTime,nextPastSlideTime);
    }
  }
  getTimerService().registerTimer(firstTriggerTime,this);
}
