{
  LocalFileSystem localFS=new LocalFileSystem();
  localFS.initialize(new URI("file:///"),new Configuration());
  PowerMockito.stub(PowerMockito.method(FileSystem.class,"get",URI.class,Configuration.class)).toReturn(localFS);
  final OneInputStreamTask<String,String> task=new OneInputStreamTask<>();
  task.setThreadPoolTerminationTimeout(Long.MAX_VALUE);
  final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<>(task,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.configureForKeyedStream(new KeySelector<String,String>(){
    @Override public String getKey(    String value) throws Exception {
      return value;
    }
  }
,BasicTypeInfo.STRING_TYPE_INFO);
  StreamConfig streamConfig=testHarness.getStreamConfig();
  File dbDir=new File(new File(ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH,UUID.randomUUID().toString()),"state");
  File chkDir=new File(new File(ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH,UUID.randomUUID().toString()),"snapshots");
  BlockingStreamMemoryStateBackend memoryStateBackend=new BlockingStreamMemoryStateBackend();
  RocksDBStateBackend backend=new RocksDBStateBackend(chkDir.getAbsoluteFile().toURI(),memoryStateBackend);
  backend.setDbStoragePath(dbDir.getAbsolutePath());
  streamConfig.setStateBackend(backend);
  streamConfig.setStreamOperator(new AsyncCheckpointOperator());
  StreamMockEnvironment mockEnv=new StreamMockEnvironment(testHarness.jobConfig,testHarness.taskConfig,testHarness.memorySize,new MockInputSplitProvider(),testHarness.bufferSize);
  testHarness.invoke(mockEnv);
  for (  Field field : StreamTask.class.getDeclaredFields()) {
    if (field.getName().equals("isRunning")) {
      field.setAccessible(true);
      while (!field.getBoolean(task)) {
        Thread.sleep(10);
      }
    }
  }
  testHarness.processElement(new StreamRecord<>("Wohoo",0));
  task.triggerCheckpoint(42,17);
  BlockingStreamMemoryStateBackend.waitFirstWriteLatch.await();
  task.cancel();
  BlockingStreamMemoryStateBackend.unblockCancelLatch.trigger();
  testHarness.endInput();
  try {
    testHarness.waitForTaskCompletion();
    Assert.fail("Operation completed. Cancel failed.");
  }
 catch (  Exception expected) {
    Throwable cause=expected.getCause();
    if (cause instanceof AsynchronousException) {
      AsynchronousException asynchronousException=(AsynchronousException)cause;
      cause=asynchronousException.getCause();
      Assert.assertTrue("Unexpected Exception: " + cause,cause instanceof CancellationException || cause instanceof InterruptedException);
    }
 else {
      Assert.fail();
    }
  }
}
