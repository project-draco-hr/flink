{
  return new MemCheckpointStreamFactory(4 * 1024 * 1024){
    @Override public CheckpointStateOutputStream createCheckpointStateOutputStream(    long checkpointID,    long timestamp) throws Exception {
      return new MemoryCheckpointOutputStream(4 * 1024 * 1024){
        @Override public void write(        int b) throws IOException {
          waitFirstWriteLatch.trigger();
          try {
            unblockCancelLatch.await();
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
          if (closed) {
            throw new IOException("Stream closed.");
          }
          super.write(b);
        }
        @Override public void write(        byte[] b,        int off,        int len) throws IOException {
          waitFirstWriteLatch.trigger();
          try {
            unblockCancelLatch.await();
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
          if (closed) {
            throw new IOException("Stream closed.");
          }
          super.write(b,off,len);
        }
        @Override public void close(){
          closed=true;
          super.close();
        }
      }
;
    }
  }
;
}
