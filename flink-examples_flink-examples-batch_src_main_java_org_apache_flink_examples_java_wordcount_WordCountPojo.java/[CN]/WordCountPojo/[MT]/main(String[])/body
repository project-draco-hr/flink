{
  final ParameterTool params=ParameterTool.fromArgs(args);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().setGlobalJobParameters(params);
  DataSet<String> text;
  if (params.has("input")) {
    text=env.readTextFile(params.get("input"));
  }
 else {
    System.out.println("Executing WordCount example with default input data set.");
    System.out.println("Use --input to specify file input.");
    text=WordCountData.getDefaultTextLineDataSet(env);
  }
  DataSet<Word> counts=text.flatMap(new Tokenizer()).groupBy("word").reduce(new ReduceFunction<Word>(){
    @Override public Word reduce(    Word value1,    Word value2) throws Exception {
      return new Word(value1.word,value1.frequency + value2.frequency);
    }
  }
);
  if (params.has("output")) {
    counts.writeAsText(params.get("output"),WriteMode.OVERWRITE);
    env.execute("WordCount-Pojo Example");
  }
 else {
    System.out.println("Printing result to stdout. Use --output to specify output path.");
    counts.print();
  }
}
