{
  Map<Counter,Tuple2<QueryScopeInfo,String>> counters=new HashMap<>();
  Map<Gauge<?>,Tuple2<QueryScopeInfo,String>> gauges=new HashMap<>();
  Map<Histogram,Tuple2<QueryScopeInfo,String>> histograms=new HashMap<>();
  Map<Meter,Tuple2<QueryScopeInfo,String>> meters=new HashMap<>();
  SimpleCounter c1=new SimpleCounter();
  SimpleCounter c2=new SimpleCounter();
  c1.inc(1);
  c2.inc(2);
  counters.put(c1,new Tuple2<QueryScopeInfo,String>(new QueryScopeInfo.OperatorQueryScopeInfo(jobID.toString(),"taskid",2,"opname","abc"),"oc"));
  counters.put(c2,new Tuple2<QueryScopeInfo,String>(new QueryScopeInfo.TaskQueryScopeInfo(jobID.toString(),"taskid",2,"abc"),"tc"));
  meters.put(new Meter(){
    @Override public void markEvent(){
    }
    @Override public void markEvent(    long n){
    }
    @Override public double getRate(){
      return 5;
    }
    @Override public long getCount(){
      return 10;
    }
  }
,new Tuple2<QueryScopeInfo,String>(new QueryScopeInfo.JobQueryScopeInfo(jobID.toString(),"abc"),"jc"));
  gauges.put(new Gauge<String>(){
    @Override public String getValue(){
      return "x";
    }
  }
,new Tuple2<QueryScopeInfo,String>(new QueryScopeInfo.TaskManagerQueryScopeInfo(tmID.toString(),"abc"),"gauge"));
  histograms.put(new TestingHistogram(),new Tuple2<QueryScopeInfo,String>(new QueryScopeInfo.JobManagerQueryScopeInfo("abc"),"hist"));
  MetricDumpSerialization.MetricDumpSerializer serializer=new MetricDumpSerialization.MetricDumpSerializer();
  byte[] dump=serializer.serialize(counters,gauges,histograms,meters);
  serializer.close();
  return dump;
}
