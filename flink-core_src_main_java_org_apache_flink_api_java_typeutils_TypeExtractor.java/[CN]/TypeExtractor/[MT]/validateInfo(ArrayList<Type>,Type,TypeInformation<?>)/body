{
  if (type == null) {
    throw new InvalidTypesException("Unknown Error. Type is null.");
  }
  if (typeInfo == null) {
    throw new InvalidTypesException("Unknown Error. TypeInformation is null.");
  }
  if (!(type instanceof TypeVariable<?>)) {
    if (typeInfo instanceof BasicTypeInfo) {
      TypeInformation<?> actual;
      if (!(type instanceof Class<?>) || (actual=BasicTypeInfo.getInfoFor((Class<?>)type)) == null) {
        throw new InvalidTypesException("Basic type expected.");
      }
      if (!typeInfo.equals(actual)) {
        throw new InvalidTypesException("Basic type '" + typeInfo + "' expected but was '"+ actual+ "'.");
      }
    }
 else     if (typeInfo instanceof SqlTimeTypeInfo) {
      TypeInformation<?> actual;
      if (!(type instanceof Class<?>) || (actual=SqlTimeTypeInfo.getInfoFor((Class<?>)type)) == null) {
        throw new InvalidTypesException("SQL time type expected.");
      }
      if (!typeInfo.equals(actual)) {
        throw new InvalidTypesException("SQL time type '" + typeInfo + "' expected but was '"+ actual+ "'.");
      }
    }
 else     if (typeInfo instanceof TupleTypeInfo) {
      if (!(isClassType(type) && Tuple.class.isAssignableFrom(typeToClass(type)))) {
        throw new InvalidTypesException("Tuple type expected.");
      }
      if (isClassType(type) && typeToClass(type).equals(Tuple.class)) {
        throw new InvalidTypesException("Concrete subclass of Tuple expected.");
      }
      while (!(isClassType(type) && typeToClass(type).getSuperclass().equals(Tuple.class))) {
        typeHierarchy.add(type);
        type=typeToClass(type).getGenericSuperclass();
      }
      if (type == Tuple0.class) {
        return;
      }
      if (type instanceof Class<?>) {
        throw new InvalidTypesException("Parameterized Tuple type expected.");
      }
      TupleTypeInfo<?> tti=(TupleTypeInfo<?>)typeInfo;
      Type[] subTypes=((ParameterizedType)type).getActualTypeArguments();
      if (subTypes.length != tti.getArity()) {
        throw new InvalidTypesException("Tuple arity '" + tti.getArity() + "' expected but was '"+ subTypes.length+ "'.");
      }
      for (int i=0; i < subTypes.length; i++) {
        validateInfo(new ArrayList<Type>(typeHierarchy),subTypes[i],tti.getTypeAt(i));
      }
    }
 else     if (typeInfo instanceof EitherTypeInfo) {
      if (!(isClassType(type) && Either.class.isAssignableFrom(typeToClass(type)))) {
        throw new InvalidTypesException("Either type expected.");
      }
      while (!(isClassType(type) && typeToClass(type).equals(Either.class))) {
        typeHierarchy.add(type);
        type=typeToClass(type).getGenericSuperclass();
      }
      if (type instanceof Class<?>) {
        throw new InvalidTypesException("Parameterized Either type expected.");
      }
      EitherTypeInfo<?,?> eti=(EitherTypeInfo<?,?>)typeInfo;
      Type[] subTypes=((ParameterizedType)type).getActualTypeArguments();
      validateInfo(new ArrayList<Type>(typeHierarchy),subTypes[0],eti.getLeftType());
      validateInfo(new ArrayList<Type>(typeHierarchy),subTypes[1],eti.getRightType());
    }
 else     if (typeInfo instanceof WritableTypeInfo<?>) {
      if (!(type instanceof Class<?> && Writable.class.isAssignableFrom((Class<?>)type))) {
        throw new InvalidTypesException("Writable type expected.");
      }
      Class<?> clazz;
      if (((WritableTypeInfo<?>)typeInfo).getTypeClass() != (clazz=(Class<?>)type)) {
        throw new InvalidTypesException("Writable type '" + ((WritableTypeInfo<?>)typeInfo).getTypeClass().getCanonicalName() + "' expected but was '"+ clazz.getCanonicalName()+ "'.");
      }
    }
 else     if (typeInfo instanceof PrimitiveArrayTypeInfo) {
      Type component;
      if (!(type instanceof Class<?> && ((Class<?>)type).isArray() && (component=((Class<?>)type).getComponentType()) != null) && !(type instanceof GenericArrayType && (component=((GenericArrayType)type).getGenericComponentType()) != null)) {
        throw new InvalidTypesException("Array type expected.");
      }
      if (component instanceof TypeVariable<?>) {
        component=materializeTypeVariable(typeHierarchy,(TypeVariable<?>)component);
        if (component instanceof TypeVariable) {
          return;
        }
      }
      if (!(component instanceof Class<?> && ((Class<?>)component).isPrimitive())) {
        throw new InvalidTypesException("Primitive component expected.");
      }
    }
 else     if (typeInfo instanceof BasicArrayTypeInfo<?,?>) {
      Type component;
      if (!(type instanceof Class<?> && ((Class<?>)type).isArray() && (component=((Class<?>)type).getComponentType()) != null) && !(type instanceof GenericArrayType && (component=((GenericArrayType)type).getGenericComponentType()) != null)) {
        throw new InvalidTypesException("Array type expected.");
      }
      if (component instanceof TypeVariable<?>) {
        component=materializeTypeVariable(typeHierarchy,(TypeVariable<?>)component);
        if (component instanceof TypeVariable) {
          return;
        }
      }
      validateInfo(typeHierarchy,component,((BasicArrayTypeInfo<?,?>)typeInfo).getComponentInfo());
    }
 else     if (typeInfo instanceof ObjectArrayTypeInfo<?,?>) {
      if (!(type instanceof Class<?> && ((Class<?>)type).isArray()) && !(type instanceof GenericArrayType)) {
        throw new InvalidTypesException("Object array type expected.");
      }
      Type component;
      if (type instanceof Class<?>) {
        component=((Class<?>)type).getComponentType();
      }
 else {
        component=((GenericArrayType)type).getGenericComponentType();
      }
      if (component instanceof TypeVariable<?>) {
        component=materializeTypeVariable(typeHierarchy,(TypeVariable<?>)component);
        if (component instanceof TypeVariable) {
          return;
        }
      }
      validateInfo(typeHierarchy,component,((ObjectArrayTypeInfo<?,?>)typeInfo).getComponentInfo());
    }
 else     if (typeInfo instanceof ValueTypeInfo<?>) {
      if (!(type instanceof Class<?> && Value.class.isAssignableFrom((Class<?>)type))) {
        throw new InvalidTypesException("Value type expected.");
      }
      TypeInformation<?> actual;
      if (!((ValueTypeInfo<?>)typeInfo).equals(actual=ValueTypeInfo.getValueTypeInfo((Class<? extends Value>)type))) {
        throw new InvalidTypesException("Value type '" + typeInfo + "' expected but was '"+ actual+ "'.");
      }
    }
 else     if (typeInfo instanceof PojoTypeInfo) {
      Class<?> clazz=null;
      if (!(isClassType(type) && ((PojoTypeInfo<?>)typeInfo).getTypeClass() == (clazz=typeToClass(type)))) {
        throw new InvalidTypesException("POJO type '" + ((PojoTypeInfo<?>)typeInfo).getTypeClass().getCanonicalName() + "' expected but was '"+ clazz.getCanonicalName()+ "'.");
      }
    }
 else     if (typeInfo instanceof EnumTypeInfo) {
      if (!(type instanceof Class<?> && Enum.class.isAssignableFrom((Class<?>)type))) {
        throw new InvalidTypesException("Enum type expected.");
      }
      if (!(typeInfo.getTypeClass() == type)) {
        throw new InvalidTypesException("Enum type '" + typeInfo.getTypeClass().getCanonicalName() + "' expected but was '"+ typeToClass(type).getCanonicalName()+ "'.");
      }
    }
 else     if (typeInfo instanceof GenericTypeInfo<?>) {
      Class<?> clazz=null;
      if (!(isClassType(type) && (clazz=typeToClass(type)).isAssignableFrom(((GenericTypeInfo<?>)typeInfo).getTypeClass()))) {
        throw new InvalidTypesException("Generic type '" + ((GenericTypeInfo<?>)typeInfo).getTypeClass().getCanonicalName() + "' or a subclass of it expected but was '"+ clazz.getCanonicalName()+ "'.");
      }
    }
  }
 else {
    type=materializeTypeVariable(typeHierarchy,(TypeVariable<?>)type);
    if (!(type instanceof TypeVariable)) {
      validateInfo(typeHierarchy,type,typeInfo);
    }
  }
}
