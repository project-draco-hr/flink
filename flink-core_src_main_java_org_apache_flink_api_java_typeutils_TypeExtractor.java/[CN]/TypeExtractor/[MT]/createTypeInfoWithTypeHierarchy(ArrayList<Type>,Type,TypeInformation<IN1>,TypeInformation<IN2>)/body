{
  final TypeInformation<OUT> typeFromFactory=createTypeInfoFromFactory(t,typeHierarchy,in1Type,in2Type);
  if (typeFromFactory != null) {
    return typeFromFactory;
  }
 else   if (isClassType(t) && Tuple.class.isAssignableFrom(typeToClass(t))) {
    Type curT=t;
    if (typeToClass(t).equals(Tuple.class)) {
      throw new InvalidTypesException("Usage of class Tuple as a type is not allowed. Use a concrete subclass (e.g. Tuple1, Tuple2, etc.) instead.");
    }
    while (!(isClassType(curT) && typeToClass(curT).getSuperclass().equals(Tuple.class))) {
      typeHierarchy.add(curT);
      curT=typeToClass(curT).getGenericSuperclass();
    }
    if (curT == Tuple0.class) {
      return new TupleTypeInfo(Tuple0.class);
    }
    if (curT instanceof Class<?>) {
      throw new InvalidTypesException("Tuple needs to be parameterized by using generics.");
    }
    typeHierarchy.add(curT);
    final TypeInformation<?>[] subTypesInfo=createSubTypesInfo(t,(ParameterizedType)curT,typeHierarchy,in1Type,in2Type,false);
    if (subTypesInfo == null) {
      if (t instanceof ParameterizedType) {
        return (TypeInformation<OUT>)analyzePojo(typeToClass(t),new ArrayList<Type>(typeHierarchy),(ParameterizedType)t,in1Type,in2Type);
      }
 else {
        return (TypeInformation<OUT>)analyzePojo(typeToClass(t),new ArrayList<Type>(typeHierarchy),null,in1Type,in2Type);
      }
    }
    return new TupleTypeInfo(typeToClass(t),subTypesInfo);
  }
 else   if (isClassType(t) && Either.class.isAssignableFrom(typeToClass(t))) {
    Type curT=t;
    while (!(isClassType(curT) && typeToClass(curT).equals(Either.class))) {
      typeHierarchy.add(curT);
      curT=typeToClass(curT).getGenericSuperclass();
    }
    if (curT instanceof Class<?>) {
      throw new InvalidTypesException("Either needs to be parameterized by using generics.");
    }
    typeHierarchy.add(curT);
    final TypeInformation<?>[] subTypesInfo=createSubTypesInfo(t,(ParameterizedType)curT,typeHierarchy,in1Type,in2Type,false);
    if (subTypesInfo == null) {
      if (t instanceof ParameterizedType) {
        return (TypeInformation<OUT>)analyzePojo(typeToClass(t),new ArrayList<Type>(typeHierarchy),(ParameterizedType)t,in1Type,in2Type);
      }
 else {
        return (TypeInformation<OUT>)analyzePojo(typeToClass(t),new ArrayList<Type>(typeHierarchy),null,in1Type,in2Type);
      }
    }
    return (TypeInformation<OUT>)new EitherTypeInfo(subTypesInfo[0],subTypesInfo[1]);
  }
 else   if (t instanceof TypeVariable) {
    Type typeVar=materializeTypeVariable(typeHierarchy,(TypeVariable<?>)t);
    if (!(typeVar instanceof TypeVariable)) {
      return createTypeInfoWithTypeHierarchy(typeHierarchy,typeVar,in1Type,in2Type);
    }
 else {
      TypeInformation<OUT> typeInfo=(TypeInformation<OUT>)createTypeInfoFromInputs((TypeVariable<?>)t,typeHierarchy,in1Type,in2Type);
      if (typeInfo != null) {
        return typeInfo;
      }
 else {
        throw new InvalidTypesException("Type of TypeVariable '" + ((TypeVariable<?>)t).getName() + "' in '"+ ((TypeVariable<?>)t).getGenericDeclaration()+ "' could not be determined. This is most likely a type erasure problem. "+ "The type extraction currently supports types with generic variables only in cases where "+ "all variables in the return type can be deduced from the input type(s).");
      }
    }
  }
 else   if (t instanceof GenericArrayType) {
    GenericArrayType genericArray=(GenericArrayType)t;
    Type componentType=genericArray.getGenericComponentType();
    if (componentType instanceof Class) {
      Class<?> componentClass=(Class<?>)componentType;
      String className;
      if (componentClass.isPrimitive()) {
        className=encodePrimitiveClass(componentClass);
      }
 else {
        className="L" + componentClass.getName() + ";";
      }
      Class<OUT> classArray;
      try {
        classArray=(Class<OUT>)Class.forName("[" + className);
      }
 catch (      ClassNotFoundException e) {
        throw new InvalidTypesException("Could not convert GenericArrayType to Class.");
      }
      return getForClass(classArray);
    }
 else {
      TypeInformation<?> componentInfo=createTypeInfoWithTypeHierarchy(typeHierarchy,genericArray.getGenericComponentType(),in1Type,in2Type);
      Class<OUT> classArray;
      try {
        String componentClassName=componentInfo.getTypeClass().getName();
        String resultingClassName;
        if (componentClassName.startsWith("[")) {
          resultingClassName="[" + componentClassName;
        }
 else {
          resultingClassName="[L" + componentClassName + ";";
        }
        classArray=(Class<OUT>)Class.forName(resultingClassName);
      }
 catch (      ClassNotFoundException e) {
        throw new InvalidTypesException("Could not convert GenericArrayType to Class.");
      }
      return ObjectArrayTypeInfo.getInfoFor(classArray,componentInfo);
    }
  }
 else   if (t instanceof ParameterizedType) {
    return (TypeInformation<OUT>)privateGetForClass(typeToClass(t),typeHierarchy,(ParameterizedType)t,in1Type,in2Type);
  }
 else   if (t instanceof Class) {
    return privateGetForClass((Class<OUT>)t,typeHierarchy);
  }
  throw new InvalidTypesException("Type Information could not be created.");
}
