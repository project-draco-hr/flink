{
  Type matReturnTypeVar=materializeTypeVariable(returnTypeHierarchy,returnTypeVar);
  if (!(matReturnTypeVar instanceof TypeVariable)) {
    return createTypeInfoWithTypeHierarchy(returnTypeHierarchy,matReturnTypeVar,in1TypeInfo,in2TypeInfo);
  }
 else {
    returnTypeVar=(TypeVariable<?>)matReturnTypeVar;
  }
  if (in1TypeInfo == null && in2TypeInfo == null) {
    return null;
  }
  ArrayList<Type> inputTypeHierarchy=new ArrayList<Type>();
  for (  Type t : returnTypeHierarchy) {
    if (isClassType(t) && Function.class.isAssignableFrom(typeToClass(t)) && typeToClass(t) != Function.class) {
      inputTypeHierarchy.add(t);
    }
 else {
      break;
    }
  }
  ParameterizedType baseClass=(ParameterizedType)inputTypeHierarchy.get(inputTypeHierarchy.size() - 1);
  TypeInformation<?> info=null;
  if (in1TypeInfo != null) {
    Type in1Type=baseClass.getActualTypeArguments()[0];
    info=createTypeInfoFromInput(returnTypeVar,new ArrayList<Type>(inputTypeHierarchy),in1Type,in1TypeInfo);
  }
  if (info == null && in2TypeInfo != null) {
    Type in2Type=baseClass.getActualTypeArguments()[1];
    info=createTypeInfoFromInput(returnTypeVar,new ArrayList<Type>(inputTypeHierarchy),in2Type,in2TypeInfo);
  }
  if (info != null) {
    return info;
  }
  return null;
}
