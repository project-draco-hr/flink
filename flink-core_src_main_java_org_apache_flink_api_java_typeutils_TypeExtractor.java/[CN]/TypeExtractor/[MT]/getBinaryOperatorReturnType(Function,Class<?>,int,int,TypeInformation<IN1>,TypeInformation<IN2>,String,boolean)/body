{
  try {
    final Method m=FunctionUtils.checkAndExtractLambdaMethod(function);
    if (m != null) {
      validateLambdaGenericParameters(m);
      final int paramLen=m.getGenericParameterTypes().length - 1;
      final Type input1=(outputTypeArgumentIndex >= 0) ? m.getGenericParameterTypes()[paramLen - 2] : m.getGenericParameterTypes()[paramLen - 1];
      final Type input2=(outputTypeArgumentIndex >= 0) ? m.getGenericParameterTypes()[paramLen - 1] : m.getGenericParameterTypes()[paramLen];
      validateInputType((inputTypeArgumentIndex >= 0) ? extractTypeArgument(input1,inputTypeArgumentIndex) : input1,in1Type);
      validateInputType((inputTypeArgumentIndex >= 0) ? extractTypeArgument(input2,inputTypeArgumentIndex) : input2,in2Type);
      if (function instanceof ResultTypeQueryable) {
        return ((ResultTypeQueryable<OUT>)function).getProducedType();
      }
      return new TypeExtractor().privateCreateTypeInfo((outputTypeArgumentIndex >= 0) ? extractTypeArgument(m.getGenericParameterTypes()[paramLen],outputTypeArgumentIndex) : m.getGenericReturnType(),in1Type,in2Type);
    }
 else {
      validateInputType(baseClass,function.getClass(),0,in1Type);
      validateInputType(baseClass,function.getClass(),1,in2Type);
      if (function instanceof ResultTypeQueryable) {
        return ((ResultTypeQueryable<OUT>)function).getProducedType();
      }
      return new TypeExtractor().privateCreateTypeInfo(baseClass,function.getClass(),2,in1Type,in2Type);
    }
  }
 catch (  InvalidTypesException e) {
    if (allowMissing) {
      return (TypeInformation<OUT>)new MissingTypeInfo(functionName != null ? functionName : function.toString(),e);
    }
 else {
      throw e;
    }
  }
}
