{
  try {
    final Method m=FunctionUtils.checkAndExtractLambdaMethod(function);
    if (m != null) {
      validateLambdaGenericParameters(m);
      final int paramLen=m.getGenericParameterTypes().length - 1;
      final Type input=(hasCollector) ? m.getGenericParameterTypes()[paramLen - 1] : m.getGenericParameterTypes()[paramLen];
      validateInputType((hasIterable) ? removeGenericWrapper(input) : input,inType);
      if (function instanceof ResultTypeQueryable) {
        return ((ResultTypeQueryable<OUT>)function).getProducedType();
      }
      return new TypeExtractor().privateCreateTypeInfo((hasCollector) ? removeGenericWrapper(m.getGenericParameterTypes()[paramLen]) : m.getGenericReturnType(),inType,null);
    }
 else {
      validateInputType(baseClass,function.getClass(),0,inType);
      if (function instanceof ResultTypeQueryable) {
        return ((ResultTypeQueryable<OUT>)function).getProducedType();
      }
      return new TypeExtractor().privateCreateTypeInfo(baseClass,function.getClass(),1,inType,null);
    }
  }
 catch (  InvalidTypesException e) {
    if (allowMissing) {
      return (TypeInformation<OUT>)new MissingTypeInfo(functionName != null ? functionName : function.toString(),e);
    }
 else {
      throw e;
    }
  }
}
