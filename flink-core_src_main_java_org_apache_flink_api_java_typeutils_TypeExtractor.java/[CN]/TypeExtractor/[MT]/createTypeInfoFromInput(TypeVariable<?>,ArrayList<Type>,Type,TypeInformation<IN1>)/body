{
  TypeInformation<?> info=null;
  final ArrayList<Type> factoryHierarchy=new ArrayList<>(inputTypeHierarchy);
  final TypeInfoFactory<?> factory=getClosestFactory(factoryHierarchy,inType);
  if (factory != null) {
    final Type factoryDefiningType=factoryHierarchy.get(factoryHierarchy.size() - 1);
    if (factoryDefiningType instanceof ParameterizedType) {
      final Type[] typeParams=typeToClass(factoryDefiningType).getTypeParameters();
      final Type[] actualParams=((ParameterizedType)factoryDefiningType).getActualTypeArguments();
      for (int i=0; i < actualParams.length; i++) {
        final Map<String,TypeInformation<?>> componentInfo=inTypeInfo.getGenericParameters();
        final String typeParamName=typeParams[i].toString();
        if (!componentInfo.containsKey(typeParamName) || componentInfo.get(typeParamName) == null) {
          throw new InvalidTypesException("TypeInformation '" + inTypeInfo.getClass().getSimpleName() + "' does not supply a mapping of TypeVariable '"+ typeParamName+ "' to corresponding TypeInformation. "+ "Input type inference can only produce a result with this information. "+ "Please implement method 'TypeInformation.getGenericParameters()' for this.");
        }
        info=createTypeInfoFromInput(returnTypeVar,factoryHierarchy,actualParams[i],componentInfo.get(typeParamName));
        if (info != null) {
          break;
        }
      }
    }
  }
 else   if (inType instanceof TypeVariable) {
    inType=materializeTypeVariable(inputTypeHierarchy,(TypeVariable<?>)inType);
    info=findCorrespondingInfo(returnTypeVar,inType,inTypeInfo,inputTypeHierarchy);
  }
 else   if (inType instanceof GenericArrayType) {
    TypeInformation<?> componentInfo=null;
    if (inTypeInfo instanceof BasicArrayTypeInfo) {
      componentInfo=((BasicArrayTypeInfo<?,?>)inTypeInfo).getComponentInfo();
    }
 else     if (inTypeInfo instanceof PrimitiveArrayTypeInfo) {
      componentInfo=BasicTypeInfo.getInfoFor(inTypeInfo.getTypeClass().getComponentType());
    }
 else     if (inTypeInfo instanceof ObjectArrayTypeInfo) {
      componentInfo=((ObjectArrayTypeInfo<?,?>)inTypeInfo).getComponentInfo();
    }
    info=createTypeInfoFromInput(returnTypeVar,inputTypeHierarchy,((GenericArrayType)inType).getGenericComponentType(),componentInfo);
  }
 else   if (inTypeInfo instanceof TupleTypeInfo && isClassType(inType) && Tuple.class.isAssignableFrom(typeToClass(inType))) {
    ParameterizedType tupleBaseClass;
    while (!(isClassType(inType) && typeToClass(inType).getSuperclass().equals(Tuple.class))) {
      inputTypeHierarchy.add(inType);
      inType=typeToClass(inType).getGenericSuperclass();
    }
    inputTypeHierarchy.add(inType);
    tupleBaseClass=(ParameterizedType)inType;
    Type[] tupleElements=tupleBaseClass.getActualTypeArguments();
    for (int i=0; i < tupleElements.length; i++) {
      info=createTypeInfoFromInput(returnTypeVar,inputTypeHierarchy,tupleElements[i],((TupleTypeInfo<?>)inTypeInfo).getTypeAt(i));
      if (info != null) {
        break;
      }
    }
  }
 else   if (inTypeInfo instanceof PojoTypeInfo) {
    getTypeHierarchy(inputTypeHierarchy,inType,Object.class);
    info=findCorrespondingInfo(returnTypeVar,inType,inTypeInfo,inputTypeHierarchy);
  }
  return info;
}
