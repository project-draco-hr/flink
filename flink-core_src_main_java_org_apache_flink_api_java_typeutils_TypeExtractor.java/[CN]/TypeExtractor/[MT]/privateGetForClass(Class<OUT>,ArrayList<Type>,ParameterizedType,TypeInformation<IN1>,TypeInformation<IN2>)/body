{
  Preconditions.checkNotNull(clazz);
  if (clazz.equals(Object.class)) {
    return new GenericTypeInfo<>(clazz);
  }
  if (clazz.equals(Class.class)) {
    return new GenericTypeInfo<OUT>(clazz);
  }
  if (countTypeInHierarchy(typeHierarchy,clazz) > 1) {
    return new GenericTypeInfo<>(clazz);
  }
  if (clazz.isArray()) {
    PrimitiveArrayTypeInfo<OUT> primitiveArrayInfo=PrimitiveArrayTypeInfo.getInfoFor(clazz);
    if (primitiveArrayInfo != null) {
      return primitiveArrayInfo;
    }
    BasicArrayTypeInfo<OUT,?> basicArrayInfo=BasicArrayTypeInfo.getInfoFor(clazz);
    if (basicArrayInfo != null) {
      return basicArrayInfo;
    }
 else {
      TypeInformation<?> componentTypeInfo=createTypeInfoWithTypeHierarchy(typeHierarchy,clazz.getComponentType(),in1Type,in2Type);
      return ObjectArrayTypeInfo.getInfoFor(clazz,componentTypeInfo);
    }
  }
  if (Writable.class.isAssignableFrom(clazz) && !Writable.class.equals(clazz)) {
    return (TypeInformation<OUT>)WritableTypeInfo.getWritableTypeInfo((Class<? extends Writable>)clazz);
  }
  TypeInformation<OUT> basicTypeInfo=BasicTypeInfo.getInfoFor(clazz);
  if (basicTypeInfo != null) {
    return basicTypeInfo;
  }
  if (Value.class.isAssignableFrom(clazz)) {
    Class<? extends Value> valueClass=clazz.asSubclass(Value.class);
    return (TypeInformation<OUT>)ValueTypeInfo.getValueTypeInfo(valueClass);
  }
  if (Tuple.class.isAssignableFrom(clazz)) {
    if (clazz == Tuple0.class) {
      return new TupleTypeInfo(Tuple0.class);
    }
    throw new InvalidTypesException("Type information extraction for tuples (except Tuple0) cannot be done based on the class.");
  }
  if (Either.class.isAssignableFrom(clazz)) {
    throw new InvalidTypesException("Type information extraction for Either cannot be done based on the class.");
  }
  if (Enum.class.isAssignableFrom(clazz)) {
    return new EnumTypeInfo(clazz);
  }
  if (SpecificRecordBase.class.isAssignableFrom(clazz)) {
    return new AvroTypeInfo(clazz);
  }
  if (Modifier.isInterface(clazz.getModifiers())) {
    return new GenericTypeInfo<OUT>(clazz);
  }
  try {
    TypeInformation<OUT> pojoType=analyzePojo(clazz,new ArrayList<Type>(typeHierarchy),parameterizedType,in1Type,in2Type);
    if (pojoType != null) {
      return pojoType;
    }
  }
 catch (  InvalidTypesException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Unable to handle type " + clazz + " as POJO. Message: "+ e.getMessage(),e);
    }
  }
  return new GenericTypeInfo<OUT>(clazz);
}
