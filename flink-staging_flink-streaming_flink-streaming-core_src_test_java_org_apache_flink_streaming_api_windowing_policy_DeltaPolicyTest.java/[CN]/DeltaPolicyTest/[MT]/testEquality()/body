{
  DeltaFunction<Tuple2<Integer,Integer>> df=new DeltaFunction<Tuple2<Integer,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public double getDelta(    Tuple2<Integer,Integer> oldDataPoint,    Tuple2<Integer,Integer> newDataPoint){
      return (double)newDataPoint.f0 - oldDataPoint.f0;
    }
  }
;
  assertEquals(new DeltaPolicy<Tuple2<Integer,Integer>>(df,new Tuple2<Integer,Integer>(0,0),2,SERIALIZER),new DeltaPolicy<Tuple2<Integer,Integer>>(df,new Tuple2<Integer,Integer>(0,0),2,SERIALIZER));
  assertNotEquals(new DeltaPolicy<Tuple2<Integer,Integer>>(df,new Tuple2<Integer,Integer>(0,1),2,SERIALIZER),new DeltaPolicy<Tuple2<Integer,Integer>>(df,new Tuple2<Integer,Integer>(0,0),2,SERIALIZER));
  assertNotEquals(new DeltaPolicy<Tuple2<Integer,Integer>>(df,new Tuple2<Integer,Integer>(0,0),2,SERIALIZER),new DeltaPolicy<Tuple2<Integer,Integer>>(df,new Tuple2<Integer,Integer>(0,0),3,SERIALIZER));
}
