{
  try {
    final Invocation call=(Invocation)param;
    final Method method=protocol.getMethod(call.getMethodName(),call.getParameterClasses());
    method.setAccessible(true);
    final Object value=method.invoke((Object)instance,(Object[])call.getParameters());
    return (IOReadableWritable)value;
  }
 catch (  InvocationTargetException e) {
    final Throwable target=e.getTargetException();
    if (target instanceof IOException) {
      throw (IOException)target;
    }
 else {
      final IOException ioe=new IOException(target.toString());
      ioe.setStackTrace(target.getStackTrace());
      throw ioe;
    }
  }
catch (  Throwable e) {
    final IOException ioe=new IOException(e.toString());
    ioe.setStackTrace(e.getStackTrace());
    throw ioe;
  }
}
