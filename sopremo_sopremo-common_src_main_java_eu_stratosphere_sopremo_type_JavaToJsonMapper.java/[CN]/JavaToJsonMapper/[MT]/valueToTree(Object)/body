{
  if (value == null)   return NullNode.getInstance();
  final Class<? extends Object> valueClass=value.getClass();
  if (value instanceof JsonNode)   return (JsonNode)value;
  if (value instanceof CharSequence)   return TextNode.valueOf(value.toString());
  if (valueClass.isArray()) {
    final ArrayNode arrayNode=new ArrayNode();
    final int length=Array.getLength(value);
    for (int i=0; i < length; i++)     arrayNode.add(this.valueToTree(Array.get(value,i)));
    return arrayNode;
  }
  if (Collection.class.isAssignableFrom(valueClass)) {
    final ArrayNode arrayNode=new ArrayNode();
    for (    final Object element : (Collection<?>)value)     arrayNode.add(this.valueToTree(element));
    return arrayNode;
  }
  if (Map.class.isAssignableFrom(valueClass)) {
    final ObjectNode objectNode=new ObjectNode();
    for (    final Entry<?,?> element : ((Map<?,?>)value).entrySet())     objectNode.put(element.getKey().toString(),this.valueToTree(element.getValue()));
    return objectNode;
  }
  if (value instanceof Boolean)   return BooleanNode.valueOf((Boolean)value);
  try {
    return this.typeDict.get(valueClass).newInstance(value);
  }
 catch (  final Exception e) {
    throw new IllegalArgumentException("Cannot map object " + value + " to json node",e);
  }
}
