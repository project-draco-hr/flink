{
  final Counter numRecordsIn=this.taskContext.getMetricGroup().counter("numRecordsIn");
  final Counter numRecordsOut=this.taskContext.getMetricGroup().counter("numRecordsOut");
  final MutableObjectIterator<IT> input=new CountingMutableObjectIterator<>(this.taskContext.<IT>getInput(0),numRecordsIn);
  final MapPartitionFunction<IT,OT> function=this.taskContext.getStub();
  final Collector<OT> output=new CountingCollector<>(this.taskContext.getOutputCollector(),numRecordsOut);
  if (objectReuseEnabled) {
    final ReusingMutableToRegularIteratorWrapper<IT> inIter=new ReusingMutableToRegularIteratorWrapper<IT>(input,this.taskContext.<IT>getInputSerializer(0).getSerializer());
    function.mapPartition(inIter,output);
  }
 else {
    final NonReusingMutableToRegularIteratorWrapper<IT> inIter=new NonReusingMutableToRegularIteratorWrapper<IT>(input,this.taskContext.<IT>getInputSerializer(0).getSerializer());
    function.mapPartition(inIter,output);
  }
}
