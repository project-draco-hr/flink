{
  super.open(split);
  @SuppressWarnings("unchecked") FieldParser<Object>[] fieldParsers=(FieldParser<Object>[])getFieldParsers();
  if (fieldParsers.length == 0) {
    throw new IOException("CsvInputFormat.open(FileInputSplit split) - no field parsers to parse input");
  }
  this.parsedValues=new Object[fieldParsers.length];
  for (int i=0; i < fieldParsers.length; i++) {
    this.parsedValues[i]=fieldParsers[i].createValue();
  }
  if (this.getDelimiter().length == 1 && this.getDelimiter()[0] == '\n') {
    this.lineDelimiterIsLinebreak=true;
  }
  if (pojoTypeClass != null) {
    pojoFields=new Field[pojoFieldNames.length];
    Map<String,Field> allFields=new HashMap<String,Field>();
    findAllFields(pojoTypeClass,allFields);
    for (int i=0; i < pojoFieldNames.length; i++) {
      pojoFields[i]=allFields.get(pojoFieldNames[i]);
      if (pojoFields[i] != null) {
        pojoFields[i].setAccessible(true);
      }
 else {
        throw new RuntimeException("There is no field called \"" + pojoFieldNames[i] + "\" in "+ pojoTypeClass.getName());
      }
    }
  }
  this.commentCount=0;
  this.invalidLineCount=0;
}
