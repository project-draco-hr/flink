{
  noOfActivePaths=0;
  noOfInactivePaths=0;
  maxPathLatency=Long.MIN_VALUE;
  minPathLatency=Long.MAX_VALUE;
  pathElements=null;
  avgPathElementLatencies=null;
  avgTotalPathLatency=0;
  ArrayList<Double> totalLatencies=new ArrayList<Double>();
  for (  ProfilingPath path : profilingSubgraph.getProfilingPaths()) {
    ProfilingPathSummary pathSummary=path.getSummary();
    if (pathElements == null) {
      pathElements=pathSummary.getPathElements();
      avgPathElementLatencies=new double[pathElements.size()];
    }
    if (pathSummary.hasLatencies()) {
      pathSummary.refreshLatencies();
      avgTotalPathLatency+=pathSummary.getTotalLatency();
      totalLatencies.add(pathSummary.getTotalLatency());
      addValues(pathSummary.getLatencies(),avgPathElementLatencies);
      noOfActivePaths++;
      maxPathLatency=Math.max(maxPathLatency,pathSummary.getTotalLatency());
      minPathLatency=Math.min(minPathLatency,pathSummary.getTotalLatency());
    }
 else {
      noOfInactivePaths++;
    }
  }
  if (noOfActivePaths > 0) {
    for (int i=0; i < avgPathElementLatencies.length; i++) {
      avgPathElementLatencies[i]=avgPathElementLatencies[i] / noOfActivePaths;
    }
    avgTotalPathLatency=avgTotalPathLatency / noOfActivePaths;
    Collections.sort(totalLatencies);
    medianPathLatency=totalLatencies.get(totalLatencies.size() / 2);
  }
 else {
    maxPathLatency=0;
    minPathLatency=0;
  }
}
