{
  noOfActivePaths=0;
  noOfInactivePaths=0;
  avgTotalPathLatency=0;
  minPathLatency=0;
  maxPathLatency=0;
  medianPathLatency=0;
  activePaths=new ArrayList<ProfilingPath>();
  pathElements=null;
  avgPathElementLatencies=null;
  ArrayList<Double> totalLatencies=new ArrayList<Double>();
  for (  ProfilingPath path : profilingSubgraph.getProfilingPaths()) {
    ProfilingPathSummary pathSummary=path.getSummary();
    if (pathElements == null) {
      pathElements=pathSummary.getPathElements();
      avgPathElementLatencies=new double[pathSummary.getNoOfPathElementLatencies()];
    }
    if (pathSummary.hasLatencies()) {
      activePaths.add(path);
      pathSummary.refreshLatencies();
      avgTotalPathLatency+=pathSummary.getTotalLatency();
      totalLatencies.add(pathSummary.getTotalLatency());
      addValues(pathSummary.getPathElementLatencies(),avgPathElementLatencies);
      noOfActivePaths++;
    }
 else {
      noOfInactivePaths++;
    }
  }
  if (noOfActivePaths > 0) {
    for (int i=0; i < avgPathElementLatencies.length; i++) {
      avgPathElementLatencies[i]=avgPathElementLatencies[i] / noOfActivePaths;
    }
    avgTotalPathLatency=avgTotalPathLatency / noOfActivePaths;
    Collections.sort(totalLatencies);
    minPathLatency=totalLatencies.get(0);
    medianPathLatency=totalLatencies.get(totalLatencies.size() / 2);
    maxPathLatency=totalLatencies.get(totalLatencies.size() - 1);
  }
}
