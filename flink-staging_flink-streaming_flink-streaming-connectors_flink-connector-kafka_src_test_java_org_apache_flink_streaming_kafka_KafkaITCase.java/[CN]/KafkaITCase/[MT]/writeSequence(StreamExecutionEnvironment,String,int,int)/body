{
  LOG.info("Writing sequence from {} to {} to topic {}",from,to,topicName);
  DataStream<Tuple2<Integer,Integer>> stream=env.addSource(new RichParallelSourceFunction<Tuple2<Integer,Integer>>(){
    private static final long serialVersionUID=1L;
    int cnt=from;
    int partition;
    @Override public void open(    Configuration parameters) throws Exception {
      super.open(parameters);
      partition=getRuntimeContext().getIndexOfThisSubtask();
    }
    @Override public boolean reachedEnd() throws Exception {
      return cnt > to;
    }
    @Override public Tuple2<Integer,Integer> next() throws Exception {
      LOG.info("Writing " + cnt + " to partition "+ partition);
      Tuple2<Integer,Integer> result=new Tuple2<Integer,Integer>(getRuntimeContext().getIndexOfThisSubtask(),cnt);
      cnt++;
      return result;
    }
  }
).setParallelism(3);
  stream.addSink(new KafkaSink<Tuple2<Integer,Integer>>(brokerConnectionStrings,topicName,new Utils.TypeInformationSerializationSchema<Tuple2<Integer,Integer>>(new Tuple2<Integer,Integer>(1,1),env.getConfig()),new T2Partitioner())).setParallelism(3);
  env.execute("Write sequence from " + from + " to "+ to+ " to topic "+ topicName);
  LOG.info("Finished writing sequence");
}
