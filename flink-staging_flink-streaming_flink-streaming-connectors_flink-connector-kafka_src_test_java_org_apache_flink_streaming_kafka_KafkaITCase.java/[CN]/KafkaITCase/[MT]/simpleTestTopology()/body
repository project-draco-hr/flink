{
  String topic="simpleTestTopic";
  createTestTopic(topic,1,1);
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.createLocalEnvironment(1);
  DataStreamSource<String> consuming=env.addSource(new PersistentKafkaSource<String>(topic,new JavaDefaultStringSchema(),standardCC));
  consuming.addSink(new SinkFunction<String>(){
    int elCnt=0;
    int start=-1;
    BitSet validator=new BitSet(101);
    @Override public void invoke(    String value) throws Exception {
      LOG.debug("Got " + value);
      String[] sp=value.split("-");
      int v=Integer.parseInt(sp[1]);
      if (start == -1) {
        start=v;
      }
      Assert.assertFalse("Received tuple twice",validator.get(v - start));
      validator.set(v - start);
      elCnt++;
      if (elCnt == 100) {
        int nc;
        if ((nc=validator.nextClearBit(0)) != 100) {
          throw new RuntimeException("The bitset was not set to 1 on all elements. Next clear:" + nc + " Set: "+ validator);
        }
        throw new SuccessException();
      }
    }
  }
);
  DataStream<String> stream=env.addSource(new SourceFunction<String>(){
    private static final long serialVersionUID=1L;
    boolean running=true;
    int cnt=0;
    @Override public boolean reachedEnd() throws Exception {
      return false;
    }
    @Override public String next() throws Exception {
      Thread.sleep(100);
      return "kafka-" + cnt++;
    }
  }
);
  stream.addSink(new KafkaSink<String>(brokerConnectionStrings,topic,new JavaDefaultStringSchema()));
  tryExecute(env,"simpletest");
}
