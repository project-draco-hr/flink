{
  if (!this.iterator1.nextKey() || !this.iterator2.nextKey()) {
    return false;
  }
  K key1=this.iterator1.getKey();
  K key2=this.iterator2.getKey();
  while (key1.compareTo(key2) != 0) {
    if (key1.compareTo(key2) > 0) {
      if (!this.iterator2.nextKey()) {
        return false;
      }
      key2=this.iterator2.getKey();
    }
 else     if (key1.compareTo(key2) < 0) {
      if (!this.iterator1.nextKey()) {
        return false;
      }
      key1=this.iterator1.getKey();
    }
  }
  Iterator<V1> values1=this.iterator1.getValues();
  Iterator<V2> values2=this.iterator2.getValues();
  final V1 firstV1=values1.next();
  final V2 firstV2=values2.next();
  if (firstV1 == null || firstV2 == null) {
    return false;
  }
  final boolean v1HasNext=values1.hasNext();
  final boolean v2HasNext=values2.hasNext();
  if (!v1HasNext && !v2HasNext) {
    matchFunction.match(key1,firstV1,firstV2,collector);
  }
 else   if (!v1HasNext) {
    crossFirst1withNValues(key2,firstV1,firstV2,values2,matchFunction,collector);
  }
 else   if (!v2HasNext) {
    crossSecond1withNValues(key1,firstV2,firstV1,values1,matchFunction,collector);
  }
 else {
    crossMwithNValues(key1,firstV1,values1,firstV2,values2,matchFunction,collector);
  }
  return true;
}
