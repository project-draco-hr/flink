{
  refilterSample();
  int validSize=0;
  for (int i=0; i < sampleSize; i++) {
    if (!deleted[i]) {
      validSize+=lengths[i];
    }
  }
  int totalSize=validSize + required;
  boolean compactOnly=data.length / totalSize > 2;
  byte[] target=null;
  if (compactOnly) {
    target=data;
  }
 else {
    int newSize=data.length * 2;
    while ((newSize=newSize * 2) < totalSize)     ;
    target=new byte[newSize];
  }
  int newCount=0;
  int currPos=0;
  for (int i=0; i < sampleSize; i++) {
    if (!deleted[i]) {
      System.arraycopy(data,positions[i],target,currPos,lengths[i]);
      deleted[newCount]=false;
      positions[newCount]=positions[i];
      lengths[newCount]=lengths[i];
      rands[newCount]=rands[i];
      currPos+=lengths[newCount];
      newCount++;
    }
  }
  System.arraycopy(data,positions[newCount],target,currPos,offset);
  positions[newCount]=currPos;
  basePos=positions[newCount];
  sampleSize=newCount;
  data=target;
}
