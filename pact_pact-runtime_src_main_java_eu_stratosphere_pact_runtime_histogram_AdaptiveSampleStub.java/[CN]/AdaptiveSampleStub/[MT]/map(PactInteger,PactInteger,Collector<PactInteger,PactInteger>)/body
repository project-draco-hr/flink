{
  this.out=out;
  if (count == nextSqrt) {
    updateSqrt();
  }
  double rand=rnd.nextDouble();
  boolean useAsSample=rand < invSqrt;
  if (useAsSample) {
    if (sampleSize + 1 == capacity) {
      adjustArrays();
    }
    outBuffer.basePos=positions[sampleSize];
    outBuffer.offset=0;
    try {
      key.write(dataOutput);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    rands[sampleSize]=rand;
    lengths[sampleSize]=outBuffer.offset;
    positions[sampleSize]=outBuffer.basePos;
    deleted[sampleSize]=false;
    positions[sampleSize + 1]=positions[sampleSize] + lengths[sampleSize];
    sampleSize++;
  }
  count++;
}
