{
  Map<TopicAndPartition,PartitionOffsetRequestInfo> requestInfo=new HashMap<>();
  for (  KafkaTopicPartitionState<TopicAndPartition> part : partitions) {
    requestInfo.put(part.getKafkaPartitionHandle(),new PartitionOffsetRequestInfo(whichTime,1));
  }
  int retries=0;
  OffsetResponse response;
  while (true) {
    kafka.javaapi.OffsetRequest request=new kafka.javaapi.OffsetRequest(requestInfo,kafka.api.OffsetRequest.CurrentVersion(),consumer.clientId());
    response=consumer.getOffsetsBefore(request);
    if (response.hasError()) {
      StringBuilder exception=new StringBuilder();
      for (      KafkaTopicPartitionState<TopicAndPartition> part : partitions) {
        short code;
        if ((code=response.errorCode(part.getTopic(),part.getPartition())) != ErrorMapping.NoError()) {
          exception.append("\nException for topic=").append(part.getTopic()).append(" partition=").append(part.getPartition()).append(": ").append(StringUtils.stringifyException(ErrorMapping.exceptionFor(code)));
        }
      }
      if (++retries >= 3) {
        throw new IOException("Unable to get last offset for partitions " + partitions + ": "+ exception.toString());
      }
 else {
        LOG.warn("Unable to get last offset for partitions: Exception(s): {}",exception);
      }
    }
 else {
      break;
    }
  }
  for (  KafkaTopicPartitionState<TopicAndPartition> part : partitions) {
    final long offset=response.offsets(part.getTopic(),part.getPartition())[0];
    part.setOffset(offset - 1);
  }
}
