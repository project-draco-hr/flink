{
  if (this.cachedPlans != null) {
    return this.cachedPlans;
  }
  List<? extends PlanNode> subPlans=getPredecessorNode().getAlternativePlans(estimator);
  List<PlanNode> outputPlans=new ArrayList<PlanNode>();
  final int parallelism=getParallelism();
  final int inDop=getPredecessorNode().getParallelism();
  final ExecutionMode executionMode=this.input.getDataExchangeMode();
  final boolean dopChange=parallelism != inDop;
  final boolean breakPipeline=this.input.isBreakingPipeline();
  InterestingProperties ips=this.input.getInterestingProperties();
  for (  PlanNode p : subPlans) {
    for (    RequestedGlobalProperties gp : ips.getGlobalProperties()) {
      for (      RequestedLocalProperties lp : ips.getLocalProperties()) {
        Channel c=new Channel(p);
        gp.parameterizeChannel(c,dopChange,executionMode,breakPipeline);
        lp.parameterizeChannel(c);
        c.setRequiredLocalProps(lp);
        c.setRequiredGlobalProps(gp);
        outputPlans.add(new SinkPlanNode(this,"DataSink (" + this.getOperator().getName() + ")",c));
      }
    }
  }
  for (  PlanNode node : outputPlans) {
    estimator.costOperator(node);
  }
  prunePlanAlternatives(outputPlans);
  this.cachedPlans=outputPlans;
  return outputPlans;
}
