def memorise(obj, force=False):
    '\n    Adds an object to the memo, and recursively adds all the objects\n    attributes, and if it is a container, its items. Use force=True to update\n    an object already in the memo. Updating is not recursively done.\n    '
    obj_id = id(obj)
    if (((obj_id in memo) and (not force)) or (obj_id in dont_memo)):
        return
    id_ = id
    g = get_attrs(obj)
    if (g is None):
        attrs_id = None
    else:
        attrs_id = dict(((key, id_(value)) for (key, value) in g.items()))
    s = get_seq(obj)
    if (s is None):
        seq_id = None
    elif hasattr(s, 'items'):
        seq_id = dict(((id_(key), id_(value)) for (key, value) in s.items()))
    else:
        seq_id = [id_(i) for i in s]
    memo[obj_id] = (attrs_id, seq_id)
    id_to_obj[obj_id] = obj
    mem = memorise
    if (g is not None):
        [mem(value) for (key, value) in g.items()]
    if (s is not None):
        if hasattr(s, 'items'):
            [(mem(key), mem(item)) for (key, item) in s.items()]
        else:
            [mem(item) for item in s]
