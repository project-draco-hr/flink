{
  if (this.instancesWithAvailableResources.isEmpty()) {
    Instance queuedInstance=this.newlyAvailableInstances.poll();
    if (queuedInstance == null) {
      return null;
    }
 else {
      this.instancesWithAvailableResources.add(queuedInstance);
    }
  }
  Iterator<Instance> locations=requestedLocations == null ? null : requestedLocations.iterator();
  Instance instanceToUse=null;
  Locality locality=Locality.UNCONSTRAINED;
  if (locations != null && locations.hasNext()) {
    while (locations.hasNext()) {
      Instance location=locations.next();
      if (location != null && this.instancesWithAvailableResources.remove(location)) {
        instanceToUse=location;
        locality=Locality.LOCAL;
        break;
      }
    }
    if (instanceToUse == null) {
      instanceToUse=this.instancesWithAvailableResources.poll();
      locality=Locality.NON_LOCAL;
    }
  }
 else {
    instanceToUse=this.instancesWithAvailableResources.poll();
  }
  return new ImmutablePair<Instance,Locality>(instanceToUse,locality);
}
