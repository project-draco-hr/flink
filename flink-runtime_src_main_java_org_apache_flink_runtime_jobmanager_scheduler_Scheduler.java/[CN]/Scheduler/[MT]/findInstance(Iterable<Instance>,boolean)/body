{
  while (this.newlyAvailableInstances.size() > 0) {
    Instance queuedInstance=this.newlyAvailableInstances.poll();
    if (queuedInstance != null) {
      this.instancesWithAvailableResources.add(queuedInstance);
    }
  }
  if (this.instancesWithAvailableResources.isEmpty()) {
    return null;
  }
  Iterator<Instance> locations=requestedLocations == null ? null : requestedLocations.iterator();
  if (locations != null && locations.hasNext()) {
    while (locations.hasNext()) {
      Instance location=locations.next();
      if (location != null && this.instancesWithAvailableResources.remove(location)) {
        return new ImmutablePair<Instance,Locality>(location,Locality.LOCAL);
      }
    }
    if (localOnly) {
      return null;
    }
 else {
      Instance instanceToUse=this.instancesWithAvailableResources.poll();
      return new ImmutablePair<Instance,Locality>(instanceToUse,Locality.NON_LOCAL);
    }
  }
 else {
    Instance instanceToUse=this.instancesWithAvailableResources.poll();
    return new ImmutablePair<Instance,Locality>(instanceToUse,Locality.UNCONSTRAINED);
  }
}
