{
  if (task == null) {
    throw new NullPointerException();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Scheduling task " + task);
  }
  final ExecutionVertex vertex=task.getTaskToExecute().getVertex();
  final Iterable<TaskManagerLocation> preferredLocations=vertex.getPreferredLocations();
  final boolean forceExternalLocation=vertex.isScheduleLocalOnly() && preferredLocations != null && preferredLocations.iterator().hasNext();
synchronized (globalLock) {
    SlotSharingGroup sharingUnit=task.getSlotSharingGroup();
    if (sharingUnit != null) {
      if (queueIfNoResource) {
        throw new IllegalArgumentException("A task with a vertex sharing group was scheduled in a queued fashion.");
      }
      final SlotSharingGroupAssignment assignment=sharingUnit.getTaskAssignment();
      final CoLocationConstraint constraint=task.getLocationConstraint();
      if (constraint != null && forceExternalLocation) {
        throw new IllegalArgumentException("The scheduling cannot be constrained simultaneously by a " + "co-location constraint and an external location constraint.");
      }
      final SimpleSlot slotFromGroup;
      if (constraint == null) {
        slotFromGroup=assignment.getSlotForTask(vertex);
      }
 else {
        slotFromGroup=assignment.getSlotForTask(vertex,constraint);
      }
      SimpleSlot newSlot=null;
      SimpleSlot toUse=null;
      try {
        if (slotFromGroup != null && slotFromGroup.getLocality() != Locality.NON_LOCAL) {
          if (constraint != null && !constraint.isAssigned()) {
            constraint.lockLocation();
          }
          updateLocalityCounters(slotFromGroup,vertex);
          return slotFromGroup;
        }
        final Iterable<TaskManagerLocation> locations;
        final boolean localOnly;
        if (constraint != null && constraint.isAssigned()) {
          locations=Collections.singleton(constraint.getLocation());
          localOnly=true;
        }
 else {
          locations=vertex.getPreferredLocations();
          localOnly=forceExternalLocation;
        }
        newSlot=getNewSlotForSharingGroup(vertex,locations,assignment,constraint,localOnly);
        if (newSlot == null) {
          if (slotFromGroup == null) {
            if (constraint != null && constraint.isAssigned()) {
              throw new NoResourceAvailableException("Could not allocate a slot on instance " + constraint.getLocation() + ", as required by the co-location constraint.");
            }
 else             if (forceExternalLocation) {
              String hosts=getHostnamesFromInstances(preferredLocations);
              throw new NoResourceAvailableException("Could not schedule task " + vertex + " to any of the required hosts: "+ hosts);
            }
 else {
              throw new NoResourceAvailableException(task,getNumberOfAvailableInstances(),getTotalNumberOfSlots(),getNumberOfAvailableSlots());
            }
          }
 else {
            toUse=slotFromGroup;
          }
        }
 else         if (slotFromGroup == null || !slotFromGroup.isAlive() || newSlot.getLocality() == Locality.LOCAL) {
          if (slotFromGroup != null) {
            slotFromGroup.releaseSlot();
          }
          toUse=newSlot;
        }
 else {
          newSlot.releaseSlot();
          toUse=slotFromGroup;
        }
        if (constraint != null && !constraint.isAssigned()) {
          constraint.lockLocation();
        }
        updateLocalityCounters(toUse,vertex);
      }
 catch (      NoResourceAvailableException e) {
        throw e;
      }
catch (      Throwable t) {
        if (slotFromGroup != null) {
          slotFromGroup.releaseSlot();
        }
        if (newSlot != null) {
          newSlot.releaseSlot();
        }
        ExceptionUtils.rethrow(t,"An error occurred while allocating a slot in a sharing group");
      }
      return toUse;
    }
 else {
      SimpleSlot slot=getFreeSlotForTask(vertex,preferredLocations,forceExternalLocation);
      if (slot != null) {
        updateLocalityCounters(slot,vertex);
        return slot;
      }
 else {
        if (queueIfNoResource) {
          CompletableFuture<SimpleSlot> future=new FlinkCompletableFuture<>();
          this.taskQueue.add(new QueuedTask(task,future));
          return future;
        }
 else         if (forceExternalLocation) {
          String hosts=getHostnamesFromInstances(preferredLocations);
          throw new NoResourceAvailableException("Could not schedule task " + vertex + " to any of the required hosts: "+ hosts);
        }
 else {
          throw new NoResourceAvailableException(getNumberOfAvailableInstances(),getTotalNumberOfSlots(),getNumberOfAvailableSlots());
        }
      }
    }
  }
}
