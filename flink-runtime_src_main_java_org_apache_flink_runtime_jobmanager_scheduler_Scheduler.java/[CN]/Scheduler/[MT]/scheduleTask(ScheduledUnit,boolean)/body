{
  if (task == null) {
    throw new IllegalArgumentException();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Scheduling task " + task);
  }
  final ExecutionVertex vertex=task.getTaskToExecute().getVertex();
synchronized (globalLock) {
    SlotSharingGroup sharingUnit=task.getSlotSharingGroup();
    if (sharingUnit != null) {
      if (queueIfNoResource) {
        throw new IllegalArgumentException("A task with a vertex sharing group was scheduled in a queued fashion.");
      }
      final SlotSharingGroupAssignment assignment=sharingUnit.getTaskAssignment();
      final CoLocationConstraint constraint=task.getLocationConstraint();
      SubSlot slotFromGroup;
      if (constraint == null) {
        slotFromGroup=assignment.getSlotForTask(vertex);
      }
 else {
        slotFromGroup=assignment.getSlotForTask(vertex,constraint);
      }
      AllocatedSlot newSlot=null;
      try {
        if (slotFromGroup != null) {
          if (slotFromGroup.getLocality() != Locality.NON_LOCAL) {
            updateLocalityCounters(slotFromGroup.getLocality());
            return slotFromGroup;
          }
        }
        final Iterable<Instance> locations=(constraint == null || constraint.isUnassigned()) ? vertex.getPreferredLocations() : Collections.singleton(constraint.getLocation());
        newSlot=getFreeSlotForTask(vertex,locations);
        SubSlot toUse;
        if (newSlot == null) {
          if (slotFromGroup == null) {
            if (constraint == null || constraint.isUnassigned()) {
              throw new NoResourceAvailableException();
            }
 else {
              throw new NoResourceAvailableException("Could not allocate a slot on instance " + constraint.getLocation() + ", as required by the co-location constraint.");
            }
          }
 else {
            toUse=slotFromGroup;
          }
        }
 else         if (slotFromGroup == null || newSlot.getLocality() == Locality.LOCAL) {
          if (slotFromGroup != null) {
            slotFromGroup.releaseSlot();
          }
          if (constraint == null) {
            toUse=assignment.addNewSlotWithTask(newSlot,vertex);
          }
 else {
            toUse=assignment.addNewSlotWithTask(newSlot,vertex,constraint);
          }
        }
 else {
          newSlot.releaseSlot();
          toUse=slotFromGroup;
        }
        if (constraint != null) {
          if (constraint.isUnassigned() || toUse.getLocality() == Locality.LOCAL) {
            constraint.setSharedSlot(toUse.getSharedSlot());
          }
 else {
            throw new NoResourceAvailableException("Could not allocate a slot on instance " + constraint.getLocation() + ", as required by the co-location constraint.");
          }
        }
        updateLocalityCounters(toUse.getLocality());
        return toUse;
      }
 catch (      NoResourceAvailableException e) {
        throw e;
      }
catch (      Throwable t) {
        if (slotFromGroup != null) {
          slotFromGroup.releaseSlot();
        }
        if (newSlot != null) {
          newSlot.releaseSlot();
        }
        ExceptionUtils.rethrow(t,"An error occurred while allocating a slot in a sharing group");
      }
    }
    AllocatedSlot slot=getFreeSlotForTask(vertex,vertex.getPreferredLocations());
    if (slot != null) {
      updateLocalityCounters(slot.getLocality());
      return slot;
    }
 else {
      if (queueIfNoResource) {
        SlotAllocationFuture future=new SlotAllocationFuture();
        this.taskQueue.add(new QueuedTask(task,future));
        return future;
      }
 else {
        throw new NoResourceAvailableException(task);
      }
    }
  }
}
