{
  try {
    final Random rnd=new Random();
    final Random bufferRnd=new Random();
    final long bufferSeed=rnd.nextLong();
    bufferRnd.setSeed(bufferSeed);
    final int numEventsAndBuffers=3000;
    final int numChannels=1656;
    final ArrayList<BufferOrEvent> events=new ArrayList<BufferOrEvent>(128);
    for (int i=0; i < numEventsAndBuffers; i++) {
      boolean isEvent=rnd.nextDouble() < 0.05d;
      if (isEvent) {
        events.add(generateAndWriteEvent(fileChannel,rnd,numChannels));
      }
 else {
        writeBuffer(fileChannel,bufferRnd.nextInt(pageSize) + 1,bufferRnd.nextInt(numChannels));
      }
    }
    fileChannel.position(0L);
    bufferRnd.setSeed(bufferSeed);
    SpilledBufferOrEventSequence seq=new SpilledBufferOrEventSequence(tempFile,fileChannel,buffer,pageSize);
    seq.open();
    int numEvent=0;
    for (int i=0; i < numEventsAndBuffers; i++) {
      BufferOrEvent next=seq.getNext();
      if (next.isEvent()) {
        BufferOrEvent expected=events.get(numEvent++);
        assertEquals(expected.getEvent(),next.getEvent());
        assertEquals(expected.getChannelIndex(),next.getChannelIndex());
      }
 else {
        validateBuffer(next,bufferRnd.nextInt(pageSize) + 1,bufferRnd.nextInt(numChannels));
      }
    }
    assertNull(seq.getNext());
    assertEquals(events.size(),numEvent);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
