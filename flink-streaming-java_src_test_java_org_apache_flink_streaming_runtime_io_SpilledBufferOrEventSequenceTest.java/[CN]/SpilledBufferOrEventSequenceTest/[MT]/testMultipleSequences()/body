{
  File secondFile=null;
  FileChannel secondChannel=null;
  try {
    secondFile=File.createTempFile("testdata","tmp");
    secondChannel=new RandomAccessFile(secondFile,"rw").getChannel();
    final Random rnd=new Random();
    final Random bufferRnd=new Random();
    final long bufferSeed=rnd.nextLong();
    bufferRnd.setSeed(bufferSeed);
    final int numEventsAndBuffers1=272;
    final int numEventsAndBuffers2=151;
    final int numChannels=1656;
    final ArrayList<BufferOrEvent> events1=new ArrayList<BufferOrEvent>(128);
    final ArrayList<BufferOrEvent> events2=new ArrayList<BufferOrEvent>(128);
    for (int i=0; i < numEventsAndBuffers1; i++) {
      boolean isEvent=rnd.nextDouble() < 0.05d;
      if (isEvent) {
        events1.add(generateAndWriteEvent(fileChannel,rnd,numChannels));
      }
 else {
        writeBuffer(fileChannel,bufferRnd.nextInt(pageSize) + 1,bufferRnd.nextInt(numChannels));
      }
    }
    for (int i=0; i < numEventsAndBuffers2; i++) {
      boolean isEvent=rnd.nextDouble() < 0.05d;
      if (isEvent) {
        events2.add(generateAndWriteEvent(secondChannel,rnd,numChannels));
      }
 else {
        writeBuffer(secondChannel,bufferRnd.nextInt(pageSize) + 1,bufferRnd.nextInt(numChannels));
      }
    }
    fileChannel.position(0L);
    secondChannel.position(0L);
    bufferRnd.setSeed(bufferSeed);
    SpilledBufferOrEventSequence seq1=new SpilledBufferOrEventSequence(tempFile,fileChannel,buffer,pageSize);
    SpilledBufferOrEventSequence seq2=new SpilledBufferOrEventSequence(secondFile,secondChannel,buffer,pageSize);
    seq1.open();
    int numEvent=0;
    for (int i=0; i < numEventsAndBuffers1; i++) {
      BufferOrEvent next=seq1.getNext();
      if (next.isEvent()) {
        BufferOrEvent expected=events1.get(numEvent++);
        assertEquals(expected.getEvent(),next.getEvent());
        assertEquals(expected.getChannelIndex(),next.getChannelIndex());
      }
 else {
        validateBuffer(next,bufferRnd.nextInt(pageSize) + 1,bufferRnd.nextInt(numChannels));
      }
    }
    assertNull(seq1.getNext());
    assertEquals(events1.size(),numEvent);
    seq2.open();
    numEvent=0;
    for (int i=0; i < numEventsAndBuffers2; i++) {
      BufferOrEvent next=seq2.getNext();
      if (next.isEvent()) {
        BufferOrEvent expected=events2.get(numEvent++);
        assertEquals(expected.getEvent(),next.getEvent());
        assertEquals(expected.getChannelIndex(),next.getChannelIndex());
      }
 else {
        validateBuffer(next,bufferRnd.nextInt(pageSize) + 1,bufferRnd.nextInt(numChannels));
      }
    }
    assertNull(seq2.getNext());
    assertEquals(events2.size(),numEvent);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    if (secondChannel != null) {
      try {
        secondChannel.close();
      }
 catch (      IOException e) {
      }
    }
    if (secondFile != null) {
      secondFile.delete();
    }
  }
}
