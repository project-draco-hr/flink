{
  final ArrayList<GateDeploymentDescriptor> ogd=new ArrayList<GateDeploymentDescriptor>(this.outputGates.length);
  for (int i=0; i < this.outputGates.length; ++i) {
    final ExecutionGate eg=this.outputGates[i];
    final List<ChannelDeploymentDescriptor> cdd=new ArrayList<ChannelDeploymentDescriptor>(eg.getNumberOfEdges());
    final int numberOfOutputChannels=eg.getNumberOfEdges();
    for (int j=0; j < numberOfOutputChannels; ++j) {
      final ExecutionEdge ee=eg.getEdge(j);
      cdd.add(new ChannelDeploymentDescriptor(ee.getOutputChannelID(),ee.getInputChannelID()));
    }
    ogd.add(new GateDeploymentDescriptor(eg.getGateID(),eg.getChannelType(),eg.getCompressionLevel(),eg.allowSpanningRecords(),cdd));
  }
  final ArrayList<GateDeploymentDescriptor> igd=new ArrayList<GateDeploymentDescriptor>(this.inputGates.length);
  for (int i=0; i < this.inputGates.length; ++i) {
    final ExecutionGate eg=this.inputGates[i];
    final List<ChannelDeploymentDescriptor> cdd=new ArrayList<ChannelDeploymentDescriptor>(eg.getNumberOfEdges());
    final int numberOfInputChannels=eg.getNumberOfEdges();
    for (int j=0; j < numberOfInputChannels; ++j) {
      final ExecutionEdge ee=eg.getEdge(j);
      cdd.add(new ChannelDeploymentDescriptor(ee.getOutputChannelID(),ee.getInputChannelID()));
    }
    igd.add(new GateDeploymentDescriptor(eg.getGateID(),eg.getChannelType(),eg.getCompressionLevel(),eg.allowSpanningRecords(),cdd));
  }
  final TaskDeploymentDescriptor tdd=new TaskDeploymentDescriptor(this.executionGraph.getJobID(),this.vertexID,this.groupVertex.getName(),this.indexInVertexGroup,this.groupVertex.getCurrentNumberOfGroupMembers(),this.executionGraph.getJobConfiguration(),this.groupVertex.getConfiguration(),this.checkpointState.get(),this.groupVertex.getInvokableClass(),ogd,igd,this.hasAlreadyBeenDeployed);
  return tdd;
}
