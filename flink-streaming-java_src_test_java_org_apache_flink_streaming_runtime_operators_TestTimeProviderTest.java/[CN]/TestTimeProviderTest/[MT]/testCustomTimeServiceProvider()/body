{
  TestTimeServiceProvider tp=new TestTimeServiceProvider();
  final OneInputStreamTask<String,String> mapTask=new OneInputStreamTask<>();
  mapTask.setTimeService(tp);
  final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<>(mapTask,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  StreamConfig streamConfig=testHarness.getStreamConfig();
  StreamMap<String,String> mapOperator=new StreamMap<>(new StreamTaskTimerTest.DummyMapFunction<String>());
  streamConfig.setStreamOperator(mapOperator);
  testHarness.invoke();
  assertEquals(testHarness.getTimerService().getCurrentProcessingTime(),0);
  tp.setCurrentTime(11);
  assertEquals(testHarness.getTimerService().getCurrentProcessingTime(),11);
  tp.setCurrentTime(15);
  tp.setCurrentTime(16);
  assertEquals(testHarness.getTimerService().getCurrentProcessingTime(),16);
  mapTask.getTimerService().registerTimer(30,new Triggerable(){
    @Override public void trigger(    long timestamp){
    }
  }
);
  mapTask.getTimerService().registerTimer(40,new Triggerable(){
    @Override public void trigger(    long timestamp){
    }
  }
);
  assertEquals(2,tp.getNumRegisteredTimers());
  tp.setCurrentTime(35);
  assertEquals(1,tp.getNumRegisteredTimers());
  tp.setCurrentTime(40);
  assertEquals(0,tp.getNumRegisteredTimers());
  tp.shutdownService();
}
