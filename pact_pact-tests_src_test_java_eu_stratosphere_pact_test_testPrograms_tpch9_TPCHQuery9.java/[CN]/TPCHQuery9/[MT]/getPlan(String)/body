{
  if (args.length != 8) {
    LOGGER.warn("number of arguments do not match!");
    this.degreeOfParallelism=1;
    this.partInputPath="";
    this.partSuppInputPath="";
    this.ordersInputPath="";
    this.lineItemInputPath="";
    this.supplierInputPath="";
    this.nationInputPath="";
    this.outputPath="";
  }
 else {
    this.degreeOfParallelism=Integer.parseInt(args[0]);
    this.partInputPath=args[1];
    this.partSuppInputPath=args[2];
    this.ordersInputPath=args[3];
    this.lineItemInputPath=args[4];
    this.supplierInputPath=args[5];
    this.nationInputPath=args[6];
    this.outputPath=args[7];
  }
  FileDataSource partInput=new FileDataSource(IntTupleDataInFormat.class,this.partInputPath,"\"part\" source");
  partInput.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  partInput.setDegreeOfParallelism(this.degreeOfParallelism);
  FileDataSource partSuppInput=new FileDataSource(IntTupleDataInFormat.class,this.partSuppInputPath,"\"partsupp\" source");
  partSuppInput.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  partSuppInput.setDegreeOfParallelism(this.degreeOfParallelism);
  FileDataSource ordersInput=new FileDataSource(IntTupleDataInFormat.class,this.ordersInputPath,"\"orders\" source");
  ordersInput.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  ordersInput.setDegreeOfParallelism(this.degreeOfParallelism);
  FileDataSource lineItemInput=new FileDataSource(IntTupleDataInFormat.class,this.lineItemInputPath,"\"lineitem\" source");
  lineItemInput.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  lineItemInput.setDegreeOfParallelism(this.degreeOfParallelism);
  FileDataSource supplierInput=new FileDataSource(IntTupleDataInFormat.class,this.supplierInputPath,"\"supplier\" source");
  supplierInput.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  supplierInput.setDegreeOfParallelism(this.degreeOfParallelism);
  FileDataSource nationInput=new FileDataSource(IntTupleDataInFormat.class,this.nationInputPath,"\"nation\" source");
  nationInput.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  nationInput.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract filterPart=new MapContract(PartFilter.class,"filterParts");
  filterPart.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract mapPartsupp=new MapContract(PartsuppMap.class,"mapPartsupp");
  mapPartsupp.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract mapOrder=new MapContract(OrderMap.class,"mapOrder");
  mapOrder.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract mapLineItem=new MapContract(LineItemMap.class,"proj.Partsupp");
  mapLineItem.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract mapSupplier=new MapContract(SupplierMap.class,"proj.Partsupp");
  mapSupplier.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract partsJoin=new MatchContract(PartJoin.class,PactInteger.class,0,0,"partsJoin");
  partsJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract orderedPartsJoin=new MatchContract(OrderedPartsJoin.class,PactInteger.class,0,0,"orderedPartsJoin");
  orderedPartsJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract suppliersJoin=new MatchContract(SuppliersJoin.class,PactInteger.class,0,0,"suppliersJoin");
  suppliersJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract filteredPartsJoin=new MatchContract(FilteredPartsJoin.class,IntPair.class,0,0,"filteredPartsJoin");
  filteredPartsJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract partListJoin=new MatchContract(PartListJoin.class,PactInteger.class,0,0,"partlistJoin");
  filteredPartsJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  ReduceContract sumAmountAggregate=new ReduceContract(AmountAggregate.class,StringIntPair.class,0,"groupyBy");
  sumAmountAggregate.setDegreeOfParallelism(this.degreeOfParallelism);
  filterPart.setInput(partInput);
  mapPartsupp.setInput(partSuppInput);
  mapOrder.setInput(ordersInput);
  mapLineItem.setInput(lineItemInput);
  mapSupplier.setInput(supplierInput);
  partsJoin.setFirstInput(filterPart);
  partsJoin.setSecondInput(mapPartsupp);
  orderedPartsJoin.setFirstInput(mapOrder);
  orderedPartsJoin.setSecondInput(mapLineItem);
  suppliersJoin.setFirstInput(mapSupplier);
  suppliersJoin.setSecondInput(nationInput);
  filteredPartsJoin.setFirstInput(partsJoin);
  filteredPartsJoin.setSecondInput(orderedPartsJoin);
  partListJoin.setFirstInput(filteredPartsJoin);
  partListJoin.setSecondInput(suppliersJoin);
  sumAmountAggregate.setInput(partListJoin);
  FileDataSink result=new FileDataSink(StringIntPairStringDataOutFormat.class,this.outputPath,"Results sink");
  result.setDegreeOfParallelism(this.degreeOfParallelism);
  result.setInput(sumAmountAggregate);
  return new Plan(result,"TPC-H query 9");
}
