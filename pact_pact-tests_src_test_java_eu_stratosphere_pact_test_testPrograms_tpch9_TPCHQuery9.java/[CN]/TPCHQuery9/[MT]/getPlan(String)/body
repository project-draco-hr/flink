{
  if (args.length != 8) {
    LOGGER.warn("number of arguments do not match!");
    this.degreeOfParallelism=1;
    this.partInputPath="";
    this.partSuppInputPath="";
    this.ordersInputPath="";
    this.lineItemInputPath="";
    this.supplierInputPath="";
    this.nationInputPath="";
    this.outputPath="";
  }
 else {
    this.degreeOfParallelism=Integer.parseInt(args[0]);
    this.partInputPath=args[1];
    this.partSuppInputPath=args[2];
    this.ordersInputPath=args[3];
    this.lineItemInputPath=args[4];
    this.supplierInputPath=args[5];
    this.nationInputPath=args[6];
    this.outputPath=args[7];
  }
  DataSourceContract<PactInteger,Tuple> partInput=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,this.partInputPath,"\"part\" source");
  partInput.setFormatParameter("delimiter","\n");
  partInput.setDegreeOfParallelism(this.degreeOfParallelism);
  partInput.setOutputContract(UniqueKey.class);
  partInput.getCompilerHints().setAvgNumValuesPerKey(1);
  DataSourceContract<PactInteger,Tuple> partSuppInput=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,this.partSuppInputPath,"\"partsupp\" source");
  partSuppInput.setFormatParameter("delimiter","\n");
  partSuppInput.setDegreeOfParallelism(this.degreeOfParallelism);
  DataSourceContract<PactInteger,Tuple> ordersInput=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,this.ordersInputPath,"\"orders\" source");
  ordersInput.setFormatParameter("delimiter","\n");
  ordersInput.setDegreeOfParallelism(this.degreeOfParallelism);
  ordersInput.setOutputContract(UniqueKey.class);
  ordersInput.getCompilerHints().setAvgNumValuesPerKey(1);
  DataSourceContract<PactInteger,Tuple> lineItemInput=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,this.lineItemInputPath,"\"lineitem\" source");
  lineItemInput.setFormatParameter("delimiter","\n");
  lineItemInput.setDegreeOfParallelism(this.degreeOfParallelism);
  DataSourceContract<PactInteger,Tuple> supplierInput=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,this.supplierInputPath,"\"supplier\" source");
  supplierInput.setFormatParameter("delimiter","\n");
  supplierInput.setDegreeOfParallelism(this.degreeOfParallelism);
  supplierInput.setOutputContract(UniqueKey.class);
  supplierInput.getCompilerHints().setAvgNumValuesPerKey(1);
  DataSourceContract<PactInteger,Tuple> nationInput=new DataSourceContract<PactInteger,Tuple>(IntTupleDataInFormat.class,this.nationInputPath,"\"nation\" source");
  nationInput.setFormatParameter("delimiter","\n");
  nationInput.setDegreeOfParallelism(this.degreeOfParallelism);
  nationInput.setOutputContract(UniqueKey.class);
  nationInput.getCompilerHints().setAvgNumValuesPerKey(1);
  MapContract<PactInteger,Tuple,PactInteger,PactNull> filterPart=new MapContract<PactInteger,Tuple,PactInteger,PactNull>(PartFilter.class,"filterParts");
  filterPart.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract<PactInteger,Tuple,PactInteger,Tuple> mapPartsupp=new MapContract<PactInteger,Tuple,PactInteger,Tuple>(PartsuppMap.class,"mapPartsupp");
  mapPartsupp.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract<PactInteger,Tuple,PactInteger,PactInteger> mapOrder=new MapContract<PactInteger,Tuple,PactInteger,PactInteger>(OrderMap.class,"mapOrder");
  mapOrder.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract<PactInteger,Tuple,PactInteger,Tuple> mapLineItem=new MapContract<PactInteger,Tuple,PactInteger,Tuple>(LineItemMap.class,"proj.Partsupp");
  mapLineItem.setDegreeOfParallelism(this.degreeOfParallelism);
  MapContract<PactInteger,Tuple,PactInteger,PactInteger> mapSupplier=new MapContract<PactInteger,Tuple,PactInteger,PactInteger>(SupplierMap.class,"proj.Partsupp");
  mapSupplier.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract<PactInteger,PactNull,Tuple,IntPair,PactString> partsJoin=new MatchContract<PactInteger,PactNull,Tuple,IntPair,PactString>(PartJoin.class,"partsJoin");
  partsJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract<PactInteger,PactInteger,Tuple,IntPair,Tuple> orderedPartsJoin=new MatchContract<PactInteger,PactInteger,Tuple,IntPair,Tuple>(OrderedPartsJoin.class,"orderedPartsJoin");
  orderedPartsJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract<PactInteger,PactInteger,Tuple,PactInteger,PactString> suppliersJoin=new MatchContract<PactInteger,PactInteger,Tuple,PactInteger,PactString>(SuppliersJoin.class,"suppliersJoin");
  suppliersJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract<IntPair,PactString,Tuple,PactInteger,StringIntPair> filteredPartsJoin=new MatchContract<IntPair,PactString,Tuple,PactInteger,StringIntPair>(FilteredPartsJoin.class,"filteredPartsJoin");
  filteredPartsJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  MatchContract<PactInteger,StringIntPair,PactString,StringIntPair,PactString> partListJoin=new MatchContract<PactInteger,StringIntPair,PactString,StringIntPair,PactString>(PartListJoin.class,"partlistJoin");
  filteredPartsJoin.setDegreeOfParallelism(this.degreeOfParallelism);
  ReduceContract<StringIntPair,PactString,StringIntPair,PactString> sumAmountAggregate=new ReduceContract<StringIntPair,PactString,StringIntPair,PactString>(AmountAggregate.class,"groupyBy");
  sumAmountAggregate.setDegreeOfParallelism(this.degreeOfParallelism);
  filterPart.setInput(partInput);
  mapPartsupp.setInput(partSuppInput);
  mapOrder.setInput(ordersInput);
  mapLineItem.setInput(lineItemInput);
  mapSupplier.setInput(supplierInput);
  partsJoin.setFirstInput(filterPart);
  partsJoin.setSecondInput(mapPartsupp);
  orderedPartsJoin.setFirstInput(mapOrder);
  orderedPartsJoin.setSecondInput(mapLineItem);
  suppliersJoin.setFirstInput(mapSupplier);
  suppliersJoin.setSecondInput(nationInput);
  filteredPartsJoin.setFirstInput(partsJoin);
  filteredPartsJoin.setSecondInput(orderedPartsJoin);
  partListJoin.setFirstInput(filteredPartsJoin);
  partListJoin.setSecondInput(suppliersJoin);
  sumAmountAggregate.setInput(partListJoin);
  DataSinkContract<StringIntPair,PactString> result=new DataSinkContract<StringIntPair,PactString>(StringIntPairStringDataOutFormat.class,this.outputPath,"Results sink");
  result.setDegreeOfParallelism(this.degreeOfParallelism);
  result.setInput(sumAmountAggregate);
  return new Plan(result,"TPC-H query 9");
}
