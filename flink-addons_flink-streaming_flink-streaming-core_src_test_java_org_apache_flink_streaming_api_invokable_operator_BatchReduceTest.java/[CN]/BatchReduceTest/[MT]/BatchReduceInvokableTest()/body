{
  List<Integer> inputs=new ArrayList<Integer>();
  for (Integer i=1; i <= 10; i++) {
    inputs.add(i);
  }
  BatchReduceInvokable<Integer> invokable=new BatchReduceInvokable<Integer>(new ReduceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer reduce(    Integer value1,    Integer value2) throws Exception {
      return value1 + value2;
    }
  }
,3,2);
  List<Integer> expected=new ArrayList<Integer>();
  expected.add(6);
  expected.add(12);
  expected.add(18);
  expected.add(24);
  expected.add(19);
  assertEquals(expected,MockInvokable.createAndExecute(invokable,inputs));
  List<Integer> inputs2=new ArrayList<Integer>();
  inputs2.add(1);
  inputs2.add(2);
  inputs2.add(-1);
  inputs2.add(-3);
  inputs2.add(-4);
  BatchReduceInvokable<Integer> invokable2=new BatchReduceInvokable<Integer>(new ReduceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer reduce(    Integer value1,    Integer value2) throws Exception {
      if (value1 <= value2) {
        return value1;
      }
 else {
        return value2;
      }
    }
  }
,2,3);
  List<Integer> expected2=new ArrayList<Integer>();
  expected2.add(1);
  expected2.add(-4);
  assertEquals(expected2,MockInvokable.createAndExecute(invokable2,inputs2));
}
