{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  Graph<Long,NullValue,NullValue> graph=Graph.create(ExampleUtils.getRandomEdges(env,NUM_VERTICES),env);
  DataSet<Integer> numVertices=graph.numberOfVertices();
  DataSet<Integer> numEdges=graph.numberOfEdges();
  DataSet<Tuple2<Long,Long>> verticesWithDegrees=graph.getDegrees();
  DataSet<Double> avgNodeDegree=verticesWithDegrees.aggregate(Aggregations.SUM,1).map(new AvgNodeDegreeMapper()).withBroadcastSet(numVertices,"numberOfVertices");
  DataSet<Long> maxInDegreeVertex=graph.inDegrees().maxBy(1).map(new ProjectVertexId());
  DataSet<Long> minInDegreeVertex=graph.inDegrees().minBy(1).map(new ProjectVertexId());
  DataSet<Long> maxOutDegreeVertex=graph.outDegrees().maxBy(1).map(new ProjectVertexId());
  DataSet<Long> minOutDegreeVertex=graph.outDegrees().minBy(1).map(new ProjectVertexId());
  ExampleUtils.printResult(numVertices,"Total number of vertices",env);
  ExampleUtils.printResult(numEdges,"Total number of edges",env);
  ExampleUtils.printResult(avgNodeDegree,"Average node degree",env);
  ExampleUtils.printResult(maxInDegreeVertex,"Vertex with Max in-degree",env);
  ExampleUtils.printResult(minInDegreeVertex,"Vertex with Min in-degree",env);
  ExampleUtils.printResult(maxOutDegreeVertex,"Vertex with Max out-degree",env);
  ExampleUtils.printResult(minOutDegreeVertex,"Vertex with Min out-degree",env);
  env.execute();
}
