{
  try {
    FileDataSource source1=new FileDataSource(new DummyInputFormat(),IN_FILE);
    FileDataSource source2=new FileDataSource(new DummyInputFormat(),IN_FILE);
    MatchContract mat1=MatchContract.builder(new DummyMatchStub(),PactInteger.class,0,0).input1(source1).input2(source2).name("Match 1").build();
    MapContract ma1=MapContract.builder(new IdentityMap()).input(mat1).name("Map1").build();
    ReduceContract r1=ReduceContract.builder(new IdentityReduce(),PactInteger.class,0).input(ma1).name("Reduce 1").build();
    ReduceContract r2=ReduceContract.builder(new IdentityReduce(),PactInteger.class,0).input(mat1).name("Reduce 2").build();
    MapContract ma2=MapContract.builder(new IdentityMap()).input(mat1).name("Map 2").build();
    MapContract ma3=MapContract.builder(new IdentityMap()).input(ma2).name("Map 3").build();
    MatchContract mat2=MatchContract.builder(new DummyMatchStub(),PactInteger.class,0,0).input1(r1,r2,ma2,ma3).input2(ma2).name("Match 2").build();
    mat2.setParameter(PactCompiler.HINT_LOCAL_STRATEGY,PactCompiler.HINT_LOCAL_STRATEGY_MERGE);
    FileDataSink sink=new FileDataSink(new DummyOutputFormat(),OUT_FILE,mat2);
    Plan plan=new Plan(sink,"Branching Union");
    OptimizedPlan oPlan=compileNoStats(plan);
    NepheleJobGraphGenerator jobGen=new NepheleJobGraphGenerator();
    jobGen.compileJobGraph(oPlan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
