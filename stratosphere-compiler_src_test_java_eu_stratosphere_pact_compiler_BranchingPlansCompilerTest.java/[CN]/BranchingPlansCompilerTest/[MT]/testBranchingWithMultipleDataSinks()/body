{
  try {
    final String out1Path="file:///test/1";
    final String out2Path="file:///test/2";
    final String out3Path="file:///test/3";
    FileDataSource sourceA=new FileDataSource(new DummyInputFormat(),IN_FILE);
    FileDataSource sourceB=new FileDataSource(new DummyInputFormat(),IN_FILE);
    FileDataSource sourceC=new FileDataSource(new DummyInputFormat(),IN_FILE);
    CoGroupOperator co=CoGroupOperator.builder(new DummyCoGroupStub(),PactInteger.class,0,0).input1(sourceA).input2(sourceB).build();
    MapOperator ma=MapOperator.builder(new IdentityMap()).input(co).build();
    JoinOperator mat1=JoinOperator.builder(new DummyMatchStub(),PactInteger.class,0,0).input1(sourceB).input2(sourceC).build();
    JoinOperator mat2=JoinOperator.builder(new DummyMatchStub(),PactInteger.class,0,0).input1(ma).input2(mat1).build();
    ReduceOperator r=ReduceOperator.builder(new IdentityReduce(),PactInteger.class,0).input(ma).build();
    CrossOperator c=CrossOperator.builder(new DummyCrossStub()).input1(r).input2(mat2).build();
    FileDataSink sinkA=new FileDataSink(new DummyOutputFormat(),out1Path,c);
    FileDataSink sinkB=new FileDataSink(new DummyOutputFormat(),out2Path,mat2);
    FileDataSink sinkC=new FileDataSink(new DummyOutputFormat(),out3Path,mat2);
    List<GenericDataSink> sinks=new ArrayList<GenericDataSink>();
    sinks.add(sinkA);
    sinks.add(sinkB);
    sinks.add(sinkC);
    Job plan=new Job(sinks,"Branching Plans With Multiple Data Sinks");
    OptimizedPlan oPlan=compileNoStats(plan);
    Assert.assertEquals("Wrong number of data sinks.",3,oPlan.getDataSinks().size());
    Set<String> allSinks=new HashSet<String>();
    allSinks.add(out1Path);
    allSinks.add(out2Path);
    allSinks.add(out3Path);
    for (    SinkPlanNode n : oPlan.getDataSinks()) {
      String path=((FileDataSink)n.getSinkNode().getPactContract()).getFilePath();
      Assert.assertTrue("Invalid data sink.",allSinks.remove(path));
    }
    NepheleJobGraphGenerator jobGen=new NepheleJobGraphGenerator();
    jobGen.compileJobGraph(oPlan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
