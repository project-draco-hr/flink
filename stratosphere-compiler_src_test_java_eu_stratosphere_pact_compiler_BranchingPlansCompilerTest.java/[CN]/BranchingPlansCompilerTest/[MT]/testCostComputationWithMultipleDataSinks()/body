{
  final int SINKS=5;
  try {
    List<GenericDataSink> sinks=new ArrayList<GenericDataSink>();
    final String out1Path="file:///test/1";
    final String out2Path="file:///test/2";
    FileDataSource sourceA=new FileDataSource(DummyInputFormat.class,IN_FILE);
    MapOperator mapA=MapOperator.builder(IdentityMap.class).input(sourceA).name("Map A").build();
    MapOperator mapC=MapOperator.builder(IdentityMap.class).input(mapA).name("Map C").build();
    FileDataSink[] sinkA=new FileDataSink[SINKS];
    FileDataSink[] sinkB=new FileDataSink[SINKS];
    for (int sink=0; sink < SINKS; sink++) {
      sinkA[sink]=new FileDataSink(DummyOutputFormat.class,out1Path,mapA,"Sink A:" + sink);
      sinks.add(sinkA[sink]);
      sinkB[sink]=new FileDataSink(DummyOutputFormat.class,out2Path,mapC,"Sink B:" + sink);
      sinks.add(sinkB[sink]);
    }
    Plan plan=new Plan(sinks,"Plans With Multiple Data Sinks");
    OptimizedPlan oPlan=compileNoStats(plan);
    NepheleJobGraphGenerator jobGen=new NepheleJobGraphGenerator();
    jobGen.compileJobGraph(oPlan);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
