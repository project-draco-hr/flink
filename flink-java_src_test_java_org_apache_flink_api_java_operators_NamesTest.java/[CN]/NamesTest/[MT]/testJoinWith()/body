{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  List<Tuple1<String>> strLi=new ArrayList<Tuple1<String>>();
  strLi.add(new Tuple1<String>("a"));
  strLi.add(new Tuple1<String>("b"));
  DataSet<Tuple1<String>> strs=env.fromCollection(strLi);
  DataSet<Tuple1<String>> strs1=env.fromCollection(strLi);
  strs.join(strs1).where(0).equalTo(0).with(new FlatJoinFunction<Tuple1<String>,Tuple1<String>,String>(){
    @Override public void join(    Tuple1<String> first,    Tuple1<String> second,    Collector<String> out) throws Exception {
    }
  }
).output(new DiscardingOutputFormat<String>());
  JavaPlan plan=env.createProgramPlan();
  plan.accept(new Visitor<Operator<?>>(){
    @Override public boolean preVisit(    Operator<?> visitable){
      if (visitable instanceof JoinOperatorBase) {
        Assert.assertEquals("Join at testJoinWith(NamesTest.java:93)",visitable.getName());
      }
      return true;
    }
    @Override public void postVisit(    Operator<?> visitable){
    }
  }
);
}
