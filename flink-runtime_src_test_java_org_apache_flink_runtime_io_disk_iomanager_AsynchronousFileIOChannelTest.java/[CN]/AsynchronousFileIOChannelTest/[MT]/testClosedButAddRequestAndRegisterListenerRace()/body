{
  final int numberOfRuns=1024;
  final IOManagerAsync ioManager=new IOManagerAsync();
  final ExecutorService executor=Executors.newFixedThreadPool(2);
  final RequestQueue<WriteRequest> requestQueue=new RequestQueue<WriteRequest>();
  @SuppressWarnings("unchecked") final RequestDoneCallback<Buffer> ioChannelCallback=mock(RequestDoneCallback.class);
  final TestNotificationListener listener=new TestNotificationListener();
  try {
    for (int i=0; i < numberOfRuns; i++) {
      final TestAsyncFileIOChannel ioChannel=new TestAsyncFileIOChannel(ioManager.createChannel(),requestQueue,ioChannelCallback,true);
      final CountDownLatch sync=new CountDownLatch(2);
      final WriteRequest request=mock(WriteRequest.class);
      ioChannel.close();
      Callable<Void> addRequestTask=new Callable<Void>(){
        @Override public Void call() throws Exception {
          try {
            ioChannel.addRequest(request);
          }
 catch (          Throwable expected) {
          }
 finally {
            sync.countDown();
          }
          return null;
        }
      }
;
      Callable<Void> registerListenerTask=new Callable<Void>(){
        @Override public Void call() throws Exception {
          try {
            while (true) {
              int current=listener.getNumberOfNotifications();
              if (ioChannel.registerAllRequestsProcessedListener(listener)) {
                listener.waitForNotification(current);
              }
 else               if (ioChannel.isClosed()) {
                break;
              }
            }
          }
  finally {
            sync.countDown();
          }
          return null;
        }
      }
;
      executor.submit(addRequestTask);
      executor.submit(registerListenerTask);
      if (!sync.await(2,TimeUnit.MINUTES)) {
        fail("Test failed due to a timeout. This indicates a deadlock due to the way" + "that listeners are registered/notified in the asynchronous file I/O" + "channel.");
      }
    }
  }
  finally {
    ioManager.shutdown();
    executor.shutdown();
  }
}
