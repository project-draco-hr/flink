{
  KeySelector<Integer,Integer> keySelector=new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=-4873366487571254798L;
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
;
  OneInputStreamOperatorTestHarness<Integer,Map<String,Integer>> harness=new OneInputStreamOperatorTestHarness<>(new KeyedCEPPatternOperator<Integer,Integer>(IntSerializer.INSTANCE,false,keySelector,IntSerializer.INSTANCE,new DummyNFAFactory<>(IntSerializer.INSTANCE)));
  harness.configureForKeyedStream(keySelector,BasicTypeInfo.INT_TYPE_INFO);
  harness.open();
  Watermark expectedWatermark=new Watermark(42L);
  harness.processWatermark(expectedWatermark);
  Object watermark=harness.getOutput().poll();
  assertTrue(watermark instanceof Watermark);
  assertEquals(expectedWatermark,watermark);
  harness.close();
}
