{
  KeySelector<Event,Integer> keySelector=new KeySelector<Event,Integer>(){
    private static final long serialVersionUID=-4873366487571254798L;
    @Override public Integer getKey(    Event value) throws Exception {
      return value.getId();
    }
  }
;
  OneInputStreamOperatorTestHarness<Event,Map<String,Event>> harness=new KeyedOneInputStreamOperatorTestHarness<>(new KeyedCEPPatternOperator<>(Event.createTypeSerializer(),false,keySelector,IntSerializer.INSTANCE,new NFAFactory()),keySelector,BasicTypeInfo.INT_TYPE_INFO);
  harness.open();
  Watermark expectedWatermark=new Watermark(42L);
  harness.processWatermark(expectedWatermark);
  Object watermark=harness.getOutput().poll();
  assertTrue(watermark instanceof Watermark);
  assertEquals(expectedWatermark,watermark);
  harness.close();
}
