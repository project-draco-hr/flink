{
  closeCalled.set(0);
  final int WINDOW_SIZE=4;
  NonKeyedWindowOperator<Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator=new NonKeyedWindowOperator<>(GlobalWindows.create(),windowBufferFactory,new ReduceWindowFunction<GlobalWindow,Tuple2<String,Integer>>(new SumReducer()),PurgingTrigger.of(CountTrigger.of(WINDOW_SIZE)));
  operator.setInputType(TypeInfoParser.<Tuple2<String,Integer>>parse("Tuple2<String, Integer>"),new ExecutionConfig());
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",4),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",4),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.close();
  if (windowBufferFactory instanceof PreAggregatingHeapWindowBuffer.Factory) {
    Assert.assertEquals("Close was not called.",2,closeCalled.get());
  }
 else {
    Assert.assertEquals("Close was not called.",1,closeCalled.get());
  }
}
