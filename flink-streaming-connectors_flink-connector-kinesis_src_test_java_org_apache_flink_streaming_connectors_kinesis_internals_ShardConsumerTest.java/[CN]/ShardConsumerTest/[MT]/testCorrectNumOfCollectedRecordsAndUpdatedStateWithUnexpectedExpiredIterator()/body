{
  KinesisStreamShard fakeToBeConsumedShard=new KinesisStreamShard("fakeStream",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(0)).withHashKeyRange(new HashKeyRange().withStartingHashKey("0").withEndingHashKey(new BigInteger(StringUtils.repeat("FF",16),16).toString())));
  LinkedList<KinesisStreamShardState> subscribedShardsStateUnderTest=new LinkedList<>();
  subscribedShardsStateUnderTest.add(new KinesisStreamShardState(fakeToBeConsumedShard,new SequenceNumber("fakeStartingState")));
  TestableKinesisDataFetcher fetcher=new TestableKinesisDataFetcher(Collections.singletonList("fakeStream"),new Properties(),10,2,new AtomicReference<Throwable>(),subscribedShardsStateUnderTest,KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(Collections.singletonList("fakeStream")),Mockito.mock(KinesisProxyInterface.class));
  new ShardConsumer<>(fetcher,0,subscribedShardsStateUnderTest.get(0).getKinesisStreamShard(),subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum(),FakeKinesisBehavioursFactory.totalNumOfRecordsAfterNumOfGetRecordsCallsWithUnexpectedExpiredIterator(1000,9,7)).run();
  assertTrue(fetcher.getNumOfElementsCollected() == 1000);
  assertTrue(subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum().equals(SentinelSequenceNumber.SENTINEL_SHARD_ENDING_SEQUENCE_NUM.get()));
}
