{
  super(template,globalProps,localProps);
  this.inputs=new ArrayList<List<PactConnection>>(2);
  int i=0;
  if (pred1 != null) {
    for (    PactConnection c : conn1) {
      PactConnection cc=new PactConnection(c,pred1.get(i++),this);
      this.input1.add(cc);
    }
    this.inputs.add(this.input1);
  }
  if (pred2 != null) {
    i=0;
    for (    PactConnection c : conn2) {
      PactConnection cc=new PactConnection(c,pred2.get(i++),this);
      this.input2.add(cc);
    }
    this.inputs.add(this.input2);
  }
  if (template.openBranches != null) {
    if (this.branchPlan == null) {
      this.branchPlan=new HashMap<OptimizerNode,OptimizerNode>(8);
    }
    for (    UnclosedBranchDescriptor uc : template.openBranches) {
      OptimizerNode brancher=uc.branchingNode;
      OptimizerNode selectedCandidate=null;
      if (pred1 != null) {
        Iterator<OptimizerNode> it1=pred1.iterator();
        while (it1.hasNext()) {
          OptimizerNode n=it1.next();
          if (n.branchPlan != null) {
            selectedCandidate=n.branchPlan.get(brancher);
            this.branchPlan.put(brancher,selectedCandidate);
          }
        }
      }
      if (selectedCandidate == null && pred2 != null) {
        Iterator<OptimizerNode> it2=pred2.iterator();
        while (it2.hasNext()) {
          OptimizerNode n=it2.next();
          if (n.branchPlan != null) {
            selectedCandidate=n.branchPlan.get(brancher);
            this.branchPlan.put(brancher,selectedCandidate);
          }
        }
      }
      if (selectedCandidate == null) {
        throw new CompilerException("Candidates for a node with open branches are missing information about the selected candidate ");
      }
    }
  }
}
