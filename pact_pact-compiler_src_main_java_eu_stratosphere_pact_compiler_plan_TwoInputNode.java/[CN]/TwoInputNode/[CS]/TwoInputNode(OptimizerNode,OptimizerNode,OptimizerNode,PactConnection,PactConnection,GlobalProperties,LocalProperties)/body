{
  super(template,globalProps,localProps);
  this.input1=new PactConnection(conn1,pred1,this);
  this.input2=new PactConnection(conn2,pred2,this);
  this.inputs=new ArrayList<PactConnection>(2);
  this.inputs.add(input1);
  this.inputs.add(input2);
  if (template.openBranches != null) {
    if (this.branchPlan == null) {
      this.branchPlan=new HashMap<OptimizerNode,OptimizerNode>(8);
    }
    for (    UnclosedBranchDescriptor uc : template.openBranches) {
      OptimizerNode brancher=uc.branchingNode;
      OptimizerNode selectedCandidate=null;
      if (pred1.branchPlan != null) {
        selectedCandidate=pred1.branchPlan.get(brancher);
      }
      if (selectedCandidate == null && pred2.branchPlan != null) {
        selectedCandidate=pred2.branchPlan.get(brancher);
      }
      if (selectedCandidate == null) {
        throw new CompilerException("Candidates for a node with open branches are missing information about the selected candidate ");
      }
      this.branchPlan.put(brancher,selectedCandidate);
    }
  }
}
