{
  DualInputContract<?> contr=(DualInputContract<?>)getPactContract();
  List<Contract> leftPreds=contr.getFirstInputs();
  List<Contract> rightPreds=contr.getSecondInputs();
  OptimizerNode pred1;
  if (leftPreds.size() == 1) {
    pred1=contractToNode.get(leftPreds.get(0));
  }
 else {
    pred1=new UnionNode(getPactContract(),leftPreds,contractToNode);
    pred1.setDegreeOfParallelism(this.getDegreeOfParallelism());
    pred1.SetId(this.id);
    pred1.setInstancesPerMachine(subtasksPerInstance);
    this.id++;
  }
  PactConnection conn1=new PactConnection(pred1,this);
  this.input1=conn1;
  pred1.addOutConn(conn1);
  OptimizerNode pred2;
  if (rightPreds.size() == 1) {
    pred2=contractToNode.get(rightPreds.get(0));
  }
 else {
    pred2=new UnionNode(getPactContract(),rightPreds,contractToNode);
    pred2.setDegreeOfParallelism(this.getDegreeOfParallelism());
    pred2.SetId(this.id);
    pred2.setInstancesPerMachine(subtasksPerInstance);
    this.id++;
  }
  PactConnection conn2=new PactConnection(pred2,this);
  this.input2=conn2;
  pred2.addOutConn(conn2);
  Configuration conf=getPactContract().getParameters();
  String shipStrategy=conf.getString(PactCompiler.HINT_SHIP_STRATEGY,null);
  if (shipStrategy != null) {
    if (PactCompiler.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      this.input1.setShipStrategy(new ForwardSS());
      this.input2.setShipStrategy(new ForwardSS());
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      this.input1.setShipStrategy(new BroadcastSS());
      this.input2.setShipStrategy(new BroadcastSS());
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_REPARTITION.equals(shipStrategy)) {
      this.input1.setShipStrategy(new PartitionHashSS(this.keySet1));
      this.input2.setShipStrategy(new PartitionHashSS(this.keySet2));
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy: " + shipStrategy);
    }
  }
  shipStrategy=conf.getString(PactCompiler.HINT_SHIP_STRATEGY_FIRST_INPUT,null);
  if (shipStrategy != null) {
    if (PactCompiler.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      this.input1.setShipStrategy(new ForwardSS());
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      this.input1.setShipStrategy(new BroadcastSS());
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_REPARTITION.equals(shipStrategy)) {
      this.input1.setShipStrategy(new PartitionHashSS(this.keySet1));
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy of input one: " + shipStrategy);
    }
  }
  shipStrategy=conf.getString(PactCompiler.HINT_SHIP_STRATEGY_SECOND_INPUT,null);
  if (shipStrategy != null) {
    if (PactCompiler.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      this.input2.setShipStrategy(new ForwardSS());
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      this.input2.setShipStrategy(new BroadcastSS());
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_REPARTITION.equals(shipStrategy)) {
      this.input2.setShipStrategy(new PartitionHashSS(this.keySet2));
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy of input two: " + shipStrategy);
    }
  }
}
