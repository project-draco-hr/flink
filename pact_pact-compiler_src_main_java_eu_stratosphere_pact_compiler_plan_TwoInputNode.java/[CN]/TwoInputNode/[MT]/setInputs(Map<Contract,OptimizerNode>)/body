{
  DualInputContract<?,?,?,?,?,?> contr=(DualInputContract<?,?,?,?,?,?>)getPactContract();
  List<Contract> leftPreds=contr.getFirstInputs();
  List<Contract> rightPreds=contr.getSecondInputs();
  for (  Contract cl : leftPreds) {
    OptimizerNode pred1=contractToNode.get(cl);
    PactConnection conn1=new PactConnection(pred1,this);
    this.input1.add(conn1);
    pred1.addOutgoingConnection(conn1);
  }
  for (  Contract cr : rightPreds) {
    OptimizerNode pred2=contractToNode.get(cr);
    PactConnection conn2=new PactConnection(pred2,this);
    this.input2.add(conn2);
    pred2.addOutgoingConnection(conn2);
  }
  Configuration conf=getPactContract().getParameters();
  String shipStrategy=conf.getString(PactCompiler.HINT_SHIP_STRATEGY,null);
  if (shipStrategy != null) {
    if (PactCompiler.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      for (      PactConnection c : this.input1) {
        c.setShipStrategy(ShipStrategy.FORWARD);
      }
      for (      PactConnection c : this.input2) {
        c.setShipStrategy(ShipStrategy.FORWARD);
      }
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      for (      PactConnection c : this.input1) {
        c.setShipStrategy(ShipStrategy.BROADCAST);
      }
      for (      PactConnection c : this.input2) {
        c.setShipStrategy(ShipStrategy.BROADCAST);
      }
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_REPARTITION.equals(shipStrategy)) {
      for (      PactConnection c : this.input1) {
        c.setShipStrategy(ShipStrategy.PARTITION_HASH);
      }
      for (      PactConnection c : this.input2) {
        c.setShipStrategy(ShipStrategy.PARTITION_HASH);
      }
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy: " + shipStrategy);
    }
  }
  shipStrategy=conf.getString(PactCompiler.HINT_SHIP_STRATEGY_FIRST_INPUT,null);
  if (shipStrategy != null) {
    if (PactCompiler.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      for (      PactConnection c : this.input1) {
        c.setShipStrategy(ShipStrategy.FORWARD);
      }
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      for (      PactConnection c : this.input1) {
        c.setShipStrategy(ShipStrategy.BROADCAST);
      }
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_REPARTITION.equals(shipStrategy)) {
      for (      PactConnection c : this.input1) {
        c.setShipStrategy(ShipStrategy.PARTITION_HASH);
      }
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy of input one: " + shipStrategy);
    }
  }
  shipStrategy=conf.getString(PactCompiler.HINT_SHIP_STRATEGY_SECOND_INPUT,null);
  if (shipStrategy != null) {
    if (PactCompiler.HINT_SHIP_STRATEGY_FORWARD.equals(shipStrategy)) {
      for (      PactConnection c : this.input2) {
        c.setShipStrategy(ShipStrategy.FORWARD);
      }
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_BROADCAST.equals(shipStrategy)) {
      for (      PactConnection c : this.input2) {
        c.setShipStrategy(ShipStrategy.BROADCAST);
      }
    }
 else     if (PactCompiler.HINT_SHIP_STRATEGY_REPARTITION.equals(shipStrategy)) {
      for (      PactConnection c : this.input2) {
        c.setShipStrategy(ShipStrategy.PARTITION_HASH);
      }
    }
 else {
      throw new CompilerException("Unknown hint for shipping strategy of input two: " + shipStrategy);
    }
  }
}
