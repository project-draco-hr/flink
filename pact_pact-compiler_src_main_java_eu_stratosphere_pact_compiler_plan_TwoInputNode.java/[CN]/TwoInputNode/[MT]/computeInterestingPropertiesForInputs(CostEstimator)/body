{
  final InterestingProperties props1=getInterestingProperties().filterByCodeAnnotations(this,0);
  final InterestingProperties props2=getInterestingProperties().filterByCodeAnnotations(this,1);
  final OptimizerNode pred1=getFirstPredecessorNode();
  final OptimizerNode pred2=getSecondPredecessorNode();
  for (  OperatorDescriptorDual dpd : this.possibleProperties) {
    for (    GlobalPropertiesPair gp : dpd.getPossibleGlobalProperties()) {
      Costs max1=new Costs();
      gp.getProperties1().addMinimalRequiredCosts(max1,estimator,pred1,this);
      props1.addGlobalProperties(gp.getProperties1(),max1);
      Costs max2=new Costs();
      gp.getProperties2().addMinimalRequiredCosts(max2,estimator,pred2,this);
      props2.addGlobalProperties(gp.getProperties2(),max2);
    }
    for (    LocalPropertiesPair lp : dpd.getPossibleLocalProperties()) {
      Costs max1=new Costs();
      lp.getProperties1().addMinimalRequiredCosts(max1,estimator,pred1,getMinimalMemoryAcrossAllSubTasks());
      props1.addLocalProperties(lp.getProperties1(),max1);
      Costs max2=new Costs();
      lp.getProperties2().addMinimalRequiredCosts(max2,estimator,pred2,getMinimalMemoryAcrossAllSubTasks());
      props2.addLocalProperties(lp.getProperties2(),max2);
    }
  }
  this.input1.setInterestingProperties(props1);
  this.input2.setInterestingProperties(props2);
}
