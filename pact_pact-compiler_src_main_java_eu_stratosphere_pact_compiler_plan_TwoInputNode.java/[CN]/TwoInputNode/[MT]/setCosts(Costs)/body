{
  super.setCosts(nodeCosts);
  if (this.lastJoinedBranchNode == null) {
    return;
  }
  final int sizeInput1=this.input1.size();
  final int sizeInput2=this.input2.size();
  for (int i=0; i < sizeInput1; ++i) {
    PactConnection pc1=this.input1.get(i);
    for (int j=i + 1; j < sizeInput1; ++j) {
      PactConnection pc2=this.input1.get(j);
      OptimizerNode child1=pc1.getSourcePact();
      OptimizerNode child2=pc2.getSourcePact();
      if (child1 == null || child2 == null) {
        continue;
      }
      OptimizerNode lastCommonChild=child1.branchPlan.get(this.lastJoinedBranchNode);
      Costs douleCounted=lastCommonChild.getCumulativeCosts();
      getCumulativeCosts().subtractCosts(douleCounted);
    }
  }
  for (int i=0; i < sizeInput2; ++i) {
    PactConnection pc1=this.input2.get(i);
    for (int j=i + 1; j < sizeInput2; ++j) {
      PactConnection pc2=this.input2.get(j);
      OptimizerNode child1=pc1.getSourcePact();
      OptimizerNode child2=pc2.getSourcePact();
      if (child1 == null || child2 == null) {
        continue;
      }
      OptimizerNode lastCommonChild=child1.branchPlan.get(this.lastJoinedBranchNode);
      Costs douleCounted=lastCommonChild.getCumulativeCosts();
      getCumulativeCosts().subtractCosts(douleCounted);
    }
  }
  for (  PactConnection pc1 : this.input1) {
    for (    PactConnection pc2 : this.input2) {
      OptimizerNode child1=pc1.getSourcePact();
      OptimizerNode child2=pc2.getSourcePact();
      if (child1 == null || child2 == null) {
        continue;
      }
      OptimizerNode lastCommonChild=child1.branchPlan.get(this.lastJoinedBranchNode);
      Costs douleCounted=lastCommonChild.getCumulativeCosts();
      getCumulativeCosts().subtractCosts(douleCounted);
    }
  }
}
