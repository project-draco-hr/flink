{
  int[] constFields1=null;
  int[] constFields2=null;
  if (explWrites == null) {
    this.outputSchema=null;
  }
  if (implOpMode1 == null) {
    constFields1=null;
  }
 else {
    if (this.input1.size() > 1)     throw new UnsupportedOperationException("Must be adapted to union case");
    OptimizerNode pred1=this.input1.get(0).getSourcePact();
switch (implOpMode1) {
case Copy:
      if (this.explProjections1 != null) {
        constFields1=FieldSetOperations.setDifference(pred1.getOutputSchema(),this.explProjections1);
      }
 else {
        constFields1=null;
      }
    break;
case Projection:
  constFields1=this.explCopies1;
break;
}
}
if (implOpMode2 == null) {
constFields2=null;
}
 else {
if (this.input2.size() > 1) throw new UnsupportedOperationException("Must be adapted to union case");
OptimizerNode pred2=this.input2.get(0).getSourcePact();
switch (implOpMode2) {
case Copy:
if (this.explProjections2 != null) {
constFields2=FieldSetOperations.setDifference(pred2.getOutputSchema(),this.explProjections2);
}
 else {
constFields2=null;
}
break;
case Projection:
constFields2=this.explCopies2;
break;
}
}
if (constFields1 != null && constFields2 != null) {
this.outputSchema=FieldSetOperations.unionSets(FieldSetOperations.unionSets(constFields1,constFields2),this.explWrites);
}
 else {
this.outputSchema=null;
}
}
