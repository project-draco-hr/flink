{
  StreamExecutionEnvironment env=new TestStreamEnvironment(PARALLELISM,MEMORYSIZE);
  StreamGraph streamGraph=env.getStreamGraph();
  DataStreamSource<Long> src=env.generateSequence(0,0);
  DataStream<Long> broadcast=src.broadcast();
  DataStreamSink<Long> broadcastSink=broadcast.print();
  StreamPartitioner<?> broadcastPartitioner=streamGraph.getStreamEdge(broadcast.getId(),broadcastSink.getId()).getPartitioner();
  assertTrue(broadcastPartitioner instanceof BroadcastPartitioner);
  DataStream<Long> shuffle=src.shuffle();
  DataStreamSink<Long> shuffleSink=shuffle.print();
  StreamPartitioner<?> shufflePartitioner=streamGraph.getStreamEdge(shuffle.getId(),shuffleSink.getId()).getPartitioner();
  assertTrue(shufflePartitioner instanceof ShufflePartitioner);
  DataStream<Long> forward=src.forward();
  DataStreamSink<Long> forwardSink=forward.print();
  StreamPartitioner<?> forwardPartitioner=streamGraph.getStreamEdge(forward.getId(),forwardSink.getId()).getPartitioner();
  assertTrue(forwardPartitioner instanceof RebalancePartitioner);
  DataStream<Long> rebalance=src.rebalance();
  DataStreamSink<Long> rebalanceSink=rebalance.print();
  StreamPartitioner<?> rebalancePartitioner=streamGraph.getStreamEdge(rebalance.getId(),rebalanceSink.getId()).getPartitioner();
  assertTrue(rebalancePartitioner instanceof RebalancePartitioner);
  DataStream<Long> global=src.global();
  DataStreamSink<Long> globalSink=global.print();
  StreamPartitioner<?> globalPartitioner=streamGraph.getStreamEdge(global.getId(),globalSink.getId()).getPartitioner();
  assertTrue(globalPartitioner instanceof GlobalPartitioner);
}
