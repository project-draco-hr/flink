{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStreamSource<Long> src=env.generateSequence(0,0);
  DataStream<Long> broadcast=src.broadcast();
  DataStreamSink<Long> broadcastSink=broadcast.print();
  StreamPartitioner<?> broadcastPartitioner=env.getStreamGraph().getStreamEdge(src.getId(),broadcastSink.getTransformation().getId()).getPartitioner();
  assertTrue(broadcastPartitioner instanceof BroadcastPartitioner);
  DataStream<Long> shuffle=src.shuffle();
  DataStreamSink<Long> shuffleSink=shuffle.print();
  StreamPartitioner<?> shufflePartitioner=env.getStreamGraph().getStreamEdge(src.getId(),shuffleSink.getTransformation().getId()).getPartitioner();
  assertTrue(shufflePartitioner instanceof ShufflePartitioner);
  DataStream<Long> forward=src.forward();
  DataStreamSink<Long> forwardSink=forward.print();
  StreamPartitioner<?> forwardPartitioner=env.getStreamGraph().getStreamEdge(src.getId(),forwardSink.getTransformation().getId()).getPartitioner();
  assertTrue(forwardPartitioner instanceof ForwardPartitioner);
  DataStream<Long> rebalance=src.rebalance();
  DataStreamSink<Long> rebalanceSink=rebalance.print();
  StreamPartitioner<?> rebalancePartitioner=env.getStreamGraph().getStreamEdge(src.getId(),rebalanceSink.getTransformation().getId()).getPartitioner();
  assertTrue(rebalancePartitioner instanceof RebalancePartitioner);
  DataStream<Long> global=src.global();
  DataStreamSink<Long> globalSink=global.print();
  StreamPartitioner<?> globalPartitioner=env.getStreamGraph().getStreamEdge(src.getId(),globalSink.getTransformation().getId()).getPartitioner();
  assertTrue(globalPartitioner instanceof GlobalPartitioner);
}
