{
  StreamExecutionEnvironment env=new TestStreamEnvironment(PARALLELISM,MEMORYSIZE);
  StreamGraph streamGraph=env.getStreamGraph();
  DataStreamSource<Long> src=env.generateSequence(0,0);
  MapFunction<Long,Integer> mapFunction=new MapFunction<Long,Integer>(){
    @Override public Integer map(    Long value) throws Exception {
      return null;
    }
  }
;
  DataStream<Integer> map=src.map(mapFunction);
  assertEquals(mapFunction,getFunctionForDataStream(map));
  FlatMapFunction<Long,Integer> flatMapFunction=new FlatMapFunction<Long,Integer>(){
    @Override public void flatMap(    Long value,    Collector<Integer> out) throws Exception {
    }
  }
;
  DataStream<Integer> flatMap=src.flatMap(flatMapFunction);
  assertEquals(flatMapFunction,getFunctionForDataStream(flatMap));
  FilterFunction<Integer> filterFunction=new FilterFunction<Integer>(){
    @Override public boolean filter(    Integer value) throws Exception {
      return false;
    }
  }
;
  DataStream<Integer> unionFilter=map.union(flatMap).filter(filterFunction);
  assertEquals(filterFunction,getFunctionForDataStream(unionFilter));
  try {
    streamGraph.getStreamEdge(map.getId(),unionFilter.getId());
  }
 catch (  RuntimeException e) {
    fail(e.getMessage());
  }
  try {
    streamGraph.getStreamEdge(flatMap.getId(),unionFilter.getId());
  }
 catch (  RuntimeException e) {
    fail(e.getMessage());
  }
  OutputSelector<Integer> outputSelector=new OutputSelector<Integer>(){
    @Override public Iterable<String> select(    Integer value){
      return null;
    }
  }
;
  SplitDataStream<Integer> split=unionFilter.split(outputSelector);
  List<OutputSelector<?>> outputSelectors=streamGraph.getStreamNode(split.getId()).getOutputSelectors();
  assertEquals(1,outputSelectors.size());
  assertEquals(outputSelector,outputSelectors.get(0));
  DataStream<Integer> select=split.select("a");
  DataStreamSink<Integer> sink=select.print();
  StreamEdge splitEdge=streamGraph.getStreamEdge(select.getId(),sink.getId());
  assertEquals("a",splitEdge.getSelectedNames().get(0));
  ConnectedDataStream<Integer,Integer> connect=map.connect(flatMap);
  CoMapFunction<Integer,Integer,String> coMapper=new CoMapFunction<Integer,Integer,String>(){
    @Override public String map1(    Integer value){
      return null;
    }
    @Override public String map2(    Integer value){
      return null;
    }
  }
;
  DataStream<String> coMap=connect.map(coMapper);
  assertEquals(coMapper,getFunctionForDataStream(coMap));
  try {
    streamGraph.getStreamEdge(map.getId(),coMap.getId());
  }
 catch (  RuntimeException e) {
    fail(e.getMessage());
  }
  try {
    streamGraph.getStreamEdge(flatMap.getId(),coMap.getId());
  }
 catch (  RuntimeException e) {
    fail(e.getMessage());
  }
}
