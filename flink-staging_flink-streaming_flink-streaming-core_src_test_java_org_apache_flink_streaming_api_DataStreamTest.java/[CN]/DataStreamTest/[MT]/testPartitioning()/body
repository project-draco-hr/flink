{
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream src1=env.fromElements(new Tuple2<Long,Long>(0L,0L));
  DataStream src2=env.fromElements(new Tuple2<Long,Long>(0L,0L));
  ConnectedStreams connected=src1.connect(src2);
  DataStream group1=src1.keyBy(0);
  DataStream group2=src1.keyBy(1,0);
  DataStream group3=src1.keyBy("f0");
  DataStream group4=src1.keyBy(new FirstSelector());
  int id1=createDownStreamId(group1);
  int id2=createDownStreamId(group2);
  int id3=createDownStreamId(group3);
  int id4=createDownStreamId(group4);
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),id1)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),id2)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),id3)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),id4)));
  assertTrue(isKeyed(group1));
  assertTrue(isKeyed(group2));
  assertTrue(isKeyed(group3));
  assertTrue(isKeyed(group4));
  DataStream partition1=src1.partitionByHash(0);
  DataStream partition2=src1.partitionByHash(1,0);
  DataStream partition3=src1.partitionByHash("f0");
  DataStream partition4=src1.partitionByHash(new FirstSelector());
  int pid1=createDownStreamId(partition1);
  int pid2=createDownStreamId(partition2);
  int pid3=createDownStreamId(partition3);
  int pid4=createDownStreamId(partition4);
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),pid1)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),pid2)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),pid3)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),pid4)));
  assertFalse(isKeyed(partition1));
  assertFalse(isKeyed(partition3));
  assertFalse(isKeyed(partition2));
  assertFalse(isKeyed(partition4));
  Partitioner<Long> longPartitioner=new Partitioner<Long>(){
    @Override public int partition(    Long key,    int numPartitions){
      return 100;
    }
  }
;
  DataStream customPartition1=src1.partitionCustom(longPartitioner,0);
  DataStream customPartition3=src1.partitionCustom(longPartitioner,"f0");
  DataStream customPartition4=src1.partitionCustom(longPartitioner,new FirstSelector());
  int cid1=createDownStreamId(customPartition1);
  int cid2=createDownStreamId(customPartition3);
  int cid3=createDownStreamId(customPartition4);
  assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),cid1)));
  assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),cid2)));
  assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),cid3)));
  assertFalse(isKeyed(customPartition1));
  assertFalse(isKeyed(customPartition3));
  assertFalse(isKeyed(customPartition4));
  ConnectedStreams connectedGroup1=connected.keyBy(0,0);
  Integer downStreamId1=createDownStreamId(connectedGroup1);
  ConnectedStreams connectedGroup2=connected.keyBy(new int[]{0},new int[]{0});
  Integer downStreamId2=createDownStreamId(connectedGroup2);
  ConnectedStreams connectedGroup3=connected.keyBy("f0","f0");
  Integer downStreamId3=createDownStreamId(connectedGroup3);
  ConnectedStreams connectedGroup4=connected.keyBy(new String[]{"f0"},new String[]{"f0"});
  Integer downStreamId4=createDownStreamId(connectedGroup4);
  ConnectedStreams connectedGroup5=connected.keyBy(new FirstSelector(),new FirstSelector());
  Integer downStreamId5=createDownStreamId(connectedGroup5);
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),downStreamId1)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),downStreamId1)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),downStreamId2)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),downStreamId2)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),downStreamId3)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),downStreamId3)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),downStreamId4)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),downStreamId4)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),downStreamId5)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),downStreamId5)));
  assertTrue(isKeyed(connectedGroup1));
  assertTrue(isKeyed(connectedGroup2));
  assertTrue(isKeyed(connectedGroup3));
  assertTrue(isKeyed(connectedGroup4));
  assertTrue(isKeyed(connectedGroup5));
  ConnectedStreams connectedPartition1=connected.partitionByHash(0,0);
  Integer connectDownStreamId1=createDownStreamId(connectedPartition1);
  ConnectedStreams connectedPartition2=connected.partitionByHash(new int[]{0},new int[]{0});
  Integer connectDownStreamId2=createDownStreamId(connectedPartition2);
  ConnectedStreams connectedPartition3=connected.partitionByHash("f0","f0");
  Integer connectDownStreamId3=createDownStreamId(connectedPartition3);
  ConnectedStreams connectedPartition4=connected.partitionByHash(new String[]{"f0"},new String[]{"f0"});
  Integer connectDownStreamId4=createDownStreamId(connectedPartition4);
  ConnectedStreams connectedPartition5=connected.partitionByHash(new FirstSelector(),new FirstSelector());
  Integer connectDownStreamId5=createDownStreamId(connectedPartition5);
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),connectDownStreamId1)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),connectDownStreamId1)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),connectDownStreamId2)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),connectDownStreamId2)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),connectDownStreamId3)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),connectDownStreamId3)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),connectDownStreamId4)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),connectDownStreamId4)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),connectDownStreamId5)));
  assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),connectDownStreamId5)));
  assertFalse(isKeyed(connectedPartition1));
  assertFalse(isKeyed(connectedPartition2));
  assertFalse(isKeyed(connectedPartition3));
  assertFalse(isKeyed(connectedPartition4));
  assertFalse(isKeyed(connectedPartition5));
}
