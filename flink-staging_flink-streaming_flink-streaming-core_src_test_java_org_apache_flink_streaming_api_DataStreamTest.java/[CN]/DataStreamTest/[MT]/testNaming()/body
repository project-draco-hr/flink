{
  StreamExecutionEnvironment env=new TestStreamEnvironment(PARALLELISM,MEMORYSIZE);
  DataStream<Long> dataStream1=env.generateSequence(0,0).name("testSource1").map(new MapFunction<Long,Long>(){
    @Override public Long map(    Long value) throws Exception {
      return null;
    }
  }
).name("testMap");
  DataStream<Long> dataStream2=env.generateSequence(0,0).name("testSource2").map(new MapFunction<Long,Long>(){
    @Override public Long map(    Long value) throws Exception {
      return null;
    }
  }
).name("testMap");
  DataStream<Long> connected=dataStream1.connect(dataStream2).flatMap(new CoFlatMapFunction<Long,Long,Long>(){
    @Override public void flatMap1(    Long value,    Collector<Long> out) throws Exception {
    }
    @Override public void flatMap2(    Long value,    Collector<Long> out) throws Exception {
    }
  }
).name("testCoFlatMap").window(Count.of(10)).foldWindow(0L,new FoldFunction<Long,Long>(){
    @Override public Long fold(    Long accumulator,    Long value) throws Exception {
      return null;
    }
  }
).name("testWindowFold").flatten();
  String plan=env.getExecutionPlan();
  assertTrue(plan.contains("testSource1"));
  assertTrue(plan.contains("testSource2"));
  assertTrue(plan.contains("testMap"));
  assertTrue(plan.contains("testMap"));
  assertTrue(plan.contains("testCoFlatMap"));
  assertTrue(plan.contains("testWindowFold"));
}
