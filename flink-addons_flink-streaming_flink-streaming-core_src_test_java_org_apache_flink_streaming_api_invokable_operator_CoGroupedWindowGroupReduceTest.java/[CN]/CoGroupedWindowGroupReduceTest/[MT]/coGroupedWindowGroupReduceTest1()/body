{
  List<Character> inputs1=new ArrayList<Character>();
  inputs1.add('a');
  inputs1.add('b');
  inputs1.add('c');
  inputs1.add('a');
  inputs1.add('a');
  inputs1.add('c');
  inputs1.add('b');
  inputs1.add('c');
  inputs1.add('a');
  inputs1.add('a');
  inputs1.add('x');
  List<Character> inputs2=new ArrayList<Character>();
  inputs2.add('a');
  inputs2.add('d');
  inputs2.add('d');
  inputs2.add('e');
  inputs2.add('d');
  inputs2.add('e');
  inputs2.add('e');
  inputs2.add('a');
  inputs2.add('a');
  inputs2.add('x');
  List<Long> timestamps1=Arrays.asList(0L,1L,1L,1L,2L,2L,2L,3L,8L,10L,11L);
  List<Long> timestamps2=Arrays.asList(0L,5L,5L,6L,6L,7L,7L,8L,8L,10L);
  CoGroupedWindowGroupReduceInvokable<Character,Character,String> invokable=new CoGroupedWindowGroupReduceInvokable<Character,Character,String>(new MyCoGroupReduceFunction1(),5L,5L,3L,5L,0,0,new MyTimeStamp<Character>(timestamps1),new MyTimeStamp<Character>(timestamps2));
  List<String> expected=new ArrayList<String>();
  expected.add("a:3");
  expected.add("b:2");
  expected.add("c:3");
  expected.add("c:1");
  expected.add("a:2");
  expected.add("a:1");
  expected.add("a:2");
  expected.add("d:3");
  expected.add("e:3");
  List<String> actualList=MockCoInvokable.createAndExecute(invokable,inputs1,inputs2);
  Collections.sort(expected);
  Collections.sort(actualList);
  assertEquals(expected,actualList);
}
