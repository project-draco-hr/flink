{
  List<Tuple2<String,Integer>> inputs1=new ArrayList<Tuple2<String,Integer>>();
  inputs1.add(new Tuple2<String,Integer>("a",1));
  inputs1.add(new Tuple2<String,Integer>("b",1));
  inputs1.add(new Tuple2<String,Integer>("c",0));
  inputs1.add(new Tuple2<String,Integer>("d",0));
  inputs1.add(new Tuple2<String,Integer>("e",1));
  inputs1.add(new Tuple2<String,Integer>("f",1));
  inputs1.add(new Tuple2<String,Integer>("g",0));
  inputs1.add(new Tuple2<String,Integer>("h",0));
  inputs1.add(new Tuple2<String,Integer>("i",1));
  inputs1.add(new Tuple2<String,Integer>("j",1));
  List<Tuple2<Integer,Integer>> inputs2=new ArrayList<Tuple2<Integer,Integer>>();
  inputs2.add(new Tuple2<Integer,Integer>(1,1));
  inputs2.add(new Tuple2<Integer,Integer>(2,2));
  inputs2.add(new Tuple2<Integer,Integer>(3,1));
  inputs2.add(new Tuple2<Integer,Integer>(4,2));
  inputs2.add(new Tuple2<Integer,Integer>(5,1));
  inputs2.add(new Tuple2<Integer,Integer>(6,2));
  inputs2.add(new Tuple2<Integer,Integer>(7,1));
  inputs2.add(new Tuple2<Integer,Integer>(8,2));
  inputs2.add(new Tuple2<Integer,Integer>(9,1));
  inputs2.add(new Tuple2<Integer,Integer>(10,2));
  List<Long> timestamps1=Arrays.asList(0L,1L,1L,1L,2L,2L,2L,3L,4L,7L);
  List<Long> timestamps2=Arrays.asList(0L,5L,5L,6L,6L,7L,7L,8L,8L,10L);
  CoGroupedWindowGroupReduceInvokable<Tuple2<String,Integer>,Tuple2<Integer,Integer>,String> invokable=new CoGroupedWindowGroupReduceInvokable<Tuple2<String,Integer>,Tuple2<Integer,Integer>,String>(new MyCoGroupReduceFunction2(),2L,4L,2L,2L,1,1,new MyTimeStamp<Tuple2<String,Integer>>(timestamps1),new MyTimeStamp<Tuple2<Integer,Integer>>(timestamps2));
  List<String> expected=new ArrayList<String>();
  expected.add("ab");
  expected.add("cd");
  expected.add("ef");
  expected.add("gh");
  expected.add("i");
  expected.add("1");
  expected.add("3");
  expected.add("2");
  expected.add("15");
  expected.add("12");
  expected.add("21");
  expected.add("18");
  List<String> actualList=MockCoInvokable.createAndExecute(invokable,inputs1,inputs2);
  Collections.sort(expected);
  Collections.sort(actualList);
  assertEquals(expected,actualList);
}
