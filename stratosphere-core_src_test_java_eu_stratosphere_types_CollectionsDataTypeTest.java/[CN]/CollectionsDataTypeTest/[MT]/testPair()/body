{
  NfIntStringPair pair1=new NfIntStringPair();
  pair1.setFirst(new IntValue(10));
  pair1.setSecond(new StringValue("This is a string"));
  Assert.assertEquals(pair1.getFirst(),new IntValue(10));
  Assert.assertEquals(pair1.getSecond(),new StringValue("This is a string"));
  try {
    NfIntStringPair mPairActual=new NfIntStringPair();
    pair1.write(new OutputViewDataOutputStreamWrapper(out));
    mPairActual.read(new InputViewDataInputStreamWrapper(in));
    Assert.assertEquals(pair1,mPairActual);
  }
 catch (  IOException e) {
    Assert.fail("Unexpected IOException");
  }
  NfIntStringPair pair2=new NfIntStringPair();
  NfIntStringPair pair3=new NfIntStringPair();
  NfIntStringPair pair4=new NfIntStringPair();
  NfIntStringPair pair5=new NfIntStringPair();
  NfIntStringPair pair6=new NfIntStringPair();
  pair2.setFirst(new IntValue(10));
  pair2.setSecond(new StringValue("This is a string"));
  pair3.setFirst(new IntValue(5));
  pair3.setSecond(new StringValue("This is a string"));
  pair4.setFirst(new IntValue(15));
  pair4.setSecond(new StringValue("This is a string"));
  pair5.setFirst(new IntValue(10));
  pair5.setSecond(new StringValue("This is a strina"));
  pair6.setFirst(new IntValue(10));
  pair6.setSecond(new StringValue("This is a strinz"));
  Assert.assertTrue(pair1.compareTo(pair2) == 0);
  Assert.assertTrue(pair1.compareTo(pair3) > 0);
  Assert.assertTrue(pair1.compareTo(pair4) < 0);
  Assert.assertTrue(pair1.compareTo(pair5) > 0);
  Assert.assertTrue(pair1.compareTo(pair6) < 0);
  Assert.assertTrue(pair1.equals(pair2));
  Assert.assertFalse(pair1.equals(pair3));
  Assert.assertFalse(pair1.equals(pair4));
  Assert.assertFalse(pair1.equals(pair5));
  Assert.assertFalse(pair1.equals(pair6));
  NfDoubleStringPair mPair7=new NfDoubleStringPair();
  mPair7.setFirst(new DoubleValue(2.3));
  NfIntStringPair[] pairs=new NfIntStringPair[5];
  pairs[0]=pair1;
  pairs[1]=pair2;
  pairs[2]=pair3;
  pairs[3]=pair4;
  pairs[4]=pair5;
  Arrays.sort(pairs);
  NfIntStringPair p1, p2;
  for (int i=1; i < 5; i++) {
    p1=pairs[i - 1];
    p2=pairs[i];
    Assert.assertTrue(p1.compareTo(p2) <= 0);
  }
  HashSet<NfIntStringPair> pairSet=new HashSet<NfIntStringPair>();
  Assert.assertTrue(pairSet.add(pair2));
  Assert.assertTrue(pairSet.add(pair3));
  Assert.assertTrue(pairSet.add(pair4));
  Assert.assertTrue(pairSet.add(pair5));
  Assert.assertTrue(pairSet.add(pair6));
  Assert.assertFalse(pairSet.add(pair1));
  Assert.assertTrue(pairSet.containsAll(Arrays.asList(pairs)));
}
