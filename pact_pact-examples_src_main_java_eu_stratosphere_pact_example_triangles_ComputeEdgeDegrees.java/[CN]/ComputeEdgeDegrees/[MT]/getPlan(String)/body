{
  final int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  final String edgeInput=args.length > 1 ? args[1] : "";
  final String output=args.length > 2 ? args[2] : "";
  final char delimiter=args.length > 3 ? (char)Integer.parseInt(args[3]) : ',';
  FileDataSource edges=new FileDataSource(EdgeInputFormat.class,edgeInput,"Input Edges");
  edges.setParameter(DelimitedInputFormat.RECORD_DELIMITER,"\n");
  edges.setParameter(EdgeInputFormat.ID_DELIMITER_CHAR,delimiter);
  MapContract projectEdge=MapContract.builder(ProjectEdge.class).input(edges).name("Project Edge").build();
  ReduceContract edgeCounter=ReduceContract.builder(CountEdges.class,PactInteger.class,0).input(projectEdge).name("Count Edges for Vertex").build();
  ReduceContract countJoiner=ReduceContract.builder(JoinCountsAndUniquify.class).keyField(PactInteger.class,0).keyField(PactInteger.class,1).input(edgeCounter).name("Join Counts").build();
  FileDataSink triangles=new FileDataSink(EdgeWithDegreesOutputFormat.class,output,countJoiner,"Unique Edges With Degrees");
  Plan p=new Plan(triangles,"Normalize Edges and compute Vertex Degrees");
  p.setDefaultParallelism(numSubTasks);
  return p;
}
