{
  final TestData.TupleGenerator generator=new TestData.TupleGenerator(SEED,KEY_MAX,VALUE_SHORT_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
  final FileIOChannel.ID channel=this.ioManager.createChannel();
  final TypeSerializer<Tuple2<Integer,String>> serializer=TestData.getIntStringTupleSerializer();
  List<MemorySegment> memory=this.memoryManager.allocatePages(this.parentTask,1);
  final BlockChannelWriter<MemorySegment> writer=this.ioManager.createBlockChannelWriter(channel);
  final ChannelWriterOutputView outView=new ChannelWriterOutputView(writer,memory,MEMORY_PAGE_SIZE);
  final Tuple2<Integer,String> rec=new Tuple2<>();
  for (int i=0; i < NUM_PAIRS_SHORT; i++) {
    generator.next(rec);
    serializer.serialize(rec,outView);
  }
  this.memoryManager.release(outView.close());
  memory=this.memoryManager.allocatePages(this.parentTask,1);
  final BlockChannelReader<MemorySegment> reader=this.ioManager.createBlockChannelReader(channel);
  final ChannelReaderInputView inView=new ChannelReaderInputView(reader,memory,outView.getBlockCount(),true);
  generator.reset();
  final Tuple2<Integer,String> readRec=new Tuple2<>();
  for (int i=0; i < NUM_PAIRS_SHORT; i++) {
    generator.next(rec);
    serializer.deserialize(readRec,inView);
    int k1=rec.f0;
    String v1=rec.f1;
    int k2=readRec.f0;
    String v2=readRec.f1;
    Assert.assertTrue("The re-generated and the read record do not match.",k1 == k2 && v1.equals(v2));
  }
  this.memoryManager.release(inView.close());
  reader.deleteChannel();
}
