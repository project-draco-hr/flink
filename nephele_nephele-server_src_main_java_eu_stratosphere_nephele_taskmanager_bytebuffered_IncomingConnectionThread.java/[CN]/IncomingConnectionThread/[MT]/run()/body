{
  while (!this.isInterrupted()) {
synchronized (this.pendingIncomingConnections) {
      if (!pendingIncomingConnections.isEmpty()) {
        final IncomingConnection incomingConnection=pendingIncomingConnections.poll();
        final ReadableByteChannel readableByteChannel=incomingConnection.getReadableByteChannel();
        if (readableByteChannel instanceof SocketChannel) {
          final SocketChannel socketChannel=(SocketChannel)readableByteChannel;
          try {
            socketChannel.configureBlocking(false);
            final SelectionKey key=socketChannel.register(this.selector,SelectionKey.OP_READ);
            key.attach(incomingConnection);
          }
 catch (          IOException ioe) {
            incomingConnection.reportTransmissionProblem(null,ioe);
          }
        }
 else {
          LOG.error("Found pending incoming connection which is not of type SocketChannel buf of type " + readableByteChannel.getClass());
        }
      }
    }
    try {
      selector.select(500);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    final Iterator<SelectionKey> iter=selector.selectedKeys().iterator();
    while (iter.hasNext()) {
      final SelectionKey key=iter.next();
      iter.remove();
      if (key.isValid()) {
        if (key.isReadable()) {
          doRead(key);
        }
 else         if (key.isAcceptable()) {
          doAccept(key);
        }
 else {
          LOG.error("Unknown key: " + key);
        }
      }
 else {
        LOG.error("Received invalid key: " + key);
      }
    }
  }
  if (this.listeningSocket != null) {
    try {
      this.listeningSocket.close();
    }
 catch (    IOException ioe) {
      LOG.debug(ioe);
    }
  }
  try {
    this.selector.close();
  }
 catch (  IOException ioe) {
    LOG.debug(StringUtils.stringifyException(ioe));
  }
}
