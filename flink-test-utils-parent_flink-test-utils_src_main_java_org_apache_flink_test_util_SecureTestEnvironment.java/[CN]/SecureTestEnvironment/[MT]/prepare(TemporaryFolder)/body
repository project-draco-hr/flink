{
  try {
    File baseDirForSecureRun=tempFolder.newFolder();
    LOG.info("Base Directory for Secure Environment: {}",baseDirForSecureRun);
    String hostName="localhost";
    Properties kdcConf=MiniKdc.createConf();
    if (LOG.isDebugEnabled()) {
      kdcConf.setProperty(MiniKdc.DEBUG,"true");
    }
    kdcConf.setProperty(MiniKdc.KDC_BIND_ADDRESS,hostName);
    kdc=new MiniKdc(kdcConf,baseDirForSecureRun);
    kdc.start();
    LOG.info("Started Mini KDC");
    File keytabFile=new File(baseDirForSecureRun,"test-users.keytab");
    testKeytab=keytabFile.getAbsolutePath();
    testZkServerPrincipal="zookeeper/127.0.0.1";
    testZkClientPrincipal="zk-client/127.0.0.1";
    testKafkaServerPrincipal="kafka/" + hostName;
    hadoopServicePrincipal="hadoop/" + hostName;
    testPrincipal="client/" + hostName;
    kdc.createPrincipal(keytabFile,testPrincipal,testZkServerPrincipal,hadoopServicePrincipal,testZkClientPrincipal,testKafkaServerPrincipal);
    testPrincipal=testPrincipal + "@" + kdc.getRealm();
    testZkServerPrincipal=testZkServerPrincipal + "@" + kdc.getRealm();
    testZkClientPrincipal=testZkClientPrincipal + "@" + kdc.getRealm();
    testKafkaServerPrincipal=testKafkaServerPrincipal + "@" + kdc.getRealm();
    hadoopServicePrincipal=hadoopServicePrincipal + "@" + kdc.getRealm();
    LOG.info("-------------------------------------------------------------------");
    LOG.info("Test Principal: {}",testPrincipal);
    LOG.info("Test ZK Server Principal: {}",testZkServerPrincipal);
    LOG.info("Test ZK Client Principal: {}",testZkClientPrincipal);
    LOG.info("Test Kafka Server Principal: {}",testKafkaServerPrincipal);
    LOG.info("Test Hadoop Service Principal: {}",hadoopServicePrincipal);
    LOG.info("Test Keytab: {}",testKeytab);
    LOG.info("-------------------------------------------------------------------");
    createJaasConfig(baseDirForSecureRun);
    SecurityContext.SecurityConfiguration ctx=new SecurityContext.SecurityConfiguration();
    Configuration flinkConfig=GlobalConfiguration.loadConfiguration();
    flinkConfig.setString(ConfigConstants.SECURITY_KEYTAB_KEY,testKeytab);
    flinkConfig.setString(ConfigConstants.SECURITY_PRINCIPAL_KEY,testPrincipal);
    flinkConfig.setBoolean(ConfigConstants.ZOOKEEPER_SASL_DISABLE,false);
    ctx.setFlinkConfiguration(flinkConfig);
    TestingSecurityContext.install(ctx,getClientSecurityConfigurationMap());
    populateJavaPropertyVariables();
  }
 catch (  Exception e) {
    throw new RuntimeException("Exception occured while preparing secure environment.",e);
  }
}
