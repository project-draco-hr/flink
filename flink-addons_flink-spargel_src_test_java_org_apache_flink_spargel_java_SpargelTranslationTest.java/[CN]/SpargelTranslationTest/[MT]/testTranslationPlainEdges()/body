{
  try {
    final String ITERATION_NAME="Test Name";
    final String AGGREGATOR_NAME="AggregatorName";
    final String BC_SET_MESSAGES_NAME="borat messages";
    final String BC_SET_UPDATES_NAME="borat updates";
    ;
    final int NUM_ITERATIONS=13;
    final int ITERATION_DOP=77;
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Long> bcMessaging=env.fromElements(1L);
    DataSet<Long> bcUpdate=env.fromElements(1L);
    DataSet<Tuple2<String,Double>> result;
{
      @SuppressWarnings("unchecked") DataSet<Tuple2<String,Double>> initialVertices=env.fromElements(new Tuple2<String,Double>("abc",3.44));
      @SuppressWarnings("unchecked") DataSet<Tuple2<String,String>> edges=env.fromElements(new Tuple2<String,String>("a","c"));
      VertexCentricIteration<String,Double,Long,?> vertexIteration=VertexCentricIteration.withPlainEdges(edges,new UpdateFunction(),new MessageFunctionNoEdgeValue(),NUM_ITERATIONS);
      vertexIteration.addBroadcastSetForMessagingFunction(BC_SET_MESSAGES_NAME,bcMessaging);
      vertexIteration.addBroadcastSetForUpdateFunction(BC_SET_UPDATES_NAME,bcUpdate);
      vertexIteration.setName(ITERATION_NAME);
      vertexIteration.setParallelism(ITERATION_DOP);
      vertexIteration.registerAggregator(AGGREGATOR_NAME,new LongSumAggregator());
      result=initialVertices.runOperation(vertexIteration);
    }
    assertTrue(result instanceof DeltaIterationResultSet);
    DeltaIterationResultSet<?,?> resultSet=(DeltaIterationResultSet<?,?>)result;
    DeltaIteration<?,?> iteration=(DeltaIteration<?,?>)resultSet.getIterationHead();
    assertEquals(NUM_ITERATIONS,resultSet.getMaxIterations());
    assertArrayEquals(new int[]{0},resultSet.getKeyPositions());
    assertEquals(ITERATION_DOP,iteration.getParallelism());
    assertEquals(ITERATION_NAME,iteration.getName());
    assertEquals(AGGREGATOR_NAME,iteration.getAggregators().getAllRegisteredAggregators().iterator().next().getName());
    TwoInputUdfOperator<?,?,?,?> solutionSetJoin=(TwoInputUdfOperator<?,?,?,?>)resultSet.getNextWorkset();
    assertTrue(solutionSetJoin.getSemanticProperties().getForwardingTargetFields(0,0).contains(0));
    assertTrue(solutionSetJoin.getSemanticProperties().getForwardingTargetFields(1,0).contains(0));
    TwoInputUdfOperator<?,?,?,?> edgesJoin=(TwoInputUdfOperator<?,?,?,?>)solutionSetJoin.getInput1();
    assertEquals(bcUpdate,solutionSetJoin.getBroadcastSets().get(BC_SET_UPDATES_NAME));
    assertEquals(bcMessaging,edgesJoin.getBroadcastSets().get(BC_SET_MESSAGES_NAME));
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail(e.getMessage());
  }
}
