{
  if (LOG.isDebugEnabled()) {
    LOG.debug(getLogString("Starting data sink operator"));
  }
  ExecutionConfig executionConfig;
  try {
    ExecutionConfig c=(ExecutionConfig)InstantiationUtil.readObjectFromConfig(getJobConfiguration(),ExecutionConfig.CONFIG_KEY,getUserCodeClassLoader());
    if (c != null) {
      executionConfig=c;
    }
 else {
      LOG.warn("The execution config returned by the configuration was null");
      executionConfig=new ExecutionConfig();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Could not load ExecutionConfig from Job Configuration: " + e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException("Could not load ExecutionConfig from Job Configuration: " + e);
  }
  boolean objectReuseEnabled=executionConfig.isObjectReuseEnabled();
  try {
    MutableObjectIterator<IT> input1;
switch (this.config.getInputLocalStrategy(0)) {
case NONE:
      localStrategy=null;
    input1=reader;
  break;
case SORT:
try {
  TypeComparatorFactory<IT> compFact=this.config.getInputComparator(0,getUserCodeClassLoader());
  if (compFact == null) {
    throw new Exception("Missing comparator factory for local strategy on input " + 0);
  }
  UnilateralSortMerger<IT> sorter=new UnilateralSortMerger<IT>(getEnvironment().getMemoryManager(),getEnvironment().getIOManager(),this.reader,this,this.inputTypeSerializerFactory,compFact.createComparator(),this.config.getRelativeMemoryInput(0),this.config.getFilehandlesInput(0),this.config.getSpillingThresholdInput(0));
  this.localStrategy=sorter;
  input1=sorter.getIterator();
}
 catch (Exception e) {
  throw new RuntimeException("Initializing the input processing failed" + (e.getMessage() == null ? "." : ": " + e.getMessage()),e);
}
break;
default :
throw new RuntimeException("Invalid local strategy for DataSinkTask");
}
final TypeSerializer<IT> serializer=this.inputTypeSerializerFactory.getSerializer();
final MutableObjectIterator<IT> input=input1;
final OutputFormat<IT> format=this.format;
if (this.taskCanceled) {
return;
}
if (LOG.isDebugEnabled()) {
LOG.debug(getLogString("Starting to produce output"));
}
format.open(this.getEnvironment().getIndexInSubtaskGroup(),this.getEnvironment().getNumberOfSubtasks());
if (objectReuseEnabled) {
IT record=serializer.createInstance();
while (!this.taskCanceled && ((record=input.next(record)) != null)) {
format.writeRecord(record);
}
}
 else {
IT record;
while (!this.taskCanceled && ((record=input.next()) != null)) {
format.writeRecord(record);
}
}
if (!this.taskCanceled) {
this.format.close();
this.format=null;
}
}
 catch (Exception ex) {
try {
if (!cleanupCalled && format instanceof CleanupWhenUnsuccessful) {
cleanupCalled=true;
((CleanupWhenUnsuccessful)format).tryCleanupOnError();
}
}
 catch (Throwable t) {
LOG.error("Cleanup on error failed.",t);
}
ex=ExceptionInChainedStubException.exceptionUnwrap(ex);
if (ex instanceof CancelTaskException) {
throw ex;
}
 else if (!this.taskCanceled) {
if (LOG.isErrorEnabled()) {
LOG.error(getLogString("Error in user code: " + ex.getMessage()),ex);
}
throw ex;
}
}
 finally {
if (this.format != null) {
try {
this.format.close();
}
 catch (Throwable t) {
if (LOG.isWarnEnabled()) {
LOG.warn(getLogString("Error closing the output format"),t);
}
}
}
if (localStrategy != null) {
try {
this.localStrategy.close();
}
 catch (Throwable t) {
LOG.error("Error closing local strategy",t);
}
}
RegularPactTask.clearReaders(new MutableReader[]{inputReader});
}
if (!this.taskCanceled) {
if (LOG.isDebugEnabled()) {
LOG.debug(getLogString("Finished data sink operator"));
}
}
 else {
if (LOG.isDebugEnabled()) {
LOG.debug(getLogString("Data sink operator cancelled"));
}
}
}
