{
  final int NUM_RECORDS=559273;
  final int numSegments=MEMORY_SIZE / MEMORY_PAGE_SIZE;
  final List<MemorySegment> memory=this.memoryManager.allocatePages(new DummyInvokable(),numSegments);
  NormalizedKeySorter<Record> sorter=newSortBuffer(memory);
  TestData.Generator generator=new TestData.Generator(SEED,KEY_MAX,VALUE_LENGTH,KeyMode.RANDOM,ValueMode.RANDOM_LENGTH);
  Record record=new Record();
  int num=0;
  do {
    generator.next(record);
    num++;
  }
 while (sorter.write(record) && num < NUM_RECORDS);
  QuickSort qs=new QuickSort();
  qs.sort(sorter);
  MutableObjectIterator<Record> iter=sorter.getIterator();
  Record readTarget=new Record();
  Key current=new Key();
  Key last=new Key();
  iter.next(readTarget);
  readTarget.getFieldInto(0,last);
  while ((readTarget=iter.next(readTarget)) != null) {
    readTarget.getFieldInto(0,current);
    final int cmp=last.compareTo(current);
    if (cmp > 0) {
      Assert.fail("Next key is not larger or equal to previous key.");
    }
    Key tmp=current;
    current=last;
    last=tmp;
  }
  this.memoryManager.release(sorter.dispose());
}
