{
  int noSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String edgeInput="hdfs://cloud-7.dima.tu-berlin.de:40010/graph/ibm_interactions.csv";
  String output="hdfs://cloud-7.dima.tu-berlin.de:40010/graph/result";
  FileDataSourceContract<PactInteger,PactInteger> edges=new FileDataSourceContract<PactInteger,PactInteger>(EdgeInFormat.class,edgeInput,"Input Edges");
  edges.setParameter(TextInputFormat.RECORD_DELIMITER,"\n");
  edges.setDegreeOfParallelism(noSubTasks);
  edges.getCompilerHints().setKeyCardinality(650000);
  MapContract<PactInteger,PactInteger,PactInteger,PactInteger> projectEdge=new MapContract<PactInteger,PactInteger,PactInteger,PactInteger>(ProjectEdge.class,"Project Edge");
  projectEdge.setDegreeOfParallelism(noSubTasks);
  projectEdge.getCompilerHints().setAvgRecordsEmittedPerStubCall(2.0f);
  ReduceContract<PactInteger,PactInteger,IntPair,IntPair> edgeCounter=new ReduceContract<PactInteger,PactInteger,IntPair,IntPair>(CountEdges.class,"Count Adjacent Edges");
  edgeCounter.setDegreeOfParallelism(noSubTasks);
  edgeCounter.getCompilerHints().setAvgBytesPerRecord(16);
  ReduceContract<IntPair,IntPair,IntPair,IntPair> countJoiner=new ReduceContract<IntPair,IntPair,IntPair,IntPair>(JoinCountsAndUniquify.class,"Join Counts");
  countJoiner.setDegreeOfParallelism(noSubTasks);
  countJoiner.getCompilerHints().setKeyCardinality(650000);
  countJoiner.getCompilerHints().setAvgBytesPerRecord(16);
  countJoiner.getCompilerHints().setAvgNumValuesPerKey(156);
  countJoiner.setInput(edgeCounter);
  edgeCounter.setInput(projectEdge);
  projectEdge.setInput(edges);
  MapContract<IntPair,IntPair,PactInteger,PactInteger> toLowerDegreeEdge=new MapContract<IntPair,IntPair,PactInteger,PactInteger>(ProjectToLowerDegreeVertex.class,"Select lower-degree Edge");
  toLowerDegreeEdge.setDegreeOfParallelism(noSubTasks);
  toLowerDegreeEdge.getCompilerHints().setAvgNumValuesPerKey(156);
  toLowerDegreeEdge.getCompilerHints().setAvgRecordsEmittedPerStubCall(1);
  toLowerDegreeEdge.getCompilerHints().setAvgBytesPerRecord(8);
  MapContract<IntPair,IntPair,IntPair,PactNull> projectOutCounts=new MapContract<IntPair,IntPair,IntPair,PactNull>(ProjectOutCounts.class,"Project out Counts");
  projectOutCounts.setDegreeOfParallelism(noSubTasks);
  projectOutCounts.getCompilerHints().setAvgNumValuesPerKey(1);
  projectOutCounts.getCompilerHints().setAvgRecordsEmittedPerStubCall(1);
  projectOutCounts.getCompilerHints().setAvgBytesPerRecord(8);
  ReduceContract<PactInteger,PactInteger,IntPair,PactInteger> buildTriads=new ReduceContract<PactInteger,PactInteger,IntPair,PactInteger>(BuildTriads.class,"Build Triads");
  buildTriads.setDegreeOfParallelism(noSubTasks);
  buildTriads.getCompilerHints().setAvgBytesPerRecord(12);
  buildTriads.getCompilerHints().setAvgRecordsEmittedPerStubCall(1000);
  MatchContract<IntPair,PactInteger,PactNull,PactInteger,IntPair> closeTriads=new MatchContract<IntPair,PactInteger,PactNull,PactInteger,IntPair>(CloseTriads.class,"Close Triads");
  closeTriads.setDegreeOfParallelism(noSubTasks);
  FileDataSinkContract<PactInteger,IntPair> triangles=new FileDataSinkContract<PactInteger,IntPair>(EdgeOutFormat.class,output,"Triangles");
  triangles.setDegreeOfParallelism(noSubTasks);
  triangles.setInput(closeTriads);
  closeTriads.setFirstInput(buildTriads);
  closeTriads.setSecondInput(projectOutCounts);
  buildTriads.setInput(toLowerDegreeEdge);
  projectOutCounts.setInput(countJoiner);
  toLowerDegreeEdge.setInput(countJoiner);
  return new Plan(triangles,"Enumerate Triangles");
}
