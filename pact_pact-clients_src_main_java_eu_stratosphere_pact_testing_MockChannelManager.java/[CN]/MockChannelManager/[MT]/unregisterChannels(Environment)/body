{
  for (int i=0; i < environment.getNumberOfOutputGates(); ++i) {
    OutputGate<? extends Record> outputGate=environment.getOutputGate(i);
    for (int j=0; j < outputGate.getNumberOfOutputChannels(); ++j) {
      final AbstractOutputChannel<?> outputChannel=outputGate.getOutputChannel(j);
      if (!(outputChannel instanceof AbstractByteBufferedOutputChannel)) {
        LOG.error("Output channel " + outputChannel.getID() + "of job "+ environment.getJobID()+ " is not a byte buffered output channel, skipping...");
        continue;
      }
      final AbstractByteBufferedOutputChannel<?> bboc=(AbstractByteBufferedOutputChannel<?>)outputChannel;
      this.registeredChannels.remove(bboc.getID());
    }
  }
  for (int i=0; i < environment.getNumberOfInputGates(); ++i) {
    final InputGate<?> inputGate=environment.getInputGate(i);
    for (int j=0; j < inputGate.getNumberOfInputChannels(); ++j) {
      final AbstractInputChannel<?> inputChannel=inputGate.getInputChannel(j);
      if (!(inputChannel instanceof AbstractByteBufferedInputChannel)) {
        LOG.error("Input channel " + inputChannel.getID() + "of job "+ environment.getJobID()+ " is not a byte buffered input channel, skipping...");
        continue;
      }
      final AbstractByteBufferedInputChannel<?> bbic=(AbstractByteBufferedInputChannel<?>)inputChannel;
      MockInputChannelBroker channelBroker=new MockInputChannelBroker(bbic,this.transitBufferPool,this);
      bbic.setInputChannelBroker(channelBroker);
      this.registeredChannels.remove(bbic.getID());
    }
  }
}
