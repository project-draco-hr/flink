{
  int numSubTasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String dataPointInput=(args.length > 1 ? args[1] : "");
  String clusterInput=(args.length > 2 ? args[2] : "");
  String output=(args.length > 3 ? args[3] : "");
  @SuppressWarnings("unchecked") FileDataSource pointsSource=new FileDataSource(new CsvInputFormat('|',IntValue.class,DoubleValue.class,DoubleValue.class,DoubleValue.class),dataPointInput,"Data Points");
  @SuppressWarnings("unchecked") FileDataSource clustersSource=new FileDataSource(new CsvInputFormat('|',IntValue.class,DoubleValue.class,DoubleValue.class,DoubleValue.class),clusterInput,"Centers");
  MapOperator dataPoints=MapOperator.builder(new PointBuilder()).name("Build data points").input(pointsSource).build();
  MapOperator clusterPoints=MapOperator.builder(new PointBuilder()).name("Build cluster points").input(clustersSource).build();
  MapOperator findNearestClusterCenters=MapOperator.builder(new SelectNearestCenter()).setBroadcastVariable("centers",clusterPoints).input(dataPoints).name("Find Nearest Centers").build();
  ReduceOperator recomputeClusterCenter=ReduceOperator.builder(new RecomputeClusterCenter(),IntValue.class,0).input(findNearestClusterCenters).name("Recompute Center Positions").build();
  FileDataSink newClusterPoints=new FileDataSink(new PointOutFormat(),output,recomputeClusterCenter,"New Center Positions");
  Plan plan=new Plan(newClusterPoints,"KMeans Iteration");
  plan.setDefaultParallelism(numSubTasks);
  return plan;
}
