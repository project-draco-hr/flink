{
  String seedBrokersConfString=properties.getProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG);
  final int numRetries=Integer.valueOf(properties.getProperty(GET_PARTITIONS_RETRIES_KEY,Integer.toString(DEFAULT_GET_PARTITIONS_RETRIES)));
  checkNotNull(seedBrokersConfString,"Configuration property " + ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + " not set");
  String[] seedBrokers=seedBrokersConfString.split(",");
  List<KafkaTopicPartitionLeader> partitions=new ArrayList<>();
  Random rnd=new Random();
  retryLoop:   for (int retry=0; retry < numRetries; retry++) {
    int index=rnd.nextInt(seedBrokers.length);
    brokersLoop:     for (int arrIdx=0; arrIdx < seedBrokers.length; arrIdx++) {
      String seedBroker=seedBrokers[index];
      LOG.info("Trying to get topic metadata from broker {} in try {}/{}",seedBroker,retry,numRetries);
      if (++index == seedBrokers.length) {
        index=0;
      }
      URL brokerUrl=NetUtils.getCorrectHostnamePort(seedBroker);
      SimpleConsumer consumer=null;
      try {
        final String clientId="flink-kafka-consumer-partition-lookup";
        final int soTimeout=Integer.valueOf(properties.getProperty("socket.timeout.ms","30000"));
        final int bufferSize=Integer.valueOf(properties.getProperty("socket.receive.buffer.bytes","65536"));
        consumer=new SimpleConsumer(brokerUrl.getHost(),brokerUrl.getPort(),soTimeout,bufferSize,clientId);
        TopicMetadataRequest req=new TopicMetadataRequest(topics);
        kafka.javaapi.TopicMetadataResponse resp=consumer.send(req);
        List<TopicMetadata> metaData=resp.topicsMetadata();
        partitions.clear();
        for (        TopicMetadata item : metaData) {
          if (item.errorCode() != ErrorMapping.NoError()) {
            if (item.errorCode() == ErrorMapping.InvalidTopicCode() || item.errorCode() == ErrorMapping.UnknownTopicOrPartitionCode()) {
              throw new RuntimeException("Requested partitions for unknown topic",ErrorMapping.exceptionFor(item.errorCode()));
            }
            LOG.warn("Error while getting metadata from broker " + seedBroker + " to find partitions "+ "for "+ topics.toString()+ ". Error: "+ ErrorMapping.exceptionFor(item.errorCode()).getMessage());
            continue brokersLoop;
          }
          if (!topics.contains(item.topic())) {
            LOG.warn("Received metadata from topic " + item.topic() + " even though it was not requested. Skipping ...");
            continue brokersLoop;
          }
          for (          PartitionMetadata part : item.partitionsMetadata()) {
            Node leader=brokerToNode(part.leader());
            KafkaTopicPartition ktp=new KafkaTopicPartition(item.topic(),part.partitionId());
            KafkaTopicPartitionLeader pInfo=new KafkaTopicPartitionLeader(ktp,leader);
            partitions.add(pInfo);
          }
        }
        break retryLoop;
      }
 catch (      Exception e) {
        LOG.warn("Error communicating with broker " + seedBroker + " to find partitions for "+ topics.toString()+ ". Message: "+ e.getMessage());
        LOG.debug("Detailed trace",e);
      }
 finally {
        if (consumer != null) {
          consumer.close();
        }
      }
    }
  }
  return partitions;
}
