{
  super.open(parameters);
  final int numConsumers=getRuntimeContext().getNumberOfParallelSubtasks();
  final int thisConsumerIndex=getRuntimeContext().getIndexOfThisSubtask();
  subscribedPartitions=assignPartitions(this.partitionInfos,numConsumers,thisConsumerIndex);
  if (LOG.isInfoEnabled()) {
    LOG.info("Kafka consumer {} will read partitions {} out of partitions {}",thisConsumerIndex,KafkaTopicPartition.toString(subscribedPartitions),this.partitionInfos.size());
  }
  if (subscribedPartitions.isEmpty()) {
    LOG.info("Kafka consumer {} has no partitions (empty source)",thisConsumerIndex);
    this.fetcher=null;
    return;
  }
  offsetHandler=new ZookeeperOffsetHandler(props);
  committedOffsets=new HashMap<>();
  Map<KafkaTopicPartition,KafkaPartitionState> subscribedPartitionsWithOffsets=new HashMap<>(subscribedPartitions.size());
  for (  KafkaTopicPartition ktp : subscribedPartitions) {
    subscribedPartitionsWithOffsets.put(ktp,new KafkaPartitionState(ktp.getPartition(),FlinkKafkaConsumerBase.OFFSET_NOT_SET));
  }
  if (restoreToOffset != null) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Consumer {} is restored from previous checkpoint: {}",thisConsumerIndex,KafkaTopicPartition.toString(restoreToOffset));
    }
    this.partitionState=restoreInfoFromCheckpoint();
    subscribedPartitionsWithOffsets.putAll(partitionState);
    restoreToOffset=null;
  }
 else {
    partitionState=new HashMap<>();
    for (    Map.Entry<KafkaTopicPartition,Long> offsetInfo : offsetHandler.getOffsets(subscribedPartitions).entrySet()) {
      KafkaTopicPartition key=offsetInfo.getKey();
      subscribedPartitionsWithOffsets.put(key,new KafkaPartitionState(key.getPartition(),offsetInfo.getValue()));
    }
  }
  if (subscribedPartitionsWithOffsets.size() != subscribedPartitions.size()) {
    throw new IllegalStateException("The subscribed partitions map has more entries than the subscribed partitions " + "list: " + subscribedPartitionsWithOffsets.size() + ","+ subscribedPartitions.size());
  }
  fetcher=new LegacyFetcher<T>(this,subscribedPartitionsWithOffsets,props,getRuntimeContext().getTaskName(),getRuntimeContext().getUserCodeClassLoader());
}
