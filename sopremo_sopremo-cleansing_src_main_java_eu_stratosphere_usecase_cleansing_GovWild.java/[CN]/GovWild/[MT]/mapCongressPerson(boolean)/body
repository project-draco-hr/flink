{
  if (simulate) {
    this.inputs[CONGRESS][PERSON]=new Source(String.format("%s/CongressPersons.json",this.outputDir));
    return;
  }
  ObjectCreation projection=new ObjectCreation();
  projection.addMapping("id",new GenerateExpression("congressPerson%s"));
  projection.addMapping("firstName",new MethodCall("extract",new ObjectAccess("memberName"),new ConstantExpression(", (.+)")));
  projection.addMapping("lastName",new MethodCall("camelCase",new MethodCall("extract",new ObjectAccess("memberName"),new ConstantExpression("(.*),"))));
  ObjectCreation birthDate=new ObjectCreation();
  birthDate.addMapping("year",new MethodCall("extract",new ObjectAccess("birthDeath"),new ConstantExpression("([0-9]{0,4})-")));
  projection.addMapping("birthDate",birthDate);
  ObjectCreation deathDate=new ObjectCreation();
  deathDate.addMapping("year",new MethodCall("extract",new ObjectAccess("birthDeath"),new ConstantExpression("-([0-9]{0,4})")));
  projection.addMapping("deathDate",deathDate);
  ObjectCreation partyProjection=new ObjectCreation();
  partyProjection.addMapping("legalEntity",new MethodCall("format",new ConstantExpression("congressLegalEntity%s"),new PathExpression(new ArrayAccess(0),new ObjectAccess("party"))));
  partyProjection.addMapping("startYear",this.coerce(IntNode.class,new AggregationExpression(CleansFunctions.MIN,new MethodCall("extract",new ObjectAccess("number"),new ConstantExpression("\\(([0-9]{0,4})-")))));
  partyProjection.addMapping("endYear",this.coerce(IntNode.class,new AggregationExpression(CleansFunctions.MAX,new MethodCall("extract",new ObjectAccess("number"),new ConstantExpression("-([0-9]{0,4})")))));
  partyProjection.addMapping("congresses",new ArrayProjection(this.coerce(IntNode.class,new MethodCall("extract",new ObjectAccess("number"),new ConstantExpression("([0-9]+)\\(")))));
  GroupingExpression parties=new GroupingExpression(new ObjectAccess("party"),partyProjection);
  ObjectCreation stateProjections=new ObjectCreation();
  stateProjections.addMapping("legalEntity",new MethodCall("format",new ConstantExpression("congressLegalEntity%s"),new PathExpression(new ArrayAccess(0),new ObjectAccess("state"))));
  stateProjections.addMapping("positions",new MethodCall("distinct",new AggregationExpression(BuiltinFunctions.ALL,new ObjectAccess("position"))));
  stateProjections.addMapping("startYear",this.coerce(IntNode.class,new AggregationExpression(CleansFunctions.MIN,new MethodCall("extract",new ObjectAccess("number"),new ConstantExpression("\\(([0-9]{0,4})-")))));
  stateProjections.addMapping("endYear",this.coerce(IntNode.class,new AggregationExpression(CleansFunctions.MAX,new MethodCall("extract",new ObjectAccess("number"),new ConstantExpression("-([0-9]{0,4})")))));
  stateProjections.addMapping("congresses",new AggregationExpression(BuiltinFunctions.ALL,this.coerce(IntNode.class,new MethodCall("extract",new ObjectAccess("number"),new ConstantExpression("([0-9]+)\\(")))));
  GroupingExpression congresses=new GroupingExpression(new ObjectAccess("state"),stateProjections);
  projection.addMapping("employment",new PathExpression(new ObjectAccess("congresses"),new MethodCall("unionAll",parties,congresses)));
  ObjectCreation relative=new ObjectCreation();
  relative.addMapping("id",new MethodCall("extract",EvaluationExpression.VALUE,new ConstantExpression("of (.*)")));
  relative.addMapping("type",new MethodCall("extract",EvaluationExpression.VALUE,new ConstantExpression("(.*) of")));
  relative.addMapping("complete",EvaluationExpression.VALUE);
  MethodCall relativeExtraction=new MethodCall("extract",new ObjectAccess("biography"),new ConstantExpression("^[^,]+,[^,]+, +\\((.*?)\\)"),new ConstantExpression(""));
  MethodCall relativeWithoutAnd=new MethodCall("replace",relativeExtraction,new ConstantExpression("(?:,|;)? and "),new ConstantExpression(", "));
  MethodCall commaSplit=new MethodCall("split",relativeWithoutAnd,new ConstantExpression("(?:,|;) "));
  EvaluationExpression trimmedSplit=new PathExpression(commaSplit,new ArrayProjection(new MethodCall("trim",EvaluationExpression.VALUE)));
  projection.addMapping("relatives",new PathExpression(new MethodCall("filter",trimmedSplit,new ConstantExpression("")),new ArrayProjection(relative)));
  if (this.scrubbed[CONGRESS] == null)   this.scrubCongress(true);
  SchemaMapping congressMapping=new SchemaMapping().withProjection(projection).withInputs(this.scrubbed[CONGRESS]);
  this.inputs[CONGRESS][PERSON]=congressMapping;
  this.sinks.add(new Sink(this.getInternalOutputFormat(),String.format("%s/CongressPersons.json",this.outputDir)).withInputs(congressMapping));
}
