{
  if (simulate) {
    this.cluster[EARMARK][PERSON]=new Source(this.getInternalInputFormat(),String.format("%s/PersonCluster1.json",this.outputDir));
    return;
  }
  EvaluationExpression firstName=new MethodCall("format",new ObjectAccess("firstName"));
  MethodCall simmFunction=new MethodCall("average",new SimmetricFunction(new JaccardSimilarity(),new PathExpression(new InputSelection(0),firstName),new PathExpression(new InputSelection(1),firstName)),new SimmetricFunction(new JaroWinkler(),new PathExpression(new InputSelection(0),new ObjectAccess("lastName")),new PathExpression(new InputSelection(1),new ObjectAccess("lastName"))));
  DisjunctPartitioning partitioning=new DisjunctPartitioning(new ObjectAccess("lastName"));
  InterSourceRecordLinkage recordLinkage=new InterSourceRecordLinkage().withAlgorithm(partitioning).withDuplicateCondition(this.getDuplicateCondition(simmFunction,0.6)).withLinkageMode(LinkageMode.ALL_CLUSTERS_FLAT).withInputs(this.inputs[CONGRESS][PERSON],this.inputs[EARMARK][PERSON]);
  recordLinkage.getRecordLinkageInput(0).setIdProjection(new ObjectAccess("id"));
  recordLinkage.getRecordLinkageInput(1).setIdProjection(new ObjectAccess("id"));
  this.cluster[EARMARK][PERSON]=recordLinkage;
  this.sinks.add(new Sink(this.getInternalOutputFormat(),String.format("%s/PersonCluster1.json",this.outputDir)).withInputs(recordLinkage));
}
