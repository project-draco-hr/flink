{
  if (simulate) {
    this.persons.add(new Source(PersistenceType.HDFS,String.format("%s/EarmarkPersons.json",this.outputDir)));
    return;
  }
  ObjectCreation projection=new ObjectCreation();
  final BatchAggregationExpression batch=new BatchAggregationExpression();
  projection.addMapping("id",new GenerateExpression("earmarkPerson%s"));
  projection.addMapping("firstName",new PathExpression(batch.add(CleansFunctions.FIRST),new TernaryExpression(new ObjectAccess("sponsorLastName"),new ObjectAccess("sponsorFirstName"),new ConstantExpression(""))));
  projection.addMapping("middleName",new PathExpression(batch.add(CleansFunctions.FIRST),new ObjectAccess("sponsorMiddleName"),new TernaryExpression(EvaluationExpression.VALUE,EvaluationExpression.VALUE)));
  projection.addMapping("lastName",new PathExpression(batch.add(CleansFunctions.FIRST),new TernaryExpression(new ObjectAccess("sponsorLastName"),new ObjectAccess("sponsorLastName"),new ObjectAccess("sponsorFirstName"))));
  projection.addMapping("enactedFunds",batch.add(CleansFunctions.SORT,new FunctionCall("format",new ConstantExpression("earmark%s"),new ObjectAccess("earmarkId"))));
  ObjectCreation address=new ObjectCreation();
  address.addMapping("state",new ObjectAccess("sponsorStateCode"));
  projection.addMapping("addresses",new FunctionCall("distinct",batch.add(CleansFunctions.ALL,address)));
  ObjectCreation employment=new ObjectCreation();
  employment.addMapping("legalEntity",new FunctionCall("format",new ConstantExpression("congressLegalEntity%s"),new ObjectAccess("sponsorStateCode")));
  employment.addMapping("startYear",new ConstantExpression(2008));
  employment.addMapping("endYear",new ConstantExpression(2008));
  projection.addMapping("position",new ObjectAccess("sponsorHonorific"));
  if (this.scrubbedEarmarks == null)   this.scrubEarmark(true);
  ComparativeExpression sponsorCondition=new ComparativeExpression(new ObjectAccess("recordType"),BinaryOperator.EQUAL,new ConstantExpression("C"));
  Selection sponsors=new Selection(sponsorCondition,this.scrubbedEarmarks);
  Grouping grouping=new Grouping(projection,sponsors);
  grouping.withKeyProjection(new ArrayCreation(new ObjectAccess("sponsorFirstName"),new ObjectAccess("sponsorMiddleName"),new ObjectAccess("sponsorLastName")));
  this.persons.add(grouping);
  this.sinks.add(new Sink(PersistenceType.HDFS,String.format("%s/EarmarkPerson.json",this.outputDir),grouping));
}
