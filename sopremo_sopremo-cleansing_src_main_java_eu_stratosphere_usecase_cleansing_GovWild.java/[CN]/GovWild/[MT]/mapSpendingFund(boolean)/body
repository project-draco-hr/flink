{
  if (simulate) {
    this.inputs[SPENDING][FUND]=new Source(getInternalInputFormat(),String.format("%s/EarmarkFunds.json",this.outputDir));
    return;
  }
  ObjectCreation fundProjection=new ObjectCreation();
  final BatchAggregationExpression batch=new BatchAggregationExpression();
  fundProjection.addMapping("id",new FunctionCall("format",new ConstantExpression("spendings%s"),new PathExpression(batch.add(CleansFunctions.FIRST),new ObjectAccess("UniqueTransactionID"))));
  fundProjection.addMapping("amount",batch.add(CleansFunctions.SUM,new TernaryExpression(new ObjectAccess("DollarsObligated"),coerce(DecimalNode.class,new ObjectAccess("DollarsObligated")),new ConstantExpression(0))));
  fundProjection.addMapping("currency",new ConstantExpression("USD"));
  ObjectCreation date=new ObjectCreation();
  date.addMapping("year",batch.add(CleansFunctions.FIRST,new ObjectAccess("FiscalYear")));
  fundProjection.addMapping("date",date);
  fundProjection.addMapping("subject",new PathExpression(batch.add(CleansFunctions.FIRST),new ObjectAccess("ProductorServiceCode")));
  if (this.scrubbed[SPENDING] == null)   this.scrubSpending(true);
  Grouping grouping=new Grouping(fundProjection,this.scrubbed[SPENDING]);
  grouping.withKeyProjection(new ObjectAccess("UniqueTransactionID"));
  this.inputs[SPENDING][FUND]=grouping;
  this.sinks.add(new Sink(getInternalOutputFormat(),String.format("%s/SpendingFunds.json",this.outputDir),grouping));
}
