{
  if (simulate) {
    this.fused[SPENDING][LEGAL_ENTITY]=new Source(this.getInternalInputFormat(),String.format("%s/LegalEntity2.json",this.outputDir));
    return;
  }
  Selection links=new Selection().withInputs(this.cluster[SPENDING][LEGAL_ENTITY]).withCondition(new ComparativeExpression(new MethodCall("count",EvaluationExpression.VALUE),BinaryOperator.GREATER,new ConstantExpression(1)));
  Selection oneSourceOnly=new Selection().withInputs(this.cluster[SPENDING][LEGAL_ENTITY]).withCondition(new ComparativeExpression(new MethodCall("count",EvaluationExpression.VALUE),BinaryOperator.EQUAL,new ConstantExpression(1)));
  ObjectCreation merge=new ObjectCreation();
  merge.addMapping(new ObjectCreation.CopyFields(new InputSelection(1)));
  merge.addMapping("names",new MethodCall("distinct",new MethodCall("unionAll",new PathExpression(new InputSelection(0),new ObjectAccess("names")),new PathExpression(new InputSelection(1),new ObjectAccess("names")))));
  merge.addMapping("addresses",new MethodCall("distinct",new MethodCall("unionAll",new PathExpression(new InputSelection(0),new ObjectAccess("addresses")),new PathExpression(new InputSelection(1),new ObjectAccess("addresses")))));
  Projection linksProjection=new Projection().withValueTransformation(merge).withInputs(links);
  Projection oneSourceProjection=new Projection().withValueTransformation(new InputSelection(0)).withInputs(oneSourceOnly);
  this.fused[SPENDING][LEGAL_ENTITY]=new UnionAll().withInputs(linksProjection,oneSourceProjection);
  this.sinks.add(new Sink(this.getInternalOutputFormat(),String.format("%s/LegalEntity2.json",this.outputDir)).withInputs(this.fused[SPENDING][LEGAL_ENTITY]));
}
