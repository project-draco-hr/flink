{
  if (simulate) {
    this.cluster[SPENDING][LEGAL_ENTITY]=new Source(getInternalInputFormat(),String.format("%s/LegalEntityCluster2.json",this.outputDir));
    return;
  }
  SimmetricFunction simmFunction=new SimmetricFunction(new JaroWinkler(),new PathExpression(new InputSelection(0),new ObjectAccess("names"),new ArrayAccess(0)),new PathExpression(new InputSelection(1),new ObjectAccess("names"),new ArrayAccess(0)));
  DisjunctPartitioning partitioning=new DisjunctPartitioning(new TernaryExpression(new AndExpression(new ObjectAccess("addresses"),new PathExpression(new ObjectAccess("addresses"),new ArrayAccess(0),new ObjectAccess("zipCode"))),new FunctionCall("substring",new PathExpression(new ObjectAccess("addresses"),new ArrayAccess(0),new ObjectAccess("zipCode"))),new ConstantExpression("")),new FunctionCall("extract",new ConstantExpression("([^ ])*"),new ObjectAccess("name")));
  InterSourceRecordLinkage recordLinkage=new InterSourceRecordLinkage(partitioning,simmFunction,0.8,this.fused[EARMARK][LEGAL_ENTITY],this.inputs[SPENDING][LEGAL_ENTITY]);
  recordLinkage.setLinkageMode(LinkageMode.ALL_CLUSTERS_FLAT);
  recordLinkage.getRecordLinkageInput(0).setIdProjection(new ObjectAccess("id"));
  recordLinkage.getRecordLinkageInput(1).setIdProjection(new ObjectAccess("id"));
  this.cluster[SPENDING][LEGAL_ENTITY]=recordLinkage;
  this.sinks.add(new Sink(getInternalOutputFormat(),String.format("%s/LegalEntityCluster2.json",this.outputDir),recordLinkage));
}
