{
  if (simulate) {
    this.inputs[EARMARK][FUND]=new Source(this.getInternalInputFormat(),String.format("%s/EarmarkFunds.json",this.outputDir));
    return;
  }
  ObjectCreation fundProjection=new ObjectCreation();
  final BatchAggregationExpression batch=new BatchAggregationExpression();
  fundProjection.addMapping("id",new MethodCall("format",new ConstantExpression("earmark%s"),new PathExpression(batch.add(BuiltinFunctions.FIRST),new ObjectAccess("earmarkId"))));
  fundProjection.addMapping("amount",batch.add(BuiltinFunctions.SUM,new TernaryExpression(new ObjectAccess("amount"),new ObjectAccess("amount"),new ConstantExpression(0))));
  fundProjection.addMapping("currency",new ConstantExpression("USD"));
  ObjectCreation date=new ObjectCreation();
  date.addMapping("year",batch.add(BuiltinFunctions.FIRST,new ObjectAccess("enactedYear")));
  fundProjection.addMapping("date",date);
  fundProjection.addMapping("subject",new PathExpression(batch.add(BuiltinFunctions.FIRST),new ObjectAccess("shortDescription")));
  if (this.scrubbed[EARMARK] == null)   this.scrubEarmark(true);
  Grouping grouping=new Grouping().withInputs(this.scrubbed[EARMARK]).withGroupingKey(new ObjectAccess("earmarkId")).withResultProjection(fundProjection);
  this.inputs[EARMARK][FUND]=grouping;
  this.sinks.add(new Sink(this.getInternalOutputFormat(),String.format("%s/EarmarkFunds.json",this.outputDir)).withInputs(grouping));
}
