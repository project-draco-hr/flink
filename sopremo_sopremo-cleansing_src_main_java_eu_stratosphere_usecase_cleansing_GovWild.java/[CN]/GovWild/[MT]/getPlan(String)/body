{
  this.noSubTasks=args.length > 0 ? Integer.parseInt(args[0]) : 1;
  this.inputDir=args.length > 1 ? args[1] : "";
  this.outputDir=args.length > 2 ? args[2] : "";
  int startLevel=args.length > 3 ? Integer.parseInt(args[3]) : 0, stopLevel=args.length > 4 ? Integer.parseInt(args[4]) : Integer.MAX_VALUE;
  this.joinCongress(!(startLevel <= 0 && 0 < stopLevel));
  this.scrubCongress(!(startLevel <= 1 && 1 < stopLevel));
  this.scrubEarmark(!(startLevel <= 1 && 1 < stopLevel));
  this.mapCongressLegalEntity(!(startLevel <= 2 && 2 < stopLevel));
  this.mapCongressPerson(!(startLevel <= 2 && 2 < stopLevel));
  this.mapEarmarkFund(!(startLevel <= 3 && 3 < stopLevel));
  this.mapEarmarkPerson(!(startLevel <= 3 && 3 < stopLevel));
  this.mapEarmarkLegalEntity(!(startLevel <= 3 && 3 < stopLevel));
  clusterPersons(!(startLevel <= 10 && 10 < stopLevel));
  analyze(!(startLevel <= 100 && 100 < stopLevel));
  SopremoPlan sopremoPlan=new SopremoPlan(this.sinks);
  sopremoPlan.getContext().getFunctionRegistry().register(BuiltinFunctions.class);
  sopremoPlan.getContext().getFunctionRegistry().register(eu.stratosphere.usecase.cleansing.CleansFunctions.class);
  Plan pactPlan=sopremoPlan.asPactPlan();
  pactPlan.setMaxNumberMachines(noSubTasks);
  return pactPlan;
}
