{
  LocalFlinkMiniCluster cluster=null;
  try {
    Configuration noTaskManagerConfig=new Configuration();
    noTaskManagerConfig.setInteger(ConfigConstants.LOCAL_INSTANCE_MANAGER_NUMBER_TASK_MANAGER,0);
    cluster=new LocalFlinkMiniCluster(noTaskManagerConfig,true);
    JobVertex vertex=new JobVertex("Test Vertex");
    vertex.setInvokableClass(Tasks.NoOpInvokable.class);
    List<JobVertexID> vertexIdList=Collections.singletonList(vertex.getID());
    JobGraph testGraph=new JobGraph("test job",vertex);
    testGraph.setSnapshotSettings(new JobSnapshottingSettings(vertexIdList,vertexIdList,vertexIdList,5000));
    ActorGateway jobManager=cluster.getJobManagerGateway();
    FiniteDuration timeout=new FiniteDuration(60,TimeUnit.SECONDS);
    JobManagerMessages.SubmitJob submitMessage=new JobManagerMessages.SubmitJob(testGraph,false);
    Future<Object> submitFuture=jobManager.ask(submitMessage,timeout);
    Await.result(submitFuture,timeout);
    Future<Object> jobRequestFuture=jobManager.ask(new JobManagerMessages.RequestJob(testGraph.getJobID()),timeout);
    ExecutionGraph graph=((JobManagerMessages.JobFound)Await.result(jobRequestFuture,timeout)).executionGraph();
    assertNotNull(graph);
    graph.waitUntilFinished();
    CheckpointCoordinator coord=graph.getCheckpointCoordinator();
    assertTrue(coord == null || coord.isShutdown());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    if (cluster != null) {
      cluster.shutdown();
      cluster.awaitTermination();
    }
  }
}
