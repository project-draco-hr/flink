{
  Collection<DeadlockVertex> vertexCollect=this.vertices();
  Queue<DeadlockVertex> q;
  for (  DeadlockVertex v : vertexCollect) {
    v.setInDegree(0);
  }
  for (  DeadlockVertex v : vertexCollect) {
    for (    DeadlockEdge edge : v.getOutEdges()) {
      edge.getDestination().setInDegree(edge.getDestination().getInDegree() + 1);
    }
  }
  q=new LinkedList<DeadlockVertex>();
  for (  DeadlockVertex v : vertexCollect) {
    if (v.getInDegree() == 0) {
      q.offer(v);
    }
  }
  while (!q.isEmpty()) {
    DeadlockVertex v=q.poll();
    this.vertices.remove(v);
    for (    DeadlockEdge e : v.getOutEdges()) {
      DeadlockVertex w=e.getDestination();
      w.setInDegree(w.getInDegree() - 1);
      if (w.getInDegree() == 0) {
        q.offer(w);
      }
    }
  }
  if (!vertexCollect.isEmpty()) {
    return true;
  }
  return false;
}
