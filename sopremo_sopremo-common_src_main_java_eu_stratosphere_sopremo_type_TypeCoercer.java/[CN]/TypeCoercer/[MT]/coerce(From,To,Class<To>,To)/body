{
  Map<Class<? extends IJsonNode>,Coercer<?,?>> toCoercer=this.coercers.get(targetClass);
  if (toCoercer == null) {
    final Map<Class<? extends IJsonNode>,Coercer<?,?>> superclassCoercers=findSuperclassCoercers(targetClass);
    if (superclassCoercers == null)     toCoercer=new IdentityHashMap<Class<? extends IJsonNode>,Coercer<?,?>>();
 else     toCoercer=new IdentityHashMap<Class<? extends IJsonNode>,Coercer<?,?>>(superclassCoercers);
    this.coercers.put(targetClass,toCoercer);
  }
  Coercer<From,To> fromCoercer=(Coercer<From,To>)toCoercer.get(node.getClass());
  if (fromCoercer == null) {
    fromCoercer=findMatchingCoercer(node,toCoercer);
    if (fromCoercer == null)     fromCoercer=(Coercer<From,To>)NULL_COERCER;
    toCoercer.put(node.getClass(),fromCoercer);
  }
  final Class<? extends To> defaultType=fromCoercer.getDefaultType();
  To result=defaultType != null ? SopremoUtil.ensureType(target,targetClass,defaultType) : null;
  result=fromCoercer.coerce(node,result);
  if (result == null)   return defaultValue;
  return result;
}
