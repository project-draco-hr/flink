{
  coercers.put(AbstractNumericNode.class,new IdentityHashMap<Class<? extends IJsonNode>,Coercer<?,?>>());
  for (  final Class<? extends AbstractNumericNode> numericType : NUMERIC_TYPES) {
    final IdentityHashMap<Class<? extends IJsonNode>,Coercer<?,?>> typeCoercers=new IdentityHashMap<Class<? extends IJsonNode>,Coercer<?,?>>();
    coercers.put(numericType,typeCoercers);
    typeCoercers.put(AbstractNumericNode.class,NumberCoercer.INSTANCE.getClassCoercers().get(numericType));
  }
  coercers.get(AbstractNumericNode.class).put(BooleanNode.class,new Coercer<BooleanNode,IntNode>(IntNode.class){
    @Override public IntNode coerce(    final BooleanNode from,    final IntNode target){
      target.setValue(from == BooleanNode.TRUE ? 1 : 0);
      return target;
    }
  }
);
  coercers.get(IntNode.class).put(BooleanNode.class,new Coercer<BooleanNode,IntNode>(IntNode.class){
    @Override public IntNode coerce(    final BooleanNode from,    final IntNode target){
      target.setValue(from == BooleanNode.TRUE ? 1 : 0);
      return target;
    }
  }
);
  coercers.get(DoubleNode.class).put(BooleanNode.class,new Coercer<BooleanNode,DoubleNode>(DoubleNode.class){
    @Override public DoubleNode coerce(    final BooleanNode from,    final DoubleNode target){
      target.setValue(from == BooleanNode.TRUE ? 1 : 0);
      return target;
    }
  }
);
  coercers.get(LongNode.class).put(BooleanNode.class,new Coercer<BooleanNode,LongNode>(LongNode.class){
    @Override public LongNode coerce(    final BooleanNode from,    final LongNode target){
      target.setValue(from == BooleanNode.TRUE ? 1 : 0);
      return target;
    }
  }
);
  coercers.get(DecimalNode.class).put(BooleanNode.class,new Coercer<BooleanNode,DecimalNode>(DecimalNode.class){
    @Override public DecimalNode coerce(    final BooleanNode from,    final DecimalNode target){
      target.setValue(from == BooleanNode.TRUE ? BigDecimal.ONE : BigDecimal.ZERO);
      return target;
    }
  }
);
  coercers.get(BigIntegerNode.class).put(BooleanNode.class,new Coercer<BooleanNode,BigIntegerNode>(BigIntegerNode.class){
    @Override public BigIntegerNode coerce(    final BooleanNode from,    final BigIntegerNode target){
      target.setValue(from == BooleanNode.TRUE ? BigInteger.ONE : BigInteger.ZERO);
      return target;
    }
  }
);
  coercers.get(AbstractNumericNode.class).put(BooleanNode.class,coercers.get(IntNode.class).get(BooleanNode.class));
  coercers.get(IntNode.class).put(TextNode.class,new Coercer<TextNode,IntNode>(IntNode.class){
    @Override public IntNode coerce(    final TextNode from,    final IntNode target){
      try {
        target.setValue(Integer.parseInt(from.getTextValue()));
        return target;
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(DoubleNode.class).put(TextNode.class,new Coercer<TextNode,DoubleNode>(DoubleNode.class){
    @Override public DoubleNode coerce(    final TextNode from,    final DoubleNode target){
      try {
        target.setValue(Double.parseDouble(from.getTextValue()));
        return target;
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(LongNode.class).put(TextNode.class,new Coercer<TextNode,LongNode>(LongNode.class){
    @Override public LongNode coerce(    final TextNode from,    final LongNode target){
      try {
        target.setValue(Long.parseLong(from.getTextValue()));
        return target;
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(DecimalNode.class).put(TextNode.class,new Coercer<TextNode,DecimalNode>(DecimalNode.class){
    @Override public DecimalNode coerce(    final TextNode from,    final DecimalNode target){
      try {
        target.setValue(new BigDecimal(from.getTextValue()));
        return target;
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(BigIntegerNode.class).put(TextNode.class,new Coercer<TextNode,BigIntegerNode>(BigIntegerNode.class){
    @Override public BigIntegerNode coerce(    final TextNode from,    final BigIntegerNode target){
      try {
        target.setValue(new BigInteger(from.getTextValue()));
        return target;
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(AbstractNumericNode.class).put(TextNode.class,coercers.get(DecimalNode.class).get(TextNode.class));
}
