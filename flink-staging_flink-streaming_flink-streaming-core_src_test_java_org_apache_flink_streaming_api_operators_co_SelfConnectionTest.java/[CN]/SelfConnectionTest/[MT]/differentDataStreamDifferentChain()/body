{
  TestListResultSink<String> resultSink=new TestListResultSink<String>();
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(3);
  DataStream<Integer> src=env.fromElements(1,3,5).disableChaining();
  DataStream<String> stringMap=src.flatMap(new FlatMapFunction<Integer,String>(){
    private static final long serialVersionUID=1L;
    @Override public void flatMap(    Integer value,    Collector<String> out) throws Exception {
      out.collect("x " + value);
    }
  }
).groupBy(new KeySelector<String,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getKey(    String value) throws Exception {
      return value.length();
    }
  }
);
  DataStream<Long> longMap=src.map(new MapFunction<Integer,Long>(){
    private static final long serialVersionUID=1L;
    @Override public Long map(    Integer value) throws Exception {
      return Long.valueOf(value + 1);
    }
  }
).groupBy(new KeySelector<Long,Long>(){
    private static final long serialVersionUID=1L;
    @Override public Long getKey(    Long value) throws Exception {
      return value;
    }
  }
);
  stringMap.connect(longMap).map(new CoMapFunction<String,Long,String>(){
    private static final long serialVersionUID=1L;
    @Override public String map1(    String value){
      return value;
    }
    @Override public String map2(    Long value){
      return value.toString();
    }
  }
).addSink(resultSink);
  try {
    env.execute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  expected=new ArrayList<String>();
  expected.addAll(Arrays.asList("x 1","x 3","x 5","2","4","6"));
  List<String> result=resultSink.getResult();
  Collections.sort(expected);
  Collections.sort(result);
  assertEquals(expected,result);
}
