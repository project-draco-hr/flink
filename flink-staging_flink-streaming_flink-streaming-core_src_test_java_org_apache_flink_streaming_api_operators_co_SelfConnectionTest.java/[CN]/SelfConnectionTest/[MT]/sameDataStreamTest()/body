{
  StreamExecutionEnvironment env=new TestStreamEnvironment(3,MEMORY_SIZE);
  TestListResultSink<String> resultSink=new TestListResultSink<String>();
  Timestamp<Integer> timeStamp=new Timestamp<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public long getTimestamp(    Integer value){
      return value;
    }
  }
;
  KeySelector keySelector=new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
;
  DataStream<Integer> src=env.fromElements(1,3,5);
  @SuppressWarnings("unused") DataStream<Tuple2<Integer,Integer>> dataStream=src.join(src).onWindow(50L,timeStamp,timeStamp).where(keySelector).equalTo(keySelector).map(new MapFunction<Tuple2<Integer,Integer>,String>(){
    private static final long serialVersionUID=1L;
    @Override public String map(    Tuple2<Integer,Integer> value) throws Exception {
      return value.toString();
    }
  }
).addSink(resultSink);
  try {
    env.execute();
    expected=new ArrayList<String>();
    expected.addAll(Arrays.asList("(1,1)","(3,3)","(5,5)"));
    List<String> result=resultSink.getResult();
    Collections.sort(expected);
    Collections.sort(result);
    assertEquals(expected,result);
  }
 catch (  Exception e) {
    fail();
    e.printStackTrace();
  }
}
