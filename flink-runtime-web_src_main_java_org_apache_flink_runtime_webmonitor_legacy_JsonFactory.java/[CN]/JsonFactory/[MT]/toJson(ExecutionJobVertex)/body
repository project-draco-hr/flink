{
  StringBuilder json=new StringBuilder("");
  json.append("{");
  json.append("\"groupvertexid\": \"").append(jobVertex.getJobVertexId()).append("\",");
  json.append("\"groupvertexname\": \"").append(StringUtils.escapeHtml(jobVertex.getJobVertex().getName())).append("\",");
  json.append("\"numberofgroupmembers\": ").append(jobVertex.getParallelism()).append(",");
  json.append("\"groupmembers\": [");
  Map<ExecutionState,Integer> stateCounts=new HashMap<ExecutionState,Integer>();
  for (  ExecutionState state : ExecutionState.values()) {
    stateCounts.put(state,0);
  }
  ExecutionVertex[] vertices=jobVertex.getTaskVertices();
  for (int j=0; j < vertices.length; j++) {
    ExecutionVertex vertex=vertices[j];
    json.append(toJson(vertex));
    if (j != vertices.length - 1) {
      json.append(",");
    }
    int count=stateCounts.get(vertex.getExecutionState()) + 1;
    stateCounts.put(vertex.getExecutionState(),count);
  }
  json.append("],");
  json.append("\"backwardEdges\": [");
  List<IntermediateResult> inputs=jobVertex.getInputs();
  for (int inputNumber=0; inputNumber < inputs.size(); inputNumber++) {
    ExecutionJobVertex input=inputs.get(inputNumber).getProducer();
    json.append("{");
    json.append("\"groupvertexid\": \"").append(input.getJobVertexId()).append("\",");
    json.append("\"groupvertexname\": \"").append(StringUtils.escapeHtml(jobVertex.getJobVertex().getName())).append("\"");
    json.append("}");
    if (inputNumber != inputs.size() - 1) {
      json.append(",");
    }
  }
  json.append("]");
  for (  Map.Entry<ExecutionState,Integer> stateCount : stateCounts.entrySet()) {
    json.append(",\"").append(stateCount.getKey()).append("\": ").append(stateCount.getValue());
  }
  json.append("}");
  return json.toString();
}
