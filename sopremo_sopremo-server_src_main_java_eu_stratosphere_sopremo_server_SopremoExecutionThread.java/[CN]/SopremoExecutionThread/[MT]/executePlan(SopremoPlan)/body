{
  final Plan pactPlan=plan.asPactPlan();
  JobGraph jobGraph;
  try {
    jobGraph=getJobGraph(pactPlan);
  }
 catch (  Exception e) {
    LOG.error("Could not generate job graph " + this.jobInfo.getJobId(),e);
    this.jobInfo.setStatusAndDetail(ExecutionState.ERROR,"Could not generate job graph: " + StringUtils.stringifyException(e));
    return -1;
  }
  try {
    for (    String requiredPackage : this.jobInfo.getInitialRequest().getQuery().getRequiredPackages())     jobGraph.addJar(LibraryCacheManager.contains(requiredPackage));
  }
 catch (  Exception e) {
    LOG.error("Could not find associated packages " + this.jobInfo.getJobId(),e);
    this.jobInfo.setStatusAndDetail(ExecutionState.ERROR,"Could not find associated packages: " + StringUtils.stringifyException(e));
    return -1;
  }
  JobClient client;
  try {
    client=new JobClient(jobGraph,this.jobInfo.getConfiguration(),this.jobManagerAddress);
  }
 catch (  Exception e) {
    LOG.error("Could not open job manager " + this.jobInfo.getJobId(),e);
    this.jobInfo.setStatusAndDetail(ExecutionState.ERROR,"Could not open job manager: " + StringUtils.stringifyException(e));
    return -1;
  }
  try {
    this.jobInfo.setJobClient(client);
    this.jobInfo.setStatusAndDetail(ExecutionState.RUNNING,"");
    return client.submitJobAndWait();
  }
 catch (  Exception e) {
    LOG.error("The job was not successfully executed " + this.jobInfo.getJobId(),e);
    this.jobInfo.setStatusAndDetail(ExecutionState.ERROR,"The job was not successfully executed: " + StringUtils.stringifyException(e));
    return -1;
  }
}
