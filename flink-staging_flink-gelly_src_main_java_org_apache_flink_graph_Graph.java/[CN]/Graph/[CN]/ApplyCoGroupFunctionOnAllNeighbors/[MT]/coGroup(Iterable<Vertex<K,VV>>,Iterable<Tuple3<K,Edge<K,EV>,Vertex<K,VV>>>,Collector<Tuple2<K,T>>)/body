{
  final Iterator<Tuple2<Edge<K,EV>,Vertex<K,VV>>> neighborsIterator=new Iterator<Tuple2<Edge<K,EV>,Vertex<K,VV>>>(){
    final Iterator<Tuple3<K,Edge<K,EV>,Vertex<K,VV>>> keysWithEdgesIterator=keysWithNeighbors.iterator();
    @Override public boolean hasNext(){
      return keysWithEdgesIterator.hasNext();
    }
    @Override public Tuple2<Edge<K,EV>,Vertex<K,VV>> next(){
      Tuple3<K,Edge<K,EV>,Vertex<K,VV>> next=keysWithEdgesIterator.next();
      return new Tuple2<Edge<K,EV>,Vertex<K,VV>>(next.f1,next.f2);
    }
    @Override public void remove(){
      keysWithEdgesIterator.remove();
    }
  }
;
  Iterable<Tuple2<Edge<K,EV>,Vertex<K,VV>>> neighborsIterable=new Iterable<Tuple2<Edge<K,EV>,Vertex<K,VV>>>(){
    public Iterator<Tuple2<Edge<K,EV>,Vertex<K,VV>>> iterator(){
      return neighborsIterator;
    }
  }
;
  out.collect(function.iterateNeighbors(vertex.iterator().next(),neighborsIterable));
}
