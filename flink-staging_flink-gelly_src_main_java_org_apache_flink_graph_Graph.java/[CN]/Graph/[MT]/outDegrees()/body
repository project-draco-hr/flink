{
  return this.edges.groupBy(new KeySelector<Tuple3<K,K,EV>,K>(){
    @Override public K getKey(    Tuple3<K,K,EV> kevEdge) throws Exception {
      return kevEdge.f0;
    }
  }
).reduceGroup(new GroupReduceFunction<Tuple3<K,K,EV>,Tuple2<K,Integer>>(){
    @Override public void reduce(    Iterable<Tuple3<K,K,EV>> edges,    Collector<Tuple2<K,Integer>> integerCollector) throws Exception {
      int count=0;
      for (      Tuple3<K,K,EV> edge : edges) {
        count++;
      }
      integerCollector.collect(new Tuple2<K,Integer>(edges.iterator().next().f0,count));
    }
  }
);
}
