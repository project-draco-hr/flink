{
  return this.edges.groupBy(new KeySelector<Edge<K,EV>,K>(){
    @Override public K getKey(    Edge<K,EV> kevEdge) throws Exception {
      return kevEdge.getSource();
    }
  }
).reduceGroup(new GroupReduceFunction<Edge<K,EV>,Tuple2<K,Integer>>(){
    @Override public void reduce(    Iterable<Edge<K,EV>> edges,    Collector<Tuple2<K,Integer>> integerCollector) throws Exception {
      int count=0;
      for (      Edge<K,EV> edge : edges) {
        count++;
      }
      integerCollector.collect(new Tuple2<K,Integer>(edges.iterator().next().getSource(),count));
    }
  }
);
}
