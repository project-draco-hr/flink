{
switch (direction) {
case IN:
    final DataSet<Tuple2<K,VV>> verticesWithSourceNeighborValues=edges.join(this.vertices).where(0).equalTo(0).with(new ProjectVertexWithNeighborValueJoin<K,VV,EV>(1)).withForwardedFieldsFirst("f1->f0");
  return verticesWithSourceNeighborValues.groupBy(0).reduce(new ApplyNeighborReduceFunction<K,VV>(reduceNeighborsFunction));
case OUT:
DataSet<Tuple2<K,VV>> verticesWithTargetNeighborValues=edges.join(this.vertices).where(1).equalTo(0).with(new ProjectVertexWithNeighborValueJoin<K,VV,EV>(0)).withForwardedFieldsFirst("f0");
return verticesWithTargetNeighborValues.groupBy(0).reduce(new ApplyNeighborReduceFunction<K,VV>(reduceNeighborsFunction));
case ALL:
DataSet<Tuple2<K,VV>> verticesWithNeighborValues=edges.flatMap(new EmitOneEdgeWithNeighborPerNode<K,EV>()).join(this.vertices).where(1).equalTo(0).with(new ProjectNeighborValue<K,VV,EV>());
return verticesWithNeighborValues.groupBy(0).reduce(new ApplyNeighborReduceFunction<K,VV>(reduceNeighborsFunction));
default :
throw new IllegalArgumentException("Illegal edge direction");
}
}
