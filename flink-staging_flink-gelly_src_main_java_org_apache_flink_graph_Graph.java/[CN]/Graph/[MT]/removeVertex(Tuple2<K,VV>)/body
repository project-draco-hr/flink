{
  DataSet<Tuple2<K,VV>> vertexToRemove=fromCollection(Arrays.asList(vertex));
  DataSet<Tuple2<K,VV>> newVertices=getVertices().filter(new RichFilterFunction<Tuple2<K,VV>>(){
    private Tuple2<K,VV> vertexToRemove;
    @Override public void open(    Configuration parameters) throws Exception {
      super.open(parameters);
      this.vertexToRemove=(Tuple2<K,VV>)getRuntimeContext().getBroadcastVariable("vertexToRemove").get(0);
    }
    @Override public boolean filter(    Tuple2<K,VV> vertex) throws Exception {
      if (vertex.f0.equals(vertexToRemove.f0)) {
        return false;
      }
 else {
        return true;
      }
    }
  }
).withBroadcastSet(vertexToRemove,"vertexToRemove");
  DataSet<Tuple3<K,K,EV>> newEdges=getEdges().filter(new RichFilterFunction<Tuple3<K,K,EV>>(){
    private Tuple2<K,VV> vertexToRemove;
    @Override public void open(    Configuration parameters) throws Exception {
      super.open(parameters);
      this.vertexToRemove=(Tuple2<K,VV>)getRuntimeContext().getBroadcastVariable("vertexToRemove").get(0);
    }
    @Override public boolean filter(    Tuple3<K,K,EV> edge) throws Exception {
      if (edge.f0.equals(vertexToRemove.f0)) {
        return false;
      }
      if (edge.f1.equals(vertexToRemove.f0)) {
        return false;
      }
      return true;
    }
  }
).withBroadcastSet(vertexToRemove,"vertexToRemove");
  return new Graph<K,VV,EV>(newVertices,newEdges,this.context);
}
