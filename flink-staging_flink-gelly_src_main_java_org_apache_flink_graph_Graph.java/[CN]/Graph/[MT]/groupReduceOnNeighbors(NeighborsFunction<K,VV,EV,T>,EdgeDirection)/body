{
switch (direction) {
case IN:
    DataSet<Tuple3<K,Edge<K,EV>,Vertex<K,VV>>> edgesWithSources=edges.join(this.vertices).where(0).equalTo(0).with(new ProjectVertexIdJoin<K,VV,EV>(1));
  return edgesWithSources.groupBy(0).reduceGroup(new ApplyNeighborGroupReduceFunction<K,VV,EV,T>(neighborsFunction));
case OUT:
DataSet<Tuple3<K,Edge<K,EV>,Vertex<K,VV>>> edgesWithTargets=edges.join(this.vertices).where(1).equalTo(0).with(new ProjectVertexIdJoin<K,VV,EV>(0));
return edgesWithTargets.groupBy(0).reduceGroup(new ApplyNeighborGroupReduceFunction<K,VV,EV,T>(neighborsFunction));
case ALL:
DataSet<Tuple3<K,Edge<K,EV>,Vertex<K,VV>>> edgesWithNeighbors=edges.flatMap(new EmitOneEdgeWithNeighborPerNode<K,VV,EV>()).join(this.vertices).where(1).equalTo(0).with(new ProjectEdgeWithNeighbor<K,VV,EV>());
return edgesWithNeighbors.groupBy(0).reduceGroup(new ApplyNeighborGroupReduceFunction<K,VV,EV,T>(neighborsFunction));
default :
throw new IllegalArgumentException("Illegal edge direction");
}
}
