{
  final ExecutionAttemptID executionId=task.getExecutionId();
  final IntermediateResultPartition[] producedPartitions=task.getProducedPartitions();
  final BufferWriter[] writers=task.getWriters();
  if (writers.length != producedPartitions.length) {
    throw new IllegalStateException("Unequal number of writers and partitions.");
  }
  for (int i=0; i < producedPartitions.length; i++) {
    final IntermediateResultPartition partition=producedPartitions[i];
    final BufferWriter writer=writers[i];
    BufferPool bufferPool=null;
    try {
      bufferPool=networkBufferPool.createBufferPool(partition.getNumberOfQueues(),false);
      partition.setBufferPool(bufferPool);
      partitionManager.registerIntermediateResultPartition(partition);
    }
 catch (    Throwable t) {
      if (bufferPool != null) {
        bufferPool.destroy();
      }
      if (t instanceof IOException) {
        throw (IOException)t;
      }
 else {
        throw new IOException(t.getMessage(),t);
      }
    }
    taskEventDispatcher.registerWriterForIncomingTaskEvents(executionId,writer.getPartitionId(),writer);
  }
  final SingleInputGate[] inputGates=task.getInputGates();
  for (  SingleInputGate gate : inputGates) {
    BufferPool bufferPool=null;
    try {
      bufferPool=networkBufferPool.createBufferPool(gate.getNumberOfInputChannels(),false);
      gate.setBufferPool(bufferPool);
    }
 catch (    Throwable t) {
      if (bufferPool != null) {
        bufferPool.destroy();
      }
      if (t instanceof IOException) {
        throw (IOException)t;
      }
 else {
        throw new IOException(t.getMessage(),t);
      }
    }
  }
}
