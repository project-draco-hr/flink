{
  final InputGate inputGate=InputGateUtil.createInputGate(inputGates1,inputGates2);
  if (checkpointMode == CheckpointingMode.EXACTLY_ONCE) {
    this.barrierHandler=new BarrierBuffer(inputGate,ioManager);
  }
 else   if (checkpointMode == CheckpointingMode.AT_LEAST_ONCE) {
    this.barrierHandler=new BarrierTracker(inputGate);
  }
 else {
    throw new IllegalArgumentException("Unrecognized CheckpointingMode: " + checkpointMode);
  }
  if (checkpointListener != null) {
    this.barrierHandler.registerCheckpointEventHandler(checkpointListener);
  }
  if (enableWatermarkMultiplexing) {
    MultiplexingStreamRecordSerializer<IN1> ser=new MultiplexingStreamRecordSerializer<IN1>(inputSerializer1);
    this.deserializationDelegate1=new NonReusingDeserializationDelegate<StreamElement>(ser);
  }
 else {
    StreamRecordSerializer<IN1> ser=new StreamRecordSerializer<IN1>(inputSerializer1);
    this.deserializationDelegate1=(DeserializationDelegate<StreamElement>)(DeserializationDelegate<?>)new NonReusingDeserializationDelegate<StreamRecord<IN1>>(ser);
  }
  if (enableWatermarkMultiplexing) {
    MultiplexingStreamRecordSerializer<IN2> ser=new MultiplexingStreamRecordSerializer<IN2>(inputSerializer2);
    this.deserializationDelegate2=new NonReusingDeserializationDelegate<StreamElement>(ser);
  }
 else {
    StreamRecordSerializer<IN2> ser=new StreamRecordSerializer<IN2>(inputSerializer2);
    this.deserializationDelegate2=(DeserializationDelegate<StreamElement>)(DeserializationDelegate<?>)new NonReusingDeserializationDelegate<StreamRecord<IN2>>(ser);
  }
  this.recordDeserializers=new SpillingAdaptiveSpanningRecordDeserializer[inputGate.getNumberOfInputChannels()];
  for (int i=0; i < recordDeserializers.length; i++) {
    recordDeserializers[i]=new SpillingAdaptiveSpanningRecordDeserializer<>(ioManager.getSpillingDirectoriesPaths());
  }
  int numInputChannels1=0;
  for (  InputGate gate : inputGates1) {
    numInputChannels1+=gate.getNumberOfInputChannels();
  }
  this.numInputChannels1=numInputChannels1;
  int numInputChannels2=inputGate.getNumberOfInputChannels() - numInputChannels1;
  watermarks1=new long[numInputChannels1];
  Arrays.fill(watermarks1,Long.MIN_VALUE);
  lastEmittedWatermark1=Long.MIN_VALUE;
  watermarks2=new long[numInputChannels2];
  Arrays.fill(watermarks2,Long.MIN_VALUE);
  lastEmittedWatermark2=Long.MIN_VALUE;
}
