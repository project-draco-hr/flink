{
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  DataSet<Tuple4<String,Integer,Integer,Integer>> sc1=env.fromElements(new Tuple4<>("1",61,6,29),new Tuple4<>("2",7,13,10),new Tuple4<>("3",8,13,27));
  DataSet<Tuple2<String,Integer>> sc2=env.fromElements(new Tuple2<>("1",5),new Tuple2<>("2",3),new Tuple2<>("3",6));
  DataSet<Tuple2<String,Integer>> sc3=env.fromElements(new Tuple2<>("1",2),new Tuple2<>("2",3),new Tuple2<>("3",7));
  JoinOperator<Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple3<String,Integer,Integer>> jn1=sc2.join(sc3).where(0).equalTo(0).with(new Jn1());
  JoinOperator<Tuple3<String,Integer,Integer>,Tuple4<String,Integer,Integer,Integer>,Tuple2<String,Integer>> jn2=jn1.join(sc1).where(0).equalTo(0).with(new Jn2());
  FlatMapOperator<Tuple3<String,Integer,Integer>,Tuple2<String,Integer>> mp1=jn1.flatMap(new Mp1());
  List<Tuple2<String,Integer>> result=jn2.flatMap(new Mp2()).withBroadcastSet(mp1,"z").collect();
  JavaProgramTestBase.compareResultAsText(result,RESULT);
}
