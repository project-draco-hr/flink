{
  this.jobID.write(kryo,output);
  output.writeString(this.jobName);
  final AbstractJobVertex[] allVertices=this.getAllJobVertices();
  try {
    writeRequiredJarFiles(kryo,output,allVertices);
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
  output.writeInt(allVertices.length);
  for (int i=0; i < allVertices.length; i++) {
    final String className=allVertices[i].getClass().getName();
    output.writeString(className);
    allVertices[i].getID().write(kryo,output);
    output.writeString(allVertices[i].getName());
  }
  for (int i=0; i < allVertices.length; i++) {
    allVertices[i].getID().write(kryo,output);
    allVertices[i].write(kryo,output);
  }
  this.jobConfiguration.write(kryo,output);
  this.taskManagerConfiguration.write(kryo,output);
}
