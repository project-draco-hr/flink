{
  indexMap.put(jv,index);
  lowLinkMap.put(jv,index);
  index=Integer.valueOf(index.intValue() + 1);
  stack.push(jv);
  for (int i=0; i < jv.getNumberOfForwardConnections(); i++) {
    final AbstractJobVertex jv2=jv.getForwardConnection(i).getConnectedVertex();
    if (!indexMap.containsKey(jv2) || stack.contains(jv2)) {
      if (!indexMap.containsKey(jv2) && !tarjan(jv2,index,indexMap,lowLinkMap,stack)) {
        return false;
      }
      if (lowLinkMap.get(jv) > lowLinkMap.get(jv2)) {
        lowLinkMap.put(jv,lowLinkMap.get(jv2));
      }
    }
  }
  if (lowLinkMap.get(jv).equals(indexMap.get(jv))) {
    int count=0;
    while (stack.size() > 0) {
      final AbstractJobVertex jv2=stack.pop();
      if (jv == jv2) {
        break;
      }
      count++;
    }
    if (count > 0) {
      return false;
    }
  }
  return true;
}
