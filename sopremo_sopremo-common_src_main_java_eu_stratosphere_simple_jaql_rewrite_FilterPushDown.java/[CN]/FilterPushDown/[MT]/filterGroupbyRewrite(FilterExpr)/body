{
  GroupByExpr grp_expr=(GroupByExpr)filter_expr.binding().inExpr();
  Var filter_pipe_var=filter_expr.binding().var;
  if (grp_expr.externalEffectIntoClause())   return false;
  int grp_childNum=grp_expr.byBinding().numChildren();
  MappingTable into_mt=grp_expr.getMappingTable(grp_childNum);
  MappingTable[] by_mts=new MappingTable[grp_childNum];
  for (int i=0; i < grp_childNum; i++)   by_mts[i]=grp_expr.getMappingTable(i);
  if (into_mt.replaceVarInAfterExpr(filter_pipe_var) == false)   return false;
  ArrayList<Expr> pushed_pred=new ArrayList<Expr>();
  ArrayList<Expr>[] pushed_to_child=new ArrayList[grp_childNum];
  for (int i=0; i < grp_childNum; i++)   pushed_to_child[i]=new ArrayList<Expr>();
  VarMap vm=new VarMap();
  for (int k=0; k < filter_expr.conjunctivePred_count(); k++) {
    Expr crnt_pred=filter_expr.conjunctivePred(k);
    ArrayList<Expr> usedIn_list=findMaximalVarOrPathExpr(crnt_pred,filter_pipe_var);
    if (usedIn_list.size() == 0) {
      pushed_pred.add(crnt_pred);
      for (int i=0; i < grp_childNum; i++)       pushed_to_child[i].add(crnt_pred.clone(vm));
      continue;
    }
    ArrayList<Expr> mappedTo_list1=predMappedTo(usedIn_list,into_mt,true);
    if (mappedTo_list1 == null)     continue;
    ArrayList<Expr>[] mappedTo_list2=new ArrayList[grp_childNum];
    for (int i=0; i < grp_childNum; i++)     mappedTo_list2[i]=new ArrayList<Expr>();
    boolean can_be_pushed=true;
    for (int i=0; i < grp_childNum; i++) {
      mappedTo_list2[i]=predMappedTo(mappedTo_list1,by_mts[i],true);
      if (mappedTo_list2[i] == null)       can_be_pushed=false;
    }
    if (!can_be_pushed)     continue;
    for (int i=0; i < grp_childNum; i++) {
      Expr crntPredClone=crnt_pred.clone(vm);
      ArrayList<Expr> usedIn_list_clone=findMaximalVarOrPathExpr(crntPredClone,filter_pipe_var);
      Expr modifiedPred=changePredicate(crntPredClone,usedIn_list_clone,mappedTo_list2[i],grp_expr.inVar(),filter_pipe_var);
      pushed_to_child[i].add(modifiedPred);
    }
    pushed_pred.add(crnt_pred);
  }
  if (pushed_pred.size() == 0)   return false;
  for (int i=0; i < pushed_pred.size(); i++)   pushed_pred.get(i).detach();
  if (filter_expr.conjunctivePred_count() == 0)   filter_expr.replaceInParent(filter_expr.binding().inExpr());
  BindingExpr grp_input=grp_expr.inBinding();
  int child_cnt=grp_input.numChildren();
  for (int i=0; i < child_cnt; i++) {
    BindingExpr new_filter_input=new BindingExpr(Type.IN,new Var(filter_pipe_var.name()),null,grp_input.child(i));
    FilterExpr new_fe=new FilterExpr(new_filter_input,pushed_to_child[i]);
    grp_input.setChild(i,new_fe);
    replaceVarInFilter(new_fe,filter_pipe_var,new_filter_input.var);
  }
  return true;
}
