{
  final int WAIT_TIME=15;
  LOG.info("Starting testJavaAPI()");
  AbstractFlinkYarnClient flinkYarnClient=FlinkYarnSessionCli.getFlinkYarnClient();
  flinkYarnClient.setTaskManagerCount(1);
  flinkYarnClient.setJobManagerMemory(512);
  flinkYarnClient.setTaskManagerMemory(512);
  flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()));
  String confDirPath=System.getenv("FLINK_CONF_DIR");
  flinkYarnClient.setConfigurationDirectory(confDirPath);
  flinkYarnClient.setFlinkConfigurationObject(GlobalConfiguration.getConfiguration());
  flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"));
  AbstractFlinkYarnCluster yarnCluster=null;
  try {
    yarnCluster=flinkYarnClient.deploy(null);
  }
 catch (  Exception e) {
    System.err.println("Error while deploying YARN cluster: " + e.getMessage());
    LOG.warn("Failing test",e);
    Assert.fail();
  }
  FlinkYarnClusterStatus expectedStatus=new FlinkYarnClusterStatus(1,1);
  for (int second=0; second < WAIT_TIME * 2; second++) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      LOG.warn("Interrupted",e);
      Thread.interrupted();
    }
    FlinkYarnClusterStatus status=yarnCluster.getClusterStatus();
    if (status != null && status.equals(expectedStatus)) {
      LOG.info("Cluster reached status " + status);
      break;
    }
    if (second > WAIT_TIME) {
      Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds");
    }
  }
  Assert.assertNotNull(yarnCluster.getJobManagerAddress());
  Assert.assertNotNull(yarnCluster.getWebInterfaceURL());
  LOG.info("Shutting down cluster. All tests passed");
  yarnCluster.shutdown();
  LOG.info("Finished testJavaAPI()");
  ensureNoProhibitedStringInLogFiles(prohibtedStrings);
}
