{
  LOG.info("Starting testTaskManagerFailure()");
  Runner runner=startWithArgs(new String[]{"-j",flinkUberjar.getAbsolutePath(),"-t",flinkLibFolder.getAbsolutePath(),"-n","1","-jm","768","-tm","1024","-nm","customName","-Dfancy-configuration-value=veryFancy","-Dyarn.maximum-failed-containers=3"},"Number of connected TaskManagers changed to 1. Slots available: 1",RunTypes.YARN_SESSION);
  Assert.assertEquals(2,getRunningContainers());
  try {
    YarnClient yc=YarnClient.createYarnClient();
    yc.init(yarnConfiguration);
    yc.start();
    List<ApplicationReport> apps=yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING));
    Assert.assertEquals(1,apps.size());
    ApplicationReport app=apps.get(0);
    Assert.assertEquals("customName",app.getName());
    String url=app.getTrackingUrl();
    if (!url.endsWith("/")) {
      url+="/";
    }
    if (!url.startsWith("http://")) {
      url="http://" + url;
    }
    LOG.info("Got application URL from YARN {}",url);
    String response=TestBaseUtils.getFromHTTP(url + "taskmanagers/");
    JSONObject parsedTMs=new JSONObject(response);
    JSONArray taskManagers=parsedTMs.getJSONArray("taskmanagers");
    Assert.assertNotNull(taskManagers);
    Assert.assertEquals(1,taskManagers.length());
    Assert.assertEquals(1,taskManagers.getJSONObject(0).getInt("slotsNumber"));
    String jsonConfig=TestBaseUtils.getFromHTTP(url + "jobmanager/config");
    JSONArray parsed=new JSONArray(jsonConfig);
    Map<String,String> parsedConfig=WebMonitorUtils.fromKeyValueJsonArray(parsed);
    Assert.assertEquals("veryFancy",parsedConfig.get("fancy-configuration-value"));
    Assert.assertEquals("3",parsedConfig.get("yarn.maximum-failed-containers"));
    String oC=outContent.toString();
    Pattern p=Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)");
    Matcher matches=p.matcher(oC);
    String hostname=null;
    String port=null;
    while (matches.find()) {
      hostname=matches.group(1).toLowerCase();
      port=matches.group(2);
    }
    LOG.info("Extracted hostname:port: {} {}",hostname,port);
    Assert.assertEquals("unable to find hostname in " + parsed,hostname,parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY));
    Assert.assertEquals("unable to find port in " + parsed,port,parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY));
    String logs=TestBaseUtils.getFromHTTP(url + "jobmanager/log");
    Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster/JobManager (Version"));
  }
 catch (  Throwable e) {
    LOG.warn("Error while running test",e);
    Assert.fail(e.getMessage());
  }
  ContainerId taskManagerContainer=null;
  NodeManager nodeManager=null;
  UserGroupInformation remoteUgi=null;
  NMTokenIdentifier nmIdent=null;
  try {
    remoteUgi=UserGroupInformation.getCurrentUser();
  }
 catch (  IOException e) {
    LOG.warn("Unable to get curr user",e);
    Assert.fail();
  }
  for (int nmId=0; nmId < NUM_NODEMANAGERS; nmId++) {
    NodeManager nm=yarnCluster.getNodeManager(nmId);
    ConcurrentMap<ContainerId,Container> containers=nm.getNMContext().getContainers();
    for (    Map.Entry<ContainerId,Container> entry : containers.entrySet()) {
      String command=Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands());
      if (command.contains(YarnTaskManagerRunner.class.getSimpleName())) {
        taskManagerContainer=entry.getKey();
        nodeManager=nm;
        nmIdent=new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(),null,"",0);
        remoteUgi.addTokenIdentifier(nmIdent);
      }
    }
    sleep(500);
  }
  Assert.assertNotNull("Unable to find container with TaskManager",taskManagerContainer);
  Assert.assertNotNull("Illegal state",nodeManager);
  List<ContainerId> toStop=new LinkedList<ContainerId>();
  toStop.add(taskManagerContainer);
  StopContainersRequest scr=StopContainersRequest.newInstance(toStop);
  try {
    nodeManager.getNMContext().getContainerManager().stopContainers(scr);
  }
 catch (  Throwable e) {
    LOG.warn("Error stopping container",e);
    Assert.fail("Error stopping container: " + e.getMessage());
  }
  boolean ok=false;
  do {
    LOG.debug("Waiting for correct order of events. Output: {}",errContent.toString());
    String o=errContent.toString();
    int killedOff=o.indexOf("Container killed by the ApplicationMaster");
    if (killedOff != -1) {
      o=o.substring(killedOff);
      ok=o.indexOf("Launching container") > 0;
    }
    sleep(1000);
  }
 while (!ok);
  runner.sendStop();
  try {
    runner.join(1000);
  }
 catch (  InterruptedException e) {
    LOG.warn("Interrupted while stopping runner",e);
  }
  LOG.warn("stopped");
  System.setOut(originalStdout);
  System.setErr(originalStderr);
  String oC=outContent.toString();
  String eC=errContent.toString();
  LOG.info("Sending stdout content through logger: \n\n{}\n\n",oC);
  LOG.info("Sending stderr content through logger: \n\n{}\n\n",eC);
  Assert.assertTrue("Expect to see failed container",eC.contains("New messages from the YARN cluster"));
  Assert.assertTrue("Expect to see failed container",eC.contains("Container killed by the ApplicationMaster"));
  Assert.assertTrue("Expect to see new container started",eC.contains("Launching container") && eC.contains("on host"));
  remoteUgi.getTokenIdentifiers().remove(nmIdent);
  LOG.info("Finished testTaskManagerFailure()");
}
