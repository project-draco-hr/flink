{
  final String topic="auto-offset-reset-none-test";
  final int parallelism=1;
  final int elementsPerPartition=50000;
  final int totalElements=parallelism * elementsPerPartition;
  kafkaServer.createTestTopic(topic,parallelism,1);
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.createRemoteEnvironment("localhost",flink.getLeaderRPCPort());
  env.setParallelism(parallelism);
  env.setRestartStrategy(RestartStrategies.noRestart());
  env.getConfig().disableSysoutLogging();
  Properties customProps=new Properties();
  customProps.putAll(standardProps);
  customProps.setProperty("auto.offset.reset","none");
  FlinkKafkaConsumerBase<String> source=kafkaServer.getConsumer(topic,new SimpleStringSchema(),customProps);
  DataStreamSource<String> consuming=env.addSource(source);
  consuming.addSink(new DiscardingSink<String>());
  try {
    env.execute("Test auto offset reset none");
  }
 catch (  Throwable e) {
    System.out.println("MESSAGE: " + e.getCause().getCause().getMessage());
    if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset") && !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition")) {
      throw e;
    }
  }
  kafkaServer.deleteTestTopic(topic);
}
