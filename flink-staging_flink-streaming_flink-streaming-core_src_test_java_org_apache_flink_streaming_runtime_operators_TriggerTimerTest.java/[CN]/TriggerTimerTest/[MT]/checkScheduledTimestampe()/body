{
  try {
    final TriggerTimer timer=new TriggerTimer();
    final AtomicReference<Throwable> errorRef=new AtomicReference<>();
    final long t1=System.currentTimeMillis();
    final long t2=System.currentTimeMillis() - 200;
    final long t3=System.currentTimeMillis() + 100;
    final long t4=System.currentTimeMillis() + 200;
    timer.scheduleTriggerAt(new ValidatingTriggerable(errorRef,t1,0),t1);
    timer.scheduleTriggerAt(new ValidatingTriggerable(errorRef,t2,1),t2);
    timer.scheduleTriggerAt(new ValidatingTriggerable(errorRef,t3,2),t3);
    timer.scheduleTriggerAt(new ValidatingTriggerable(errorRef,t4,3),t4);
    long deadline=System.currentTimeMillis() + 5000;
    while (errorRef.get() == null && ValidatingTriggerable.numInSequence < 4 && System.currentTimeMillis() < deadline) {
      Thread.sleep(100);
    }
    if (errorRef.get() != null) {
      errorRef.get().printStackTrace();
      fail(errorRef.get().getMessage());
    }
    assertEquals(4,ValidatingTriggerable.numInSequence);
    timer.shutdown();
    deadline=System.currentTimeMillis() + 2000;
    while (TriggerTimer.TRIGGER_THREADS_GROUP.activeCount() > 0 && System.currentTimeMillis() < deadline) {
      Thread.sleep(10);
    }
    assertEquals("Trigger timer thread did not properly shut down",0,TriggerTimer.TRIGGER_THREADS_GROUP.activeCount());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
