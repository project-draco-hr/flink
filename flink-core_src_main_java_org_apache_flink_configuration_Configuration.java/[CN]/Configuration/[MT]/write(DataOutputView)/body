{
synchronized (this.confData) {
    out.writeInt(this.confData.size());
    for (    Map.Entry<String,Object> entry : this.confData.entrySet()) {
      String key=entry.getKey();
      Object val=entry.getValue();
      StringValue.writeString(key,out);
      Class<?> clazz=val.getClass();
      if (clazz == String.class) {
        out.write(TYPE_STRING);
        StringValue.writeString((String)val,out);
      }
 else       if (clazz == Integer.class) {
        out.write(TYPE_INT);
        out.writeInt((Integer)val);
      }
 else       if (clazz == Long.class) {
        out.write(TYPE_LONG);
        out.writeLong((Long)val);
      }
 else       if (clazz == Float.class) {
        out.write(TYPE_FLOAT);
        out.writeFloat((Float)val);
      }
 else       if (clazz == Double.class) {
        out.write(TYPE_DOUBLE);
        out.writeDouble((Double)val);
      }
 else       if (clazz == byte[].class) {
        out.write(TYPE_BYTES);
        byte[] bytes=(byte[])val;
        out.writeInt(bytes.length);
        out.write(bytes);
      }
 else       if (clazz == Boolean.class) {
        out.write(TYPE_BOOLEAN);
        out.writeBoolean((Boolean)val);
      }
 else {
        throw new IllegalArgumentException("Unrecognized type");
      }
    }
  }
}
