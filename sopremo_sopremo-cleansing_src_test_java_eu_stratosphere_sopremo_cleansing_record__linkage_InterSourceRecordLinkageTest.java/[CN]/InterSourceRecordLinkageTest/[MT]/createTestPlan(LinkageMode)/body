{
  InterSourceRecordLinkage recordLinkage=new InterSourceRecordLinkage().withAlgorithm(new Naive()).withSimilarityExpression(this.similarityFunction).withThreshold(0.7).withLinkageMode(mode);
  Projection sortedArrays;
  if (!mode.getClosureMode().isProvenance())   sortedArrays=new Projection().withValueTransformation(BuiltinFunctions.SORT.asExpression()).withInputs(recordLinkage);
 else {
    EvaluationExpression[] sorts=new EvaluationExpression[this.inputs.size()];
    for (int index=0; index < sorts.length; index++)     sorts[index]=new PathExpression(new ArrayAccess(index),BuiltinFunctions.SORT.asExpression());
    sortedArrays=new Projection().withValueTransformation(new ArrayCreation(sorts)).withInputs(recordLinkage);
  }
  final SopremoTestPlan sopremoTestPlan=new SopremoTestPlan(sortedArrays);
  if (this.useId) {
    recordLinkage.getRecordLinkageInput(0).setIdProjection(new ObjectAccess("id"));
    recordLinkage.getRecordLinkageInput(1).setIdProjection(new ObjectAccess("id2"));
  }
  for (int index=0; index < this.resultProjections.length; index++)   if (this.resultProjections[index] != null)   recordLinkage.getRecordLinkageInput(index).setResultProjection(this.resultProjections[index]);
  for (int index=0; index < this.inputs.size(); index++)   for (  JsonNode object : this.inputs.get(index))   sopremoTestPlan.getInput(index).add(object);
  return sopremoTestPlan;
}
