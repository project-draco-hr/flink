{
  final InputSplitProvider provider=getEnvironment().getInputSplitProvider();
  return new Iterator<InputSplit>(){
    private InputSplit nextSplit;
    private boolean exhausted;
    @Override public boolean hasNext(){
      if (exhausted) {
        return false;
      }
      if (nextSplit != null) {
        return true;
      }
      InputSplit split=provider.getNextInputSplit();
      if (split != null) {
        this.nextSplit=split;
        return true;
      }
 else {
        exhausted=true;
        return false;
      }
    }
    @Override public InputSplit next(){
      if (this.nextSplit == null && !hasNext()) {
        throw new NoSuchElementException();
      }
      final InputSplit tmp=this.nextSplit;
      this.nextSplit=null;
      return tmp;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
