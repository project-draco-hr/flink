{
  if (LOG.isDebugEnabled()) {
    LOG.debug(getLogString("Starting data source operator"));
  }
  ExecutionConfig executionConfig=new ExecutionConfig();
  try {
    ExecutionConfig c=(ExecutionConfig)InstantiationUtil.readObjectFromConfig(getJobConfiguration(),ExecutionConfig.CONFIG_KEY,this.getClass().getClassLoader());
    if (c != null) {
      executionConfig=c;
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Could not load ExecutionConfig from Job Configuration: " + e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException("Could not load ExecutionConfig from Job Configuration: " + e);
  }
  boolean objectReuseEnabled=executionConfig.isObjectReuseEnabled();
  if (LOG.isDebugEnabled()) {
    LOG.debug("DataSourceTask object reuse: " + (objectReuseEnabled ? "ENABLED" : "DISABLED") + ".");
  }
  final TypeSerializer<OT> serializer=this.serializerFactory.getSerializer();
  try {
    RegularPactTask.initOutputWriters(this.eventualOutputs);
    RegularPactTask.openChainedTasks(this.chainedTasks,this);
    final Iterator<InputSplit> splitIterator=getInputSplits();
    while (!this.taskCanceled && splitIterator.hasNext()) {
      final InputSplit split=splitIterator.next();
      if (LOG.isDebugEnabled()) {
        LOG.debug(getLogString("Opening input split " + split.toString()));
      }
      final InputFormat<OT,InputSplit> format=this.format;
      format.open(split);
      if (LOG.isDebugEnabled()) {
        LOG.debug(getLogString("Starting to read input from split " + split.toString()));
      }
      try {
        final Collector<OT> output=this.output;
        if (objectReuseEnabled) {
          OT reuse=serializer.createInstance();
          while (!this.taskCanceled && !format.reachedEnd()) {
            OT returned;
            if ((returned=format.nextRecord(reuse)) != null) {
              output.collect(returned);
            }
          }
        }
 else {
          while (!this.taskCanceled && !format.reachedEnd()) {
            OT returned;
            if ((returned=format.nextRecord(serializer.createInstance())) != null) {
              output.collect(returned);
            }
          }
        }
        if (LOG.isDebugEnabled() && !this.taskCanceled) {
          LOG.debug(getLogString("Closing input split " + split.toString()));
        }
      }
  finally {
        format.close();
      }
    }
    this.output.close();
    RegularPactTask.closeChainedTasks(this.chainedTasks,this);
    RegularPactTask.reportAndClearAccumulators(getEnvironment(),new HashMap<String,Accumulator<?,?>>(),chainedTasks);
  }
 catch (  Exception ex) {
    try {
      this.format.close();
    }
 catch (    Throwable t) {
    }
    RegularPactTask.cancelChainedTasks(this.chainedTasks);
    ex=ExceptionInChainedStubException.exceptionUnwrap(ex);
    if (ex instanceof CancelTaskException) {
      throw ex;
    }
 else     if (!this.taskCanceled) {
      RegularPactTask.logAndThrowException(ex,this);
    }
  }
  if (!this.taskCanceled) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(getLogString("Finished data source operator"));
    }
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(getLogString("Data source operator cancelled"));
    }
  }
}
