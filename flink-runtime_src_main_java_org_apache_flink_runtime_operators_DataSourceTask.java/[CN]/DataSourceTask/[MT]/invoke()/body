{
  initInputFormat();
  LOG.debug(getLogString("Start registering input and output"));
  try {
    initOutputs(getUserCodeClassLoader());
  }
 catch (  Exception ex) {
    throw new RuntimeException("The initialization of the DataSource's outputs caused an error: " + ex.getMessage(),ex);
  }
  LOG.debug(getLogString("Finished registering input and output"));
  LOG.debug(getLogString("Starting data source operator"));
  RuntimeContext ctx=createRuntimeContext();
  Counter splitCounter=ctx.getMetricGroup().counter("numSplitsProcessed");
  Counter numRecordsOut=ctx.getMetricGroup().counter("numRecordsOut");
  if (RichInputFormat.class.isAssignableFrom(this.format.getClass())) {
    ((RichInputFormat)this.format).setRuntimeContext(ctx);
    LOG.debug(getLogString("Rich Source detected. Initializing runtime context."));
    ((RichInputFormat)this.format).openInputFormat();
    LOG.debug(getLogString("Rich Source detected. Opening the InputFormat."));
  }
  ExecutionConfig executionConfig=getExecutionConfig();
  boolean objectReuseEnabled=executionConfig.isObjectReuseEnabled();
  LOG.debug("DataSourceTask object reuse: " + (objectReuseEnabled ? "ENABLED" : "DISABLED") + ".");
  final TypeSerializer<OT> serializer=this.serializerFactory.getSerializer();
  try {
    BatchTask.openChainedTasks(this.chainedTasks,this);
    final Iterator<InputSplit> splitIterator=getInputSplits();
    while (!this.taskCanceled && splitIterator.hasNext()) {
      final InputSplit split=splitIterator.next();
      LOG.debug(getLogString("Opening input split " + split.toString()));
      final InputFormat<OT,InputSplit> format=this.format;
      format.open(split);
      LOG.debug(getLogString("Starting to read input from split " + split.toString()));
      try {
        final Collector<OT> output=new CountingCollector<>(this.output,numRecordsOut);
        if (objectReuseEnabled) {
          OT reuse=serializer.createInstance();
          while (!this.taskCanceled && !format.reachedEnd()) {
            OT returned;
            if ((returned=format.nextRecord(reuse)) != null) {
              output.collect(returned);
            }
          }
        }
 else {
          while (!this.taskCanceled && !format.reachedEnd()) {
            OT returned;
            if ((returned=format.nextRecord(serializer.createInstance())) != null) {
              output.collect(returned);
            }
          }
        }
        if (LOG.isDebugEnabled() && !this.taskCanceled) {
          LOG.debug(getLogString("Closing input split " + split.toString()));
        }
      }
  finally {
        format.close();
      }
      splitCounter.inc();
    }
    this.output.close();
    BatchTask.closeChainedTasks(this.chainedTasks,this);
  }
 catch (  Exception ex) {
    try {
      this.format.close();
    }
 catch (    Throwable ignored) {
    }
    BatchTask.cancelChainedTasks(this.chainedTasks);
    ex=ExceptionInChainedStubException.exceptionUnwrap(ex);
    if (ex instanceof CancelTaskException) {
      throw ex;
    }
 else     if (!this.taskCanceled) {
      BatchTask.logAndThrowException(ex,this);
    }
  }
 finally {
    BatchTask.clearWriters(eventualOutputs);
    if (this.format != null && RichInputFormat.class.isAssignableFrom(this.format.getClass())) {
      ((RichInputFormat)this.format).closeInputFormat();
      LOG.debug(getLogString("Rich Source detected. Closing the InputFormat."));
    }
  }
  if (!this.taskCanceled) {
    LOG.debug(getLogString("Finished data source operator"));
  }
 else {
    LOG.debug(getLogString("Data source operator cancelled"));
  }
}
