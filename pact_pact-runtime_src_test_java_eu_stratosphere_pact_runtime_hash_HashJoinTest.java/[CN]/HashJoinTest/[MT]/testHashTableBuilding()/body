{
  Iterator<KeyValuePair<PactInteger,PactInteger>> buildInput=new RegularlyGeneratedInputGenerator(1000000,3,false);
  Iterator<KeyValuePair<PactInteger,PactInteger>> probeInput=new RegularlyGeneratedInputGenerator(1000000,10,false);
  MemoryManager memMan;
  List<MemorySegment> memSegments;
  try {
    memMan=new DefaultMemoryManager(32 * 1024 * 1024);
    memSegments=memMan.allocate(MEM_OWNER,28 * 1024 * 1024,896,4096 * 8);
  }
 catch (  MemoryAllocationException maex) {
    fail("Memory for the Join could not be provided.");
    return;
  }
  IOManager ioManager=new IOManager();
  HashJoin<PactInteger,PactInteger> join=new HashJoin<PactInteger,PactInteger>(buildInput,probeInput,memSegments,ioManager);
  join.buildInitialTable(buildInput);
  ioManager.shutdown();
  if (!ioManager.isProperlyShutDown()) {
    fail("I/O manager was not property shut down.");
  }
  if (!memMan.verifyEmpty()) {
    fail("Not all memory was properly released to the memory manager --> Memory Leak.");
  }
}
