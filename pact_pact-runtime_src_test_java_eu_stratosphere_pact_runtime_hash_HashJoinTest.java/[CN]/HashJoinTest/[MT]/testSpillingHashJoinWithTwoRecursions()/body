{
  final int REPEATED_VALUE_1=40559;
  final int REPEATED_VALUE_2=92882;
  final int REPEATED_VALUE_COUNT_BUILD=200000;
  final int REPEATED_VALUE_COUNT_PROBE=5;
  final int NUM_KEYS=1000000;
  final int BUILD_VALS_PER_KEY=3;
  final int PROBE_VALS_PER_KEY=10;
  ReadingIterator<PactRecord> build1=new RegularlyGeneratedInputGenerator(NUM_KEYS,BUILD_VALS_PER_KEY,false);
  ReadingIterator<PactRecord> build2=new ConstantsKeyValuePairsIterator(REPEATED_VALUE_1,17,REPEATED_VALUE_COUNT_BUILD);
  ReadingIterator<PactRecord> build3=new ConstantsKeyValuePairsIterator(REPEATED_VALUE_2,23,REPEATED_VALUE_COUNT_BUILD);
  List<ReadingIterator<PactRecord>> builds=new ArrayList<ReadingIterator<PactRecord>>();
  builds.add(build1);
  builds.add(build2);
  builds.add(build3);
  ReadingIterator<PactRecord> buildInput=new UnionIterator<PactRecord>(builds);
  ReadingIterator<PactRecord> probe1=new RegularlyGeneratedInputGenerator(NUM_KEYS,PROBE_VALS_PER_KEY,true);
  ReadingIterator<PactRecord> probe2=new ConstantsKeyValuePairsIterator(REPEATED_VALUE_1,17,5);
  ReadingIterator<PactRecord> probe3=new ConstantsKeyValuePairsIterator(REPEATED_VALUE_2,23,5);
  List<ReadingIterator<PactRecord>> probes=new ArrayList<ReadingIterator<PactRecord>>();
  probes.add(probe1);
  probes.add(probe2);
  probes.add(probe3);
  ReadingIterator<PactRecord> probeInput=new UnionIterator<PactRecord>(probes);
  MemoryManager memMan;
  List<MemorySegment> memSegments;
  try {
    memMan=new DefaultMemoryManager(32 * 1024 * 1024);
    memSegments=memMan.allocate(MEM_OWNER,28 * 1024 * 1024,896,32 * 1024);
  }
 catch (  MemoryAllocationException maex) {
    fail("Memory for the Join could not be provided.");
    return;
  }
  IOManager ioManager=new IOManager();
  HashMap<Integer,Long> map=new HashMap<Integer,Long>(NUM_KEYS);
  @SuppressWarnings("unchecked") final HashJoin join=new HashJoin(buildInput,probeInput,new int[]{0},new Class[]{PactInteger.class},memSegments,ioManager);
  join.open();
  final PactRecord record=new PactRecord();
  while (join.nextRecord()) {
    int numBuildValues=0;
    final PactRecord probeRec=join.getCurrentProbeRecord();
    int key=probeRec.getField(0,PactInteger.class).getValue();
    HashBucketIterator buildSide=join.getBuildSideIterator();
    if (buildSide.next(record)) {
      numBuildValues=1;
      Assert.assertEquals("Probe-side key was different than build-side key.",key,record.getField(0,PactInteger.class).getValue());
    }
 else {
      fail("No build side values found for a probe key.");
    }
    while (buildSide.next(record)) {
      numBuildValues++;
      Assert.assertEquals("Probe-side key was different than build-side key.",key,record.getField(0,PactInteger.class).getValue());
    }
    Long contained=map.get(key);
    if (contained == null) {
      contained=new Long(numBuildValues);
    }
 else {
      contained=new Long(contained.longValue() + numBuildValues);
    }
    map.put(key,contained);
  }
  join.close();
  Assert.assertEquals("Wrong number of keys",NUM_KEYS,map.size());
  for (  Map.Entry<Integer,Long> entry : map.entrySet()) {
    long val=entry.getValue();
    int key=entry.getKey();
    Assert.assertEquals("Wrong number of values in per-key cross product for key " + key,(key == REPEATED_VALUE_1 || key == REPEATED_VALUE_2) ? (PROBE_VALS_PER_KEY + REPEATED_VALUE_COUNT_PROBE) * (BUILD_VALS_PER_KEY + REPEATED_VALUE_COUNT_BUILD) : PROBE_VALS_PER_KEY * BUILD_VALS_PER_KEY,val);
  }
  memMan.release(memSegments);
  ioManager.shutdown();
  if (!ioManager.isProperlyShutDown()) {
    fail("I/O manager was not property shut down.");
  }
  if (!memMan.verifyEmpty()) {
    fail("Not all memory was properly released to the memory manager --> Memory Leak.");
  }
}
