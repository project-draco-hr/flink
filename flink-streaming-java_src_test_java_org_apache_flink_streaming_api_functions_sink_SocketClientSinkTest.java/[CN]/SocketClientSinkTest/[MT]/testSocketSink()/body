{
  final ServerSocket server=new ServerSocket(0);
  final int port=server.getLocalPort();
  final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  Thread sinkRunner=new Thread("Test sink runner"){
    @Override public void run(){
      try {
        SocketClientSink<String> simpleSink=new SocketClientSink<>(host,port,simpleSchema,0);
        simpleSink.open(new Configuration());
        simpleSink.invoke(TEST_MESSAGE + '\n');
        simpleSink.close();
      }
 catch (      Throwable t) {
        error.set(t);
      }
    }
  }
;
  sinkRunner.start();
  Socket sk=server.accept();
  BufferedReader rdr=new BufferedReader(new InputStreamReader(sk.getInputStream()));
  String value=rdr.readLine();
  sinkRunner.join();
  server.close();
  if (error.get() != null) {
    Throwable t=error.get();
    t.printStackTrace();
    fail("Error in spawned thread: " + t.getMessage());
  }
  assertEquals(TEST_MESSAGE,value);
}
