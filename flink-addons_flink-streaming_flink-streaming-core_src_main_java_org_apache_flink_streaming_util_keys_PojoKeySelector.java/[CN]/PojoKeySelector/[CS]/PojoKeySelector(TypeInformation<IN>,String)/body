{
  super(new int[removeDuplicates(fields).length]);
  if (!(type instanceof CompositeType<?>)) {
    throw new IllegalArgumentException("Key expressions are only supported on POJO types and Tuples. " + "A type is considered a POJO if all its fields are public, or have both getters and setters defined");
  }
  CompositeType<IN> cType=(CompositeType<IN>)type;
  String[] keyFields=removeDuplicates(fields);
  int numOfKeys=keyFields.length;
  List<FlatFieldDescriptor> fieldDescriptors=new ArrayList<FlatFieldDescriptor>();
  for (  String field : keyFields) {
    cType.getKey(field,0,fieldDescriptors);
  }
  int[] logicalKeyPositions=new int[numOfKeys];
  boolean[] orders=new boolean[numOfKeys];
  for (int i=0; i < numOfKeys; i++) {
    logicalKeyPositions[i]=fieldDescriptors.get(i).getPosition();
  }
  if (cType instanceof PojoTypeInfo) {
    comparator=(PojoComparator<IN>)cType.createComparator(logicalKeyPositions,orders,0);
  }
 else {
    throw new IllegalArgumentException("Key expressions are only supported on POJO types. " + "A type is considered a POJO if all its fields are public, or have both getters and setters defined");
  }
}
