{
  final List<BlockChannelAccess<?,?>> channelAccesses=new ArrayList<BlockChannelAccess<?,?>>(channelIDs.size());
  final MergeIterator<E> mergeIterator=getMergingIterator(channelIDs,readBuffers,channelAccesses);
  final Channel.ID mergedChannelID=this.ioManager.createChannel();
  registerChannelToBeRemovedAtShudown(mergedChannelID);
  final BlockChannelWriter writer=this.ioManager.createBlockChannelWriter(mergedChannelID,this.numWriteBuffersToCluster);
  registerOpenChannelToBeRemovedAtShudown(writer);
  final ChannelWriterOutputView output=new ChannelWriterOutputView(writer,writeBuffers,this.memManager.getPageSize());
  final TypeSerializer<E> serializer=this.serializer;
  E rec=serializer.createInstance();
  while ((rec=mergeIterator.next(rec)) != null) {
    serializer.serialize(rec,output);
  }
  output.close();
  final int numBlocksWritten=output.getBlockCount();
  unregisterOpenChannelToBeRemovedAtShudown(writer);
  for (int i=0; i < channelAccesses.size(); i++) {
    BlockChannelAccess<?,?> access=channelAccesses.get(i);
    access.closeAndDelete();
    unregisterOpenChannelToBeRemovedAtShudown(access);
  }
  return new ChannelWithBlockCount(mergedChannelID,numBlocksWritten);
}
