{
  this.keyFields=fields;
  this.numberOfKeys=fields.length;
  this.isTuple=isTuple;
  this.isArray=isArray;
  for (  int i : fields) {
    if (i < 0) {
      throw new RuntimeException("Grouping fields must be non-negative");
    }
  }
  if (numberOfKeys > 1) {
    if (!this.isTuple && !this.isArray) {
      throw new RuntimeException("For non-tuple types use single field 0 or KeyExctractor for grouping");
    }
 else {
      try {
        key=tupleClasses[fields.length - 1].newInstance();
      }
 catch (      Exception e) {
        throw new RuntimeException(e.getMessage());
      }
    }
  }
 else {
    if (!this.isTuple && !this.isArray) {
      if (fields[0] > 0) {
        throw new RuntimeException("For simple objects grouping only allowed on the first field");
      }
    }
    key=null;
  }
}
