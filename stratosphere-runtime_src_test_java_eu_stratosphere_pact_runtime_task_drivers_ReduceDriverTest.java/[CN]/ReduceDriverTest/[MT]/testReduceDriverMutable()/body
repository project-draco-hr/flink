{
  try {
{
      TestTaskContext<GenericReduce<Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>> context=new TestTaskContext<GenericReduce<Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>>();
      List<Tuple2<StringValue,IntValue>> data=DriverTestData.createReduceMutableData();
      TupleTypeInfo<Tuple2<StringValue,IntValue>> typeInfo=(TupleTypeInfo<Tuple2<StringValue,IntValue>>)TypeExtractor.getForObject(data.get(0));
      MutableObjectIterator<Tuple2<StringValue,IntValue>> input=new RegularToMutableObjectIterator<Tuple2<StringValue,IntValue>>(data.iterator(),typeInfo.createSerializer());
      TypeComparator<Tuple2<StringValue,IntValue>> comparator=typeInfo.createComparator(new int[]{0},new boolean[]{true});
      GatheringCollector<Tuple2<StringValue,IntValue>> result=new GatheringCollector<Tuple2<StringValue,IntValue>>(typeInfo.createSerializer());
      context.setDriverStrategy(DriverStrategy.SORTED_REDUCE);
      context.setInput1(input,typeInfo.createSerializer());
      context.setComparator1(comparator);
      context.setCollector(result);
      context.setUdf(new ConcatSumFirstMutableReducer());
      ReduceDriver<Tuple2<StringValue,IntValue>> driver=new ReduceDriver<Tuple2<StringValue,IntValue>>();
      driver.setup(context);
      driver.prepare();
      driver.run();
      Object[] res=result.getList().toArray();
      Object[] expected=DriverTestData.createReduceMutableDataGroupedResult().toArray();
      DriverTestData.compareTupleArrays(expected,res);
    }
{
      TestTaskContext<GenericReduce<Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>> context=new TestTaskContext<GenericReduce<Tuple2<StringValue,IntValue>>,Tuple2<StringValue,IntValue>>();
      List<Tuple2<StringValue,IntValue>> data=DriverTestData.createReduceMutableData();
      TupleTypeInfo<Tuple2<StringValue,IntValue>> typeInfo=(TupleTypeInfo<Tuple2<StringValue,IntValue>>)TypeExtractor.getForObject(data.get(0));
      MutableObjectIterator<Tuple2<StringValue,IntValue>> input=new RegularToMutableObjectIterator<Tuple2<StringValue,IntValue>>(data.iterator(),typeInfo.createSerializer());
      TypeComparator<Tuple2<StringValue,IntValue>> comparator=typeInfo.createComparator(new int[]{0},new boolean[]{true});
      GatheringCollector<Tuple2<StringValue,IntValue>> result=new GatheringCollector<Tuple2<StringValue,IntValue>>(typeInfo.createSerializer());
      context.setDriverStrategy(DriverStrategy.SORTED_REDUCE);
      context.setInput1(input,typeInfo.createSerializer());
      context.setComparator1(comparator);
      context.setCollector(result);
      context.setUdf(new ConcatSumSecondMutableReducer());
      ReduceDriver<Tuple2<StringValue,IntValue>> driver=new ReduceDriver<Tuple2<StringValue,IntValue>>();
      driver.setup(context);
      driver.prepare();
      driver.run();
      Object[] res=result.getList().toArray();
      Object[] expected=DriverTestData.createReduceMutableDataGroupedResult().toArray();
      DriverTestData.compareTupleArrays(expected,res);
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}
