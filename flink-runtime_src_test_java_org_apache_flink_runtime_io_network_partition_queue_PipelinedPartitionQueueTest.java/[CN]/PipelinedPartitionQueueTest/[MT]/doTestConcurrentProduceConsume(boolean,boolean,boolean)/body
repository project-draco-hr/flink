{
  final int bufferPoolSize=8;
  final int numBuffersToProduce=64;
  BufferPool producerBufferPool=networkBuffers.createBufferPool(bufferPoolSize,true);
  MockProducer producer=new MockProducer(queue,producerBufferPool,numBuffersToProduce,slowProducer);
  if (discardProduce) {
    producer.discardAfter(new Random().nextInt(numBuffersToProduce));
  }
  MockConsumer consumer=new MockConsumer(queue.getQueueIterator(Optional.<BufferProvider>absent()),slowConsumer);
  ExecutorService executorService=Executors.newCachedThreadPool();
  try {
    Future<Boolean> producerSuccess=executorService.submit(producer);
    Future<Boolean> consumerSuccess=executorService.submit(consumer);
    boolean success=false;
    try {
      success=producerSuccess.get();
      success&=consumerSuccess.get();
    }
 catch (    Throwable t) {
      t.printStackTrace();
      if (producer.getError() != null) {
        System.err.println("Producer error:");
        producer.getError().printStackTrace();
      }
      if (consumer.getError() != null) {
        System.err.println("Consumer error:");
        consumer.getError().printStackTrace();
      }
      fail("Unexpected failure during test: " + t.getMessage() + ". Producer error: "+ producer.getError()+ ", consumer error: "+ consumer.getError());
    }
    producerBufferPool.destroy();
    assertTrue(success);
  }
  finally {
    executorService.shutdownNow();
  }
}
