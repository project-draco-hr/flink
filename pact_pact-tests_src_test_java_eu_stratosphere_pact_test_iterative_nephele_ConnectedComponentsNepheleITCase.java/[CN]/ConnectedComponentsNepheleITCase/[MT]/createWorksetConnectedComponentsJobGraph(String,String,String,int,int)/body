{
  final int numSubTasksPerInstance=degreeOfParallelism;
  final TypeSerializerFactory<?> serializer=PactRecordSerializerFactory.get();
  @SuppressWarnings("unchecked") final TypeComparatorFactory<?> comparator=new PactRecordComparatorFactory(new int[]{0},new Class[]{PactLong.class},new boolean[]{true});
  final TypePairComparatorFactory<?,?> pairComparator=PactRecordPairComparatorFactory.get();
  final long MEM_PER_CONSUMER=10;
  final int ITERATION_ID=1;
  JobGraph jobGraph=new JobGraph("Connected Components");
  JobInputVertex verticesInput=JobGraphUtils.createInput(RecordInputFormat.class,verticesPath,"VerticesInput",jobGraph,degreeOfParallelism,numSubTasksPerInstance);
{
    TaskConfig verticesInputConfig=new TaskConfig(verticesInput.getConfiguration());
    Configuration verticesInputUserConfig=verticesInputConfig.getStubParameters();
    verticesInputConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    verticesInputConfig.setOutputSerializer(serializer);
    verticesInputUserConfig.setString(RecordInputFormat.RECORD_DELIMITER_PARAMETER,"\n");
    verticesInputUserConfig.setString(RecordInputFormat.FIELD_DELIMITER_PARAMETER," ");
    verticesInputUserConfig.setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 0,DecimalTextLongParser.class);
    verticesInputUserConfig.setInteger(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 0,0);
    verticesInputUserConfig.setInteger(RecordInputFormat.NUM_FIELDS_PARAMETER,1);
    TaskConfig chainedMapperConfig=new TaskConfig(new Configuration());
    chainedMapperConfig.setStubWrapper(new UserCodeClassWrapper<IdDuplicator>(IdDuplicator.class));
    chainedMapperConfig.setDriverStrategy(DriverStrategy.MAP);
    chainedMapperConfig.setInputLocalStrategy(0,LocalStrategy.NONE);
    chainedMapperConfig.setInputSerializer(serializer,0);
    chainedMapperConfig.setOutputSerializer(serializer);
    chainedMapperConfig.addOutputShipStrategy(ShipStrategyType.PARTITION_HASH);
    chainedMapperConfig.addOutputShipStrategy(ShipStrategyType.PARTITION_HASH);
    chainedMapperConfig.setOutputComparator(comparator,0);
    chainedMapperConfig.setOutputComparator(comparator,1);
    verticesInputConfig.addChainedTask(ChainedMapDriver.class,chainedMapperConfig,"ID Duplicator");
  }
  JobInputVertex edgeInput=JobGraphUtils.createInput(RecordInputFormat.class,edgesPath,"EdgesInput",jobGraph,degreeOfParallelism,numSubTasksPerInstance);
{
    TaskConfig edgesInputConfig=new TaskConfig(edgeInput.getConfiguration());
    edgesInputConfig.setOutputSerializer(serializer);
    edgesInputConfig.addOutputShipStrategy(ShipStrategyType.PARTITION_HASH);
    edgesInputConfig.setOutputComparator(comparator,0);
    Configuration edgesInputUserConfig=edgesInputConfig.getStubParameters();
    edgesInputUserConfig.setString(RecordInputFormat.RECORD_DELIMITER_PARAMETER,"\n");
    edgesInputUserConfig.setString(RecordInputFormat.FIELD_DELIMITER_PARAMETER," ");
    edgesInputUserConfig.setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 0,DecimalTextLongParser.class);
    edgesInputUserConfig.setInteger(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 0,0);
    edgesInputUserConfig.setClass(RecordInputFormat.FIELD_PARSER_PARAMETER_PREFIX + 1,DecimalTextLongParser.class);
    edgesInputUserConfig.setInteger(RecordInputFormat.TEXT_POSITION_PARAMETER_PREFIX + 1,1);
    edgesInputUserConfig.setInteger(RecordInputFormat.NUM_FIELDS_PARAMETER,2);
  }
  JobTaskVertex head=JobGraphUtils.createTask(IterationHeadPactTask.class,"Join With Edges (Iteration Head)",jobGraph,degreeOfParallelism,numSubTasksPerInstance);
{
    TaskConfig headConfig=new TaskConfig(head.getConfiguration());
    headConfig.setIterationId(ITERATION_ID);
    headConfig.addInputToGroup(0);
    headConfig.setInputSerializer(serializer,0);
    headConfig.setInputComparator(comparator,0);
    headConfig.setInputLocalStrategy(0,LocalStrategy.NONE);
    headConfig.setIterationHeadPartialSolutionOrWorksetInputIndex(0);
    headConfig.addInputToGroup(1);
    headConfig.setInputSerializer(serializer,1);
    headConfig.setInputComparator(comparator,1);
    headConfig.setInputLocalStrategy(1,LocalStrategy.NONE);
    headConfig.setInputCached(1,true);
    headConfig.setInputMaterializationMemory(1,MEM_PER_CONSUMER * JobGraphUtils.MEGABYTE);
    headConfig.addInputToGroup(2);
    headConfig.setInputSerializer(serializer,2);
    headConfig.setInputComparator(comparator,2);
    headConfig.setInputLocalStrategy(2,LocalStrategy.NONE);
    headConfig.setIterationHeadSolutionSetInputIndex(2);
    headConfig.setSolutionSetSerializer(serializer);
    headConfig.setSolutionSetComparator(comparator);
    headConfig.setSolutionSetProberSerializer(serializer);
    headConfig.setSolutionSetProberComparator(comparator);
    headConfig.setSolutionSetPairComparator(pairComparator);
    headConfig.setWorksetIteration();
    headConfig.setBackChannelMemory(MEM_PER_CONSUMER * JobGraphUtils.MEGABYTE);
    headConfig.setSolutionSetMemory(MEM_PER_CONSUMER * JobGraphUtils.MEGABYTE);
    headConfig.setOutputSerializer(serializer);
    headConfig.addOutputShipStrategy(ShipStrategyType.PARTITION_HASH);
    headConfig.setOutputComparator(comparator,0);
    TaskConfig headFinalOutConfig=new TaskConfig(new Configuration());
    headFinalOutConfig.setOutputSerializer(serializer);
    headFinalOutConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    headConfig.setIterationHeadFinalOutputConfig(headFinalOutConfig);
    headConfig.setIterationHeadIndexOfSyncOutput(2);
    headConfig.setDriver(BuildSecondCachedMatchDriver.class);
    headConfig.setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND);
    headConfig.setStubWrapper(new UserCodeClassWrapper<NeighborWithComponentIDJoin>(NeighborWithComponentIDJoin.class));
    headConfig.setDriverComparator(comparator,0);
    headConfig.setDriverComparator(comparator,1);
    headConfig.setDriverPairComparator(pairComparator);
    headConfig.setMemoryDriver(MEM_PER_CONSUMER * JobGraphUtils.MEGABYTE);
    headConfig.addIterationAggregator(WorksetEmptyConvergenceCriterion.AGGREGATOR_NAME,LongSumAggregator.class);
  }
  JobTaskVertex intermediate=JobGraphUtils.createTask(IterationIntermediatePactTask.class,"Find Min Component-ID",jobGraph,degreeOfParallelism,numSubTasksPerInstance);
  TaskConfig intermediateConfig=new TaskConfig(intermediate.getConfiguration());
{
    intermediateConfig.setIterationId(ITERATION_ID);
    intermediateConfig.addInputToGroup(0);
    intermediateConfig.setInputSerializer(serializer,0);
    intermediateConfig.setInputComparator(comparator,0);
    intermediateConfig.setInputLocalStrategy(0,LocalStrategy.SORT);
    intermediateConfig.setMemoryInput(0,MEM_PER_CONSUMER * JobGraphUtils.MEGABYTE);
    intermediateConfig.setFilehandlesInput(0,64);
    intermediateConfig.setSpillingThresholdInput(0,0.85f);
    intermediateConfig.setOutputSerializer(serializer);
    intermediateConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    intermediateConfig.setDriver(ReduceDriver.class);
    intermediateConfig.setDriverStrategy(DriverStrategy.SORTED_GROUP);
    intermediateConfig.setDriverComparator(comparator,0);
    intermediateConfig.setStubWrapper(new UserCodeClassWrapper<MinimumComponentIDReduce>(MinimumComponentIDReduce.class));
  }
  JobTaskVertex tail=JobGraphUtils.createTask(IterationTailPactTask.class,"IterationTail",jobGraph,degreeOfParallelism,numSubTasksPerInstance);
  TaskConfig tailConfig=new TaskConfig(tail.getConfiguration());
{
    tailConfig.setIterationId(ITERATION_ID);
    tailConfig.setWorksetIteration();
    tailConfig.setUpdateSolutionSet();
    tailConfig.setUpdateSolutionSetWithoutReprobe();
    tailConfig.addInputToGroup(0);
    tailConfig.setInputSerializer(serializer,0);
    tailConfig.addOutputShipStrategy(ShipStrategyType.FORWARD);
    tailConfig.setOutputSerializer(serializer);
    tailConfig.setDriver(SolutionSetSecondJoinDriver.class);
    tailConfig.setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND);
    tailConfig.setStubWrapper(new UserCodeClassWrapper<UpdateComponentIdMatch>(UpdateComponentIdMatch.class));
    tailConfig.setSolutionSetSerializer(serializer);
  }
  JobOutputVertex output=JobGraphUtils.createFileOutput(jobGraph,"Final Output",degreeOfParallelism,numSubTasksPerInstance);
{
    TaskConfig outputConfig=new TaskConfig(output.getConfiguration());
    outputConfig.addInputToGroup(0);
    outputConfig.setInputSerializer(serializer,0);
    outputConfig.setStubWrapper(new UserCodeClassWrapper<RecordOutputFormat>(RecordOutputFormat.class));
    outputConfig.setStubParameter(FileOutputFormat.FILE_PARAMETER_KEY,resultPath);
    Configuration outputUserConfig=outputConfig.getStubParameters();
    outputUserConfig.setString(RecordOutputFormat.RECORD_DELIMITER_PARAMETER,"\n");
    outputUserConfig.setString(RecordOutputFormat.FIELD_DELIMITER_PARAMETER," ");
    outputUserConfig.setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 0,PactLong.class);
    outputUserConfig.setInteger(RecordOutputFormat.RECORD_POSITION_PARAMETER_PREFIX + 0,0);
    outputUserConfig.setClass(RecordOutputFormat.FIELD_TYPE_PARAMETER_PREFIX + 1,PactLong.class);
    outputUserConfig.setInteger(RecordOutputFormat.RECORD_POSITION_PARAMETER_PREFIX + 1,1);
    outputUserConfig.setInteger(RecordOutputFormat.NUM_FIELDS_PARAMETER,2);
  }
  JobOutputVertex fakeTailOutput=JobGraphUtils.createFakeOutput(jobGraph,"FakeTailOutput",degreeOfParallelism,numSubTasksPerInstance);
  JobOutputVertex sync=JobGraphUtils.createSync(jobGraph,degreeOfParallelism);
  TaskConfig syncConfig=new TaskConfig(sync.getConfiguration());
  syncConfig.setNumberOfIterations(maxIterations);
  syncConfig.setIterationId(ITERATION_ID);
  syncConfig.addIterationAggregator(WorksetEmptyConvergenceCriterion.AGGREGATOR_NAME,LongSumAggregator.class);
  syncConfig.setConvergenceCriterion(WorksetEmptyConvergenceCriterion.AGGREGATOR_NAME,WorksetEmptyConvergenceCriterion.class);
  JobGraphUtils.connect(verticesInput,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(edgeInput,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(verticesInput,head,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  JobGraphUtils.connect(head,intermediate,ChannelType.NETWORK,DistributionPattern.BIPARTITE);
  intermediateConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,degreeOfParallelism);
  JobGraphUtils.connect(intermediate,tail,ChannelType.INMEMORY,DistributionPattern.POINTWISE);
  tailConfig.setGateIterativeWithNumberOfEventsUntilInterrupt(0,1);
  JobGraphUtils.connect(head,output,ChannelType.INMEMORY,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(tail,fakeTailOutput,ChannelType.INMEMORY,DistributionPattern.POINTWISE);
  JobGraphUtils.connect(head,sync,ChannelType.NETWORK,DistributionPattern.POINTWISE);
  verticesInput.setVertexToShareInstancesWith(head);
  edgeInput.setVertexToShareInstancesWith(head);
  intermediate.setVertexToShareInstancesWith(head);
  tail.setVertexToShareInstancesWith(head);
  output.setVertexToShareInstancesWith(head);
  sync.setVertexToShareInstancesWith(head);
  fakeTailOutput.setVertexToShareInstancesWith(tail);
  return jobGraph;
}
