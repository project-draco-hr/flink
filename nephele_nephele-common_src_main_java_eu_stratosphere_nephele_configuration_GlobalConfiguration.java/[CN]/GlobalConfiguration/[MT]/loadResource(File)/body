{
  final DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
  docBuilderFactory.setIgnoringComments(true);
  docBuilderFactory.setNamespaceAware(true);
  try {
    final DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();
    Document doc=null;
    Element root=null;
    doc=builder.parse(file);
    if (doc == null) {
      LOG.warn("Cannot load configuration: doc is null");
      return;
    }
    root=doc.getDocumentElement();
    if (root == null) {
      LOG.warn("Cannot load configuration: root is null");
      return;
    }
    if (!"configuration".equals(root.getNodeName())) {
      LOG.warn("Cannot load configuration: unknown element " + root.getNodeName());
      return;
    }
    final NodeList props=root.getChildNodes();
    int propNumber=-1;
synchronized (this.confData) {
      for (int i=0; i < props.getLength(); i++) {
        final Node propNode=props.item(i);
        String key=null;
        String value=null;
        if (propNode instanceof Text) {
          continue;
        }
        if (!(propNode instanceof Element)) {
          LOG.warn("Error while reading configuration: " + propNode.getNodeName() + " is not of type element");
          continue;
        }
        Element property=(Element)propNode;
        if (!"property".equals(property.getNodeName())) {
          LOG.warn("Error while reading configuration: unknown element " + property.getNodeName());
          continue;
        }
        propNumber++;
        final NodeList propChildren=property.getChildNodes();
        if (propChildren == null) {
          LOG.warn("Error while reading configuration: property has no children, skipping...");
          continue;
        }
        for (int j=0; j < propChildren.getLength(); j++) {
          final Node propChild=propChildren.item(j);
          if (propChild instanceof Element) {
            if ("key".equals(propChild.getNodeName())) {
              if (propChild.getChildNodes() != null && propChild.getChildNodes().getLength() == 1) {
                if (propChild.getChildNodes().item(0) instanceof Text) {
                  final Text t=(Text)propChild.getChildNodes().item(0);
                  key=t.getTextContent();
                }
              }
            }
            if ("value".equals(propChild.getNodeName())) {
              if (propChild.getChildNodes() != null && propChild.getChildNodes().getLength() == 1) {
                if (propChild.getChildNodes().item(0) instanceof Text) {
                  final Text t=(Text)propChild.getChildNodes().item(0);
                  value=t.getTextContent();
                }
              }
            }
          }
        }
        if (key != null && value != null) {
          LOG.debug("Loading configuration property: " + key + ", "+ value);
          this.confData.put(key,value);
        }
 else {
          LOG.warn("Error while reading configuration: Cannot read property " + propNumber);
          continue;
        }
      }
    }
  }
 catch (  ParserConfigurationException e) {
    LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e));
  }
catch (  IOException e) {
    LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e));
  }
catch (  SAXException e) {
    LOG.warn("Cannot load configuration: " + StringUtils.stringifyException(e));
  }
}
