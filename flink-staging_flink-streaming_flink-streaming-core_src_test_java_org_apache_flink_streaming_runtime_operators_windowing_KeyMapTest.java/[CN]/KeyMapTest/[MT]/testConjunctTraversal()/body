{
  try {
    final Random rootRnd=new Random(654685486325439L);
    final int numMaps=7;
    final int numKeys=1000000;
    @SuppressWarnings("unchecked") final KeyMap<Integer,Integer>[] maps=(KeyMap<Integer,Integer>[])new KeyMap<?,?>[numMaps];
    for (int i=0; i < numMaps; i++) {
      maps[i]=new KeyMap<>();
    }
    final double[] probabilities=new double[numMaps];
    final double[] probabilitiesTemp=new double[numMaps];
{
      probabilities[0]=0.5;
      double remainingProb=1.0 - probabilities[0];
      for (int i=1; i < numMaps - 1; i++) {
        remainingProb/=2;
        probabilities[i]=remainingProb;
      }
      probabilities[numMaps - 1]=remainingProb;
    }
    final long probSeed=rootRnd.nextLong();
    final long keySeed=rootRnd.nextLong();
    final Random probRnd=new Random(probSeed);
    final Random keyRnd=new Random(keySeed);
    final int maxStride=Integer.MAX_VALUE / numKeys;
    int totalNumElements=0;
    int nextKeyValue=1;
    for (int i=0; i < numKeys; i++) {
      int numCopies=(nextKeyValue % 3) + 1;
      System.arraycopy(probabilities,0,probabilitiesTemp,0,numMaps);
      double totalProb=1.0;
      for (int copy=0; copy < numCopies; copy++) {
        int pos=drawPosProportionally(probabilitiesTemp,totalProb,probRnd);
        totalProb-=probabilitiesTemp[pos];
        probabilitiesTemp[pos]=0.0;
        Integer boxed=nextKeyValue;
        Integer previous=maps[pos].put(boxed,boxed);
        assertNull("Test problem - test does not assign unique maps",previous);
      }
      totalNumElements+=numCopies;
      nextKeyValue+=keyRnd.nextInt(maxStride) + 1;
    }
    int numContained=0;
    for (    KeyMap<?,?> map : maps) {
      numContained+=map.size();
    }
    assertEquals(totalNumElements,numContained);
    keyRnd.setSeed(keySeed);
    numContained=0;
    nextKeyValue=1;
    for (int i=0; i < numKeys; i++) {
      int numCopiesExpected=(nextKeyValue % 3) + 1;
      int numCopiesContained=0;
      for (      KeyMap<Integer,Integer> map : maps) {
        Integer val=map.get(nextKeyValue);
        if (val != null) {
          assertEquals(nextKeyValue,val.intValue());
          numCopiesContained++;
        }
      }
      assertEquals(numCopiesExpected,numCopiesContained);
      numContained+=numCopiesContained;
      nextKeyValue+=keyRnd.nextInt(maxStride) + 1;
    }
    assertEquals(totalNumElements,numContained);
    final int[] keysStartedAndFinished={0,0};
    KeyMap.TraversalEvaluator<Integer,Integer> traversal=new KeyMap.TraversalEvaluator<Integer,Integer>(){
      private int key;
      private int valueCount;
      @Override public void startNewKey(      Integer key){
        this.key=key;
        this.valueCount=0;
        keysStartedAndFinished[0]++;
      }
      @Override public void nextValue(      Integer value){
        assertEquals(this.key,value.intValue());
        this.valueCount++;
      }
      @Override public void keyDone(){
        int expected=(key % 3) + 1;
        if (expected != valueCount) {
          fail("Wrong count for key " + key + " ; expected="+ expected+ " , count="+ valueCount);
        }
        keysStartedAndFinished[1]++;
      }
    }
;
    KeyMap.traverseMaps(shuffleArray(maps,rootRnd),traversal,17);
    assertEquals(numKeys,keysStartedAndFinished[0]);
    assertEquals(numKeys,keysStartedAndFinished[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
