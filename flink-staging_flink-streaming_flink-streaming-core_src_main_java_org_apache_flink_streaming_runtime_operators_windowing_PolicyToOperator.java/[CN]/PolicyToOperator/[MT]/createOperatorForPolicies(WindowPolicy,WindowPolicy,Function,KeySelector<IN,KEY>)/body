{
  if (window == null || function == null) {
    throw new NullPointerException();
  }
  if (window instanceof ProcessingTime && (slide == null || slide instanceof ProcessingTime)) {
    final long windowLength=((ProcessingTime)window).toMilliseconds();
    final long windowSlide=slide == null ? windowLength : ((ProcessingTime)slide).toMilliseconds();
    if (function instanceof ReduceFunction) {
      @SuppressWarnings("unchecked") ReduceFunction<IN> reducer=(ReduceFunction<IN>)function;
      @SuppressWarnings("unchecked") OneInputStreamOperator<IN,OUT> op=(OneInputStreamOperator<IN,OUT>)new AggregatingProcessingTimeWindowOperator<>(reducer,keySelector,windowLength,windowSlide);
      return op;
    }
 else     if (function instanceof KeyedWindowFunction) {
      @SuppressWarnings("unchecked") KeyedWindowFunction<IN,OUT,KEY,Window> wf=(KeyedWindowFunction<IN,OUT,KEY,Window>)function;
      return new AccumulatingProcessingTimeWindowOperator<>(wf,keySelector,windowLength,windowSlide);
    }
  }
  if (window instanceof EventTime && (slide == null || slide instanceof EventTime)) {
    final long windowLength=((EventTime)window).toMilliseconds();
    final long windowSlide=slide == null ? windowLength : ((EventTime)slide).toMilliseconds();
    WindowAssigner<? super IN,TimeWindow> assigner;
    if (windowSlide == windowLength) {
      assigner=TumblingTimeWindows.of(windowLength);
    }
 else {
      assigner=SlidingTimeWindows.of(windowLength,windowSlide);
    }
    WindowBufferFactory<IN,? extends WindowBuffer<IN>> windowBuffer;
    if (function instanceof ReduceFunction) {
      @SuppressWarnings("unchecked") ReduceFunction<IN> reducer=(ReduceFunction<IN>)SerializationUtils.clone(function);
      function=new ReduceWindowFunction<>(reducer);
      windowBuffer=new PreAggregatingHeapWindowBuffer.Factory<>(reducer);
    }
 else {
      windowBuffer=new HeapWindowBuffer.Factory<>();
    }
    @SuppressWarnings("unchecked") KeyedWindowFunction<IN,OUT,KEY,TimeWindow> windowFunction=(KeyedWindowFunction<IN,OUT,KEY,TimeWindow>)function;
    return new WindowOperator<>(assigner,keySelector,windowBuffer,windowFunction,WatermarkTrigger.create());
  }
  if (slide == null) {
    Trigger<? super IN,GlobalWindow> trigger=policyToTrigger(window);
    Trigger<? super IN,GlobalWindow> purgingTrigger=PurgingTrigger.of(trigger);
    WindowBufferFactory<IN,? extends WindowBuffer<IN>> windowBuffer;
    if (function instanceof ReduceFunction) {
      @SuppressWarnings("unchecked") ReduceFunction<IN> reducer=(ReduceFunction<IN>)SerializationUtils.clone(function);
      function=new ReduceWindowFunction<>(reducer);
      windowBuffer=new PreAggregatingHeapWindowBuffer.Factory<>(reducer);
    }
 else {
      windowBuffer=new HeapWindowBuffer.Factory<>();
    }
    if (!(function instanceof KeyedWindowFunction)) {
      throw new IllegalStateException("Windowing function is not of type EvaluateKeyedWindowFunction.");
    }
    @SuppressWarnings("unchecked") KeyedWindowFunction<IN,OUT,KEY,GlobalWindow> windowFunction=(KeyedWindowFunction<IN,OUT,KEY,GlobalWindow>)function;
    return new WindowOperator<>(GlobalWindows.<IN>create(),keySelector,windowBuffer,windowFunction,purgingTrigger);
  }
  Trigger<? super IN,GlobalWindow> trigger=policyToTrigger(slide);
  Evictor<? super IN,GlobalWindow> evictor=policyToEvictor(window);
  WindowBufferFactory<IN,? extends EvictingWindowBuffer<IN>> windowBuffer=new HeapWindowBuffer.Factory<>();
  if (function instanceof ReduceFunction) {
    @SuppressWarnings("unchecked") ReduceFunction<IN> reducer=(ReduceFunction<IN>)SerializationUtils.clone(function);
    function=new ReduceWindowFunction<>(reducer);
  }
  if (!(function instanceof KeyedWindowFunction)) {
    throw new IllegalStateException("Windowing function is not of type EvaluateKeyedWindowFunction.");
  }
  @SuppressWarnings("unchecked") KeyedWindowFunction<IN,OUT,KEY,GlobalWindow> windowFunction=(KeyedWindowFunction<IN,OUT,KEY,GlobalWindow>)function;
  EvictingWindowOperator<KEY,IN,OUT,GlobalWindow> op=new EvictingWindowOperator<>(GlobalWindows.<IN>create(),keySelector,windowBuffer,windowFunction,trigger,evictor);
  if (window instanceof ProcessingTime) {
    op.enableSetProcessingTime(true);
  }
  return op;
}
