{
  if (this.jobID == null) {
    throw new IOException("this.jobID is null");
  }
  this.jobID.write(out);
  StringRecord.writeString(out,this.taskName);
  final String[] requiredJarFiles=LibraryCacheManager.getRequiredJarFiles(this.jobID);
  out.writeInt(requiredJarFiles.length);
  for (int i=0; i < requiredJarFiles.length; i++) {
    StringRecord.writeString(out,requiredJarFiles[i]);
  }
  if (this.invokableClass == null) {
    throw new IOException("this.invokableClass is null");
  }
  StringRecord.writeString(out,this.invokableClass.getName());
  final int numberOfOutputGates=this.outputGates.size();
  out.writeInt(numberOfOutputGates);
  for (int i=0; i < numberOfOutputGates; ++i) {
    final OutputGate<? extends Record> outputGate=this.outputGates.get(i);
    outputGate.getGateID().write(out);
  }
  final int numberOfInputGates=this.inputGates.size();
  out.writeInt(numberOfInputGates);
  for (int i=0; i < numberOfInputGates; i++) {
    final InputGate<? extends Record> inputGate=this.inputGates.get(i);
    inputGate.getGateID().write(out);
  }
  this.taskConfiguration.write(out);
  this.jobConfiguration.write(out);
  out.writeInt(this.currentNumberOfSubtasks);
  out.writeInt(this.indexInSubtaskGroup);
  for (int i=0; i < numberOfOutputGates; ++i) {
    final OutputGate<? extends Record> outputGate=this.outputGates.get(i);
    final int numberOfOutputChannels=outputGate.getNumberOfOutputChannels();
    out.writeInt(numberOfOutputChannels);
    for (int j=0; j < numberOfOutputChannels; ++j) {
      final AbstractOutputChannel<? extends Record> outputChannel=outputGate.getOutputChannel(j);
      outputChannel.getID().write(out);
      outputChannel.getConnectedChannelID().write(out);
      EnumUtils.writeEnum(out,outputChannel.getType());
      EnumUtils.writeEnum(out,outputChannel.getCompressionLevel());
    }
  }
  for (int i=0; i < numberOfInputGates; ++i) {
    final InputGate<? extends Record> inputGate=this.inputGates.get(i);
    final int numberOfInputChannels=inputGate.getNumberOfInputChannels();
    out.writeInt(numberOfInputChannels);
    for (int j=0; j < numberOfInputChannels; ++j) {
      final AbstractInputChannel<? extends Record> inputChannel=inputGate.getInputChannel(j);
      inputChannel.getID().write(out);
      inputChannel.getConnectedChannelID().write(out);
      EnumUtils.writeEnum(out,inputChannel.getType());
      EnumUtils.writeEnum(out,inputChannel.getCompressionLevel());
    }
  }
}
