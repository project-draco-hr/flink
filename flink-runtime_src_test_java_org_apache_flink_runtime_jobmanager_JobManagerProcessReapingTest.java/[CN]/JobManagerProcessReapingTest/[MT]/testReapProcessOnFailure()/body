{
  Process jmProcess=null;
  ActorSystem localSystem=null;
  final StringWriter processOutput=new StringWriter();
  try {
    String javaCommand=getJavaCommandPath();
    if (javaCommand == null) {
      System.out.println("---- Skipping JobManagerProcessReapingTest : Could not find java executable ----");
      return;
    }
    File tempLogFile=File.createTempFile("testlogconfig","properties");
    tempLogFile.deleteOnExit();
    CommonTestUtils.printLog4jDebugConfig(tempLogFile);
    int jobManagerPort=NetUtils.getAvailablePort();
    String[] command=new String[]{javaCommand,"-Dlog.level=DEBUG","-Dlog4j.configuration=file:" + tempLogFile.getAbsolutePath(),"-Xms256m","-Xmx256m","-classpath",getCurrentClasspath(),JobManagerTestEntryPoint.class.getName(),String.valueOf(jobManagerPort)};
    ProcessBuilder bld=new ProcessBuilder(command);
    jmProcess=bld.start();
    new PipeForwarder(jmProcess.getErrorStream(),processOutput);
    Tuple2<String,Object> localAddress=new Tuple2<String,Object>("localhost",0);
    localSystem=AkkaUtils.createActorSystem(new Configuration(),new Some<Tuple2<String,Object>>(localAddress));
    ActorRef jobManagerRef=null;
    Throwable lastError=null;
    for (int i=0; i < 40; i++) {
      try {
        jobManagerRef=JobManager.getJobManagerActorRef(new InetSocketAddress("localhost",jobManagerPort),localSystem,new FiniteDuration(25,TimeUnit.SECONDS));
        break;
      }
 catch (      Throwable t) {
        lastError=t;
      }
      Thread.sleep(500);
    }
    assertTrue("JobManager process died",isProcessAlive(jmProcess));
    if (jobManagerRef == null) {
      if (lastError != null) {
        lastError.printStackTrace();
      }
      fail("JobManager process did not launch the JobManager properly. Failed to look up JobManager actor at" + " localhost:" + jobManagerPort);
    }
    jobManagerRef.tell(PoisonPill.getInstance(),ActorRef.noSender());
{
      long now=System.currentTimeMillis();
      long deadline=now + 5000;
      while (now < deadline && isProcessAlive(jmProcess)) {
        Thread.sleep(100);
        now=System.currentTimeMillis();
      }
    }
    assertFalse("JobManager process did not terminate upon actor death",isProcessAlive(jmProcess));
    int returnCode=jmProcess.exitValue();
    assertEquals("JobManager died, but not because of the process reaper",JobManager.RUNTIME_FAILURE_RETURN_CODE(),returnCode);
  }
 catch (  Exception e) {
    e.printStackTrace();
    printProcessLog(processOutput.toString());
    fail(e.getMessage());
  }
catch (  Error e) {
    e.printStackTrace();
    printProcessLog(processOutput.toString());
    throw e;
  }
 finally {
    if (jmProcess != null) {
      jmProcess.destroy();
    }
    if (localSystem != null) {
      localSystem.shutdown();
    }
  }
}
