{
  LOG.info("Running Storm topology on FlinkLocalCluster");
  boolean submitBlocking=false;
  if (conf != null) {
    topology.getExecutionEnvironment().getConfig().setGlobalJobParameters(new StormConfig(conf));
    Object blockingFlag=conf.get(SUBMIT_BLOCKING);
    if (blockingFlag != null && blockingFlag instanceof Boolean) {
      submitBlocking=((Boolean)blockingFlag).booleanValue();
    }
  }
  StreamGraph streamGraph=topology.getExecutionEnvironment().getStreamGraph();
  streamGraph.setJobName(topologyName);
  JobGraph jobGraph=streamGraph.getJobGraph();
  if (flink == null) {
    Configuration configuration=new Configuration();
    configuration.addAll(jobGraph.getJobConfiguration());
    configuration.setLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,-1L);
    configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,jobGraph.getMaximumParallelism());
    flink=new LocalFlinkMiniCluster(configuration,true);
    this.flink.start();
  }
  if (submitBlocking) {
    this.flink.submitJobAndWait(jobGraph,false);
  }
 else {
    this.flink.submitJobDetached(jobGraph);
  }
}
