{
  LogUtils.initializeDefaultConsoleLogger(Level.OFF,Level.OFF);
  LocalStreamEnvironment env=StreamExecutionEnvironment.createLocalEnvironment(3);
  fillFromCollectionSet();
  @SuppressWarnings("unused") DataStream<Integer> dataStream=env.fromCollection(fromCollectionSet).map(new MyMap()).addSink(new MySink());
  fillExpectedList();
  fillFromCollectionSet();
  @SuppressWarnings("unused") DataStream<Integer> dataStream1=env.fromCollection(fromCollectionSet).broadcast().map(new MyMap()).addSink(new MyBroadcastSink());
  fillFromCollectionSet();
  @SuppressWarnings("unused") DataStream<Integer> dataStream2=env.fromCollection(fromCollectionSet).map(new MyMap()).setParallelism(3).addSink(new MyShufflesSink());
  fillFromCollectionFieldsSet();
  @SuppressWarnings("unused") DataStream<Integer> dataStream3=env.fromCollection(fromCollectionFields).partitionBy(0).map(new MyFieldsMap()).addSink(new MyFieldsSink());
  fillFromCollectionDiffFieldsSet();
  @SuppressWarnings("unused") DataStream<Integer> dataStream4=env.fromCollection(fromCollectionDiffFieldsSet).partitionBy(0).map(new MyDiffFieldsMap()).addSink(new MyDiffFieldsSink());
  DataStream<Integer> source1=env.addSource(new MySource1(),1);
  @SuppressWarnings({"unused","unchecked"}) DataStream<Integer> source2=env.addSource(new MySource2(),1).connectWith(source1).partitionBy(0).map(new MySingleJoinMap()).setParallelism(1).addSink(new JoinSink());
  fillSingleJoinSet();
  DataStream<Integer> source3=env.addSource(new MySource1(),1);
  DataStream<Integer> source4=env.addSource(new MySource2(),1);
  @SuppressWarnings({"unused","unchecked"}) DataStream<Integer> source5=env.addSource(new MySource3(),1).connectWith(source3,source4).partitionBy(0).map(new MyMultipleJoinMap()).setParallelism(1).addSink(new JoinSink());
  env.executeTest(MEMORYSIZE);
  fillMultipleJoinSet();
  assertTrue(expected.equals(result));
  assertEquals(30,broadcastResult);
  assertEquals(10,shuffleResult);
  assertTrue(allInOne);
  assertTrue(threeInAll);
  assertEquals(9,diffFieldsResult);
  assertEquals(singleJoinSetExpected,singleJoinSetResult);
  assertEquals(multipleJoinSetExpected,multipleJoinSetResult);
}
