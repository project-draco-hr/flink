{
  if (args.length != 7) {
    System.out.println("KMeansLauncher <jarFile> <dataPath> <clusterPath> <resultPath> <numIterations> <DegreeOfParallelism> <hostName>");
    System.exit(1);
  }
  String jarFilePath=args[0];
  String dataPath=args[1];
  String initClusterPath=args[2];
  String resultPath=args[3];
  int numIterations=Integer.parseInt(args[4]);
  String dop=args[5];
  String hostName=args[6];
  Path kMeansJarFile=new Path(jarFilePath);
  String clusterPath=initClusterPath;
  for (int i=0; i < numIterations; i++) {
    KMeansIteration kmi=new KMeansIteration();
    Plan plan=kmi.getPlan(dop,dataPath,clusterPath,resultPath);
    PactCompiler pc=new PactCompiler();
    OptimizedPlan op=pc.compile(plan);
    JobGraphGenerator jgg=new JobGraphGenerator();
    JobGraph jobGraph=jgg.compileJobGraph(op);
    jobGraph.addJar(kMeansJarFile);
    Configuration configuration=jobGraph.getJobConfiguration();
    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY,hostName);
    configuration.setBoolean(ConfigConstants.JOBCLIENT_SHUTDOWN_TERMINATEJOB_KEY,false);
    JobClient jobClient;
    try {
      jobClient=new JobClient(jobGraph,configuration);
      jobClient.submitJobAndWait();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    JobExecutionException e) {
      e.printStackTrace();
    }
    clusterPath=resultPath;
  }
}
