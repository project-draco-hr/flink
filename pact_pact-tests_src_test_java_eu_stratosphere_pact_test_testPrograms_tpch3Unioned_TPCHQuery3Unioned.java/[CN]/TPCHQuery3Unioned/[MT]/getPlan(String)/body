{
  final int numSubtasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String orders1Path=(args.length > 1 ? args[1] : "");
  String orders2Path=(args.length > 2 ? args[2] : "");
  String partJoin1Path=(args.length > 3 ? args[3] : "");
  String partJoin2Path=(args.length > 4 ? args[4] : "");
  String lineitemsPath=(args.length > 5 ? args[5] : "");
  String output=(args.length > 6 ? args[6] : "");
  FileDataSource orders1=new FileDataSource(new RecordInputFormat(),orders1Path,"Orders 1");
  RecordInputFormat.configureRecordFormat(orders1).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,7).field(VarLengthStringParser.class,2,2).field(VarLengthStringParser.class,4,10).field(VarLengthStringParser.class,5,8);
  FileDataSource orders2=new FileDataSource(new RecordInputFormat(),orders2Path,"Orders 2");
  RecordInputFormat.configureRecordFormat(orders2).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,7).field(VarLengthStringParser.class,2,2).field(VarLengthStringParser.class,4,10).field(VarLengthStringParser.class,5,8);
  FileDataSource lineitems=new FileDataSource(new RecordInputFormat(),lineitemsPath,"LineItems");
  RecordInputFormat.configureRecordFormat(lineitems).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextDoubleParser.class,5);
  MapContract filterO1=MapContract.builder(new FilterO()).name("FilterO").input(orders1).build();
  filterO1.setParameter(TPCHQuery3.YEAR_FILTER,1993);
  filterO1.setParameter(TPCHQuery3.PRIO_FILTER,"5");
  filterO1.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.05f);
  MapContract filterO2=MapContract.builder(new FilterO()).name("FilterO").input(orders2).build();
  filterO2.setParameter(TPCHQuery3.YEAR_FILTER,1993);
  filterO2.setParameter(TPCHQuery3.PRIO_FILTER,"5");
  filterO2.getCompilerHints().setAvgRecordsEmittedPerStubCall(1.0f);
  MatchContract joinLiO=MatchContract.builder(new JoinLiO(),PactLong.class,0,0).input1(filterO2,filterO1).input2(lineitems).name("JoinLiO").build();
  FileDataSource partJoin1=new FileDataSource(new RecordInputFormat(),partJoin1Path,"Part Join 1");
  RecordInputFormat.configureRecordFormat(partJoin1).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,1).field(DecimalTextDoubleParser.class,2);
  FileDataSource partJoin2=new FileDataSource(new RecordInputFormat(),partJoin2Path,"Part Join 2");
  RecordInputFormat.configureRecordFormat(partJoin2).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,1).field(DecimalTextDoubleParser.class,2);
  ReduceContract aggLiO=ReduceContract.builder(new AggLiO()).keyField(PactLong.class,0).keyField(PactString.class,1).input(joinLiO,partJoin2,partJoin1).name("AggLio").build();
  FileDataSink result=new FileDataSink(new RecordOutputFormat(),output,aggLiO,"Output");
  RecordOutputFormat.configureRecordFormat(result).recordDelimiter('\n').fieldDelimiter('|').lenient(true).field(PactLong.class,0).field(PactInteger.class,1).field(PactDouble.class,2);
  Plan plan=new Plan(result,"TPCH Q3 Unioned");
  plan.setDefaultParallelism(numSubtasks);
  return plan;
}
