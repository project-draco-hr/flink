{
  int noSubtasks=(args.length > 0 ? Integer.parseInt(args[0]) : 1);
  String orders1Path=(args.length > 1 ? args[1] : "");
  String orders2Path=(args.length > 2 ? args[2] : "");
  String partJoin1Path=(args.length > 3 ? args[3] : "");
  String partJoin2Path=(args.length > 4 ? args[4] : "");
  String lineitemsPath=(args.length > 5 ? args[5] : "");
  String output=(args.length > 6 ? args[6] : "");
  FileDataSource orders1=new FileDataSource(RecordInputFormat.class,orders1Path,"Orders 1");
  orders1.setDegreeOfParallelism(noSubtasks);
  RecordInputFormat.configureRecordFormat(orders1).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,7).field(VarLengthStringParser.class,2).field(VarLengthStringParser.class,4).field(VarLengthStringParser.class,5);
  orders1.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(0),1);
  orders1.getCompilerHints().setAvgBytesPerRecord(16);
  orders1.getCompilerHints().addUniqueField(0);
  FileDataSource orders2=new FileDataSource(RecordInputFormat.class,orders2Path,"Orders 2");
  orders2.setDegreeOfParallelism(noSubtasks);
  RecordInputFormat.configureRecordFormat(orders2).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,7).field(VarLengthStringParser.class,2).field(VarLengthStringParser.class,4).field(VarLengthStringParser.class,5);
  orders2.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(0),1);
  orders2.getCompilerHints().setAvgBytesPerRecord(16);
  orders2.getCompilerHints().addUniqueField(0);
  FileDataSource lineitems=new FileDataSource(RecordInputFormat.class,lineitemsPath,"LineItems");
  lineitems.setDegreeOfParallelism(noSubtasks);
  RecordInputFormat.configureRecordFormat(lineitems).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextDoubleParser.class,5);
  lineitems.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(0),4);
  lineitems.getCompilerHints().setAvgBytesPerRecord(20);
  MapContract filterO1=MapContract.builder(FilterO.class).name("FilterO").build();
  filterO1.addInput(orders1);
  filterO1.setDegreeOfParallelism(noSubtasks);
  filterO1.setParameter(YEAR_FILTER,1993);
  filterO1.setParameter(PRIO_FILTER,"5");
  filterO1.getCompilerHints().setAvgBytesPerRecord(16);
  filterO1.getCompilerHints().setAvgRecordsEmittedPerStubCall(0.05f);
  filterO1.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(0),1);
  MapContract filterO2=MapContract.builder(FilterO.class).name("FilterO").build();
  filterO2.addInput(orders2);
  filterO2.setDegreeOfParallelism(noSubtasks);
  filterO2.setParameter(YEAR_FILTER,1993);
  filterO2.setParameter(PRIO_FILTER,"5");
  filterO2.getCompilerHints().setAvgBytesPerRecord(16);
  filterO2.getCompilerHints().setAvgRecordsEmittedPerStubCall(1.0f);
  filterO2.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(0),1);
  MatchContract joinLiO=MatchContract.builder(JoinLiO.class,PactLong.class,0,0).input1(filterO2).input2(lineitems).name("JoinLiO").build();
  joinLiO.addFirstInput(filterO1);
  joinLiO.setDegreeOfParallelism(noSubtasks);
  joinLiO.getCompilerHints().setAvgBytesPerRecord(24);
  joinLiO.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(new int[]{0,1}),4);
  FileDataSource partJoin1=new FileDataSource(RecordInputFormat.class,partJoin1Path,"Part Join 1");
  partJoin1.setDegreeOfParallelism(noSubtasks);
  RecordInputFormat.configureRecordFormat(partJoin1).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,1).field(DecimalTextDoubleParser.class,2);
  FileDataSource partJoin2=new FileDataSource(RecordInputFormat.class,partJoin2Path,"Part Join 2");
  partJoin2.setDegreeOfParallelism(noSubtasks);
  RecordInputFormat.configureRecordFormat(partJoin2).recordDelimiter('\n').fieldDelimiter('|').field(DecimalTextLongParser.class,0).field(DecimalTextIntParser.class,1).field(DecimalTextDoubleParser.class,2);
  ReduceContract aggLiO=ReduceContract.builder(AggLiO.class).keyField(PactLong.class,0).keyField(PactString.class,1).input(joinLiO).name("AggLio").build();
  aggLiO.addInput(partJoin2);
  aggLiO.addInput(partJoin1);
  aggLiO.setDegreeOfParallelism(noSubtasks);
  aggLiO.getCompilerHints().setAvgBytesPerRecord(30);
  aggLiO.getCompilerHints().setAvgRecordsEmittedPerStubCall(1.0f);
  aggLiO.getCompilerHints().setAvgNumRecordsPerDistinctFields(new FieldSet(new int[]{0,1}),1);
  FileDataSink result=new FileDataSink(RecordOutputFormat.class,output,aggLiO,"Output");
  result.setDegreeOfParallelism(noSubtasks);
  RecordOutputFormat.configureRecordFormat(result).recordDelimiter('\n').fieldDelimiter('|').lenient(true).field(PactLong.class,0).field(PactInteger.class,1).field(PactDouble.class,2);
  Plan plan=new Plan(result,"TPCH Q3 Unioned");
  plan.setDefaultParallelism(noSubtasks);
  return plan;
}
