{
  try {
    final KeyMap<Integer,Integer> map=new KeyMap<>();
    final int numElements=1000000;
    for (int i=0; i < numElements; i++) {
      Integer put=map.put(i,2 * i + 1);
      assertNull(put);
    }
    for (int i=0; i < numElements; i+=3) {
      Integer put=map.put(i,2 * i);
      assertNotNull(put);
      assertEquals(2 * i + 1,put.intValue());
    }
    for (int i=0; i < numElements; i++) {
      int expected=(i % 3 == 0) ? (2 * i) : (2 * i + 1);
      assertEquals(expected,map.get(i).intValue());
    }
    assertEquals(numElements,map.size());
    assertEquals(numElements,map.traverseAndCountElements());
    assertEquals(1 << 21,map.getCurrentTableCapacity());
    assertTrue(map.getLongestChainLength() <= 7);
    BitSet bitset=new BitSet();
    int numContained=0;
    for (    KeyMap.Entry<Integer,Integer> entry : map) {
      numContained++;
      int key=entry.getKey();
      int expected=key % 3 == 0 ? (2 * key) : (2 * key + 1);
      assertEquals(expected,entry.getValue().intValue());
      assertFalse(bitset.get(key));
      bitset.set(key);
    }
    assertEquals(numElements,numContained);
    assertEquals(numElements,bitset.cardinality());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
