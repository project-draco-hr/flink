{
  final TwoInputStreamTask<String,Integer,String> coMapTask=new TwoInputStreamTask<String,Integer,String>();
  final TwoInputStreamTaskTestHarness<String,Integer,String> testHarness=new TwoInputStreamTaskTestHarness<String,Integer,String>(coMapTask,2,2,new int[]{1,2},BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  StreamConfig streamConfig=testHarness.getStreamConfig();
  CoStreamMap<String,Integer,String> coMapOperator=new CoStreamMap<String,Integer,String>(new IdentityMap());
  streamConfig.setStreamOperator(coMapOperator);
  Queue expectedOutput=new ConcurrentLinkedQueue();
  long initialTime=0L;
  testHarness.invoke();
  testHarness.processEvent(new CheckpointBarrier(0,0),0,0);
  testHarness.processElement(new StreamRecord<String>("Hello-0-0",initialTime),0,0);
  testHarness.processElement(new StreamRecord<String>("Ciao-0-0",initialTime),0,0);
  testHarness.processElement(new StreamRecord<Integer>(42,initialTime),1,1);
  testHarness.processElement(new StreamRecord<Integer>(1337,initialTime),1,1);
  expectedOutput.add(new StreamRecord<String>("42",initialTime));
  expectedOutput.add(new StreamRecord<String>("1337",initialTime));
  testHarness.waitForInputProcessing();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processEvent(new CheckpointBarrier(1,1),0,0);
  testHarness.processEvent(new CheckpointBarrier(1,1),0,1);
  testHarness.processEvent(new CheckpointBarrier(1,1),1,0);
  testHarness.processEvent(new CheckpointBarrier(1,1),1,1);
  expectedOutput.add(new StreamRecord<String>("Hello-0-0",initialTime));
  expectedOutput.add(new StreamRecord<String>("Ciao-0-0",initialTime));
  expectedOutput.add(new CheckpointBarrier(1,1));
  testHarness.waitForInputProcessing();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processEvent(new CheckpointBarrier(0,0),0,1);
  testHarness.processEvent(new CheckpointBarrier(0,0),1,0);
  testHarness.processEvent(new CheckpointBarrier(0,0),1,1);
  testHarness.waitForInputProcessing();
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
}
