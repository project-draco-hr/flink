{
  Iterator<KeyValuePair<K,V>> it=new Iterator<KeyValuePair<K,V>>(){
    int pairIdx=0;
    @Override public boolean hasNext(){
      if (pairIdx < kvindex) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override public KeyValuePair<K,V> next(){
      try {
        keyDeserializer.open(memory.inputView);
        valDeserializer.open(memory.inputView);
        int index=kvoffsets[pairIdx];
        int keyStart=kvindices[index + KEYSTART];
        int valStart=kvindices[index + VALSTART];
        K key=keySerialization.newInstance();
        V val=valSerialization.newInstance();
        memory.inputView.setPosition(keyStart);
        keyDeserializer.deserialize(key);
        memory.inputView.setPosition(valStart);
        valDeserializer.deserialize(val);
        pairIdx++;
        return new KeyValuePair<K,V>(key,val);
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
    @Override public void remove(){
    }
  }
;
  return it;
}
