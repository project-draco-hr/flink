{
  this.noPoints=noPoints;
  this.noClusters=noClusters;
  this.noDims=noDims;
  this.dataPoints=new double[noPoints][noDims];
  this.centers=new double[noClusters][noDims];
  this.newCenters=new double[noClusters][noDims];
  for (int i=0; i < noPoints; i++) {
    for (int j=0; j < noDims; j++) {
      dataPoints[i][j]=rand.nextDouble() * 100;
    }
  }
  for (int i=0; i < noClusters; i++) {
    for (int j=0; j < noDims; j++) {
      centers[i][j]=rand.nextDouble() * 100;
    }
  }
  int[] dataPointCnt=new int[noClusters];
  for (int i=0; i < noPoints; i++) {
    double minDist=Double.MAX_VALUE;
    int nearestCluster=0;
    for (int j=0; j < noClusters; j++) {
      double dist=computeDistance(dataPoints[i],centers[j]);
      if (dist < minDist) {
        minDist=dist;
        nearestCluster=j;
      }
    }
    for (int k=0; k < noDims; k++) {
      newCenters[nearestCluster][k]+=dataPoints[i][k];
    }
    dataPointCnt[nearestCluster]++;
  }
  for (int i=0; i < noClusters; i++) {
    for (int j=0; j < noDims; j++) {
      newCenters[i][j]/=(dataPointCnt[i] != 0 ? dataPointCnt[i] : 1);
    }
  }
}
