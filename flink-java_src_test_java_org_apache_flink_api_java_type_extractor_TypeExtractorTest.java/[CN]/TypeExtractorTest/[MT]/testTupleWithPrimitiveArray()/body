{
  RichMapFunction<Integer,Tuple9<int[],double[],long[],byte[],char[],float[],short[],boolean[],String[]>> function=new RichMapFunction<Integer,Tuple9<int[],double[],long[],byte[],char[],float[],short[],boolean[],String[]>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple9<int[],double[],long[],byte[],char[],float[],short[],boolean[],String[]> map(    Integer value) throws Exception {
      return null;
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getMapReturnTypes(function,BasicTypeInfo.INT_TYPE_INFO);
  TupleTypeInfo<?> tti=(TupleTypeInfo<?>)ti;
  Assert.assertEquals(PrimitiveArrayTypeInfo.INT_PRIMITIVE_ARRAY_TYPE_INFO,tti.getTypeAt(0));
  Assert.assertEquals(PrimitiveArrayTypeInfo.DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO,tti.getTypeAt(1));
  Assert.assertEquals(PrimitiveArrayTypeInfo.LONG_PRIMITIVE_ARRAY_TYPE_INFO,tti.getTypeAt(2));
  Assert.assertEquals(PrimitiveArrayTypeInfo.BYTE_PRIMITIVE_ARRAY_TYPE_INFO,tti.getTypeAt(3));
  Assert.assertEquals(PrimitiveArrayTypeInfo.CHAR_PRIMITIVE_ARRAY_TYPE_INFO,tti.getTypeAt(4));
  Assert.assertEquals(PrimitiveArrayTypeInfo.FLOAT_PRIMITIVE_ARRAY_TYPE_INFO,tti.getTypeAt(5));
  Assert.assertEquals(PrimitiveArrayTypeInfo.SHORT_PRIMITIVE_ARRAY_TYPE_INFO,tti.getTypeAt(6));
  Assert.assertEquals(PrimitiveArrayTypeInfo.BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO,tti.getTypeAt(7));
  Assert.assertEquals(BasicArrayTypeInfo.STRING_ARRAY_TYPE_INFO,tti.getTypeAt(8));
}
