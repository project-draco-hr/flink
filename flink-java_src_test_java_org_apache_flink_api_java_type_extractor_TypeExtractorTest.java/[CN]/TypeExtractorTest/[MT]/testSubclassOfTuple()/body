{
  RichFlatJoinFunction<?,?,?> function=new RichFlatJoinFunction<CustomTuple,String,CustomTuple>(){
    private static final long serialVersionUID=1L;
    @Override public void join(    CustomTuple first,    String second,    Collector<CustomTuple> out) throws Exception {
      out.collect(null);
    }
  }
;
  TypeInformation<?> ti=TypeExtractor.getJoinReturnTypes(function,(TypeInformation)TypeInfoParser.parse("Tuple2<String, Integer>"),(TypeInformation)TypeInfoParser.parse("String"));
  Assert.assertTrue(ti.isTupleType());
  Assert.assertEquals(2,ti.getArity());
  Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO,((TupleTypeInfo<?>)ti).getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO,((TupleTypeInfo<?>)ti).getTypeAt(1));
  Assert.assertEquals(CustomTuple.class,((TupleTypeInfo<?>)ti).getTypeClass());
  CustomTuple t=new CustomTuple("hello",1);
  TypeInformation<?> ti2=TypeExtractor.getForObject(t);
  Assert.assertTrue(ti2.isTupleType());
  Assert.assertEquals(2,ti2.getArity());
  Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO,((TupleTypeInfo<?>)ti2).getTypeAt(0));
  Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO,((TupleTypeInfo<?>)ti2).getTypeAt(1));
  Assert.assertEquals(CustomTuple.class,((TupleTypeInfo<?>)ti2).getTypeClass());
}
