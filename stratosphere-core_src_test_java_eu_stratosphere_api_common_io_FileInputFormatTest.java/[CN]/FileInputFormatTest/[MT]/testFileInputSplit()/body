{
  try {
    String tempFile=TestFileUtils.createTempFileDirExtension(".deflate","some","stupid","meaningless","files");
    final DummyFileInputFormat format=new DummyFileInputFormat();
    format.setFilePath(tempFile);
    format.configure(new Configuration());
    FileInputSplit[] splits=format.createInputSplits(2);
    Assert.assertEquals(4,splits.length);
    for (    FileInputSplit split : splits) {
      Assert.assertEquals(-1L,split.getLength());
      Assert.assertEquals(0L,split.getStart());
    }
    String newDir=TestFileUtils.createTempFileInDirectory(tempFile.replace("file:",""),"this creates a test file with a random extension (at least not .deflate)");
    final DummyFileInputFormat formatMixed=new DummyFileInputFormat();
    formatMixed.setFilePath(tempFile);
    formatMixed.configure(new Configuration());
    FileInputSplit[] splitsMixed=formatMixed.createInputSplits(2);
    Assert.assertEquals(5,splitsMixed.length);
    for (    FileInputSplit split : splitsMixed) {
      if (split.getPath().getName().endsWith(".deflate")) {
        Assert.assertEquals(-1L,split.getLength());
        Assert.assertEquals(0L,split.getStart());
      }
 else {
        Assert.assertEquals(0L,split.getStart());
        Assert.assertTrue("split size not correct",split.getLength() > 0);
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    Assert.fail(ex.getMessage());
  }
}
