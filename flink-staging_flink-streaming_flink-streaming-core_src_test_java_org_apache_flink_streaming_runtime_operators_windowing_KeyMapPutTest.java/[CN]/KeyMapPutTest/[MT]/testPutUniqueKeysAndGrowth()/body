{
  try {
    KeyMap<Integer,Integer> map=new KeyMap<>();
    final int numElements=1000000;
    for (int i=0; i < numElements; i++) {
      map.put(i,2 * i + 1);
      assertEquals(i + 1,map.size());
      assertTrue(map.getCurrentTableCapacity() > map.size());
      assertTrue(map.getCurrentTableCapacity() > map.getRehashThreshold());
      assertTrue(map.size() <= map.getRehashThreshold());
    }
    assertEquals(numElements,map.size());
    assertEquals(numElements,map.traverseAndCountElements());
    assertEquals(1 << 21,map.getCurrentTableCapacity());
    for (int i=0; i < numElements; i++) {
      assertEquals(2 * i + 1,map.get(i).intValue());
    }
    for (int i=numElements - 1; i >= 0; i--) {
      assertEquals(2 * i + 1,map.get(i).intValue());
    }
    BitSet bitset=new BitSet();
    int numContained=0;
    for (    KeyMap.Entry<Integer,Integer> entry : map) {
      numContained++;
      assertEquals(entry.getKey() * 2 + 1,entry.getValue().intValue());
      assertFalse(bitset.get(entry.getKey()));
      bitset.set(entry.getKey());
    }
    assertEquals(numElements,numContained);
    assertEquals(numElements,bitset.cardinality());
    assertEquals(numElements,map.size());
    assertEquals(numElements,map.traverseAndCountElements());
    assertEquals(1 << 21,map.getCurrentTableCapacity());
    assertTrue(map.getLongestChainLength() <= 7);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
