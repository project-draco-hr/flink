{
  StringBuilder sb=new StringBuilder();
  sb.append("\n");
  sb.append("\t\t/**\n");
  sb.append("\t\t * Chooses a projectTupleX according to the length of {@link JoinProjection#fieldIndexes} \n");
  sb.append("\t\t * \n");
  sb.append("\t\t * @return The projected DataSet.\n");
  sb.append("\t\t * \n");
  sb.append("\t\t * @see Projection\n");
  sb.append("\t\t */\n");
  sb.append("\t\t@SuppressWarnings(\"unchecked\")\n");
  sb.append("\t\tpublic <OUT extends Tuple> ProjectJoin<I1, I2, OUT> projectTupleX() {\n");
  sb.append("\t\t\tProjectJoin<I1, I2, OUT> projectJoin = null;\n\n");
  sb.append("\t\t\tswitch (fieldIndexes.length) {\n");
  for (int numFields=FIRST; numFields <= LAST; numFields++) {
    sb.append("\t\t\tcase " + numFields + ":"+ " projectJoin = (ProjectJoin<I1, I2, OUT>) projectTuple"+ numFields+ "(); break;\n");
  }
  sb.append("\t\t\tdefault: throw new IllegalStateException(\"Excessive arity in tuple.\");\n");
  sb.append("\t\t\t}\n\n");
  sb.append("\t\t\treturn projectJoin;\n");
  sb.append("\t\t}\n");
  for (int numFields=FIRST; numFields <= LAST; numFields++) {
    sb.append("\n");
    sb.append("\t\t/**\n");
    sb.append("\t\t * Projects a pair of joined elements to a {@link Tuple} with the previously selected fields. \n");
    sb.append("\t\t * Requires the classes of the fields of the resulting tuples. \n");
    sb.append("\t\t * \n");
    sb.append("\t\t * @return The projected data set.\n");
    sb.append("\t\t * \n");
    sb.append("\t\t * @see Tuple\n");
    sb.append("\t\t * @see DataSet\n");
    sb.append("\t\t */\n");
    sb.append("\t\tpublic <");
    appendTupleTypeGenerics(sb,numFields);
    sb.append("> ProjectJoin<I1, I2, Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">> projectTuple" + numFields + "(");
    sb.append(") {\n");
    sb.append("\t\t\tTypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes);\n");
    sb.append("\t\t\tTupleTypeInfo<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">> tType = new TupleTypeInfo<Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">>(fTypes);\n\n");
    sb.append("\t\t\treturn new ProjectJoin<I1, I2, Tuple" + numFields + "<");
    appendTupleTypeGenerics(sb,numFields);
    sb.append(">>(this.ds1, this.ds2, this.keys1, this.keys2, this.hint, this.fieldIndexes, this.isFieldInFirst, tType, this);\n");
    sb.append("\t\t}\n");
  }
  File dir=getPackage(root,JOIN_OPERATOR_PACKAGE);
  File projectOperatorClass=new File(dir,JOIN_OPERATOR_CLASSNAME + ".java");
  insertCodeIntoFile(sb.toString(),projectOperatorClass);
}
