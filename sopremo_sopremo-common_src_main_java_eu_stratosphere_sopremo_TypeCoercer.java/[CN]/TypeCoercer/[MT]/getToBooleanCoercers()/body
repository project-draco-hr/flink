{
  final Map<Class<? extends IJsonNode>,Coercer<?,BooleanNode>> toBooleanCoercers=new IdentityHashMap<Class<? extends IJsonNode>,Coercer<?,BooleanNode>>();
  toBooleanCoercers.put(INumericNode.class,new Coercer<INumericNode,BooleanNode>(){
    @Override public BooleanNode coerce(    final INumericNode from,    final BooleanNode target){
      return BooleanNode.valueOf(from.getDoubleValue() != 0);
    }
  }
);
  toBooleanCoercers.put(TextNode.class,new Coercer<TextNode,BooleanNode>(){
    @Override public BooleanNode coerce(    final TextNode from,    final BooleanNode target){
      return BooleanNode.valueOf(from.getTextValue().length() > 0);
    }
  }
);
  toBooleanCoercers.put(NullNode.class,new Coercer<NullNode,BooleanNode>(){
    @Override public BooleanNode coerce(    final NullNode from,    final BooleanNode target){
      return BooleanNode.FALSE;
    }
  }
);
  toBooleanCoercers.put(IArrayNode.class,new Coercer<IArrayNode,BooleanNode>(){
    @Override public BooleanNode coerce(    final IArrayNode from,    final BooleanNode target){
      return BooleanNode.valueOf(from.size() > 0);
    }
  }
);
  toBooleanCoercers.put(IObjectNode.class,new Coercer<IObjectNode,BooleanNode>(){
    @Override public BooleanNode coerce(    final IObjectNode from,    final BooleanNode target){
      return BooleanNode.valueOf(from.size() > 0);
    }
  }
);
  return toBooleanCoercers;
}
