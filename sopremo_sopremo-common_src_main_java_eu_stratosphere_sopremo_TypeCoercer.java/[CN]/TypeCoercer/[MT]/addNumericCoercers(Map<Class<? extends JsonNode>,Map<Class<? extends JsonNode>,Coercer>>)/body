{
  coercers.put(NumericNode.class,new IdentityHashMap<Class<? extends JsonNode>,TypeCoercer.Coercer>());
  for (  final Class<? extends NumericNode> numericType : NUMERIC_TYPES) {
    final IdentityHashMap<Class<? extends JsonNode>,TypeCoercer.Coercer> typeCoercers=new IdentityHashMap<Class<? extends JsonNode>,TypeCoercer.Coercer>();
    coercers.put(numericType,typeCoercers);
    typeCoercers.put(NumericNode.class,NumberCoercer.INSTANCE.getClassCoercers().get(numericType));
  }
  coercers.get(IntNode.class).put(BooleanNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      return IntNode.valueOf(node == BooleanNode.TRUE ? 1 : 0);
    }
  }
);
  coercers.get(DoubleNode.class).put(BooleanNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      return DoubleNode.valueOf(node == BooleanNode.TRUE ? 1 : 0);
    }
  }
);
  coercers.get(LongNode.class).put(BooleanNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      return LongNode.valueOf(node == BooleanNode.TRUE ? 1 : 0);
    }
  }
);
  coercers.get(DecimalNode.class).put(BooleanNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      return DecimalNode.valueOf(BigDecimal.valueOf(node == BooleanNode.TRUE ? 1 : 0));
    }
  }
);
  coercers.get(BigIntegerNode.class).put(BooleanNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      return BigIntegerNode.valueOf(BigInteger.valueOf(node == BooleanNode.TRUE ? 1 : 0));
    }
  }
);
  coercers.get(NumericNode.class).put(BooleanNode.class,coercers.get(IntNode.class).get(BooleanNode.class));
  coercers.get(IntNode.class).put(TextNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      try {
        return IntNode.valueOf(Integer.parseInt(((TextNode)node).getTextValue()));
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(DoubleNode.class).put(TextNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      try {
        return DoubleNode.valueOf(Double.parseDouble(((TextNode)node).getTextValue()));
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(LongNode.class).put(TextNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      try {
        return LongNode.valueOf(Long.parseLong(((TextNode)node).getTextValue()));
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(DecimalNode.class).put(TextNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      try {
        return DecimalNode.valueOf(new BigDecimal(((TextNode)node).getTextValue()));
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(BigIntegerNode.class).put(TextNode.class,new Coercer(){
    @Override public JsonNode coerce(    final JsonNode node){
      try {
        return BigIntegerNode.valueOf(new BigInteger(((TextNode)node).getTextValue()));
      }
 catch (      final NumberFormatException e) {
        return null;
      }
    }
  }
);
  coercers.get(NumericNode.class).put(TextNode.class,coercers.get(DecimalNode.class).get(TextNode.class));
}
