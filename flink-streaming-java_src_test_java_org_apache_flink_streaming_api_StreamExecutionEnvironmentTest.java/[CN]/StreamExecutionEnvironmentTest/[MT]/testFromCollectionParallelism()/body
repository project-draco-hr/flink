{
  try {
    TypeInformation<Integer> typeInfo=BasicTypeInfo.INT_TYPE_INFO;
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    DataStreamSource<Integer> dataStream1=env.fromCollection(new DummySplittableIterator<Integer>(),typeInfo);
    try {
      dataStream1.setParallelism(4);
      fail("should throw an exception");
    }
 catch (    IllegalArgumentException e) {
    }
    dataStream1.addSink(new DiscardingSink<Integer>());
    DataStreamSource<Integer> dataStream2=env.fromParallelCollection(new DummySplittableIterator<Integer>(),typeInfo).setParallelism(4);
    dataStream2.addSink(new DiscardingSink<Integer>());
    env.getExecutionPlan();
    assertEquals("Parallelism of collection source must be 1.",1,env.getStreamGraph().getStreamNode(dataStream1.getId()).getParallelism());
    assertEquals("Parallelism of parallel collection source must be 4.",4,env.getStreamGraph().getStreamNode(dataStream2.getId()).getParallelism());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
