{
  try {
    SourcePlanNode target=new SourcePlanNode(getSourceNode(),"Source");
    Channel toMap1=new Channel(target);
    toMap1.setShipStrategy(ShipStrategyType.FORWARD);
    toMap1.setLocalStrategy(LocalStrategy.NONE);
    SingleInputPlanNode map1=new SingleInputPlanNode(getMapNode(),"Mapper 1",toMap1,DriverStrategy.MAP);
    Channel toMap2=new Channel(map1);
    toMap2.setShipStrategy(ShipStrategyType.FORWARD);
    toMap2.setLocalStrategy(LocalStrategy.NONE);
    SingleInputPlanNode map2=new SingleInputPlanNode(getMapNode(),"Mapper 2",toMap2,DriverStrategy.MAP);
{
      GlobalProperties gp=new GlobalProperties();
      LocalProperties lp=new LocalProperties();
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,5));
      LocalProperties lp=new LocalProperties();
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1,2));
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,5));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1,2));
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,5));
      LocalProperties lp=new LocalProperties();
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setHashPartitioned(new FieldList(2,5));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1,2));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(1,2));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,5));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1,2));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setHashPartitioned(new FieldList(2,5));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(1,2));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1,2));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setHashPartitioned(new FieldList(2,5));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(1));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,1));
      LocalProperties lp=new LocalProperties();
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setHashPartitioned(new FieldList(2,5));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2,1));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,1));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(2,5));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(1));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(1));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,5));
      LocalProperties lp=new LocalProperties();
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setHashPartitioned(new FieldList(2,5));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1,2));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(1,2));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,5));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1,2));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setHashPartitioned(new FieldList(2,5));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(1,2));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1,2));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setHashPartitioned(new FieldList(2,5));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(1));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,1));
      LocalProperties lp=new LocalProperties();
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setHashPartitioned(new FieldList(2,5));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2,1));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(2,1));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(2,5));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(1));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(1));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.EMPTY;
      RequestedGlobalProperties reqGp1=new RequestedGlobalProperties();
      reqGp1.setAnyPartitioning(new FieldList(1,2));
      RequestedGlobalProperties reqGp2=new RequestedGlobalProperties();
      reqGp2.setHashPartitioned(new FieldList(1,2));
      toMap1.setRequiredGlobalProps(reqGp1);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(reqGp2);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      LocalProperties lp=LocalProperties.forOrdering(new Ordering(3,null,Order.ASCENDING).appendOrdering(1,null,Order.DESCENDING));
      RequestedLocalProperties reqLp1=new RequestedLocalProperties();
      reqLp1.setGroupedFields(new FieldList(3,1));
      RequestedLocalProperties reqLp2=new RequestedLocalProperties();
      reqLp2.setOrdering(new Ordering(3,null,Order.ANY).appendOrdering(1,null,Order.ANY));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(reqLp1);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(reqLp2);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(1,2));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(1,2));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(1,2));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2,3));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(2,3));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2,1));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(2,3));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2,1));
      toMap1.setRequiredGlobalProps(reqGp);
      toMap1.setRequiredLocalProps(null);
      toMap2.setRequiredGlobalProps(null);
      toMap2.setRequiredLocalProps(reqLp);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(1,2));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties reqGp=new RequestedGlobalProperties();
      reqGp.setAnyPartitioning(new FieldList(1,2));
      RequestedLocalProperties reqLp=new RequestedLocalProperties();
      reqLp.setGroupedFields(new FieldList(2,1,3));
      toMap1.setRequiredGlobalProps(null);
      toMap1.setRequiredLocalProps(reqLp);
      toMap2.setRequiredGlobalProps(reqGp);
      toMap2.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=map2.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
