{
  try {
    SourcePlanNode target=new SourcePlanNode(getSourceNode(),"Partial Solution");
    Channel toMap1=new Channel(target);
    toMap1.setShipStrategy(ShipStrategyType.FORWARD);
    toMap1.setLocalStrategy(LocalStrategy.NONE);
    SingleInputPlanNode map1=new SingleInputPlanNode(getMapNode(),"Mapper 1",toMap1,DriverStrategy.MAP);
    Channel toMap2=new Channel(target);
    toMap2.setShipStrategy(ShipStrategyType.FORWARD);
    toMap2.setLocalStrategy(LocalStrategy.NONE);
    SingleInputPlanNode map2=new SingleInputPlanNode(getMapNode(),"Mapper 2",toMap2,DriverStrategy.MAP);
    Channel toJoin1=new Channel(map1);
    toJoin1.setShipStrategy(ShipStrategyType.FORWARD);
    toJoin1.setLocalStrategy(LocalStrategy.NONE);
    Channel toJoin2=new Channel(map2);
    toJoin2.setShipStrategy(ShipStrategyType.FORWARD);
    toJoin2.setLocalStrategy(LocalStrategy.NONE);
    DualInputPlanNode join=new DualInputPlanNode(getJoinNode(),"Join",toJoin1,toJoin2,DriverStrategy.HYBRIDHASH_BUILD_FIRST);
    Channel toAfterJoin=new Channel(join);
    toAfterJoin.setShipStrategy(ShipStrategyType.FORWARD);
    toAfterJoin.setLocalStrategy(LocalStrategy.NONE);
    SingleInputPlanNode afterJoin=new SingleInputPlanNode(getMapNode(),"After Join Mapper",toAfterJoin,DriverStrategy.MAP);
{
      GlobalProperties gp=new GlobalProperties();
      LocalProperties lp=LocalProperties.EMPTY;
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(0));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(0));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties rgp=new RequestedGlobalProperties();
      rgp.setHashPartitioned(new FieldList(0));
      RequestedLocalProperties rlp=new RequestedLocalProperties();
      rlp.setGroupedFields(new FieldList(2,1));
      toJoin1.setRequiredGlobalProps(rgp);
      toJoin1.setRequiredLocalProps(rlp);
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(0));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties rgp=new RequestedGlobalProperties();
      rgp.setHashPartitioned(new FieldList(0));
      RequestedLocalProperties rlp=new RequestedLocalProperties();
      rlp.setGroupedFields(new FieldList(2,1));
      toJoin1.setRequiredGlobalProps(rgp);
      toJoin1.setRequiredLocalProps(rlp);
      toJoin2.setRequiredGlobalProps(rgp);
      toJoin2.setRequiredLocalProps(rlp);
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertTrue(report != null && report != NO_PARTIAL_SOLUTION && report != NOT_MET);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(0));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties rgp1=new RequestedGlobalProperties();
      rgp1.setHashPartitioned(new FieldList(0));
      RequestedLocalProperties rlp1=new RequestedLocalProperties();
      rlp1.setGroupedFields(new FieldList(2,1));
      RequestedGlobalProperties rgp2=new RequestedGlobalProperties();
      rgp2.setHashPartitioned(new FieldList(1));
      RequestedLocalProperties rlp2=new RequestedLocalProperties();
      rlp2.setGroupedFields(new FieldList(0,3));
      toJoin1.setRequiredGlobalProps(rgp1);
      toJoin1.setRequiredLocalProps(rlp1);
      toJoin2.setRequiredGlobalProps(rgp2);
      toJoin2.setRequiredLocalProps(rlp2);
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(0));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties rgp=new RequestedGlobalProperties();
      rgp.setHashPartitioned(new FieldList(1));
      RequestedLocalProperties rlp=new RequestedLocalProperties();
      rlp.setGroupedFields(new FieldList(0,3));
      toJoin1.setRequiredGlobalProps(null);
      toJoin1.setRequiredLocalProps(null);
      toJoin2.setRequiredGlobalProps(null);
      toJoin2.setRequiredLocalProps(null);
      toJoin1.setShipStrategy(ShipStrategyType.PARTITION_HASH,new FieldList(88));
      toJoin2.setShipStrategy(ShipStrategyType.BROADCAST);
      toAfterJoin.setRequiredGlobalProps(rgp);
      toAfterJoin.setRequiredLocalProps(rlp);
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(0));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties rgp=new RequestedGlobalProperties();
      rgp.setHashPartitioned(new FieldList(0));
      RequestedLocalProperties rlp=new RequestedLocalProperties();
      rlp.setGroupedFields(new FieldList(2,1));
      toJoin1.setShipStrategy(ShipStrategyType.PARTITION_HASH,new FieldList(88));
      toJoin2.setShipStrategy(ShipStrategyType.FORWARD);
      toAfterJoin.setRequiredGlobalProps(rgp);
      toAfterJoin.setRequiredLocalProps(rlp);
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(PENDING,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(0));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties rgp=new RequestedGlobalProperties();
      rgp.setHashPartitioned(new FieldList(3));
      RequestedLocalProperties rlp=new RequestedLocalProperties();
      rlp.setGroupedFields(new FieldList(77,69));
      toJoin1.setShipStrategy(ShipStrategyType.PARTITION_HASH,new FieldList(88));
      toJoin2.setShipStrategy(ShipStrategyType.FORWARD);
      toAfterJoin.setRequiredGlobalProps(rgp);
      toAfterJoin.setRequiredLocalProps(rlp);
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
{
      GlobalProperties gp=new GlobalProperties();
      gp.setHashPartitioned(new FieldList(0));
      LocalProperties lp=LocalProperties.forGrouping(new FieldList(2,1));
      RequestedGlobalProperties rgp=new RequestedGlobalProperties();
      rgp.setHashPartitioned(new FieldList(3));
      toJoin1.setShipStrategy(ShipStrategyType.FORWARD);
      toJoin1.setLocalStrategy(LocalStrategy.SORT,new FieldList(3),new boolean[]{false});
      toJoin2.setShipStrategy(ShipStrategyType.FORWARD);
      toJoin1.setLocalStrategy(LocalStrategy.NONE);
      toAfterJoin.setRequiredGlobalProps(rgp);
      toAfterJoin.setRequiredLocalProps(null);
      FeedbackPropertiesMeetRequirementsReport report=afterJoin.checkPartialSolutionPropertiesMet(target,gp,lp);
      assertEquals(NOT_MET,report);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
