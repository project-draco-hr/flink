{
  try {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Long> input1=env.generateSequence(1,10);
    DataSet<Long> input2=env.generateSequence(1,10);
    IterativeDataSet<Long> iteration=input1.iterate(10);
    DataSet<Long> result=iteration.closeWith(input2.union(input2).union(iteration.union(iteration)));
    result.print();
    result.print();
    Plan p=env.createProgramPlan();
    OptimizedPlan op=compileNoStats(p);
    assertEquals(2,op.getDataSinks().size());
    BulkIterationPlanNode iterPlan=(BulkIterationPlanNode)op.getDataSinks().iterator().next().getInput().getSource();
    SingleInputPlanNode noopNode=(SingleInputPlanNode)iterPlan.getRootOfStepFunction();
    BinaryUnionPlanNode mixedUnion=(BinaryUnionPlanNode)noopNode.getInput().getSource();
    NAryUnionPlanNode staticUnion=(NAryUnionPlanNode)mixedUnion.getInput1().getSource();
    NAryUnionPlanNode dynamicUnion=(NAryUnionPlanNode)mixedUnion.getInput2().getSource();
    assertTrue(mixedUnion.unionsStaticAndDynamicPath());
    assertFalse(mixedUnion.getInput1().isOnDynamicPath());
    assertTrue(mixedUnion.getInput2().isOnDynamicPath());
    assertTrue(mixedUnion.getInput1().getTempMode().isCached());
    for (    Channel c : staticUnion.getInputs()) {
      assertFalse(c.isOnDynamicPath());
    }
    for (    Channel c : dynamicUnion.getInputs()) {
      assertTrue(c.isOnDynamicPath());
    }
    assertEquals(0.5,iterPlan.getRelativeMemoryPerSubTask(),0.0);
    assertEquals(0.5,mixedUnion.getInput1().getRelativeTempMemory(),0.0);
    assertEquals(0.0,mixedUnion.getInput2().getRelativeTempMemory(),0.0);
    new JobGraphGenerator().compileJobGraph(op);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
