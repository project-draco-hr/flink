{
  this.nextPartialSolution.accept(PlanCacheCleaner.INSTANCE);
  if (this.terminationCriterion != null) {
    this.terminationCriterion.accept(PlanCacheCleaner.INSTANCE);
  }
  this.partialSolution.setCandidateProperties(in.getGlobalProperties(),in.getLocalProperties(),in);
  final BulkPartialSolutionPlanNode pspn=this.partialSolution.getCurrentPartialSolutionPlanNode();
  List<PlanNode> candidates=this.nextPartialSolution.getAlternativePlans(estimator);
{
    List<PlanNode> newCandidates=new ArrayList<PlanNode>();
    for (Iterator<PlanNode> planDeleter=candidates.iterator(); planDeleter.hasNext(); ) {
      PlanNode candidate=planDeleter.next();
      GlobalProperties atEndGlobal=candidate.getGlobalProperties();
      LocalProperties atEndLocal=candidate.getLocalProperties();
      FeedbackPropertiesMeetRequirementsReport report=candidate.checkPartialSolutionPropertiesMet(pspn,atEndGlobal,atEndLocal);
      if (report == FeedbackPropertiesMeetRequirementsReport.NO_PARTIAL_SOLUTION) {
        ;
      }
 else       if (report == FeedbackPropertiesMeetRequirementsReport.NOT_MET) {
        Channel toNoOp=new Channel(candidate);
        globPropsReq.parameterizeChannel(toNoOp,false,rootConnection.getDataExchangeMode(),false);
        locPropsReq.parameterizeChannel(toNoOp);
        NoOpUnaryUdfOp noOpUnaryUdfOp=new NoOpUnaryUdfOp<>();
        noOpUnaryUdfOp.setInput(candidate.getProgramOperator());
        UnaryOperatorNode rebuildPropertiesNode=new UnaryOperatorNode("Rebuild Partial Solution Properties",noOpUnaryUdfOp,true);
        rebuildPropertiesNode.setParallelism(candidate.getParallelism());
        SingleInputPlanNode rebuildPropertiesPlanNode=new SingleInputPlanNode(rebuildPropertiesNode,"Rebuild Partial Solution Properties",toNoOp,DriverStrategy.UNARY_NO_OP);
        rebuildPropertiesPlanNode.initProperties(toNoOp.getGlobalProperties(),toNoOp.getLocalProperties());
        estimator.costOperator(rebuildPropertiesPlanNode);
        GlobalProperties atEndGlobalModified=rebuildPropertiesPlanNode.getGlobalProperties();
        LocalProperties atEndLocalModified=rebuildPropertiesPlanNode.getLocalProperties();
        if (!(atEndGlobalModified.equals(atEndGlobal) && atEndLocalModified.equals(atEndLocal))) {
          FeedbackPropertiesMeetRequirementsReport report2=candidate.checkPartialSolutionPropertiesMet(pspn,atEndGlobalModified,atEndLocalModified);
          if (report2 != FeedbackPropertiesMeetRequirementsReport.NOT_MET) {
            newCandidates.add(rebuildPropertiesPlanNode);
          }
        }
        planDeleter.remove();
      }
    }
    candidates.addAll(newCandidates);
  }
  if (candidates.isEmpty()) {
    return;
  }
  if (terminationCriterion == null) {
    for (    PlanNode candidate : candidates) {
      BulkIterationPlanNode node=new BulkIterationPlanNode(this,this.getOperator().getName(),in,pspn,candidate);
      GlobalProperties gProps=candidate.getGlobalProperties().clone();
      LocalProperties lProps=candidate.getLocalProperties().clone();
      node.initProperties(gProps,lProps);
      target.add(node);
    }
  }
 else   if (candidates.size() > 0) {
    List<PlanNode> terminationCriterionCandidates=this.terminationCriterion.getAlternativePlans(estimator);
    SingleRootJoiner singleRoot=(SingleRootJoiner)this.singleRoot;
    for (    PlanNode candidate : candidates) {
      for (      PlanNode terminationCandidate : terminationCriterionCandidates) {
        if (singleRoot.areBranchCompatible(candidate,terminationCandidate)) {
          BulkIterationPlanNode node=new BulkIterationPlanNode(this,"BulkIteration (" + this.getOperator().getName() + ")",in,pspn,candidate,terminationCandidate);
          GlobalProperties gProps=candidate.getGlobalProperties().clone();
          LocalProperties lProps=candidate.getLocalProperties().clone();
          node.initProperties(gProps,lProps);
          target.add(node);
        }
      }
    }
  }
}
