{
  JaqlParser.bindingCondition_return retval=new JaqlParser.bindingCondition_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal104=null;
  JaqlParser.binding_return binding102=null;
  JaqlParser.jsonObject_return jsonObject103=null;
  JaqlParser.object_return object105=null;
  CommonTree string_literal104_tree=null;
  try {
    int alt34=2;
    int LA34_0=input.LA(1);
    if ((LA34_0 == ID)) {
      alt34=1;
    }
 else     if ((LA34_0 == 46)) {
      alt34=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("",34,0,input);
      throw nvae;
    }
switch (alt34) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
        pushFollow(FOLLOW_binding_in_bindingCondition856);
        binding102=binding();
        state._fsp--;
        adaptor.addChild(root_0,binding102.getTree());
      }
    break;
case 2:
{
    root_0=(CommonTree)adaptor.nil();
{
      pushFollow(FOLLOW_jsonObject_in_bindingCondition861);
      jsonObject103=jsonObject();
      state._fsp--;
      adaptor.addChild(root_0,jsonObject103.getTree());
      string_literal104=(Token)match(input,59,FOLLOW_59_in_bindingCondition863);
      string_literal104_tree=(CommonTree)adaptor.create(string_literal104);
      adaptor.addChild(root_0,string_literal104_tree);
      pushFollow(FOLLOW_object_in_bindingCondition865);
      object105=object();
      state._fsp--;
      adaptor.addChild(root_0,object105.getTree());
    }
  }
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
