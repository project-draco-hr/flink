{
  JaqlParser.linkCondition_return retval=new JaqlParser.linkCondition_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token COMPARISON85=null;
  Token set86=null;
  JaqlParser.arithmExpr_return arithmExpr83=null;
  JaqlParser.arrayDefinition_return arrayDefinition84=null;
  CommonTree COMPARISON85_tree=null;
  CommonTree set86_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      int alt31=2;
      int LA31_0=input.LA(1);
      if ((LA31_0 == VAR || (LA31_0 >= ID && LA31_0 <= UINT))) {
        alt31=1;
      }
 else       if ((LA31_0 == 49)) {
        alt31=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",31,0,input);
        throw nvae;
      }
switch (alt31) {
case 1:
{
          pushFollow(FOLLOW_arithmExpr_in_linkCondition745);
          arithmExpr83=arithmExpr();
          state._fsp--;
          adaptor.addChild(root_0,arithmExpr83.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_arrayDefinition_in_linkCondition749);
      arrayDefinition84=arrayDefinition();
      state._fsp--;
      adaptor.addChild(root_0,arrayDefinition84.getTree());
    }
  break;
}
COMPARISON85=(Token)match(input,COMPARISON,FOLLOW_COMPARISON_in_linkCondition752);
COMPARISON85_tree=(CommonTree)adaptor.create(COMPARISON85);
adaptor.addChild(root_0,COMPARISON85_tree);
set86=(Token)input.LT(1);
if ((input.LA(1) >= INTEGER && input.LA(1) <= DECIMAL)) {
input.consume();
adaptor.addChild(root_0,(CommonTree)adaptor.create(set86));
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
