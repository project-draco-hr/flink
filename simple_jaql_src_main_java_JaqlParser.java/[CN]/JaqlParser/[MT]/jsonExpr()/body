{
  JaqlParser.jsonExpr_return retval=new JaqlParser.jsonExpr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ID26=null;
  Token char_literal27=null;
  JaqlParser.jsonObject_return jsonObject28=null;
  JaqlParser.arithmExpr_return arithmExpr29=null;
  JaqlParser.arrayDefinition_return arrayDefinition30=null;
  CommonTree ID26_tree=null;
  CommonTree char_literal27_tree=null;
  RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_jsonObject=new RewriteRuleSubtreeStream(adaptor,"rule jsonObject");
  RewriteRuleSubtreeStream stream_arrayDefinition=new RewriteRuleSubtreeStream(adaptor,"rule arrayDefinition");
  RewriteRuleSubtreeStream stream_arithmExpr=new RewriteRuleSubtreeStream(adaptor,"rule arithmExpr");
  try {
{
      int alt11=2;
      int LA11_0=input.LA(1);
      if ((LA11_0 == ID)) {
        int LA11_1=input.LA(2);
        if ((LA11_1 == 45)) {
          alt11=1;
        }
      }
switch (alt11) {
case 1:
{
          ID26=(Token)match(input,ID,FOLLOW_ID_in_jsonExpr340);
          stream_ID.add(ID26);
          char_literal27=(Token)match(input,45,FOLLOW_45_in_jsonExpr342);
          stream_45.add(char_literal27);
        }
      break;
  }
  int alt12=3;
switch (input.LA(1)) {
case 46:
{
      alt12=1;
    }
  break;
case VAR:
case ID:
case INTEGER:
case DECIMAL:
case STRING:
case UINT:
{
  alt12=2;
}
break;
case 49:
{
alt12=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",12,0,input);
throw nvae;
}
switch (alt12) {
case 1:
{
pushFollow(FOLLOW_jsonObject_in_jsonExpr347);
jsonObject28=jsonObject();
state._fsp--;
stream_jsonObject.add(jsonObject28.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_arithmExpr_in_jsonExpr351);
arithmExpr29=arithmExpr();
state._fsp--;
stream_arithmExpr.add(arithmExpr29.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_arrayDefinition_in_jsonExpr355);
arrayDefinition30=arrayDefinition();
state._fsp--;
stream_arrayDefinition.add(arrayDefinition30.getTree());
}
break;
}
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_FIELD,"JSON_FIELD"),root_1);
if (stream_ID.hasNext()) {
adaptor.addChild(root_1,stream_ID.nextNode());
}
stream_ID.reset();
if (stream_jsonObject.hasNext()) {
adaptor.addChild(root_1,stream_jsonObject.nextTree());
}
stream_jsonObject.reset();
if (stream_arithmExpr.hasNext()) {
adaptor.addChild(root_1,stream_arithmExpr.nextTree());
}
stream_arithmExpr.reset();
if (stream_arrayDefinition.hasNext()) {
adaptor.addChild(root_1,stream_arrayDefinition.nextTree());
}
stream_arrayDefinition.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
