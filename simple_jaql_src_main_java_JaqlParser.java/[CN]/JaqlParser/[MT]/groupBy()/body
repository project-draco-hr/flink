{
  JaqlParser.groupBy_return retval=new JaqlParser.groupBy_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal64=null;
  Token ID65=null;
  Token char_literal66=null;
  Token string_literal68=null;
  JaqlParser.arrayDefinition_return arrayDefinition67=null;
  JaqlParser.jsonObject_return jsonObject69=null;
  CommonTree string_literal64_tree=null;
  CommonTree ID65_tree=null;
  CommonTree char_literal66_tree=null;
  CommonTree string_literal68_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
  RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
  RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
  RewriteRuleSubtreeStream stream_jsonObject=new RewriteRuleSubtreeStream(adaptor,"rule jsonObject");
  RewriteRuleSubtreeStream stream_arrayDefinition=new RewriteRuleSubtreeStream(adaptor,"rule arrayDefinition");
  try {
{
      string_literal64=(Token)match(input,52,FOLLOW_52_in_groupBy648);
      stream_52.add(string_literal64);
      ID65=(Token)match(input,ID,FOLLOW_ID_in_groupBy650);
      stream_ID.add(ID65);
      int alt28=2;
      int LA28_0=input.LA(1);
      if ((LA28_0 == 38)) {
        alt28=1;
      }
switch (alt28) {
case 1:
{
          char_literal66=(Token)match(input,38,FOLLOW_38_in_groupBy653);
          stream_38.add(char_literal66);
          pushFollow(FOLLOW_arrayDefinition_in_groupBy655);
          arrayDefinition67=arrayDefinition();
          state._fsp--;
          stream_arrayDefinition.add(arrayDefinition67.getTree());
        }
      break;
  }
  string_literal68=(Token)match(input,53,FOLLOW_53_in_groupBy659);
  stream_53.add(string_literal68);
  pushFollow(FOLLOW_jsonObject_in_groupBy661);
  jsonObject69=jsonObject();
  state._fsp--;
  stream_jsonObject.add(jsonObject69.getTree());
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
{
      CommonTree root_1=(CommonTree)adaptor.nil();
      root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR,"group by"),root_1);
      adaptor.addChild(root_1,stream_ID.nextNode());
      if (stream_arrayDefinition.hasNext()) {
        adaptor.addChild(root_1,stream_arrayDefinition.nextTree());
      }
      stream_arrayDefinition.reset();
      adaptor.addChild(root_1,stream_jsonObject.nextTree());
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
