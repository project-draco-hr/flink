{
  JaqlParser.bindings_return retval=new JaqlParser.bindings_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal88=null;
  JaqlParser.binding_return binding87=null;
  JaqlParser.binding_return binding89=null;
  CommonTree char_literal88_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_binding_in_bindings767);
      binding87=binding();
      state._fsp--;
      adaptor.addChild(root_0,binding87.getTree());
      loop32:       do {
        int alt32=2;
        int LA32_0=input.LA(1);
        if ((LA32_0 == 44)) {
          alt32=1;
        }
switch (alt32) {
case 1:
{
            char_literal88=(Token)match(input,44,FOLLOW_44_in_bindings770);
            pushFollow(FOLLOW_binding_in_bindings773);
            binding89=binding();
            state._fsp--;
            adaptor.addChild(root_0,binding89.getTree());
          }
        break;
default :
      break loop32;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
