{
  JaqlParser.arrayAccess_return retval=new JaqlParser.arrayAccess_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token i=null;
  Token j=null;
  Token char_literal47=null;
  Token char_literal48=null;
  Token STAR49=null;
  Token char_literal50=null;
  CommonTree i_tree=null;
  CommonTree j_tree=null;
  CommonTree char_literal47_tree=null;
  CommonTree char_literal48_tree=null;
  CommonTree STAR49_tree=null;
  CommonTree char_literal50_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
  RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
  RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
  RewriteRuleTokenStream stream_UINT=new RewriteRuleTokenStream(adaptor,"token UINT");
  RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
  try {
{
      char_literal47=(Token)match(input,49,FOLLOW_49_in_arrayAccess508);
      stream_49.add(char_literal47);
      int alt24=2;
      int LA24_0=input.LA(1);
      if ((LA24_0 == INTEGER || LA24_0 == UINT)) {
        alt24=1;
      }
 else       if ((LA24_0 == STAR)) {
        alt24=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",24,0,input);
        throw nvae;
      }
switch (alt24) {
case 1:
{
          int alt21=2;
          int LA21_0=input.LA(1);
          if ((LA21_0 == INTEGER)) {
            alt21=1;
          }
 else           if ((LA21_0 == UINT)) {
            alt21=2;
          }
 else {
            NoViableAltException nvae=new NoViableAltException("",21,0,input);
            throw nvae;
          }
switch (alt21) {
case 1:
{
              i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess514);
              stream_INTEGER.add(i);
            }
          break;
case 2:
{
          i=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess520);
          stream_UINT.add(i);
        }
      break;
  }
  int alt23=2;
  int LA23_0=input.LA(1);
  if ((LA23_0 == 45)) {
    alt23=1;
  }
switch (alt23) {
case 1:
{
      char_literal48=(Token)match(input,45,FOLLOW_45_in_arrayAccess524);
      stream_45.add(char_literal48);
      int alt22=2;
      int LA22_0=input.LA(1);
      if ((LA22_0 == INTEGER)) {
        alt22=1;
      }
 else       if ((LA22_0 == UINT)) {
        alt22=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",22,0,input);
        throw nvae;
      }
switch (alt22) {
case 1:
{
          j=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arrayAccess529);
          stream_INTEGER.add(j);
        }
      break;
case 2:
{
      j=(Token)match(input,UINT,FOLLOW_UINT_in_arrayAccess535);
      stream_UINT.add(j);
    }
  break;
}
}
break;
}
}
break;
case 2:
{
STAR49=(Token)match(input,STAR,FOLLOW_STAR_in_arrayAccess542);
stream_STAR.add(STAR49);
}
break;
}
char_literal50=(Token)match(input,50,FOLLOW_50_in_arrayAccess545);
stream_50.add(char_literal50);
retval.tree=root_0;
RewriteRuleTokenStream stream_j=new RewriteRuleTokenStream(adaptor,"token j",j);
RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_ACCESS,"ARRAY_ACCESS"),root_1);
if (stream_i.hasNext()) {
adaptor.addChild(root_1,stream_i.nextNode());
}
stream_i.reset();
if (stream_j.hasNext()) {
adaptor.addChild(root_1,stream_j.nextNode());
}
stream_j.reset();
if (stream_STAR.hasNext()) {
adaptor.addChild(root_1,stream_STAR.nextNode());
}
stream_STAR.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
