{
  JaqlParser.binding_return retval=new JaqlParser.binding_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ID90=null;
  Token string_literal91=null;
  JaqlParser.object_return object92=null;
  CommonTree ID90_tree=null;
  CommonTree string_literal91_tree=null;
  RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_object=new RewriteRuleSubtreeStream(adaptor,"rule object");
  try {
{
      ID90=(Token)match(input,ID,FOLLOW_ID_in_binding785);
      stream_ID.add(ID90);
      string_literal91=(Token)match(input,59,FOLLOW_59_in_binding787);
      stream_59.add(string_literal91);
      pushFollow(FOLLOW_object_in_binding789);
      object92=object();
      state._fsp--;
      stream_object.add(object92.getTree());
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BIND,"BIND"),root_1);
          adaptor.addChild(root_1,stream_ID.nextNode());
          adaptor.addChild(root_1,stream_object.nextTree());
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
    retval.stop=input.LT(-1);
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
