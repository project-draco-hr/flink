{
  JaqlParser.link_return retval=new JaqlParser.link_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal70=null;
  Token string_literal72=null;
  Token string_literal76=null;
  Token string_literal77=null;
  Token ID78=null;
  Token string_literal79=null;
  Token string_literal81=null;
  JaqlParser.bindings_return bindings71=null;
  JaqlParser.linkCondition_return linkCondition73=null;
  JaqlParser.logicOperator_return logicOperator74=null;
  JaqlParser.linkCondition_return linkCondition75=null;
  JaqlParser.arrayDefinition_return arrayDefinition80=null;
  JaqlParser.jsonObject_return jsonObject82=null;
  CommonTree string_literal70_tree=null;
  CommonTree string_literal72_tree=null;
  CommonTree string_literal76_tree=null;
  CommonTree string_literal77_tree=null;
  CommonTree ID78_tree=null;
  CommonTree string_literal79_tree=null;
  CommonTree string_literal81_tree=null;
  RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
  RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
  RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
  RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
  RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
  RewriteRuleSubtreeStream stream_logicOperator=new RewriteRuleSubtreeStream(adaptor,"rule logicOperator");
  RewriteRuleSubtreeStream stream_jsonObject=new RewriteRuleSubtreeStream(adaptor,"rule jsonObject");
  RewriteRuleSubtreeStream stream_arrayDefinition=new RewriteRuleSubtreeStream(adaptor,"rule arrayDefinition");
  RewriteRuleSubtreeStream stream_bindings=new RewriteRuleSubtreeStream(adaptor,"rule bindings");
  RewriteRuleSubtreeStream stream_linkCondition=new RewriteRuleSubtreeStream(adaptor,"rule linkCondition");
  try {
{
      string_literal70=(Token)match(input,54,FOLLOW_54_in_link684);
      stream_54.add(string_literal70);
      pushFollow(FOLLOW_bindings_in_link686);
      bindings71=bindings();
      state._fsp--;
      stream_bindings.add(bindings71.getTree());
      string_literal72=(Token)match(input,55,FOLLOW_55_in_link688);
      stream_55.add(string_literal72);
      pushFollow(FOLLOW_linkCondition_in_link690);
      linkCondition73=linkCondition();
      state._fsp--;
      stream_linkCondition.add(linkCondition73.getTree());
      loop29:       do {
        int alt29=2;
        int LA29_0=input.LA(1);
        if (((LA29_0 >= 64 && LA29_0 <= 66))) {
          alt29=1;
        }
switch (alt29) {
case 1:
{
            pushFollow(FOLLOW_logicOperator_in_link693);
            logicOperator74=logicOperator();
            state._fsp--;
            stream_logicOperator.add(logicOperator74.getTree());
            pushFollow(FOLLOW_linkCondition_in_link695);
            linkCondition75=linkCondition();
            state._fsp--;
            stream_linkCondition.add(linkCondition75.getTree());
          }
        break;
default :
      break loop29;
  }
}
 while (true);
int alt30=2;
int LA30_0=input.LA(1);
if ((LA30_0 == 56)) {
  alt30=1;
}
switch (alt30) {
case 1:
{
    string_literal76=(Token)match(input,56,FOLLOW_56_in_link700);
    stream_56.add(string_literal76);
    string_literal77=(Token)match(input,57,FOLLOW_57_in_link702);
    stream_57.add(string_literal77);
    ID78=(Token)match(input,ID,FOLLOW_ID_in_link704);
    stream_ID.add(ID78);
    string_literal79=(Token)match(input,58,FOLLOW_58_in_link706);
    stream_58.add(string_literal79);
    pushFollow(FOLLOW_arrayDefinition_in_link708);
    arrayDefinition80=arrayDefinition();
    state._fsp--;
    stream_arrayDefinition.add(arrayDefinition80.getTree());
  }
break;
}
string_literal81=(Token)match(input,53,FOLLOW_53_in_link712);
stream_53.add(string_literal81);
pushFollow(FOLLOW_jsonObject_in_link714);
jsonObject82=jsonObject();
state._fsp--;
stream_jsonObject.add(jsonObject82.getTree());
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR,"link"),root_1);
adaptor.addChild(root_1,stream_bindings.nextTree());
while (stream_linkCondition.hasNext()) {
  adaptor.addChild(root_1,stream_linkCondition.nextTree());
}
stream_linkCondition.reset();
adaptor.addChild(root_1,stream_ID.nextNode());
adaptor.addChild(root_1,stream_arrayDefinition.nextTree());
adaptor.addChild(root_1,stream_jsonObject.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
