{
  JaqlParser.object_return retval=new JaqlParser.object_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ID37=null;
  Token VAR38=null;
  JaqlParser.functionCall_return functionCall39=null;
  JaqlParser.objectExpr_return objectExpr40=null;
  CommonTree ID37_tree=null;
  CommonTree VAR38_tree=null;
  RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_functionCall=new RewriteRuleSubtreeStream(adaptor,"rule functionCall");
  RewriteRuleSubtreeStream stream_objectExpr=new RewriteRuleSubtreeStream(adaptor,"rule objectExpr");
  try {
{
      int alt16=3;
      int LA16_0=input.LA(1);
      if ((LA16_0 == ID)) {
        int LA16_1=input.LA(2);
        if ((LA16_1 == 39)) {
          alt16=3;
        }
 else         if ((LA16_1 == ARROW || (LA16_1 >= STAR && LA16_1 <= COMPARISON) || LA16_1 == 37 || (LA16_1 >= 40 && LA16_1 <= 44) || (LA16_1 >= 47 && LA16_1 <= 50) || LA16_1 == 53 || LA16_1 == 55 || LA16_1 == 57 || LA16_1 == 61)) {
          alt16=1;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("",16,1,input);
          throw nvae;
        }
      }
 else       if ((LA16_0 == VAR)) {
        alt16=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",16,0,input);
        throw nvae;
      }
switch (alt16) {
case 1:
{
          ID37=(Token)match(input,ID,FOLLOW_ID_in_object419);
          stream_ID.add(ID37);
        }
      break;
case 2:
{
      VAR38=(Token)match(input,VAR,FOLLOW_VAR_in_object423);
      stream_VAR.add(VAR38);
    }
  break;
case 3:
{
  pushFollow(FOLLOW_functionCall_in_object427);
  functionCall39=functionCall();
  state._fsp--;
  stream_functionCall.add(functionCall39.getTree());
}
break;
}
int alt17=2;
int LA17_0=input.LA(1);
if (((LA17_0 >= 48 && LA17_0 <= 49))) {
alt17=1;
}
switch (alt17) {
case 1:
{
pushFollow(FOLLOW_objectExpr_in_object430);
objectExpr40=objectExpr();
state._fsp--;
stream_objectExpr.add(objectExpr40.getTree());
}
break;
}
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_EXPR,"OBJECT_EXPR"),root_1);
if (stream_VAR.hasNext()) {
adaptor.addChild(root_1,stream_VAR.nextNode());
}
stream_VAR.reset();
if (stream_functionCall.hasNext()) {
adaptor.addChild(root_1,stream_functionCall.nextTree());
}
stream_functionCall.reset();
if (stream_ID.hasNext()) {
adaptor.addChild(root_1,stream_ID.nextNode());
}
stream_ID.reset();
if (stream_objectExpr.hasNext()) {
adaptor.addChild(root_1,stream_objectExpr.nextTree());
}
stream_objectExpr.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
