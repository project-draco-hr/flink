{
  JaqlParser.statement_return retval=new JaqlParser.statement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal4=null;
  JaqlParser.assignment_return assignment2=null;
  JaqlParser.streamStart_return streamStart3=null;
  CommonTree char_literal4_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      int alt2=2;
      int LA2_0=input.LA(1);
      if ((LA2_0 == VAR)) {
        int LA2_1=input.LA(2);
        if ((LA2_1 == 38)) {
          alt2=1;
        }
 else         if ((LA2_1 == ARROW || LA2_1 == 37)) {
          alt2=2;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("",2,1,input);
          throw nvae;
        }
      }
 else       if ((LA2_0 == ID || (LA2_0 >= 51 && LA2_0 <= 52) || LA2_0 == 54 || LA2_0 == 60 || LA2_0 == 63)) {
        alt2=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",2,0,input);
        throw nvae;
      }
switch (alt2) {
case 1:
{
          pushFollow(FOLLOW_assignment_in_statement158);
          assignment2=assignment();
          state._fsp--;
          adaptor.addChild(root_0,assignment2.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_streamStart_in_statement162);
      streamStart3=streamStart();
      state._fsp--;
      adaptor.addChild(root_0,streamStart3.getTree());
    }
  break;
}
char_literal4=(Token)match(input,37,FOLLOW_37_in_statement165);
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
