{
  JaqlParser.functionCall_return retval=new JaqlParser.functionCall_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ID15=null;
  Token char_literal16=null;
  Token char_literal18=null;
  JaqlParser.params_return params17=null;
  CommonTree ID15_tree=null;
  CommonTree char_literal16_tree=null;
  CommonTree char_literal18_tree=null;
  RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
  RewriteRuleSubtreeStream stream_params=new RewriteRuleSubtreeStream(adaptor,"rule params");
  try {
{
      ID15=(Token)match(input,ID,FOLLOW_ID_in_functionCall260);
      stream_ID.add(ID15);
      char_literal16=(Token)match(input,39,FOLLOW_39_in_functionCall262);
      stream_39.add(char_literal16);
      int alt7=2;
      int LA7_0=input.LA(1);
      if ((LA7_0 == VAR || (LA7_0 >= ID && LA7_0 <= UINT))) {
        alt7=1;
      }
switch (alt7) {
case 1:
{
          pushFollow(FOLLOW_params_in_functionCall264);
          params17=params();
          state._fsp--;
          stream_params.add(params17.getTree());
        }
      break;
  }
  char_literal18=(Token)match(input,40,FOLLOW_40_in_functionCall267);
  stream_40.add(char_literal18);
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
{
      CommonTree root_1=(CommonTree)adaptor.nil();
      root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL,"FUNCTION_CALL"),root_1);
      adaptor.addChild(root_1,stream_ID.nextNode());
      if (stream_params.hasNext()) {
        adaptor.addChild(root_1,stream_params.nextTree());
      }
      stream_params.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
