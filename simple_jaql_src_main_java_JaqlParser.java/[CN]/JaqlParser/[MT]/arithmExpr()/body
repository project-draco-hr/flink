{
  JaqlParser.arithmExpr_return retval=new JaqlParser.arithmExpr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token set21=null;
  JaqlParser.object_return object19=null;
  JaqlParser.literal_return literal20=null;
  JaqlParser.arithmExpr_return arithmExpr22=null;
  CommonTree set21_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      int alt8=2;
      int LA8_0=input.LA(1);
      if ((LA8_0 == VAR || LA8_0 == ID)) {
        alt8=1;
      }
 else       if (((LA8_0 >= INTEGER && LA8_0 <= UINT))) {
        alt8=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",8,0,input);
        throw nvae;
      }
switch (alt8) {
case 1:
{
          pushFollow(FOLLOW_object_in_arithmExpr287);
          object19=object();
          state._fsp--;
          adaptor.addChild(root_0,object19.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_literal_in_arithmExpr291);
      literal20=literal();
      state._fsp--;
      adaptor.addChild(root_0,literal20.getTree());
    }
  break;
}
int alt9=2;
int LA9_0=input.LA(1);
if ((LA9_0 == STAR || (LA9_0 >= 41 && LA9_0 <= 43))) {
alt9=1;
}
switch (alt9) {
case 1:
{
  set21=(Token)input.LT(1);
  if (input.LA(1) == STAR || (input.LA(1) >= 41 && input.LA(1) <= 43)) {
    input.consume();
    adaptor.addChild(root_0,(CommonTree)adaptor.create(set21));
    state.errorRecovery=false;
  }
 else {
    MismatchedSetException mse=new MismatchedSetException(null,input);
    throw mse;
  }
  pushFollow(FOLLOW_arithmExpr_in_arithmExpr311);
  arithmExpr22=arithmExpr();
  state._fsp--;
  adaptor.addChild(root_0,arithmExpr22.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
