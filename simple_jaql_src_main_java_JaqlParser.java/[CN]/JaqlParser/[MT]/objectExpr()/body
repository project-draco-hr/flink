{
  JaqlParser.objectExpr_return retval=new JaqlParser.objectExpr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal42=null;
  Token ID43=null;
  JaqlParser.functionCall_return functionCall44=null;
  JaqlParser.arrayAccess_return arrayAccess45=null;
  JaqlParser.objectExpr_return objectExpr46=null;
  CommonTree char_literal42_tree=null;
  CommonTree ID43_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      int alt19=2;
      int LA19_0=input.LA(1);
      if ((LA19_0 == 48)) {
        alt19=1;
      }
 else       if ((LA19_0 == 49)) {
        alt19=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",19,0,input);
        throw nvae;
      }
switch (alt19) {
case 1:
{
{
            char_literal42=(Token)match(input,48,FOLLOW_48_in_objectExpr480);
            int alt18=2;
            int LA18_0=input.LA(1);
            if ((LA18_0 == ID)) {
              int LA18_1=input.LA(2);
              if ((LA18_1 == 39)) {
                alt18=2;
              }
 else               if ((LA18_1 == ARROW || (LA18_1 >= STAR && LA18_1 <= COMPARISON) || LA18_1 == 37 || (LA18_1 >= 40 && LA18_1 <= 44) || (LA18_1 >= 47 && LA18_1 <= 50) || LA18_1 == 53 || LA18_1 == 55 || LA18_1 == 57 || LA18_1 == 61)) {
                alt18=1;
              }
 else {
                NoViableAltException nvae=new NoViableAltException("",18,1,input);
                throw nvae;
              }
            }
 else {
              NoViableAltException nvae=new NoViableAltException("",18,0,input);
              throw nvae;
            }
switch (alt18) {
case 1:
{
                ID43=(Token)match(input,ID,FOLLOW_ID_in_objectExpr484);
                ID43_tree=(CommonTree)adaptor.create(ID43);
                adaptor.addChild(root_0,ID43_tree);
              }
            break;
case 2:
{
            pushFollow(FOLLOW_functionCall_in_objectExpr488);
            functionCall44=functionCall();
            state._fsp--;
            adaptor.addChild(root_0,functionCall44.getTree());
          }
        break;
    }
  }
}
break;
case 2:
{
pushFollow(FOLLOW_arrayAccess_in_objectExpr494);
arrayAccess45=arrayAccess();
state._fsp--;
adaptor.addChild(root_0,arrayAccess45.getTree());
}
break;
}
int alt20=2;
int LA20_0=input.LA(1);
if (((LA20_0 >= 48 && LA20_0 <= 49))) {
alt20=1;
}
switch (alt20) {
case 1:
{
pushFollow(FOLLOW_objectExpr_in_objectExpr497);
objectExpr46=objectExpr();
state._fsp--;
adaptor.addChild(root_0,objectExpr46.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
