{
  JaqlParser.transform_return retval=new JaqlParser.transform_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal62=null;
  JaqlParser.jsonObject_return jsonObject63=null;
  CommonTree string_literal62_tree=null;
  RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
  RewriteRuleSubtreeStream stream_jsonObject=new RewriteRuleSubtreeStream(adaptor,"rule jsonObject");
  try {
{
      string_literal62=(Token)match(input,51,FOLLOW_51_in_transform629);
      stream_51.add(string_literal62);
      pushFollow(FOLLOW_jsonObject_in_transform631);
      jsonObject63=jsonObject();
      state._fsp--;
      stream_jsonObject.add(jsonObject63.getTree());
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OPERATOR,"transform"),root_1);
          adaptor.addChild(root_1,stream_jsonObject.nextTree());
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
    retval.stop=input.LT(-1);
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
