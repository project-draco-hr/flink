{
  JaqlParser.substitute_return retval=new JaqlParser.substitute_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal106=null;
  Token string_literal108=null;
  Token string_literal110=null;
  Token string_literal112=null;
  JaqlParser.binding_return binding107=null;
  JaqlParser.bindings_return bindings109=null;
  JaqlParser.bindingCondition_return bindingCondition111=null;
  JaqlParser.object_return object113=null;
  CommonTree string_literal106_tree=null;
  CommonTree string_literal108_tree=null;
  CommonTree string_literal110_tree=null;
  CommonTree string_literal112_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      string_literal106=(Token)match(input,63,FOLLOW_63_in_substitute876);
      string_literal106_tree=(CommonTree)adaptor.create(string_literal106);
      adaptor.addChild(root_0,string_literal106_tree);
      pushFollow(FOLLOW_binding_in_substitute878);
      binding107=binding();
      state._fsp--;
      adaptor.addChild(root_0,binding107.getTree());
      string_literal108=(Token)match(input,61,FOLLOW_61_in_substitute880);
      string_literal108_tree=(CommonTree)adaptor.create(string_literal108);
      adaptor.addChild(root_0,string_literal108_tree);
      pushFollow(FOLLOW_bindings_in_substitute882);
      bindings109=bindings();
      state._fsp--;
      adaptor.addChild(root_0,bindings109.getTree());
      string_literal110=(Token)match(input,55,FOLLOW_55_in_substitute884);
      string_literal110_tree=(CommonTree)adaptor.create(string_literal110);
      adaptor.addChild(root_0,string_literal110_tree);
      pushFollow(FOLLOW_bindingCondition_in_substitute886);
      bindingCondition111=bindingCondition();
      state._fsp--;
      adaptor.addChild(root_0,bindingCondition111.getTree());
      string_literal112=(Token)match(input,57,FOLLOW_57_in_substitute888);
      string_literal112_tree=(CommonTree)adaptor.create(string_literal112);
      adaptor.addChild(root_0,string_literal112_tree);
      pushFollow(FOLLOW_object_in_substitute890);
      object113=object();
      state._fsp--;
      adaptor.addChild(root_0,object113.getTree());
    }
    retval.stop=input.LT(-1);
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
