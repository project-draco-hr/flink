{
  JaqlParser.script_return retval=new JaqlParser.script_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  JaqlParser.statement_return statement1=null;
  RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
  try {
{
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == VAR || LA1_0 == ID || (LA1_0 >= 51 && LA1_0 <= 52) || LA1_0 == 54 || LA1_0 == 60 || LA1_0 == 63)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            pushFollow(FOLLOW_statement_in_script139);
            statement1=statement();
            state._fsp--;
            stream_statement.add(statement1.getTree());
          }
        break;
default :
      break loop1;
  }
}
 while (true);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
    CommonTree root_1=(CommonTree)adaptor.nil();
    root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCRIPT,"SCRIPT"),root_1);
    while (stream_statement.hasNext()) {
      adaptor.addChild(root_1,stream_statement.nextTree());
    }
    stream_statement.reset();
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
