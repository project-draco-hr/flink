{
  return new Iterator<E>(){
    private int currentPos=lifo.size() - 1;
    private int posToRemove=-1;
    @Override public boolean hasNext(){
      return currentPos >= 0;
    }
    @Override public E next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
 else {
        posToRemove=currentPos;
        return lifo.get(currentPos--);
      }
    }
    @Override public void remove(){
      if (posToRemove == -1) {
        throw new NoSuchElementException();
      }
 else {
        E element=lifo.remove(posToRemove);
        set.remove(element);
      }
    }
  }
;
}
