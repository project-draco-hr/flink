{
  List<BufferOrEvent> input=new LinkedList<BufferOrEvent>();
  input.add(createBuffer(0));
  input.add(createBuffer(1));
  input.add(createSuperstep(1,0));
  input.add(createSuperstep(2,0));
  input.add(createBuffer(0));
  input.add(createSuperstep(3,0));
  input.add(createBuffer(0));
  input.add(createBuffer(1));
  input.add(createSuperstep(1,1));
  input.add(createBuffer(0));
  input.add(createBuffer(1));
  input.add(createSuperstep(2,1));
  input.add(createSuperstep(3,1));
  InputGate mockIG1=new MockInputGate(2,input);
  AbstractReader mockAR1=new MockReader(mockIG1);
  BarrierBuffer bb=new BarrierBuffer(mockIG1,mockAR1);
  BufferOrEvent nextBoe;
  check(input.get(0),nextBoe=bb.getNextNonBlocked());
  check(input.get(1),nextBoe=bb.getNextNonBlocked());
  check(input.get(2),nextBoe=bb.getNextNonBlocked());
  bb.processSuperstep(nextBoe);
  check(input.get(7),nextBoe=bb.getNextNonBlocked());
  check(input.get(8),nextBoe=bb.getNextNonBlocked());
  bb.processSuperstep(nextBoe);
  check(input.get(3),nextBoe=bb.getNextNonBlocked());
  bb.processSuperstep(nextBoe);
  check(input.get(10),nextBoe=bb.getNextNonBlocked());
  check(input.get(11),nextBoe=bb.getNextNonBlocked());
  bb.processSuperstep(nextBoe);
  check(input.get(4),nextBoe=bb.getNextNonBlocked());
  check(input.get(5),nextBoe=bb.getNextNonBlocked());
  bb.processSuperstep(nextBoe);
  check(input.get(12),nextBoe=bb.getNextNonBlocked());
  bb.processSuperstep(nextBoe);
  check(input.get(6),nextBoe=bb.getNextNonBlocked());
  check(input.get(9),nextBoe=bb.getNextNonBlocked());
  bb.cleanup();
}
