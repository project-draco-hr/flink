{
  String filePath=parameters.getString(FILE_PARAMETER_KEY,null);
  if (filePath == null) {
    throw new IllegalArgumentException("Configuration file FileOutputFormat does not contain the file path.");
  }
  try {
    this.outputFilePath=new Path(filePath);
  }
 catch (  RuntimeException rex) {
    throw new RuntimeException("Could not create a valid URI from the given file path name: " + rex.getMessage());
  }
  String writeModeParam=parameters.getString(WRITEMODE_PARAMETER_KEY,WRITEMODE_OVERWRITE);
  if (writeModeParam.equals(WRITEMODE_OVERWRITE)) {
    this.writeMode=WriteMode.OVERWRITE;
  }
 else   if (writeModeParam.equals(WRITEMODE_CREATE)) {
    this.writeMode=WriteMode.CREATE;
  }
 else {
    throw new RuntimeException("Invalid write mode configuration: " + writeModeParam);
  }
  String outDirParam=parameters.getString(OUT_DIRECTORY_PARAMETER_KEY,OUT_DIRECTORY_PARONLY);
  if (outDirParam.equals(OUT_DIRECTORY_ALWAYS)) {
    this.outDirMode=OutputDirectoryMode.ALWAYS;
  }
 else   if (outDirParam.equals(OUT_DIRECTORY_PARONLY)) {
    this.outDirMode=OutputDirectoryMode.PARONLY;
  }
 else {
    throw new RuntimeException("Invalid output directory mode configuration: " + outDirParam);
  }
  this.openTimeout=parameters.getLong(OUTPUT_STREAM_OPEN_TIMEOUT_KEY,FileInputFormat.DEFAULT_OPENING_TIMEOUT);
  if (this.openTimeout < 0) {
    this.openTimeout=FileInputFormat.DEFAULT_OPENING_TIMEOUT;
    if (LOG.isWarnEnabled())     LOG.warn("Ignoring invalid parameter for stream opening timeout (requires a positive value or zero=infinite): " + this.openTimeout);
  }
 else   if (this.openTimeout == 0) {
    this.openTimeout=Long.MAX_VALUE;
  }
}
