{
  FileDataSource sourceA=new FileDataSource(DummyInputFormat.class,IN_FILE_1);
  MatchContract mat1=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(sourceA).input2(sourceA).build();
  MatchContract mat2=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(sourceA).input2(mat1).build();
  MatchContract mat3=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(sourceA).input2(mat2).build();
  MatchContract mat4=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(sourceA).input2(mat3).build();
  MatchContract mat5=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(sourceA).input2(mat4).build();
  MapContract ma=new MapContract.Builder(IdentityMap.class).input(sourceA).build();
  MatchContract mat6=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(ma).input2(ma).build();
  MatchContract mat7=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(ma).input2(mat6).build();
  MatchContract mat8=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(ma).input2(mat7).build();
  MatchContract mat9=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(ma).input2(mat8).build();
  MatchContract mat10=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(ma).input2(mat9).build();
  CoGroupContract co=new CoGroupContract.Builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(mat5).input2(mat10).build();
  FileDataSink sink=new FileDataSink(DummyOutputFormat.class,OUT_FILE_1,co);
  Plan plan=new Plan(sink,"Branching Source Multiple Times");
  OptimizedPlan oPlan=this.compiler.compile(plan,this.instanceType);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
}
