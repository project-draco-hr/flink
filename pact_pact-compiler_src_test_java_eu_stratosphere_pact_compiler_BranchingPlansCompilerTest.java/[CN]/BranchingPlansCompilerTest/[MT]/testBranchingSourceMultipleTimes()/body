{
  FileDataSource sourceA=new FileDataSource(DummyInputFormat.class,IN_FILE_1);
  MatchContract mat1=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,sourceA,sourceA);
  MatchContract mat2=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,sourceA,mat1);
  MatchContract mat3=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,sourceA,mat2);
  MatchContract mat4=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,sourceA,mat3);
  MatchContract mat5=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,sourceA,mat4);
  MapContract ma=new MapContract(IdentityMap.class,sourceA);
  MatchContract mat6=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,ma,ma);
  MatchContract mat7=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,ma,mat6);
  MatchContract mat8=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,ma,mat7);
  MatchContract mat9=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,ma,mat8);
  MatchContract mat10=new MatchContract(DummyMatchStub.class,PactInteger.class,0,0,ma,mat9);
  CoGroupContract co=new CoGroupContract(DummyCoGroupStub.class,PactInteger.class,0,0,mat5,mat10);
  FileDataSink sink=new FileDataSink(DummyOutputFormat.class,OUT_FILE_1,co);
  Plan plan=new Plan(sink,"Branching Source Multiple Times");
  OptimizedPlan oPlan=this.compiler.compile(plan,this.instanceType);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
}
