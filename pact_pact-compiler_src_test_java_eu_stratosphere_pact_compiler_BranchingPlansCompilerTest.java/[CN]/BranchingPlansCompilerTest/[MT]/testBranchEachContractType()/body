{
  FileDataSource sourceA=new FileDataSource(DummyInputFormat.class,IN_FILE_1,"Source A");
  FileDataSource sourceB=new FileDataSource(DummyInputFormat.class,IN_FILE_1,"Source B");
  FileDataSource sourceC=new FileDataSource(DummyInputFormat.class,IN_FILE_1,"Source C");
  MapContract branchingMap=MapContract.builder(IdentityMap.class).input(sourceA).build();
  ReduceContract branchingReduce=new ReduceContract.Builder(IdentityReduce.class,PactInteger.class,0).input(branchingMap).build();
  MatchContract branchingMatch=MatchContract.builder(DummyMatchStub.class,PactInteger.class,0,0).input1(sourceB).input2(sourceC).build();
  branchingMatch.addFirstInput(sourceB);
  branchingMatch.addFirstInput(sourceC);
  CoGroupContract branchingCoGroup=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(sourceA).input2(sourceB).build();
  CrossContract branchingCross=CrossContract.builder(DummyCrossStub.class).input1(branchingReduce).input2(branchingCoGroup).build();
  CoGroupContract co1=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(branchingCross).input2(branchingCross).build();
  CoGroupContract co2=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(branchingMap).input2(branchingMatch).build();
  MapContract ma=MapContract.builder(IdentityMap.class).input(co2).build();
  CoGroupContract co3=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(ma).input2(branchingMatch).build();
  CoGroupContract co4=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(co1).input2(branchingCoGroup).build();
  CoGroupContract co5=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(branchingReduce).input2(co3).build();
  CoGroupContract co6=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(co4).input2(co5).build();
  FileDataSink sink=new FileDataSink(DummyOutputFormat.class,OUT_FILE_1,co6);
  sink.addInput(sourceA);
  sink.addInput(co3);
  sink.addInput(co4);
  sink.addInput(co1);
  Plan plan=new Plan(sink,"Branching of each contract type");
  OptimizedPlan oPlan=this.compiler.compile(plan,this.instanceType);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
}
