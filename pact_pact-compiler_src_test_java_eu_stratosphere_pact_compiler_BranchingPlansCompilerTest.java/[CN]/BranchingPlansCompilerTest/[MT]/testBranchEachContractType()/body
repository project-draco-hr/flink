{
  FileDataSource sourceA=new FileDataSource(DummyInputFormat.class,"file:///test/file1","Source A");
  FileDataSource sourceB=new FileDataSource(DummyInputFormat.class,"file:///test/file2","Source B");
  FileDataSource sourceC=new FileDataSource(DummyInputFormat.class,"file:///test/file3","Source C");
  MapContract map1=MapContract.builder(IdentityMap.class).input(sourceA).name("Map 1").build();
  ReduceContract reduce1=new ReduceContract.Builder(IdentityReduce.class,PactInteger.class,0).input(map1).name("Reduce 1").build();
  MatchContract match1=MatchContract.builder(DummyMatchStub.class,PactInteger.class,0,0).input1(sourceB,sourceB,sourceC).input2(sourceC).name("Match 1").build();
  ;
  CoGroupContract cogroup1=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(sourceA).input2(sourceB).name("CoGroup 1").build();
  CrossContract cross1=CrossContract.builder(DummyCrossStub.class).input1(reduce1).input2(cogroup1).name("Cross 1").build();
  CoGroupContract cogroup2=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(cross1).input2(cross1).name("CoGroup 2").build();
  CoGroupContract cogroup3=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(map1).input2(match1).name("CoGroup 3").build();
  MapContract map2=MapContract.builder(IdentityMap.class).input(cogroup3).name("Map 2").build();
  CoGroupContract cogroup4=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(map2).input2(match1).name("CoGroup 4").build();
  CoGroupContract cogroup5=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(cogroup2).input2(cogroup1).name("CoGroup 5").build();
  CoGroupContract cogroup6=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(reduce1).input2(cogroup4).name("CoGroup 6").build();
  CoGroupContract cogroup7=CoGroupContract.builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(cogroup5).input2(cogroup6).name("CoGroup 7").build();
  FileDataSink sink=new FileDataSink(DummyOutputFormat.class,OUT_FILE,cogroup7);
  Plan plan=new Plan(sink,"Branching of each contract type");
  OptimizedPlan oPlan=compileNoStats(plan);
  NepheleJobGraphGenerator jobGen=new NepheleJobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
}
