{
  FileDataSource source1=new FileDataSource(DummyInputFormat.class,IN_FILE_1);
  FileDataSource source2=new FileDataSource(DummyInputFormat.class,IN_FILE_1);
  MatchContract mat1=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(source1).input2(source2).build();
  MapContract ma1=new MapContract.Builder(IdentityMap.class).input(mat1).build();
  ReduceContract r1=new ReduceContract.Builder(IdentityReduce.class,PactInteger.class,0).input(ma1).build();
  ReduceContract r2=new ReduceContract.Builder(IdentityReduce.class,PactInteger.class,0).input(mat1).build();
  MapContract ma2=new MapContract.Builder(IdentityMap.class).input(mat1).build();
  MapContract ma3=new MapContract.Builder(IdentityMap.class).input(ma2).build();
  MatchContract mat2=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(r1).input2(ma2).build();
  mat2.addFirstInput(r2);
  mat2.addFirstInput(ma2);
  mat2.addFirstInput(ma3);
  FileDataSink sink=new FileDataSink(DummyOutputFormat.class,OUT_FILE_1,mat2);
  Plan plan=new Plan(sink,"Branching Union");
  OptimizedPlan oPlan=this.compiler.compile(plan,this.instanceType);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
}
