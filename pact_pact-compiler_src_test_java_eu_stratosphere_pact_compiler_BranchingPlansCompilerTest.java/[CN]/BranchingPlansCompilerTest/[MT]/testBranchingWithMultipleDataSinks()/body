{
  FileDataSource sourceA=new FileDataSource(DummyInputFormat.class,IN_FILE_1);
  FileDataSource sourceB=new FileDataSource(DummyInputFormat.class,IN_FILE_1);
  FileDataSource sourceC=new FileDataSource(DummyInputFormat.class,IN_FILE_1);
  CoGroupContract co=new CoGroupContract.Builder(DummyCoGroupStub.class,PactInteger.class,0,0).input1(sourceA).input2(sourceB).build();
  MapContract ma=new MapContract.Builder(IdentityMap.class).input(co).build();
  MatchContract mat1=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(sourceB).input2(sourceC).build();
  MatchContract mat2=new MatchContract.Builder(DummyMatchStub.class,PactInteger.class,0,0).input1(ma).input2(mat1).build();
  ReduceContract r=new ReduceContract.Builder(IdentityReduce.class,PactInteger.class,0).input(ma).build();
  CrossContract c=new CrossContract.Builder(DummyCrossStub.class).input1(r).input2(mat2).build();
  FileDataSink sinkA=new FileDataSink(DummyOutputFormat.class,OUT_FILE_1,c);
  FileDataSink sinkB=new FileDataSink(DummyOutputFormat.class,OUT_FILE_2,mat2);
  FileDataSink sinkC=new FileDataSink(DummyOutputFormat.class,OUT_FILE_3,mat2);
  List<GenericDataSink> sinks=new ArrayList<GenericDataSink>();
  sinks.add(sinkA);
  sinks.add(sinkB);
  sinks.add(sinkC);
  Plan plan=new Plan(sinks,"Branching Plans With Multiple Data Sinks");
  OptimizedPlan oPlan=this.compiler.compile(plan,this.instanceType);
  JobGraphGenerator jobGen=new JobGraphGenerator();
  jobGen.compileJobGraph(oPlan);
}
