{
  long val=0;
  boolean neg=false;
  final int delimLimit=limit - delimiter.length + 1;
  this.result=reusable;
  if (bytes[startPos] == '-') {
    neg=true;
    startPos++;
    if (startPos == limit || (startPos < delimLimit && delimiterNext(bytes,startPos,delimiter))) {
      setErrorState(ParseErrorState.NUMERIC_VALUE_ORPHAN_SIGN);
      return -1;
    }
  }
  for (int i=startPos; i < limit; i++) {
    if (i < delimLimit && delimiterNext(bytes,i,delimiter)) {
      if (i == startPos) {
        setErrorState(ParseErrorState.EMPTY_STRING);
        return -1;
      }
      reusable.setValue((int)(neg ? -val : val));
      return i + delimiter.length;
    }
    if (bytes[i] < 48 || bytes[i] > 57) {
      setErrorState(ParseErrorState.NUMERIC_VALUE_ILLEGAL_CHARACTER);
      return -1;
    }
    val*=10;
    val+=bytes[i] - 48;
    if (val > OVERFLOW_BOUND && (!neg || val > UNDERFLOW_BOUND)) {
      setErrorState(ParseErrorState.NUMERIC_VALUE_OVERFLOW_UNDERFLOW);
      return -1;
    }
  }
  reusable.setValue((int)(neg ? -val : val));
  return limit;
}
