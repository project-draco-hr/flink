{
  StreamExecutionEnvironment env=new DummyStreamExecutionEnvironment();
  List<StreamTransformation<?>> transformations=new ArrayList<>();
  int initValue=1;
  FoldApplyWindowFunction<Integer,TimeWindow,Integer,Integer> foldWindowFunction=new FoldApplyWindowFunction<>(initValue,new FoldFunction<Integer,Integer>(){
    private static final long serialVersionUID=-4849549768529720587L;
    @Override public Integer fold(    Integer accumulator,    Integer value) throws Exception {
      return accumulator + value;
    }
  }
,new WindowFunction<Integer,Integer,Integer,TimeWindow>(){
    @Override public void apply(    Integer integer,    TimeWindow window,    Integer input,    Collector<Integer> out) throws Exception {
      out.collect(input);
    }
  }
);
  AccumulatingProcessingTimeWindowOperator<Integer,Integer,Integer> windowOperator=new AccumulatingProcessingTimeWindowOperator<>(foldWindowFunction,new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=-7951310554369722809L;
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
,IntSerializer.INSTANCE,IntSerializer.INSTANCE,3000,3000);
  SourceFunction<Integer> sourceFunction=new SourceFunction<Integer>(){
    private static final long serialVersionUID=8297735565464653028L;
    @Override public void run(    SourceContext<Integer> ctx) throws Exception {
    }
    @Override public void cancel(){
    }
  }
;
  SourceTransformation<Integer> source=new SourceTransformation<>("",new StreamSource<Integer>(sourceFunction),BasicTypeInfo.INT_TYPE_INFO,1);
  transformations.add(new OneInputTransformation<>(source,"test",windowOperator,BasicTypeInfo.INT_TYPE_INFO,1));
  StreamGraph streamGraph=StreamGraphGenerator.generate(env,transformations);
  List<Integer> result=new ArrayList<>();
  List<Integer> input=new ArrayList<>();
  List<Integer> expected=new ArrayList<>();
  input.add(1);
  input.add(2);
  input.add(3);
  for (  int value : input) {
    initValue+=value;
  }
  expected.add(initValue);
  foldWindowFunction.apply(0,new TimeWindow(0,1),input,new ListCollector<Integer>(result));
  Assert.assertEquals(expected,result);
}
