{
  Configuration config=ZooKeeperTestUtils.createZooKeeperRecoveryModeConfig(ZooKeeper.getConnectString(),FileStateBackendBasePath.getPath());
  config.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER,2);
  config.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER,1);
  TestingCluster flink=new TestingCluster(config,false,false);
  try {
    final Deadline deadline=TestTimeOut.fromNow();
    flink.start(true);
    JobGraph jobGraph=createBlockingJobGraph();
    List<ActorRef> bothJobManagers=flink.getJobManagersAsJava();
    ActorGateway leadingJobManager=flink.getLeaderGateway(deadline.timeLeft());
    ActorGateway nonLeadingJobManager;
    if (bothJobManagers.get(0).equals(leadingJobManager.actor())) {
      nonLeadingJobManager=new AkkaActorGateway(bothJobManagers.get(1),null);
    }
 else {
      nonLeadingJobManager=new AkkaActorGateway(bothJobManagers.get(0),null);
    }
    log.info("Leading job manager: " + leadingJobManager);
    log.info("Non-leading job manager: " + nonLeadingJobManager);
    nonLeadingJobManager.tell(new SubmitJob(jobGraph,ListeningBehaviour.DETACHED));
    log.info("Submitted job graph to " + nonLeadingJobManager);
    JobManagerActorTestUtils.waitForJobStatus(jobGraph.getJobID(),JobStatus.RUNNING,leadingJobManager,deadline.timeLeft());
    log.info("Wait that the non-leader removes the submitted job.");
    boolean success=false;
    while (!success && deadline.hasTimeLeft()) {
      JobStatusResponse jobStatusResponse=JobManagerActorTestUtils.requestJobStatus(jobGraph.getJobID(),nonLeadingJobManager,deadline.timeLeft());
      if (jobStatusResponse instanceof JobManagerMessages.JobNotFound) {
        success=true;
      }
 else {
        log.info(((JobManagerMessages.CurrentJobStatus)jobStatusResponse).status().toString());
        Thread.sleep(100);
      }
    }
    if (!success) {
      fail("Non-leading JM was still holding reference to the job graph.");
    }
  }
  finally {
    flink.shutdown();
  }
  verifyCleanRecoveryState(config);
}
