{
  return new AggregateCombineHarness<Long,NumericColumnSummary<Long>,LongSummaryAggregator>(){
    @Override protected void compareResults(    NumericColumnSummary<Long> result1,    NumericColumnSummary<Long> result2){
      Assert.assertEquals(result1.getTotalCount(),result2.getTotalCount());
      Assert.assertEquals(result1.getNullCount(),result2.getNullCount());
      Assert.assertEquals(result1.getMissingCount(),result2.getMissingCount());
      Assert.assertEquals(result1.getNonMissingCount(),result2.getNonMissingCount());
      Assert.assertEquals(result1.getInfinityCount(),result2.getInfinityCount());
      Assert.assertEquals(result1.getNanCount(),result2.getNanCount());
      Assert.assertEquals(result1.containsNull(),result2.containsNull());
      Assert.assertEquals(result1.containsNonNull(),result2.containsNonNull());
      Assert.assertEquals(result1.getMin().longValue(),result2.getMin().longValue());
      Assert.assertEquals(result1.getMax().longValue(),result2.getMax().longValue());
      Assert.assertEquals(result1.getSum().longValue(),result2.getSum().longValue());
      Assert.assertEquals(result1.getMean().doubleValue(),result2.getMean().doubleValue(),1e-12d);
      Assert.assertEquals(result1.getVariance().doubleValue(),result2.getVariance().doubleValue(),1e-9d);
      Assert.assertEquals(result1.getStandardDeviation().doubleValue(),result2.getStandardDeviation().doubleValue(),1e-12d);
    }
  }
.summarize(values);
}
