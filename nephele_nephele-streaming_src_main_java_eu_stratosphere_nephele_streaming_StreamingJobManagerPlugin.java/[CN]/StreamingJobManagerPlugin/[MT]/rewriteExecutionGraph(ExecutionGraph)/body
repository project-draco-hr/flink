{
  JobID jobId=executionGraph.getJobID();
  LatencyOptimizerThread optimizerThread=new LatencyOptimizerThread(this,executionGraph);
  latencyOptimizerThreads.put(jobId,optimizerThread);
  optimizerThread.start();
  final Runnable run=new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(30000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        return;
      }
      int count=0;
      final Iterator<ExecutionVertex> it=new ExecutionGraphIterator(executionGraph,true);
      final List<ExecutionVertexID> vertexIDs=new ArrayList<ExecutionVertexID>();
      AbstractInstance instance=null;
      while (it.hasNext()) {
        ++count;
        final ExecutionVertex vertex=it.next();
        if (count > 1 && count < 6) {
          if (instance == null) {
            instance=vertex.getAllocatedResource().getInstance();
          }
          vertexIDs.add(vertex.getID());
        }
      }
      constructStreamChain(executionGraph.getJobID(),instance,vertexIDs);
    }
  }
;
  new Thread(run).start();
  return executionGraph;
}
