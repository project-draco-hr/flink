{
switch (progId) {
case 1:
{
      final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
      DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getSmall3TupleDataSet(env);
      DataSet<Tuple3<Integer,Long,String>> identityMapDs=ds.map(new Mapper<Tuple3<Integer,Long,String>,Tuple3<Integer,Long,String>>()).returns("Tuple3<Integer, Long, String>");
      List<Tuple3<Integer,Long,String>> result=identityMapDs.collect();
      String expectedResult="(2,2,Hello)\n" + "(3,2,Hello world)\n" + "(1,1,Hi)\n";
      compareResultAsText(result,expectedResult);
      break;
    }
case 2:
{
    final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getSmall3TupleDataSet(env);
    DataSet<Tuple3<Integer,Long,String>> identityMapDs=ds.map(new Mapper<Tuple3<Integer,Long,String>,Tuple3<Integer,Long,String>>()).returns(new TupleTypeInfo<Tuple3<Integer,Long,String>>(BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.LONG_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO));
    List<Tuple3<Integer,Long,String>> result=identityMapDs.collect();
    String expectedResult="(2,2,Hello)\n" + "(3,2,Hello world)\n" + "(1,1,Hi)\n";
    compareResultAsText(result,expectedResult);
    break;
  }
case 3:
{
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple3<Integer,Long,String>> ds=CollectionDataSets.getSmall3TupleDataSet(env);
  DataSet<Integer> identityMapDs=ds.flatMap(new FlatMapper<Tuple3<Integer,Long,String>,Integer>()).returns(Integer.class);
  List<Integer> result=identityMapDs.collect();
  String expectedResult="2\n" + "3\n" + "1\n";
  compareResultAsText(result,expectedResult);
  break;
}
default :
throw new IllegalArgumentException("Invalid program id");
}
}
